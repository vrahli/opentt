\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
--open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity3 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                   (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                   (X : ChoiceExt W C)
                   (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                   (F : Freeze {L} W C K P G N)
                   (E : Axiom.Extensionality.Propositional.Extensionality 0‚Ñì (lsuc(lsuc(L))))
                   (CB : ChoiceBar W M C K P G X N V F E) -- TODO - We won't need everything from there: use a different module
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)

{--
open import type_sys_props_nat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qnat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qlt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_free(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_pi(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_sum(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_set(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_eq(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_union(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_tsquash(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_ffdefs(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lift(W)(M)(C)(K)(P)(G)(E)
--}

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)

‚ÜíŒ£highestUpdCtxt-upd : {name : Name} {f b : Term} {w : ùïé¬∑} {n : ‚Ñï}
                        ‚Üí # f
                        ‚Üí ¬¨Names f
                        ‚Üí stepsPresHighest‚Ñï name f (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w
                        ‚Üí Œ£highestUpdCtxt name f n (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w w
‚ÜíŒ£highestUpdCtxt-upd {name} {f} {b} {w} {n} cf nnf (k , v , w' , comp , isv , ind) = {!!}



-- We also need something about the way f computes as for the proof about 'differ'
step-sat-isHighest‚Ñï : {w1 w2 : ùïé¬∑} {a b : Term} {n : ‚Ñï} {name : Name} {f : Term}
                       ‚Üí step a w1 ‚â° just (b , w2)
                       ‚Üí stepsPresHighest‚Ñï name f b w2
                       ‚Üí updCtxt name f a
                       ‚Üí ¬¨Names f
                       ‚Üí # f
                       --‚Üí getT 0 name w2 ‚â° just (NUM n)
                       ‚Üí Œ£highestUpdCtxt name f n b w1 w2
step-sat-isHighest‚Ñï {w1} {w2} {.NAT} {b} {n} {name} {f} comp indb updCtxt-NAT nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , NAT , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-NAT
step-sat-isHighest‚Ñï {w1} {w2} {.QNAT} {b} {n} {name} {f} comp indb updCtxt-QNAT nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , QNAT , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-QNAT
step-sat-isHighest‚Ñï {w1} {w2} {.(LT a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-LT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LT a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-LT _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(QLT a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-QLT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , QLT a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-QLT _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(NUM x)} {b} {n} {name} {f} comp indb (updCtxt-NUM x) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , NUM x , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-NUM x
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp indb (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf cf with is-NUM a
... | inj‚ÇÅ (k1 , p) rewrite p with is-NUM b‚ÇÅ
... |    inj‚ÇÅ (k2 , q) rewrite q with k1 <? k2
... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , c , w1 , refl , (Œª x ‚Üí x , x) , ctxt‚ÇÇ
... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , d , w1 , refl , (Œª x ‚Üí x , x) , ctxt‚ÇÉ
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp indb (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf cf | inj‚ÇÅ (k1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt-IFLT‚ÇÇ ctxt‚ÇÇ ctxt‚ÇÉ ind
  where
    ind : Œ£highestUpdCtxt name f n b‚ÇÅ' w1 w1'
    ind = step-sat-isHighest‚Ñï z (stepsPresHighest‚Ñï-IFLT‚ÇÇ‚Üí indb) ctxt‚ÇÅ nnf cf
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp indb (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf cf | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt-IFLT‚ÇÅ ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ ind
  where
    ind : Œ£highestUpdCtxt name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï z (stepsPresHighest‚Ñï-IFLT‚ÇÅ‚Üí indb) ctxt nnf cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï {w1} {w2} {.(PI a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-PI a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , PI a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-PI _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(LAMBDA a)} {b} {n} {name} {f} comp indb (updCtxt-LAMBDA a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LAMBDA a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-LAMBDA _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(APPLY a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-APPLY a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = concl d
  where
    d : updCtxt name f t ‚äé t ‚â° updBody name f
    d = updCtxt-LAMBDA‚Üí ctxt

    concl : updCtxt name f t ‚äé t ‚â° updBody name f
            ‚Üí Œ£highestUpdCtxt name f n (sub b‚ÇÅ t) w1 w1
    concl (inj‚ÇÅ u) = 0 , sub b‚ÇÅ t , w1 , refl , (Œª s ‚Üí s , s) , updCtxt-sub cf ctxt‚ÇÅ u
    concl (inj‚ÇÇ u) rewrite u = c2
      where
        indb' : stepsPresHighest‚Ñï name f (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        indb' rewrite u | sub-upd name f b‚ÇÅ cf = indb

        c1 : Œ£highestUpdCtxt name f n (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1
        c1 = {!!} --‚ÜíŒ£highestUpdCtxt-upd {name} {f} {b‚ÇÅ} {w1} {n} cf nnf indb'

        c2 : Œ£highestUpdCtxt name f n (sub b‚ÇÅ (updBody name f)) w1 w1
        c2 rewrite sub-upd name f b‚ÇÅ cf = c1
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , p) rewrite p = ‚ä•-elim (updCtxt-CS‚Üí ctxt)
... |    inj‚ÇÇ p = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(FIX a)} {b} {n} {name} {f} comp indb (updCtxt-FIX a ctxt) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(LET a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-LET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SUM a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-SUM a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SUM a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-SUM _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(PAIR a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-PAIR a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , PAIR a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-PAIR _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(SPREAD a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-SPREAD a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SET a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-SET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SET a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-SET _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(TUNION a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-TUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TUNION a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-TUNION _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(UNION a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-UNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , UNION a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-UNION _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(QTUNION a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-QTUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , QTUNION a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-QTUNION _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(INL a)} {b} {n} {name} {f} comp indb (updCtxt-INL a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , INL a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-INL _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(INR a)} {b} {n} {name} {f} comp indb (updCtxt-INR a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , INR a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-INR _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(DECIDE a b‚ÇÅ c)} {b} {n} {name} {f} comp indb (updCtxt-DECIDE a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(EQ a b‚ÇÅ c)} {b} {n} {name} {f} comp indb (updCtxt-EQ a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , EQ a b‚ÇÅ c , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-EQ _ _ _ ctxt ctxt‚ÇÅ ctxt‚ÇÇ
step-sat-isHighest‚Ñï {w1} {w2} {.AX} {b} {n} {name} {f} comp indb updCtxt-AX nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , AX , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-AX
step-sat-isHighest‚Ñï {w1} {w2} {.FREE} {b} {n} {name} {f} comp indb updCtxt-FREE nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , FREE , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-FREE
step-sat-isHighest‚Ñï {w1} {w2} {.(CHOOSE a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-CHOOSE a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(TSQUASH a)} {b} {n} {name} {f} comp indb (updCtxt-TSQUASH a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TSQUASH a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-TSQUASH _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(TTRUNC a)} {b} {n} {name} {f} comp indb (updCtxt-TTRUNC a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TTRUNC a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-TTRUNC _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(TCONST a)} {b} {n} {name} {f} comp indb (updCtxt-TCONST a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TCONST a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-TCONST _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(SUBSING a)} {b} {n} {name} {f} comp indb (updCtxt-SUBSING a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SUBSING a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-SUBSING _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(DUM a)} {b} {n} {name} {f} comp indb (updCtxt-DUM a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , DUM a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-DUM _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(FFDEFS a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-FFDEFS a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , FFDEFS a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-FFDEFS _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(UNIV x)} {b} {n} {name} {f} comp indb (updCtxt-UNIV x) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , UNIV x , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-UNIV x
step-sat-isHighest‚Ñï {w1} {w2} {.(LIFT a)} {b} {n} {name} {f} comp indb (updCtxt-LIFT a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LIFT a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-LIFT _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(LOWER a)} {b} {n} {name} {f} comp indb (updCtxt-LOWER a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LOWER a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-LOWER _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(SHRINK a)} {b} {n} {name} {f} comp indb (updCtxt-SHRINK a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SHRINK a , w1 , refl , (Œª x ‚Üí x , x) , updCtxt-SHRINK _ ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(upd name f)} {b} {n} {name} {f} comp indb updCtxt-upd nnf cf = {!!}
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))

{--
step-sat-isHighest‚Ñï {w1} {w2} {.NAT} {b} {n} {name} {f} comp indb updCtxt-NAT nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , NAT , w1 , refl , (n , g0 , ‚â§-refl) , updCtxt-NAT
step-sat-isHighest‚Ñï {w1} {w2} {.QNAT} {b} {n} {name} {f} comp indb updCtxt-QNAT nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-QNAT
step-sat-isHighest‚Ñï {w1} {w2} {.(LT a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-LT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-LT a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(QLT a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-QLT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-QLT a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(NUM x)} {b} {n} {name} {f} comp indb (updCtxt-NUM x) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-NUM x
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp indb (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf cf with is-NUM a
... | inj‚ÇÅ (k1 , p) rewrite p with is-NUM b‚ÇÅ
... |    inj‚ÇÅ (k2 , q) rewrite q with k1 <? k2
... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , ctxt‚ÇÇ
... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , ctxt‚ÇÉ
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp indb (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf cf | inj‚ÇÅ (k1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  fst ind ,
  fst hn ,
  IFLT (NUM k1) (fst (snd (snd ind))) c d ,
  fst (snd (snd (snd ind))) ,
  fst (snd hn) ,
  snd (snd hn) ,
  updCtxt-IFLT (NUM k1) (fst (snd (snd ind))) c d ctxt (snd (snd (snd (snd (snd (snd ind)))))) ctxt‚ÇÇ ctxt‚ÇÉ
  where
    ind : getT‚â§‚Ñï w1 n name √ó Œ£highestUpdCtxt name f n b‚ÇÅ' w1'
    ind = step-sat-isHighest‚Ñï z {!indb!} ctxt‚ÇÅ nnf cf

    hn : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ (steps k' (IFLT (NUM k1) b‚ÇÅ' c d , w1') ‚â° (IFLT (NUM k1) (fst (snd (snd ind))) c d , fst (snd (snd (snd ind)))))
                        (isHighest‚Ñï {k'} {w1'} {fst (snd (snd (snd ind)))} {IFLT (NUM k1) b‚ÇÅ' c d} {IFLT (NUM k1) (fst (snd (snd ind))) c d} n name))
    hn = isHighest‚Ñï-IFLT‚ÇÇ {fst (snd ind)} {b‚ÇÅ'} {fst (snd (snd ind))} {w1'} {fst (snd (snd (snd ind)))} {n} {name} k1 c d (fst (snd (snd (snd (snd ind))))) (fst (snd (snd (snd (snd (snd ind))))))
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp indb (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf cf | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  fst ind ,
  fst hn ,
  IFLT (fst (snd (snd ind))) b‚ÇÅ c d ,
  fst (snd (snd (snd ind))) ,
  fst (snd hn) ,
  snd (snd hn) ,
  updCtxt-IFLT (fst (snd (snd ind))) b‚ÇÅ c d (snd (snd (snd (snd (snd (snd ind)))))) ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ
  where
    ind : getT‚â§‚Ñï w1 n name √ó Œ£highestUpdCtxt name f n a' w1'
    ind = step-sat-isHighest‚Ñï z {!!} ctxt nnf cf

    hn : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ (steps k' (IFLT a' b‚ÇÅ c d , w1') ‚â° (IFLT (fst (snd (snd ind))) b‚ÇÅ c d , fst (snd (snd (snd ind)))))
                        (isHighest‚Ñï {k'} {w1'} {fst (snd (snd (snd ind)))} {IFLT a' b‚ÇÅ c d} {IFLT (fst (snd (snd ind))) b‚ÇÅ c d} n name))
    hn = isHighest‚Ñï-IFLT‚ÇÅ {fst (snd ind)} {a'} {fst (snd (snd ind))} {w1'} {fst (snd (snd (snd ind)))} {n} {name} b‚ÇÅ c d (fst (snd (snd (snd (snd ind))))) (fst (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï {w1} {w2} {.(PI a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-PI a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-PI a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(LAMBDA a)} {b} {n} {name} {f} comp indb (updCtxt-LAMBDA a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-LAMBDA a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(APPLY a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-APPLY a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = concl d
  where
    d : updCtxt name f t ‚äé t ‚â° updBody name f
    d = updCtxt-LAMBDA‚Üí ctxt

    concl : updCtxt name f t ‚äé t ‚â° updBody name f
            ‚Üí getT‚â§‚Ñï w1 n name √ó Œ£highestUpdCtxt name f n (sub b‚ÇÅ t) w1
    concl (inj‚ÇÅ u) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-sub cf ctxt‚ÇÅ u
    concl (inj‚ÇÇ u) rewrite u = c2
      where
        c1 : Œ£highestUpdCtxt name f n (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
             --updCtxt name f (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))))
        c1 = {!!}
-- This is not going to work.
-- Instead, we need to prove that b reduces to a term b' such that updCtxt name f b'
-- and that this computation satisfies isHighest‚Ñï

        c2 : getT‚â§‚Ñï w1 n name √ó Œ£highestUpdCtxt name f n (sub b‚ÇÅ (updBody name f)) w1
        c2 rewrite sub-upd name f b‚ÇÅ cf = (n , g0 , ‚â§-refl) , c1 -- 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , c1
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , p) rewrite p = ‚ä•-elim (updCtxt-CS‚Üí ctxt)
... |    inj‚ÇÇ p = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(FIX a)} {b} {n} {name} {f} comp indb (updCtxt-FIX a ctxt) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(LET a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-LET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SUM a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-SUM a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-SUM a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(PAIR a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-PAIR a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SPREAD a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-SPREAD a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SET a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-SET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-SET a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(TUNION a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-TUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-TUNION a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(UNION a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-UNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-UNION a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(QTUNION a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-QTUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-QTUNION a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(INL a)} {b} {n} {name} {f} comp indb (updCtxt-INL a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-INL a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(INR a)} {b} {n} {name} {f} comp indb (updCtxt-INR a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-INR a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(DECIDE a b‚ÇÅ c)} {b} {n} {name} {f} comp indb (updCtxt-DECIDE a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(EQ a b‚ÇÅ c)} {b} {n} {name} {f} comp indb (updCtxt-EQ a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-EQ a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ
step-sat-isHighest‚Ñï {w1} {w2} {.AX} {b} {n} {name} {f} comp indb updCtxt-AX nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-AX
step-sat-isHighest‚Ñï {w1} {w2} {.FREE} {b} {n} {name} {f} comp indb updCtxt-FREE nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-FREE
step-sat-isHighest‚Ñï {w1} {w2} {.(CHOOSE a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-CHOOSE a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(TSQUASH a)} {b} {n} {name} {f} comp indb (updCtxt-TSQUASH a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-TSQUASH a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(TTRUNC a)} {b} {n} {name} {f} comp indb (updCtxt-TTRUNC a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-TTRUNC a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(TCONST a)} {b} {n} {name} {f} comp indb (updCtxt-TCONST a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-TCONST a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(SUBSING a)} {b} {n} {name} {f} comp indb (updCtxt-SUBSING a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-SUBSING a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(DUM a)} {b} {n} {name} {f} comp indb (updCtxt-DUM a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-DUM a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(FFDEFS a b‚ÇÅ)} {b} {n} {name} {f} comp indb (updCtxt-FFDEFS a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-FFDEFS a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(UNIV x)} {b} {n} {name} {f} comp indb (updCtxt-UNIV x) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-UNIV x
step-sat-isHighest‚Ñï {w1} {w2} {.(LIFT a)} {b} {n} {name} {f} comp indb (updCtxt-LIFT a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-LIFT a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(LOWER a)} {b} {n} {name} {f} comp indb (updCtxt-LOWER a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-LOWER a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(SHRINK a)} {b} {n} {name} {f} comp indb (updCtxt-SHRINK a ctxt) nnf cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , 0 , _ , _ , refl , (n , g0 , ‚â§-refl) , updCtxt-SHRINK a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(upd name f)} {b} {n} {name} {f} comp indb updCtxt-upd nnf cf = {!!}
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
--}



steps‚Üíùïés : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term}
             ‚Üí steps k (a , w1) ‚â° (b , w2)
             ‚Üí List ùïé¬∑
steps‚Üíùïés {0} {w1} {w2} {a} {b} comp = Data.List.[ w1 ]
steps‚Üíùïés {suc k} {w1} {w2} {a} {b} comp with step a w1
... | just (x , w) = w1 ‚à∑ steps‚Üíùïés {k} {w} {w2} {x} {b} comp
... | nothing = Data.List.[ w1 ]



isHighest‚Ñï‚Üí : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï) (name : Name)
               (comp : steps k (a , w1) ‚â° (b , w2))
               ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
               ‚Üí (w : ùïé¬∑) ‚Üí w ‚àà steps‚Üíùïés {k} {w1} {w2} {a} {b} comp ‚Üí getT‚â§‚Ñï w n name
isHighest‚Ñï‚Üí {0} {w1} {w2} {a} {b} n name comp h w (here px) rewrite px = h
isHighest‚Ñï‚Üí {suc k} {w1} {w2} {a} {b} n name comp h w i with step‚äé a w1
... | inj‚ÇÅ (a' , w' , z) rewrite z = c i
  where
    c : w ‚àà (w1 ‚à∑ steps‚Üíùïés {k} {w'} {w2} {a'} {b} comp) ‚Üí getT‚â§‚Ñï w n name
    c (here px) rewrite px = fst h
    c (there j) = isHighest‚Ñï‚Üí {k} {w'} {w2} {a'} {b} n name comp (snd h) w j
... | inj‚ÇÇ z rewrite z = c i
  where
    c : w ‚àà (w1 ‚à∑ []) ‚Üí getT‚â§‚Ñï w n name
    c (here px) rewrite px = h



‚ÜíisHighest‚Ñï : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï) (name : Name)
               (comp : steps k (a , w1) ‚â° (b , w2))
               ‚Üí ((w : ùïé¬∑) ‚Üí w ‚àà steps‚Üíùïés {k} {w1} {w2} {a} {b} comp ‚Üí getT‚â§‚Ñï w n name)
               ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
‚ÜíisHighest‚Ñï {0} {w1} {w2} {a} {b} n name comp h = h w1 (here refl)
‚ÜíisHighest‚Ñï {suc k} {w1} {w2} {a} {b} n name comp h with step‚äé a w1
... | inj‚ÇÅ (a' , w' , z) rewrite z = h w1 (here refl) , ‚ÜíisHighest‚Ñï {k} {w'} {w2} {a'} {b} n name comp (Œª w i ‚Üí h w (there i))
... | inj‚ÇÇ z rewrite z = h w1 (here refl)



stepsVal‚Üí : (a b : Term) (w w' : ùïé¬∑) (n : ‚Ñï) ‚Üí isValue a ‚Üí steps n (a , w) ‚â° (b , w') ‚Üí b ‚â° a √ó w' ‚â° w
stepsVal‚Üí a b w w' n isv comp rewrite stepsVal a w n isv | pair-inj‚ÇÅ comp | pair-inj‚ÇÇ comp = refl , refl



val-steps‚Üí : {w w1 w2 : ùïé¬∑} {a b v : Term} {n m : ‚Ñï} (i : ‚Ñï) (name : Name)
              ‚Üí isValue v
              ‚Üí (comp1 : steps m (a , w) ‚â° (b , w1))
              ‚Üí (comp2 : steps n (a , w) ‚â° (v , w2))
              ‚Üí Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
                  isHighest‚Ñï {m} {w} {w1} {a} {b} i name comp1
                  ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp
                  ‚Üí isHighest‚Ñï {n} {w} {w2} {a} {v} i name comp2))
val-steps‚Üí {w} {w1} {w2} {a} {b} {v} {n} {0} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) = n , ‚â§-refl , comp2 , Œª x y ‚Üí y
val-steps‚Üí {w} {w1} {w2} {a} {b} {v} {0} {suc m} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
        | stepVal a w isv
  = 0 , ‚â§-refl , ‚â°pair (fst (stepsVal‚Üí a b w w1 m isv comp1)) (snd (stepsVal‚Üí a b w w1 m isv comp1)) , Œª (x1 , x2) x3 ‚Üí x1
val-steps‚Üí {w} {w1} {w2} {a} {b} {v} {suc n} {suc m} i name isv comp1 comp2 with step‚äé a w
... | inj‚ÇÅ (a' , w' , z) rewrite z =
  fst q , ‚â§-trans (fst (snd q)) (<‚áí‚â§ (n<1+n n)) , fst (snd (snd q)) , Œª (x1 , x2) x3 ‚Üí x1 , snd (snd (snd q)) x2 x3
  where
    q : Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
           isHighest‚Ñï {m} {w'} {w1} {a'} {b} i name comp1
           ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp
           ‚Üí isHighest‚Ñï {n} {w'} {w2} {a'} {v} i name comp2))
    q = val-steps‚Üí {w'} {w1} {w2} {a'} {b} {v} {n} {m} i name isv comp1 comp2
... | inj‚ÇÇ z rewrite z
           | pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
           | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) = 0 , _‚â§_.z‚â§n , refl , Œª x y ‚Üí x


isHighest‚Ñï‚ÜígetT‚â§‚Ñï : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï) (name : Name) (comp : steps k (a , w1) ‚â° (b , w2))
                       ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
                       ‚Üí getT‚â§‚Ñï w1 n name
isHighest‚Ñï‚ÜígetT‚â§‚Ñï {0} {w1} {w2} {a} {b} n name comp h = h
isHighest‚Ñï‚ÜígetT‚â§‚Ñï {suc k} {w1} {w2} {a} {b} n name comp h with step‚äé a w1
... | inj‚ÇÅ (a' , w' , z) rewrite z = fst h
... | inj‚ÇÇ z rewrite z = h



-- We also need something about the way f computes as for the proof about 'differ'
steps-sat-isHighest‚Ñï-aux : {name : Name} {f : Term}
                            ‚Üí ¬¨Names f
                            ‚Üí # f
                            ‚Üí (k : ‚Ñï)
                            ‚Üí (ind : (k' : ‚Ñï) ‚Üí k' < k ‚Üí presHighest‚Ñï name f k')
                            ‚Üí presHighest‚Ñï name f k
steps-sat-isHighest‚Ñï-aux {name} {f} nnf cf 0 ind {w1} {w2} {a} {b} {n} comp isvb ctxt g0
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp)
  = g0 --n , g0 , ‚â§-refl
steps-sat-isHighest‚Ñï-aux {name} {f} nnf cf (suc k) ind {w1} {w2} {a} {b} {n} comp isvb ctxt g0 with step‚äé a w1
... | inj‚ÇÅ (x , w , p) rewrite p =
  fst (ii gw') , snd (snd (snd comp2)) (snd (ii gw')) comp3
  where
    ind0 : (k' : ‚Ñï) ‚Üí k' < suc k ‚Üí presHighest‚Ñï name f k'
    ind0 = ind

    ind1 : (k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presHighest‚Ñï name f k'
    ind1 k' ltk = ind0 k' (_‚â§_.s‚â§s ltk)

    q : Œ£highestUpdCtxt name f n x w1 w
    q = step-sat-isHighest‚Ñï p (k , b , w2 , comp , isvb , ind1) ctxt nnf cf

    k' : ‚Ñï
    k' = fst q

    x' : Term
    x' = fst (snd q)

    w' : ùïé¬∑
    w' = fst (snd (snd q))

    comp1 : steps k' (x , w) ‚â° (x' , w')
    comp1 = fst (snd (snd (snd q)))

    ii : getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w1 n name √ó isHighest‚Ñï {k'} {w} {w'} {x} {x'} n name comp1)
    ii = fst (snd (snd (snd (snd q))))

    uc : updCtxt name f x'
    uc = snd (snd (snd (snd (snd q))))

    comp2 : Œ£ ‚Ñï (Œª k0 ‚Üí k0 ‚â§ k √ó Œ£ (steps k0 (x' , w') ‚â° (b , w2)) (Œª cmp ‚Üí
                  isHighest‚Ñï {k'} {w} {w'} {x} {x'} n name comp1
                  ‚Üí isHighest‚Ñï {k0} {w'} {w2} {x'} {b} n name cmp
                  ‚Üí isHighest‚Ñï {k} {w} {w2} {x} {b} n name comp))
    comp2 = val-steps‚Üí {w} {w'} {w2} {x} {x'} {b} {k} {k'} n name isvb comp1 comp

    comp3 : isHighest‚Ñï {fst comp2} {w'} {w2} {x'} {b} n name (fst (snd (snd comp2)))
    comp3 = ind1 (fst comp2) (fst (snd comp2)) {w'} {w2} {x'} {b} {n} (fst (snd (snd comp2))) isvb uc g0

    gw' : getT‚â§‚Ñï w' n name
    gw' = isHighest‚Ñï‚ÜígetT‚â§‚Ñï {proj‚ÇÅ comp2} {w'} {w2} {x'} {b} n name (proj‚ÇÅ (snd (snd comp2))) comp3
... | inj‚ÇÇ p rewrite p | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = g0 --n , g0 , ‚â§-refl



-- We also need something about the way f computes as for the proof about 'differ'
steps-sat-isHighest‚Ñï : {name : Name} {f : Term} {k : ‚Ñï}
                        ‚Üí ¬¨Names f
                        ‚Üí # f
                        ‚Üí presHighest‚Ñï name f k
steps-sat-isHighest‚Ñï {name} {f} {k} nnf cf = <‚Ñïind _ (steps-sat-isHighest‚Ñï-aux {name} {f} nnf cf) k





-- define an 'external' version of #ŒΩtestM that follows the computation of (APPLY F f), and keeps
-- track of the highest number f is applied to, and prove that this 'external' version returns
-- the same value as the 'internal' one (i.e., #ŒΩtestM)
foo : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm}
      ‚Üí #¬¨Names F
      ‚Üí #¬¨Names f
      ‚Üí #¬¨Names g
      ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
      ‚Üí ‚ààType i w #BAIRE f
      ‚Üí ‚ààType i w #BAIRE g
      ‚Üí equalInType i w (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí n < ? ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
      ‚Üí equalInType i w #NAT (#APPLY F f) (#APPLY F g)
foo nc cn kb gc {i} {w} {F} {f} {g} nnF nnf nng ‚ààF ‚ààf ‚ààg eqb =
  equalInType-trans (equalInType-APPLY-force ‚ààF ‚ààf) (equalInType-trans eqf (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààg)))
  where
    neqt : NATeq w (#ŒΩtestM F f) (#ŒΩtestM F f)
    neqt = ŒΩtestM-NAT nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf

    tn : ‚Ñï
    tn = fst neqt

    x : NATeq w (#ŒΩtestM F f) (#NUM tn)
    x = tn , fst (snd neqt) , compAllRefl _ _

    cx : #ŒΩtestM F f #‚áõ #NUM tn at w
    cx = NATeq‚Üí‚áõ {w} {#ŒΩtestM F f} x

    eqb1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#NATn (#ŒΩtestM F f)) a‚ÇÅ a‚ÇÇ
                         ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqb1 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (‚â°BAIREn (#ŒΩtestM F f)) eqb)

    eqb2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª k ‚Üí a‚ÇÅ #‚áõ #NUM k at w'' √ó a‚ÇÇ #‚áõ #NUM k at w'' √ó k < tn))
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí NATeq w'' (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)))
    eqb2 w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-NAT‚Üí i w1 (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ) (eqb1 w1 e1 a‚ÇÅ a‚ÇÇ (‚ÜíequalInType-NATn (‚àÄùïé-mon e1 cx) eqa))

    eqb3 : ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < tn
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
    eqb3 w1 e1 k ltk = kb z w1 (‚äë-refl¬∑ _)
      where
        z : ‚ñ°¬∑ w1 (Œª w'' _ ‚Üí NATeq w'' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        z = eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí k , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , ltk))

    inn : ‚ààType i w #NAT (#APPLY F (#force f))
    inn = equalInType-refl (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààf))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force f)) ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force g)))
    aw w1 e1 (n , comp1 , comp2) = n , comp1 , ¬¨Names‚Üí‚áì‚Üí‚áõ w1 w1 ‚åú #APPLY F (#force g) ‚åù (NUM n) (#¬¨Names-APPLY {F} {#force g} nnF (#¬¨Names-force {g} nng)) comp
      where
        comp : #APPLY F (#force g) #‚áì #NUM n at w1
        comp = {!!}

-- We need to prove something like this, where w1 and w1' differ only in name
-- (we should be able to prove that for any world w3 between w1' and w2 (Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w3 ‚â° just (NUM j) √ó j ‚â§ m0)) -- see steps-sat-isHighest‚Ñï being proved below
-- (and then define a 'differ' relation relating CTXT(upd name f)/CTXT(force f)/CTXT(force g))
--  ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2 -- These 3 hypotheses come from #ŒΩtestM‚áì‚Üí
--  ‚Üí getT 0 name w2 ‚â° just (NUM m0)
--  ‚Üí m0 ‚â§ m
--  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < m ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k))) -- from eqb2
--  ‚Üí APPLY F (force f) ‚áì NUM n at w1
--  ‚Üí APPLY F (force g) ‚áì NUM n at w1

    eqf : equalInType i w #NAT (#APPLY F (#force f)) (#APPLY F (#force g))
    eqf = ‚ÜíequalInType-NAT i w (#APPLY F (#force f)) (#APPLY F (#force g)) (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT‚Üí i w (#APPLY F (#force f)) (#APPLY F (#force f)) inn))




continuity : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
             (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
             ‚Üí #¬¨Names F
             ‚Üí #¬¨Names f
             ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
             ‚Üí ‚ààType i w #BAIRE f
             ‚Üí ‚ààType i w (#contBody F f) (#PAIR (#ŒΩtestM F f) #lam3AX)
continuity nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestM F f , #ŒΩtestM F f , #lam3AX , #lam3AX ,
      testM-NAT nc cn kb gc i w1 F f nnF nnf (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2
          where
            aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                           (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                                 (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
              equalInType-FUN
                (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
                (eqTypesFUN‚Üê
                  (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
                  (eqTypesEQ‚Üê eqTypesNAT
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
                aw4
              where
                aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                     ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                               (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
                aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
                  equalInType-FUN
                    (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w3 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    (eqTypesEQ‚Üê eqTypesNAT
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    aw5
                  where
                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                        ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) y‚ÇÅ y‚ÇÇ
                                        ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                    aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                      equalInType-EQ
                        eqTypesNAT
                        concl
                      where
                        hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ)
                        hyp = equalInType-EQ‚Üí ey

                        ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                        ff = equalInTypeFFDEFS‚Üí ex

                        aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ
                                              ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                              ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                          where
                            h3 : equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
                            h3 = equalInType-BAIREn-BAIRE-trans h2 h1 (testM-NAT nc cn kb gc i w5 F f nnF nnf (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                            cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                            cc = {!!}

-- ‚Üí #¬¨Names F
-- ‚Üí #¬¨Names f
-- ‚Üí #¬¨Names g
-- ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
-- ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)

                        concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

            aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                        (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                                                 (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql1 : equalInType i w1 (sub0 (#ŒΩtestM F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI F f (#ŒΩtestM F f))) eql2

    seq : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    seq = Mod.‚àÄùïé-‚ñ° M aw

    h0 : ‚ààType i w (#SUM #NAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestM F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesNAT) (equalTypes-contBodyPI i w F f ‚ààF ‚ààf) seq

\end{code}
