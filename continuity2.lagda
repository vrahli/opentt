\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
--open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity2 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                   (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                   (X : ChoiceExt W C)
                   (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                   (F : Freeze {L} W C K P G N)
                   (E : Axiom.Extensionality.Propositional.Extensionality 0‚Ñì (lsuc(lsuc(L))))
                   (CB : ChoiceBar W M C K P G X N V F E) -- TODO - We won't need everything from there: use a different module
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)

{--
open import type_sys_props_nat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qnat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qlt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_free(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_pi(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_sum(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_set(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_eq(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_union(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_tsquash(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_ffdefs(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lift(W)(M)(C)(K)(P)(G)(E)
--}

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)



testM‚áì‚Üístep : {F f v : Term} {w1 w2 : ùïé¬∑} {name : Name}
               ‚Üí isValue v
               ‚Üí testM name F f ‚áì v from w1 to w2
               ‚Üí probeM name F f ‚áì v from (chooseT name w1 (NUM 0)) to w2
testM‚áì‚Üístep {F} {f} {v} {w1} {w2} {name} isv (0 , comp) rewrite pair-inj‚ÇÅ (sym comp) = ‚ä•-elim isv
testM‚áì‚Üístep {F} {f} {v} {w1} {w2} {name} isv (1 , comp) rewrite pair-inj‚ÇÅ (sym comp) = ‚ä•-elim isv
testM‚áì‚Üístep {F} {f} {v} {w1} {w2} {name} isv (suc (suc k) , comp) =
  k , z
  where
    z : steps k (probeM name F f , chooseT name w1 (NUM 0)) ‚â° (v , w2)
    z = begin
          steps k (probeM name F f , chooseT name w1 (NUM 0))
        ‚â°‚ü® cong (Œª x ‚Üí steps k (x , chooseT name w1 (NUM 0))) (sym (sub-shiftUp0‚â° AX (probeM name F f)))  ‚ü©
          steps k (sub AX (shiftUp 0 (probeM name F f)) , chooseT name w1 (NUM 0))
        ‚â°‚ü® comp ‚ü©
          (v , w2)
        ‚àé


{--
testM‚áì‚Üí : {w1 w2 : ùïé¬∑} {F f : Term} {n : ‚Ñï} {name : Name}
            ‚Üí testM name F f ‚áì NUM n from w1 to w2
            ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
                APPLY F (upd name f) ‚áì NUM k from (chooseT name w1 (NUM 0)) to w2
                √ó getT 0 name w2 ‚â° just (NUM n))
testM‚áì‚Üí {w1} {w2} {F} {f} {n} {name} comp = {!!}
--}


SEQ‚ÜíhasValue-decomp : (k : ‚Ñï) (a b v : Term) (w w' : ùïé¬∑)
                       ‚Üí steps k (SEQ a b , w) ‚â° (v , w')
                       ‚Üí isValue v
                       ‚Üí Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ Term (Œª u ‚Üí
                           steps k1 (a , w) ‚â° (u , w1)
                           √ó isValue u
                           √ó steps k2 (b , w1) ‚â° (v , w')
                           √ó k1 < k
                           √ó k2 < k))))
SEQ‚ÜíhasValue-decomp k a b v w w' comp isv =
  fst z , fst (snd z) , fst (snd (snd z)) , fst (snd (snd (snd z))) ,
  fst (snd (snd (snd (snd z)))) ,
  fst (snd (snd (snd (snd (snd z))))) ,
  cb ,
  fst (snd (snd (snd (snd (snd (snd (snd z))))))) ,
  snd (snd (snd (snd (snd (snd (snd (snd z)))))))
  where
    z : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ Term (Œª u ‚Üí
          steps k1 (a , w) ‚â° (u , w1)
          √ó isValue u
          √ó steps k2 (sub u (shiftUp 0 b) , w1) ‚â° (v , w')
          √ó k1 < k
          √ó k2 < k))))
    z = LET‚ÜíhasValue-decomp k a (shiftUp 0 b) v w w' comp isv

    cb : steps (fst (snd z)) (b , fst (snd (snd z))) ‚â° (v , w')
    cb = begin
           steps (fst (snd z)) (b , fst (snd (snd z)))
         ‚â°‚ü® cong (Œª x ‚Üí steps (fst (snd z)) (x , fst (snd (snd z)))) (sym (sub-shiftUp0‚â° (fst (snd (snd (snd z)))) b)) ‚ü©
           steps (fst (snd z)) (sub (fst (snd (snd (snd z)))) (shiftUp 0 b) , fst (snd (snd z)))
         ‚â°‚ü® fst (snd (snd (snd (snd (snd (snd z)))))) ‚ü©
           (v , w')
         ‚àé


SEQ‚áì-decomp : (a b v : Term) (w w' : ùïé¬∑)
              ‚Üí SEQ a b ‚áì v from w to w'
              ‚Üí isValue v
              ‚Üí Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ Term (Œª u ‚Üí
                    a ‚áì u from w to w1
                    √ó isValue u
                    √ó b ‚áì v from w1 to w'))
SEQ‚áì-decomp a b v w w' (k , comp) isv =
  fst (snd (snd z)) ,
  fst (snd (snd (snd z))) ,
  (fst z , fst (snd (snd (snd (snd z))))) ,
  fst (snd (snd (snd (snd (snd z))))) ,
  (fst (snd z) , fst (snd (snd (snd (snd (snd (snd z)))))))
  where
    z : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ Term (Œª u ‚Üí
          steps k1 (a , w) ‚â° (u , w1)
          √ó isValue u
          √ó steps k2 (b , w1) ‚â° (v , w')
          √ó k1 < k
          √ó k2 < k))))
    z = SEQ‚ÜíhasValue-decomp k a b v w w' comp isv



probeM‚áì-decomp : (name : Name) (F f v : Term) (w w' : ùïé¬∑)
                 ‚Üí probeM name F f ‚áì v from w to w'
                 ‚Üí isValue v
                 ‚Üí ‚àÄùïé-getT-NUM w name
                 ‚Üí Œ£ Term (Œª u ‚Üí
                     appUpd name F f ‚áì u from w to w'
                     √ó isValue u
                     √ó get0 name ‚áì v from w' to w'
                     √ó getT 0 name w' ‚â° just v)
probeM‚áì-decomp name F f v w w' comp isv g0 =
  u , comp1' , isv1 , comp2' , g3
  where
    z : Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ Term (Œª u ‚Üí
          appUpd name F f ‚áì u from w to w1
          √ó isValue u
          √ó get0 name ‚áì v from w1 to w'))
    z = SEQ‚áì-decomp (appUpd name F f) (get0 name) v w w' comp isv

    w1 : ùïé¬∑
    w1 = fst z

    u : Term
    u = fst (snd z)

    comp1 : appUpd name F f ‚áì u from w to w1
    comp1 = fst (snd (snd z))

    e1 : w ‚äë¬∑ w1
    e1 = steps‚Üí‚äë (fst comp1) (appUpd name F f) u (snd comp1)

    isv1 : isValue u
    isv1 = fst (snd (snd (snd z)))

    comp2 : get0 name ‚áì v from w1 to w'
    comp2 = snd (snd (snd (snd z)))

    g2 : Œ£ ‚Ñï (Œª k ‚Üí getT 0 name w1 ‚â° just (NUM k))
    g2 = lower (g0 w1 e1)

    k : ‚Ñï
    k = fst g2

    g1 : steps 1 (get0 name , w1) ‚â° (NUM k , w1)
    g1 rewrite snd g2 = refl

    comp3 : get0 name ‚áì NUM k from w1 to w1
    comp3 = 1 , g1

    eqw : w1 ‚â° w'
    eqw = snd (‚áì-from-to‚Üí‚â°ùïé tt isv comp3 comp2)

    eqv : v ‚â° NUM k
    eqv = fst (‚áì-from-to‚Üí‚â°ùïé isv tt comp2 comp3)

    comp1' : appUpd name F f ‚áì u from w to w'
    comp1' = ‚áì-from-to‚â°w·µ£ eqw comp1

    comp2' : get0 name ‚áì v from w' to w'
    comp2' = ‚áì-from-to‚â°w‚Çó eqw comp2

    g3 : getT 0 name w' ‚â° just v
    g3 = begin
           getT 0 name w'
         ‚â°‚ü® cong (getT 0 name) (sym eqw) ‚ü©
           getT 0 name w1
         ‚â°‚ü® snd g2 ‚ü©
           just (NUM k)
         ‚â°‚ü® cong just (sym eqv) ‚ü©
           just v
         ‚àé



shiftNameDown-renn : {name : Name} {F f : Term}
                     ‚Üí # F
                     ‚Üí # f
                     ‚Üí ¬¨Names F
                     ‚Üí ¬¨Names f
                     ‚Üí shiftNameDown 0 (renn 0 (suc name) (testM 0 F f)) ‚â° testM name F f
shiftNameDown-renn {name} {F} {f} cF cf nnF nnf =
  begin
    shiftNameDown 0 (renn 0 (suc name) (testM 0 F f))
  ‚â°‚ü® cong (Œª x ‚Üí shiftNameDown 0 (renn 0 (suc name) (testM 0 x f))) (sym (¬¨Names‚ÜíshiftNameUp‚â° F 0 nnF)) ‚ü©
    shiftNameDown 0 (renn 0 (suc name) (testM 0 (shiftNameUp 0 F) f))
  ‚â°‚ü® cong (Œª x ‚Üí shiftNameDown 0 (renn 0 (suc name) (testM 0 (shiftNameUp 0 F) x))) (sym (¬¨Names‚ÜíshiftNameUp‚â° f 0 nnf)) ‚ü©
    shiftNameDown 0 (renn 0 (suc name) (testM 0 (shiftNameUp 0 F) (shiftNameUp 0 f)))
  ‚â°‚ü® shiftNameDown-renn-shiftNameUp name F f cF cf ‚ü©
    testM name F f
  ‚àé


ŒΩtestM‚áì‚Üístep : {F f v : Term} {w1 w2 : ùïé¬∑}
                ‚Üí # F
                ‚Üí # f
                ‚Üí ¬¨Names F
                ‚Üí ¬¨Names f
                ‚Üí isValue v
                ‚Üí ŒΩtestM F f ‚áì v from w1 to w2
                ‚Üí testM (newChoiceT w1 (testM 0 F f)) F f ‚áì v from startNewChoiceT Res‚ä§ w1 (testM 0 F f) to w2
ŒΩtestM‚áì‚Üístep {F} {f} {v} {w1} {w2} cF cf nnF nnf isv (0 , comp) rewrite pair-inj‚ÇÅ (sym comp) = ‚ä•-elim isv
ŒΩtestM‚áì‚Üístep {F} {f} {v} {w1} {w2} cF cf nnF nnf isv (suc k , comp) = k , z
  where
    z : steps k (testM (newChoiceT w1 (testM 0 F f)) F f , startNewChoiceT Res‚ä§ w1 (testM 0 F f)) ‚â° (v , w2)
    z = begin
          steps k (testM (newChoiceT w1 (testM 0 F f)) F f , startNewChoiceT Res‚ä§ w1 (testM 0 F f))
        ‚â°‚ü® cong (Œª x ‚Üí steps k (x , startNewChoiceT Res‚ä§ w1 (testM 0 F f))) (sym (shiftNameDown-renn cF cf nnF nnf))  ‚ü©
          steps k (shiftNameDown 0 (renn 0 (newChoiceT+ w1 (testM 0 F f)) (testM 0 F f)) , startNewChoiceT Res‚ä§ w1 (testM 0 F f))
        ‚â°‚ü® comp ‚ü©
          (v , w2)
        ‚àé



#ŒΩtestM‚áì‚Üí : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) {w1 w2 : ùïé¬∑} {F f : Term} {n : ‚Ñï}
             ‚Üí # F
             ‚Üí # f
             ‚Üí ¬¨Names F
             ‚Üí ¬¨Names f
             ‚Üí ŒΩtestM F f ‚áì NUM n from w1 to w2
             ‚Üí Œ£ Name (Œª name ‚Üí Œ£ Term (Œª v ‚Üí
                 APPLY F (upd name f) ‚áì v from (chooseT name (startNewChoiceT Res‚ä§ w1 (testM 0 F f)) (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM n)))
#ŒΩtestM‚áì‚Üí nc cn {w1} {w2} {F} {f} {n} cF cf nnF nnf comp =
  newChoiceT w1 (testM 0 F f) ,
  fst comp3 ,
  fst (snd comp3) ,
  fst (snd (snd comp3)) ,
  snd (snd (snd (snd comp3)))
  where
    name : Name
    name = newChoiceT w1 (testM 0 F f)

    w1' : ùïé¬∑
    w1' = startNewChoiceT Res‚ä§ w1 (testM 0 F f)

    comp1 : testM name F f ‚áì NUM n from w1' to w2
    comp1 = ŒΩtestM‚áì‚Üístep cF cf nnF nnf tt comp

    w1'' : ùïé¬∑
    w1'' = chooseT name w1' (NUM 0)

    comp2 : probeM name F f ‚áì NUM n from w1'' to w2
    comp2 = testM‚áì‚Üístep tt comp1

    compat1 : compatible¬∑ name w1' Res‚ä§
    compat1 = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨newChoiceT‚ààdomùïé w1 (testM 0 F f))

    comp3 : Œ£ Term (Œª u ‚Üí
               appUpd name F f ‚áì u from w1'' to w2
               √ó isValue u
               √ó get0 name ‚áì NUM n from w2 to w2
               √ó getT 0 name w2 ‚â° just (NUM n))
    comp3 = probeM‚áì-decomp name F f (NUM n) w1'' w2 comp2 tt (cn nc name w1' 0 compat1)



-- define an 'external' version of #ŒΩtestM that follows the computation of (APPLY F f), and keeps
-- track of the highest number f is applied to, and prove that this 'external' version returns
-- the same value as the 'internal' one (i.e., #ŒΩtestM)
foo : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm}
      ‚Üí #¬¨Names F
      ‚Üí #¬¨Names f
      ‚Üí #¬¨Names g
      ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
      ‚Üí ‚ààType i w #BAIRE f
      ‚Üí ‚ààType i w #BAIRE g
      ‚Üí equalInType i w (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí n < ? ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
      ‚Üí equalInType i w #NAT (#APPLY F f) (#APPLY F g)
foo nc cn kb gc {i} {w} {F} {f} {g} nnF nnf nng ‚ààF ‚ààf ‚ààg eqb =
  equalInType-trans (equalInType-APPLY-force ‚ààF ‚ààf) (equalInType-trans eqf (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààg)))
  where
    neqt : NATeq w (#ŒΩtestM F f) (#ŒΩtestM F f)
    neqt = ŒΩtestM-NAT nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf

    tn : ‚Ñï
    tn = fst neqt

    x : NATeq w (#ŒΩtestM F f) (#NUM tn)
    x = tn , fst (snd neqt) , compAllRefl _ _

    cx : #ŒΩtestM F f #‚áõ #NUM tn at w
    cx = NATeq‚Üí‚áõ {w} {#ŒΩtestM F f} x

    eqb1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#NATn (#ŒΩtestM F f)) a‚ÇÅ a‚ÇÇ
                         ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqb1 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (‚â°BAIREn (#ŒΩtestM F f)) eqb)

    eqb2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª k ‚Üí a‚ÇÅ #‚áõ #NUM k at w'' √ó a‚ÇÇ #‚áõ #NUM k at w'' √ó k < tn))
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí NATeq w'' (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)))
    eqb2 w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-NAT‚Üí i w1 (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ) (eqb1 w1 e1 a‚ÇÅ a‚ÇÇ (‚ÜíequalInType-NATn (‚àÄùïé-mon e1 cx) eqa))

    eqb3 : ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < tn
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
    eqb3 w1 e1 k ltk = kb z w1 (‚äë-refl¬∑ _)
      where
        z : ‚ñ°¬∑ w1 (Œª w'' _ ‚Üí NATeq w'' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        z = eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí k , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , ltk))

    inn : ‚ààType i w #NAT (#APPLY F (#force f))
    inn = equalInType-refl (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààf))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force f)) ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force g)))
    aw w1 e1 (n , comp1 , comp2) = n , comp1 , ¬¨Names‚Üí‚áì‚Üí‚áõ w1 w1 ‚åú #APPLY F (#force g) ‚åù (NUM n) (#¬¨Names-APPLY {F} {#force g} nnF (#¬¨Names-force {g} nng)) comp
      where
        comp : #APPLY F (#force g) #‚áì #NUM n at w1
        comp = {!!}

-- We need to prove something like this, where w1 and w1' differ only in name
-- (we should be able to prove that for any world w3 between w1' and w2 (Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w3 ‚â° just (NUM j) √ó j ‚â§ m0)) -- see steps-sat-isHighest‚Ñï being proved below
-- (and then define a 'differ' relation relating CTXT(upd name f)/CTXT(force f)/CTXT(force g))
--  ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2 -- These 3 hypotheses come from #ŒΩtestM‚áì‚Üí
--  ‚Üí getT 0 name w2 ‚â° just (NUM m0)
--  ‚Üí m0 ‚â§ m
--  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < m ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k))) -- from eqb2
--  ‚Üí APPLY F (force f) ‚áì NUM n at w1
--  ‚Üí APPLY F (force g) ‚áì NUM n at w1

    eqf : equalInType i w #NAT (#APPLY F (#force f)) (#APPLY F (#force g))
    eqf = ‚ÜíequalInType-NAT i w (#APPLY F (#force f)) (#APPLY F (#force g)) (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT‚Üí i w (#APPLY F (#force f)) (#APPLY F (#force f)) inn))


getT‚â§‚Ñï : ùïé¬∑ ‚Üí ‚Ñï ‚Üí Name ‚Üí Set
getT‚â§‚Ñï w1 n name = Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w1 ‚â° just (NUM j) √ó j ‚â§ n)


isHighest‚Ñï : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï) (name : Name)
              ‚Üí steps k (a , w1) ‚â° (b , w2)
              ‚Üí Set
isHighest‚Ñï {0} {w1} {w2} {a} {b} n name comp = getT‚â§‚Ñï w1 n name
isHighest‚Ñï {suc k} {w1} {w2} {a} {b} n name comp with step a w1
... | just (x , w) = getT‚â§‚Ñï w1 n name √ó isHighest‚Ñï {k} {w} {w2} {x} {b} n name comp
... | nothing = getT‚â§‚Ñï w1 n name


data updCtxt (name : Name) (f : Term) : Term ‚Üí Set where
  updCtxt-VAR     : (x : Var) ‚Üí updCtxt name f (VAR x)
  updCtxt-NAT     : updCtxt name f NAT
  updCtxt-QNAT    : updCtxt name f QNAT
  updCtxt-LT      : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (LT a b)
  updCtxt-QLT     : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (QLT a b)
  updCtxt-NUM     : (x : ‚Ñï) ‚Üí updCtxt name f (NUM x)
  updCtxt-IFLT    : (a b c d : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f c ‚Üí updCtxt name f d ‚Üí updCtxt name f (IFLT a b c d)
  updCtxt-PI      : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (PI a b)
  updCtxt-LAMBDA  : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (LAMBDA a)
  updCtxt-APPLY   : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (APPLY a b)
  updCtxt-FIX     : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (FIX a)
  updCtxt-LET     : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (LET a b)
  updCtxt-SUM     : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (SUM a b)
  updCtxt-PAIR    : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (PAIR a b)
  updCtxt-SPREAD  : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (SPREAD a b)
  updCtxt-SET     : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (SET a b)
  updCtxt-TUNION  : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (TUNION a b)
  updCtxt-UNION   : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (UNION a b)
  updCtxt-QTUNION : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (QTUNION a b)
  updCtxt-INL     : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (INL a)
  updCtxt-INR     : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (INR a)
  updCtxt-DECIDE  : (a b c : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f c ‚Üí updCtxt name f (DECIDE a b c)
  updCtxt-EQ      : (a b c : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f c ‚Üí updCtxt name f (EQ a b c)
  updCtxt-AX      : updCtxt name f AX
  updCtxt-FREE    : updCtxt name f FREE
  --updCtxt-CS      : updCtxt name1 name2 f (CS name1) (CS name2)
  --updCtxt-CS      : updCtxt name1 name2 f (CS name1) (CS name2)
  --updCtxt-NAME    : updCtxt name1 name2 f (NAME name1) (NAME name2)
  --updCtxt-FRESH   : (a b : Term) ‚Üí updCtxt name1 name2 f a b ‚Üí updCtxt name1 name2 f (FRESH a) (FRESH b)
  updCtxt-CHOOSE  : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (CHOOSE a b)
--  updCtxt-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updCtxt name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updCtxt name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updCtxt name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updCtxt name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updCtxt-TSQUASH : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (TSQUASH a)
  updCtxt-TTRUNC  : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (TTRUNC a)
  updCtxt-TCONST  : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (TCONST a)
  updCtxt-SUBSING : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (SUBSING a)
  updCtxt-DUM     : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (DUM a)
  updCtxt-FFDEFS  : (a b : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f b ‚Üí updCtxt name f (FFDEFS a b)
  updCtxt-UNIV    : (x : ‚Ñï) ‚Üí updCtxt name f (UNIV x)
  updCtxt-LIFT    : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (LIFT a)
  updCtxt-LOWER   : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (LOWER a)
  updCtxt-SHRINK  : (a : Term) ‚Üí updCtxt name f a ‚Üí updCtxt name f (SHRINK a)
  updCtxt-upd     : updCtxt name f (upd name f)


‚ÜíupdCtxt-shiftDown : (v : Var) {name : Name} {f : Term} (cf : # f) {a : Term}
                     ‚Üí updCtxt name f a
                     ‚Üí updCtxt name f (shiftDown v a)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(VAR x)} (updCtxt-VAR x) = updCtxt-VAR _
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.NAT} updCtxt-NAT = updCtxt-NAT
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.QNAT} updCtxt-QNAT = updCtxt-QNAT
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(LT a b)} (updCtxt-LT a b ctxt ctxt‚ÇÅ) = updCtxt-LT _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(QLT a b)} (updCtxt-QLT a b ctxt ctxt‚ÇÅ) = updCtxt-QLT _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(NUM x)} (updCtxt-NUM x) = updCtxt-NUM _
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(IFLT a b c d)} (updCtxt-IFLT a b c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) = updCtxt-IFLT _ _ _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÇ) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÉ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(PI a b)} (updCtxt-PI a b ctxt ctxt‚ÇÅ) = updCtxt-PI _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(LAMBDA a)} (updCtxt-LAMBDA a ctxt) = updCtxt-LAMBDA _ (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(APPLY a b)} (updCtxt-APPLY a b ctxt ctxt‚ÇÅ) = updCtxt-APPLY _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(FIX a)} (updCtxt-FIX a ctxt) = updCtxt-FIX _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(LET a b)} (updCtxt-LET a b ctxt ctxt‚ÇÅ) = updCtxt-LET _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(SUM a b)} (updCtxt-SUM a b ctxt ctxt‚ÇÅ) = updCtxt-SUM _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(PAIR a b)} (updCtxt-PAIR a b ctxt ctxt‚ÇÅ) = updCtxt-PAIR _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(SPREAD a b)} (updCtxt-SPREAD a b ctxt ctxt‚ÇÅ) = updCtxt-SPREAD _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc (suc v)) cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(SET a b)} (updCtxt-SET a b ctxt ctxt‚ÇÅ) = updCtxt-SET _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(TUNION a b)} (updCtxt-TUNION a b ctxt ctxt‚ÇÅ) = updCtxt-TUNION _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(UNION a b)} (updCtxt-UNION a b ctxt ctxt‚ÇÅ) = updCtxt-UNION _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(QTUNION a b)} (updCtxt-QTUNION a b ctxt ctxt‚ÇÅ) = updCtxt-QTUNION _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(INL a)} (updCtxt-INL a ctxt) = updCtxt-INL _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(INR a)} (updCtxt-INR a ctxt) = updCtxt-INR _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(DECIDE a b c)} (updCtxt-DECIDE a b c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) = updCtxt-DECIDE _ _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÅ) (‚ÜíupdCtxt-shiftDown (suc v) cf ctxt‚ÇÇ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(EQ a b c)} (updCtxt-EQ a b c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) = updCtxt-EQ _ _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÇ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.AX} updCtxt-AX = updCtxt-AX
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.FREE} updCtxt-FREE = updCtxt-FREE
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(CHOOSE a b)} (updCtxt-CHOOSE a b ctxt ctxt‚ÇÅ) = updCtxt-CHOOSE _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(TSQUASH a)} (updCtxt-TSQUASH a ctxt) = updCtxt-TSQUASH _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(TTRUNC a)} (updCtxt-TTRUNC a ctxt) = updCtxt-TTRUNC _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(TCONST a)} (updCtxt-TCONST a ctxt) = updCtxt-TCONST _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(SUBSING a)} (updCtxt-SUBSING a ctxt) = updCtxt-SUBSING _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(DUM a)} (updCtxt-DUM a ctxt) = updCtxt-DUM _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(FFDEFS a b)} (updCtxt-FFDEFS a b ctxt ctxt‚ÇÅ) = updCtxt-FFDEFS _ _ (‚ÜíupdCtxt-shiftDown v cf ctxt) (‚ÜíupdCtxt-shiftDown v cf ctxt‚ÇÅ)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(UNIV x)} (updCtxt-UNIV x) = updCtxt-UNIV _
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(LIFT a)} (updCtxt-LIFT a ctxt) = updCtxt-LIFT _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(LOWER a)} (updCtxt-LOWER a ctxt) = updCtxt-LOWER _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(SHRINK a)} (updCtxt-SHRINK a ctxt) = updCtxt-SHRINK _ (‚ÜíupdCtxt-shiftDown v cf ctxt)
‚ÜíupdCtxt-shiftDown v {name} {f} cf {.(LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1)))))} updCtxt-upd = {!!}



updCtxt-sub : {name : Name} {f : Term} {a b : Term}
              ‚Üí updCtxt name f a
              ‚Üí updCtxt name f b
              ‚Üí updCtxt name f (sub a b)
updCtxt-sub {name} {f} {a} {b} = {!!}



-- We also need something about the way f computes as for the proof about 'differ'
step-sat-isHighest‚Ñï : {w1 w2 : ùïé¬∑} {a b : Term} {n : ‚Ñï} {name : Name} {f : Term}
                       ‚Üí step a w1 ‚â° just (b , w2)
                       ‚Üí updCtxt name f a
                       ‚Üí ¬¨Names f
                       ‚Üí getT 0 name w2 ‚â° just (NUM n)
                       ‚Üí getT‚â§‚Ñï w1 n name √ó updCtxt name f b
step-sat-isHighest‚Ñï {w1} {w2} {.NAT} {b} {n} {name} {f} comp updCtxt-NAT nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-NAT
step-sat-isHighest‚Ñï {w1} {w2} {.QNAT} {b} {n} {name} {f} comp updCtxt-QNAT nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-QNAT
step-sat-isHighest‚Ñï {w1} {w2} {.(LT a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-LT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-LT a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(QLT a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-QLT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-QLT a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(NUM x)} {b} {n} {name} {f} comp (updCtxt-NUM x) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-NUM x
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf g0 with is-NUM a
... | inj‚ÇÅ (k1 , p) rewrite p with is-NUM b‚ÇÅ
... |    inj‚ÇÅ (k2 , q) rewrite q with k1 <? k2
... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , ctxt‚ÇÇ
... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , ctxt‚ÇÉ
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf g0 | inj‚ÇÅ (k1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = fst ind , updCtxt-IFLT (NUM k1) b‚ÇÅ' c d ctxt (snd ind) ctxt‚ÇÇ ctxt‚ÇÉ
  where
    ind : getT‚â§‚Ñï w1 n name √ó updCtxt name f b‚ÇÅ'
    ind = step-sat-isHighest‚Ñï z ctxt‚ÇÅ nnf g0
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï {w1} {w2} {.(IFLT a b‚ÇÅ c d)} {b} {n} {name} {f} comp (updCtxt-IFLT a b‚ÇÅ c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf g0 | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = fst ind , updCtxt-IFLT a' b‚ÇÅ c d (snd ind) ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ
  where
    ind : getT‚â§‚Ñï w1 n name √ó updCtxt name f a'
    ind = step-sat-isHighest‚Ñï z ctxt nnf g0
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï {w1} {w2} {.(PI a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-PI a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-PI a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(LAMBDA a)} {b} {n} {name} {f} comp (updCtxt-LAMBDA a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-LAMBDA a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(APPLY a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-APPLY a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , {!!}
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , p) rewrite p = {!!}
... |    inj‚ÇÇ p = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(FIX a)} {b} {n} {name} {f} comp (updCtxt-FIX a ctxt) nnf g0 = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(LET a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-LET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SUM a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-SUM a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-SUM a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(PAIR a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-PAIR a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SPREAD a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-SPREAD a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(SET a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-SET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-SET a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(TUNION a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-TUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-TUNION a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(UNION a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-UNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-UNION a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(QTUNION a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-QTUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-QTUNION a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(INL a)} {b} {n} {name} {f} comp (updCtxt-INL a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-INL a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(INR a)} {b} {n} {name} {f} comp (updCtxt-INR a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-INR a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(DECIDE a b‚ÇÅ c)} {b} {n} {name} {f} comp (updCtxt-DECIDE a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf g0 = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(EQ a b‚ÇÅ c)} {b} {n} {name} {f} comp (updCtxt-EQ a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-EQ a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ
step-sat-isHighest‚Ñï {w1} {w2} {.AX} {b} {n} {name} {f} comp updCtxt-AX nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-AX
step-sat-isHighest‚Ñï {w1} {w2} {.FREE} {b} {n} {name} {f} comp updCtxt-FREE nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-FREE
step-sat-isHighest‚Ñï {w1} {w2} {.(CHOOSE a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-CHOOSE a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 = {!!}
step-sat-isHighest‚Ñï {w1} {w2} {.(TSQUASH a)} {b} {n} {name} {f} comp (updCtxt-TSQUASH a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-TSQUASH a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(TTRUNC a)} {b} {n} {name} {f} comp (updCtxt-TTRUNC a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-TTRUNC a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(TCONST a)} {b} {n} {name} {f} comp (updCtxt-TCONST a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-TCONST a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(SUBSING a)} {b} {n} {name} {f} comp (updCtxt-SUBSING a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-SUBSING a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(DUM a)} {b} {n} {name} {f} comp (updCtxt-DUM a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-DUM a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(FFDEFS a b‚ÇÅ)} {b} {n} {name} {f} comp (updCtxt-FFDEFS a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-FFDEFS a b‚ÇÅ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï {w1} {w2} {.(UNIV x)} {b} {n} {name} {f} comp (updCtxt-UNIV x) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-UNIV x
step-sat-isHighest‚Ñï {w1} {w2} {.(LIFT a)} {b} {n} {name} {f} comp (updCtxt-LIFT a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-LIFT a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(LOWER a)} {b} {n} {name} {f} comp (updCtxt-LOWER a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-LOWER a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(SHRINK a)} {b} {n} {name} {f} comp (updCtxt-SHRINK a ctxt) nnf g0 rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = (n , g0 , ‚â§-refl) , updCtxt-SHRINK a ctxt
step-sat-isHighest‚Ñï {w1} {w2} {.(LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1)))))} {b} {n} {name} {f} comp updCtxt-upd nnf g0 = {!!}



-- We also need something about the way f computes as for the proof about 'differ'
steps-sat-isHighest‚Ñï : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} {n : ‚Ñï} {name : Name} {f : Term}
                        (comp : steps k (a , w1) ‚â° (b , w2))
                        ‚Üí updCtxt name f a
                        ‚Üí ¬¨Names f
                        ‚Üí getT 0 name w2 ‚â° just (NUM n)
                        ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
steps-sat-isHighest‚Ñï {0} {w1} {w2} {a} {b} {n} {name} {f} comp ctxt nnf g0
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = n , g0 , ‚â§-refl
steps-sat-isHighest‚Ñï {suc k} {w1} {w2} {a} {b} {n} {name} {f} comp ctxt nnf g0 with step‚äé a w1
... | inj‚ÇÅ (x , w , p) rewrite p = {!!} , {!steps-sat-isHighest‚Ñï comp!}
... | inj‚ÇÇ p rewrite p | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = n , g0 , ‚â§-refl


continuity : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
             (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
             ‚Üí #¬¨Names F
             ‚Üí #¬¨Names f
             ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
             ‚Üí ‚ààType i w #BAIRE f
             ‚Üí ‚ààType i w (#contBody F f) (#PAIR (#ŒΩtestM F f) #lam3AX)
continuity nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestM F f , #ŒΩtestM F f , #lam3AX , #lam3AX ,
      testM-NAT nc cn kb gc i w1 F f nnF nnf (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2
          where
            aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                           (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                                 (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
              equalInType-FUN
                (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
                (eqTypesFUN‚Üê
                  (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
                  (eqTypesEQ‚Üê eqTypesNAT
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
                aw4
              where
                aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                     ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                               (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
                aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
                  equalInType-FUN
                    (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w3 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    (eqTypesEQ‚Üê eqTypesNAT
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    aw5
                  where
                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                        ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) y‚ÇÅ y‚ÇÇ
                                        ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                    aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                      equalInType-EQ
                        eqTypesNAT
                        concl
                      where
                        hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ)
                        hyp = equalInType-EQ‚Üí ey

                        ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                        ff = equalInTypeFFDEFS‚Üí ex

                        aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ
                                              ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                              ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                          where
                            h3 : equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
                            h3 = equalInType-BAIREn-BAIRE-trans h2 h1 (testM-NAT nc cn kb gc i w5 F f nnF nnf (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                            cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                            cc = {!!}

-- ‚Üí #¬¨Names F
-- ‚Üí #¬¨Names f
-- ‚Üí #¬¨Names g
-- ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
-- ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)

                        concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

            aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                        (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                                                 (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql1 : equalInType i w1 (sub0 (#ŒΩtestM F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI F f (#ŒΩtestM F f))) eql2

    seq : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    seq = Mod.‚àÄùïé-‚ñ° M aw

    h0 : ‚ààType i w (#SUM #NAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestM F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesNAT) (equalTypes-contBodyPI i w F f ‚ààF ‚ààf) seq

\end{code}

