\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module mp_search {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice)
                 (K : Compatible W C)
                 (G : GetChoice {L} W C K)
                 (X : ChoiceExt {L} W C)
                 (N : NewChoice {L} W C K G)
                 (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
--open import compatibleDef{L}(W)(C)(K)
--open import getChoiceDef(W)(C)(K)(G)
--open import newChoiceDef(W)(C)(K)(G)(N)
--open import choiceExtDef(W)(C)(K)(G)(X)
--open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
--open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)
open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
--open import ind2(W)(M)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms4(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
open import props4(W)(M)(C)(K)(G)(X)(N)(EC)

open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (SUMeq! ; equalInType-SUM! ; equalInType-SUM!‚Üí)

open import type_sys_props_isect(W)(M)(C)(K)(G)(X)(N)(EC)

open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#MP-right ; #MP-right2 ; isType-MP-right-body)


-- MOVE
#‚áõ!-mon : {a b : CTerm} {w2 w1 : ùïé¬∑}
        ‚Üí w1 ‚äë¬∑ w2
        ‚Üí a #‚áõ! b at w1
        ‚Üí a #‚áõ! b at w2
#‚áõ!-mon {a} {b} {w2} {w1} ext c w' e' = c w' (‚äë-trans¬∑ ext e')


infSearchI : Term ‚Üí Term ‚Üí Term ‚Üí Term
infSearchI f R n =
  ITE (APPLY f n)
      n
      (LET (SUC n) (APPLY (shiftUp 0 R) (VAR 0)))


-- This is the body of the fix in infSearch
infSearchL : Term ‚Üí Term
infSearchL f =
  -- 1 is the recursive call and 0 is the number
  LAMBDA (LAMBDA (infSearchI (shiftUp 0 (shiftUp 0 f)) (VAR 1) (VAR 0)))


infSearchF : Term ‚Üí Term
infSearchF f = FIX (infSearchL f)


-- f is a function in #NAT!‚ÜíBOOL
-- We're defining here the infinite search: fix(ŒªR.Œªn.if f(n) then n else R(suc(n)))0
-- The closed version #infSearch is below
infSearch : Term ‚Üí Term
infSearch f = APPLY (infSearchF f) N0


#infSearchI : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#infSearchI f R n =
  #ITE (#APPLY f n)
       n
       (#LET (#SUC n) (#[0]APPLY (#[0]shiftUp0 R) #[0]VAR))


-- The body of #infSearch fix's body
#infSearchL : CTerm ‚Üí CTerm
#infSearchL f =
  #LAMBDA (#[0]LAMBDA (#[1]ITE (#[1]APPLY (#[1]shiftUp0 (#[0]shiftUp0 f)) (#[1]VAR0))
                               (#[1]VAR0)
                               (#[1]LET (#[1]SUC #[1]VAR0) (#[2]APPLY #[2]VAR2 (#[2]VAR0)))))


#infSearchF : CTerm ‚Üí CTerm
#infSearchF f = #FIX (#infSearchL f)


#infSearch : CTerm ‚Üí CTerm
#infSearch f = #APPLY (#infSearchF f) #N0


#infSearchP : CTerm ‚Üí CTerm
#infSearchP f = #PAIR (#infSearch f) #AX


-- sanity check
‚åú#infSearch‚åù : (f : CTerm) ‚Üí ‚åú #infSearch f ‚åù ‚â° infSearch ‚åú f ‚åù
‚åú#infSearch‚åù f = refl


‚àà#BOOL‚ÇÄ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
            ‚Üí equalInType i w #BOOL‚ÇÄ a b
            ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' a b)
‚àà#BOOL‚ÇÄ‚Üí u w a b b‚àà = eqInType-‚áõ-BOOL‚ÇÄ u w a b (fst b‚àà) (snd b‚àà)


#‚áõ!same‚Ñï-mon : {w1 w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) {a b : CTerm}
                 ‚Üí #‚áõ!same‚Ñï w1 a b
                 ‚Üí #‚áõ!same‚Ñï w2 a b
#‚áõ!same‚Ñï-mon {w1} {w2} e {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , ‚àÄùïé-mon e c‚ÇÅ , ‚àÄùïé-mon e c‚ÇÇ


‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                 ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ
                                ‚Üí ‚ñ°¬∑ w' (Œª w' e ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ)))
‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
  ‚àà#BOOL‚ÇÄ‚Üí
    i w1 (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ)
    (equalInType-FUN‚Üí
       (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ
       (‚ÜíequalInType-NAT! i w1 n‚ÇÅ n‚ÇÇ (Mod.‚àÄùïé-‚ñ° M Œª w2 e2 ‚Üí #‚áõ!same‚Ñï-mon e2 {n‚ÇÅ} {n‚ÇÇ} n‚àà)))


‚àà#NAT!‚ÜíBOOL‚ÇÄ‚â§‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm) (n : ‚Ñï)
                   ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
‚àà#NAT!‚ÜíBOOL‚ÇÄ‚â§‚Üí i w f‚ÇÅ f‚ÇÇ 0 f‚àà = Mod.‚àÄùïé-‚ñ°Func M aw c
  where
    c : ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ #N0) (#APPLY f‚ÇÇ #N0))
    c = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) #N0 #N0 (#‚áõ!same‚Ñï-NUM w 0)

    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ #N0) (#APPLY f‚ÇÇ #N0)
                       ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ 0 ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
    aw w1 e1 h .‚Ñï.zero _‚â§_.z‚â§n = h
‚àà#NAT!‚ÜíBOOL‚ÇÄ‚â§‚Üí i w f‚ÇÅ f‚ÇÇ (suc n) f‚àà = ‚àÄùïé-‚ñ°Func2 aw c ind
  where
    ind : ‚ñ°¬∑ w (Œª w' e ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
    ind = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚â§‚Üí i w f‚ÇÅ f‚ÇÇ n f‚àà

    c : ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM (suc n))) (#APPLY f‚ÇÇ (#NUM (suc n))))
    c = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) (#NUM (suc n)) (#NUM (suc n)) (#‚áõ!same‚Ñï-NUM w (suc n))

    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM (suc n))) (#APPLY f‚ÇÇ (#NUM (suc n)))
                       ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                       ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ suc n ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
    aw w1 e1 h1 h2 m len with ‚â§suc‚Üí‚äé len
    ... | inj‚ÇÅ p rewrite p = h1
    ... | inj‚ÇÇ p = h2 m p


‚àà#ASSERT‚ÇÇ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
               ‚Üí equalInType i w (#ASSERT‚ÇÇ t) a b
               ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u ‚Üí t #‚áõ #INL u at w'))
‚àà#ASSERT‚ÇÇ‚Üí i w t a b a‚àà =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÇ‚â° t) a‚àà)))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType i w' #BOOL‚ÇÄ) w' a b
                         ‚Üí Mod.‚ñ° M w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª u ‚Üí t #‚áõ #INL u at w'')) e'))
    aw1 w1 e1 h = Mod.‚àÄùïé-‚ñ°Func M aw2 (‚àà#BOOL‚ÇÄ‚Üí i w1 t #BTRUE h)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' t #BTRUE
                             ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª u ‚Üí t #‚áõ #INL u at w'')) e1 w' e')
        aw2 w2 e2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , q)) z = x , c‚ÇÅ
        aw2 w2 e2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , q)) z = ‚ä•-elim (INLneqINR (‚â°CTerm (#compAllVal {#BTRUE} {#INR y} {w2} c‚ÇÇ tt)))


‚àà#ASSERT‚ÇÇ‚Üí2 : (i : ‚Ñï) (w : ùïé¬∑) (f k a b : CTerm) (n : ‚Ñï)
                ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                ‚Üí equalInType i w (#ASSERT‚ÇÇ (#APPLY f k)) a b
                ‚Üí k #‚áõ! #NUM n at w
                ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u ‚Üí #APPLY f (#NUM n) #‚áõ #INL u at w'))
‚àà#ASSERT‚ÇÇ‚Üí2 i w f k a b n f‚àà a‚àà ck =
  ‚àÄùïé-‚ñ°Func2 aw h1 h2
  where
    h1 : ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f k) (#APPLY f (#NUM n)))
    h1 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí i w f f f‚àà w (‚äë-refl¬∑ w) k (#NUM n) (n , ck , #‚áõ!-refl {w} {#NUM n})

    h2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u ‚Üí #APPLY f k #‚áõ #INL u at w'))
    h2 = ‚àà#ASSERT‚ÇÇ‚Üí i w (#APPLY f k) a b a‚àà

    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f k) (#APPLY f (#NUM n))
                       ‚Üí (Œ£ CTerm (Œª u ‚Üí #APPLY f k #‚áõ #INL u at w'))
                       ‚Üí Œ£ CTerm (Œª u ‚Üí #APPLY f (#NUM n) #‚áõ #INL u at w'))
    aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , q)) (u , d) = y , c‚ÇÇ
    aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , q)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ-val-det {w1} {#APPLY f k} {#INL u} {#INR x} tt tt d c‚ÇÅ)))


‚àà#ASSERT‚ÇÇ‚Üí3 : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ k a b : CTerm) (n : ‚Ñï)
                ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                ‚Üí equalInType i w (#ASSERT‚ÇÇ (#APPLY f‚ÇÅ k)) a b
                ‚Üí k #‚áõ! #NUM n at w
                ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí
                     #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w' √ó  #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w')))
‚àà#ASSERT‚ÇÇ‚Üí3 i w f‚ÇÅ f‚ÇÇ k a b n f‚àà a‚àà ck =
  ‚àÄùïé-‚ñ°Func3 aw h1 h2 h3
  where
    h1 : ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ k) (#APPLY f‚ÇÇ (#NUM n)))
    h1 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) k (#NUM n) (n , ck , #‚áõ!-refl {w} {#NUM n})

    h2 : ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM n)) (#APPLY f‚ÇÇ (#NUM n)))
    h2 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (n , #‚áõ!-refl {w} {#NUM n} , #‚áõ!-refl {w} {#NUM n})

    h3 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u ‚Üí #APPLY f‚ÇÅ k #‚áõ #INL u at w'))
    h3 = ‚àà#ASSERT‚ÇÇ‚Üí i w (#APPLY f‚ÇÅ k) a b a‚àà

    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ k) (#APPLY f‚ÇÇ (#NUM n))
                       ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM n)) (#APPLY f‚ÇÇ (#NUM n))
                       ‚Üí (Œ£ CTerm (Œª u ‚Üí #APPLY f‚ÇÅ k #‚áõ #INL u at w'))
                       ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí
                           #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w' √ó #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w')))
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , q)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ , h)) (u , d) = y‚ÇÅ , y‚ÇÇ , d‚ÇÅ , d‚ÇÇ
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , q)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ , h)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ-val-det {w1} {#APPLY f‚ÇÇ (#NUM n)} {#INL x‚ÇÇ} {#INR y‚ÇÇ} tt tt c‚ÇÇ d‚ÇÇ)))
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , q)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ , h)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ-val-det {w1} {#APPLY f‚ÇÇ (#NUM n)} {#INL y‚ÇÇ} {#INR x‚ÇÇ} tt tt d‚ÇÇ c‚ÇÇ)))
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , q)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ , h)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ-val-det {w1} {#APPLY f‚ÇÅ k} {#INL u} {#INR x‚ÇÅ} tt tt d c‚ÇÅ)))


‚â°‚Üí‚áìfrom-to : {a b : Term} (w : ùïé¬∑) ‚Üí a ‚â° b ‚Üí a ‚áì b from w to w
‚â°‚Üí‚áìfrom-to {a} {b} w e rewrite e = 0 , refl


sub-LAMBDA-infSearchI : (f : Term) (#f : # f)
                        ‚Üí sub (infSearchF f) (LAMBDA (infSearchI (shiftUp 0 (shiftUp 0 f)) (VAR 1) (VAR 0)))
                           ‚â° LAMBDA (infSearchI f (infSearchF f) (VAR 0))
sub-LAMBDA-infSearchI f #f
  rewrite #shiftUp 0 (ct f #f)
        | #shiftUp 0 (ct f #f)
        | #shiftUp 2 (ct f #f)
        | #shiftUp 2 (ct f #f)
        | #shiftUp 2 (ct f #f)
        | #shiftUp 2 (ct f #f)
        | #shiftUp 3 (ct f #f)
        | #shiftUp 5 (ct f #f)
        | #subv 1 (FIX (LAMBDA (LAMBDA (DECIDE (APPLY f (VAR 0)) (VAR 1) (LET (SUC (VAR 1)) (APPLY (VAR 3) (VAR 0))))))) f #f
        | #shiftDown 1 (ct f #f)
        | #shiftDown 5 (ct f #f)
  = refl


sub-infSearchI : (f : Term) (#f : # f) (n : ‚Ñï)
                 ‚Üí sub (NUM n) (infSearchI f (infSearchF f) (VAR 0))
                    ‚â° infSearchI f (infSearchF f) (NUM n)
sub-infSearchI f #f n
  rewrite #shiftUp 0 (ct f #f)
        | #shiftUp 0 (ct f #f)
        | #shiftUp 2 (ct f #f)
        | #shiftUp 3 (ct f #f)
        | #subv 0 (NUM n) f #f
        | #subv 4 (NUM n) f #f
        | #shiftDown 0 (ct f #f)
        | #shiftDown 4 (ct f #f)
  = refl


infSearch‚áì‚ÇÅ : (w : ùïé¬∑) (f : Term) (#f : # f) (n : ‚Ñï)
              ‚Üí APPLY (infSearchF f) (NUM n) ‚áì infSearchI f (infSearchF f) (NUM n) from w to w
infSearch‚áì‚ÇÅ w f #f n =
  step-‚áì-from-to-trans
    {w} {w} {w}
    {APPLY (infSearchF f) (NUM n)}
    {APPLY (sub (infSearchF f) (LAMBDA (infSearchI (shiftUp 0 (shiftUp 0 f)) (VAR 1) (VAR 0)))) (NUM n)}
    {infSearchI f (infSearchF f) (NUM n)}
    refl
    (‚áì-trans‚ÇÇ
      {w} {w} {w}
      {APPLY (sub (infSearchF f) (LAMBDA (infSearchI (shiftUp 0 (shiftUp 0 f)) (VAR 1) (VAR 0)))) (NUM n)}
      {APPLY (LAMBDA (infSearchI f (infSearchF f) (VAR 0))) (NUM n)}
      {infSearchI f (infSearchF f) (NUM n)}
      (‚â°‚Üí‚áìfrom-to w (‚â°APPLY (sub-LAMBDA-infSearchI f #f) refl))
      (step-‚áì-from-to-trans
        {w} {w} {w}
        {APPLY (LAMBDA (infSearchI f (infSearchF f) (VAR 0))) (NUM n)}
        {sub (NUM n) (infSearchI f (infSearchF f) (VAR 0))}
        {infSearchI f (infSearchF f) (NUM n)}
        refl
        (‚â°‚Üí‚áìfrom-to w (sub-infSearchI f #f n))))


#infSearch‚áõ‚ÇÅ : (w : ùïé¬∑) (f : CTerm) (n : ‚Ñï)
                ‚Üí #APPLY (#infSearchF f) (#NUM n) #‚áõ #infSearchI f (#infSearchF f) (#NUM n) at w
#infSearch‚áõ‚ÇÅ w f n w1 e1 = lift (‚áì-from-to‚Üí‚áì (infSearch‚áì‚ÇÅ w1 ‚åú f ‚åù (CTerm.closed f) n))


#infSearch‚áì‚ÇÇ : (w1 w2 : ùïé¬∑) (f u R : Term) (n : ‚Ñï)
                ‚Üí APPLY f (NUM n) ‚áì INL u from w1 to w2
                ‚Üí infSearchI f R (NUM n) ‚áì NUM n from w1 to w2
#infSearch‚áì‚ÇÇ w1 w2 f u R n comp =
  ‚áì-trans‚ÇÇ
    {w1} {w2} {w2}
    {infSearchI f R (NUM n)}
    {ITE (INL u) (NUM n) (LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0)))}
    {NUM n}
    (ITE‚áì‚ÇÅ {w1} {w2} {APPLY f (NUM n)} {INL u} {NUM n} {LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0))} comp)
    (1 , refl)


#infSearch‚áõ‚ÇÇ : (w : ùïé¬∑) (f u R : CTerm) (n : ‚Ñï)
                ‚Üí #APPLY f (#NUM n) #‚áõ #INL u at w
                ‚Üí #infSearchI f R (#NUM n) #‚áõ #NUM n at w
#infSearch‚áõ‚ÇÇ w f u R n comp w1 e1 =
  lift (‚áì-from-to‚Üí‚áì (#infSearch‚áì‚ÇÇ w1 (fst c) ‚åú f ‚åù ‚åú u ‚åù ‚åú R ‚åù n (snd c)))
  where
    c : Œ£ ùïé¬∑ (Œª w' ‚Üí #APPLY f (#NUM n) #‚áì #INL u from w1 to w')
    c = ‚áõ‚Üí‚áìfrom-to (‚àÄùïé-mon e1 comp)


ITE-INR‚áì : (w : ùïé¬∑) (a t u : Term)
            ‚Üí ITE (INR a) t u ‚áì u from w to w
ITE-INR‚áì w a t u = 1 , ‚â°pair (sub-shiftUp0‚â° a u) refl


sub-APPLY-shiftUp0-VAR0 : (n : ‚Ñï) (R : Term) (#R : # R)
                          ‚Üí sub (NUM n) (APPLY (shiftUp 0 R) (VAR 0))
                             ‚â° APPLY R (NUM n)
sub-APPLY-shiftUp0-VAR0 n R #R
  rewrite #shiftUp 0 (ct R #R)
        | #subv 0 (NUM n) R #R
        | #shiftDown 0 (ct R #R)
   = refl


#infSearch‚áì‚ÇÉ : (w1 w2 : ùïé¬∑) (f u R : Term) (n : ‚Ñï) (#R : # R)
                ‚Üí APPLY f (NUM n) ‚áì INR u from w1 to w2
                ‚Üí infSearchI f R (NUM n) ‚áì APPLY R (NUM (suc n)) from w1 to w2
#infSearch‚áì‚ÇÉ w1 w2 f u R n #R comp =
  ‚áì-trans‚ÇÇ
    {w1} {w2} {w2}
    {infSearchI f R (NUM n)}
    {ITE (INR u) (NUM n) (LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0)))}
    {APPLY R (NUM (suc n))}
    (ITE‚áì‚ÇÅ {w1} {w2} {APPLY f (NUM n)} {INR u} {NUM n} {LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0))} comp)
    (‚áì-trans‚ÇÇ
      {w2} {w2} {w2}
      {ITE (INR u) (NUM n) (LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0)))}
      {LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0))}
      {APPLY R (NUM (suc n))}
      (ITE-INR‚áì w2 u (NUM n) (LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0))))
      (‚áì-trans‚ÇÇ
        {w2} {w2} {w2}
        {LET (SUC (NUM n)) (APPLY (shiftUp 0 R) (VAR 0))}
        {LET (NUM (suc n)) (APPLY (shiftUp 0 R) (VAR 0))}
        {APPLY R (NUM (suc n))}
        (LET‚áì {SUC (NUM n)} {NUM (suc n)} (APPLY (shiftUp 0 R) (VAR 0)) {w2} {w2} (1 , refl))
        (‚áì-trans‚ÇÇ
          {w2} {w2} {w2}
          {LET (NUM (suc n)) (APPLY (shiftUp 0 R) (VAR 0))}
          {sub (NUM (suc n)) (APPLY (shiftUp 0 R) (VAR 0))}
          {APPLY R (NUM (suc n))}
          (LET-val‚áì w2 (NUM (suc n)) (APPLY (shiftUp 0 R) (VAR 0)) tt)
          (‚â°‚Üí‚áìfrom-to w2 (sub-APPLY-shiftUp0-VAR0 (suc n) R #R)))))


#infSearch‚áõ‚ÇÉ : (w : ùïé¬∑) (f u R : CTerm) (n : ‚Ñï)
                ‚Üí #APPLY f (#NUM n) #‚áõ #INR u at w
                ‚Üí #infSearchI f R (#NUM n) #‚áõ #APPLY R (#NUM (suc n)) at w
#infSearch‚áõ‚ÇÉ w f u R n comp w1 e1 =
  lift (‚áì-from-to‚Üí‚áì (#infSearch‚áì‚ÇÉ w1 (fst c) ‚åú f ‚åù ‚åú u ‚åù ‚åú R ‚åù n (CTerm.closed R) (snd c)))
  where
    c : Œ£ ùïé¬∑ (Œª w' ‚Üí #APPLY f (#NUM n) #‚áì #INR u from w1 to w')
    c = ‚áõ‚Üí‚áìfrom-to (‚àÄùïé-mon e1 comp)


-- by induction on j
mpSearch3 : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ : CTerm) (n k j : ‚Ñï)
            ‚Üí k + j ‚â° n
            ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w #TRUE) (equalInType i w #TRUE) w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
            ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w
            ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w
            ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
                √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM m at w
                √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM m at w
                √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ #INL u‚ÇÅ at w
                √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ #INL u‚ÇÇ at w)))
mpSearch3 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n k 0 eqn hn ha‚ÇÅ ha‚ÇÇ rewrite +0 k | eqn =
  n , u‚ÇÅ , u‚ÇÇ , ‚â§-refl ,
  #‚áõ-trans
    {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM n)} {#infSearchI f‚ÇÅ (#infSearchF f‚ÇÅ) (#NUM n)} {#NUM n}
    (#infSearch‚áõ‚ÇÅ w f‚ÇÅ n)
    (#infSearch‚áõ‚ÇÇ w f‚ÇÅ u‚ÇÅ (#infSearchF f‚ÇÅ) n ha‚ÇÅ) ,
  #‚áõ-trans
    {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM n)} {#infSearchI f‚ÇÇ (#infSearchF f‚ÇÇ) (#NUM n)} {#NUM n}
    (#infSearch‚áõ‚ÇÅ w f‚ÇÇ n)
    (#infSearch‚áõ‚ÇÇ w f‚ÇÇ u‚ÇÇ (#infSearchF f‚ÇÇ) n ha‚ÇÇ) ,
  ha‚ÇÅ ,
  ha‚ÇÇ
mpSearch3 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n k (suc j) eqn hn ha‚ÇÅ ha‚ÇÇ with hn k (+‚â°‚Üí‚â§ k (suc j) n eqn)
... | a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , q) = concl
  where
    comp‚ÇÅ : #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM k at w
    comp‚ÇÅ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM k)} {#infSearchI f‚ÇÅ (#infSearchF f‚ÇÅ) (#NUM k)} {#NUM k}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÅ k)
             (#infSearch‚áõ‚ÇÇ w f‚ÇÅ a‚ÇÅ (#infSearchF f‚ÇÅ) k c‚ÇÅ)

    comp‚ÇÇ : #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM k at w
    comp‚ÇÇ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM k)} {#infSearchI f‚ÇÇ (#infSearchF f‚ÇÇ) (#NUM k)} {#NUM k}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÇ k)
             (#infSearch‚áõ‚ÇÇ w f‚ÇÇ a‚ÇÇ (#infSearchF f‚ÇÇ) k c‚ÇÇ)

    concl : Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
              √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ #INL u‚ÇÅ at w
              √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ #INL u‚ÇÇ at w)))
    concl = k , a‚ÇÅ , a‚ÇÇ , +‚â°‚Üí‚â§ k (suc j) n eqn , comp‚ÇÅ , comp‚ÇÇ , c‚ÇÅ , c‚ÇÇ
... | a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , q) = concl
  where
    comp‚ÇÅ : #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k)) at w
    comp‚ÇÅ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM k)} {#infSearchI f‚ÇÅ (#infSearchF f‚ÇÅ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k))}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÅ k)
             (#infSearch‚áõ‚ÇÉ w f‚ÇÅ a‚ÇÅ (#infSearchF f‚ÇÅ) k c‚ÇÅ)

    comp‚ÇÇ : #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k)) at w
    comp‚ÇÇ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM k)} {#infSearchI f‚ÇÇ (#infSearchF f‚ÇÇ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k))}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÇ k)
             (#infSearch‚áõ‚ÇÉ w f‚ÇÇ a‚ÇÇ (#infSearchF f‚ÇÇ) k c‚ÇÇ)

    ind : Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
            √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k)) #‚áõ #NUM m at w
            √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k)) #‚áõ #NUM m at w
            √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ #INL u‚ÇÅ at w
            √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ #INL u‚ÇÇ at w)))
    ind = mpSearch3 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n (suc k) j (trans (sym (+-suc k j)) eqn) hn ha‚ÇÅ ha‚ÇÇ

    concl : Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
              √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ #INL u‚ÇÅ at w
              √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ #INL u‚ÇÇ at w)))
    concl = fst ind , fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
            #‚áõ-trans {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k))} {#NUM (fst ind)} comp‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
            #‚áõ-trans {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k))} {#NUM (fst ind)} comp‚ÇÇ (fst (snd (snd (snd (snd (snd ind)))))) ,
            fst (snd (snd (snd (snd (snd (snd ind)))))) ,
            snd (snd (snd (snd (snd (snd (snd ind))))))


mpSearch2 : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ : CTerm) (n : ‚Ñï)
            ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w #TRUE) (equalInType i w #TRUE) w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
            ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w
            ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w
            ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
                  √ó #infSearch f‚ÇÅ #‚áõ #NUM m at w
                  √ó #infSearch f‚ÇÇ #‚áõ #NUM m at w
                  √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ #INL u‚ÇÅ at w
                  √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ #INL u‚ÇÇ at w)))
mpSearch2 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n hn ha‚ÇÅ ha‚ÇÇ = mpSearch3 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n 0 n refl hn ha‚ÇÅ ha‚ÇÇ


#¬¨Names‚Üí‚áõ! : (w : ùïé¬∑) (t u : CTerm)
               ‚Üí #¬¨Names t
               ‚Üí t #‚áõ u at w
               ‚Üí t #‚áõ! u at w
#¬¨Names‚Üí‚áõ! w t u nnt comp w1 e1 = lift (¬¨Names‚Üí‚áìfrom-to w1 w1 ‚åú t ‚åù ‚åú u ‚åù nnt (lower (comp w1 e1)))


#¬¨Names-#infSearch : {f : CTerm}
                     ‚Üí #¬¨Names f
                     ‚Üí #¬¨Names (#infSearch f)
#¬¨Names-#infSearch {f} nnf
  rewrite #shiftUp 0 f
        | #shiftUp 0 f
        | nnf = refl


mpSearch2¬¨Names : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ : CTerm) (n : ‚Ñï)
                  ‚Üí #¬¨Names f‚ÇÅ
                  ‚Üí #¬¨Names f‚ÇÇ
                  ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w #TRUE) (equalInType i w #TRUE) w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                  ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w
                  ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w
                  ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
                      √ó #infSearch f‚ÇÅ #‚áõ! #NUM m at w
                      √ó #infSearch f‚ÇÇ #‚áõ! #NUM m at w
                      √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ #INL u‚ÇÅ at w
                      √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ #INL u‚ÇÇ at w)))
mpSearch2¬¨Names i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n nnf‚ÇÅ nnf‚ÇÇ hn ha‚ÇÅ ha‚ÇÇ with mpSearch2 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n hn ha‚ÇÅ ha‚ÇÇ
... | m , v‚ÇÅ , v‚ÇÇ , len , c‚ÇÅ , c‚ÇÇ , d‚ÇÅ , d‚ÇÇ = m , v‚ÇÅ , v‚ÇÇ , len , concl‚ÇÅ , concl‚ÇÇ , d‚ÇÅ , d‚ÇÇ
  where
    concl‚ÇÅ : #infSearch f‚ÇÅ #‚áõ! #NUM m at w
    concl‚ÇÅ = #¬¨Names‚Üí‚áõ! w (#infSearch f‚ÇÅ) (#NUM m) (#¬¨Names-#infSearch {f‚ÇÅ} nnf‚ÇÅ) c‚ÇÅ

    concl‚ÇÇ : #infSearch f‚ÇÇ #‚áõ! #NUM m at w
    concl‚ÇÇ = #¬¨Names‚Üí‚áõ! w (#infSearch f‚ÇÇ) (#NUM m) (#¬¨Names-#infSearch {f‚ÇÇ} nnf‚ÇÇ) c‚ÇÇ


‚àà#NAT!‚ÜíBOOL‚ÜíequalInType-#ASSERT‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f t u : CTerm) (m : ‚Ñï)
                                     ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                                     ‚Üí t #‚áõ! #NUM m at w
                                     ‚Üí #APPLY f (#NUM m) #‚áõ #INL u at w
                                     ‚Üí ‚ààType i w (#ASSERT‚ÇÇ (#APPLY f t)) #AX
‚àà#NAT!‚ÜíBOOL‚ÜíequalInType-#ASSERT‚ÇÇ i w f t u m f‚àà cm cl =
  ‚â°CTerm‚ÜíequalInType
    (sym (#ASSERT‚ÇÇ‚â° (#APPLY f t)))
    (equalInType-EQ
      isTypeBOOL‚ÇÄ
      (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí equalInType i w' #BOOL‚ÇÄ (#APPLY f t) #BTRUE)
    aw w1 e1 =
      equalInType-trans eqb (strongBool‚ÜíequalInType-BOOL‚ÇÄ i w1 (#APPLY f (#NUM m)) (#BTRUE) (Mod.‚àÄùïé-‚ñ° M aw1))
      where
        aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí #strongBool w' (#APPLY f (#NUM m)) #BTRUE)
        aw1 w2 e2 = u , #AX , inj‚ÇÅ (‚àÄùïé-mon (‚äë-trans¬∑ e1 e2) cl , #‚áõ-refl w2 #BTRUE)

        eqn : equalInType i w1 #NAT! t (#NUM m)
        eqn = ‚ÜíequalInType-NAT!
                i w1 t (#NUM m)
                (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí m , ‚àÄùïé-mon (‚äë-trans¬∑ e1 e2) cm , #‚áõ!-refl {w2} {#NUM m}))

        eqb : equalInType i w1 #BOOL‚ÇÄ (#APPLY f t) (#APPLY f (#NUM m))
        eqb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 t (#NUM m) eqn


mpSearch1 : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ t‚ÇÅ t‚ÇÇ : CTerm) (n : ‚Ñï)
            ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
            ‚Üí #¬¨Names f‚ÇÅ
            ‚Üí #¬¨Names f‚ÇÇ
            ‚Üí t‚ÇÅ #‚áõ! #infSearchP f‚ÇÅ at w
            ‚Üí t‚ÇÇ #‚áõ! #infSearchP f‚ÇÇ at w
            ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w #TRUE) (equalInType i w #TRUE) w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
            ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w
            ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w
            ‚Üí SUMeq! (equalInType i w #NAT!) (Œª a b ea ‚Üí equalInType i w (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w t‚ÇÅ t‚ÇÇ
mpSearch1 i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ t‚ÇÅ t‚ÇÇ n f‚àà nnf‚ÇÅ nnf‚ÇÇ ct‚ÇÅ ct‚ÇÇ hn ha‚ÇÅ ha‚ÇÇ with mpSearch2¬¨Names i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n nnf‚ÇÅ nnf‚ÇÇ hn ha‚ÇÅ ha‚ÇÇ
... | m , v‚ÇÅ , v‚ÇÇ , len , c‚ÇÅ , c‚ÇÇ , d‚ÇÅ , d‚ÇÇ =
  #infSearch f‚ÇÅ , #infSearch f‚ÇÇ , #AX , #AX ,
  -- How can we prove that it lives in #NAT! if f is not pure? Could we use #NAT for the impure version of MP? Negation is fine though
  ‚ÜíequalInType-NAT! i w (#infSearch f‚ÇÅ) (#infSearch f‚ÇÇ) (Mod.‚àÄùïé-‚ñ° M p1) ,
  ct‚ÇÅ , --lower (ct‚ÇÅ w (‚äë-refl¬∑ w)) , --ct‚ÇÅ ,
  ct‚ÇÇ , --lower (ct‚ÇÇ w (‚äë-refl¬∑ w)) , --ct‚ÇÇ ,
  p2
-- For this we need to prove that (#infSearch f) computes to a number m ‚â§ n such that (#APPLY f (#NUM m)) computes to #INL
-- If f is not pure this might only be at a higher world, but if f is pure we can bring back the computation to the current world
-- ...so assume #¬¨Names f for this
  where
    p1 : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#infSearch f‚ÇÅ) (#infSearch f‚ÇÇ))
    p1 w1 e1 = m , ‚àÄùïé-mon e1 c‚ÇÅ , ‚àÄùïé-mon e1 c‚ÇÇ

    p2 : ‚ààType i w (sub0 (#infSearch f‚ÇÅ) (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR))) #AX
    p2 = ‚â°CTerm‚ÜíequalInType
           (sym (sub0-ASSERT‚ÇÇ-APPLY (#infSearch f‚ÇÅ) f‚ÇÅ))
           (‚àà#NAT!‚ÜíBOOL‚ÜíequalInType-#ASSERT‚ÇÇ i w f‚ÇÅ (#infSearch f‚ÇÅ) v‚ÇÅ m (equalInType-refl f‚àà) c‚ÇÅ d‚ÇÅ)


mpSearch : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ t‚ÇÅ t‚ÇÇ : CTerm)
           ‚Üí #¬¨Names f‚ÇÅ
           ‚Üí #¬¨Names f‚ÇÇ
           ‚Üí t‚ÇÅ #‚áõ! #infSearchP f‚ÇÅ at w
           ‚Üí t‚ÇÇ #‚áõ! #infSearchP f‚ÇÇ at w
           ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
           ‚Üí equalInType i w (#MP-right f‚ÇÅ) a‚ÇÅ a‚ÇÇ
           ‚Üí equalInType i w (#MP-right2 f‚ÇÅ) t‚ÇÅ t‚ÇÇ
mpSearch i w f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ t‚ÇÅ t‚ÇÇ nnf‚ÇÅ nnf‚ÇÇ ct‚ÇÅ ct‚ÇÇ f‚àà a‚àà =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 h1)
  where
    h1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí inhType i w' (#MP-right2 f‚ÇÅ))
    h1 = equalInType-SQUASH‚Üí a‚àà

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2 f‚ÇÅ)
                         ‚Üí equalInType i w' (#MP-right2 f‚ÇÅ) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 (t , t‚àà) =
      equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw2 p‚àà)
      where
        p‚àà : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' t t)
        p‚àà = equalInType-SUM!‚Üí {B = #[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)} t‚àà

        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' t t
                             ‚Üí equalInType i w' (#MP-right2 f‚ÇÅ) t‚ÇÅ t‚ÇÇ)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , x‚ÇÅ , x‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , x‚àà) =
          equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw3 (equalInType-NAT!‚Üí i w2 n‚ÇÅ n‚ÇÇ n‚àà))
          where
            aw3 : ‚àÄùïé w2 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ
                                  ‚Üí equalInType i w' (#MP-right2 f‚ÇÅ) t‚ÇÅ t‚ÇÇ)
            aw3 w3 e3 (n , d‚ÇÅ , d‚ÇÇ) =
              equalInType-SUM!
                {B = #[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)}
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-body i w3 f‚ÇÅ f‚ÇÅ (equalInType-refl (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                (‚àÄùïé-‚ñ°Func2 aw4 h2 y‚àà)
              where
                y‚àà : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí
                                             #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w' √ó #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w')))
                y‚àà = ‚àà#ASSERT‚ÇÇ‚Üí3 i w3 f‚ÇÅ f‚ÇÇ n‚ÇÅ x‚ÇÅ x‚ÇÇ n (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f‚ÇÅ) (equalInType-mon x‚àà w3 e3)) d‚ÇÅ

                h2 : ‚ñ°¬∑ w3 (Œª w' e ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                h2 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ‚â§‚Üí i w3 f‚ÇÅ f‚ÇÇ n (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))

                aw4 : ‚àÄùïé w3 (Œª w' e' ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                                      ‚Üí (Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ #INL u‚ÇÅ at w' √ó #APPLY f‚ÇÇ (#NUM n) #‚áõ #INL u‚ÇÇ at w')))
                                      ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' t‚ÇÅ t‚ÇÇ)
                aw4 w4 e4 hn (u‚ÇÅ , u‚ÇÇ , ha‚ÇÅ , ha‚ÇÇ) =
                  mpSearch1
                    i w4 f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ t‚ÇÅ t‚ÇÇ n
                    (equalInType-mon f‚àà w4 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4))))
                    nnf‚ÇÅ nnf‚ÇÇ
                    (#‚áõ!-mon {t‚ÇÅ} {#infSearchP f‚ÇÅ} (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4))) ct‚ÇÅ)
                    (#‚áõ!-mon {t‚ÇÇ} {#infSearchP f‚ÇÇ} (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4))) ct‚ÇÇ)
                    hn ha‚ÇÅ ha‚ÇÇ

\end{code}
