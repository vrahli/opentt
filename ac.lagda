\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import exBar
open import mod


module ac {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
          (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
          (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
          (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
          (F : Freeze {L} W C K P G N)
          (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
          (CB : ChoiceBar W M C K P G X N V F E)
          (EM : ExcludedMiddle (lsuc(L)))
          (EB : ExBar W M)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import exBarDef(W)(M)(EB)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N) using (IFEQ‚áõ‚ÇÅ ; IFEQ‚áõ= ; IFEQ‚áõ¬¨=)
open import terms8(W)(C)(K)(G)(X)(N)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(E)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import mp_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import mp_prop(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import mp_search(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB) using (‚â°‚Üí‚áìfrom-to)
open import lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(E)(EM)(EB) using (‚ñ°¬∑‚äéinhType)
open import barContP3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM) using (mseq‚ààbaire)


-- Also defined in continuity1
#[0]BAIRE : CTerm0
#[0]BAIRE = ct0 BAIRE c
  where
    c : #[ [ 0 ] ] BAIRE
    c = refl


#NREL : ‚Ñï ‚Üí CTerm
#NREL i = #FUN #NAT (#FUN #NAT (#UNIV i))


#[0]AC‚ÇÄ‚ÇÄ-left : CTerm0
#[0]AC‚ÇÄ‚ÇÄ-left = #[0]PI #[0]NAT (#[1]SQUASH (#[1]SUM #[1]NAT (#[2]LIFT (#[2]APPLY2 #[2]VAR2 #[2]VAR1 #[2]VAR0))))


#[0]AC‚ÇÄ‚ÇÄ-right : CTerm0
#[0]AC‚ÇÄ‚ÇÄ-right = #[0]SQUASH (#[0]SUM #[0]BAIRE (#[1]PI #[1]NAT (#[2]LIFT (#[2]APPLY2 #[2]VAR2 #[2]VAR0 (#[2]APPLY #[2]VAR1 #[2]VAR0)))))


#AC‚ÇÄ‚ÇÄ-left : CTerm ‚Üí CTerm
#AC‚ÇÄ‚ÇÄ-left R = #PI #NAT (#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R ‚åü #[1]VAR1 #[1]VAR0))))


#AC‚ÇÄ‚ÇÄ-right-SUM : CTerm ‚Üí CTerm
#AC‚ÇÄ‚ÇÄ-right-SUM R = #SUM #BAIRE (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0))))


#AC‚ÇÄ‚ÇÄ-right : CTerm ‚Üí CTerm
#AC‚ÇÄ‚ÇÄ-right R = #SQUASH (#AC‚ÇÄ‚ÇÄ-right-SUM R)


sub0-ac00-body : (R : CTerm)
                 ‚Üí sub0 R (#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right)
                    ‚â° #FUN (#AC‚ÇÄ‚ÇÄ-left R) (#AC‚ÇÄ‚ÇÄ-right R)
sub0-ac00-body R = CTerm‚â° c
  where
    c : ‚åú sub0 R (#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right) ‚åù
        ‚â° ‚åú #FUN (#AC‚ÇÄ‚ÇÄ-left R) (#AC‚ÇÄ‚ÇÄ-right R) ‚åù
    c rewrite #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 1 R
            | #shiftUp 2 R
            | #shiftUp 3 R
            | #shiftDown 3 R
            | #shiftDown 4 R = refl


sub0-ac00-left-body1 : (R n : CTerm)
                       ‚Üí sub0 n (#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R ‚åü #[1]VAR1 #[1]VAR0))))
                          ‚â° #SQUASH (#SUM #NAT (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n ‚åü #[0]VAR)))
sub0-ac00-left-body1 R n = CTerm‚â° c
  where
    c : ‚åú sub0 n (#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R ‚åü #[1]VAR1 #[1]VAR0)))) ‚åù
        ‚â° ‚åú #SQUASH (#SUM #NAT (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n ‚åü #[0]VAR))) ‚åù
    c rewrite #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 1 R
            | #shiftUp 0 n
            | #shiftUp 0 n
            | #shiftUp 0 n
            | #shiftUp 1 n
            | #subv 2 ‚åú n ‚åù ‚åú R ‚åù (CTerm.closed R)
            | #shiftDown 2 n
            | #shiftDown 2 R = refl


sub0-ac00-left-body2 : (R n m : CTerm)
                       ‚Üí sub0 m (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n ‚åü #[0]VAR))
                          ‚â° #LIFT (#APPLY2 R n m)
sub0-ac00-left-body2 R n m = CTerm‚â° c
  where
    c : ‚åú sub0 m (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n ‚åü #[0]VAR)) ‚åù
        ‚â° ‚åú #LIFT (#APPLY2 R n m) ‚åù
    c rewrite #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 0 m
            | #subv 0 ‚åú m ‚åù ‚åú R ‚åù (CTerm.closed R)
            | #subv 0 ‚åú m ‚åù ‚åú n ‚åù (CTerm.closed n)
            | #shiftDown 0 R
            | #shiftDown 0 n
            | #shiftDown 0 m = refl


--     Œ†(R : ‚Ñï‚Üí‚Ñï‚Üí‚Ñô).
--        (Œ†(n:‚Ñï).‚àÉ(b:‚Ñï).R n b)
--        ‚Üí ‚àÉ(f:‚Ñï‚Üí‚Ñï).Œ†(n:‚Ñï).R n (f n)
#AC‚ÇÄ‚ÇÄ : ‚Ñï ‚Üí CTerm
#AC‚ÇÄ‚ÇÄ i = #PI (#NREL i) (#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right)


isType-NREL : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí isType (suc i) w (#NREL i)
isType-NREL i w = eqTypesFUN‚Üê eqTypesNAT (eqTypesFUN‚Üê eqTypesNAT (eqTypesUniv w (suc i) i ‚â§-refl))


isType-#AC‚ÇÄ‚ÇÄ-left2 : (i : ‚Ñï) (w : ùïé¬∑) (R‚ÇÅ R‚ÇÇ n‚ÇÅ n‚ÇÇ : CTerm)
                     ‚Üí equalInType (suc i) w (#NREL i) R‚ÇÅ R‚ÇÇ
                     ‚Üí equalInType (suc i) w #NAT n‚ÇÅ n‚ÇÇ
                     ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m‚ÇÅ m‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT m‚ÇÅ m‚ÇÇ
                                      ‚Üí equalTypes
                                           (suc i) w'
                                           (sub0 m‚ÇÅ (#[0]LIFT (#[0]APPLY2 ‚åû R‚ÇÅ ‚åü ‚åû n‚ÇÅ ‚åü #[0]VAR)))
                                           (sub0 m‚ÇÇ (#[0]LIFT (#[0]APPLY2 ‚åû R‚ÇÇ ‚åü ‚åû n‚ÇÇ ‚åü #[0]VAR))))
isType-#AC‚ÇÄ‚ÇÄ-left2 i w R‚ÇÅ R‚ÇÇ n‚ÇÅ n‚ÇÇ R‚àà n‚àà w1 e1 m‚ÇÅ m‚ÇÇ m‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ac00-left-body2 R‚ÇÅ n‚ÇÅ m‚ÇÅ))
    (sym (sub0-ac00-left-body2 R‚ÇÇ n‚ÇÇ m‚ÇÇ))
    (equalTypes-LIFT2
      i w1 (#APPLY2 R‚ÇÅ n‚ÇÅ m‚ÇÅ) (#APPLY2 R‚ÇÇ n‚ÇÇ m‚ÇÇ)
      (equalInType‚ÜíequalTypes-aux
        (suc i) i ‚â§-refl w1 (#APPLY2 R‚ÇÅ n‚ÇÅ m‚ÇÅ) (#APPLY2 R‚ÇÇ n‚ÇÇ m‚ÇÇ)
        (equalInType-FUN‚Üí (equalInType-FUN‚Üí R‚àà w (‚äë-refl¬∑ w) n‚ÇÅ n‚ÇÇ n‚àà) w1 e1 m‚ÇÅ m‚ÇÇ m‚àà)))


isType-#AC‚ÇÄ‚ÇÄ-left1 : (i : ‚Ñï) (w : ùïé¬∑) (R‚ÇÅ R‚ÇÇ : CTerm)
                     ‚Üí equalInType (suc i) w (#NREL i) R‚ÇÅ R‚ÇÇ
                     ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT n‚ÇÅ n‚ÇÇ
                                      ‚Üí equalTypes
                                           (suc i) w'
                                           (sub0 n‚ÇÅ (#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÅ ‚åü #[1]VAR1 #[1]VAR0)))))
                                           (sub0 n‚ÇÇ (#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÇ ‚åü #[1]VAR1 #[1]VAR0))))))
isType-#AC‚ÇÄ‚ÇÄ-left1 i w R‚ÇÅ R‚ÇÇ R‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ac00-left-body1 R‚ÇÅ n‚ÇÅ))
    (sym (sub0-ac00-left-body1 R‚ÇÇ n‚ÇÇ))
    (eqTypesSQUASH‚Üê
      (eqTypesSUM‚Üê
        (Œª w2 e2 ‚Üí eqTypesNAT)
        (isType-#AC‚ÇÄ‚ÇÄ-left2 i w1 R‚ÇÅ R‚ÇÇ n‚ÇÅ n‚ÇÇ (equalInType-mon R‚àà w1 e1) n‚àà)))


isType-#AC‚ÇÄ‚ÇÄ-left : (i : ‚Ñï) (w : ùïé¬∑) (R‚ÇÅ R‚ÇÇ : CTerm)
                    ‚Üí equalInType (suc i) w (#NREL i) R‚ÇÅ R‚ÇÇ
                    ‚Üí equalTypes (suc i) w (#AC‚ÇÄ‚ÇÄ-left R‚ÇÅ) (#AC‚ÇÄ‚ÇÄ-left R‚ÇÇ)
isType-#AC‚ÇÄ‚ÇÄ-left i w R‚ÇÅ R‚ÇÇ R‚àà =
  eqTypesPI‚Üê
    {w} {suc i}
    {#NAT} {#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÅ ‚åü #[1]VAR1 #[1]VAR0)))}
    {#NAT} {#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÇ ‚åü #[1]VAR1 #[1]VAR0)))}
    (Œª w1 e1 ‚Üí eqTypesNAT)
    (isType-#AC‚ÇÄ‚ÇÄ-left1 i w R‚ÇÅ R‚ÇÇ R‚àà)


sub0-ac00-right-body1 : (R f : CTerm)
                        ‚Üí sub0 f (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0))))
                           ‚â° #PI #NAT (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü #[0]VAR (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
sub0-ac00-right-body1 R f = CTerm‚â° c
  where
    c : ‚åú sub0 f (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0)))) ‚åù
        ‚â° ‚åú #PI #NAT (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü #[0]VAR (#[0]APPLY ‚åû f ‚åü #[0]VAR))) ‚åù
    c rewrite #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 0 f
            | #shiftUp 0 f
            | #subv 1 ‚åú f ‚åù ‚åú R ‚åù (CTerm.closed R)
            | #shiftDown 1 R
            | #shiftDown 1 f = refl


sub0-ac00-right-body2 : (R f n : CTerm)
                        ‚Üí sub0 n (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü #[0]VAR (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
                           ‚â° #LIFT (#APPLY2 R n (#APPLY f n))
sub0-ac00-right-body2 R f n = CTerm‚â° c
  where
    c : ‚åú sub0 n (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü #[0]VAR (#[0]APPLY ‚åû f ‚åü #[0]VAR))) ‚åù
        ‚â° ‚åú #LIFT (#APPLY2 R n (#APPLY f n)) ‚åù
    c rewrite #shiftUp 0 R
            | #shiftUp 0 R
            | #shiftUp 0 n
            | #subv 0 ‚åú n ‚åù ‚åú R ‚åù (CTerm.closed R)
            | #subv 0 ‚åú n ‚åù ‚åú f ‚åù (CTerm.closed f)
            | #shiftDown 0 R
            | #shiftDown 0 f
            | #shiftDown 0 n = refl


isType-#AC‚ÇÄ‚ÇÄ-right-body2 : (i : ‚Ñï) (w : ùïé¬∑) (R‚ÇÅ R‚ÇÇ : CTerm) (f‚ÇÅ f‚ÇÇ : CTerm)
                           ‚Üí equalInType (suc i) w (#NREL i) R‚ÇÅ R‚ÇÇ
                           ‚Üí equalInType (suc i) w #BAIRE f‚ÇÅ f‚ÇÇ
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT n‚ÇÅ n‚ÇÇ
                                            ‚Üí equalTypes
                                                 (suc i) w'
                                                 (sub0 n‚ÇÅ (#[0]LIFT (#[0]APPLY2 ‚åû R‚ÇÅ ‚åü #[0]VAR (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR))))
                                                 (sub0 n‚ÇÇ (#[0]LIFT (#[0]APPLY2 ‚åû R‚ÇÇ ‚åü #[0]VAR (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR)))))
isType-#AC‚ÇÄ‚ÇÄ-right-body2 i w R‚ÇÅ R‚ÇÇ f‚ÇÅ f‚ÇÇ R‚àà f‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ac00-right-body2 R‚ÇÅ f‚ÇÅ n‚ÇÅ))
    (sym (sub0-ac00-right-body2 R‚ÇÇ f‚ÇÇ n‚ÇÇ))
    (equalTypes-LIFT2
       i w1
       (#APPLY2 R‚ÇÅ n‚ÇÅ (#APPLY f‚ÇÅ n‚ÇÅ))
       (#APPLY2 R‚ÇÇ n‚ÇÇ (#APPLY f‚ÇÇ n‚ÇÇ))
       (equalInType‚ÜíequalTypes-aux
          (suc i) i ‚â§-refl w1
          (#APPLY2 R‚ÇÅ n‚ÇÅ (#APPLY f‚ÇÅ n‚ÇÅ))
          (#APPLY2 R‚ÇÇ n‚ÇÇ (#APPLY f‚ÇÇ n‚ÇÇ))
          (equalInType-FUN‚Üí
            {suc i} {w1} {#NAT} {#UNIV i}
            (equalInType-FUN‚Üí R‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà)
            w1 (‚äë-refl¬∑ w1) (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ)
            (equalInType-FUN‚Üí f‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà))))


isType-#AC‚ÇÄ‚ÇÄ-right-body1 : (i : ‚Ñï) (w : ùïé¬∑) (R‚ÇÅ R‚ÇÇ : CTerm)
                           ‚Üí equalInType (suc i) w (#NREL i) R‚ÇÅ R‚ÇÇ
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #BAIRE f‚ÇÅ f‚ÇÇ
                                            ‚Üí equalTypes
                                                 (suc i) w'
                                                 (sub0 f‚ÇÅ (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÅ ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0)))))
                                                 (sub0 f‚ÇÇ (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÇ ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0))))))
isType-#AC‚ÇÄ‚ÇÄ-right-body1 i w R‚ÇÅ R‚ÇÇ R‚àà w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ac00-right-body1 R‚ÇÅ f‚ÇÅ))
    (sym (sub0-ac00-right-body1 R‚ÇÇ f‚ÇÇ))
    (eqTypesPI‚Üê
       {w1} {suc i}
       {#NAT} {#[0]LIFT (#[0]APPLY2 ‚åû R‚ÇÅ ‚åü #[0]VAR (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR))}
       {#NAT} {#[0]LIFT (#[0]APPLY2 ‚åû R‚ÇÇ ‚åü #[0]VAR (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))}
       (Œª w2 e2 ‚Üí eqTypesNAT)
       (isType-#AC‚ÇÄ‚ÇÄ-right-body2 i w1 R‚ÇÅ R‚ÇÇ f‚ÇÅ f‚ÇÇ (equalInType-mon R‚àà w1 e1) f‚àà ))


isType-#AC‚ÇÄ‚ÇÄ-right : (i : ‚Ñï) (w : ùïé¬∑) (R‚ÇÅ R‚ÇÇ : CTerm)
                     ‚Üí equalInType (suc i) w (#NREL i) R‚ÇÅ R‚ÇÇ
                     ‚Üí equalTypes (suc i) w (#AC‚ÇÄ‚ÇÄ-right R‚ÇÅ) (#AC‚ÇÄ‚ÇÄ-right R‚ÇÇ)
isType-#AC‚ÇÄ‚ÇÄ-right i w R‚ÇÅ R‚ÇÇ R‚àà =
  eqTypesSQUASH‚Üê
    (eqTypesSUM‚Üê
      (Œª w2 e2 ‚Üí eqTypesBAIRE)
      (isType-#AC‚ÇÄ‚ÇÄ-right-body1 i w R‚ÇÅ R‚ÇÇ R‚àà))


isType-#AC‚ÇÄ‚ÇÄ-body : (i : ‚Ñï) (w : ùïé¬∑)
                    ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (R‚ÇÅ R‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' (#NREL i) R‚ÇÅ R‚ÇÇ
                                     ‚Üí equalTypes (suc i) w' (sub0 R‚ÇÅ (#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right)) (sub0 R‚ÇÇ (#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right)))
isType-#AC‚ÇÄ‚ÇÄ-body i w w1 e1 R‚ÇÅ R‚ÇÇ R‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ac00-body R‚ÇÅ)) (sym (sub0-ac00-body R‚ÇÇ))
    (eqTypesFUN‚Üê
      (isType-#AC‚ÇÄ‚ÇÄ-left i w1 R‚ÇÅ R‚ÇÇ R‚àà)
      (isType-#AC‚ÇÄ‚ÇÄ-right i w1 R‚ÇÅ R‚ÇÇ R‚àà))


equalInType-#AC‚ÇÄ‚ÇÄ-left‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (R a‚ÇÅ a‚ÇÇ : CTerm)
                           ‚Üí equalInType (suc i) w (#AC‚ÇÄ‚ÇÄ-left R) a‚ÇÅ a‚ÇÇ
                           ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí (n : CTerm) ‚Üí ‚ààType (suc i) w1 #NAT n
                                             ‚Üí ‚ñ°¬∑ w1 (Œª w2 e2 ‚Üí Œ£ CTerm (Œª m ‚Üí
                                                  ‚ààType (suc i) w2 #NAT m
                                                  √ó inhType i w2 (#APPLY2 R n m))))
equalInType-#AC‚ÇÄ‚ÇÄ-left‚Üí i w R a‚ÇÅ a‚ÇÇ a‚àà w1 e1 n n‚àà =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw2 (aw1 w1 e1 n n n‚àà))
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT n‚ÇÅ n‚ÇÇ
                        ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí inhType (suc i) w' (#SUM #NAT (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n‚ÇÅ ‚åü #[0]VAR)))))
    aw1 w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
      equalInType-SQUASH‚Üí (‚Üí‚â°equalInType (sub0-ac00-left-body1 R n‚ÇÅ) (snd (snd (equalInType-PI‚Üí a‚àà)) w1 e1 n‚ÇÅ n‚ÇÇ n‚àà))

    aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí inhType (suc i) w' (#SUM #NAT (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n ‚åü #[0]VAR)))
                          ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w2 e2 ‚Üí Œ£ CTerm (Œª m ‚Üí ‚ààType (suc i) w2 #NAT m √ó inhType i w2 (#APPLY2 R n m))) e'))
    aw2 w2 e2 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw3 (equalInType-SUM‚Üí t‚àà)
      where
        aw3 : ‚àÄùïé w2 (Œª w' e' ‚Üí SUMeq (equalInType (suc i) w' #NAT) (Œª a b ea ‚Üí equalInType (suc i) w' (sub0 a (#[0]LIFT (#[0]APPLY2 ‚åû R ‚åü ‚åû n ‚åü #[0]VAR)))) w' t t
                              ‚Üí ‚ÜëwPred' (Œª w3 e3 ‚Üí Œ£ CTerm (Œª m‚ÇÅ ‚Üí ‚ààType (suc i) w3 #NAT m‚ÇÅ √ó inhType i w3 (#APPLY2 R n m‚ÇÅ))) e2 w' e')
        aw3 w3 e3 (m‚ÇÅ , m‚ÇÇ , b‚ÇÅ , b‚ÇÇ , m‚àà , c‚ÇÅ , c‚ÇÇ , b‚àà) z =
          m‚ÇÅ , equalInType-refl m‚àà , b‚ÇÅ ,
          equalInType-LIFT‚Üí i w3 (#APPLY2 R n m‚ÇÅ) b‚ÇÅ b‚ÇÅ (‚Üí‚â°equalInType (sub0-ac00-left-body2 R n m‚ÇÅ) (equalInType-refl b‚àà))


#[2]LE : CTerm2 ‚Üí CTerm2 ‚Üí CTerm2
#[2]LE a b = ct2 (LE ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] LE ‚åú a ‚åù ‚åú b ‚åù
    c rewrite fvars-NEG (LT ‚åú b ‚åù ‚åú a ‚åù) = ‚äÜ‚Üí‚äÜ? {fvars ‚åú b ‚åù ++ fvars ‚åú a ‚åù } {0 ‚à∑ 1 ‚à∑ [ 2 ]}
                                                  (‚äÜ++ (‚äÜ?‚Üí‚äÜ {fvars ‚åú b ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed b))
                                                        (‚äÜ?‚Üí‚äÜ {fvars ‚åú a ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed a)))



#[2]FUN : CTerm2 ‚Üí CTerm2 ‚Üí CTerm2
#[2]FUN a b = ct2 (FUN ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] FUN ‚åú a ‚åù ‚åú b ‚åù
    c rewrite fvars-FUN0 ‚åú a ‚åù ‚åú b ‚åù =
        ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ fvars ‚åú b ‚åù } {0 ‚à∑ 1 ‚à∑ [ 2 ]}
               (‚äÜ++ (‚äÜ?‚Üí‚äÜ {fvars ‚åú a ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed a))
                     (‚äÜ?‚Üí‚äÜ {fvars ‚åú b ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed b)))


#[2]EQ : CTerm2 ‚Üí CTerm2 ‚Üí CTerm2 ‚Üí CTerm2
#[2]EQ a b c = ct2 (EQ ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù) cl
  where
    cl : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] EQ ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù
    cl = ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ fvars ‚åú b ‚åù ++ fvars ‚åú c ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]}
                (‚äÜ++ (‚äÜ?‚Üí‚äÜ {fvars ‚åú a ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed a))
                      (‚äÜ++ (‚äÜ?‚Üí‚äÜ {fvars ‚åú b ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed b))
                            (‚äÜ?‚Üí‚äÜ {fvars ‚åú c ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed c))))


#[2]NAT : CTerm2
#[2]NAT = ct2 NAT refl


-- ‚àÄm‚â•n.Œ¥(m)=0 (where n is VAR 2)
#[1]Aac‚ÇÄ‚ÇÄ : Name ‚Üí CTerm1
#[1]Aac‚ÇÄ‚ÇÄ Œ¥ = #[1]PI #[1]NAT (#[2]FUN (#[2]LE #[2]VAR2 #[2]VAR0) (#[2]EQ (#[2]APPLY (#[2]CS Œ¥) #[2]VAR0) (#[2]NUM 0) #[2]NAT))


-- #Aac‚ÇÄ‚ÇÄ's body
#ABac‚ÇÄ‚ÇÄ : Name ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#ABac‚ÇÄ‚ÇÄ Œ¥ n k = #FUN (#LE n k) (#EQ (#APPLY (#CS Œ¥) k) (#NUM 0) #NAT)


#Aac‚ÇÄ‚ÇÄ : Name ‚Üí CTerm ‚Üí CTerm
#Aac‚ÇÄ‚ÇÄ Œ¥ n = #PI #NAT (#[0]FUN (#[0]LE ‚åû n ‚åü #[0]VAR) (#[0]EQ (#[0]APPLY (#[0]CS Œ¥) #[0]VAR) (#[0]NUM 0) #[0]NAT))


Aac‚ÇÄ‚ÇÄ : Name ‚Üí Term ‚Üí Term
Aac‚ÇÄ‚ÇÄ Œ¥ n = PI NAT (FUN (LE n (VAR 0)) (EQ (APPLY (CS Œ¥) (VAR 0)) (NUM 0) NAT))


RBac‚ÇÄ‚ÇÄ : Name ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
RBac‚ÇÄ‚ÇÄ Œ¥ n m =
  #IFEQ
    m
    #N0
    (#Aac‚ÇÄ‚ÇÄ Œ¥ n)
    (#NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n))


-- This is the following relation:
--   R n j = if j=0 then (‚àÄm‚â•n.Œ¥(m)=0) else ¬¨(‚àÄm‚â•n.Œ¥(m)=0)
-- which we want to use to prove the negation of AC‚ÇÄ‚ÇÄ
--
-- Could we try something along these lines, where Œ¥ is a ref, not a CS:
--   R n j = Œ¥=j
Rac‚ÇÄ‚ÇÄ : Name ‚Üí CTerm
Rac‚ÇÄ‚ÇÄ Œ¥ =
  #LAMBDA -- n
    (#[0]LAMBDA -- j
      (#[1]IFEQ
        #[1]VAR0
        (#[1]NUM 0)
        (#[1]Aac‚ÇÄ‚ÇÄ Œ¥)
        (#[1]NEG (#[1]Aac‚ÇÄ‚ÇÄ Œ¥))))


sub-Rac‚ÇÄ‚ÇÄ-1 : (Œ¥ : Name) (n m : CTerm)
              ‚Üí APPLY (sub ‚åú n ‚åù (LAMBDA (IFEQ (VAR 0) (NUM 0) ‚åú #[1]Aac‚ÇÄ‚ÇÄ Œ¥ ‚åù (NEG ‚åú #[1]Aac‚ÇÄ‚ÇÄ Œ¥ ‚åù)))) ‚åú m ‚åù
                 ‚â° APPLY (LAMBDA (IFEQ (VAR 0) (NUM 0) ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù (NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù))) ‚åú m ‚åù
sub-Rac‚ÇÄ‚ÇÄ-1 Œ¥ n m
  rewrite #shiftUp 0 n
        | #shiftUp 0 n
        | #shiftUp 0 n
        | #shiftDown 2 n
  = refl


sub-Rac‚ÇÄ‚ÇÄ-2 : (Œ¥ : Name) (n m : CTerm)
              ‚Üí sub ‚åú m ‚åù (IFEQ (VAR 0) (NUM 0) ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù (NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù))
                ‚â° IFEQ ‚åú m ‚åù (NUM 0) ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù (NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù)
sub-Rac‚ÇÄ‚ÇÄ-2 Œ¥ n m
  rewrite #shiftUp 0 n
        | #shiftUp 0 n
        | #shiftUp 0 m
        | #shiftUp 0 m
        | #subv 1 ‚åú m ‚åù ‚åú n ‚åù (CTerm.closed n)
        | #shiftDown 1 n
        | #shiftDown 0 m
        | #shiftDown 1 m
  = refl


APPLY-APPLY-Rac‚ÇÄ‚ÇÄ‚áì! : (w : ùïé¬∑) (Œ¥ : Name) (n m : CTerm)
                       ‚Üí APPLY2 ‚åú Rac‚ÇÄ‚ÇÄ Œ¥ ‚åù ‚åú n ‚åù ‚åú m ‚åù ‚áì ‚åú RBac‚ÇÄ‚ÇÄ Œ¥ n m ‚åù from w to w
APPLY-APPLY-Rac‚ÇÄ‚ÇÄ‚áì! w Œ¥ n m =
  ‚áì-trans‚ÇÇ
    {w} {w} {w}
    {APPLY (APPLY ‚åú Rac‚ÇÄ‚ÇÄ Œ¥ ‚åù ‚åú n ‚åù) ‚åú m ‚åù}
    {APPLY (sub ‚åú n ‚åù (LAMBDA (IFEQ (VAR 0) (NUM 0) ‚åú #[1]Aac‚ÇÄ‚ÇÄ Œ¥ ‚åù (NEG ‚åú #[1]Aac‚ÇÄ‚ÇÄ Œ¥ ‚åù)))) ‚åú m ‚åù}
    {‚åú RBac‚ÇÄ‚ÇÄ Œ¥ n m ‚åù}
    (1 , refl)
    (‚áì-trans‚ÇÇ
       {w} {w} {w}
       {APPLY (sub ‚åú n ‚åù (LAMBDA (IFEQ (VAR 0) (NUM 0) ‚åú #[1]Aac‚ÇÄ‚ÇÄ Œ¥ ‚åù (NEG ‚åú #[1]Aac‚ÇÄ‚ÇÄ Œ¥ ‚åù)))) ‚åú m ‚åù}
       {APPLY (LAMBDA (IFEQ (VAR 0) (NUM 0) ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù (NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù))) ‚åú m ‚åù}
       {‚åú RBac‚ÇÄ‚ÇÄ Œ¥ n m ‚åù}
       (‚â°‚Üí‚áìfrom-to w (sub-Rac‚ÇÄ‚ÇÄ-1 Œ¥ n m))
       (‚áì-trans‚ÇÇ
          {w} {w} {w}
          {APPLY (LAMBDA (IFEQ (VAR 0) (NUM 0) ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù (NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù))) ‚åú m ‚åù}
          {sub ‚åú m ‚åù (IFEQ (VAR 0) (NUM 0) ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù (NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n ‚åù))}
          {‚åú RBac‚ÇÄ‚ÇÄ Œ¥ n m ‚åù}
          (1 , refl)
          (‚â°‚Üí‚áìfrom-to w (sub-Rac‚ÇÄ‚ÇÄ-2 Œ¥ n m))))


#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ! : (w : ùïé¬∑) (Œ¥ : Name) (n m : CTerm)
                         ‚Üí #APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n m #‚áõ! RBac‚ÇÄ‚ÇÄ Œ¥ n m at w
#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ! w Œ¥ n m w1 e1 = lift (APPLY-APPLY-Rac‚ÇÄ‚ÇÄ‚áì! w1 Œ¥ n m)


#APPLY-#APPLY-RBac‚ÇÄ‚ÇÄ‚áõ!0 : (w : ùïé¬∑) (Œ¥ : Name) (n : CTerm)
                         ‚Üí RBac‚ÇÄ‚ÇÄ Œ¥ n #N0 #‚áõ! #Aac‚ÇÄ‚ÇÄ Œ¥ n at w
#APPLY-#APPLY-RBac‚ÇÄ‚ÇÄ‚áõ!0 w Œ¥ n w1 e1 = lift (1 , refl)


#APPLY-#APPLY-RBac‚ÇÄ‚ÇÄ‚áõ!1 : (w : ùïé¬∑) (Œ¥ : Name) (n : CTerm)
                         ‚Üí RBac‚ÇÄ‚ÇÄ Œ¥ n #N1 #‚áõ! #NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n) at w
#APPLY-#APPLY-RBac‚ÇÄ‚ÇÄ‚áõ!1 w Œ¥ n w1 e1 = lift (1 , refl)


#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ!0 : (w : ùïé¬∑) (Œ¥ : Name) (n : CTerm)
                         ‚Üí #APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n #N0 #‚áõ! #Aac‚ÇÄ‚ÇÄ Œ¥ n at w
#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ!0 w Œ¥ n =
  #‚áõ!-trans
    {w} {#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n #N0} {RBac‚ÇÄ‚ÇÄ Œ¥ n #N0} {#Aac‚ÇÄ‚ÇÄ Œ¥ n}
    (#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ! w Œ¥ n #N0)
    (#APPLY-#APPLY-RBac‚ÇÄ‚ÇÄ‚áõ!0 w Œ¥ n)


#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ!1 : (w : ùïé¬∑) (Œ¥ : Name) (n : CTerm)
                         ‚Üí #APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n #N1 #‚áõ! #NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n) at w
#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ!1 w Œ¥ n =
  #‚áõ!-trans
    {w} {#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n #N1} {RBac‚ÇÄ‚ÇÄ Œ¥ n #N1} {#NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n)}
    (#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ! w Œ¥ n #N1)
    (#APPLY-#APPLY-RBac‚ÇÄ‚ÇÄ‚áõ!1 w Œ¥ n)


sub-#ABac‚ÇÄ‚ÇÄ : (Œ¥ : Name) (k n : CTerm)
              ‚Üí sub0 k (#[0]FUN (#[0]LE ‚åû n ‚åü #[0]VAR) (#[0]EQ (#[0]APPLY (#[0]CS Œ¥) #[0]VAR) (#[0]NUM 0) #[0]NAT))
                 ‚â° #ABac‚ÇÄ‚ÇÄ Œ¥ n k
sub-#ABac‚ÇÄ‚ÇÄ Œ¥ k n = CTerm‚â° c
  where
    c : ‚åú sub0 k (#[0]FUN (#[0]LE ‚åû n ‚åü #[0]VAR) (#[0]EQ (#[0]APPLY (#[0]CS Œ¥) #[0]VAR) (#[0]NUM 0) #[0]NAT)) ‚åù
        ‚â° ‚åú #ABac‚ÇÄ‚ÇÄ Œ¥ n k ‚åù
    c rewrite #shiftUp 0 n
            | #shiftUp 0 n
            | #shiftUp 0 k
            | #shiftUp 0 k
            | #shiftDown 0 k
            | #subv 0 ‚åú k ‚åù ‚åú n ‚åù (CTerm.closed n)
            | #shiftDown 0 n
            | #shiftDown 1 k = refl


#LE‚â° : (a b : CTerm) ‚Üí #LE a b ‚â° #NEG (#LT b a)
#LE‚â° a b = CTerm‚â° refl


‚ÜíequalTypesLE : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm}
                 ‚Üí equalInType i w #NAT a‚ÇÅ a‚ÇÇ
                 ‚Üí equalInType i w #NAT b‚ÇÅ b‚ÇÇ
                 ‚Üí equalTypes i w (#LE a‚ÇÅ b‚ÇÅ) (#LE a‚ÇÇ b‚ÇÇ)
‚ÜíequalTypesLE {i} {w} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} a‚àà b‚àà =
  ‚Üí‚â°equalTypes
    (sym (#LE‚â° a‚ÇÅ b‚ÇÅ)) (sym (#LE‚â° a‚ÇÇ b‚ÇÇ))
    (eqTypesNEG‚Üê (‚ÜíequalTypesLT b‚àà a‚àà))


-- This is a constraint on names that requires them to compute to numbers
CS‚ààNAT : Set(lsuc(L))
CS‚ààNAT = {i : ‚Ñï} {w : ùïé¬∑} {k‚ÇÅ k‚ÇÇ : CTerm} (Œ¥ : Name)
          ‚Üí equalInType i w #NAT k‚ÇÅ k‚ÇÇ
          ‚Üí equalInType i w #NAT (#APPLY (#CS Œ¥) k‚ÇÅ) (#APPLY (#CS Œ¥) k‚ÇÇ)


equalTypes-Aac‚ÇÄ‚ÇÄ : (cn : CS‚ààNAT) (i : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) (n‚ÇÅ n‚ÇÇ : CTerm) (n : ‚Ñï)
                    ‚Üí n‚ÇÅ #‚áõ #NUM n at w
                    ‚Üí n‚ÇÇ #‚áõ #NUM n at w
                    ‚Üí equalTypes i w (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ) (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ)
equalTypes-Aac‚ÇÄ‚ÇÄ cn i w Œ¥ n‚ÇÅ n‚ÇÇ n cn‚ÇÅ cn‚ÇÇ =
  eqTypesPI‚Üê
    (Œª w1 e1 ‚Üí eqTypesNAT)
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (k‚ÇÅ k‚ÇÇ : CTerm) (k‚àà : equalInType i w' #NAT k‚ÇÅ k‚ÇÇ)
                        ‚Üí equalTypes i w' (sub0 k‚ÇÅ (#[0]FUN (#[0]LE ‚åû n‚ÇÅ ‚åü #[0]VAR) (#[0]EQ (#[0]APPLY (#[0]CS Œ¥) #[0]VAR) (#[0]NUM 0) #[0]NAT)))
                                           (sub0 k‚ÇÇ (#[0]FUN (#[0]LE ‚åû n‚ÇÇ ‚åü #[0]VAR) (#[0]EQ (#[0]APPLY (#[0]CS Œ¥) #[0]VAR) (#[0]NUM 0) #[0]NAT))))
    aw1 w1 e1 k‚ÇÅ k‚ÇÇ k‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub-#ABac‚ÇÄ‚ÇÄ Œ¥ k‚ÇÅ n‚ÇÅ))
        (sym (sub-#ABac‚ÇÄ‚ÇÄ Œ¥ k‚ÇÇ n‚ÇÇ))
        (eqTypesFUN‚Üê
          (‚ÜíequalTypesLE
            (‚ÜíequalInType-NAT
              i w1 n‚ÇÅ n‚ÇÇ
              (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí n , #‚áõ-mon {n‚ÇÅ} {#NUM n} (‚äë-trans¬∑ e1 e2) cn‚ÇÅ , #‚áõ-mon {n‚ÇÇ} {#NUM n} (‚äë-trans¬∑ e1 e2) cn‚ÇÇ)))
            k‚àà)
          (eqTypesEQ‚Üê
            eqTypesNAT
            (cn {i} {w1} {k‚ÇÅ} {k‚ÇÇ} Œ¥ k‚àà)
            (NUM-equalInType-NAT i w1 0)))


‚ÜíequalTypes-Aac‚ÇÄ‚ÇÄ : (cn : CS‚ààNAT) (i j : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) (n‚ÇÅ n‚ÇÇ : CTerm)
                    ‚Üí equalInType j w #NAT n‚ÇÅ n‚ÇÇ
                    ‚Üí equalTypes i w (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ) (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ)
‚ÜíequalTypes-Aac‚ÇÄ‚ÇÄ cn i j w Œ¥ n‚ÇÅ n‚ÇÇ n‚àà =
  eqTypes-local
    (Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 (n , c‚ÇÅ , c‚ÇÇ) ‚Üí equalTypes-Aac‚ÇÄ‚ÇÄ cn i w1 Œ¥ n‚ÇÅ n‚ÇÇ n c‚ÇÅ c‚ÇÇ) (equalInType-NAT‚Üí j w n‚ÇÅ n‚ÇÇ n‚àà))


equalTypes-RBac‚ÇÄ‚ÇÄ : (cn : CS‚ààNAT) (i : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) (n‚ÇÅ n‚ÇÇ m‚ÇÅ m‚ÇÇ : CTerm) (n m : ‚Ñï)
                    ‚Üí n‚ÇÅ #‚áõ #NUM n at w
                    ‚Üí n‚ÇÇ #‚áõ #NUM n at w
                    ‚Üí m‚ÇÅ #‚áõ #NUM m at w
                    ‚Üí m‚ÇÇ #‚áõ #NUM m at w
                    ‚Üí equalTypes i w (RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ m‚ÇÅ) (RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ m‚ÇÇ)
equalTypes-RBac‚ÇÄ‚ÇÄ cn i w Œ¥ n‚ÇÅ n‚ÇÇ m‚ÇÅ m‚ÇÇ n m cn‚ÇÅ cn‚ÇÇ cm‚ÇÅ cm‚ÇÇ =
  equalTypes-#‚áõ-left-right-rev
    {i} {w}
    {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ (#NUM m)} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ m‚ÇÅ}
    {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ m‚ÇÇ} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ (#NUM m)}
    (IFEQ‚áõ‚ÇÅ {w} {‚åú m‚ÇÅ ‚åù} {NUM m} {N0} {‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ ‚åù} {NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ ‚åù} cm‚ÇÅ)
    (IFEQ‚áõ‚ÇÅ {w} {‚åú m‚ÇÇ ‚åù} {NUM m} {N0} {‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ ‚åù} {NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ ‚åù} cm‚ÇÇ)
    concl
  where
    concl : equalTypes i w (RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ (#NUM m)) (RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ (#NUM m))
    concl with m ‚âü 0
    ... | yes p =
      equalTypes-#‚áõ-left-right-rev
        {i} {w}
        {#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ (#NUM m)}
        {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ (#NUM m)} {#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ}
        (IFEQ‚áõ= {0} {m} {w} {‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ ‚åù} {NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ ‚åù} p)
        (IFEQ‚áõ= {0} {m} {w} {‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ ‚åù} {NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ ‚åù} p)
        (equalTypes-Aac‚ÇÄ‚ÇÄ cn i w Œ¥ n‚ÇÅ n‚ÇÇ n cn‚ÇÅ cn‚ÇÇ)
    ... | no p =
      equalTypes-#‚áõ-left-right-rev
        {i} {w}
        {#NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ)} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ (#NUM m)}
        {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ (#NUM m)} {#NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ)}
        (IFEQ‚áõ¬¨= {0} {m} {w} {‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ ‚åù} {NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ ‚åù} p)
        (IFEQ‚áõ¬¨= {0} {m} {w} {‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ ‚åù} {NEG ‚åú #Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ ‚åù} p)
        (eqTypesNEG‚Üê (equalTypes-Aac‚ÇÄ‚ÇÄ cn i w Œ¥ n‚ÇÅ n‚ÇÇ n cn‚ÇÅ cn‚ÇÇ))


#NREL-R : (cn : CS‚ààNAT) (i : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) ‚Üí ‚ààType (suc i) w (#NREL i) (Rac‚ÇÄ‚ÇÄ Œ¥)
#NREL-R cn i w Œ¥ =
  equalInType-FUN
    eqTypesNAT
    (eqTypesFUN‚Üê eqTypesNAT (eqTypesUniv w (suc i) i ‚â§-refl))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT n‚ÇÅ n‚ÇÇ
                        ‚Üí equalInType (suc i) w' (#FUN #NAT (#UNIV i)) (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ) (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÇ))
    aw1 w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
      equalInType-FUN
        eqTypesNAT
        (eqTypesUniv w1 (suc i) i ‚â§-refl)
        aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (m‚ÇÅ m‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT m‚ÇÅ m‚ÇÇ
                             ‚Üí equalInType (suc i) w' (#UNIV i) (#APPLY (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ) m‚ÇÅ) (#APPLY (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÇ) m‚ÇÇ))
        aw2 w2 e2 m‚ÇÅ m‚ÇÇ m‚àà =
          equalTypes‚ÜíequalInType-UNIV
            ‚â§-refl
            (equalTypes-#‚áõ-left-right-rev
               {i} {w2}
               {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ m‚ÇÅ} {#APPLY (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ) m‚ÇÅ}
               {#APPLY (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÇ) m‚ÇÇ} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ m‚ÇÇ}
               (#‚áõ!‚Üí#‚áõ {w2} {#APPLY (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ) m‚ÇÅ} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ m‚ÇÅ} (#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ! w2 Œ¥ n‚ÇÅ m‚ÇÅ))
               (#‚áõ!‚Üí#‚áõ {w2} {#APPLY (#APPLY (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÇ) m‚ÇÇ} {RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ m‚ÇÇ} (#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ! w2 Œ¥ n‚ÇÇ m‚ÇÇ))
               (eqTypes-local (‚àÄùïé-‚ñ°Func2 aw3 (equalInType-NAT‚Üí (suc i) w2 n‚ÇÅ n‚ÇÇ (equalInType-mon n‚àà w2 e2)) (equalInType-NAT‚Üí (suc i) w2 m‚ÇÅ m‚ÇÇ m‚àà))))
          where
            aw3 : ‚àÄùïé w2 (Œª w' e' ‚Üí NATeq w' n‚ÇÅ n‚ÇÇ ‚Üí NATeq w' m‚ÇÅ m‚ÇÇ ‚Üí equalTypes i w' (RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ m‚ÇÅ) (RBac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÇ m‚ÇÇ))
            aw3 w3 e3 (n , cn‚ÇÅ , cn‚ÇÇ) (m , cm‚ÇÅ , cm‚ÇÇ) = equalTypes-RBac‚ÇÄ‚ÇÄ cn i w3 Œ¥ n‚ÇÅ n‚ÇÇ m‚ÇÅ m‚ÇÇ n m cn‚ÇÅ cn‚ÇÇ cm‚ÇÅ cm‚ÇÇ


equalInType-#‚áõ-rev-type : {i : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                          ‚Üí A #‚áõ B at w
                          ‚Üí equalInType i w B a b
                          ‚Üí equalInType i w A a b
equalInType-#‚áõ-rev-type {i} {w} {A} {B} {a} {b} comp h =
  TS.tsExt (typeSys i) w B A a b (equalTypes-#‚áõ-left-right-rev (#‚áõ-refl w B) comp (fst h)) h


-- Can we prove that AC‚ÇÄ‚ÇÄ is invalid using Rac‚ÇÄ‚ÇÄ?
--
-- We first prove that it satisfies its left side using
--   - an open modality as in lem.lagda
--   - classical reasoning (LEM)
-- This probably wouldn't work with a Beth or Kripke modality because we can probably prove that (Rac‚ÇÄ‚ÇÄ Œ¥) is undecidable
AC‚ÇÄ‚ÇÄ-left-R : (cn : CS‚ààNAT) (i : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) ‚Üí ‚ààType (suc i) w (#AC‚ÇÄ‚ÇÄ-left (Rac‚ÇÄ‚ÇÄ Œ¥)) #lamAX
AC‚ÇÄ‚ÇÄ-left-R cn i w Œ¥ =
  equalInType-PI
    {suc i} {w} {#NAT} {#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü #[1]VAR1 #[1]VAR0)))}
    (Œª w1 e1 ‚Üí eqTypesNAT)
    (isType-#AC‚ÇÄ‚ÇÄ-left1 i w (Rac‚ÇÄ‚ÇÄ Œ¥) (Rac‚ÇÄ‚ÇÄ Œ¥) (#NREL-R cn i w Œ¥))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT n‚ÇÅ n‚ÇÇ
                        ‚Üí  equalInType
                              (suc i) w'
                              (sub0 n‚ÇÅ (#[0]SQUASH (#[0]SUM #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü #[1]VAR1 #[1]VAR0)))))
                              (#APPLY #lamAX n‚ÇÅ) (#APPLY #lamAX n‚ÇÇ))
    aw1 w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-ac00-left-body1 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ))
        (‚ÜíequalInType-SQUASH p1)
      where
        p2 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí inhType i w' (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ) ‚äé ‚àÄùïé w' (Œª w'' _ ‚Üí ¬¨ inhType i w'' (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ)))
        p2 = ‚ñ°¬∑‚äéinhType i w1 (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ)

        p1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí inhType (suc i) w' (#SUM #NAT (#[0]LIFT (#[0]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü ‚åû n‚ÇÅ ‚åü #[0]VAR))))
        p1 = Mod.‚àÄùïé-‚ñ°Func M aw2 p2
          where
            aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí inhType i w' (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ) ‚äé ‚àÄùïé w' (Œª w'' _ ‚Üí ¬¨ inhType i w'' (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ))
                                  ‚Üí inhType (suc i) w' (#SUM #NAT (#[0]LIFT (#[0]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü ‚åû n‚ÇÅ ‚åü #[0]VAR))))
            aw2 w2 e2 (inj‚ÇÅ (f , f‚àà)) =
              #PAIR #N0 f ,
              equalInType-SUM
                (Œª w3 e3 ‚Üí eqTypesNAT)
                (isType-#AC‚ÇÄ‚ÇÄ-left2 i w2 (Rac‚ÇÄ‚ÇÄ Œ¥) (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ n‚ÇÅ (#NREL-R cn i w2 Œ¥) (equalInType-refl (equalInType-mon n‚àà w2 e2)))
                (Mod.‚àÄùïé-‚ñ° M q1)
              where
                q1 : ‚àÄùïé w2 (Œª w' _ ‚Üí SUMeq (equalInType (suc i) w' #NAT)
                                            (Œª m‚ÇÅ m‚ÇÇ m‚àà ‚Üí equalInType (suc i) w' (sub0 m‚ÇÅ (#[0]LIFT (#[0]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü ‚åû n‚ÇÅ ‚åü #[0]VAR))))
                                            w' (#PAIR #N0 f) (#PAIR #N0 f))
                q1 w3 e3 =
                  #N0 , #N0 , f , f ,
                  NUM-equalInType-NAT (suc i) w3 0 ,
                  #‚áõ-refl w3 (#PAIR #N0 f) , #‚áõ-refl w3 (#PAIR #N0 f) ,
                  ‚Üí‚â°equalInType
                    (sym (sub0-ac00-left-body2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N0))
                    (equalInType-LIFT‚Üê i w3 (#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N0) f f q2)
                  where
                    q2 : ‚ààType i w3 (#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N0) f
                    q2 = equalInType-#‚áõ-rev-type
                           (#‚áõ!‚Üí#‚áõ {w3} {#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N0} {#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ} (#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ!0 w3 Œ¥ n‚ÇÅ))
                           (equalInType-mon f‚àà w3 e3)
            aw2 w2 e2 (inj‚ÇÇ g) =
              #PAIR #N1 #AX ,
              equalInType-SUM
                (Œª w3 e3 ‚Üí eqTypesNAT)
                (isType-#AC‚ÇÄ‚ÇÄ-left2 i w2 (Rac‚ÇÄ‚ÇÄ Œ¥) (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ n‚ÇÅ (#NREL-R cn i w2 Œ¥) (equalInType-refl (equalInType-mon n‚àà w2 e2)))
                (Mod.‚àÄùïé-‚ñ° M q1)
              where
                q1 : ‚àÄùïé w2 (Œª w' _ ‚Üí SUMeq (equalInType (suc i) w' #NAT)
                                            (Œª m‚ÇÅ m‚ÇÇ m‚àà ‚Üí equalInType (suc i) w' (sub0 m‚ÇÅ (#[0]LIFT (#[0]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü ‚åû n‚ÇÅ ‚åü #[0]VAR))))
                                            w' (#PAIR #N1 #AX) (#PAIR #N1 #AX))
                q1 w3 e3 =
                  #N1 , #N1 , #AX , #AX ,
                  NUM-equalInType-NAT (suc i) w3 1 ,
                  #‚áõ-refl w3 (#PAIR #N1 #AX) , #‚áõ-refl w3 (#PAIR #N1 #AX) ,
                  ‚Üí‚â°equalInType
                    (sym (sub0-ac00-left-body2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N1))
                    (equalInType-LIFT‚Üê i w3 (#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N1) #AX #AX q2)
                  where
                    q2 : ‚ààType i w3 (#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N1) #AX
                    q2 = equalInType-#‚áõ-rev-type
                           (#‚áõ!‚Üí#‚áõ {w3} {#APPLY2 (Rac‚ÇÄ‚ÇÄ Œ¥) n‚ÇÅ #N1} {#NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n‚ÇÅ)} (#APPLY-#APPLY-Rac‚ÇÄ‚ÇÄ‚áõ!1 w3 Œ¥ n‚ÇÅ))
                           (equalInType-NEG
                             (‚ÜíequalTypes-Aac‚ÇÄ‚ÇÄ cn i (suc i) w3 Œ¥ n‚ÇÅ n‚ÇÅ (equalInType-mon (equalInType-refl n‚àà) w3 (‚äë-trans¬∑ e2 e3)))
                             Œª w4 e4 a‚ÇÅ a‚ÇÇ a‚àà ‚Üí g w4 (‚äë-trans¬∑ e3 e4) (a‚ÇÅ , equalInType-refl a‚àà))


AC‚ÇÄ‚ÇÄ-right-R : (cn : CS‚ààNAT) (i : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) ‚Üí ¬¨ inhType (suc i) w (#AC‚ÇÄ‚ÇÄ-right (Rac‚ÇÄ‚ÇÄ Œ¥))
AC‚ÇÄ‚ÇÄ-right-R cn i w Œ¥ (s , s‚àà) =
  lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí s‚àà)))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType (suc i) w' (#AC‚ÇÄ‚ÇÄ-right-SUM (Rac‚ÇÄ‚ÇÄ Œ¥))
                         ‚Üí Lift (lsuc L) ‚ä•)
    aw1 w1 e1 (p , p‚àà) =
      Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí {suc i} {w1} {#BAIRE} {#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0)))} p‚àà))
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType (suc i) w' #BAIRE)
                                       (Œª a b ea ‚Üí  equalInType (suc i) w' (sub0 a (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0))))))
                                       w' p p
                              ‚Üí Lift (lsuc L) ‚ä•)
        aw2 w2 e2 (f‚ÇÅ , f‚ÇÇ , q‚ÇÅ , q‚ÇÇ , f‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) = {!!}
          where
            -- q‚àà1 is: Œ†(n:‚Ñï).if f(n)=0 then ‚àÄm‚â•n.Œ¥(m)=0 else ¬¨(‚àÄm‚â•n.Œ¥(m)=0)
            -- we also know that (Œ†(n:‚Ñï).‚àÉ(b:‚Ñï).R n b), but here b is f(n), so this is not so useful
            -- are we trying to prove that even though ‚àÄm‚â•n.Œ¥(m)=0 is classically decidable, it is not computable so?
            -- Shouldn't we be able to prove ¬¨(‚àÄm‚â•n.Œ¥(m)=0) with an open bar model since we can always select a non-zero (see below #NEG-#Aac‚ÇÄ‚ÇÄ)
            q‚àà1 : equalInType (suc i) w2 (#PI #NAT (#[0]LIFT (#[0]APPLY2 ‚åû Rac‚ÇÄ‚ÇÄ Œ¥ ‚åü #[0]VAR (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) q‚ÇÅ q‚ÇÇ
            q‚àà1 = ‚Üí‚â°equalInType (sub0-ac00-right-body1 (Rac‚ÇÄ‚ÇÄ Œ¥) f‚ÇÅ) q‚àà


#NEG-#Aac‚ÇÄ‚ÇÄ : (cn : CS‚ààNAT) (i : ‚Ñï) (w : ùïé¬∑) (Œ¥ : Name) (n a b : CTerm) (k : ‚Ñï)
             ‚Üí n #‚áõ #NUM k at w
             ‚Üí equalInType i w (#NEG (#Aac‚ÇÄ‚ÇÄ Œ¥ n)) a b
#NEG-#Aac‚ÇÄ‚ÇÄ cn i w Œ¥ n a b k comp =
  equalInType-NEG
    (equalTypes-Aac‚ÇÄ‚ÇÄ cn i w Œ¥ n n k comp comp)
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#Aac‚ÇÄ‚ÇÄ Œ¥ n) f‚ÇÅ f‚ÇÇ)
    aw1 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà = {!!}
      where
        -- extends w1 with choices at least as high as n, and then add a 1 at index k‚â•n
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (m‚ÇÅ m‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT m‚ÇÅ m‚ÇÇ
                             ‚Üí equalInType i w' (#ABac‚ÇÄ‚ÇÄ Œ¥ n m‚ÇÅ) (#APPLY f‚ÇÅ m‚ÇÅ) (#APPLY f‚ÇÇ m‚ÇÇ))
        aw2 w2 e2 m‚ÇÅ m‚ÇÇ m‚àà =
          ‚Üí‚â°equalInType
            (sub-#ABac‚ÇÄ‚ÇÄ Œ¥ m‚ÇÅ n)
            (snd (snd (equalInType-PI‚Üí
              {i} {w2} {#NAT} {#[0]FUN (#[0]LE ‚åû n ‚åü #[0]VAR) (#[0]EQ (#[0]APPLY (#[0]CS Œ¥) #[0]VAR) (#[0]NUM 0) #[0]NAT)} {f‚ÇÅ} {f‚ÇÇ}
              (equalInType-mon f‚àà w2 e2))) w2 (‚äë-refl¬∑ w2) m‚ÇÅ m‚ÇÇ m‚àà)


‚ààNREL‚Üíinh-NUM·µ£ : (i : ‚Ñï) (w : ùïé¬∑) (R m : CTerm) (n k : ‚Ñï)
                  ‚Üí ‚ààType (suc i) w (#NREL i) R
                  ‚Üí m #‚áõ #NUM k at w
                  ‚Üí inhType i w (#APPLY2 R (#NUM n) m)
                  ‚Üí inhType i w (#APPLY2 R (#NUM n) (#NUM k))
‚ààNREL‚Üíinh-NUM·µ£ i w R m n k R‚àà ck (t , t‚àà) =
  t ,
  TS.tsExt
    (typeSys i) w (#APPLY2 R (#NUM n) m) (#APPLY2 R (#NUM n) (#NUM k)) t t
    (equalInType‚ÜíequalTypes-aux (suc i) i ‚â§-refl w
       (#APPLY2 R (#NUM n) m) (#APPLY2 R (#NUM n) (#NUM k))
       (equalInType-FUN‚Üí
         (equalInType-FUN‚Üí R‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (NUM-equalInType-NAT (suc i) w n))
         w (‚äë-refl¬∑ w) m (#NUM k)
         (‚ÜíequalInType-NAT (suc i) w m (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí k , #‚áõ-mon {m} {#NUM k} e' ck , #‚áõ-refl w' (#NUM k))))))
    t‚àà


CTermFun‚Üí‚ÑïFun : (kb : K‚ñ°) (i : ‚Ñï) (w : ùïé¬∑) (R : CTerm)
                 ‚Üí ‚ààType (suc i) w (#NREL i) R
                 ‚Üí ((n : CTerm) ‚Üí ‚ààType (suc i) w #NAT n ‚Üí Œ£ CTerm (Œª m ‚Üí ‚ààType (suc i) w #NAT m √ó inhType i w (#APPLY2 R n m)))
                 ‚Üí (n : ‚Ñï) ‚Üí Œ£ ‚Ñï (Œª m ‚Üí inhType i w (#APPLY2 R (#NUM n) (#NUM m)))
CTermFun‚Üí‚ÑïFun kb i w R R‚àà f n =
  k , ‚ààNREL‚Üíinh-NUM·µ£ i w R m n k R‚àà ck inh
  where
    h1 : Œ£ CTerm (Œª m ‚Üí ‚ààType (suc i) w #NAT m √ó inhType i w (#APPLY2 R (#NUM n) m))
    h1 = f (#NUM n) (NUM-equalInType-NAT (suc i) w n)

    m : CTerm
    m = fst h1

    m‚àà : NATeq w m m
    m‚àà = kb (equalInType-NAT‚Üí (suc i) w m m (fst (snd h1))) w (‚äë-refl¬∑ w)

    k : ‚Ñï
    k = fst m‚àà

    ck : m #‚áõ #NUM k at w
    ck = fst (snd m‚àà)

    inh : inhType i w (#APPLY2 R (#NUM n) m)
    inh = snd (snd h1)


-- Can we prove that AC‚ÇÄ‚ÇÄ is valid?
-- Maybe a proof similar to the one we had in Coq could work for Kripke modalities.
AC‚ÇÄ‚ÇÄ-valid : (kb : K‚ñ°) (i : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType (suc i) w (#AC‚ÇÄ‚ÇÄ i) #lam2AX
AC‚ÇÄ‚ÇÄ-valid kb i w =
  equalInType-PI
    {suc i} {w} {#NREL i} {#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right}
    (Œª w1 e1 ‚Üí isType-NREL i w1)
    (isType-#AC‚ÇÄ‚ÇÄ-body i w)
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (R‚ÇÅ R‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' (#NREL i) R‚ÇÅ R‚ÇÇ
                        ‚Üí equalInType (suc i) w' (sub0 R‚ÇÅ (#[0]FUN #[0]AC‚ÇÄ‚ÇÄ-left #[0]AC‚ÇÄ‚ÇÄ-right))
                                       (#APPLY #lam2AX R‚ÇÅ) (#APPLY #lam2AX R‚ÇÇ))
    aw1 w1 e1 R‚ÇÅ R‚ÇÇ R‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-ac00-body R‚ÇÅ))
        (equalInType-FUN
          (isType-#AC‚ÇÄ‚ÇÄ-left i w1 R‚ÇÅ R‚ÇÅ (equalInType-refl R‚àà))
          (isType-#AC‚ÇÄ‚ÇÄ-right i w1 R‚ÇÅ R‚ÇÅ (equalInType-refl R‚àà))
          aw2)
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' (#AC‚ÇÄ‚ÇÄ-left R‚ÇÅ) a‚ÇÅ a‚ÇÇ
                             ‚Üí equalInType (suc i) w' (#AC‚ÇÄ‚ÇÄ-right R‚ÇÅ) (#APPLY (#APPLY #lam2AX R‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lam2AX R‚ÇÇ) a‚ÇÇ))
        aw2 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà =
          ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw6)
          where
            aw3 : (n : CTerm) ‚Üí ‚ààType (suc i) w2 #NAT n
                              ‚Üí ‚àÄùïé w2 (Œª w'' e'' ‚Üí Œ£ CTerm (Œª m ‚Üí ‚ààType (suc i) w'' #NAT m √ó inhType i w'' (#APPLY2 R‚ÇÅ n m)))
            aw3 n n‚àà = kb (equalInType-#AC‚ÇÄ‚ÇÄ-left‚Üí i w2 R‚ÇÅ a‚ÇÅ a‚ÇÇ a‚àà w2 (‚äë-refl¬∑ w2) n n‚àà)

            aw4 : (n : CTerm) ‚Üí ‚ààType (suc i) w2 #NAT n
                              ‚Üí Œ£ CTerm (Œª m ‚Üí ‚ààType (suc i) w2 #NAT m √ó inhType i w2 (#APPLY2 R‚ÇÅ n m))
            aw4 n n‚àà = aw3 n n‚àà w2 (‚äë-refl¬∑ w2)

            aw5 : (n : ‚Ñï) ‚Üí Œ£ ‚Ñï (Œª m ‚Üí inhType i w2 (#APPLY2 R‚ÇÅ (#NUM n) (#NUM m)))
            aw5 = CTermFun‚Üí‚ÑïFun kb i w2 R‚ÇÅ (equalInType-refl (equalInType-mon R‚àà w2 e2)) aw4

            -- our generic element
            f : ‚Ñï ‚Üí ‚Ñï
            f n = fst (aw5 n)

            inh : (n : ‚Ñï) ‚Üí inhType i w2 (#APPLY2 R‚ÇÅ (#NUM n) (#NUM (f n)))
            inh n = snd (aw5 n)

            aw6 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType (suc i) w' (#AC‚ÇÄ‚ÇÄ-right-SUM R‚ÇÅ))
            aw6 w3 e3 =
              #PAIR (#MSEQ f) #AX ,
              equalInType-SUM
                (Œª w2 e2 ‚Üí eqTypesBAIRE)
                (isType-#AC‚ÇÄ‚ÇÄ-right-body1 i w3 R‚ÇÅ R‚ÇÅ (equalInType-refl (equalInType-mon R‚àà w3 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw7)
              where
                aw7 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType (suc i) w' #BAIRE) (Œª a b ea ‚Üí equalInType (suc i) w' (sub0 a (#[0]PI #[0]NAT (#[1]LIFT (#[1]APPLY2 ‚åû R‚ÇÅ ‚åü #[1]VAR0 (#[1]APPLY #[1]VAR1 #[1]VAR0)))))) w' (#PAIR (#MSEQ f) #AX) (#PAIR (#MSEQ f) #AX))
                aw7 w4 e4 =
                  #MSEQ f , #MSEQ f , #AX , #AX ,
                  mseq‚ààbaire (suc i) w4 f ,
                  #‚áõ-refl w4 (#PAIR (#MSEQ f) #AX) ,
                  #‚áõ-refl w4 (#PAIR (#MSEQ f) #AX) ,
                  ‚Üí‚â°equalInType
                    (sym (sub0-ac00-right-body1 R‚ÇÅ (#MSEQ f)))
                    (equalInType-PI
                      (Œª w' e' ‚Üí eqTypesNAT)
                      (isType-#AC‚ÇÄ‚ÇÄ-right-body2 i w4 R‚ÇÅ R‚ÇÅ (#MSEQ f) (#MSEQ f) (equalInType-refl (equalInType-mon R‚àà w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)))) (mseq‚ààbaire (suc i) w4 f))
                      (Œª w5 e5 m‚ÇÅ m‚ÇÇ m‚àà ‚Üí ‚Üí‚â°equalInType (sym (sub0-ac00-right-body2 R‚ÇÅ (#MSEQ f) m‚ÇÅ)) (aw8 w5 e5 m‚ÇÅ m‚ÇÇ m‚àà)))
                  where
                    aw8 : ‚àÄùïé w4 (Œª w' _ ‚Üí (m‚ÇÅ m‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT m‚ÇÅ m‚ÇÇ
                                        ‚Üí equalInType (suc i) w' (#LIFT (#APPLY2 R‚ÇÅ m‚ÇÅ (#APPLY (#MSEQ f) m‚ÇÅ))) (#APPLY #AX m‚ÇÅ) (#APPLY #AX m‚ÇÇ))
                    aw8 w5 e5 m‚ÇÅ m‚ÇÇ m‚àà =
                      equalInType-LIFT‚Üê
                        i w5 (#APPLY2 R‚ÇÅ m‚ÇÅ (#APPLY (#MSEQ f) m‚ÇÅ)) (#APPLY #AX m‚ÇÅ) (#APPLY #AX m‚ÇÇ)
                        {!!} -- The goal is to use inh above, but the extract is off. We need to truncate the APPLY2 too.


\end{code}
