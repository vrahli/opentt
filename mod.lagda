\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Sigma
open import Data.Unit using (‚ä§ ; tt)
open import Data.Product
open import Data.Sum
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; _‚à∏_ ; pred ; _‚äî_)
open import Data.Nat.Properties
open import Data.Nat.Induction
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open import Relation.Nullary
open import Data.Empty


open import util
open import calculus
open import world


module mod {L : Level} (W : PossibleWorlds {L})
       where
open import worldDef{L}(W)
open import bar(W)



record Mod : Set(lsuc(lsuc(L))) where
  constructor mkMod
  field
    -- ## Operators
    ‚ñ°             : (w : ùïé¬∑) (f : wPred w) ‚Üí Set(lsuc(L))
    ‚ñ°'            : (w : ùïé¬∑) {g : wPred w} (h : ‚ñ° w g) (f : wPredDep g) ‚Üí Set(lsuc(L))

    at‚ñ°           : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ° w f) (w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (p : f w' e') ‚Üí Set(lsuc(L))
--    at‚ñ°-refl : {w : ùïé¬∑} {f : wPred w} (F : ‚àÄùïé w f) ‚Üí at‚ñ° {w} {f} (‚àÄùïé-‚ñ° F) w (‚äë-refl¬∑ w) (F w (‚äë-refl¬∑ w))

    -- ## Axioms
    -- Monotonicity of the operators
    ‚Üë‚ñ°            : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ° w f) {w' : ùïé¬∑} (e : w ‚äë¬∑ w') ‚Üí ‚ñ° w' (‚ÜëwPred f e)
    ‚Üë'‚ñ°           : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ° w f) {w' : ùïé¬∑} (e : w ‚äë¬∑ w') ‚Üí ‚ñ° w' (‚ÜëwPred' f e)
    ‚Üë‚ñ°'           : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : ‚ñ° w f) {w' : ùïé¬∑} (e : w ‚äë¬∑ w')
                        ‚Üí ‚ñ°' w i g ‚Üí ‚ñ°' w' (‚Üë‚ñ° i e) (‚ÜëwPredDep g e)

    -- axiom K: ‚ñ°(A‚ÜíB)‚Üí‚ñ°A‚Üí‚ñ°B
    ‚ñ°Func         : {w : ùïé¬∑} {f g : wPred w}
                        ‚Üí ‚ñ° w (Œª w' e' ‚Üí f w' e' ‚Üí g w' e')
                        ‚Üí ‚ñ° w f ‚Üí ‚ñ° w g
    -- similar to axiom K??
    ‚àÄùïé-‚ñ°Func    : {w : ùïé¬∑} {f g : wPred w}
                        ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí f w' e' ‚Üí g w' e')
                        ‚Üí ‚ñ° w f ‚Üí ‚ñ° w g
    -- ‚ñ° ‚Üí ‚ñ°'
    ‚ñ°-‚ñ°'      : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f}
                        ‚Üí ‚ñ° w (Œª w' e' ‚Üí (x : f w' e') ‚Üí g w' e' x)
                        ‚Üí (i : ‚ñ° w f) ‚Üí ‚ñ°' w i g
    -- similar to above without ‚ñ°
    ‚àÄùïé-‚ñ°-‚ñ°' : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : ‚ñ° w f)
                        ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') (at : at‚ñ° i w' e' x) ‚Üí g w' e' x)
                        ‚Üí ‚ñ°' w i g

    -- name?
    ‚àÄùïé-‚ñ°        : {w : ùïé¬∑} {f : wPred w} ‚Üí ‚àÄùïé w f ‚Üí ‚ñ° w f

    -- ‚ñ°‚ñ°A‚Üí‚ñ°A name?
    ‚ñ°-idem        : {w : ùïé¬∑} {f : wPred w}
                        ‚Üí ‚ñ° w (Œª w' e' ‚Üí ‚ñ° w' (‚ÜëwPred' f e'))
                        ‚Üí ‚ñ° w f
    -- similar to above
    ‚ñ°'-idem       : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : ‚ñ° w f)
                        ‚Üí ‚ñ° w (Œª w' e' ‚Üí ‚ñ°' w' (‚Üë'‚ñ° i e') (‚ÜëwPredDep' g e'))
                        ‚Üí ‚ñ°' w i g

    -- ‚ñ°' ‚Üí ‚ñ°
    -- TODO: this generalizes ‚àÄùïé-‚ñ°Func. Get rid of it?
    ‚àÄùïé-‚ñ°'-‚ñ° : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} {h : wPred w} (i : ‚ñ° w f)
                        ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') ‚Üí at‚ñ° i w' e' x ‚Üí g w' e' x ‚Üí h w' e')
                        ‚Üí ‚ñ°' w i g ‚Üí ‚ñ° w h

    -- (A‚ÜíB‚ÜíC) ‚Üí ‚ñ°'A‚Üí‚ñ°'B‚Üí‚ñ°'C
    ‚ñ°'-comb-change : {w : ùïé¬∑} {f‚ÇÅ f‚ÇÇ f‚ÇÉ : wPred w}
                         {g‚ÇÅ : wPredDep f‚ÇÅ} {g‚ÇÇ : wPredDep f‚ÇÇ} {g‚ÇÉ : wPredDep f‚ÇÉ}
                         (i‚ÇÅ : ‚ñ° w f‚ÇÅ) (i‚ÇÇ : ‚ñ° w f‚ÇÇ) (i‚ÇÉ : ‚ñ° w f‚ÇÉ)
                         ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x‚ÇÅ : f‚ÇÅ w' e') (x‚ÇÇ : f‚ÇÇ w' e') (x‚ÇÉ : f‚ÇÉ w' e')
                                          ‚Üí g‚ÇÅ w' e' x‚ÇÅ ‚Üí g‚ÇÇ w' e' x‚ÇÇ ‚Üí g‚ÇÉ w' e' x‚ÇÉ)
                         ‚Üí ‚ñ°' w i‚ÇÅ g‚ÇÅ ‚Üí ‚ñ°' w i‚ÇÇ g‚ÇÇ ‚Üí ‚ñ°' w i‚ÇÉ g‚ÇÉ

    -- ‚ñ°A‚ÜíA some version of T?
    ‚ñ°-const       : {w : ùïé¬∑} {t : Set(lsuc(L))} ‚Üí ‚ñ° w (Œª w e ‚Üí t) ‚Üí t

    -- TODO: derivable from the others?
    -- ‚ñ°A‚Üí‚ñ°‚àÄA some version of T?
    ‚Üí‚ñ°‚àÄùïé : {w : ùïé¬∑} {f : wPred w} ‚Üí ‚ñ° w f ‚Üí ‚ñ° w (Œª w' e ‚Üí ‚àÄùïé w' (‚ÜëwPred f e))


--    atbar  : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ° w f) (w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (p : f w' e') ‚Üí Set(lsuc(L))
--    atBar-refl        : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ° w f) (p : f w (‚äë-refl¬∑ w)) ‚Üí atBar {w} {f} i w (‚äë-refl¬∑ w) p

--    wPredDepExtIrrBar : {w : ùïé¬∑} {f : wPred w} (h : wPredDep f) (i : ‚ñ° w f) ‚Üí Set(lsuc(L))
{--    ‚Üë‚ñ°'           : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : ‚ñ° w f) {w' : ùïé¬∑} (e : w' ‚äá w) {h : wPredDep (‚ÜëwPred f e)}
                        ‚Üí ‚àÄùïé w' (Œª w'' e'' ‚Üí (x y : f w'' (‚äë-trans¬∑ e e'')) (at : atBar i w'' (‚äë-trans¬∑ e e'') x) ‚Üí g w'' (‚äë-trans¬∑ e e'') x ‚Üí h w'' e'' y)
                        ‚Üí ‚ñ°' w i g ‚Üí ‚ñ°' w' (‚Üë‚ñ° i e) h--}

{--    ‚ñ°'-‚ñ°'      : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} {h : wPredDep f} (i : ‚ñ° w f)
                         ‚Üí wPredDepExtIrrBar g i
                         ‚Üí wPredDepExtIrrBar h i
                         ‚Üí ‚ñ°' w i (Œª w' e' z ‚Üí g w' e' z ‚Üí h w' e' z)
                         ‚Üí ‚ñ°' w i g ‚Üí ‚ñ°' w i h--}

{--    ‚ñ°-mon         : {w2 w1 : ùïé¬∑} {f : wPred w1} (e : w2 ‚äá w1)
                        ‚Üí ‚ñ° w1 f ‚Üí ‚ñ° w2 (‚ÜëwPred f e)
    ‚ñ°'-mon        : {w2 w1 : ùïé¬∑} {f : wPred w1} {g : wPredDep f} (e : w2 ‚äá w1) (i : ‚ñ° w1 f)
                        ‚Üí ‚ñ°' w1 i g ‚Üí ‚ñ°' w2 (‚ñ°-mon e i) (‚ÜëwPredDep' g e)--}

{--    ‚ñ°-idem2       : {w : ùïé¬∑} {f : wPred w}
                        ‚Üí wPredExtIrr f
                        ‚Üí ‚ñ° w (Œª w' e' ‚Üí ‚ñ° w' (‚ÜëwPred f e'))
                        ‚Üí ‚ñ° w f--}
{--    ‚ñ°'-idem2      : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : ‚ñ° w f)
                        ‚Üí wPredDepExtIrrBar g i
                        ‚Üí ‚ñ° w (Œª w' e' ‚Üí ‚ñ°' w' (‚Üë‚ñ° i e') (‚ÜëwPredDep g e'))
                        ‚Üí ‚ñ°' w i g--}
{--    ‚àÄùïé-‚ñ°'-‚ñ° : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} {h : wPred w}
                        ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') ‚Üí g w' e' x ‚Üí h w' e')
                        ‚Üí (i : ‚ñ° w f) ‚Üí ‚ñ°' w i g ‚Üí ‚ñ° w h--}
{--    ‚ñ°'-change     : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i j : ‚ñ° w f)
                        ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x y : f w' e') ‚Üí atBar i w' e' x ‚Üí atBar j w' e' y ‚Üí g w' e' x ‚Üí g w' e' y)
                        ‚Üí ‚ñ°' w i g ‚Üí ‚ñ°' w j g--}
    -- a more general version



‚ñ°'-comb : (b : Mod) {w : ùïé¬∑} {f : wPred w} {g h k : wPredDep f} (i : Mod.‚ñ° b w f)
              ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (z zg zh : f w' e')
                               ‚Üí g w' e' zg ‚Üí h w' e' zh ‚Üí k w' e' z)
              ‚Üí Mod.‚ñ°' b w i g ‚Üí Mod.‚ñ°' b w i h ‚Üí Mod.‚ñ°' b w i k
‚ñ°'-comb b {w} {f} {g} {h} {k} i aw j‚ÇÅ j‚ÇÇ =
  Mod.‚ñ°'-comb-change b i i i (Œª w1 e1 x‚ÇÅ x‚ÇÇ x‚ÇÉ a b ‚Üí aw w1 e1 x‚ÇÉ x‚ÇÅ x‚ÇÇ a b) j‚ÇÅ j‚ÇÇ


‚ñ°'-change : (b : Mod) {w : ùïé¬∑} {f k : wPred w} {g : wPredDep f} {h : wPredDep k} (i : Mod.‚ñ° b w f) (j : Mod.‚ñ° b w k)
                ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') (y : k w' e')
                                  ‚Üí g w' e' x ‚Üí h w' e' y)
                ‚Üí Mod.‚ñ°' b w i g ‚Üí Mod.‚ñ°' b w j h
‚ñ°'-change b {w} {f} {k} {g} {h} i j aw u =
  Mod.‚ñ°'-comb-change b i i j (Œª w1 e1 x‚ÇÅ x‚ÇÇ x‚ÇÉ a b ‚Üí aw w1 e1 x‚ÇÅ x‚ÇÉ a) u u


-- This is a consequence of [‚àÄùïé-‚ñ°'-‚ñ°]
‚ñ°'-‚ñ° : (b : Mod) {w : ùïé¬∑} {f : wPred w} {h : wPred w}
               ‚Üí (i : Mod.‚ñ° b w f) ‚Üí Mod.‚ñ°' b w i (Œª w1 e1 z ‚Üí h w1 e1) ‚Üí Mod.‚ñ° b w h
‚ñ°'-‚ñ° b {w} {f} {h} i q = Mod.‚àÄùïé-‚ñ°'-‚ñ° b i (Œª w1 e1 x at z ‚Üí z) q


-- This is a consequence of [‚ñ°'-comb] for 3 dependent bars
‚ñ°'3 : (b : Mod) {w : ùïé¬∑} {f : wPred w} {g h k j : wPredDep f} (i : Mod.‚ñ° b w f)
          ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (z : f w' e') (zg : f w' e') (zh : f w' e') (zk : f w' e')
                             ‚Üí g w' e' zg ‚Üí h w' e' zh ‚Üí k w' e' zk ‚Üí j w' e' z)
          ‚Üí Mod.‚ñ°' b w i g ‚Üí Mod.‚ñ°' b w i h ‚Üí Mod.‚ñ°' b w i k ‚Üí Mod.‚ñ°' b w i j
‚ñ°'3 b {w} {f} {g} {h} {k} {j} i imp ig ih ik = c
  where
    ip : Mod.‚ñ°' b w i (Œª w1 e1 z ‚Üí Œ£ (f w1 e1) Œª zg ‚Üí Œ£ (f w1 e1) Œª zh ‚Üí g w1 e1 zg √ó h w1 e1 zh)
    ip = ‚ñ°'-comb b i (Œª w1 e1 z zg zh xg xh ‚Üí zg , zh , xg , xh) ig ih

    c : Mod.‚ñ°' b w i j
    c = ‚ñ°'-comb b i (Œª w1 e1 zj zh zk (zg' , zh' , ig , ih) ik ‚Üí imp w1 e1 zj zg' zh' zk ig ih ik) ip ik


wPredDep‚ä§ : {w : ùïé¬∑} (f : wPred w) ‚Üí wPredDep f
wPredDep‚ä§ {w} f w1 e1 x = Lift (lsuc(L)) ‚ä§


‚àÄùïé-‚ñ°at : (m : Mod) {w : ùïé¬∑} {f : wPred w} {h : wPred w} (i : Mod.‚ñ° m w f)
          ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') (at : Mod.at‚ñ° m i w' e' x) ‚Üí h w' e')
          ‚Üí Mod.‚ñ° m w h
‚àÄùïé-‚ñ°at m {w} {f} {h} i aw =
  Mod.‚àÄùïé-‚ñ°'-‚ñ°
    m {w} {f} {wPredDep‚ä§ f} {h} i (Œª w1 e1 x at z ‚Üí aw w1 e1 x at)
    (Mod.‚ñ°-‚ñ°' m (Mod.‚àÄùïé-‚ñ° m (Œª w1 e1 x ‚Üí lift tt)) i)


‚àÄùïé-‚ñ°'-‚ñ°‚ÇÄ : (m : Mod) {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} {h : wPred w} (i : Mod.‚ñ° m w f)
             ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') ‚Üí g w' e' x ‚Üí h w' e')
             ‚Üí Mod.‚ñ°' m w i g ‚Üí Mod.‚ñ° m w h
‚àÄùïé-‚ñ°'-‚ñ°‚ÇÄ m {w} {f} {g} {h} i aw k = Mod.‚àÄùïé-‚ñ°'-‚ñ° m i (Œª w1 e1 z at y ‚Üí aw w1 e1 z y) k


‚àÄùïé-‚ñ°-‚ñ°'‚ÇÄ : (m : Mod) {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : Mod.‚ñ° m w f)
            ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí (x : f w' e') ‚Üí g w' e' x)
            ‚Üí Mod.‚ñ°' m w i g
‚àÄùïé-‚ñ°-‚ñ°'‚ÇÄ m {w} {f} {g} i aw = Mod.‚àÄùïé-‚ñ°-‚ñ°' m i (Œª w1 e1 x at ‚Üí aw w1 e1 x)


BarsProps‚ÜíMod : BarsProps ‚Üí Mod
BarsProps‚ÜíMod b =
  mkMod
    (Œª w ‚Üí Œ£‚ààùîπ (BarsProps.bars b) {w})
    (Œª w ‚Üí Œ£‚ààùîπ' (BarsProps.bars b) {w})
    ATŒ£‚ààùîπ
--    (ATŒ£‚ààùîπ‚ÜíŒ£‚ààùîπ‚àÄùïé (BarsProps.all b)) --(Œª {w} {f} i p ‚Üí ATŒ£‚ààùîπ-R p)
    (‚ÜëŒ£‚ààùîπ (BarsProps.mon b))
    (‚Üë'Œ£‚ààùîπ (BarsProps.mon b))
    (Œª {w} {f} {g} ‚Üí ‚ÜëŒ£‚ààùîπ' (BarsProps.mon b) {w} {f} {g})
    (Œ£‚ààùîπFunc (BarsProps.isect b))
    (‚àÄùïé-Œ£‚ààùîπFunc {BarsProps.bars b})
    (Œ£‚ààùîπ-Œ£‚ààùîπ' (BarsProps.mon b))
    (‚àÄùïé-Œ£‚ààùîπ-Œ£‚ààùîπ' (BarsProps.all b))
    (‚àÄùïé-Œ£‚ààùîπ (BarsProps.all b))
    (Œ£‚ààùîπ-idem (BarsProps.fam2 b))
    (Œ£‚ààùîπ'-idem (BarsProps.mon b) (BarsProps.fam2 b))
    (‚àÄùïé-Œ£‚ààùîπ'-Œ£‚ààùîπ (BarsProps.fam2 b))
--    (Œ£‚ààùîπ'-comb (BarsProps.mon b) (BarsProps.isect b) (BarsProps.fam2 b))
--    (Œ£‚ààùîπ'-change (BarsProps.mon b) (BarsProps.isect b) (BarsProps.fam2 b))
    (Œ£‚ààùîπ'-comb-change (BarsProps.mon b) (BarsProps.isect b) (BarsProps.fam2 b))
    (Œ£‚ààùîπ-const (BarsProps.ex b))
    ‚ÜíŒ£‚ààùîπ‚àÄùïé


‚Üí‚àÉùïé : (B : BarsProps) {w : ùïé¬∑} {f : wPred w} ‚Üí Mod.‚ñ° (BarsProps‚ÜíMod B) w f ‚Üí ‚àÉùïé w f
‚Üí‚àÉùïé B {w} {f} (b , h) = fst c , fst (snd c) , h (proj‚ÇÅ (snd c)) (snd (snd c)) (proj‚ÇÅ c) (‚äë-refl¬∑ _) (fst (snd c))
  where
    c : Œ£ ùïé¬∑ Œª w' ‚Üí Œ£ (w ‚äë¬∑ w') Œª e ‚Üí (ùîπ.bar b) w'
    c = BarsProps.ex B (ùîπ.bars b) (ùîπ.ext b)

    e : w ‚äë¬∑ fst c
    e = ùîπ.ext b (snd (snd c))

\end{code}
