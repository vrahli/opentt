\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module not_lpo {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
               (C : Choice)
               (K : Compatible W C)
               (P : Progress {L} W C K)
               (G : GetChoice {L} W C K)
               (X : ChoiceExt {L} W C)
               (N : NewChoice {L} W C K G)
               (EC : Encode)
               (V : ChoiceVal W C K G X N EC)
               (F : Freeze {L} W C K P G N)
               (CB : ChoiceBar W M C K P G X N EC V F)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(EC)(V)
  using (¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ ; isValue‚ÑÇ‚ÇÄ¬∑ ; isValue‚ÑÇ‚ÇÅ¬∑)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
  using (freezable¬∑ ; freezableStart¬∑)

open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)
open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypes-mon)
--open import ind2(W)(M)(C)(K)(G)(X)(N)(EC)

--open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
--  using ()
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypesSQUASH‚Üê ; eqTypesUNION‚Üê ; eqTypesPI‚Üê ; eqTypesNEG‚Üê ; equalInType-PI‚Üí ; ‚â°CTerm‚ÜíequalInType ;
         NUM-equalInType-NAT! ; equalInType-NEG ; equalInType-refl ; equalInType-mon ; equalInType-SQUASH‚Üí ;
         equalInType-NEG‚Üí)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (isType-#NAT!‚ÜíBOOL‚ÇÄ ; ‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ ; fun-equalInType-SQUASH-UNION ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ;
         ‚ÜíequalInType-SQUASH ; ‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ!)
open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#SUM-ASSERT‚ÇÇ ; #PI-NEG-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ ; ASSERT‚ÇÑ ;
         #[1]ASSERT‚ÇÑ ; #SUM-ASSERT‚ÇÑ ; #SUM-ASSERT‚ÇÖ ; #PI-NEG-ASSERT‚ÇÑ ; ‚â°ASSERT‚ÇÑ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ ;
         ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÑ ; #[0]ASSERT‚ÇÑ ; #ASSERT‚ÇÑ ; sub0-NEG-ASSERT‚ÇÑ-APPLY ; #ASSERT‚ÇÑ‚â°)

open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypesUNION!‚Üê ; UNIONeq! ; equalInType-UNION! ; equalInType-UNION!‚Üí ; SUMeq! ; equalInType-SUM!‚Üí)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (followChoice¬∑ ; #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ ; Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (sq-dec ; #Œ£choice ; ¬¨-dec-Œ£choice ; equalInType-#Œ£choice ; ¬¨equalInType-#Œ£choice ; ¬¨‚àÄùïé¬¨equalInType-#Œ£choice ;
         sub0-#Œ£choice-body‚â° ; #Œ£choice‚â°)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (Res‚ÑÇ ; ‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (Bool‚ÇÄ‚ÑÇ ; Bool‚ÇÄ!‚ÑÇ ; #SUM-ASSERT‚ÇÇ‚Üí#Œ£choice ; #PI-NEG-ASSERT‚ÇÇ‚Üí#Œ£choice ; #SUM-ASSERT‚ÇÖ‚Üí#Œ£choice)

open import terms8(W)(C)(K)(G)(X)(N)(EC)
  using (SUM! ; #SUM! ; UNION! ; #UNION!)

open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚â°SUM! ; #[0]SUM! ; ‚â°UNION! ; #[0]UNION!)


{-- This version relies on ASSERT‚ÇÇ, which is defined in terms of BOOL,
 -- but a similar result could be obained using QTBOOL instead.
 --}

LPO : Term
LPO = PI NAT!‚ÜíBOOL‚ÇÄ! (SQUASH (UNION! (SUM! NAT! (ASSERT‚ÇÑ (APPLY (VAR 1) (VAR 0))))
                                     (PI NAT! (NEG (ASSERT‚ÇÑ (APPLY (VAR 1) (VAR 0)))))))


#LPO : CTerm
#LPO = ct LPO c
  where
    c : # LPO
    c = refl



#[0]LPO-left : CTerm0
#[0]LPO-left = #[0]SUM! #[0]NAT! (#[1]ASSERT‚ÇÑ (#[1]APPLY #[1]VAR1 #[1]VAR0))


#[0]LPO-right : CTerm0
#[0]LPO-right = #[0]PI #[0]NAT! (#[1]NEG (#[1]ASSERT‚ÇÑ (#[1]APPLY #[1]VAR1 #[1]VAR0)))


#LPO-left : CTerm ‚Üí CTerm
#LPO-left = #SUM-ASSERT‚ÇÖ


#LPO-right : CTerm ‚Üí CTerm
#LPO-right = #PI-NEG-ASSERT‚ÇÑ


#LPO-PI : CTerm
#LPO-PI = #PI #NAT!‚ÜíBOOL‚ÇÄ! (#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right))


#LPO‚â°#PI : #LPO ‚â° #LPO-PI
#LPO‚â°#PI = CTerm‚â° refl



sub0-squash-union-LPO : (a : CTerm) ‚Üí sub0 a (#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right))
                                    ‚â° #SQUASH (#UNION! (#LPO-left a) (#LPO-right a))
sub0-squash-union-LPO a =
  ‚â°sub0-#[0]SQUASH a (#[0]UNION! #[0]LPO-left #[0]LPO-right) (#UNION! (#LPO-left a) (#LPO-right a))
                   (CTerm‚â° (‚â°UNION! (‚â°SUM! refl (‚â°ASSERT‚ÇÑ (‚Üí‚â°APPLY e refl))) (‚â°PI refl (‚â°NEG (‚â°ASSERT‚ÇÑ (‚Üí‚â°APPLY e refl))))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl



isTypeLPO-PI : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #LPO-PI
isTypeLPO-PI w n =
  eqTypesPI‚Üê {w} {n}
              {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right)}
              {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right)}
              (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n)
              aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right)))
                                        (sub0 a‚ÇÇ (#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right))))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-squash-union-LPO a‚ÇÅ | sub0-squash-union-LPO a‚ÇÇ = eqt
      where
        eqt1 : equalTypes n w' (#LPO-left a‚ÇÅ) (#LPO-left a‚ÇÇ)
        eqt1 = ‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ eqb

        eqt2 : equalTypes n w' (#LPO-right a‚ÇÅ) (#LPO-right a‚ÇÇ)
        eqt2 = ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÑ eqb

        eqt : equalTypes n w' (#SQUASH (#UNION! (#LPO-left a‚ÇÅ) (#LPO-right a‚ÇÅ))) (#SQUASH (#UNION! (#LPO-left a‚ÇÇ) (#LPO-right a‚ÇÇ)))
        eqt = eqTypesSQUASH‚Üê (eqTypesUNION!‚Üê eqt1 eqt2)



isTypeLPO : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #LPO
isTypeLPO w n rewrite #LPO‚â°#PI = isTypeLPO-PI w n


isTypeNegLPO : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#NEG #LPO)
isTypeNegLPO w n = eqTypesNEG‚Üê (isTypeLPO w n)


fun-equalInType-SQUASH-UNION! : {n : ‚Ñï} {w : ùïé¬∑} {a b c d u v : CTerm}
                              ‚Üí isType n w c
                              ‚Üí isType n w d
                              ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí inhType n w' a ‚Üí inhType n w' c)
                              ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí inhType n w' b ‚Üí inhType n w' d)
                              ‚Üí equalInType n w (#SQUASH (#UNION! a b)) u v
                              ‚Üí equalInType n w (#SQUASH (#UNION! c d)) #AX #AX
fun-equalInType-SQUASH-UNION! {n} {w} {a} {b} {c} {d} {u} {v} istc istd imp1 imp2 eqi =
  ‚ÜíequalInType-SQUASH (Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí eqi)))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType n w' (#UNION! a b) ‚Üí ‚ñ°¬∑ w' (Œª w'' e'' ‚Üí (z : w ‚äë¬∑ w'') ‚Üí inhType n w'' (#UNION! c d)))
    aw1 w1 e1 (t , eqj) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-UNION!‚Üí eqj)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí UNIONeq! (equalInType n w' a) (equalInType n w' b) w' t t
                             ‚Üí (z : w ‚äë¬∑ w') ‚Üí inhType n w' (#UNION! c d))
        aw2 w2 e2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqk)) z = #INL (fst (imp1 w2 z (x , equalInType-refl eqk))) , eql
          where
            eql : ‚ààType n w2 (#UNION! c d) (#INL (fst (imp1 w2 z (x , equalInType-refl eqk))))
            eql = equalInType-UNION!
                    (eqTypes-mon (uni n) istc w2 z)
                    (eqTypes-mon (uni n) istd w2 z)
                    (Mod.‚àÄùïé-‚ñ° M Œª w3 e3 ‚Üí
                      fst (imp1 w2 z (x , equalInType-refl eqk)) ,
                      fst (imp1 w2 z (x , equalInType-refl eqk)) ,
                      inj‚ÇÅ (#‚áõ!-refl {w3} {#INL (fst (imp1 w2 z (x , equalInType-refl eqk)))} ,
                            #‚áõ!-refl {w3} {#INL (fst (imp1 w2 z (x , equalInType-refl eqk)))} ,
                            equalInType-mon (snd (imp1 w2 z (x , equalInType-refl eqk))) w3 e3))
        aw2 w2 e2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqk)) z = #INR (fst (imp2 w2 z (x , equalInType-refl eqk))) , eqr
          where
            eqr : ‚ààType n w2 (#UNION! c d) (#INR (fst (imp2 w2 z (x , equalInType-refl eqk))))
            eqr = equalInType-UNION!
                    (eqTypes-mon (uni n) istc w2 z)
                    (eqTypes-mon (uni n) istd w2 z)
                    (Mod.‚àÄùïé-‚ñ° M Œª w3 e3 ‚Üí
                      fst (imp2 w2 z (x , equalInType-refl eqk)) ,
                      fst (imp2 w2 z (x , equalInType-refl eqk)) ,
                      inj‚ÇÇ (#‚áõ!-refl {w3} {#INR (fst (imp2 w2 z (x , equalInType-refl eqk)))} ,
                            #‚áõ!-refl {w3} {#INR (fst (imp2 w2 z (x , equalInType-refl eqk)))} ,
                            equalInType-mon (snd (imp2 w2 z (x , equalInType-refl eqk))) w3 e3))


equalInType-SQUASH-UNION!‚Üí : {i : ‚Ñï} {w : ùïé¬∑} {a b u v : CTerm}
                           ‚Üí equalInType i w (#SQUASH (#UNION! a (#NEG b))) u v
                           ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí inhType i w' a ‚äé ‚àÄùïé w' (Œª w'' _ ‚Üí ¬¨ inhType i w'' b))
equalInType-SQUASH-UNION!‚Üí {i} {w} {a} {b} {u} {v} eqi =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3)
  where
    h1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType i w' (#UNION! a (#NEG b)) t t))
    h1 = equalInType-SQUASH‚Üí eqi

    h2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí UNIONeq! (equalInType i w'' a) (equalInType i w'' (#NEG b)) w'' t t)))
    h2 = Mod.‚àÄùïé-‚ñ°Func M (Œª w' e (t , eqj) ‚Üí t , equalInType-UNION!‚Üí eqj) h1

    h3 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí UNIONeq! (equalInType i w'' a)
                                                                 (Œª x y ‚Üí  ‚àÄùïé w'' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ))
                                                                 w'' t t)))
    h3 = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 (t , eqt) ‚Üí t , Mod.‚àÄùïé-‚ñ°Func M (Œª { w3 e3 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , z)) ‚Üí x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , z) ;
                                                                     w3 e3 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , z)) ‚Üí x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , equalInType-NEG‚Üí z) }) eqt) h2

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí UNIONeq! (equalInType i w'' a)
                                                                   (Œª x y ‚Üí ‚àÄùïé w'' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ))
                                                                   w'' t t))
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí  inhType i w'' a ‚äé ‚àÄùïé w'' (Œª w''' _ ‚Üí ¬¨ inhType i w''' b)) e'))
    aw1 w1 e1 (t , j) = Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw2 j)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí UNIONeq! (equalInType i w' a) (Œª x y ‚Üí ‚àÄùïé w' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ)) w' t t
                             ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí ‚ÜëwPred' (Œª w''' e‚ÇÅ ‚Üí inhType i w''' a ‚äé ‚àÄùïé w''' (Œª w'''' _ ‚Üí ¬¨ inhType i w'''' b)) e1 w'' e) e'))
        aw2 w2 e2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , z)) = Mod.‚àÄùïé-‚ñ° M (Œª w3 e3 x‚ÇÅ x‚ÇÇ ‚Üí inj‚ÇÅ (x , equalInType-mon (equalInType-refl z) w3 e3))
        aw2 w2 e2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , z)) = Mod.‚àÄùïé-‚ñ° M (Œª w3 e3 x‚ÇÅ x‚ÇÇ ‚Üí inj‚ÇÇ (Œª w4 e4 (t , h) ‚Üí z w4 (‚äë-trans¬∑ e3 e4) t t h))


sq-dec! : CTerm ‚Üí CTerm
sq-dec! t = #SQUASH (#UNION! t (#NEG t))


¬¨-dec!-Œ£choice : (w : ùïé¬∑) (i : ‚Ñï)
               ‚Üí ¬¨ equalInType i (startNewChoice Res‚ÑÇ w) (sq-dec! (#Œ£choice (newChoice¬∑ w) ‚ÑÇ‚ÇÅ¬∑)) #AX #AX
¬¨-dec!-Œ£choice w1 i eqi = concl h3
  where
    name : Name
    name = newChoice¬∑ w1

    r : Res
    r = Res‚ÑÇ

    w2 : ùïé¬∑
    w2 = startChoice¬∑ name r w1

    e2 : w1 ‚äë¬∑ w2
    e2 = startNewChoice‚äè r w1

    k1 : ‚ÑÇ¬∑
    k1 = ‚ÑÇ‚ÇÅ¬∑ -- This has to be different from r's default value

    dks : (w : ùïé¬∑) ‚Üí ¬¨ ‚àºC! w (‚ÑÇ‚ÜíC¬∑ (Res.def r)) (‚ÑÇ‚ÜíC¬∑ k1)
    dks = ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑

    h1 : equalInType i w2 (#SQUASH (#UNION! (#Œ£choice name k1) (#NEG (#Œ£choice name k1)))) #AX #AX
    h1 = eqi

    h2 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#Œ£choice name k1) ‚äé ‚àÄùïé w' (Œª w'' _ ‚Üí ¬¨ inhType i w'' (#Œ£choice name k1)))
    h2 = equalInType-SQUASH-UNION!‚Üí h1

    oc1 : only‚ÑÇ‚ààùïé (Res.def r) name w2
    oc1 n = getChoice-startNewChoice n r w1

    comp1 : compatible¬∑ name w2 r
    comp1 = startNewChoiceCompatible r w1

    fb1 : freezable¬∑ name w2
    fb1 = freezableStart¬∑ r w1

    -- We follow the choice
    w3 : ùïé¬∑
    w3 = fst (followChoice¬∑ name h2 oc1 comp1 fb1)

    e3 : w2 ‚äë¬∑ w3
    e3 = fst (snd (followChoice¬∑ name h2 oc1 comp1 fb1))

    oc2 : only‚ÑÇ‚ààùïé (Res.def r) name w3
    oc2 = fst (snd (snd (followChoice¬∑ name h2 oc1 comp1 fb1)))

    comp2 : compatible¬∑ name w3 r
    comp2 = fst (snd (snd (snd (followChoice¬∑ name h2 oc1 comp1 fb1))))

    fb2 : freezable¬∑ name w3
    fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h2 oc1 comp1 fb1)))))

    h3 : inhType i w3 (#Œ£choice name k1) ‚äé ‚àÄùïé w3 (Œª w'' _ ‚Üí ¬¨ inhType i w'' (#Œ£choice name k1))
    h3 = snd (snd (snd (snd (snd (followChoice¬∑ name h2 oc1 comp1 fb1)))))

    -- 1st injection: proved by ¬¨equalInType-#Œ£choice
    -- For this it is enough to be able to make a choice different from k1 forever, for example choosing 0 forever

    -- 2nd injection: proved by ¬¨‚àÄùïé¬¨equalInType-#Œ£choice
    -- This is where we make another choice than the default choice

    -- conclusion
    concl : (inhType i w3 (#Œ£choice name k1) ‚äé ‚àÄùïé w3 (Œª w'' _ ‚Üí ¬¨ inhType i w'' (#Œ£choice name k1)))
            ‚Üí ‚ä•
    concl (inj‚ÇÅ eqi) = ¬¨equalInType-#Œ£choice i w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ dks oc2 comp2 fb2 eqi
    concl (inj‚ÇÇ aw) = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice i w3 name k1 sat-‚ÑÇ‚ÇÅ comp2 fb2 aw


#PI-NEG-ASSERT‚ÇÑ‚Üí#Œ£choice : Bool‚ÇÄ!‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                         ‚Üí compatible¬∑ name w Res‚ÑÇ
                         ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                         ‚Üí inhType n w (#PI-NEG-ASSERT‚ÇÑ (#CS name))
                         ‚Üí inhType n w (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
#PI-NEG-ASSERT‚ÇÑ‚Üí#Œ£choice bcb {n} {w} {name} comp sat (f , inh) =
  #lamAX , equalInType-NEG aw1 aw2
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]NEG (#[0]ASSERT‚ÇÑ (#[0]APPLY (#[0]CS name) #[0]VAR))))
                                          (#APPLY f a‚ÇÅ)
                                          (#APPLY f a‚ÇÇ))
    aw0 = snd (snd (equalInType-PI‚Üí {n} {w} {#NAT!} {#[0]NEG (#[0]ASSERT‚ÇÑ (#[0]APPLY (#[0]CS name) #[0]VAR))} inh))

    aw1 : isType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
    aw1 = equalInType-#Œ£choice w name ‚ÑÇ‚ÇÅ¬∑ comp sat

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑) a‚ÇÅ a‚ÇÇ)
    aw2 w1 e1 p‚ÇÅ p‚ÇÇ eqi = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
      where
        aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq! (equalInType n w' #NAT!)
                                      (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                      w' p‚ÇÅ p‚ÇÇ
                             ‚Üí Lift (lsuc L) ‚ä•)
        aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (eqi3 eqi4)
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#NEG (#ASSERT‚ÇÑ (#APPLY (#CS name) a‚ÇÅ))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ)
            eqi2 = ‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT‚ÇÑ-APPLY a‚ÇÅ (#CS name)) (aw0 w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ a‚ÇÇ ea)

            eqi3 : ¬¨ equalInType n w2 (#ASSERT‚ÇÑ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi3 = equalInType-NEG‚Üí eqi2 w2 (‚äë-refl¬∑ _) b‚ÇÅ b‚ÇÇ

            eqi4 : equalInType n w2 (#ASSERT‚ÇÑ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi4 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÑ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1

        h0 : equalInType n w1 (#SUM! #NAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) p‚ÇÅ p‚ÇÇ
        h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) eqi

        h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq! (equalInType n w' #NAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' p‚ÇÅ p‚ÇÇ)
        h1 = equalInType-SUM!‚Üí {B = #[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ} h0


-- Assuming that our choices are Bools
¬¨LPO : Bool‚ÇÄ!‚ÑÇ CB ‚Üí (w : ùïé¬∑) ‚Üí member w (#NEG #LPO) #lamAX
¬¨LPO bcb w = n , equalInType-NEG (isTypeLPO w n) aw1
  where
    n : ‚Ñï
    n = 1

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #LPO a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea =
      h (fun-equalInType-SQUASH-UNION! (equalInType-#Œ£choice w2 name ‚ÑÇ‚ÇÅ¬∑ comp1 (0 , sat-‚ÑÇ‚ÇÅ 0))
                                       (eqTypesNEG‚Üê (equalInType-#Œ£choice w2 name ‚ÑÇ‚ÇÅ¬∑ comp1 (0 , sat-‚ÑÇ‚ÇÅ 0)))
                                       imp1
                                       imp2
                                       h1)
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ! f g
                             ‚Üí equalInType n w' (sub0 f (#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right))) (#APPLY F f) (#APPLY G g))
        aw2 = snd (snd (equalInType-PI‚Üí {n} {w1} {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]SQUASH (#[0]UNION! #[0]LPO-left #[0]LPO-right)} ea))

        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ! f g
                             ‚Üí equalInType n w' (#SQUASH (#UNION! (#LPO-left f) (#LPO-right f))) (#APPLY F f) (#APPLY G g))
        aw3 w' e f g ex = ‚â°CTerm‚ÜíequalInType (sub0-squash-union-LPO f) (aw2 w' e f g ex)

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        h : ¬¨ equalInType n w2 (sq-dec! (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)) #AX #AX
        h = ¬¨-dec!-Œ£choice w1 n

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #BOOL‚ÇÄ! (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #NAT!‚ÜíBOOL‚ÇÄ! f
        eqf1 = ‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ! eqf2

        h1 : equalInType n w2 (#SQUASH (#UNION! (#LPO-left f) (#LPO-right f))) (#APPLY F f) (#APPLY G f)
        h1 = aw3 w2 e2 f f eqf1

        imp1 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#LPO-left f) ‚Üí inhType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
        imp1 w3 e3 inh = #SUM-ASSERT‚ÇÖ‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh

        imp2 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#LPO-right f) ‚Üí inhType n w' (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)))
        imp2 w3 e3 inh = #PI-NEG-ASSERT‚ÇÑ‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh

\end{code}[hide]
