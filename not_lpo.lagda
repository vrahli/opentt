\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar


module not_lpo {L : Level} (W : PossibleWorlds {L})
               (C : Choice) (M : Compatible W C) (P : Progress {L} W C M)
               (G : GetChoice {L} W C M) (X : ChoiceExt {L} C) (N : NewChoice {L} W C M G)
               (F : Freeze {L} W C M P G N)
               (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
               (CB : ChoiceBar W C M P G X N F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(M)
open import getChoiceDef(W)(C)(M)(G)
open import newChoiceDef(W)(C)(M)(G)(N)
open import choiceExtDef(W)(C)(M)(G)(X)
open import freezeDef(W)(C)(M)(P)(G)(N)(F)
open import computation(W)(C)(M)(G)
open import bar(W)
open import barI(W)(C)(M)(P)
open import theory(W)(C)(M)(P)(G)(E)
open import props0(W)(C)(M)(P)(G)(E)
open import ind2(W)(C)(M)(P)(G)(E)

open import props1(W)(C)(M)(P)(G)(E)
open import props2(W)(C)(M)(P)(G)(E)
open import props3(W)(C)(M)(P)(G)(E)
open import lem_props(W)(C)(M)(P)(G)(X)(E)

open import choiceBarDef(W)(C)(M)(P)(G)(X)(N)(F)(E)(CB)
open import not_lem(W)(C)(M)(P)(G)(X)(N)(F)(E)(CB)
open import typeC(W)(C)(M)(P)(G)(X)(N)(F)(E)(CB)
open import boolC(W)(C)(M)(P)(G)(X)(N)(F)(E)(CB)



LPO : Term
LPO = PI NAT‚ÜíBOOL (SQUASH (UNION (SUM NAT (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))
                                  (PI NAT (NEG (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0)))))))


#LPO : CTerm
#LPO = ct LPO c
  where
    c : # LPO
    c = refl



#[0]LPO-left : CTerm0
#[0]LPO-left = #[0]SUM #[0]NAT (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))


#[0]LPO-right : CTerm0
#[0]LPO-right = #[0]PI #[0]NAT (#[1]NEG (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0)))


#LPO-left : CTerm ‚Üí CTerm
#LPO-left f = #SUM #NAT (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR))


#LPO-right : CTerm ‚Üí CTerm
#LPO-right f = #PI #NAT (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))


#LPO-PI : CTerm
#LPO-PI = #PI #NAT‚ÜíBOOL (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))


#LPO‚â°#PI : #LPO ‚â° #LPO-PI
#LPO‚â°#PI = CTerm‚â° refl



sub0-squash-union-LPO : (a : CTerm) ‚Üí sub0 a (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))
                                       ‚â° #SQUASH (#UNION (#LPO-left a) (#LPO-right a))
sub0-squash-union-LPO a =
  ‚â°sub0-#[0]SQUASH a (#[0]UNION #[0]LPO-left #[0]LPO-right) (#UNION (#LPO-left a) (#LPO-right a))
                   (CTerm‚â° (‚â°UNION (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))) (‚â°PI refl (‚â°NEG (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl




‚ÜíequalTypes-#LPO-left : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                         ‚Üí equalInType n w #NAT‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                         ‚Üí equalTypes n w (#LPO-left a‚ÇÅ) (#LPO-left a‚ÇÇ)
‚ÜíequalTypes-#LPO-left {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt = eqTypesSUM‚Üê (Œª w' _ ‚Üí eqTypesNAT) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT a b ‚Üí equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí eqt

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
    aw1 w' e a b ea rewrite sub0-ASSERT-APPLY a a‚ÇÅ | sub0-ASSERT-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÇ (#APPLY a‚ÇÇ b))
        aw2 = equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eqb


‚ÜíequalTypes-#LPO-right : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#LPO-right a‚ÇÅ) (#LPO-right a‚ÇÇ)
‚ÜíequalTypes-#LPO-right {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesPI‚Üê (Œª w' _ ‚Üí eqTypesNAT) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT a b ‚Üí equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí eqt

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                          (sub0 b (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR)))))
    aw1 w' e a b ea rewrite sub0-NEG-ASSERT-APPLY a a‚ÇÅ | sub0-NEG-ASSERT-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#NEG (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a))) (#NEG (#ASSERT‚ÇÇ (#APPLY a‚ÇÇ b)))
        aw2 = eqTypesNEG‚Üê (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eqb)



isTypeLPO-PI : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #LPO-PI
isTypeLPO-PI w n =
  eqTypesPI‚Üê {w} {n}
              {#NAT‚ÜíBOOL} {#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)}
              {#NAT‚ÜíBOOL} {#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)}
              (Œª w' e ‚Üí isType-#NAT‚ÜíBOOL w' n)
              aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)))
                                         (sub0 a‚ÇÇ (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-squash-union-LPO a‚ÇÅ | sub0-squash-union-LPO a‚ÇÇ = eqt
      where
        eqt1 : equalTypes n w' (#LPO-left a‚ÇÅ) (#LPO-left a‚ÇÇ)
        eqt1 = ‚ÜíequalTypes-#LPO-left eqb

        eqt2 : equalTypes n w' (#LPO-right a‚ÇÅ) (#LPO-right a‚ÇÇ)
        eqt2 = ‚ÜíequalTypes-#LPO-right eqb

        eqt : equalTypes n w' (#SQUASH (#UNION (#LPO-left a‚ÇÅ) (#LPO-right a‚ÇÅ))) (#SQUASH (#UNION (#LPO-left a‚ÇÇ) (#LPO-right a‚ÇÇ)))
        eqt = eqTypesSQUASH‚Üê (eqTypesUNION‚Üê eqt1 eqt2)



isTypeLPO : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #LPO
isTypeLPO w n rewrite #LPO‚â°#PI = isTypeLPO-PI w n


isTypeNegLPO : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#NEG #LPO)
isTypeNegLPO w n = eqTypesNEG‚Üê (isTypeLPO w n)



#LPO-left‚Üí#Œ£choice : Bool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                      ‚Üí compatible¬∑ name w Res‚ÑÇ
                      ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                      ‚Üí inhType n w (#LPO-left (#CS name))
                      ‚Üí inhType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
#LPO-left‚Üí#Œ£choice bcb {n} {w} {name} comp sat (t , inh) =
  t , ‚â°CTerm‚ÜíequalInType
        (sym (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑))
        (fun-equalInType-SUM-NAT {n} {w} {#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR)} aw1 aw2 inh)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT m
                        ‚Üí equalInType n w' (sub0 m (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR))) t‚ÇÅ t‚ÇÇ
                        ‚Üí equalInType n w' (sub0 m (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 m t‚ÇÅ t‚ÇÇ j eqi = ‚â°CTerm‚ÜíequalInType (sym (sub0-#Œ£choice-body‚â° m name ‚ÑÇ‚ÇÅ¬∑)) eqi2
      where
        eqi1 : equalInType n w1 (#ASSERT‚ÇÇ (#APPLY (#CS name) m)) t‚ÇÅ t‚ÇÇ
        eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-ASSERT-APPLY m (#CS name)) eqi

        eqt : equalTypes n w1 (#EQ (#APPLY (#CS name) m) #BTRUE #BOOL) (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
        eqt = eqTypesEQ‚Üê (equalTypes-BOOL-Type‚ÑÇ‚ÇÄ‚ÇÅ n w1 bcb)
                          (‚ÜíequalInType-APPLY-CS-BOOL bcb (‚äë-compatible¬∑ e1 comp) j)
                          (equalInType-BTRUE-‚ÑÇ‚ÇÅ bcb n w1)

        eqi2 : equalInType n w1 (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) t‚ÇÅ t‚ÇÇ
        eqi2 = equalTypes‚ÜíequalInType
                 (‚â°CTerm‚ÜíeqTypes (sym (#ASSERT‚ÇÇ‚â° (#APPLY (#CS name) m))) refl eqt)
                 eqi1

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #NAT a‚ÇÅ a‚ÇÇ)
                        ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
    aw2 = equalTypes-#Œ£choice-body-sub0 n w name ‚ÑÇ‚ÇÅ¬∑ comp sat



#LPO-right‚Üí#Œ£choice : Bool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                      ‚Üí compatible¬∑ name w Res‚ÑÇ
                      ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                      ‚Üí inhType n w (#LPO-right (#CS name))
                      ‚Üí inhType n w (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
#LPO-right‚Üí#Œ£choice bcb {n} {w} {name} comp sat (f , inh) =
  #lamAX , equalInType-NEG aw1 aw2
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR)))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ))
    aw0 = snd (snd (equalInType-PI‚Üí {n} {w} {#NAT} {#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR))} inh))

    aw1 : ‚àÄùïé w Œª w1 e1 ‚Üí isType n w1 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
    aw1 w1 e1 = equalInType-#Œ£choice w1 name ‚ÑÇ‚ÇÅ¬∑ (‚äë-compatible¬∑ e1 comp) sat

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑) a‚ÇÅ a‚ÇÇ)
    aw2 w1 e1 p‚ÇÅ p‚ÇÇ eqi = lower (Bar.inBar-const barI (Bar.‚àÄùïé-inBarFunc barI aw3 h1))
      where
        aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT)
                                      (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                      w' p‚ÇÅ p‚ÇÇ
                             ‚Üí Lift (lsuc L) ‚ä•)
        aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (eqi3 eqi4)
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#NEG (#ASSERT‚ÇÇ (#APPLY (#CS name) a‚ÇÅ))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ)
            eqi2 = ‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT-APPLY a‚ÇÅ (#CS name)) (aw0 w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ a‚ÇÇ ea)

            eqi3 : ¬¨ equalInType n w2 (#ASSERT‚ÇÇ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi3 = equalInType-NEG‚Üí eqi2 w2 (‚äë-refl¬∑ _) b‚ÇÅ b‚ÇÇ

            eqi4 : equalInType n w2 (#ASSERT‚ÇÇ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi4 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÇ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1

        h0 : equalInType n w1 (#SUM #NAT (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) p‚ÇÅ p‚ÇÇ
        h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) eqi

        h1 : inbar w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' p‚ÇÅ p‚ÇÇ)
        h1 = equalInType-SUM‚Üí h0




-- Assuming that our choices are Bools
¬¨LPO : Bool‚ÑÇ CB ‚Üí (w : ùïé¬∑) ‚Üí member w (#NEG #LPO) #lamAX
¬¨LPO bcb w = n , equalInType-NEG (Œª w1 e1 ‚Üí isTypeLPO w1 n) aw1
  where
    n : ‚Ñï
    n = 1

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #LPO a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea =
      h (fun-equalInType-SQUASH-UNION (equalInType-#Œ£choice w2 name ‚ÑÇ‚ÇÅ¬∑ comp1 (0 , sat-‚ÑÇ‚ÇÅ 0))
                                      (eqTypesNEG‚Üê (equalInType-#Œ£choice w2 name ‚ÑÇ‚ÇÅ¬∑ comp1 (0 , sat-‚ÑÇ‚ÇÅ 0)))
                                      imp1
                                      imp2
                                      h1)
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT‚ÜíBOOL f g
                             ‚Üí equalInType n w' (sub0 f (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))) (#APPLY F f) (#APPLY G g))
        aw2 = snd (snd (equalInType-PI‚Üí {n} {w1} {#NAT‚ÜíBOOL} {#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)} ea))

        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT‚ÜíBOOL f g
                             ‚Üí equalInType n w' (#SQUASH (#UNION (#LPO-left f) (#LPO-right f))) (#APPLY F f) (#APPLY G g))
        aw3 w' e f g ex = ‚â°CTerm‚ÜíequalInType (sub0-squash-union-LPO f) (aw2 w' e f g ex)

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè¬∑ Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startChoiceCompatible¬∑ Res‚ÑÇ w1

        h : ¬¨ equalInType n w2 (sq-dec (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)) #AX #AX
        h = ¬¨-dec-Œ£choice w1 n

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #BOOL (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT n w' m))

        eqf1 : ‚ààType n w2 #NAT‚ÜíBOOL f
        eqf1 = ‚ÜíequalInType-CS-NAT‚ÜíBOOL eqf2

        h1 : equalInType n w2 (#SQUASH (#UNION (#LPO-left f) (#LPO-right f))) (#APPLY F f) (#APPLY G f)
        h1 = aw3 w2 e2 f f eqf1

        imp1 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#LPO-left f) ‚Üí inhType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
        imp1 w3 e3 inh = #LPO-left‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh

        imp2 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#LPO-right f) ‚Üí inhType n w' (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)))
        imp2 w3 e3 inh = #LPO-right‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh

\end{code}[hide]
