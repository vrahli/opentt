\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ;  _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Data.Maybe


open import calculus
open import world
open import choice


module choiceBar {L : Level} (W : PossibleWorlds {L}) (C : Choice W) where
open import bar(W)(C)
open import barI(W)(C)
open import worldDef(W)
open import choiceDef(W)(C)
open import computation(W)(C)



record ChoiceBar : Set(lsuc(lsuc(L))) where
  constructor mkBar
  field
    -- This says that all choices are "weak" ‚Ñï (i.e., that can change over time)
    choice-weak‚Ñï : (w : ùïé¬∑) (c : Name) (m : ‚Ñï) ‚Üí inbar w (Œª w' _ ‚Üí weak‚ÑïM w' (getChoice¬∑ m c))

    -- This allows selecting a branch of a bar that follows a given choice 'u'
    followChoice : (u : Term) (c : Name) {w : ùïé¬∑} {f : wPred w}
                   ‚Üí inbar w f
                   ‚Üí isOnlyChoice‚ààùïé u c w
                   ‚Üí Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ (w ‚äë¬∑ w1) (Œª e1 ‚Üí isOnlyChoice‚ààùïé u c w1 √ó f w1 e1))

{--
    -- TODO: Move to choice
    -- This adds a new choice, which potentially could change
    addChoice : (cs : Name) (w : ùïé¬∑) (t : Term) ‚Üí ùïé¬∑
    addChoice‚äè : (cs : Name) (w : ùïé¬∑) (t : Term) ‚Üí w ‚äè addChoice cs w t
    getAddChoice : (cs : Name) (w : ùïé¬∑) (t : Term) ‚Üí Œ£ ‚Ñï (Œª n ‚Üí getChoice¬∑ n cs (addChoice cs w t) ‚â° just t)
--}

\end{code}
