\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using (T-‚àß)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice
open import encode


module nowrites {L : Level} (W : PossibleWorlds {L})
                (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M) (E : ChoiceExt {L} W C)
                (N : NewChoice W C M G)
                (EC : Encode)
       where

open import worldDef(W)
open import choiceDef{L}(C)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)
open import computation(W)(C)(M)(G)(E)(N)(EC)
open import terms2(W)(C)(M)(G)(E)(N)(EC) using (‚àß‚â°true‚Üí‚Çó ; ‚àß‚â°true‚Üí·µ£)
open import terms3(W)(C)(M)(G)(E)(N)(EC) using ()

open import continuity-conds(W)(C)(M)(G)(E)(N)(EC) using ()


¬¨writes : Term ‚Üí Bool
¬¨writes (VAR x) = true
--¬¨writes NAT = true
¬¨writes QNAT = true
--¬¨writes TNAT = true
¬¨writes (LT t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (QLT t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (NUM x) = true
¬¨writes (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ ‚àß ¬¨writes t‚ÇÉ
¬¨writes (IFEQ t t‚ÇÅ t‚ÇÇ t‚ÇÉ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ ‚àß ¬¨writes t‚ÇÉ
¬¨writes (SUC t) = ¬¨writes t
¬¨writes (PI t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (LAMBDA t) = ¬¨writes t
¬¨writes (APPLY t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (FIX t) = ¬¨writes t
¬¨writes (LET t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (WT t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
¬¨writes (SUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (DSUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (WREC t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (MT t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
--¬¨writes (MSUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (DMSUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (SUM t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (PAIR t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (SPREAD t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (SET t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (ISECT t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (TUNION t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (UNION t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (QTUNION t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (INL t) = ¬¨writes t
¬¨writes (INR t) = ¬¨writes t
¬¨writes (DECIDE t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
¬¨writes (EQ t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
--¬¨writes (EQB t t‚ÇÅ t‚ÇÇ t‚ÇÉ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ ‚àß ¬¨writes t‚ÇÉ
¬¨writes AX = true
¬¨writes FREE = true
¬¨writes (MSEQ x) = true
¬¨writes (MAPP s t) = ¬¨writes t
¬¨writes (CS x) = true --false -- FALSE
¬¨writes (NAME x) = false -- FALSE
¬¨writes (FRESH t) = false -- FALSE
¬¨writes (LOAD t) = false -- FALSE
¬¨writes (CHOOSE t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (IFC0 t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
--¬¨writes (TSQUASH t) = ¬¨writes t
--¬¨writes (TTRUNC t) = ¬¨writes t
¬¨writes NOWRITE = true
¬¨writes NOREAD  = true
¬¨writes (SUBSING t) = ¬¨writes t
¬¨writes (DUM t) = ¬¨writes t
¬¨writes (FFDEFS t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes PURE = true
¬¨writes NOSEQ = true
¬¨writes (TERM t) = ¬¨writes t
¬¨writes (ENC t) = ¬¨writes t
¬¨writes (UNIV x) = true
¬¨writes (LIFT t) = ¬¨writes t
¬¨writes (LOWER t) = ¬¨writes t
¬¨writes (SHRINK t) = ¬¨writes t


#¬¨writes : CTerm ‚Üí Bool
#¬¨writes t = ¬¨writes ‚åú t ‚åù


¬¨Writes : Term ‚Üí Set
¬¨Writes t = ¬¨writes t ‚â° true


#¬¨Writes : CTerm ‚Üí Set
#¬¨Writes t = #¬¨writes t ‚â° true


-- Only the choices can differ TRUE/FALSE
data differC : Term ‚Üí Term ‚Üí Set where
  differC-VAR     : (x : Var) ‚Üí differC (VAR x) (VAR x)
  differC-QNAT    : differC QNAT QNAT
  differC-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  differC-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  differC-NUM     : (x : ‚Ñï) ‚Üí differC (NUM x) (NUM x)
  differC-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC d‚ÇÅ d‚ÇÇ ‚Üí differC (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differC-IFEQ    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC d‚ÇÅ d‚ÇÇ ‚Üí differC (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differC-SUC     : (a b : Term) ‚Üí differC a b ‚Üí differC (SUC a) (SUC b)
  differC-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  differC-LAMBDA  : (a b : Term) ‚Üí differC a b ‚Üí differC (LAMBDA a) (LAMBDA b)
  differC-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  differC-FIX     : (a b : Term) ‚Üí differC a b ‚Üí differC (FIX a) (FIX b)
  differC-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  differC-WT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (WT a‚ÇÅ b‚ÇÅ c‚ÇÅ) (WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-SUP     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SUP a‚ÇÅ b‚ÇÅ) (SUP a‚ÇÇ b‚ÇÇ)
  differC-WREC    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (WREC a‚ÇÅ b‚ÇÅ) (WREC a‚ÇÇ b‚ÇÇ)
  differC-MT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (MT a‚ÇÅ b‚ÇÅ c‚ÇÅ) (MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  differC-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  differC-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  differC-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  differC-ISECT   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  differC-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  differC-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  differC-INL     : (a b : Term) ‚Üí differC a b ‚Üí differC (INL a) (INL b)
  differC-INR     : (a b : Term) ‚Üí differC a b ‚Üí differC (INR a) (INR b)
  differC-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-AX      : differC AX AX
  differC-FREE    : differC FREE FREE
  differC-MSEQ    : (s : ùïä) ‚Üí differC (MSEQ s) (MSEQ s)
  differC-MAPP    : (s : ùïä) (a‚ÇÅ a‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC (MAPP s a‚ÇÅ) (MAPP s a‚ÇÇ)
  differC-CS      : (name : Name) ‚Üí differC (CS name) (CS name)
--  differC-NAME    : (name : Name) ‚Üí differC (NAME name) (NAME name)
--  differC-FRESH   : (a b : Term) ‚Üí differC (suc name1) (suc name2) (shiftNameUp 0 f) a b ‚Üí differC (FRESH a) (FRESH b)
  differC-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
  differC-NOWRITE : differC NOWRITE NOWRITE
  differC-NOREAD  : differC NOREAD  NOREAD
  differC-SUBSING : (a b : Term) ‚Üí differC a b ‚Üí differC (SUBSING a) (SUBSING b)
  differC-PURE    : differC PURE PURE
  differC-NOSEQ   : differC NOSEQ NOSEQ
  differC-TERM    : (a b : Term) ‚Üí differC a b ‚Üí differC (TERM a) (TERM b)
  differC-ENC     : (a : Term) ‚Üí differC a a ‚Üí differC (ENC a) (ENC a)
  differC-DUM     : (a b : Term) ‚Üí differC a b ‚Üí differC (DUM a) (DUM b)
  differC-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  differC-UNIV    : (x : ‚Ñï) ‚Üí differC (UNIV x) (UNIV x)
  differC-LIFT    : (a b : Term) ‚Üí differC a b ‚Üí differC (LIFT a) (LIFT b)
  differC-LOWER   : (a b : Term) ‚Üí differC a b ‚Üí differC (LOWER a) (LOWER b)
  differC-SHRINK  : (a b : Term) ‚Üí differC a b ‚Üí differC (SHRINK a) (SHRINK b)
  differC-writes1 : differC TRUE FALSE
  differC-writes2 : differC FALSE TRUE


differC-NUM‚Üí : {n : ‚Ñï} {a : Term}
             ‚Üí differC (NUM n) a
             ‚Üí a ‚â° NUM n
differC-NUM‚Üí {n} {.(NUM n)} (differC-NUM .n) = refl


abstract
  ¬¨Writes‚Üístep : (w1 w2 : ùïé¬∑) (a b u : Term)
               ‚Üí ¬¨Writes a
               ‚Üí differC a b
               ‚Üí step a w1 ‚â° just (u , w2)
               ‚Üí Œ£ Term (Œª v ‚Üí step b w1 ‚â° just (v , w2) √ó ¬¨Writes u √ó differC u v)
  ¬¨Writes‚Üístep w1 w2 .QNAT .QNAT u nowrites differC-QNAT comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = QNAT , refl , refl , differC-QNAT
  ¬¨Writes‚Üístep w1 w2 .(LT a‚ÇÅ b‚ÇÅ) .(LT a‚ÇÇ b‚ÇÇ) u nowrites (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = LT a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(QLT a‚ÇÅ b‚ÇÅ) .(QLT a‚ÇÇ b‚ÇÇ) u nowrites (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = QLT a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(NUM x) .(NUM x) u nowrites (differC-NUM x) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = NUM x , refl , nowrites , differC-NUM x
  -- IFLT
  ¬¨Writes‚Üístep w1 w2 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ | differC-NUM‚Üí dc with is-NUM b‚ÇÅ
  ... |   inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | differC-NUM‚Üí dc‚ÇÅ with n‚ÇÅ <? n‚ÇÇ
  ... |     yes p‚ÇÉ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = c‚ÇÇ , refl , ‚àß‚â°true‚Üí‚Çó (¬¨writes c‚ÇÅ) (¬¨writes d‚ÇÅ) nowrites , dc‚ÇÇ
  ... |     no q‚ÇÉ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = d‚ÇÇ , refl , ‚àß‚â°true‚Üí·µ£ (¬¨writes c‚ÇÅ) (¬¨writes d‚ÇÅ) nowrites , dc‚ÇÉ
  ¬¨Writes‚Üístep w1 w2 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) | inj‚ÇÇ q‚ÇÇ
    rewrite p‚ÇÅ | differC-NUM‚Üí dc
    = {!!} -- by induction
  ¬¨Writes‚Üístep w1 w2 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp | inj‚ÇÇ q‚ÇÅ = {!!}
  -- IFEQ
  ¬¨Writes‚Üístep w1 w2 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp = {!!}
  -- SUC
  ¬¨Writes‚Üístep w1 w2 .(SUC a) .(SUC b) u nowrites (differC-SUC a b dc) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(PI a‚ÇÅ b‚ÇÅ) .(PI a‚ÇÇ b‚ÇÇ) u nowrites (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = PI a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(LAMBDA a) .(LAMBDA b) u nowrites (differC-LAMBDA a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = LAMBDA b , refl , nowrites , differC-LAMBDA a b dc
  ¬¨Writes‚Üístep w1 w2 .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u nowrites (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(FIX a) .(FIX b) u nowrites (differC-FIX a b dc) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(LET a‚ÇÅ b‚ÇÅ) .(LET a‚ÇÇ b‚ÇÇ) u nowrites (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = WT a‚ÇÇ b‚ÇÇ c‚ÇÇ , refl , nowrites , differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ
  ¬¨Writes‚Üístep w1 w2 .(SUP a‚ÇÅ b‚ÇÅ) .(SUP a‚ÇÇ b‚ÇÇ) u nowrites (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = SUP a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(WREC a‚ÇÅ b‚ÇÅ) .(WREC a‚ÇÇ b‚ÇÇ) u nowrites (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = MT a‚ÇÇ b‚ÇÇ c‚ÇÇ , refl , nowrites , differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ
  ¬¨Writes‚Üístep w1 w2 .(SUM a‚ÇÅ b‚ÇÅ) .(SUM a‚ÇÇ b‚ÇÇ) u nowrites (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = SUM a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(PAIR a‚ÇÅ b‚ÇÅ) .(PAIR a‚ÇÇ b‚ÇÇ) u nowrites (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = PAIR a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(SPREAD a‚ÇÅ b‚ÇÅ) .(SPREAD a‚ÇÇ b‚ÇÇ) u nowrites (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(SET a‚ÇÅ b‚ÇÅ) .(SET a‚ÇÇ b‚ÇÇ) u nowrites (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = SET a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(ISECT a‚ÇÅ b‚ÇÅ) .(ISECT a‚ÇÇ b‚ÇÇ) u nowrites (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = ISECT a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(TUNION a‚ÇÅ b‚ÇÅ) .(TUNION a‚ÇÇ b‚ÇÇ) u nowrites (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = TUNION a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(UNION a‚ÇÅ b‚ÇÅ) .(UNION a‚ÇÇ b‚ÇÇ) u nowrites (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = UNION a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(INL a) .(INL b) u nowrites (differC-INL a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = INL b , refl , nowrites , differC-INL a b dc
  ¬¨Writes‚Üístep w1 w2 .(INR a) .(INR b) u nowrites (differC-INR a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = INR b , refl , nowrites , differC-INR a b dc
  ¬¨Writes‚Üístep w1 w2 .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    = {!!}
  ¬¨Writes‚Üístep w1 w2 .(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , refl , nowrites , differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ
  ¬¨Writes‚Üístep w1 w2 .AX .AX u nowrites differC-AX comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = AX , refl , nowrites , differC-AX
  ¬¨Writes‚Üístep w1 w2 .FREE .FREE u nowrites differC-FREE comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = FREE , refl , nowrites , differC-FREE
  ¬¨Writes‚Üístep w1 w2 .(MSEQ s) .(MSEQ s) u nowrites (differC-MSEQ s) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = MSEQ s , refl , nowrites , differC-MSEQ s
  ¬¨Writes‚Üístep w1 w2 .(MAPP s a‚ÇÅ) .(MAPP s a‚ÇÇ) u nowrites (differC-MAPP s a‚ÇÅ a‚ÇÇ dc) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(CS name) .(CS name) u nowrites (differC-CS name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = CS name , refl , nowrites , differC-CS name
  ¬¨Writes‚Üístep w1 w2 .(CHOOSE a‚ÇÅ b‚ÇÅ) .(CHOOSE a‚ÇÇ b‚ÇÇ) u nowrites (differC-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .NOWRITE .NOWRITE u nowrites differC-NOWRITE comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = NOWRITE , refl , nowrites , differC-NOWRITE
  ¬¨Writes‚Üístep w1 w2 .NOREAD .NOREAD u nowrites differC-NOREAD comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = NOREAD , refl , nowrites , differC-NOREAD
  ¬¨Writes‚Üístep w1 w2 .(SUBSING a) .(SUBSING b) u nowrites (differC-SUBSING a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = SUBSING b , refl , nowrites , differC-SUBSING a b dc
  ¬¨Writes‚Üístep w1 w2 .PURE .PURE u nowrites differC-PURE comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = PURE , refl , nowrites , differC-PURE
  ¬¨Writes‚Üístep w1 w2 .NOSEQ .NOSEQ u nowrites differC-NOSEQ comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = NOSEQ , refl , nowrites , differC-NOSEQ
  ¬¨Writes‚Üístep w1 w2 .(TERM a) .(TERM b) u nowrites (differC-TERM a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = TERM b , refl , nowrites , differC-TERM a b dc
  ¬¨Writes‚Üístep w1 w2 .(ENC a) .(ENC a) u nowrites (differC-ENC a dc) comp = {!!}
  ¬¨Writes‚Üístep w1 w2 .(DUM a) .(DUM b) u nowrites (differC-DUM a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = DUM b , refl , nowrites , differC-DUM a b dc
  ¬¨Writes‚Üístep w1 w2 .(FFDEFS a‚ÇÅ b‚ÇÅ) .(FFDEFS a‚ÇÇ b‚ÇÇ) u nowrites (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = FFDEFS a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep w1 w2 .(UNIV x) .(UNIV x) u nowrites (differC-UNIV x) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = UNIV x , refl , nowrites , differC-UNIV x
  ¬¨Writes‚Üístep w1 w2 .(LIFT a) .(LIFT b) u nowrites (differC-LIFT a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = LIFT b , refl , nowrites , differC-LIFT a b dc
  ¬¨Writes‚Üístep w1 w2 .(LOWER a) .(LOWER b) u nowrites (differC-LOWER a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = LOWER b , refl , nowrites , differC-LOWER a b dc
  ¬¨Writes‚Üístep w1 w2 .(SHRINK a) .(SHRINK b) u nowrites (differC-SHRINK a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = SHRINK b , refl , nowrites , differC-SHRINK a b dc
  ¬¨Writes‚Üístep w1 w2 .TRUE .FALSE u nowrites differC-writes1 comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = FALSE , refl , nowrites , differC-writes1
  ¬¨Writes‚Üístep w1 w2 .FALSE .TRUE u nowrites differC-writes2 comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = TRUE , refl , nowrites , differC-writes2

\end{code}
