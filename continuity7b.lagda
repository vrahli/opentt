\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
--open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
--open import Agda.Builtin.String
--open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
--open import Function.Bundles
--open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar
open import encode


module continuity7b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                    (EC : Encode)
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)(EC)
--open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
--open import terms4(W)(C)(K)(G)(X)(N)(EC)
--open import terms5(W)(C)(K)(G)(X)(N)(EC)
--open import terms6(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

{--
open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)
--}

open import continuity-conds(W)(C)(K)(G)(X)(N)(EC)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (force)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (getT‚â§‚Ñï)
--open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (¬¨0‚àànames-shiftNameUp)
--open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity4b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) --using (ren ; updRel2 ; uptoùïé)
open import continuity5b2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (‚ÜíupdRel2-shiftNameDown0)
open import continuity6b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (++‚äÜ2‚Üí1 ; ++‚äÜ2‚Üí2 ; ++‚äÜ3‚Üí1 ; ++‚äÜ3‚Üí2 ; ++‚äÜ3‚Üí3 ; ++‚äÜ4‚Üí1 ; ++‚äÜ4‚Üí2 ; ++‚äÜ4‚Üí3 ; ++‚äÜ4‚Üí4 ; stepsPresUpdRel2-IFLT‚ÇÇ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFLT‚ÇÇ ; stepsPresUpdRel2-IFLT‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFLT‚ÇÅ ; stepsPresUpdRel2-IFEQ‚ÇÇ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFEQ‚ÇÇ ; stepsPresUpdRel2-IFEQ‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFEQ‚ÇÅ ; stepsPresUpdRel2-SUC‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-SUC‚ÇÅ ; stepsPresUpdRel2-MAPP‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-MAPP‚ÇÅ ; ‚ÜíŒ£stepsUpdRel2-upd ; updRel2-CS‚Çó‚Üí ; uptoùïé-pres-getT ; ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÇ ; stepsPresUpdRel2-APPLY‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ ; Œ£stepsUpdRel2-FIX-APPLY‚Üí ; stepsPresUpdRel2-FIX‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-FIX‚ÇÅ ; updRel2-val‚Çó‚Üí ; stepsPresUpdRel2-LET‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-LET‚ÇÅ ; stepsPresUpdRel2-SPREAD‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-SPREAD‚ÇÅ ; stepsPresUpdRel2-WREC‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-WREC‚ÇÅ ; stepsPresUpdRel2-DECIDE‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-DECIDE‚ÇÅ ; ‚Üí¬¨0‚àànames-renn-0s ; ¬¨newChoiceT+‚àànames ; ‚Üí¬¨newChoiceT+-suc ; ¬¨0‚ààren‚Çó-sren ; ¬¨0‚ààren·µ£-sren ; ‚Üíuptoùïé-startNewChoiceT ; names2ren ; uptoùïé-startNewChoices ; subRen-names2ren ; updRel2-NAME‚Çó‚Üí ; ‚Üíuptoùïé-chooseT ; updRel2-¬¨NUM‚Üí ; stepsPresUpdRel2-CHOOSE‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-CHOOSE‚ÇÅ ; updRel2-WRECr)



abstract

  Œ£stepsUpdRel2-IFLT : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑)
                       ‚Üí names a‚ÇÅ ++ names b‚ÇÅ ++ names c‚ÇÅ ++ names d‚ÇÅ ‚äÜ domùïé¬∑ w1
                       ‚Üí names a‚ÇÇ ++ names b‚ÇÇ ++ names c‚ÇÇ ++ names d‚ÇÇ ‚äÜ domùïé¬∑ w
                       ‚Üí uptoùïé name w1 w r
                       ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                       ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                       ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ
                       ‚Üí updRel2 name f g r d‚ÇÅ d‚ÇÇ
                       ‚Üí stepsPresUpdRel2 n name f g x w2
                       ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                       ‚Üí ((b‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step b‚ÇÅ w1 ‚â° just (b‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g b‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r)
                       ‚Üí step (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) w1 ‚â° just (x , w2)
                       ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) w r
  Œ£stepsUpdRel2-IFLT n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ua ub uc ud ind inda indb comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p) rewrite p | updRel2-NUM‚Çó‚Üí ua with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (n‚ÇÇ , q) rewrite q | updRel2-NUM‚Çó‚Üí ub with n‚ÇÅ <? n‚ÇÇ
  ... |       yes rn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , w , r , refl , concl , uc , upw , subRen-refl r
    where
      concl : steps 1 (IFLT (NUM n‚ÇÅ) (NUM n‚ÇÇ) c‚ÇÇ d‚ÇÇ , w) ‚â° (c‚ÇÇ , w)
      concl with n‚ÇÅ <? n‚ÇÇ
      ... | yes rn' = refl
      ... | no rn' = ‚ä•-elim (rn' rn)
  ... |       no rn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , w , r , refl , concl , ud , upw , subRen-refl r
    where
      concl : steps 1 (IFLT (NUM n‚ÇÅ) (NUM n‚ÇÇ) c‚ÇÇ d‚ÇÇ , w) ‚â° (d‚ÇÇ , w)
      concl with n‚ÇÅ <? n‚ÇÇ
      ... | yes rn' = ‚ä•-elim (rn rn')
      ... | no rn' = refl
  Œ£stepsUpdRel2-IFLT n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ua ub uc ud ind inda indb comp | inj‚ÇÅ (n‚ÇÅ , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-IFLT‚ÇÇ
      (++‚äÜ3‚Üí2 {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ3‚Üí2 {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ3‚Üí3 {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ3‚Üí3 {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      uc ud ind'
    where
      ind' : Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r
      ind' = indb b‚ÇÅ' w1' refl (stepsPresUpdRel2-IFLT‚ÇÇ‚Üí ind)
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  Œ£stepsUpdRel2-IFLT n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ua ub uc ud ind inda indb comp | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-IFLT‚ÇÅ
      (++‚äÜ4‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ4‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ4‚Üí3 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ4‚Üí3 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ4‚Üí4 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ4‚Üí4 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      ub uc ud ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-IFLT‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-IFEQ : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑)
                       ‚Üí names a‚ÇÅ ++ names b‚ÇÅ ++ names c‚ÇÅ ++ names d‚ÇÅ ‚äÜ domùïé¬∑ w1
                       ‚Üí names a‚ÇÇ ++ names b‚ÇÇ ++ names c‚ÇÇ ++ names d‚ÇÇ ‚äÜ domùïé¬∑ w
                       ‚Üí uptoùïé name w1 w r
                       ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                       ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                       ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ
                       ‚Üí updRel2 name f g r d‚ÇÅ d‚ÇÇ
                       ‚Üí stepsPresUpdRel2 n name f g x w2
                       ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                       ‚Üí ((b‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step b‚ÇÅ w1 ‚â° just (b‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g b‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r)
                       ‚Üí step (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) w1 ‚â° just (x , w2)
                       ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) w r
  Œ£stepsUpdRel2-IFEQ n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ua ub uc ud ind inda indb comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p) rewrite p | updRel2-NUM‚Çó‚Üí ua with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (n‚ÇÇ , q) rewrite q | updRel2-NUM‚Çó‚Üí ub with n‚ÇÅ ‚âü n‚ÇÇ
  ... |       yes rn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , w , r , refl , concl , uc , upw , subRen-refl r
    where
      concl : steps 1 (IFEQ (NUM n‚ÇÅ) (NUM n‚ÇÇ) c‚ÇÇ d‚ÇÇ , w) ‚â° (c‚ÇÇ , w)
      concl with n‚ÇÅ ‚âü n‚ÇÇ
      ... | yes rn' = refl
      ... | no rn' = ‚ä•-elim (rn' rn)
  ... |       no rn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , w , r , refl , concl , ud , upw , subRen-refl r
    where
      concl : steps 1 (IFEQ (NUM n‚ÇÅ) (NUM n‚ÇÇ) c‚ÇÇ d‚ÇÇ , w) ‚â° (d‚ÇÇ , w)
      concl with n‚ÇÅ ‚âü n‚ÇÇ
      ... | yes rn' = ‚ä•-elim (rn rn')
      ... | no rn' = refl
  Œ£stepsUpdRel2-IFEQ n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ua ub uc ud ind inda indb comp | inj‚ÇÅ (n‚ÇÅ , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-IFEQ‚ÇÇ
      (++‚äÜ3‚Üí2 {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ3‚Üí2 {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ3‚Üí3 {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ3‚Üí3 {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      uc ud ind'
    where
      ind' : Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r
      ind' = indb b‚ÇÅ' w1' refl (stepsPresUpdRel2-IFEQ‚ÇÇ‚Üí ind)
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  Œ£stepsUpdRel2-IFEQ n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ua ub uc ud ind inda indb comp | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-IFEQ‚ÇÅ
      (++‚äÜ4‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ4‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ4‚Üí3 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ4‚Üí3 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ4‚Üí4 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ4‚Üí4 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
      ub uc ud ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-IFEQ‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-SUC : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ a‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑)
                      ‚Üí names a‚ÇÅ ‚äÜ domùïé¬∑ w1
                      ‚Üí names a‚ÇÇ ‚äÜ domùïé¬∑ w
                      ‚Üí uptoùïé name w1 w r
                      ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                      ‚Üí stepsPresUpdRel2 n name f g x w2
                      ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                      ‚Üí step (SUC a‚ÇÅ) w1 ‚â° just (x , w2)
                      ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (SUC a‚ÇÇ) w r
  Œ£stepsUpdRel2-SUC n name f g r a‚ÇÅ a‚ÇÇ x w w1 w2 naid nbid upw ua ind inda comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (k , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel2-NUM‚Çó‚Üí ua =
    0 , 1 , NUM (suc k) , NUM (suc k) , w1 , w , r , refl , refl , updRel2-NUM (suc k) , upw , subRen-refl r
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-SUC‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-SUC‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-MAPP : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (s : ùïä) (a‚ÇÅ a‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑)
                       ‚Üí names a‚ÇÅ ‚äÜ domùïé¬∑ w1
                       ‚Üí names a‚ÇÇ ‚äÜ domùïé¬∑ w
                       ‚Üí uptoùïé name w1 w r
                       ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                       ‚Üí stepsPresUpdRel2 n name f g x w2
                       ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                       ‚Üí step (MAPP s a‚ÇÅ) w1 ‚â° just (x , w2)
                       ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (MAPP s a‚ÇÇ) w r
  Œ£stepsUpdRel2-MAPP n name f g r s a‚ÇÅ a‚ÇÇ x w w1 w2 naid nbid upw ua ind inda comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (k , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel2-NUM‚Çó‚Üí ua =
    0 , 1 , NUM (s k) , NUM (s k) , w1 , w , r , refl , refl , updRel2-NUM (s k) , upw , subRen-refl r
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-MAPP‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-MAPP‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-LET : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑) (cf : # f) (cg : # g)
                      ‚Üí names a‚ÇÅ ++ names b‚ÇÅ ‚äÜ domùïé¬∑ w1
                      ‚Üí names a‚ÇÇ ++ names b‚ÇÇ ‚äÜ domùïé¬∑ w
                      ‚Üí uptoùïé name w1 w r
                      ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                      ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                      ‚Üí stepsPresUpdRel2 n name f g x w2
                      ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                      ‚Üí step (LET a‚ÇÅ b‚ÇÅ) w1 ‚â° just (x , w2)
                      ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (LET a‚ÇÇ b‚ÇÇ) w r
  Œ£stepsUpdRel2-LET n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x w w1 w2 cf cg naid nbid upw ua ub ind inda comp with isValue‚äé a‚ÇÅ
  ... | inj‚ÇÅ v rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
    0 , 1 , sub a‚ÇÅ b‚ÇÅ , sub a‚ÇÇ b‚ÇÇ , w1 , w , r , refl ,
    comp' , updRel2-sub cf cg ub ua , upw , subRen-refl r
    where
      comp' : steps 1 (LET a‚ÇÇ b‚ÇÇ , w) ‚â° (sub a‚ÇÇ b‚ÇÇ , w)
      comp' with isValue‚äé a‚ÇÇ
      ... | inj‚ÇÅ u = refl
      ... | inj‚ÇÇ u = ‚ä•-elim (u (updRel2-val‚Çó‚Üí name f g r a‚ÇÅ a‚ÇÇ ua v))
  ... | inj‚ÇÇ v with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-LET‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ub ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-LET‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-SPREAD : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑) (cf : # f) (cg : # g)
                       ‚Üí names a‚ÇÅ ++ names b‚ÇÅ ‚äÜ domùïé¬∑ w1
                       ‚Üí names a‚ÇÇ ++ names b‚ÇÇ ‚äÜ domùïé¬∑ w
                       ‚Üí uptoùïé name w1 w r
                       ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                       ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                       ‚Üí stepsPresUpdRel2 n name f g x w2
                       ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                       ‚Üí step (SPREAD a‚ÇÅ b‚ÇÅ) w1 ‚â° just (x , w2)
                       ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (SPREAD a‚ÇÇ b‚ÇÇ) w r
  Œ£stepsUpdRel2-SPREAD n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x w w1 w2 cf cg naid nbid upw ua ub ind inda comp with is-PAIR a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl (updRel2-PAIR‚Çó‚Üí ua)
    where
      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° PAIR x‚ÇÅ x‚ÇÇ √ó updRel2 name f g r u‚ÇÅ x‚ÇÅ √ó updRel2 name f g r u‚ÇÇ x‚ÇÇ))
              ‚Üí Œ£stepsUpdRel2 name f g (sub u‚ÇÇ (sub (shiftUp 0 u‚ÇÅ) b‚ÇÅ)) w1 w1 (SPREAD a‚ÇÇ b‚ÇÇ) w r
      concl (x‚ÇÅ , x‚ÇÇ , eqa , ur1 , ur2) rewrite eqa =
        0 , 1 , sub u‚ÇÇ (sub (shiftUp 0 u‚ÇÅ) b‚ÇÅ) , sub x‚ÇÇ (sub (shiftUp 0 x‚ÇÅ) b‚ÇÇ) , w1 , w , r , refl , refl ,
        updRel2-sub cf cg (updRel2-sub cf cg ub (updRel2-shiftUp 0 cf cg ur1)) ur2 , upw , subRen-refl r
  ... | inj‚ÇÇ np with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-SPREAD‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ub ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-SPREAD‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-WREC : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑) (cf : # f) (cg : # g)
                       ‚Üí names a‚ÇÅ ++ names b‚ÇÅ ‚äÜ domùïé¬∑ w1
                       ‚Üí names a‚ÇÇ ++ names b‚ÇÇ ‚äÜ domùïé¬∑ w
                       ‚Üí uptoùïé name w1 w r
                       ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                       ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                       ‚Üí stepsPresUpdRel2 n name f g x w2
                       ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                       ‚Üí step (WREC a‚ÇÅ b‚ÇÅ) w1 ‚â° just (x , w2)
                       ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (WREC a‚ÇÇ b‚ÇÇ) w r
  Œ£stepsUpdRel2-WREC n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x w w1 w2 cf cg naid nbid upw ua ub ind inda comp with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl (updRel2-SUP‚Çó‚Üí ua)
    where
      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updRel2 name f g r u‚ÇÅ x‚ÇÅ √ó updRel2 name f g r u‚ÇÇ x‚ÇÇ))
              ‚Üí Œ£stepsUpdRel2 name f g (sub (WRECr b‚ÇÅ u‚ÇÇ) (sub (shiftUp 0 u‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 u‚ÇÅ)) b‚ÇÅ))) w1 w1 (WREC a‚ÇÇ b‚ÇÇ) w r
      concl (x‚ÇÅ , x‚ÇÇ , eqa , ur1 , ur2) rewrite eqa =
        0 , 1 ,
        sub (WRECr b‚ÇÅ u‚ÇÇ) (sub (shiftUp 0 u‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 u‚ÇÅ)) b‚ÇÅ)) ,
        sub (WRECr b‚ÇÇ x‚ÇÇ) (sub (shiftUp 0 x‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 x‚ÇÅ)) b‚ÇÇ)) ,
        w1 , w , r , refl , refl ,
        updRel2-sub cf cg (updRel2-sub cf cg (updRel2-sub cf cg ub (updRel2-shiftUp 0 cf cg (updRel2-shiftUp 0 cf cg ur1)))
                                             (updRel2-shiftUp 0 cf cg ur2))
                          (updRel2-WRECr cf cg ub ur2) ,
        upw , subRen-refl r
  ... | inj‚ÇÇ np with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-WREC‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ub ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-WREC‚ÇÅ‚Üí ind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))


abstract

  Œ£stepsUpdRel2-DECIDE : (n : ‚Ñï) (name : Name) (f g : Term) (r : ren) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ x : Term) (w w1 w2 : ùïé¬∑) (cf : # f) (cg : # g)
                         ‚Üí names a‚ÇÅ ++ names b‚ÇÅ ++ names c‚ÇÅ ‚äÜ domùïé¬∑ w1
                         ‚Üí names a‚ÇÇ ++ names b‚ÇÇ ++ names c‚ÇÇ ‚äÜ domùïé¬∑ w
                         ‚Üí uptoùïé name w1 w r
                         ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                         ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                         ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ
                         ‚Üí stepsPresUpdRel2 n name f g x w2
                         ‚Üí ((a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r)
                         ‚Üí step (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) w1 ‚â° just (x , w2)
                         ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) w r
  Œ£stepsUpdRel2-DECIDE n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ x w w1 w2 cf cg naid nbid upw ua ub uc ind inda comp with is-INL a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = concl (updRel2-INL‚Çó‚Üí ua)
    where
      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° INL u √ó updRel2 name f g r t u)
              ‚Üí Œ£stepsUpdRel2 name f g (sub t b‚ÇÅ) w1 w1 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) w r
      concl (u , eqa , ur) rewrite eqa =
        0 , 1 , sub t b‚ÇÅ , sub u b‚ÇÇ , w1 , w , r , refl , refl , updRel2-sub cf cg ub ur , upw , subRen-refl r
  ... | inj‚ÇÇ nl with is-INR a‚ÇÅ
  ... |    inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = concl (updRel2-INR‚Çó‚Üí ua)
    where
      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° INR u √ó updRel2 name f g r t u)
              ‚Üí Œ£stepsUpdRel2 name f g (sub t c‚ÇÅ) w1 w1 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) w r
      concl (u , eqa , ur) rewrite eqa =
        0 , 1 , sub t c‚ÇÅ , sub u c‚ÇÇ , w1 , w , r , refl , refl , updRel2-sub cf cg uc ur , upw , subRen-refl r
  ... |    inj‚ÇÇ nr with step‚äé a‚ÇÅ w1
  ... |       inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-DECIDE‚ÇÅ
      (++‚äÜ3‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ3‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {domùïé¬∑ w} nbid)
      (++‚äÜ3‚Üí3 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {domùïé¬∑ w1} naid)
      (++‚äÜ3‚Üí3 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {domùïé¬∑ w} nbid)
      ub uc ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = inda a‚ÇÅ' w1' refl (stepsPresUpdRel2-DECIDE‚ÇÅ‚Üí ind)
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))



abstract

  updRel2-MSEQ‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {s : ùïä} {a : Term}
                ‚Üí updRel2 name f g r (MSEQ s) a
                ‚Üí a ‚â° MSEQ s
  updRel2-MSEQ‚Çó‚Üí {name} {f} {g} {r} {s} {.(MSEQ s)} (updRel2-MSEQ .s) = refl


abstract

  updRel2-MSEQ·µ£‚Üí : {name : Name} {f g : Term} {r : ren} {s : ùïä} {a : Term}
                ‚Üí updRel2 name f g r a (MSEQ s)
                ‚Üí a ‚â° MSEQ s
  updRel2-MSEQ·µ£‚Üí {name} {f} {g} {r} {s} {.(MSEQ s)} (updRel2-MSEQ .s) = refl

\end{code}
