\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity7b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity6b(W)(M)(C)(K)(P)(G)(X)(N)(E)


‚Üí¬¨0‚àànames-renn-0s : (n : Name) (a : Term) ‚Üí ¬¨ 0 ‚àà names (renn 0 (suc n) a)
‚Üí¬¨0‚àànames-renn-0s n a i with ‚àànames-renn-same {0} {suc n} {a} i
... | x , y = suc-‚â¢-0 {n} (sym x)


‚Üí‚àà‚Üìvars : (n : Name) (l : List Name)
           ‚Üí suc n ‚àà l
           ‚Üí n ‚àà ‚Üìvars l
‚Üí‚àà‚Üìvars n (x ‚à∑ l) (here px) rewrite sym px = here refl
‚Üí‚àà‚Üìvars n (0 ‚à∑ l) (there i) = there (‚Üí‚àà‚Üìvars n l i)
‚Üí‚àà‚Üìvars n (suc x ‚à∑ l) (there i) = there (‚Üí‚àà‚Üìvars n l i)



¬¨newChoiceT+‚àànames : (w : ùïé¬∑) (a : Term) ‚Üí ¬¨ newChoiceT+ w a ‚àà names a
¬¨newChoiceT+‚àànames w a i =
  snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names a)))
      (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) (‚Üí‚àà‚Üìvars (newChoiceT w a) (names a) i)))


‚Üí¬¨newChoiceT+-suc : (name : Name) (w : ùïé¬∑) (a : Term)
                     ‚Üí name ‚àà domùïé¬∑ w
                     ‚Üí ¬¨ newChoiceT+ w a ‚â° suc name
‚Üí¬¨newChoiceT+-suc name w a i j rewrite suc-injective (sym j) =
  ¬¨fresh‚ààdomùïé2 w (namesùïé¬∑ w) (‚Üìvars (names a)) i




isHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (CHOOSE a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {CHOOSE a b} {v} n name comp
                      ‚Üí ‚àànamesùïé {k} {w} {w'} {CHOOSE a b} {v} name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw with is-NAME a
... | inj‚ÇÅ (t , p) rewrite p = 0 , NAME t , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w0} {w''} {a0} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h) (snd (snd inw))

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {suc (fst ind)} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      (fst inw , fst (snd inw) , fst (snd (snd (snd (snd (snd ind)))))) ,
      fst (snd (snd (snd (snd (snd (snd ind)))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd (snd ind)))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel2-CHOOSE‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel2 n name f g (CHOOSE a b) w
                           ‚Üí stepsPresUpdRel2 n name f g a w
stepsPresUpdRel2-CHOOSE‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , inw , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd (snd hv)))))) , fst (snd (snd (snd (snd hv)))) ,
  fst (snd (snd (snd (snd (snd hv))))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd (snd hv)))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish inw



‚ÜíŒ£stepsUpdRel2-CHOOSE‚ÇÅ : {name : Name} {f g : Term} {r : ren} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w0 w1 w : ùïé¬∑}
                         ‚Üí names b‚ÇÅ ‚äÜ domùïé¬∑ w0
                         ‚Üí names b‚ÇÇ ‚äÜ domùïé¬∑ w
                         ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                         ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ w0 w1 a‚ÇÇ w r
                         ‚Üí Œ£stepsUpdRel2 name f g (CHOOSE a‚ÇÅ b‚ÇÅ) w0 w1 (CHOOSE a‚ÇÇ b‚ÇÇ) w r
‚ÜíŒ£stepsUpdRel2-CHOOSE‚ÇÅ {name} {f} {g} {r} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w0} {w1} {w} nd1 nd2 updb (k1 , k2 , y1 , y2 , w3 , w' , r' , comp1 , comp2 , ur , upw , sub) =
  fst comp1' , fst comp2' , CHOOSE y1 b‚ÇÅ , CHOOSE y2 b‚ÇÇ , w3 , w' , r' , snd comp1' , snd comp2' ,
  updRel2-CHOOSE
    _ _ _ _ ur
    (updRel2-ren-mon {name} {f} {g} {r} {r'} {b‚ÇÅ} {b‚ÇÇ} {domùïé¬∑ w0} {domùïé¬∑ w} sub nd1 nd2 updb) ,
  upw , sub
  where
    comp1' : CHOOSE a‚ÇÅ b‚ÇÅ ‚áì CHOOSE y1 b‚ÇÅ from w1 to w3
    comp1' = CHOOSE‚áìsteps k1 b‚ÇÅ comp1

    comp2' : CHOOSE a‚ÇÇ b‚ÇÇ ‚áì CHOOSE y2 b‚ÇÇ from w to w'
    comp2' = CHOOSE‚áìsteps k2 b‚ÇÇ comp2



-- This is not true if 'g' is impure, for example if 'g' is 'FRESH u', while f is 'FRESH t' then
-- while 'updRel2 name f g a g', it might be the case for 'u' and 't' because the FRESH operators
-- might generate different names.  uptoùïé should be up to some renaming, not just up to 'name'.
step-updRel2 : (cc : ContConds) (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term}
              {a b x : Term} {w0 w1 w2 w : ùïé¬∑} {r : ren}
              ‚Üí ¬¨ name ‚àà names f
              ‚Üí ¬¨ name ‚àà names g
              ‚Üí # f
              ‚Üí # g
              ‚Üí (names a) ‚äÜ domùïé¬∑ w1 -- Could these two restrictions be guaranteed by "loading" all names into the world? No, we don't have control over g in the extract...
              ‚Üí (names b) ‚äÜ domùïé¬∑ w -- For this one we'd have to require g to be name-free
              ‚Üí step a w1 ‚â° just (x , w2)
              ‚Üí stepsPresUpdRel2 n name f g x w2
              ‚Üí updRel2 name f g r a b
              ‚Üí uptoùïé name w1 w r
              ‚Üí getT‚â§‚Ñï w1 n name
              ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
              ‚Üí name ‚àà domùïé¬∑ w1
              ‚Üí name ‚àà domùïé¬∑ w
              ‚Üí compatible¬∑ name w1 Res‚ä§
              ‚Üí compatible¬∑ name w Res‚ä§
              ‚Üí ‚àÄùïé-get0-NUM w1 name
              ‚Üí w0 ‚äë¬∑ w1
              ‚Üí w0 ‚äë¬∑ w
              ‚Üí ‚àÄùïé w0 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚áõ!same‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
              ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 b w r
step-updRel2 cc gc {n} {name} {f} {g} {.NAT} {.NAT} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-NAT upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAT , NAT , w1 , w , r , refl , refl , updRel2-NAT , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.QNAT} {.QNAT} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-QNAT upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QNAT , QNAT , w1 , w , r , refl , refl , updRel2-QNAT , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.TNAT} {.TNAT} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-TNAT upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TNAT , TNAT , w1 , w , r , refl , refl , updRel2-TNAT , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-LT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-QLT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(NUM x‚ÇÅ)} {.(NUM x‚ÇÅ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-NUM x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NUM _ , NUM _ , w1 , w , r , refl , refl , updRel2-NUM _ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ur ur‚ÇÅ ur‚ÇÇ ur‚ÇÉ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn = {!!}
step-updRel2 cc gc {n} {name} {f} {g} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-SUC a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn = {!!}
step-updRel2 cc gc {n} {name} {f} {g} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-PI _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LAMBDA a‚ÇÅ , LAMBDA a‚ÇÇ , w1 , w , r , refl , refl , updRel2-LAMBDA _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn with is-LAM a‚ÇÅ
... | inj‚ÇÅ (t , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  concl d
  where
    d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel2 name f g r t u)
        ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
    d = updRel2-LAMBDA‚Çó‚Üí ur

    concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel2 name f g r t u)
            ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
            ‚Üí Œ£stepsUpdRel2 name f g (sub b‚ÇÅ t) w1 w1 (APPLY a‚ÇÇ b‚ÇÇ) w r
    concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub b‚ÇÅ t , sub b‚ÇÇ u , w1 , w , r , refl , refl , updRel2-sub cf cg ur ur‚ÇÅ , upw , subRen-refl r
    concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
      where
        ind' : stepsPresUpdRel2 n name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        ind' rewrite e1 | e2 | sub-upd name f b‚ÇÅ cf = ind

        c1 : Œ£stepsUpdRel2 name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1 (APPLY (force g) b‚ÇÇ) w r
        c1 = fst (‚ÜíŒ£stepsUpdRel2-upd cc gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {w0} {w1} {w} {r} nnf cf cg compat compat' wgt0 ur‚ÇÅ upw ew01 ew0 eqn ind')

        c2 : Œ£stepsUpdRel2 name f g (sub b‚ÇÅ (updBody name f)) w1 w1 (APPLY (force g) b‚ÇÇ) w r
        c2 rewrite sub-upd name f b‚ÇÅ cf = c1
... | inj‚ÇÇ q with is-CS a‚ÇÅ
... |    inj‚ÇÅ (name' , np) rewrite np {--| updRel2-CS‚Çó‚Üí r--} with is-NUM b‚ÇÅ
... |       inj‚ÇÅ (k , nq) rewrite nq | updRel2-NUM‚Çó‚Üí ur‚ÇÅ with getT‚äé k name' w1
... |          inj‚ÇÅ (c , nr) rewrite nr | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , 1 , c , c , w1 , w , r , refl , concl , --comp' ,
  updRel2-refl {name} {f} {g} {r} {c} (ContConds.ccG¬¨names cc k name' w1 c nr) , --updRel2-refl {name} {f} {g} {c} (Œª x ‚Üí nnw (ContConds.ccGnames cc name name' k c w1 nr x)) ,
-- In case c contains a name x, we'd have to guarantee that names‚ààren x x r.  We can't know that.
-- Better only consider nats as choices here
  upw , subRen-refl r --Data.Maybe.map (Œª t ‚Üí t , w) (getT n name w)
  where {--()--} {--()--}
    nm2 : Œ£ Name (Œª name'' ‚Üí a‚ÇÇ ‚â° CS name'' √ó ¬¨ name' ‚â° name √ó ¬¨ name'' ‚â° name √ó names‚ààren name' name'' r)
    nm2 = updRel2-CS‚Çó‚Üí  ur

    comp' : steps 1 (APPLY (CS (fst nm2)) (NUM k) , w) ‚â° (c , w)
    comp' rewrite uptoùïé-pres-getT k name name' (fst nm2) w1 w r c (fst (snd (snd nm2))) (fst (snd (snd (snd nm2)))) (snd (snd (snd (snd nm2)))) upw nr = refl

    concl : steps 1 (APPLY a‚ÇÇ (NUM k) , w) ‚â° (c , w)
    concl rewrite fst (snd nm2) = comp' --refl
... |          inj‚ÇÇ nr rewrite nr = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn | inj‚ÇÇ q | inj‚ÇÅ (name' , np) | inj‚ÇÇ y with step‚äé b‚ÇÅ w1
... |          inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  concl
  where
    ind' : Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r
    ind' = step-updRel2 cc gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w0} {w1} {w1'} {w} nnf nng cf cg (Œª {x} i ‚Üí naid (there i)) (Œª {x} i ‚Üí nbid (‚àà-++‚Å∫ ≥ (names a‚ÇÇ) i)) z (stepsPresUpdRel2-APPLY‚ÇÇ‚Üí ind) ur‚ÇÅ upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn

    nm2 : Œ£ Name (Œª name'' ‚Üí a‚ÇÇ ‚â° CS name'' √ó ¬¨ name' ‚â° name √ó ¬¨ name'' ‚â° name √ó names‚ààren name' name'' r)
    nm2 = updRel2-CS‚Çó‚Üí  ur

    concl : Œ£stepsUpdRel2 name f g (APPLY (CS name') b‚ÇÅ') w1 w1' (APPLY a‚ÇÇ b‚ÇÇ) w r
    concl rewrite fst (snd nm2) = ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÇ {name} {f} {g} {name'} {fst nm2} (fst (snd (snd nm2))) (fst (snd (snd (snd nm2)))) (naid (here refl)) (nbid (here refl)) (snd (snd (snd (snd nm2)))) ind'
... |          inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn | inj‚ÇÇ q | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... | inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ur‚ÇÅ ind'
  where
    ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
    ind' = step-updRel2 cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf nng cf cg (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) z (stepsPresUpdRel2-APPLY‚ÇÅ‚Üí ind) ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel2 cc gc {n} {name} {f} {g} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-FIX a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn = {!!}
step-updRel2 cc gc {n} {name} {f} {g} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn = {!!}
step-updRel2 cc gc {n} {name} {f} {g} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-SUM _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-PAIR _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn = {!!}
step-updRel2 cc gc {n} {name} {f} {g} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-SET _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , ISECT a‚ÇÅ b‚ÇÅ , ISECT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-ISECT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-TUNION _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-UNION _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-QTUNION _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-INL a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INL a‚ÇÅ , INL a‚ÇÇ , w1 , w , r , refl , refl , updRel2-INL _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-INR a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INR a‚ÇÅ , INR a‚ÇÇ , w1 , w , r , refl , refl , updRel2-INR _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ ur ur‚ÇÅ r‚ÇÇ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn = {!!}
step-updRel2 cc gc {n} {name} {f} {g} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ ur ur‚ÇÅ r‚ÇÇ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , w , r , refl , refl , updRel2-EQ _ _ _ _ _ _ ur ur‚ÇÅ r‚ÇÇ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.AX} {.AX} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-AX upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , AX , AX , w1 , w , r , refl , refl , updRel2-AX , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.FREE} {.FREE} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-FREE upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FREE , FREE , w1 , w , r , refl , refl , updRel2-FREE , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(CS name1)} {.(CS name2)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-CS name1 name2 d1 d2 x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , CS _ , CS _ , w1 , w , r , refl , refl , updRel2-CS name1 name2 d1 d2 x‚ÇÅ {--updRel2-CS _ x‚ÇÅ--} , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(NAME name1)} {.(NAME name2)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-NAME name1 name2 d1 d2 x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAME _ , NAME _ , w1 , w , r , refl , refl , updRel2-NAME name1 name2 d1 d2 x‚ÇÅ {--updRel2-NAME _ x‚ÇÅ--} , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(FRESH a)} {.(FRESH b)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-FRESH a b ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  0 , 1 ,
  shiftNameDown 0 (renn 0 (newChoiceT+ w1 a) a) ,
  shiftNameDown 0 (renn 0 (newChoiceT+ w b) b) ,
  startNewChoiceT Res‚ä§ w1 a ,
  startNewChoiceT Res‚ä§ w b ,
  (newChoiceT w1 a , newChoiceT w b) ‚à∑ r ,
  refl , refl ,
  ‚ÜíupdRel2-shiftNameDown0 {name} {f} {g} cf cg
    ((newChoiceT w1 a , newChoiceT w b) ‚à∑ r)
    (‚Üí¬¨0‚àànames-renn-0s (newChoiceT w1 a) a)
    (‚Üí¬¨0‚àànames-renn-0s (newChoiceT w b) b)
    (updRel2-renn
      {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {sren r} {a} {b}
      0 (newChoiceT+ w1 a) (newChoiceT+ w b)
      (¬¨newChoiceT+‚àànames w1 a) (¬¨newChoiceT+‚àànames w b)
      (‚Üí¬¨newChoiceT+-suc name w1 a idom) (‚Üí¬¨newChoiceT+-suc name w b idom')
      (¬¨0‚ààren‚Çó-sren r) (¬¨0‚ààren·µ£-sren r)
      (¬¨0‚àànames-shiftNameUp f) (¬¨0‚àànames-shiftNameUp g)
      (Œª x ‚Üí suc-‚â¢-0 (sym x)) ur) , -- we have to get force to contain name too, so that updRel2 relates terms with the same names
  ‚Üíuptoùïé-startNewChoiceT cc name w1 w r a b upw ,
  subRen-trans (newChoiceT w1 a) (newChoiceT w b) r r (¬¨fresh‚ààdomùïé2 w1 (namesùïé¬∑ w1) (‚Üìvars (names a))) (¬¨fresh‚ààdomùïé2 w (namesùïé¬∑ w) (‚Üìvars (names b))) (subRen-refl r)
step-updRel2 cc gc {n} {name} {f} {g} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn with is-NAME a‚ÇÅ
... | inj‚ÇÅ (nm , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  {!!}
... | inj‚ÇÇ nm with step‚äé a‚ÇÅ w1
... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel2-CHOOSE‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ur‚ÇÅ ind'
  where
    ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
    ind' = step-updRel2 cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf nng cf cg (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) z (stepsPresUpdRel2-CHOOSE‚ÇÅ‚Üí ind) ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel2 cc gc {n} {name} {f} {g} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TSQUASH a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TSQUASH _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TTRUNC a‚ÇÅ , TTRUNC a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TTRUNC _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-TCONST a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TCONST a‚ÇÅ , TCONST a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TCONST _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-SUBSING a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUBSING a‚ÇÅ , SUBSING a‚ÇÇ , w1 , w , r , refl , refl , updRel2-SUBSING _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.PURE} {.PURE} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-PURE upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PURE , PURE , w1 , w , r , refl , refl , updRel2-PURE , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-DUM a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , DUM a‚ÇÅ , DUM a‚ÇÇ , w1 , w , r , refl , refl , updRel2-DUM _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-FFDEFS _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(UNIV x‚ÇÅ)} {.(UNIV x‚ÇÅ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-UNIV x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNIV _ , UNIV _ , w1 , w , r , refl , refl , updRel2-UNIV _ , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-LIFT a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LIFT a‚ÇÅ , LIFT a‚ÇÇ , w1 , w , r , refl , refl , updRel2-LIFT _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-LOWER a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LOWER a‚ÇÅ , LOWER a‚ÇÇ , w1 , w , r , refl , refl , updRel2-LOWER _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind (updRel2-SHRINK a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SHRINK a‚ÇÅ , SHRINK a‚ÇÇ , w1 , w , r , refl , refl , updRel2-SHRINK _ _ ur , upw , subRen-refl r
step-updRel2 cc gc {n} {name} {f} {g} {.(upd name f)} {.(force g)} {x} {w0} {w1} {w2} {w} {r} nnf nng cf cg naid nbid comp ind updRel2-upd upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , upd name f , force g , w1 , w , r , refl , refl , updRel2-upd , upw , subRen-refl r



{--
steps-updRel2-aux : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term}
                   ‚Üí ¬¨ name ‚àà names f
                   ‚Üí ¬¨ name ‚àà names g
                   ‚Üí # f
                   ‚Üí # g
                   ‚Üí (k : ‚Ñï)
                   ‚Üí (ind : (k' : ‚Ñï) ‚Üí k' < k ‚Üí presUpdRel2 n name f g k')
                   ‚Üí presUpdRel2 n name f g k
steps-updRel2-aux gc {n} {name} {f} {g} nnf nng cf cg naid nbid 0 ind {a} {b} {v} {w0} {w1} {w2} {w} r compat wgt0 eqw comp ish inw isv
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = 0 , b , refl , r
steps-updRel2-aux gc {n} {name} {f} {g} nnf nng cf cg naid nbid (suc k) ind {a} {b} {v} {w0} {w1} {w2} {w} r compat wgt0 eqw comp ish inw isv
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z =
  k2 + k4 , v' , steps-trans+ {k2} {k4} {b} {y2} {v'} {w} {w} {w} comp2 comp4 , ur'
  where
    ind0 : (k' : ‚Ñï) ‚Üí k' < suc k ‚Üí presUpdRel2 n name f g k'
    ind0 = ind

    ind1 : (k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel2 n name f g k'
    ind1 k' ltk = ind0 k' (_‚â§_.s‚â§s ltk)

    spres : stepsPresUpdRel2 n name f g a' w1'
    spres = k , v , w2 , comp , isv , snd ish , snd (snd inw) , ind1

    s : Œ£stepsUpdRel2 name f g a' w1' b w
    s = step-updRel2 cc gc {n} {name} {f} {g} {a} {b} {a'} {w1} {w1'} {w} nnf nng cf cg naid nbid z spres r (fst ish) (fst inw) (fst (snd inw)) compat wgt0 eqw

    k1 : ‚Ñï
    k1 = fst s

    k2 : ‚Ñï
    k2 = fst (snd s)

    y1 : Term
    y1 = fst (snd (snd s))

    y2 : Term
    y2 = fst (snd (snd (snd s)))

    w3 : ùïé¬∑
    w3 = fst (snd (snd (snd (snd s))))

    comp1 : steps k1 (a' , w1') ‚â° (y1 , w3)
    comp1 = fst (snd (snd (snd (snd (snd s)))))

    comp2 : steps k2 (b , w) ‚â° (y2 , w)
    comp2 = fst (snd (snd (snd (snd (snd (snd s))))))

    ur : updRel2 name f g y1 y2
    ur = snd (snd (snd (snd (snd (snd (snd s))))))

    q : Œ£ ‚Ñï (Œª k3 ‚Üí k3 ‚â§ k √ó Œ£ (steps k3 (y1 , w3) ‚â° (v , w2)) (Œª comp' ‚Üí
                  (isHighest‚Ñï {k} {w1'} {w2} {a'} {v} n name comp
                   ‚Üí isHighest‚Ñï {k3} {w3} {w2} {y1} {v} n name comp')
                  √ó (‚àànamesùïé {k} {w1'} {w2} {a'} {v} name comp
                     ‚Üí ‚àànamesùïé {k3} {w3} {w2} {y1} {v} name comp')))
    q = steps-decomp-isHighest‚Ñï2 {w1'} {w3} {w2} {a'} {y1} {v} {k} {k1} n name isv comp1 comp

    k3 : ‚Ñï
    k3 = fst q

    ltk2 : k3 ‚â§ k
    ltk2 = fst (snd q)

    comp3 : steps k3 (y1 , w3) ‚â° (v , w2)
    comp3 = fst (snd (snd q))

    ish' : isHighest‚Ñï {k3} {w3} {w2} {y1} {v} n name comp3
    ish' = fst (snd (snd (snd q))) (snd ish)

    inw' : ‚àànamesùïé {k3} {w3} {w2} {y1} {v} name comp3
    inw' = snd (snd (snd (snd q))) (snd (snd inw))

    e3 : w1 ‚äë¬∑ w3
    e3 = ‚äë-trans¬∑ (step‚äë {w1} {w1'} {a} {a'} z) (steps‚Üí‚äë k1 a' y1 {w1'} {w3} comp1)

    c : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (y2 , w) ‚â° (v' , w) √ó updRel2 name f g v v'))
    c = ind1 k3 ltk2 {y1} {y2} {v} {w3} {w2} {w} ur (‚äë-compatible¬∑ e3 compat) (‚àÄùïé-mon e3 wgt0) (‚àÄùïé-mon e3 eqw) comp3 ish' inw' isv

    k4 : ‚Ñï
    k4 = fst c

    v' : Term
    v' = fst (snd c)

    comp4 : steps k4 (y2 , w) ‚â° (v' , w)
    comp4 = fst (snd (snd c))

    ur' : updRel2 name f g v v'
    ur' = snd (snd (snd c))
... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) | stepVal a w1 isv =
  ‚ä•-elim (¬¨just‚â°nothing z)
--}


eqfgq-aux : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
            {i : ‚Ñï} {w1 w1s' w2 : ùïé¬∑} {F f g : CTerm} {name : Name}
            {k : ‚Ñï} {v : Term} {j : ‚Ñï} {tn : ‚Ñï}
            ‚Üí ¬¨ name ‚àà names ‚åú f ‚åù
            ‚Üí ¬¨ name ‚àà names ‚åú F ‚åù
            ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1s'
            ‚Üí name ‚àà domùïé¬∑ w1s'
            ‚Üí compatible¬∑ name w1s' Res‚ä§
            ‚Üí ‚àÄùïé-get0-NUM w1s' name
            ‚Üí getT 0 name w2 ‚â° just (NUM j)
            ‚Üí tn ‚â° suc j
            ‚Üí isValue v
            ‚Üí steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1s') ‚â° (v , w2)
            ‚Üí (k' : ‚Ñï) ‚Üí #APPLY F (#force f) #‚áì #NUM k' at w1 ‚Üí #APPLY F (#force g) #‚áì #NUM k' at w1
eqfgq-aux cc cn kb gc {i} {w1} {w1s'} {w2} {F} {f} {g} {name} {k} {v} {j} {tn} nnf nnF nnw1s' idomw1s' compat1 wgt0 g0 eqj isvv compa k' c =
  {!!}
  where
    uF : updCtxt2 name ‚åú f ‚åù ‚åú F ‚åù
    uF = updCtxt2-refl name ‚åú f ‚åù ‚åú F ‚åù nnF

    pish : (getT‚â§‚Ñï w2 tn name ‚Üí isHighest‚Ñï {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa)
           √ó ‚àànamesùïé {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} name compa
    pish = steps-sat-isHighest‚Ñï2
             cc gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f)
             {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
             compa isvv (updCtxt2-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) uF updCtxt2-upd)
             compat1 wgt0 nnw1s' idomw1s'

    gt0 : getT‚â§‚Ñï w2 tn name
    gt0 = j , g0 , ‚â°suc‚Üí< eqj

    ish : isHighest‚Ñï {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
    ish = fst pish gt0

{--
        compg0 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1) √ó updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'))
        compg0 = ? --steps-updRel-app gc {tn} {name} {‚åú F ‚åù} {‚åú f ‚åù} {‚åú g ‚åù} {v} {k} {w1'} {w2} {w1} nnF nnf nng (CTerm.closed f) (CTerm.closed g) compat1 wgt0 (‚àÄùïé-mon e1' eqb3) compa ish isvv

        k' : ‚Ñï
        k' = fst compg0

        v' : Term
        v' = fst (snd compg0)

        compg1 : steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1)
        compg1 = fst (snd (snd compg0))

        ur :  updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'
        ur = snd (snd (snd compg0))

        equf : ‚àÄùïé w1' (Œª w' _ ‚Üí NATeq w' (#APPLY F (#upd name f)) (#APPLY F (#force f)))
        equf = kb (equalInType-NAT‚Üí i w1' (#APPLY F (#upd name f)) (#APPLY F (#force f)) (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w1' e1') (equalInType-upd-force i w1' name f wgt0 (equalInType-mon ‚ààf w1' e1'))))

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = eqfg-aux {w1} {w1'} e0' {name} {‚åú f ‚åù} {‚åú g ‚åù} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú g ‚åù)} {v} {v'} {n} isvv (equf w1' (‚äë-refl¬∑ _)) comp1 (‚áì-from-to‚Üí‚áì (k , compa)) (‚áì-from-to‚Üí‚áì (k' , compg1)) ur
--}



{--
eqfgq : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
        {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm}
        ‚Üí #¬¨Names g
        ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
        ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
        ‚Üí ‚ààType i w #BAIRE g
        ‚Üí smallestMod cn kb gc i w F f ‚ààF ‚ààf
        ‚Üí equalInType i w (#QBAIREn (#ŒΩtestMup F f)) f g
--       ((n : ‚Ñï) ‚Üí n < ? ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
        ‚Üí equalInType i w #NAT (#APPLY F f) (#APPLY F g)
eqfgq cc cn kb gc {i} {w} {F} {f} {g} nng ‚ààF ‚ààf ‚ààg smod eqb =
  equalInType-trans (equalInType-APPLY-force ‚ààF ‚ààf) (equalInType-trans eqf (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààg)))
  where
    eqb1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#QNATn (#ŒΩtestMup F f)) a‚ÇÅ a‚ÇÇ
                         ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqb1 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (‚â°QBAIREn (#ŒΩtestMup F f)) eqb)

    eqb2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª tn ‚Üí Œ£ ‚Ñï (Œª k ‚Üí #ŒΩtestMup F f #‚áì #NUM tn at w'' √ó a‚ÇÅ #‚áõ #NUM k at w'' √ó a‚ÇÇ #‚áõ #NUM k at w'' √ó k < tn)))
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí NATeq w'' (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)))
    eqb2 w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-NAT‚Üí i w1 (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ) (eqb1 w1 e1 a‚ÇÅ a‚ÇÇ (‚ÜíequalInType-QNATn (testM-QNAT cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)) eqa))

-- NOTE: It is not clear how this could work since to prove compg0 below we need to know that f and g compute to the same number
-- on the same input, as long as this input is less than the modulus of F at f. However, to use eqb2 for that we would have to
-- prove that this input is less than all possible moduli of continuity for all extensions...
-- Counter-example?

    eqb3 : ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï)
                         ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMup F f #‚áì #NUM n at w'' √ó k < n)))
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
    eqb3 w1 e1 k comp = kb z w1 (‚äë-refl¬∑ _)
      where
        z : ‚ñ°¬∑ w1 (Œª w'' _ ‚Üí NATeq w'' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        z = eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M Œª w2 e2 ‚Üí fst (lower (comp w2 e2)) , k , fst (snd (lower (comp w2 e2))) , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , snd (snd (lower (comp w2 e2))))

 --eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí k , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , ltk))

{--    neqt : NATeq w (#ŒΩtestM F f) (#ŒΩtestM F f)
    neqt = ŒΩtestM-NAT cn kb gc i w F f nnF nnf ‚ààF ‚ààf

    tn : ‚Ñï
    tn = fst neqt

    x : NATeq w (#ŒΩtestM F f) (#NUM tn)
    x = tn , fst (snd neqt) , compAllRefl _ _

    cx : #ŒΩtestM F f #‚áõ #NUM tn at w
    cx = NATeq‚Üí‚áõ {w} {#ŒΩtestM F f} x
--}

    inn : ‚ààType i w #NAT (#APPLY F (#force f))
    inn = equalInType-refl (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààf))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) ((k : ‚Ñï) ‚Üí #APPLY F (#force f) #‚áì #NUM k at w' ‚Üí #APPLY F (#force g) #‚áì #NUM k at w'))
    aw w1 e1 = lift imp
      where
        w1' : ùïé¬∑
        w1' = fst smod

        e1' : w ‚äë¬∑ w1'
        e1' = fst (snd smod)

        sma : smallestModAux cn kb gc i w F f w1' e1' ‚ààF ‚ààf
        sma = {!!} --snd (snd smod)

        eqb4 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1' to w2
                          √ó ‚àÄùïé w1' (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n
                                            ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))))
        eqb4 = smallestModAux‚ÜíNATeq cn kb gc {i} {w} {F} {f} {g} {w1'} {e1'} ‚ààF ‚ààf {!!} {--sma--} eqb3

        tn : ‚Ñï
        tn = fst eqb4

        w2 : ùïé¬∑
        w2 = fst (snd eqb4)

        compt : ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1' to w2
        compt = fst (snd (snd eqb4))

        eqb5 : ‚àÄùïé w1' (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < tn
                               ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        eqb5 = snd (snd (snd eqb4))

        w1s : ùïé¬∑
        w1s = startNewChoiceT Res‚ä§ w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)

        name : Name
        name = newChoiceT w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)

        compu : Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                 APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) ‚áì v from (chooseT name w1s (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM j)
                 √ó tn ‚â° suc j
                 √ó compatible¬∑ name w1s Res‚ä§))
        compu = ŒΩtestM‚áì‚Üí cn {w1'} {w2} {‚åú F ‚åù} {‚åú f ‚åù} {tn} (CTerm.closed F) (CTerm.closed f) compt

        v : Term
        v = fst compu

        j : ‚Ñï
        j = fst (snd compu)

        w1s' : ùïé¬∑
        w1s' = chooseT name w1s (NUM 0)

        e0' : w1' ‚äë¬∑ w1s'
        e0' = ‚äë-trans¬∑ (startNewChoiceT‚äè Res‚ä§ w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)) (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0)))

        e0'' : w ‚äë¬∑ w1s'
        e0'' = ‚äë-trans¬∑ e1' e0'

        k : ‚Ñï
        k = fst (fst (snd (snd compu)))

        compa : steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1s') ‚â° (v , w2)
        compa = snd (fst (snd (snd compu)))

        isvv : isValue v
        isvv = fst (snd (snd (snd compu)))

        g0 : getT 0 name w2 ‚â° just (NUM j)
        g0 = fst (snd (snd (snd (snd compu))))

        eqj : tn ‚â° suc j
        eqj = fst (snd (snd (snd (snd (snd compu)))))

        compat : compatible¬∑ name w1s Res‚ä§
        compat = snd (snd (snd (snd (snd (snd compu)))))

        compat1 : compatible¬∑ name w1s' Res‚ä§
        compat1 = ‚äë-compatible¬∑ (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0))) compat

        wgt0 : ‚àÄùïé-get0-NUM w1s' name
        wgt0 = cn name w1s 0 compat

        nnf : ¬¨ name ‚àà names ‚åú f ‚åù
        nnf = ¬¨newChoiceT-testMup‚àànames-f w1' ‚åú F ‚åù ‚åú f ‚åù

        nnF : ¬¨ name ‚àà names ‚åú F ‚åù
        nnF = ¬¨newChoiceT-testMup‚àànames-F w1' ‚åú F ‚åù ‚åú f ‚åù

        uF : updCtxt2 name ‚åú f ‚åù ‚åú F ‚åù
        uF = updCtxt2-refl name ‚åú f ‚åù ‚åú F ‚åù nnF

        nnw1' : ¬¨ name ‚àà namesùïé¬∑ w1'
        nnw1' = ¬¨newChoiceT-testMup‚àànamesùïé w1' ‚åú F ‚åù ‚åú f ‚åù

        nnw1s' : ¬¨ name ‚àà namesùïé¬∑ w1s'
        nnw1s' = Œª i ‚Üí nnw1' (ContConds.ccNstart cc name w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù) (ContConds.ccNchoose cc name name w1s (NUM 0) (Œª ()) i))

        idomw1s' : name ‚àà domùïé¬∑ w1s'
        idomw1s' = domùïé-chooseT cc name name w1s (NUM 0) (ContConds.ccNchoice cc w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù))

        pish : (getT‚â§‚Ñï w2 tn name ‚Üí isHighest‚Ñï {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa)
               √ó ‚àànamesùïé {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} name compa
        pish = {!steps-sat-isHighest‚Ñï2-unf
                 cc gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f)
                 {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
                 compa isvv (updCtxt2-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) uF updCtxt2-upd)
                 compat1 wgt0 nnw1s' idomw1s'!}

        gt0 : getT‚â§‚Ñï w2 tn name
        gt0 = j , g0 , {!‚â°suc‚Üí< eqj!}

        ish : isHighest‚Ñï {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
        ish = {!!} {--fst pish ?--}

        -- TODO: this is what we have to prove
        imp : (k : ‚Ñï) ‚Üí #APPLY F (#force f) #‚áì #NUM k at w1 ‚Üí #APPLY F (#force g) #‚áì #NUM k at w1
        imp k' c = {!!}

{--
        compg0 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1) √ó updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'))
        compg0 = ? --steps-updRel-app gc {tn} {name} {‚åú F ‚åù} {‚åú f ‚åù} {‚åú g ‚åù} {v} {k} {w1'} {w2} {w1} nnF nnf nng (CTerm.closed f) (CTerm.closed g) compat1 wgt0 (‚àÄùïé-mon e1' eqb3) compa ish isvv

        k' : ‚Ñï
        k' = fst compg0

        v' : Term
        v' = fst (snd compg0)

        compg1 : steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1)
        compg1 = fst (snd (snd compg0))

        ur :  updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'
        ur = snd (snd (snd compg0))

        equf : ‚àÄùïé w1' (Œª w' _ ‚Üí NATeq w' (#APPLY F (#upd name f)) (#APPLY F (#force f)))
        equf = kb (equalInType-NAT‚Üí i w1' (#APPLY F (#upd name f)) (#APPLY F (#force f)) (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w1' e1') (equalInType-upd-force i w1' name f wgt0 (equalInType-mon ‚ààf w1' e1'))))

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = eqfg-aux {w1} {w1'} e0' {name} {‚åú f ‚åù} {‚åú g ‚åù} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú g ‚åù)} {v} {v'} {n} isvv (equf w1' (‚äë-refl¬∑ _)) comp1 (‚áì-from-to‚Üí‚áì (k , compa)) (‚áì-from-to‚Üí‚áì (k' , compg1)) ur
--}

--      n , comp1 ,
--      {!!} --¬¨Names‚Üí‚áì‚Üí‚áõ w1 w1 ‚åú #APPLY F (#force g) ‚åù (NUM n) (#¬¨Names-APPLY {F} {#force g} nnF (#¬¨Names-force {g} nng)) compg
{--      where
        cxb : Œ£ ùïé¬∑ (Œª w2 ‚Üí ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2)
        cxb = ‚áì‚Üífrom-to (lower (cx w1 e1))

        w2 : ùïé¬∑
        w2 = fst cxb

        compt : ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2
        compt = snd cxb

        w1s : ùïé¬∑
        w1s = startNewChoiceT Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)

        compu : Œ£ Name (Œª name ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                 APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) ‚áì v from (chooseT name w1s (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM j)
                 √ó tn ‚â° suc j
                 √ó compatible¬∑ name w1s Res‚ä§)))
        compu = #ŒΩtestM‚áì‚Üí cn {w1} {w2} {‚åú F ‚åù} {‚åú f ‚åù} {tn} (CTerm.closed F) (CTerm.closed f) nnF nnf compt

        name : Name
        name = fst compu

        v : Term
        v = fst (snd compu)

        j : ‚Ñï
        j = fst (snd (snd compu))

        w1' : ùïé¬∑
        w1' = chooseT name w1s (NUM 0)

        e0' : w1 ‚äë¬∑ w1'
        e0' = ‚äë-trans¬∑ (startNewChoiceT‚äè Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)) (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0)))

        e1' : w ‚äë¬∑ w1'
        e1' = ‚äë-trans¬∑ e1 e0'

        k : ‚Ñï
        k = fst (fst (snd (snd (snd compu))))

        compa : steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1') ‚â° (v , w2)
        compa = snd (fst (snd (snd (snd compu))))

        isvv : isValue v
        isvv = fst (snd (snd (snd (snd compu))))

        g0 : getT 0 name w2 ‚â° just (NUM j)
        g0 = fst (snd (snd (snd (snd (snd compu)))))

        eqj : tn ‚â° suc j
        eqj = fst (snd (snd (snd (snd (snd (snd compu))))))

        compat : compatible¬∑ name w1s Res‚ä§
        compat = snd (snd (snd (snd (snd (snd (snd compu))))))

        compat1 : compatible¬∑ name w1' Res‚ä§
        compat1 = ‚äë-compatible¬∑ (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0))) compat

        wgt0 : ‚àÄùïé-get0-NUM w1' name
        wgt0 = cn name w1s 0 compat

        ish : isHighest‚Ñï {k} {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
        ish = steps-sat-isHighest‚Ñï
                gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f) {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
                compa isvv (updCtxt-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) (¬¨Names‚ÜíupdCtxt {name} {‚åú f ‚åù} {‚åú F ‚åù} nnF) updCtxt-upd)
                compat1
                wgt0
                (j , g0 , ‚â°suc‚Üí< eqj)

        compg0 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1) √ó updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'))
        compg0 = steps-updRel-app gc {tn} {name} {‚åú F ‚åù} {‚åú f ‚åù} {‚åú g ‚åù} {v} {k} {w1'} {w2} {w1} nnF nnf nng (CTerm.closed f) (CTerm.closed g) compat1 wgt0 (‚àÄùïé-mon e1' eqb3) compa ish isvv

        k' : ‚Ñï
        k' = fst compg0

        v' : Term
        v' = fst (snd compg0)

        compg1 : steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1)
        compg1 = fst (snd (snd compg0))

        ur :  updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'
        ur = snd (snd (snd compg0))

        equf : ‚àÄùïé w1' (Œª w' _ ‚Üí NATeq w' (#APPLY F (#upd name f)) (#APPLY F (#force f)))
        equf = kb (equalInType-NAT‚Üí i w1' (#APPLY F (#upd name f)) (#APPLY F (#force f)) (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w1' e1') (equalInType-upd-force i w1' name f wgt0 (equalInType-mon ‚ààf w1' e1'))))

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = eqfg-aux {w1} {w1'} e0' {name} {‚åú f ‚åù} {‚åú g ‚åù} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú g ‚åù)} {v} {v'} {n} isvv (equf w1' (‚äë-refl¬∑ _)) comp1 (‚áì-from-to‚Üí‚áì (k , compa)) (‚áì-from-to‚Üí‚áì (k' , compg1)) ur
--}

    eqf : equalInType i w #NAT (#APPLY F (#force f)) (#APPLY F (#force g))
    eqf = ‚ÜíequalInType-NAT
            i w (#APPLY F (#force f)) (#APPLY F (#force g))
            (Mod.‚àÄùïé-‚ñ°Func M
              (‚Üí‚àÄùïé-NATeq-NATeq w (#APPLY F (#force f)) (#APPLY F (#force g)) aw)
              (equalInType-NAT‚Üí i w (#APPLY F (#force f)) (#APPLY F (#force f)) inn))
--}



{--
continuityQBody : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
                  (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                  ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                  ‚Üí ‚ààType i w #BAIRE f
                  ‚Üí ‚ààType i w (#contQBody F f) (#PAIR (#ŒΩtestMup F f) #lam3AX)
continuityQBody cn kb gc i w F f ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contQBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #QNAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestMup F f) #lam3AX)
                                (#PAIR (#ŒΩtestMup F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestMup F f , #ŒΩtestMup F f , #lam3AX , #lam3AX ,
      testM-QNAT cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestMup F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestMup F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#QBAIREn (#ŒΩtestMup F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                              ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                        (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f)))
                                                              (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                             (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
        aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          equalInType-FUN
            (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                           (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                           (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
              (eqTypesEQ‚Üê eqTypesNAT
                           (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                           (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
            aw4
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                 ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                 ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f)))
                                                           (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                     (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                     (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
            aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
              equalInType-FUN
                (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w3 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                             (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                             (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                (eqTypesEQ‚Üê eqTypesNAT
                             (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                             (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                aw5
              where
                aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f))) y‚ÇÅ y‚ÇÇ
                                     ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                         (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                         (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                  equalInType-EQ
                    eqTypesNAT
                    concl
                  where
                    hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#QBAIREn (#ŒΩtestMup F f)) f g‚ÇÅ)
                    hyp = equalInType-EQ‚Üí ey

                    ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                    ff = equalInTypeFFDEFS‚Üí ex

                    aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#QBAIREn (#ŒΩtestMup F f)) f g‚ÇÅ
                                          ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                          ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                    aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                      where
                        h3 : equalInType i w5 (#QBAIREn (#ŒΩtestMup F f)) f g
                        h3 = equalInType-QBAIREn-BAIRE-trans h2 h1 (testM-QNAT cn kb gc i w5 F f (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                        cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                        cc = {!!} {--eqfg cn kb gc {i} {w5} {F} {f} {g} nnF nnf nng
                                  (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))))
                                  (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))))
                                  (equalInType-refl (equalInType-sym h2))
                                  h3--}

                    concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                    concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

        aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                              ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                    (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû #ŒΩtestMup F f ‚åü))
                                                                             (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                             (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
        aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          ‚â°CTerm‚ÜíequalInType (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû #ŒΩtestMup F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÅ)) (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2

        eql1 : equalInType i w1 (sub0 (#ŒΩtestMup F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contQBodyPI F f (#ŒΩtestMup F f))) eql2


    h0 : ‚ààType i w (#SUM #QNAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestMup F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesQNAT) (equalTypes-contQBodyPI i w F F f f ‚ààF ‚ààf) (Mod.‚àÄùïé-‚ñ° M aw)
--}

\end{code}
