\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module mp_prop {L  : Level}
               (W  : PossibleWorlds {L})
               (M  : Mod W)
               (C  : Choice)
               (K  : Compatible W C)
               (P  : Progress {L} W C K)
               (G  : GetChoice {L} W C K)
               (X  : ChoiceExt {L} W C)
               (N  : NewChoice {L} W C K G)
               (EC : Encode)
               (V  : ChoiceVal W C K G X N EC)
               (F  : Freeze {L} W C K P G N)
               (E  : Extensionality 0‚Ñì (lsuc(lsuc(L))))
               (CB : ChoiceBar W M C K P G X N EC V F E)
               (EM : ExcludedMiddle (lsuc(L)))
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
--open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (<Type ; <Type1 ; <TypeBAR)
open import ind3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (equalTypes-ind)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
  using (#subv)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)
  using (lowerVars-fvars-[0,1,2,3])
open import terms9

--open import nowrites(W)(C)(K)(G)(X)(N)(EC)
--  using (#¬¨Writes ; getChoice‚Ñô ; ¬¨Writes‚Üí‚áõ!INL-INR)

open import choiceProp(W)(C)(K)(G)(X)(N)(EC)
  using (getChoice‚Ñô ; ¬¨enc‚Üí‚áõ!INL-INR)

open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (eqTypes-mon)
open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--  using (equalInType‚ÜíeqInType ; eqInType‚ÜíequalInType)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (‚àÄùïé-‚ñ°Func2)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (equalInType‚ÜíequalTypes-aux ; equalInType-FUN‚Üí ; ‚â°CTerm‚ÜíequalInType ; eqTypesSQUASH‚Üê ;
         eqTypesSUM‚Üê ; isTypeNAT! ; eqTypesNEG‚Üê ; ‚Üí‚â°equalTypes ; eqTypesPI‚Üê ; eqTypesFUN‚Üê ; eqTypesUniv ;
         equalInType-NEG ; eqTypesUNION‚Üê ; equalInType-SQUASH‚Üí ; equalInType-SUM‚Üí ; equalInType-refl ;
         equalInType-PI‚Üí ; equalInType-PI ; equalInType-NEG‚Üí ; equalInType-SUM ; equalInType-mon ;
         NUM-equalInType-NAT! ; equalTypes‚ÜíequalInType-UNIV ; equalInType-local ; equalInType-EQ‚Üí ;
         equalInType-NAT!‚Üí ; ¬¨equalInType-FALSE ; ‚â°CTerm‚ÜíeqTypes ; eqTypesEQ‚Üê ; eqTypesTRUE ; equalInType-EQ ;
         equalInType-FUN)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (‚ÜíequalInType-SQUASH ; ‚ÜíequalInType-CS-NAT!‚ÜíT ; equalTerms-pres-#‚áõ-left-rev ; equalTypes-#‚áõ-left-right-rev ;
         ‚ÜíequalInType-TRUE ; ‚ÜíequalInType-UNION ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ; inhType-mon ; equalInType-BOOL‚ÇÄ!‚Üí ;
         ‚ÜíequalInType-BOOL‚ÇÄ! ; equalInType-#‚áõ-LR)

open import uniMon(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (equalTypes-uni-mon ; equalInType-uni-mon ; equalInType-change-level)

open import pure(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (equalInType-TPURE‚Üí)
-- TODO: move those:
open import pure2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (‚ààNAT!-change-level)

-- TODO: move those:
open import mpp(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)
  using (‚ÜíinhType-ASSERT‚ÇÑ-APPLY ; equalInType-ASSERT‚ÇÑ‚Üí ; ‚ÜíequalInType-ASSERT‚ÇÑ ; strongBool!-BTRUE‚Üí ;
         #‚áõ!-pres-equalTypes-mp-qt‚ÇÉ-fun ; #‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun)

open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (#SUM-ASSERT‚ÇÖ ; #ASSERT‚ÇÑ ; #[0]ASSERT‚ÇÑ ; sub0-ASSERT‚ÇÑ-APPLY ; equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ)
open import mp_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (#[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ; sub0-fun-mp‚ÇÜ ; ‚ÜíequalTypes-#MP-left-qt‚ÇÉ ; ‚ÜíequalTypes-#MP-right-qt‚ÇÉ ;
         #MP‚ÇÜ ; #MP‚Çá ; #MP-left-qt‚ÇÉ ; #MP-right-qt‚ÇÉ ; equalInType-#MP-left-qt‚ÇÉ‚Üí ;
         equalInTypeTNOENC‚Üí ; equalInTypeTNOENC‚Üí‚Çó ; equalInTypeTNOENC‚Üí·µ£ ; eqTypesTNOENC‚Üê)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)
  using (#[0]Type‚ÑÇ‚ÇÄ‚ÇÅ ; Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ ; ‚ñ°¬∑-choice¬∑ ; followChoice¬∑ ; #-type‚ÑÇ‚ÇÄ‚ÇÅ)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)
  using (#Œ£choice ; #Œ£choice‚â° ; ¬¨‚àÄùïé¬¨equalInType-#Œ£choice ; sub0-#Œ£choice-body‚â°)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)
  using (Res‚ÑÇ ; ‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
--open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)



#[2]PI : CTerm2 ‚Üí CTerm3 ‚Üí CTerm2
#[2]PI a b = ct2 (PI ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] PI ‚åú a ‚åù ‚åú b ‚åù
    c = ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ lowerVars (fvars ‚åú b ‚åù)} {0 ‚à∑ 1 ‚à∑ [ 2 ]}
                (‚äÜ++ (‚äÜ?‚Üí‚äÜ {fvars ‚åú a ‚åù} {0 ‚à∑ 1 ‚à∑ [ 2 ]} (CTerm2.closed a))
                      (lowerVars-fvars-[0,1,2,3] {fvars ‚åú b ‚åù} (‚äÜ?‚Üí‚äÜ (CTerm3.closed b))))

DEC‚Ñï : Term ‚Üí Term
DEC‚Ñï F = PI NAT! (OR (APPLY (shiftUp 0 F) (VAR 0)) (NEG (APPLY (shiftUp 0 F) (VAR 0))))


-- œÄ (F : ‚Ñï ‚Üí ùïå·µ¢). (Œ† (n : ‚Ñï). F n ‚à® ¬¨ F n) ‚Üí ¬¨(Œ† (n : ‚Ñï). ¬¨(F n)) ‚Üí ||Œ£ (n : ‚Ñï). F n||
MP‚Ñô : ‚Ñï ‚Üí Term
MP‚Ñô i =
  PI (NAT!‚ÜíU i)
     (FUN (DEC‚Ñï (VAR 0))
          (FUN (NEG (NEG (SQUASH (SUM NAT! (APPLY (VAR 1) (VAR 0))))))
               (SQUASH (SUM NAT! (APPLY (VAR 1) (VAR 0))))))


#[0]MP‚Ñô-right : CTerm0
#[0]MP‚Ñô-right = #[0]SQUASH (#[0]SUM #[0]NAT! (#[1]APPLY #[1]VAR1 #[1]VAR0))


#[0]MP‚Ñô-left : CTerm0
#[0]MP‚Ñô-left = #[0]NEG (#[0]NEG #[0]MP‚Ñô-right)


#[0]DEC‚Ñï : CTerm0
#[0]DEC‚Ñï = #[0]PI #[0]NAT! (#[1]OR (#[1]APPLY #[1]VAR1 #[1]VAR0)
                                   (#[1]NEG (#[1]APPLY #[1]VAR1 #[1]VAR0)))


#DEC‚Ñï : CTerm ‚Üí CTerm
#DEC‚Ñï f = #PI #NAT! (#[0]OR (#[0]APPLY ‚åû f ‚åü #[0]VAR)
                            (#[0]NEG (#[0]APPLY ‚åû f ‚åü #[0]VAR)))


#MP‚Ñô-right : CTerm ‚Üí CTerm
#MP‚Ñô-right f = #SQUASH (#SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR))


#MP‚Ñô-left : CTerm ‚Üí CTerm
#MP‚Ñô-left f = #NEG (#NEG (#MP‚Ñô-right f))


#MP‚Ñô : ‚Ñï ‚Üí CTerm
#MP‚Ñô i = #PI (#NAT!‚ÜíU i) (#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right))


-- sanity check
‚åú#MP‚Ñô‚åù : (i : ‚Ñï) ‚Üí ‚åú #MP‚Ñô i ‚åù ‚â° MP‚Ñô i
‚åú#MP‚Ñô‚åù i = refl


sub0-fun-mp‚Ñô : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right)
                              ‚â° #FUN (#MP‚Ñô-left a) (#MP‚Ñô-right a)
sub0-fun-mp‚Ñô a =
  ‚â°sub0-#[0]FUN
    a #[0]MP‚Ñô-left #[0]MP‚Ñô-right (#MP‚Ñô-left a) (#MP‚Ñô-right a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°APPLY e1 refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT! (#[1]APPLY #[1]VAR1 #[1]VAR0)) (#SUM #NAT! (#[0]APPLY ‚åû a ‚åü #[0]VAR))
      (CTerm‚â° (‚â°SUM refl (‚Üí‚â°APPLY e refl))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl

    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 (CTerm.cTerm a))))
         ‚â° shiftUp 1 (CTerm0.cTerm (CTerm‚ÜíCTerm0 a))
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚Ñô2 : (a : CTerm)
              ‚Üí sub0 a (#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right))
              ‚â° #FUN (#DEC‚Ñï a) (#FUN (#MP‚Ñô-left a) (#MP‚Ñô-right a))
sub0-fun-mp‚Ñô2 a =
  ‚â°sub0-#[0]FUN
    a #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right)
    (#DEC‚Ñï a) (#FUN (#MP‚Ñô-left a) (#MP‚Ñô-right a))
    (CTerm‚â° (‚â°PI refl (‚â°SET refl (‚â°UNION (‚â°APPLY e1 refl) (‚â°PI (‚â°APPLY e1 refl) refl)))))
    (sub0-fun-mp‚Ñô a)
  where
    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))
       ‚â° shiftUp 0 (CTerm0.cTerm (CTerm‚ÜíCTerm0 a))
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftDown 2 a = refl


sub0-#[0]APPLY : (a n : CTerm)
               ‚Üí sub0 n (#[0]APPLY ‚åû a ‚åü #[0]VAR)
               ‚â° #APPLY a n
sub0-#[0]APPLY a n = CTerm‚â° (‚â°APPLY e1 e2)
  where
    e1 : shiftDown 0 (subv 0 (shiftUp 0 ‚åú n ‚åù) (CTerm0.cTerm (CTerm‚ÜíCTerm0 a)))
       ‚â° ‚åú a ‚åù
    e1 rewrite #shiftUp 0 n | #subv 0 ‚åú n ‚åù ‚åú a ‚åù (CTerm.closed a) | #shiftDown 0 a = refl

    e2 : shiftDown 0 (shiftUp 0 ‚åú n ‚åù)
       ‚â° ‚åú n ‚åù
    e2 rewrite #shiftUp 0 n | #shiftDown 0 n = refl


{--
sub0-#[0]APPLY : (a n : CTerm)
                ‚Üí sub0 n (#[0]APPLY ‚åû a ‚åü #[0]VAR)
                ‚â° #APPLY a n
sub0-#[0]APPLY a n = CTerm‚â° (‚â°APPLY e1 e2)
  where
    e1 : shiftDown 0 (subv 0 (shiftUp 0 ‚åú n ‚åù) (CTerm0.cTerm (CTerm‚ÜíCTerm0 a)))
       ‚â° ‚åú a ‚åù
    e1 rewrite #shiftUp 0 n | #subv 0 ‚åú n ‚åù ‚åú a ‚åù (CTerm.closed a) | #shiftDown 0 a = refl

    e2 : shiftDown 0 (shiftUp 0 ‚åú n ‚åù)
       ‚â° ‚åú n ‚åù
    e2 rewrite #shiftUp 0 n | #shiftDown 0 n = refl
--}


{-
sub0-LIFT-APPLY : (a b : CTerm) ‚Üí sub0 a (#[0]LIFT (#[0]APPLY ‚åû b ‚åü #[0]VAR)) ‚â° #LIFT (#APPLY b a)
sub0-LIFT-APPLY a b = CTerm‚â° (‚â°LIFT (‚Üí‚â°APPLY x y))
  where
    x : shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú b ‚åù) ‚â° ‚åú b ‚åù
    x rewrite subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b) = refl

    y : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    y rewrite #shiftUp 0 a | #shiftDown 0 a = refl
-}


isType-MP‚Ñô-right-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                      ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) f‚ÇÅ f‚ÇÇ
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                     ‚Üí equalTypes i w' (sub0 a (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR))
                                                       (sub0 b (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR)))
isType-MP‚Ñô-right-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-#[0]APPLY f‚ÇÅ a‚ÇÅ))
    (sym (sub0-#[0]APPLY f‚ÇÇ a‚ÇÇ))
    (equalInType‚ÜíequalTypes-aux
      (suc i) i ‚â§-refl w1 (#APPLY f‚ÇÅ a‚ÇÅ) (#APPLY f‚ÇÇ a‚ÇÇ)
      (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (#NAT!‚ÜíU‚â° i) f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ (‚ààNAT!-change-level i (suc i) a‚àà)))


‚ÜíequalTypes-#MP‚Ñô-right : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes i w (#MP‚Ñô-right a‚ÇÅ) (#MP‚Ñô-right a‚ÇÇ)
‚ÜíequalTypes-#MP‚Ñô-right {i} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (eqTypesSUM‚Üê (Œª w' _ ‚Üí isTypeNAT!) (isType-MP‚Ñô-right-body i w a‚ÇÅ a‚ÇÇ eqt))


‚ÜíequalTypes-#MP‚Ñô-left : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes i w (#MP‚Ñô-left a‚ÇÅ) (#MP‚Ñô-left a‚ÇÇ)
‚ÜíequalTypes-#MP‚Ñô-left {i} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP‚Ñô-right eqt))


{-
-- This is the axiom of unique choice
--     Œ†(R : ‚Ñï‚Üíùîπ‚Üí‚Ñô).
--        (Œ†(n:‚Ñï).‚àÉ(b:ùîπ).R n b)
--        ‚Üí (Œ†(n:‚Ñï)(b‚ÇÅ:ùîπ)(b‚ÇÇ:ùîπ).R n b‚ÇÅ ‚Üí R n b‚ÇÇ ‚Üí b‚ÇÅ=b‚ÇÇ)
--        ‚Üí ‚àÉ(f:‚Ñï‚Üíùîπ).Œ†(n:‚Ñï).R n (f n)
-- Could we prove that this is not valid using a choice Œ¥ and the relation
--     R n true  = ‚àÄm‚â•n.Œ¥(m)=0
--     R n false = ¬¨‚àÄm‚â•n.Œ¥(m)=0
-- ?
-- If that was the case, we would also be able to invalidate AC‚ÇÄ‚ÇÄ
-- If we want to use it for MP, we probably want #NAT! not #NAT
#uniqueChoice : ‚Ñï ‚Üí CTerm
#uniqueChoice i =
  #PI (#FUN #NAT (#FUN #BOOL (#UNIV i))) -- R
      (#[0]FUN
        (#[0]PI #[0]NAT (#[1]SQUASH (#[1]SUM #[1]BOOL (#[2]APPLY2 #[2]VAR2 #[2]VAR1 #[2]VAR0)))) -- Condition
        (#[0]FUN
          (#[0]PI #[0]NAT (#[1]PI #[1]BOOL (#[2]PI #[2]BOOL (#[3]FUN (#[3]APPLY2 #[3]VAR3 #[3]VAR2 #[3]VAR1)
                                                                     (#[3]FUN (#[3]APPLY2 #[3]VAR3 #[3]VAR2 #[3]VAR0)
                                                                              (#[3]EQ #[3]VAR1 #[3]VAR0 #[3]BOOL))))))
          (#[0]SQUASH (#[0]SUM (#[0]FUN #[0]NAT #[0]BOOL) (#[1]PI #[1]NAT (#[2]APPLY2 #[2]VAR2 #[2]VAR0 (#[2]APPLY #[2]VAR1 #[2]VAR0)))))))
-}


Choice‚Ñô : ‚Ñï ‚Üí ChoiceBar W M C K P G X N EC V F E ‚Üí Set
Choice‚Ñô i cb =
  ChoiceBar.Type‚ÑÇ‚ÇÄ‚ÇÅ cb ‚â° #UNIV i
  √ó C‚ÑÇ‚ÇÄ ‚â° #FALSE
  √ó C‚ÑÇ‚ÇÅ ‚â° #TRUE


-- Same as in not_mp. Move it.
-- alwaysFreezable is only going to be true about choice sequences, but not about references, which change over time
alwaysFreezable : Freeze W C K P G N ‚Üí Set(L)
alwaysFreezable f = (c : Name) (w : ùïé¬∑) ‚Üí Freeze.freezable f c w


isType-#NAT!‚ÜíU : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType (suc n) w (#NAT!‚ÜíU n)
isType-#NAT!‚ÜíU w n
  rewrite #NAT!‚ÜíU‚â° n
  = eqTypesFUN‚Üê isTypeNAT! (eqTypesUniv w (suc n) n ‚â§-refl)


sub0-DEC‚Ñï-body1 : (a n : CTerm)
                ‚Üí sub0 n (#[0]OR (#[0]APPLY ‚åû a ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
                ‚â° #OR (#APPLY a n) (#NEG (#APPLY a n))
sub0-DEC‚Ñï-body1 a n = CTerm‚â° (‚â°SET refl (‚â°UNION (‚â°APPLY e1 e2) (‚â°PI (‚â°APPLY e1 e2) refl)))
  where
    e1 : shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 ‚åú n ‚åù)) (shiftUp 0 (CTerm0.cTerm (CTerm‚ÜíCTerm0 a))))
       ‚â° shiftUp 0 ‚åú a ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 n | #shiftUp 0 n
             | #subv 1 ‚åú n ‚åù ‚åú a ‚åù (CTerm.closed a) | #shiftDown 1 a = refl

    e2 : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú n ‚åù))
       ‚â° shiftUp 0 ‚åú n ‚åù
    e2 rewrite #shiftUp 0 n | #shiftUp 0 n | #shiftDown 1 n = refl


eqTypesOR‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B C D : CTerm}
           ‚Üí equalTypes i w A B
           ‚Üí equalTypes i w C D
           ‚Üí equalTypes i w (#OR A C) (#OR B D)
eqTypesOR‚Üê {w} {i} {A} {B} {C} {D} eqt1 eqt2 =
  eqTypesSQUASH‚Üê (eqTypesUNION‚Üê eqt1 eqt2)


‚ÜíequalInTypeOR‚Çó : {w : ùïé¬∑} {i : ‚Ñï} {A B a b : CTerm} (u : CTerm)
                ‚Üí ‚ààType i w A u
                ‚Üí isType i w B
                ‚Üí equalInType i w (#OR A B) a b
‚ÜíequalInTypeOR‚Çó {w} {i} {A} {B} {a} {b} u a‚àà tyb =
  ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw)
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí inhType i w' (#UNION A B))
  aw w1 e1 =
    #INL u ,
    ‚ÜíequalInType-UNION
      (eqTypes-mon (uni i) (fst a‚àà) w1 e1)
      (eqTypes-mon (uni i) tyb w1 e1)
      (Mod.‚àÄùïé-‚ñ° M aw1)
    where
    aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí UNIONeq (equalInType i w' A) (equalInType i w' B) w' (#INL u) (#INL u))
    aw1 w2 e2 = u , u , inj‚ÇÅ (‚áì-refl ‚åú #INL u ‚åù w2 , ‚áì-refl ‚åú #INL u ‚åù w2 , equalInType-mon a‚àà w2 (‚äë-trans¬∑ e1 e2))


‚ÜíequalInTypeOR·µ£ : {w : ùïé¬∑} {i : ‚Ñï} {A B a b : CTerm} (u : CTerm)
                ‚Üí isType i w A
                ‚Üí ‚ààType i w B u
                ‚Üí equalInType i w (#OR A B) a b
‚ÜíequalInTypeOR·µ£ {w} {i} {A} {B} {a} {b} u tya b‚àà =
  ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw)
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí inhType i w' (#UNION A B))
  aw w1 e1 =
    #INR u ,
    ‚ÜíequalInType-UNION
      (eqTypes-mon (uni i) tya w1 e1)
      (eqTypes-mon (uni i) (fst b‚àà) w1 e1)
      (Mod.‚àÄùïé-‚ñ° M aw1)
    where
    aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí UNIONeq (equalInType i w' A) (equalInType i w' B) w' (#INR u) (#INR u))
    aw1 w2 e2 = u , u , inj‚ÇÇ (‚áì-refl ‚åú #INR u ‚åù w2 , ‚áì-refl ‚åú #INR u ‚åù w2 , equalInType-mon b‚àà w2 (‚äë-trans¬∑ e1 e2))


‚ÜíequalTypes-#DEC‚Ñï-body‚Çó : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ n‚ÇÅ n‚ÇÇ : CTerm}
                        ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w #NAT! n‚ÇÅ n‚ÇÇ
                        ‚Üí equalTypes i w (#APPLY a‚ÇÅ n‚ÇÅ) (#APPLY a‚ÇÇ n‚ÇÇ)
‚ÜíequalTypes-#DEC‚Ñï-body‚Çó {i} {w} {a‚ÇÅ} {a‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} a‚àà n‚àà =
  equalInType‚ÜíequalTypes-aux (suc i) i ‚â§-refl w (#APPLY a‚ÇÅ n‚ÇÅ) (#APPLY a‚ÇÇ n‚ÇÇ)
    (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (#NAT!‚ÜíU‚â° i) a‚àà) w (‚äë-refl¬∑ w) n‚ÇÅ n‚ÇÇ (‚ààNAT!-change-level i (suc i) n‚àà))


‚ÜíequalTypes-#DEC‚Ñï-body·µ£ : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ n‚ÇÅ n‚ÇÇ : CTerm}
                        ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w #NAT! n‚ÇÅ n‚ÇÇ
                        ‚Üí equalTypes i w (#NEG (#APPLY a‚ÇÅ n‚ÇÅ)) (#NEG (#APPLY a‚ÇÇ n‚ÇÇ))
‚ÜíequalTypes-#DEC‚Ñï-body·µ£ {i} {w} {a‚ÇÅ} {a‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} a‚àà n‚àà =
  eqTypesNEG‚Üê (‚ÜíequalTypes-#DEC‚Ñï-body‚Çó a‚àà n‚àà)


‚ÜíequalTypes-#DEC‚Ñï-body : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ n‚ÇÅ n‚ÇÇ : CTerm}
                       ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w #NAT! n‚ÇÅ n‚ÇÇ
                       ‚Üí equalTypes i w
                                    (sub0 n‚ÇÅ (#[0]OR (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                    (sub0 n‚ÇÇ (#[0]OR (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
‚ÜíequalTypes-#DEC‚Ñï-body {i} {w} {a‚ÇÅ} {a‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} a‚àà n‚àà
  rewrite sub0-DEC‚Ñï-body1 a‚ÇÅ n‚ÇÅ | sub0-DEC‚Ñï-body1 a‚ÇÇ n‚ÇÇ
  = eqTypesOR‚Üê (‚ÜíequalTypes-#DEC‚Ñï-body‚Çó a‚àà n‚àà) (‚ÜíequalTypes-#DEC‚Ñï-body·µ£ a‚àà n‚àà)


‚ÜíequalTypes-#DEC‚Ñï : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                  ‚Üí equalInType (suc i) w (#NAT!‚ÜíU i) a‚ÇÅ a‚ÇÇ
                  ‚Üí equalTypes i w (#DEC‚Ñï a‚ÇÅ) (#DEC‚Ñï a‚ÇÇ)
‚ÜíequalTypes-#DEC‚Ñï {i} {w} {a‚ÇÅ} {a‚ÇÇ} a‚àà =
  eqTypesPI‚Üê (Œª w1 e1 ‚Üí isTypeNAT!) aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) (ea : equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ)
                      ‚Üí equalTypes i w'
                                   (sub0 n‚ÇÅ (#[0]OR (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                   (sub0 n‚ÇÇ (#[0]OR (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR)))))
    aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà = ‚ÜíequalTypes-#DEC‚Ñï-body (equalInType-mon a‚àà w1 e1) n‚àà


isTypeMP‚Ñô : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType (suc n) w (#MP‚Ñô n)
isTypeMP‚Ñô w n =
  eqTypesPI‚Üê
    {w} {suc n}
    {#NAT!‚ÜíU n} {#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right)}
    {#NAT!‚ÜíU n} {#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right)}
    (Œª w1 e1 ‚Üí isType-#NAT!‚ÜíU w1 n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType (suc n) w' (#NAT!‚ÜíU n) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes (suc n) w' (sub0 a‚ÇÅ (#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right)))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right))))
    aw w1 e1 a‚ÇÅ a‚ÇÇ a‚àà rewrite sub0-fun-mp‚Ñô2 a‚ÇÅ | sub0-fun-mp‚Ñô2 a‚ÇÇ = equalTypes-uni-mon (<‚áí‚â§ ‚â§-refl) c
      where
        c : equalTypes n w1 (#FUN (#DEC‚Ñï a‚ÇÅ) (#FUN (#MP‚Ñô-left a‚ÇÅ) (#MP‚Ñô-right a‚ÇÅ)))
                            (#FUN (#DEC‚Ñï a‚ÇÇ) (#FUN (#MP‚Ñô-left a‚ÇÇ) (#MP‚Ñô-right a‚ÇÇ)))
        c = eqTypesFUN‚Üê (‚ÜíequalTypes-#DEC‚Ñï a‚àà) (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP‚Ñô-left a‚àà) (‚ÜíequalTypes-#MP‚Ñô-right a‚àà))


equalInType-#MP‚Ñô-right‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                        ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) f
                        ‚Üí equalInType i w (#MP‚Ñô-right f) a‚ÇÅ a‚ÇÇ
                        ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                         √ó inhType i w' (#APPLY f n)))
equalInType-#MP‚Ñô-right‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SQUASH‚Üí h))
    where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR))
                       ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w'' #NAT! n √ó inhType i w'' (#APPLY f n))) e'))
    aw w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SUM‚Üí t‚àà)
      where
      aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY ‚åû f ‚åü #[0]VAR))) w' t t
                           ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w'' #NAT! n √ó inhType i w'' (#APPLY f n))) e1 w' e')
      aw1 w1 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z
        rewrite sub0-#[0]APPLY f a1
        = a1 , equalInType-refl a‚àà ,
          b1 , equalInType-refl b‚àà -- (equalInType-LIFT‚Üí i w1 (#APPLY f a1) b1 b2 b‚àà)


‚ÜíequalInType-#MP‚Ñô-right : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                        ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) f
                        ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                         √ó inhType i w' (#APPLY f n)))
                        ‚Üí equalInType i w (#MP‚Ñô-right f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP‚Ñô-right i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ°Func M aw h)
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n √ó inhType i w' (#APPLY f n))
                     ‚Üí inhType i w' (#SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
  aw w1 e1 (n , n‚àà , (t , t‚àà)) =
    #PAIR n t ,
    equalInType-SUM
      (Œª w1 e1 ‚Üí isTypeNAT!) (isType-MP‚Ñô-right-body i w1 f f (equalInType-mon f‚àà w1 e1))
      (Mod.‚àÄùïé-‚ñ° M aw1)
    where
    aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
                                w' (#PAIR n t) (#PAIR n t))
    aw1 w2 e2 =
      n , n , t , t ,
      equalInType-mon n‚àà w2 e2 ,
      ‚áì-refl ‚åú #PAIR n t ‚åù w2 ,
      ‚áì-refl ‚åú #PAIR n t ‚åù w2 ,
      ‚â°CTerm‚ÜíequalInType (sym (sub0-#[0]APPLY f n)) (equalInType-mon t‚àà w2 e2)


-- Application to 2 arguments
#APPLY2 : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#APPLY2 f a b = #APPLY (#APPLY f a) b


-- Application to 3 arguments
#APPLY3 : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#APPLY3 f a b c = #APPLY (#APPLY (#APPLY f a) b) c


#AX‚ààDEC‚Ñï : {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm}
         ‚Üí inhType i w (#DEC‚Ñï f)
         ‚Üí equalInType i w (#DEC‚Ñï f) #AX #AX
#AX‚ààDEC‚Ñï {i} {w} {f} (t , t‚àà) =
  equalInType-PI
    (Œª w1 e1 ‚Üí eqTypes-mon (uni i) (fst (equalInType-PI‚Üí t‚àà)) w1 e1)
    (fst (snd (equalInType-PI‚Üí t‚àà)))
    Œª w1 e1 a‚ÇÅ a‚ÇÇ a‚àà ‚Üí
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-DEC‚Ñï-body1 f a‚ÇÅ))
        (‚ÜíequalInType-SQUASH
          (equalInType-SQUASH‚Üí
            {i} {w1} {_} {#APPLY t a‚ÇÅ} {#APPLY t a‚ÇÇ}
            (‚â°CTerm‚ÜíequalInType (sub0-DEC‚Ñï-body1 f a‚ÇÅ) (snd (snd (equalInType-PI‚Üí t‚àà)) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))))


‚ÜíequalInType-#MP‚Ñô-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) f
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n √ó inhType i w' (#APPLY f n)))
                                                      ‚Üí ‚ä•)
                                      ‚Üí ‚ä•)
                       ‚Üí equalInType i w (#MP‚Ñô-left f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP‚Ñô-left i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP‚Ñô-right f‚àà))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#MP‚Ñô-right f)) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n √ó inhType i w' (#APPLY f n))) ‚Üí ‚ä•)
        aw2 w2 e2 (n , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
            i‚àà w3 e3 =
              #PAIR n t ,
              equalInType-SUM
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP‚Ñô-right-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!)
                                            (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
                                            w' (#PAIR n t) (#PAIR n t))
                aw3 w4 e4 =
                  n , n , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n t ‚åù w4 ,
                  ‚áì-refl ‚åú #PAIR n t ‚åù w4 ,
                  ‚â°CTerm‚ÜíequalInType
                    (sym (sub0-#[0]APPLY f n))
                    (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#MP‚Ñô-right f) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


‚àà#MP‚Ñô-right-change-level : {i j : ‚Ñï} (p : i ‚â§ j) {w : ùïé¬∑} {f a b : CTerm}
                         ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) f
                         ‚Üí equalInType j w (#MP‚Ñô-right f) a b
                         ‚Üí equalInType i w (#MP‚Ñô-right f) a b
‚àà#MP‚Ñô-right-change-level {i} {j} lej {w} {f} {a} {b} f‚àà a‚àà =
  ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SQUASH‚Üí a‚àà))
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí inhType j w' (#SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR))
                     ‚Üí inhType i w' (#SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
  aw w1 e1 (p , p‚àà) =
    p ,
    equalInType-SUM
      (Œª w1 e1 ‚Üí isTypeNAT!) (isType-MP‚Ñô-right-body i w1 f f (equalInType-mon f‚àà w1 e1))
      (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SUM‚Üí p‚àà))
    where
    aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType j w' #NAT!)
                                 (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType j w' (sub0 a‚ÇÅ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
                                 w' p p
                         ‚Üí SUMeq (equalInType i w' #NAT!)
                                 (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
                                 w' p p)
    aw1 w2 e2 (n1 , n2 , t1 , t2 , n‚àà , c1 , c2 , t‚àà) =
      n1 , n2 , t1 , t2 , ‚ààNAT!-change-level j i n‚àà , c1 , c2 ,
      ‚â°CTerm‚ÜíequalInType (sym (sub0-#[0]APPLY f n1)) (equalInType-change-level lej f‚àà' t‚àà')
      where
      t‚àà' : equalInType j w2 (#APPLY f n1) t1 t2
      t‚àà' = ‚â°CTerm‚ÜíequalInType (sub0-#[0]APPLY f n1) t‚àà

      f‚àà' : isType i w2 (#APPLY f n1)
      f‚àà' = ‚ÜíequalTypes-#DEC‚Ñï-body‚Çó (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)) (‚ààNAT!-change-level j i (equalInType-refl n‚àà))



‚àà#MP‚Ñô‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
       ‚Üí equalInType (suc i) w (#MP‚Ñô i) F G
       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType (suc i) w' (#NAT!‚ÜíU i) f
                      ‚Üí inhType i w' (#DEC‚Ñï f)
                      ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                                         √ó inhType i w' (#APPLY f n)))
                                                      ‚Üí ‚ä•)
                                      ‚Üí ‚ä•)
                      ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                        √ó inhType i w' (#APPLY f n))))
‚àà#MP‚Ñô‚Üí i w F G F‚àà w1 e1 f f‚àà decn cond =
  equalInType-#MP‚Ñô-right‚Üí i w1 f (#APPLY3 F f #AX #AX) (#APPLY3 G f #AX #AX) f‚àà
    (‚àà#MP‚Ñô-right-change-level (<‚áí‚â§ ‚â§-refl) f‚àà h4)
  where
    h1 : equalInType (suc i) w1 (sub0 f (#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right))) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {suc i} {w} {#NAT!‚ÜíU i} {#[0]FUN #[0]DEC‚Ñï (#[0]FUN #[0]MP‚Ñô-left #[0]MP‚Ñô-right)} F‚àà)) w1 e1 f f f‚àà

    h2 : equalInType (suc i) w1 (#FUN (#DEC‚Ñï f) (#FUN (#MP‚Ñô-left f) (#MP‚Ñô-right f))) (#APPLY F f) (#APPLY G f)
    h2 = ‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚Ñô2 f) h1

    h3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' (#DEC‚Ñï f) a‚ÇÅ a‚ÇÇ
                       ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' (#MP‚Ñô-left f) b‚ÇÅ b‚ÇÇ
                       ‚Üí equalInType (suc i) w' (#MP‚Ñô-right f) (#APPLY3 F f a‚ÇÅ b‚ÇÅ) (#APPLY3 G f a‚ÇÇ b‚ÇÇ))
    h3 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà b‚ÇÅ b‚ÇÇ b‚àà =
      equalInType-FUN‚Üí
        {suc i} {w2} {#MP‚Ñô-left f} {#MP‚Ñô-right f} {#APPLY2 F f a‚ÇÅ} {#APPLY2 G f a‚ÇÇ}
        (equalInType-FUN‚Üí h2 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà)
        w2 (‚äë-refl¬∑ w2) b‚ÇÅ b‚ÇÇ b‚àà

    h4 : equalInType (suc i) w1 (#MP‚Ñô-right f) (#APPLY3 F f #AX #AX) (#APPLY3 G f #AX #AX)
    h4 = h3 w1 (‚äë-refl¬∑ w1)
            #AX #AX (equalInType-uni-mon (<‚áí‚â§ ‚â§-refl) (#AX‚ààDEC‚Ñï decn))
            #AX #AX (equalInType-uni-mon (<‚áí‚â§ ‚â§-refl) (‚ÜíequalInType-#MP‚Ñô-left i w1 f #AX #AX f‚àà cond))


-- MOVE to props1
eqTypes-UNIV‚Üí< : (i n : ‚Ñï) (w : ùïé¬∑) (A B : CTerm)
               ‚Üí A #‚áõ #UNIV i at w
               ‚Üí equalTypes n w A B
               ‚Üí i < n
eqTypes-UNIV‚Üí< i n w A B comp eqt = concl i comp
  where
  ind : {u : ‚Ñï} {w : ùïé¬∑} {T1 T2 : CTerm} (eqt : equalTypes u w T1 T2)
      ‚Üí ({u' : ‚Ñï} {w' : ùïé¬∑} {T1' T2' : CTerm} (eqt' : equalTypes u' w' T1' T2')
         ‚Üí <Type {‚Ñï‚Üíùïå u'} eqt' {‚Ñï‚Üíùïå u} eqt ‚Üí (i : ‚Ñï) ‚Üí T1' #‚áõ #UNIV i at w' ‚Üí i < u')
      ‚Üí (i : ‚Ñï) ‚Üí T1 #‚áõ #UNIV i at w ‚Üí i < u
  ind {u} {w} {T1} {T2} (EQTQNAT x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqQNAT (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) ind i comp = ‚ä•-elim (UNIVneqLT (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) ind i comp = ‚ä•-elim (UNIVneqQLT (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTFREE x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqFREE (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind i comp = ‚ä•-elim (UNIVneqPI (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTW A1 B1 C1 A2 B2 C2 x x‚ÇÅ eqta eqtb eqtc exta extb extc) ind i comp = ‚ä•-elim (UNIVneqW (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTM A1 B1 C1 A2 B2 C2 x x‚ÇÅ eqta eqtb eqtc exta extb extc) ind i comp = ‚ä•-elim (UNIVneqM (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind i comp = ‚ä•-elim (UNIVneqSUM (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind i comp = ‚ä•-elim (UNIVneqSET (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) ind i comp = ‚ä•-elim (UNIVneqISECT (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind i comp = ‚ä•-elim (UNIVneqTUNION (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2) ind i comp = ‚ä•-elim (UNIVneqEQ (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) ind i comp = ‚ä•-elim (UNIVneqUNION (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTNOWRITE x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqNOWRITE (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTNOREAD x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqNOREAD (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) ind i comp = ‚ä•-elim (UNIVneqSUBSING (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) ind i comp = ‚ä•-elim (UNIVneqFFDEFS (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTPURE x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqPURE (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTNOSEQ x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqNOSEQ (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTNOENC x x‚ÇÅ) ind i comp = ‚ä•-elim (UNIVneqNOENC (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTTERM t1 t2 x x‚ÇÅ x‚ÇÇ) ind i comp = ‚ä•-elim (UNIVneqTERM (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTUNIV i‚ÇÅ p x x‚ÇÅ) ind i comp = c
    where
    c : i < u
    c rewrite UNIVinj (‚áõ-val-det tt tt comp x) = p
--  ind {u} {w} {T1} {T2} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) ind i comp = ‚ä•-elim (UNIVneqLIFT (‚áõ-val-det tt tt comp x))
  ind {u} {w} {T1} {T2} (EQTBAR x) ind i comp =
    lower {0‚Ñì} {lsuc(L)} (Mod.‚ñ°-const M (‚àÄùïé-‚ñ°at W M x aw))
      where
      aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes u w' T1 T2) ‚Üí at‚ñ°¬∑ x w' e' z ‚Üí Lift (lsuc L) (i < u))
      aw w1 e1 z at = lift (ind {u} {w1} {T1} {T2} z (<Type1 z (EQTBAR x) (<TypeBAR (‚Ñï‚Üíùïå u) w T1 T2 x w1 e1 z at)) i (‚áõ-mon e1 comp))

  concl : (i : ‚Ñï) ‚Üí A #‚áõ #UNIV i at w ‚Üí i < n
  concl i comp =
    equalTypes-ind
      (Œª {n} {w} {A} {B} eqt ‚Üí (i : ‚Ñï) ‚Üí A #‚áõ #UNIV i at w ‚Üí i < n)
      ind eqt i comp


-- MOVE to props3
equalTerms-pres-#‚áõ-left-rev-UNIV : (i : ‚Ñï) ‚Üí equalTerms-pres-#‚áõ-left-rev (#UNIV i)
equalTerms-pres-#‚áõ-left-rev-UNIV i {j} {w} {a} {b} {c} comp eqt eqi =
  equalInType‚ÜíeqInType
    {j} {w} {#UNIV i} {#UNIV i} {#UNIV i} {a} {c} refl {eqt}
    (equalTypes‚ÜíequalInType-UNIV
      {j} {i} (eqTypes-UNIV‚Üí< i j w (#UNIV i) (#UNIV i) (#‚áõ-refl w (#UNIV i)) eqt) {w} {a} {c}
      (equalTypes-#‚áõ-left-right-rev
        {i} {w} {b} {a} {c} {c} (#‚áõ!‚Üí#‚áõ {w} {a} {b} comp) (#‚áõ-refl w c)
        (equalInType‚ÜíequalTypes-aux
          j i (eqTypes-UNIV‚Üí< i j w (#UNIV i) (#UNIV i) (#‚áõ-refl w (#UNIV i)) eqt) w b c
          (eqInType‚ÜíequalInType {j} {w} {#UNIV i} {#UNIV i} {#UNIV i} {b} {c} refl eqt eqi))))


abstract
  equalInTypeEQ‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                 ‚Üí equalInType u w (#EQ a b A) f g
                 ‚Üí equalInType u w A a b
  equalInTypeEQ‚Üí {u} {w} {a} {b} {A} {f} {g} f‚àà =
    equalInType-local (Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) (equalInType-EQ‚Üí f‚àà))


abstract
  equalInTypeEQ‚Üê : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                 ‚Üí equalInType u w A a b
                 ‚Üí equalInType u w (#EQ a b A) f g
  equalInTypeEQ‚Üê {u} {w} {a} {b} {A} {f} {g} a‚àà =
    equalInType-EQ
      (fst a‚àà)
      (Mod.‚àÄùïé-‚ñ° M (equalInType-mon a‚àà))


Œ£choice‚Ñô : (n : Name) ‚Üí Term
Œ£choice‚Ñô n = SUM NAT! (APPLY (CS n) (VAR 0))


#Œ£‚Ñô : (f : CTerm) ‚Üí CTerm
#Œ£‚Ñô f = #SUM #NAT! (#[0]APPLY ‚åû f ‚åü #[0]VAR)


#Œ£choice‚Ñô : (n : Name) ‚Üí CTerm
#Œ£choice‚Ñô n = #Œ£‚Ñô (#CS n)


equalTypes-#Œ£‚Ñô-body : {i : ‚Ñï} {w : ùïé¬∑} {f n‚ÇÅ n‚ÇÇ : CTerm}
                    ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) f
                    ‚Üí equalInType i w #NAT! n‚ÇÅ n‚ÇÇ
                    ‚Üí equalTypes i w (sub0 n‚ÇÅ (#[0]APPLY ‚åû f ‚åü #[0]VAR)) (sub0 n‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR))
equalTypes-#Œ£‚Ñô-body {i} {w} {f} {n‚ÇÅ} {n‚ÇÇ} f‚àà n‚àà =
  ‚â°CTerm‚ÜíeqTypes
      (sym (sub0-#[0]APPLY f n‚ÇÅ))
      (sym (sub0-#[0]APPLY f n‚ÇÇ))
      (equalInType‚ÜíequalTypes-aux
        (suc i) i ‚â§-refl w (#APPLY f n‚ÇÅ) (#APPLY f n‚ÇÇ)
        (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (#NAT!‚ÜíU‚â° i) f‚àà) w (‚äë-refl¬∑ w) n‚ÇÅ n‚ÇÇ (‚ààNAT!-change-level i (suc i) n‚àà)))


#Œ£choice‚Üí#Œ£choice‚Ñô : (i : ‚Ñï) ‚Üí Choice‚Ñô i CB ‚Üí (w : ùïé¬∑) (name : Name) (t : CTerm)
                   ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) (#CS name)
                   ‚Üí ‚ààType (suc i) w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑) t
                   ‚Üí ‚ààType i w (#Œ£choice‚Ñô name) t
#Œ£choice‚Üí#Œ£choice‚Ñô i cp w name t f‚àà t‚àà =
  equalInType-SUM
    {_} {_} {#NAT!} {#[0]APPLY (#[0]CS name) #[0]VAR}
    (Œª w' _ ‚Üí isTypeNAT!)
    (Œª w1 e1 n‚ÇÅ n‚ÇÇ n‚àà ‚Üí equalTypes-#Œ£‚Ñô-body (equalInType-mon f‚àà w1 e1) n‚àà)
    (Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí (‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) t‚àà)))
  where
  aw2 : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType (suc i) w' #NAT!)
                              (Œª a b ea ‚Üí equalInType (suc i) w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                              w' t t
                      ‚Üí SUMeq (equalInType i w' #NAT!)
                              (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY (#[0]CS name) #[0]VAR)))
                              w' t t)
  aw2 w1 e1 (a1 , a2 , b1 , b2 , a‚àà , c‚ÇÅ , c‚ÇÇ , b‚àà) =
    a1 , a2 , b1 , b2 ,
    ‚ààNAT!-change-level (suc i) i a‚àà ,
    c‚ÇÅ , c‚ÇÇ ,
    ‚â°CTerm‚ÜíequalInType
      (sym (sub0-#[0]APPLY (#CS name) a1))
      (TSext-equalTypes-equalInType i w1 #TRUE (#APPLY (#CS name) a1) b1 b2 (TEQsym-equalTypes i w1 _ _ b‚àà3) (‚ÜíequalInType-TRUE i))
    where
    b‚àà1 : equalInType (suc i) w1 (#EQ (#APPLY (#CS name) a1) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b1 b2
    b‚àà1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a1 name ‚ÑÇ‚ÇÅ¬∑) b‚àà

    b‚àà2 : equalInType (suc i) w1 (#EQ (#APPLY (#CS name) a1) #TRUE (#UNIV i)) b1 b2
    b‚àà2 = ‚â°CTerm‚ÜíequalInType (‚â°#EQ {#APPLY (#CS name) a1} refl (snd (snd cp)) (fst cp)) b‚àà1

    b‚àà3 : equalTypes i w1 (#APPLY (#CS name) a1) #TRUE
    b‚àà3 = equalInType‚ÜíequalTypes-aux (suc i) i ‚â§-refl w1 (#APPLY (#CS name) a1) #TRUE (equalInTypeEQ‚Üí b‚àà2)


{--
-- TO FINISH
#Œ£choice‚Ñô‚Üí#Œ£choice : (i : ‚Ñï) ‚Üí Choice‚Ñô i CB ‚Üí (w : ùïé¬∑) (name : Name) (t : CTerm)
                   ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) (#CS name)
                   ‚Üí ‚ààType i w (#Œ£choice‚Ñô name) t
                   ‚Üí ‚ààType (suc i) w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑) t
#Œ£choice‚Ñô‚Üí#Œ£choice i cp w name t f‚àà t‚àà =
  ‚â°CTerm‚ÜíequalInType
    (sym (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑))
    (equalInType-SUM
      (Œª w' _ ‚Üí isTypeNAT!)
      aw1 (Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí {_} {_} {_} {#[0]APPLY (#[0]CS name) #[0]VAR} t‚àà)))
  where
  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType (suc i) w' #NAT! n‚ÇÅ n‚ÇÇ
                     ‚Üí equalTypes (suc i) w' (sub0 n‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                             (sub0 n‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
  aw1 w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
    ‚â°CTerm‚ÜíeqTypes
      (sym (sub0-#Œ£choice-body‚â° n‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑))
      (sym (sub0-#Œ£choice-body‚â° n‚ÇÇ name ‚ÑÇ‚ÇÅ¬∑))
      (‚â°CTerm‚ÜíeqTypes
        (‚â°#EQ {#APPLY (#CS name) n‚ÇÅ} refl (sym (snd (snd cp))) (sym (fst cp)))
        (‚â°#EQ {#APPLY (#CS name) n‚ÇÇ} refl (sym (snd (snd cp))) (sym (fst cp)))
        (eqTypesEQ‚Üê
          (eqTypesUniv w1 (suc i) i ‚â§-refl)
          (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (#NAT!‚ÜíU‚â° i) f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ n‚àà)
          (equalTypes‚ÜíequalInType-UNIV ‚â§-refl eqTypesTRUE)))

  aw2 : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!)
                              (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY (#[0]CS name) #[0]VAR)))
                              w' t t
                      ‚Üí SUMeq (equalInType (suc i) w' #NAT!)
                              (Œª a b ea ‚Üí equalInType (suc i) w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                              w' t t)
  aw2 w1 e1 (a1 , a2 , b1 , b2 , a‚àà , c‚ÇÅ , c‚ÇÇ , b‚àà) =
    a1 , a2 , b1 , b2 ,
    ‚ààNAT!-change-level i (suc i) a‚àà ,
    c‚ÇÅ , c‚ÇÇ ,
    ‚â°CTerm‚ÜíequalInType
      (sym (sub0-#Œ£choice-body‚â° a1 name ‚ÑÇ‚ÇÅ¬∑))
      (‚â°CTerm‚ÜíequalInType
         (sym (‚â°#EQ {#APPLY (#CS name) a1} refl (snd (snd cp)) (proj‚ÇÅ cp)))
         (equalInTypeEQ‚Üê {_} {_} {#APPLY (#CS name) a1} {#TRUE}
           (equalTypes‚ÜíequalInType-UNIV ‚â§-refl {!!})))
--}


¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Ñô : (i : ‚Ñï) ‚Üí Choice‚Ñô i CB ‚Üí (w : ùïé¬∑) (name : Name)
                         ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) (#CS name)
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n √ó inhType i w' (#APPLY (#CS name) n)))
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType (suc i) w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Ñô i cp w name f‚àà aw w1 e1 (t , inh) =
  lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
  where
    h0 : ‚ààType i w1 (#SUM #NAT! (#[0]APPLY (#[0]CS name) #[0]VAR)) t
    h0 = #Œ£choice‚Üí#Œ£choice‚Ñô i cp w1 name t (equalInType-mon f‚àà w1 e1) inh

    h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY (#[0]CS name) #[0]VAR))) w' t t)
    h1 = equalInType-SUM‚Üí {_} {_} {#NAT!} {#[0]APPLY (#[0]CS name) #[0]VAR} h0

    aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!)
                                 (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY (#[0]CS name) #[0]VAR)))
                                 w' t t
                         ‚Üí Lift (lsuc L) ‚ä•)
    aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) =
      lift (aw w2 (‚äë-trans¬∑ e1 e2) (a‚ÇÅ , equalInType-refl ea , b‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-#[0]APPLY (#CS name) a‚ÇÅ) (equalInType-refl eb)))


-- This assumption is only true about choice sequences and not about refences
-- It says that choices never change
immutableChoices : Set(lsuc(L))
immutableChoices =
    (w : ùïé¬∑) (name : Name) (n : ‚Ñï) (c : ‚ÑÇ¬∑)
  ‚Üí getChoice¬∑ n name w ‚â° just c
  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ n name w' ‚â° just c))


immutableChoices‚Üí : immutableChoices
                  ‚Üí (w : ùïé¬∑) (name : Name) (n : ‚Ñï) (r : Res)
                  ‚Üí compatible¬∑ name w r
                  ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ ‚ÑÇ¬∑ (Œª c ‚Üí ¬∑·µ£ r n c √ó ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ n name w'' ‚â° just c))))
immutableChoices‚Üí imut w name n r compat =
  Mod.‚àÄùïé-‚ñ°Func M aw (‚ñ°¬∑-choice¬∑ w name n r compat)
    where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift (lsuc L) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ n name w'' ‚â° just t √ó ¬∑·µ£ r n t)))
                       ‚Üí Œ£ ‚ÑÇ¬∑ (Œª c ‚Üí ¬∑·µ£ r n c √ó ‚àÄùïé w' (Œª w'' _ ‚Üí Lift (lsuc L) (getChoice¬∑ n name w'' ‚â° just c))))
    aw w1 e1 h = fst q , snd (snd q) , imut w1 name n (proj‚ÇÅ q) (fst (snd q))
      where
      q : Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ n name w1 ‚â° just t √ó ¬∑·µ£ r n t)
      q = lower (h w1 (‚äë-refl¬∑ w1))


-- A stronger version than the one in barContP7
equalInType-#‚áõ-rev : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                      ‚Üí U #‚áõ T at w
                      ‚Üí equalInType i w T a b
                      ‚Üí equalInType i w U a b
equalInType-#‚áõ-rev {i} {w} {T} {U} {a} {b} comp e =
  TSext-equalTypes-equalInType
    i w T U a b
    (equalTypes-#‚áõ-left-right-rev {i} {w} {T} {T} {U} {T} (#‚áõ-refl w T) comp (fst e))
    e

#‚áõ-vals-det‚Üí : {w : ùïé¬∑} {a b c : CTerm}
             ‚Üí #isValue b
             ‚Üí #isValue c
             ‚Üí a #‚áõ b at w
             ‚Üí a #‚áõ c at w
             ‚Üí b #‚áõ c at w
#‚áõ-vals-det‚Üí {w} {a} {b} {c} isvb isvc compb compc
  rewrite #‚áõ-val-det {w} {a} {b} {c} isvb isvc compb compc
  = #‚áõ-refl w c


abstract
  equalTypes-#‚áõ-left-val : {i : ‚Ñï} {w : ùïé¬∑} {a b c : CTerm}
                         ‚Üí a #‚áõ b at w
                         ‚Üí #isValue b
                         ‚Üí equalTypes i w a c
                         ‚Üí equalTypes i w b c
  equalTypes-#‚áõ-left-val {i} {w} {a} {b} {c} comp isv eqt = concl b comp isv
    where
      ind : {u : ‚Ñï} {w : ùïé¬∑} {a c : CTerm} (eqt : equalTypes u w a c)
            ‚Üí ({u' : ‚Ñï} {w' : ùïé¬∑} {a' c' : CTerm} (eqt' : equalTypes u' w' a' c') ‚Üí <Type {‚Ñï‚Üíùïå u'} eqt' {‚Ñï‚Üíùïå u} eqt
                ‚Üí (b' : CTerm) ‚Üí a' #‚áõ b' at w' ‚Üí #isValue b' ‚Üí equalTypes u' w' b' c')
            ‚Üí (b : CTerm) ‚Üí a #‚áõ b at w ‚Üí #isValue b ‚Üí equalTypes u w b c
      ind {u} {w} {a} {c} (EQTQNAT x x‚ÇÅ) ind b comp isv =
        EQTQNAT (#‚áõ-vals-det‚Üí {_} {a} {b} {#QNAT} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) ind b comp isv =
        EQTLT a1 a2 b1 b2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#LT a1 b1} isv tt comp x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
      ind {u} {w} {a} {c} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) ind b comp isv =
        EQTQLT a1 a2 b1 b2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#QLT a1 b1} isv tt comp x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
      ind {u} {w} {a} {c} (EQTFREE x x‚ÇÅ) ind b comp isv =
        EQTFREE (#‚áõ-vals-det‚Üí {_} {a} {b} {#FREE} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind b comp isv =
        EQTPI A1 B1 A2 B2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#PI A1 B1} isv tt comp x) x‚ÇÅ eqta eqtb exta extb
      ind {u} {w} {a} {c} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind b comp isv =
        EQTSUM A1 B1 A2 B2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#SUM A1 B1} isv tt comp x) x‚ÇÅ eqta eqtb exta extb
      ind {u} {w} {a} {c} (EQTW A1 B1 C1 A2 B2 C2 x x‚ÇÅ eqta eqtb eqtc exta extb extc) ind b comp isv =
        EQTW A1 B1 C1 A2 B2 C2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#WT A1 B1 C1} isv tt comp x) x‚ÇÅ eqta eqtb eqtc exta extb extc
      ind {u} {w} {a} {c} (EQTM A1 B1 C1 A2 B2 C2 x x‚ÇÅ eqta eqtb eqtc exta extb extc) ind b comp isv =
        EQTM A1 B1 C1 A2 B2 C2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#MT A1 B1 C1} isv tt comp x) x‚ÇÅ eqta eqtb eqtc exta extb extc
      ind {u} {w} {a} {c} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind b comp isv =
        EQTSET A1 B1 A2 B2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#SET A1 B1} isv tt comp x) x‚ÇÅ eqta eqtb exta extb
      ind {u} {w} {a} {c} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) ind b comp isv =
        EQTISECT A1 B1 A2 B2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#ISECT A1 B1} isv tt comp x) x‚ÇÅ eqtA eqtB exta extb
      ind {u} {w} {a} {c} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) ind b comp isv =
        EQTTUNION A1 B1 A2 B2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#TUNION A1 B1} isv tt comp x) x‚ÇÅ eqta eqtb exta extb
      ind {u} {w} {a} {c} (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2) ind b comp isv =
        EQTEQ a1 b1 a2 b2 A B (#‚áõ-vals-det‚Üí {_} {a} {b} {#EQ a1 a2 A} isv tt comp x) x‚ÇÅ eqtA exta eqt1 eqt2
      ind {u} {w} {a} {c} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) ind b comp isv =
        EQTUNION A1 B1 A2 B2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#UNION A1 B1} isv tt comp x) x‚ÇÅ eqtA eqtB exta extb
      ind {u} {w} {a} {c} (EQTNOWRITE x x‚ÇÅ) ind b comp isv =
        EQTNOWRITE (#‚áõ-vals-det‚Üí {_} {a} {b} {#NOWRITE} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTNOREAD x x‚ÇÅ) ind b comp isv =
        EQTNOREAD (#‚áõ-vals-det‚Üí {_} {a} {b} {#NOREAD} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) ind b comp isv =
        EQTSUBSING A1 A2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#SUBSING A1} isv tt comp x) x‚ÇÅ eqtA exta
      ind {u} {w} {a} {c} (EQTPURE x x‚ÇÅ) ind b comp isv =
        EQTPURE (#‚áõ-vals-det‚Üí {_} {a} {b} {#PURE} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTNOSEQ x x‚ÇÅ) ind b comp isv =
        EQTNOSEQ (#‚áõ-vals-det‚Üí {_} {a} {b} {#NOSEQ} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTNOENC x x‚ÇÅ) ind b comp isv =
        EQTNOENC (#‚áõ-vals-det‚Üí {_} {a} {b} {#NOENC} isv tt comp x) x‚ÇÅ
      ind {u} {w} {a} {c} (EQTTERM t1 t2 x x‚ÇÅ x‚ÇÇ) ind b comp isv =
        EQTTERM t1 t2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#TERM t1} isv tt comp x) x‚ÇÅ x‚ÇÇ
      ind {u} {w} {a} {c} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) ind b comp isv =
        EQFFDEFS A1 A2 x1 x2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#FFDEFS A1 x1} isv tt comp x) x‚ÇÅ eqtA exta eqx
      ind {u} {w} {a} {c} (EQTUNIV i‚ÇÅ p x x‚ÇÅ) ind b comp isv =
        EQTUNIV i‚ÇÅ p (#‚áõ-vals-det‚Üí {_} {a} {b} {#UNIV i‚ÇÅ} isv tt comp x) x‚ÇÅ
--      ind {u} {w} {a} {c} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) ind b comp isv =
--        EQTLIFT A1 A2 (#‚áõ-vals-det‚Üí {_} {a} {b} {#LIFT A1} isv tt comp x) x‚ÇÅ eqtA exta
      ind {u} {w} {a} {c} (EQTBAR x) ind b comp isv =
        EQTBAR (‚àÄùïé-‚ñ°at W M x (Œª w' e' z at ‚Üí ind {u} {w'} {a} {c} z (<Type1 z (EQTBAR x) (<TypeBAR (‚Ñï‚Üíùïå u) w a c x w' e' z at)) b (‚àÄùïé-mon e' comp) isv))

      concl : (b : CTerm) ‚Üí a #‚áõ b at w ‚Üí #isValue b ‚Üí equalTypes i w b c
      concl b comp isv =
        equalTypes-ind
          (Œª {i} {w} {a} {c} eqt ‚Üí (b : CTerm) ‚Üí a #‚áõ b at w ‚Üí #isValue b ‚Üí equalTypes i w b c)
          ind eqt b comp isv


equalTypes-#‚áõ-left-right-val : {i : ‚Ñï} {w : ùïé¬∑} {a b c d : CTerm}
                             ‚Üí a #‚áõ b at w
                             ‚Üí d #‚áõ c at w
                             ‚Üí #isValue b
                             ‚Üí #isValue c
                             ‚Üí equalTypes i w a d
                             ‚Üí equalTypes i w b c
equalTypes-#‚áõ-left-right-val {i} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ isvb isvc eqt =
  equalTypes-#‚áõ-left-val c‚ÇÅ isvb (TEQsym-equalTypes i w _ _ (equalTypes-#‚áõ-left-val c‚ÇÇ isvc (TEQsym-equalTypes i w _ _ eqt)))


equalInType-#‚áõ-val : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                   ‚Üí T #‚áõ U at w
                   ‚Üí #isValue U
                   ‚Üí equalInType i w T a b
                   ‚Üí equalInType i w U a b
equalInType-#‚áõ-val {i} {w} {T} {U} {a} {b} comp isv e =
  TSext-equalTypes-equalInType
    i w T U a b
    (TEQsym-equalTypes i w _ _ (equalTypes-#‚áõ-left-val comp isv (fst e)))
    e


getC-True‚Üí‚ààAPPLY : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) (name : Name) (n : CTerm)
                 ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí Lift (lsuc L) (getC k name w' ‚â° just #TRUE))
                 ‚Üí n #‚áõ! #NUM k at w
                 ‚Üí equalInType i w (#APPLY (#CS name) n) #AX #AX
getC-True‚Üí‚ààAPPLY i w k name n aw comp =
  equalInType-#‚áõ-rev
    {i} {w} {#TRUE} {#APPLY (#CS name) n} {#AX} {#AX}
    (‚áõ-trans (#‚áõ-APPLY-CS {_} {n} {#NUM k} name (#‚áõ!‚Üí#‚áõ {_} {n} {#NUM k} comp)) comp')
    (‚ÜíequalInType-TRUE i)
  where
  comp' : #APPLY (#CS name) (#NUM k) #‚áõ #TRUE at w
  comp' w1 e1 = lift (1 , c)
    where
    c : stepsT 1 (APPLY (CS name) (NUM k)) w1 ‚â° TRUE
    c rewrite lower (aw w1 e1) = refl


getC-False‚Üí‚ààAPPLY : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) (name : Name) (n a b : CTerm)
                  ‚Üí ‚àÄùïé w (Œª w' e' ‚Üí Lift (lsuc L) (getC k name w' ‚â° just #FALSE))
                  ‚Üí n #‚áõ! #NUM k at w
                  ‚Üí equalInType i w (#APPLY (#CS name) n) a b
                  ‚Üí ‚ä•
getC-False‚Üí‚ààAPPLY i w k name n a b aw comp a‚àà =
  ¬¨equalInType-FALSE a‚àà'
  where
  comp' : #APPLY (#CS name) (#NUM k) #‚áõ #FALSE at w
  comp' w1 e1 = lift (1 , c)
    where
    c : stepsT 1 (APPLY (CS name) (NUM k)) w1 ‚â° FALSE
    c rewrite lower (aw w1 e1) = refl

  a‚àà' : equalInType i w #FALSE a b
  a‚àà' = equalInType-#‚áõ-val
          {i} {w} {#APPLY (#CS name) n} {#FALSE} {a} {b}
          (‚áõ-trans (#‚áõ-APPLY-CS {_} {n} {#NUM k} name (#‚áõ!‚Üí#‚áõ {_} {n} {#NUM k} comp)) comp')
          tt a‚àà


inhType-DEC‚Ñï : (immut : immutableChoices) (i : ‚Ñï) (cp : Choice‚Ñô i CB) (w : ùïé¬∑) (name : Name)
             ‚Üí compatible¬∑ name w Res‚ÑÇ
             ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) (#CS name)
             ‚Üí inhType i w (#DEC‚Ñï (#CS name))
inhType-DEC‚Ñï immut i cp w name compat f‚àà =
  #lamAX ,
  equalInType-PI
    {_} {_} {#NAT!} {#[0]OR (#[0]APPLY ‚åû f ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû f ‚åü #[0]VAR))}
    (Œª w' _ ‚Üí isTypeNAT!)
    (Œª w1 e1 n‚ÇÅ n‚ÇÇ n‚àà ‚Üí ‚ÜíequalTypes-#DEC‚Ñï-body (equalInType-mon f‚àà w1 e1) n‚àà)
    aw
    where
    f : CTerm
    f = #CS name

    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]OR (#[0]APPLY ‚åû f ‚åü #[0]VAR) (#[0]NEG (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                    (#APPLY #lamAX a‚ÇÅ) (#APPLY #lamAX a‚ÇÇ))
    aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà rewrite sub0-DEC‚Ñï-body1 f n‚ÇÅ = c
      where
      c : equalInType i w1 (#OR (#APPLY f n‚ÇÅ) (#NEG (#APPLY f n‚ÇÅ))) (#APPLY #lamAX n‚ÇÅ) (#APPLY #lamAX n‚ÇÇ)
      c = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT!‚Üí i w1 n‚ÇÅ n‚ÇÇ n‚àà))
        where
        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ
                             ‚Üí equalInType i w' (#OR (#APPLY f n‚ÇÅ) (#NEG (#APPLY f n‚ÇÅ))) (#APPLY #lamAX n‚ÇÅ) (#APPLY #lamAX n‚ÇÇ))
        aw1 w2 e2 (n , c‚ÇÅ , c‚ÇÇ) =
          equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw2 (immutableChoices‚Üí immut w2 name n Res‚ÑÇ (‚äë-compatible¬∑ (‚äë-trans¬∑ e1 e2) compat)))
          where
          aw2 : ‚àÄùïé w2 (Œª w' e' ‚Üí Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí ¬∑·µ£ Res‚ÑÇ n t √ó ‚àÄùïé w' (Œª w'' _ ‚Üí Lift (lsuc L) (getChoice¬∑ n name w'' ‚â° just t)))
                               ‚Üí equalInType i w' (#OR (#APPLY f n‚ÇÅ) (#NEG (#APPLY f n‚ÇÅ))) (#APPLY #lamAX n‚ÇÅ) (#APPLY #lamAX n‚ÇÇ))
          aw2 w3 e3 (c , sat , h) with sat
          ... | inj‚ÇÅ z rewrite z = -- False case
            ‚ÜíequalInTypeOR·µ£
              #AX
              (‚ÜíequalTypes-#DEC‚Ñï-body‚Çó
                (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))
                (equalInType-mon (equalInType-refl n‚àà) w3 (‚äë-trans¬∑ e2 e3)))
              (equalInType-NEG
                (‚ÜíequalTypes-#DEC‚Ñï-body‚Çó
                  (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))
                  (equalInType-mon (equalInType-refl n‚àà) w3 (‚äë-trans¬∑ e2 e3)))
                aw3)
            where
            h' : ‚àÄùïé w3 (Œª w' e' ‚Üí Lift (lsuc L) (getC n name w' ‚â° just #FALSE))
            h' w4 e4 rewrite lower (h w4 e4) | fst (snd cp) = lift refl

            aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#APPLY f n‚ÇÅ) a‚ÇÅ a‚ÇÇ)
            aw3 w4 e4 a‚ÇÅ a‚ÇÇ a‚àà = getC-False‚Üí‚ààAPPLY i w4 n name n‚ÇÅ a‚ÇÅ a‚ÇÇ (‚àÄùïé-mon e4 h') (‚àÄùïé-mon (‚äë-trans¬∑ e3 e4) c‚ÇÅ) a‚àà --(equalInType-LIFT‚Üí i w4 (#APPLY f n‚ÇÅ) a‚ÇÅ a‚ÇÇ a‚àà)
          ... | inj‚ÇÇ z rewrite z = -- True case
            ‚ÜíequalInTypeOR‚Çó
              #AX
              (getC-True‚Üí‚ààAPPLY i w3 n name n‚ÇÅ h' (‚àÄùïé-mon e3 c‚ÇÅ)) --(equalInType-LIFT‚Üê i w3 (#APPLY f n‚ÇÅ) #AX #AX (getC-True‚Üí‚ààAPPLY i w3 n name n‚ÇÅ h' (‚àÄùïé-mon e3 c‚ÇÅ)))
              (‚ÜíequalTypes-#DEC‚Ñï-body·µ£ (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon (equalInType-refl n‚àà) w3 (‚äë-trans¬∑ e2 e3)))
            where
            h' : ‚àÄùïé w3 (Œª w' e' ‚Üí Lift (lsuc L) (getC n name w' ‚â° just #TRUE))
            h' w4 e4 rewrite lower (h w4 e4) | snd (snd cp) = lift refl


Œ£inhType‚ÜíinhType-choice : (i : ‚Ñï) (w : ùïé¬∑) (f : CTerm)
                        ‚Üí ‚ààType (suc i) w (#NAT!‚ÜíU i) f
                        ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w #NAT! n √ó inhType i w (#APPLY f n))
                        ‚Üí inhType i w (#Œ£‚Ñô f)
Œ£inhType‚ÜíinhType-choice i w f f‚àà (n , n‚àà , (t , inh)) =
  #PAIR n t ,
  equalInType-SUM
    (Œª w' _ ‚Üí isTypeNAT!)
    (Œª w1 e1 n‚ÇÅ n‚ÇÇ n‚àà ‚Üí equalTypes-#Œ£‚Ñô-body (equalInType-mon f‚àà w1 e1) n‚àà)
    (Mod.‚àÄùïé-‚ñ° M aw)
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!)
                            (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY ‚åû f ‚åü #[0]VAR)))
                            w' (#PAIR n t) (#PAIR n t))
  aw w1 e1 =
    n , n , t , t , equalInType-refl (equalInType-mon n‚àà w1 e1) ,
    ‚áì-refl ‚åú #PAIR n t ‚åù w1 , --#‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
    ‚áì-refl ‚åú #PAIR n t ‚åù w1 , --#‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
    ‚â°CTerm‚ÜíequalInType (sym (sub0-#[0]APPLY f n)) (equalInType-mon inh w1 e1)


getChoice‚ÜígetC : {n : ‚Ñï} {cs : Name} {w : ùïé¬∑} (c : ‚ÑÇ¬∑)
               ‚Üí getChoice¬∑ n cs w ‚â° just c
               ‚Üí getC n cs w ‚â° just (‚ÑÇ‚ÜíC¬∑ c)
getChoice‚ÜígetC {n} {cs} {w} c h rewrite h = refl


¬¨equalInType-#Œ£choice‚Ñô : (immut : immutableChoices) (i : ‚Ñï) (cp : Choice‚Ñô i CB) (w : ùïé¬∑) (c : Name)
                       ‚Üí only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) c w
                       ‚Üí compatible¬∑ c w Res‚ÑÇ
                       ‚Üí freezable¬∑ c w
                       ‚Üí ¬¨ inhType i w (#Œ£choice‚Ñô c)
¬¨equalInType-#Œ£choice‚Ñô immut i cp w c oc comp fb (x , eqi) =
  getC-False‚Üí‚ààAPPLY i w3 m c a‚ÇÅ b‚ÇÅ b‚ÇÇ gc3 (‚àÄùïé-mon e3 ca‚ÇÅ) eb3
  where
    h1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (#APPLY (#CS c) a)) w' x x)
    h1 = Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SUM‚Üí {i} {w} {#NAT!} {#[0]APPLY ‚åû #CS c ‚åü #[0]VAR} eqi)
      where
      aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!)
                                 (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]APPLY ‚åû #CS c ‚åü #[0]VAR)))
                                 w' x x
                         ‚Üí SUMeq (equalInType i w' #NAT!)
                                 (Œª a b ea ‚Üí equalInType i w' (#APPLY (#CS c) a))
                                 w' x x)
      aw w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb)
        rewrite sub0-#[0]APPLY (#CS c) a‚ÇÅ
        = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb

    -- 1st jump to bar
    w1 : ùïé¬∑
    w1 = fst (followChoice¬∑ c h1 oc comp fb)

    e1 : w ‚äë¬∑ w1
    e1 = fst (snd (followChoice¬∑ c h1 oc comp fb))

    oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) c w1
    oc1 = fst (snd (snd (followChoice¬∑ c h1 oc comp fb)))

    comp1 : compatible¬∑ c w1 Res‚ÑÇ
    comp1 = fst (snd (snd (snd (followChoice¬∑ c h1 oc comp fb))))

    fb1 : freezable¬∑ c w1
    fb1 = fst (snd (snd (snd (snd (followChoice¬∑ c h1 oc comp fb)))))

    h2 : SUMeq (equalInType i w1 #NAT!) (Œª a b ea ‚Üí equalInType i w1 (#APPLY (#CS c) a)) w1 x x
    h2 = snd (snd (snd (snd (snd (followChoice¬∑ c h1 oc comp fb)))))

    a‚ÇÅ : CTerm
    a‚ÇÅ = fst h2

    a‚ÇÇ : CTerm
    a‚ÇÇ = fst (snd h2)

    b‚ÇÅ : CTerm
    b‚ÇÅ = fst (snd (snd h2))

    b‚ÇÇ : CTerm
    b‚ÇÇ = fst (snd (snd (snd h2)))

    ea1 : equalInType i w1 #NAT! a‚ÇÅ a‚ÇÇ
    ea1 = fst (snd (snd (snd (snd h2))))

    eb1 : equalInType i w1 (#APPLY (#CS c) a‚ÇÅ) b‚ÇÅ b‚ÇÇ
    eb1 = snd (snd (snd (snd (snd (snd (snd h2))))))

    -- 2nd jump to bar
    ea2 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí #‚áõ!same‚Ñï {--#strongMonEq--} w' a‚ÇÅ a‚ÇÇ)
    ea2 = equalInType-NAT!‚Üí i w1 a‚ÇÅ a‚ÇÇ ea1

    w2 : ùïé¬∑
    w2 = fst (followChoice¬∑ c ea2 oc1 comp1 fb1)

    e2 : w1 ‚äë¬∑ w2
    e2 = fst (snd (followChoice¬∑ c ea2 oc1 comp1 fb1))

    oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) c w2
    oc2 = fst (snd (snd (followChoice¬∑ c ea2 oc1 comp1 fb1)))

    comp2 : compatible¬∑ c w2 Res‚ÑÇ
    comp2 = fst (snd (snd (snd (followChoice¬∑ c ea2 oc1 comp1 fb1))))

    fb2 : freezable¬∑ c w2
    fb2 = fst (snd (snd (snd (snd (followChoice¬∑ c ea2 oc1 comp1 fb1)))))

    ea3 : #‚áõ!same‚Ñï {--#strongMonEq--} w2 a‚ÇÅ a‚ÇÇ
    ea3 = snd (snd (snd (snd (snd (followChoice¬∑ c ea2 oc1 comp1 fb1)))))

    m : ‚Ñï
    m = fst ea3

    ca‚ÇÅ : a‚ÇÅ #‚áõ! #NUM m at w2
    ca‚ÇÅ = fst (snd ea3)

    eb2 : equalInType i w2 (#APPLY (#CS c) a‚ÇÅ) b‚ÇÅ b‚ÇÇ
    eb2 = equalInType-mon eb1 w2 e2

    gc : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí ¬∑·µ£ Res‚ÑÇ m t √ó ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ m c w'' ‚â° just t))))
    gc = immutableChoices‚Üí immut w2 c m Res‚ÑÇ comp2

    -- 4th jump to bar
    w3 : ùïé¬∑
    w3 = fst (followChoice¬∑ c gc oc2 comp2 fb2)

    e3 : w2 ‚äë¬∑ w3
    e3 = fst (snd (followChoice¬∑ c gc oc2 comp2 fb2))

    oc3 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) c w3
    oc3 = fst (snd (snd (followChoice¬∑ c gc oc2 comp2 fb2)))

    comp3 : compatible¬∑ c w3 Res‚ÑÇ
    comp3 = fst (snd (snd (snd (followChoice¬∑ c gc oc2 comp2 fb2))))

    fb3 : freezable¬∑ c w3
    fb3 = fst (snd (snd (snd (snd (followChoice¬∑ c gc oc2 comp2 fb2)))))

    gc1 : Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí ¬∑·µ£ Res‚ÑÇ m t √ó ‚àÄùïé w3 (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ m c w'' ‚â° just t)))
    gc1 = snd (snd (snd (snd (snd (followChoice¬∑ c gc oc2 comp2 fb2)))))

    eb3 : equalInType i w3 (#APPLY (#CS c) a‚ÇÅ) b‚ÇÅ b‚ÇÇ
    eb3 = equalInType-mon eb2 w3 e3

    gc2 : ‚àÄùïé w3 (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ m c w'' ‚â° just ‚ÑÇ‚ÇÄ¬∑))
    gc2 w4 e4 = lift (trans (lower (snd (snd gc1) w4 e4)) (‚â°just (oc3 m (fst gc1) (lower (snd (snd gc1) w3 (‚äë-refl¬∑ w3))))))

    gc3 : ‚àÄùïé w3 (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (getC m c w'' ‚â° just #FALSE))
    gc3 w4 e4 = lift (trans (getChoice‚ÜígetC ‚ÑÇ‚ÇÄ¬∑ (lower (gc2 w4 e4))) (‚â°just (fst (snd cp))))


-- follows ¬¨MP‚ÇÜ in not_mp
¬¨MP‚Ñô : (i : ‚Ñï) ‚Üí Choice‚Ñô i CB ‚Üí immutableChoices ‚Üí alwaysFreezable F
     ‚Üí (w : ùïé¬∑) ‚Üí ‚ààType (suc i) w (#NEG (#MP‚Ñô i)) #lamAX
¬¨MP‚Ñô i cp immut af w = equalInType-NEG (isTypeMP‚Ñô w i) aw1
  where
  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí  (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType (suc i) w' (#MP‚Ñô i) a‚ÇÅ a‚ÇÇ)
  aw1 w1 e1 F G F‚àà = h8 h7
    where
    aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType (suc i) w' (#NAT!‚ÜíU i) f
                        ‚Üí inhType i w' (#DEC‚Ñï f)
                        ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                                           √ó inhType i w' (#APPLY f n)))
                                                        ‚Üí ‚ä•)
                                        ‚Üí ‚ä•)
                        ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                          √ó inhType i w' (#APPLY f n))))
    aw2 = ‚àà#MP‚Ñô‚Üí i w1 F G F‚àà

    name : Name
    name = newChoice¬∑ w1

    w2 : ùïé¬∑
    w2 = startNewChoice Res‚ÑÇ w1

    e2 : w1 ‚äë¬∑ w2
    e2 = startNewChoice‚äè Res‚ÑÇ w1

    oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
    oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

    comp1 : compatible¬∑ name w2 Res‚ÑÇ
    comp1 = startNewChoiceCompatible Res‚ÑÇ w1

    fb1 : freezable¬∑ name w2
    fb1 = freezableStart¬∑ Res‚ÑÇ w1

    f : CTerm
    f = #CS name

    eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType (suc i) w' (#UNIV i) (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
    eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst cp) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! (suc i) w' m))

    eqf1 : ‚ààType (suc i) w2 (#NAT!‚ÜíU i) f
    eqf1 = ‚â°CTerm‚ÜíequalInType
             (sym (#NAT!‚ÜíU‚â° i))
             (‚ÜíequalInType-CS-NAT!‚ÜíT (eqTypesUniv w2 (suc i) i ‚â§-refl) (equalTerms-pres-#‚áõ-left-rev-UNIV i) eqf2)

    h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                          √ó inhType i w' (#APPLY f n)))
                                       ‚Üí ‚ä•)
                       ‚Üí ‚ä•)
    h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice (suc i) w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (af name w3) z
      where
      z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType (suc i) w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
      z = ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Ñô i cp w3 name (equalInType-mon eqf1 w3 e3) aw

    h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n √ó inhType i w' (#APPLY f n)))
    h4 = aw2 w2 e2 f eqf1 (inhType-DEC‚Ñï immut i cp w2 name comp1 eqf1) h3

    -- We follow the choice
    w3 : ùïé¬∑
    w3 = fst (followChoice¬∑ name h4 oc1 comp1 fb1)

    e3 : w2 ‚äë¬∑ w3
    e3 = fst (snd (followChoice¬∑ name h4 oc1 comp1 fb1))

    oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
    oc2 = fst (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))

    comp2 : compatible¬∑ name w3 Res‚ÑÇ
    comp2 = fst (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1))))

    fb2 : freezable¬∑ name w3
    fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

    h6 : Œ£ CTerm (Œª n ‚Üí ‚ààType i w3 #NAT! n √ó inhType i w3 (#APPLY f n))
    h6 = snd (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

    h7 : inhType i w3 (#Œ£choice‚Ñô name)
    h7 = Œ£inhType‚ÜíinhType-choice i w3 f (equalInType-mon eqf1 w3 e3) h6

    h8 : ¬¨ inhType i w3 (#Œ£choice‚Ñô name)
    h8 = ¬¨equalInType-#Œ£choice‚Ñô immut i cp w3 name oc2 comp2 fb2


#¬¨Enc-APPLY-NUM : (f : CTerm) (n : ‚Ñï)
                ‚Üí #¬¨Enc f
                ‚Üí #¬¨Enc (#APPLY f (#NUM n))
#¬¨Enc-APPLY-NUM f n ne rewrite ne = refl


-- We use this when w2 ‚äë¬∑ w1
#¬¨enc‚ÜíinhType-ASSERT‚ÇÑ : (gcp : getChoice‚Ñô) (n : ‚Ñï) (w1 w2 : ùïé¬∑) (t : CTerm)
                         ‚Üí #¬¨Enc t
                         ‚Üí ‚ààType n w2 #BOOL‚ÇÄ! t
                         ‚Üí (Œ£ CTerm (Œª x ‚Üí t #‚áõ! #INL x at w1))
                         ‚Üí inhType n w2 (#ASSERT‚ÇÑ t)
#¬¨enc‚ÜíinhType-ASSERT‚ÇÑ gcp n w1 w2 t nwt t‚àà (x , cx) =
  #AX ,
  ‚ÜíequalInType-ASSERT‚ÇÑ n w2 t #AX #AX (‚ÜíequalInType-BOOL‚ÇÄ! n w2 t #BTRUE (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-BOOL‚ÇÄ!‚Üí n w2 t t t‚àà)))
  where
    aw : ‚àÄùïé w2 (Œª w' _ ‚Üí #strongBool! w' t t ‚Üí #strongBool! w' t #BTRUE)
    aw w3 e3 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x‚ÇÅ , #AX , inj‚ÇÅ (c‚ÇÅ , #‚áõ!-refl {w3} {#BTRUE})
    aw w3 e3 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = ‚ä•-elim (¬¨enc‚Üí‚áõ!INL-INR gcp w1 w3 ‚åú t ‚åù ‚åú x ‚åù ‚åú x‚ÇÅ ‚åù nwt cx c‚ÇÅ)


-- Copied over from MPp‚ÇÜ-inh in mpp.lagda
-- We addition we want to exclude all syntactic writes (a new types modality?)
MP‚Çá-inh : (gcp : getChoice‚Ñô) (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MP‚Çá #lam2AX
MP‚Çá-inh gcp n w =
  equalInType-PI
    {n} {w} {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí eqTypesTNOENC‚Üê (isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n))
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÜ a‚ÇÅ))
        (equalInType-local (‚àÄùïé-‚ñ°Func2 awp (equalInTypeTNOENC‚Üí‚Çó eqa) (equalInTypeTNOENC‚Üí·µ£ eqa))) {--(equalInType-FUN
          (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqa)))
          (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqa)))
          aw3)--}
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!‚Çë a‚ÇÅ w'
                          ‚Üí #‚áõ!‚Çë a‚ÇÇ w'
                          ‚Üí equalInType n w' (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
      awp w1' e1' (x‚ÇÅ , comp‚ÇÅ , nex‚ÇÅ , isv‚ÇÅ) (x‚ÇÇ , comp‚ÇÇ , nex‚ÇÇ , isv‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun n w1' a‚ÇÅ a‚ÇÇ x‚ÇÅ x‚ÇÇ
          (equalInType-mon (equalInTypeTNOENC‚Üí eqa) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqx)))
             (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqx)))
             aw3)
        where
        eqx : equalInType n w1' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) x‚ÇÅ x‚ÇÇ
        eqx = equalInType-#‚áõ-LR comp‚ÇÅ comp‚ÇÇ (equalInType-mon eqa w1' e1')

        aw3 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt‚ÇÉ x‚ÇÅ) a‚ÇÉ a‚ÇÑ
                            ‚Üí equalInType n w' (#MP-right-qt‚ÇÉ x‚ÇÅ) (#APPLY (#APPLY #lam2AX x‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX x‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                                                (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      ‚áì-refl ‚åú #PAIR (#NUM k) t ‚åù w4 , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      ‚áì-refl ‚åú #PAIR (#NUM k) t ‚åù w4 , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY (#NUM k) x‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÑ-APPLY a x‚ÇÅ | sub0-ASSERT‚ÇÑ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL‚ÇÄ! (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-refl (equalInTypeTNOENC‚Üí eqx))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ a)) (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ b))
                        aw5' = equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-#MP-left-qt‚ÇÉ‚Üí
                                       n w2 x‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInTypeTNOENC‚Üí eqx)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-BOOL‚ÇÄ!‚Üí
                                                               n w5 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE
                                                               (equalInType-ASSERT‚ÇÑ‚Üí
                                                                 n w5 (#APPLY x‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh'))))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÑ-APPLY
                                      n w5 x‚ÇÅ n‚ÇÅ k
                                      (equalInType-mon (equalInType-refl (equalInTypeTNOENC‚Üí eqx)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))
                                      k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨enc‚ÜíinhType-ASSERT‚ÇÑ
                                                            gcp n w6 w3 (#APPLY x‚ÇÅ (#NUM k))
                                                            (#¬¨Enc-APPLY-NUM x‚ÇÅ k nex‚ÇÅ)
                                                            (equalInType-FUN‚Üí
                                                               (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-refl (equalInTypeTNOENC‚Üí eqx)))
                                                               w3 (‚äë-trans¬∑ e2 e3) (#NUM k) (#NUM k)
                                                               (NUM-equalInType-NAT! n w3 k))
                                                            (strongBool!-BTRUE‚Üí w6 (#APPLY x‚ÇÅ (#NUM k)) wbe)))

\end{code}
