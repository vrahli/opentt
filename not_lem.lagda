\begin{code}
{-# OPTIONS --rewriting #-}

--open import bar
--module not_lem (bar : Bar) where

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import choiceExt
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar


module not_lem {L : Level} (W : PossibleWorlds {L})
               (C : Choice) (M : Compatible W C) (P : Progress {L} W C M)
               (G : GetChoice {L} W C M) (X : ChoiceExt {L} C) (N : NewChoice {L} W C M G)
               (F : Freeze {L} W C M P G N)
               (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
               (CB : ChoiceBar W C M P G X N F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(M)
open import getChoiceDef(W)(C)(M)(G)
open import newChoiceDef(W)(C)(M)(G)(N)
open import choiceExtDef(W)(C)(M)(G)(X)
open import freezeDef(W)(C)(M)(P)(G)(N)(F)
open import computation(W)(C)(M)(G)
open import bar(W)
open import barI(W)(C)(M)(P)
open import theory(W)(C)(M)(P)(G)(E)
open import props0(W)(C)(M)(P)(G)(E)
open import ind2(W)(C)(M)(P)(G)(E)

open import props1(W)(C)(M)(P)(G)(E)
open import props2(W)(C)(M)(P)(G)(E)
open import props3(W)(C)(M)(P)(G)(E)
open import lem_props(W)(C)(M)(P)(G)(X)(E)

open import choiceBarDef(W)(C)(M)(P)(G)(X)(N)(F)(E)(CB)

-- open import calculus
-- open import world
-- open import theory (bar)
-- open import props0 (bar)
-- open import ind2 (bar) -- this is the one where a function is not recognized as terminating, but does not break the bar abstraction
-- open import type_sys_props_nat (bar)
-- open import type_sys_props_qnat (bar)
-- open import type_sys_props_lt (bar)
-- open import type_sys_props_qlt (bar)
-- open import type_sys_props_free (bar)
-- open import type_sys_props_pi (bar)
-- open import type_sys_props_sum (bar)
-- open import type_sys_props_set (bar)
-- open import type_sys_props_eq (bar)
-- open import type_sys_props_union (bar)
-- open import type_sys_props_tsquash (bar)
-- open import type_sys_props_ffdefs (bar)
-- open import props1 (bar)
-- open import terms (bar)
\end{code}




\begin{code}[hide]
Œ£choice : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí Term
Œ£choice n k = SUM NAT (EQ (APPLY (CS n) (VAR 0)) (‚ÑÇ‚ÜíT k) type‚ÑÇ‚ÇÄ‚ÇÅ)



#Œ£choice : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí CTerm
#Œ£choice n k = ct (Œ£choice n k) c
  where
    c : # (Œ£choice n k)
    c rewrite #-type‚ÑÇ‚ÇÄ‚ÇÅ | #-‚ÑÇ‚ÜíT k = refl


#Œ£choice‚â° : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí #Œ£choice n k ‚â° #SUM #NAT (#[0]EQ (#[0]APPLY (#[0]CS n) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)
#Œ£choice‚â° n k = CTerm‚â° refl


sub0-#Œ£choice-body‚â° : (a : CTerm) (c : Name) (k : ‚ÑÇ¬∑)
                      ‚Üí sub0 a (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)
                         ‚â° #EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑
sub0-#Œ£choice-body‚â° a c k = CTerm‚â° (‚Üí‚â°EQ (‚Üí‚â°APPLY refl (shiftDownUp ‚åú a ‚åù 0))
                                          (subNotIn ‚åú a ‚åù _ (CTerm.closed (‚ÑÇ‚ÜíC¬∑ k)))
                                          (subNotIn ‚åú a ‚åù _ (CTerm.closed Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)))



-- A short name
Res‚ÑÇ : Res
Res‚ÑÇ = Res‚ÑÇ‚ÇÄ‚ÇÅ



sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚ÑÇ¬∑)
                            ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                            ‚Üí equalInType i w Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚ÑÇ‚ÜíC¬∑ k) (‚ÑÇ‚ÜíC¬∑ k)
sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w k (n , inj‚ÇÅ x) rewrite x = ‚ÑÇ‚ÇÄ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w
sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w k (n , inj‚ÇÇ y) rewrite y = ‚ÑÇ‚ÇÅ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w



comp-Res‚ÑÇ‚Üíinbar-weak‚ÑÇ‚ÇÄ‚ÇÅ : {c : Name} {w : ùïé¬∑} (n : ‚Ñï)
                           ‚Üí compatible¬∑ c w Res‚ÑÇ
                           ‚Üí inbar w (Œª w' _ ‚Üí weak‚ÑÇ‚ÇÄ‚ÇÅM w' (getT n c))
comp-Res‚ÑÇ‚Üíinbar-weak‚ÑÇ‚ÇÄ‚ÇÅ {c} {w} n comp = Bar.‚àÄùïé-inBarFunc barI aw j1
  where
    j1 : inbar w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ n c w'' ‚â° just t))))
    j1 = inbar-choice¬∑ w c n Res‚ÑÇ comp

    aw : ‚àÄùïé w (Œª w2 e2 ‚Üí ‚àÄùïé w2 (Œª w3 _ ‚Üí Lift (lsuc L) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ n c w3 ‚â° just t))) ‚Üí weak‚ÑÇ‚ÇÄ‚ÇÅM w2 (getT n c))
    aw w2 e2 h w3 e3 rewrite snd (lower (h w3 e3)) = lift (‚ÑÇ‚ÜíT t , refl , z st)
      where
        t : ‚ÑÇ¬∑
        t = fst (lower (h w3 e3))

        st : ¬∑·µ£ Res‚ÑÇ n t
        st = getChoiceCompatible¬∑ c Res‚ÑÇ w3 n t (‚äë-compatible¬∑ (‚äë-trans¬∑ e2 e3) comp) (snd (lower (h w3 e3)))

        z : (t ‚â° ‚ÑÇ‚ÇÄ¬∑ ‚äé t ‚â° ‚ÑÇ‚ÇÅ¬∑)
            ‚Üí (‚ÑÇ‚ÜíT (fst (lower (h w3 e3))) ‚áì T‚ÑÇ‚ÇÄ at w3
                ‚äé ‚ÑÇ‚ÜíT (fst (lower (h w3 e3))) ‚áì T‚ÑÇ‚ÇÅ at w3)
        z (inj‚ÇÅ x) rewrite x = inj‚ÇÅ (0 , refl)
        z (inj‚ÇÇ x) rewrite x = inj‚ÇÇ (0 , refl)



equalTypes-#Œ£choice-body : (i : ‚Ñï) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                           ‚Üí compatible¬∑ c w Res‚ÑÇ
                           ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                                           ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                                           ‚Üí equalTypes i w' (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
                                                              (#EQ (#APPLY (#CS c) a‚ÇÇ) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))
equalTypes-#Œ£choice-body i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea =
  eqTypesEQ‚Üê (Type‚ÑÇ‚ÇÄ‚ÇÅ-isType¬∑ i w') aw1 aw2
{--  eqTypesEQ‚Üê eqTypesQNAT aw1 aw2 --}
  where
--    j : inbar w' (Œª w' _ ‚Üí #strongMonEq w' a‚ÇÅ a‚ÇÇ)
--    j = equalInType-NAT‚Üí i w' a‚ÇÅ a‚ÇÇ ea

    aw1 : equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
    aw1 = equalInType-local (Bar.‚àÄùïé-inBarFunc barI aw1' (equalInType-NAT‚Üí i w' a‚ÇÅ a‚ÇÇ ea))
      where
        aw1' : ‚àÄùïé w' (Œª w'' e'' ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ ‚Üí equalInType i w'' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ))
        aw1' w1 e1 (n , c‚ÇÅ , c‚ÇÇ) = equalInType-#‚áõ-LR-rev (#‚áõ-APPLY-CS {w1} {a‚ÇÅ} {#NUM n} c c‚ÇÅ) (#‚áõ-APPLY-CS {w1} {a‚ÇÇ} {#NUM n} c c‚ÇÇ) eqi
          where
            j2 : inbar w1 (Œª w' _ ‚Üí weak‚ÑÇ‚ÇÄ‚ÇÅM w' (getT n c))
            j2 = comp-Res‚ÑÇ‚Üíinbar-weak‚ÑÇ‚ÇÄ‚ÇÅ n (‚äë-compatible¬∑ (‚äë-trans¬∑ e' e1) comp)

            eqi : ‚ààType i w1 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) (#NUM n))
            eqi = ‚Üí‚ààType‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i j2
            -- use choice-Type‚ÑÇ‚ÇÄ‚ÇÅ

 {--‚ÜíequalInType-QNAT i w' (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ) (Bar.inBar-idem barI (Bar.‚àÄùïé-inBarFunc barI aw11 j))
      where
        aw11 : ‚àÄùïé w' (Œª w'' e'' ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ
                                 ‚Üí inbar w'' (‚ÜëwPred' (Œª w''' e ‚Üí #weakMonEq w''' (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)) e''))
        aw11 w'' e'' (m , c‚ÇÅ , c‚ÇÇ) =
          inbar-wPred'-#weakMonEq w' w'' e'' (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
                                  (‚Üíinbar-#weakMonEq-APPLY-CS w'' a‚ÇÅ a‚ÇÇ m c c‚ÇÅ c‚ÇÇ (inbar-#weakMonEq-APPLY-CS i w'' c m (‚äë-compatible¬∑ (‚äë-trans¬∑ e' e'') comp)))--}

    aw2 : equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚ÑÇ‚ÜíC¬∑ k) (‚ÑÇ‚ÜíC¬∑ k)
    aw2 = sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w' k sat



equalTypes-#Œ£choice-body-sub0 : (i : ‚Ñï) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                                ‚Üí compatible¬∑ c w Res‚ÑÇ
                                ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                                ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                                                ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                                                ‚Üí equalTypes i w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                                                   (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
equalTypes-#Œ£choice-body-sub0 i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea rewrite sub0-#Œ£choice-body‚â° a‚ÇÅ c k | sub0-#Œ£choice-body‚â° a‚ÇÇ c k =
  equalTypes-#Œ£choice-body i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea



equalInType-#Œ£choice : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                       ‚Üí compatible¬∑ c w Res‚ÑÇ
                       ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                       ‚Üí equalInType n w (#UNIV i) (#Œ£choice c k) (#Œ£choice c k)
equalInType-#Œ£choice {n} {i} p w c k comp sat rewrite #Œ£choice‚â° c k =
  equalTypes‚ÜíequalInType-UNIV
    p
    (eqTypesSUM‚Üê (Œª w' e' ‚Üí eqTypesNAT) (equalTypes-#Œ£choice-body-sub0 i w c k comp sat))



getChoice‚ÜíequalInType-#Œ£choice-aux2 : {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {k : ‚ÑÇ¬∑} (i : ‚Ñï)
                                      ‚Üí ¬∑·µ£ Res‚ÑÇ n k
                                       ‚Üí #APPLY (#CS name) (#NUM n) #‚áõ ‚ÑÇ‚ÜíC¬∑ k at w
                                       ‚Üí equalInType
                                           i w
                                           (#EQ (#APPLY (#CS name) (#NUM n)) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
                                           #AX #AX
getChoice‚ÜíequalInType-#Œ£choice-aux2 {n} {name} {w} {k} i sat g =
  equalInType-EQ (Type‚ÑÇ‚ÇÄ‚ÇÅ-isType¬∑ i w) (Bar.‚àÄùïé-inBar barI aw)
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí EQeq (#APPLY (#CS name) (#NUM n)) (‚ÑÇ‚ÜíC¬∑ k) (equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) w' #AX #AX)
    aw w' e = #compAllRefl #AX w' ,
              #compAllRefl #AX w' ,
              equalInType-#‚áõ-left-rev (‚àÄùïé-mon e g) (sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w' k (0 , sat)) --‚ÜíequalInType-QNAT i w' (#APPLY (#CS name) (#NUM n)) (‚ÑÇ‚ÜíC¬∑ k) (Bar.‚àÄùïé-inBar barI aw')
      where
--         aw' : ‚àÄùïé w' (Œª w'' _ ‚Üí #weakMonEq w'' (#APPLY (#CS name) (#NUM n)) (‚ÑÇ‚ÜíC¬∑ k))
--         aw' w2 e2 w3 e3 = lift (k , step-‚áì-trans (lower (g w3 (‚äë-trans¬∑ e (‚äë-trans¬∑ e2 e3)))) (‚áì-refl (NUM k) w3) , ‚áì-refl (NUM k) w3)


getChoice‚ÜíequalInType-#Œ£choice-aux1 : {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {k : ‚ÑÇ¬∑} (i : ‚Ñï)
                                       ‚Üí ¬∑·µ£ Res‚ÑÇ n k
                                       ‚Üí #APPLY (#CS name) (#NUM n) #‚áõ ‚ÑÇ‚ÜíC¬∑ k at w
                                       ‚Üí equalInType
                                           i w
                                           (sub0 (#NUM n) (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           #AX #AX
getChoice‚ÜíequalInType-#Œ£choice-aux1 {n} {name} {w} {k} i sat g rewrite sub0-#Œ£choice-body‚â° (#NUM n) name k =
  getChoice‚ÜíequalInType-#Œ£choice-aux2 i sat g


getChoice‚ÜíequalInType-#Œ£choice-aux : {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {k : ‚ÑÇ¬∑} (i : ‚Ñï)
                                      ‚Üí compatible¬∑ name w Res‚ÑÇ
                                      ‚Üí ¬∑·µ£ Res‚ÑÇ n k
                                      ‚Üí #APPLY (#CS name) (#NUM n) #‚áõ ‚ÑÇ‚ÜíC¬∑ k at w
                                      ‚Üí equalInType
                                           i w
                                           (#SUM #NAT (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (#PAIR (#NUM n) #AX) (#PAIR (#NUM n) #AX)
getChoice‚ÜíequalInType-#Œ£choice-aux {n} {name} {w} {k} i comp sat g =
  equalInType-SUM
    {i} {w} {#NAT} {#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ}
    (eqTypes-mon (uni i) eqTypesNAT)
    (equalTypes-#Œ£choice-body-sub0 i w name k comp (0 , sat))
    j
  where
    j : inbar w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                 (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                 w'
                                 (#PAIR (#NUM n) #AX)
                                 (#PAIR (#NUM n) #AX))
    j = Bar.‚àÄùïé-inBar barI (Œª w1 e1 ‚Üí #NUM n , #NUM n , #AX , #AX ,
                                       NUM-equalInType-NAT i w1 n ,
                                       #compAllRefl (#PAIR (#NUM n) #AX) w1 ,
                                       #compAllRefl (#PAIR (#NUM n) #AX) w1 ,
                                       getChoice‚ÜíequalInType-#Œ£choice-aux1 i sat (‚àÄùïé-mon e1 g))
-- This last one is not true with references, but can be made true if we have a way to "freeze" a reference permanently,
-- and here 0 was "frozen"


getChoice‚ÜíequalInType-#Œ£choice : {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {k : ‚ÑÇ¬∑} (i : ‚Ñï)
                                  ‚Üí compatible¬∑ name w Res‚ÑÇ
                                  ‚Üí ¬∑·µ£ Res‚ÑÇ n k
                                  ‚Üí #APPLY (#CS name) (#NUM n) #‚áõ ‚ÑÇ‚ÜíC¬∑ k at w
                                  ‚Üí equalInType i w (#Œ£choice name k) (#PAIR (#NUM n) #AX) (#PAIR (#NUM n) #AX)
getChoice‚ÜíequalInType-#Œ£choice {n} {name} {w} {k} i comp sat g rewrite #Œ£choice‚â° name k =
  getChoice‚ÜíequalInType-#Œ£choice-aux i comp sat g



{--
steps-APPLY-cs-forward : (w : ùïé¬∑) (n m : ‚Ñï) (a b v : Term) (c : Name)
                         ‚Üí isValue v
                         ‚Üí steps n a w ‚â° b
                         ‚Üí steps m (APPLY (CS c) a) w ‚â° v
                         ‚Üí APPLY (CS c) b ‚áì v at w
steps-APPLY-cs-forward w 0 m a b v c isv c‚ÇÅ c‚ÇÇ rewrite c‚ÇÅ = m , c‚ÇÇ
steps-APPLY-cs-forward w (suc n) 0 a b v c isv c‚ÇÅ c‚ÇÇ rewrite (sym c‚ÇÇ) = {!!} --‚ä•-elim isv
steps-APPLY-cs-forward w (suc n) (suc m) a b v c isv c‚ÇÅ c‚ÇÇ with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p with is-NUM a
...                          | inj‚ÇÅ (k , q) rewrite q | sym (just-inj p) | stepsVal (NUM k) w n tt | sym c‚ÇÅ = suc m , c‚ÇÇ
...                          | inj‚ÇÇ q rewrite step-APPLY-CS-¬¨NUM c a u w q p = steps-APPLY-cs-forward w n m u b v c isv c‚ÇÅ c‚ÇÇ
steps-APPLY-cs-forward w (suc n) (suc m) a b v c isv c‚ÇÅ c‚ÇÇ | inj‚ÇÇ p rewrite p | c‚ÇÅ = suc m , c‚ÇÇ
--}


‚àº‚ÑÇ‚â°-r : {c c1 c2 : ‚ÑÇ¬∑} ‚Üí c1 ‚â° c2 ‚Üí ‚àº‚ÑÇ¬∑ c c1 ‚Üí ‚àº‚ÑÇ¬∑ c c2
‚àº‚ÑÇ‚â°-r {c} {c1} {c2} e h rewrite e = h



¬¨equalInType-#Œ£choice : (i : ‚Ñï) (w : ùïé¬∑) (r : Res) (c : Name) (x y : CTerm) {k1 : ‚ÑÇ¬∑}
                        ‚Üí isValue (‚ÑÇ‚ÜíT (Res.def r))
                        ‚Üí isValue (‚ÑÇ‚ÜíT k1)
                        ‚Üí ¬¨ ‚àº‚ÑÇ¬∑ (Res.def r) k1
                        ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w
                        ‚Üí compatible¬∑ c w r
                        ‚Üí freezable¬∑ c w
                        ‚Üí equalInType i w (#Œ£choice c k1) x y
                        ‚Üí ‚ä•
¬¨equalInType-#Œ£choice i w r c x y {k1} isv‚ÇÅ isv‚ÇÇ diff oc comp fb eqi = diff sim3
  where
    h0 : equalInType i w (#SUM #NAT (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k1) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) x y
    h0 rewrite #Œ£choice‚â° c k1 = eqi

    h1 : inbar w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT) (Œª a b ea ‚Üí equalInType i w' (#EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)) w' x y)
    h1 = Bar.‚àÄùïé-inBarFunc barI aw (equalInType-SUM‚Üí {i} {w} {#NAT} {#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k1) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ} h0)
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT)
                                     (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k1) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                     w' x y
                           ‚Üí SUMeq (equalInType i w' #NAT)
                                    (Œª a b ea ‚Üí equalInType i w' (#EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))
                                    w' x y)
        aw w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) rewrite sub0-#Œ£choice-body‚â° a‚ÇÅ c k1 = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb

    -- 1st jump to bar
    w1 : ùïé¬∑
    w1 = fst (ChoiceBar.followChoice CB c h1 oc comp fb)

    e1 : w ‚äë¬∑ w1
    e1 = fst (snd (ChoiceBar.followChoice CB c h1 oc comp fb))

    oc1 : only‚ÑÇ‚ààùïé (Res.def r) c w1
    oc1 = fst (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb)))

    comp1 : compatible¬∑ c w1 r
    comp1 = fst (snd (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb))))

    fb1 : freezable¬∑ c w1
    fb1 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb)))))

    h2 : SUMeq (equalInType i w1 #NAT) (Œª a b ea ‚Üí equalInType i w1 (#EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)) w1 x y
    h2 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb)))))

    a‚ÇÅ : CTerm
    a‚ÇÅ = fst h2

    a‚ÇÇ : CTerm
    a‚ÇÇ = fst (snd h2)

    b‚ÇÅ : CTerm
    b‚ÇÅ = fst (snd (snd h2))

    b‚ÇÇ : CTerm
    b‚ÇÇ = fst (snd (snd (snd h2)))

    ea1 : equalInType i w1 #NAT a‚ÇÅ a‚ÇÇ
    ea1 = fst (snd (snd (snd (snd h2))))

    eb1 : equalInType i w1 (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
    eb1 = snd (snd (snd (snd (snd (snd (snd h2))))))

    -- 2nd jump to bar
    ea2 : inbar w1 (Œª w' _ ‚Üí #strongMonEq w' a‚ÇÅ a‚ÇÇ)
    ea2 = equalInType-NAT‚Üí i w1 a‚ÇÅ a‚ÇÇ ea1

    w2 : ùïé¬∑
    w2 = fst (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)

    e2 : w1 ‚äë¬∑ w2
    e2 = fst (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1))

    oc2 : only‚ÑÇ‚ààùïé (Res.def r) c w2
    oc2 = fst (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)))

    comp2 : compatible¬∑ c w2 r
    comp2 = fst (snd (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1))))

    fb2 : freezable¬∑ c w2
    fb2 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)))))

    ea3 : #strongMonEq w2 a‚ÇÅ a‚ÇÇ
    ea3 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)))))

    m : ‚Ñï
    m = fst ea3

    ca‚ÇÅ : a‚ÇÅ #‚áõ #NUM m at w2
    ca‚ÇÅ = fst (snd ea3)

    eb2 : equalInType i w2 (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
    eb2 = equalInType-mon eb1 w2 e2

    eb3 : equalInType i w2 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1)
    eb3 = equalInType-EQ‚Üí‚ÇÅ eb2

    eb4 : equalInType i w2 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) (#NUM m)) (‚ÑÇ‚ÜíC¬∑ k1)
    eb4 = equalInType-#‚áõ-left (#‚áõ-APPLY-CS {w2} {a‚ÇÅ} {#NUM m} c ca‚ÇÅ) eb3

    eb5 : inbar w2 (Œª w' _ ‚Üí #weak‚ÑÇEq w' (#APPLY (#CS c) (#NUM m)) (‚ÑÇ‚ÜíC¬∑ k1))
    eb5 = ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ‚Üí¬∑ i w2 (#APPLY (#CS c) (#NUM m)) (‚ÑÇ‚ÜíC¬∑ k1) eb4

    -- 3rd jump to bar
    w3 : ùïé¬∑
    w3 = fst (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)

    e3 : w2 ‚äë¬∑ w3
    e3 = fst (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2))

    oc3 : only‚ÑÇ‚ààùïé (Res.def r) c w3
    oc3 = fst (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)))

    comp3 : compatible¬∑ c w3 r
    comp3 = fst (snd (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2))))

    fb3 : freezable¬∑ c w3
    fb3 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)))))

    eb6 : #weak‚ÑÇEq w3 (#APPLY (#CS c) (#NUM m)) (‚ÑÇ‚ÜíC¬∑ k1)
    eb6 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)))))

    gc : inbar w3 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ m c w'' ‚â° just t))))
    gc = inbar-choice¬∑ w3 c m r comp3

    -- 4th jump to bar
    w4 : ùïé¬∑
    w4 = fst (ChoiceBar.followChoice CB c gc oc3 comp3 fb3)

    e4 : w3 ‚äë¬∑ w4
    e4 = fst (snd (ChoiceBar.followChoice CB c gc oc3 comp3 fb3))

    oc4 : only‚ÑÇ‚ààùïé (Res.def r) c w4
    oc4 = fst (snd (snd (ChoiceBar.followChoice CB c gc oc3 comp3 fb3)))

    comp4 : compatible¬∑ c w4 r
    comp4 = fst (snd (snd (snd (ChoiceBar.followChoice CB c gc oc3 comp3 fb3))))

    fb4 : freezable¬∑ c w4
    fb4 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c gc oc3 comp3 fb3)))))

    gc1 : ‚àÄùïé w4 (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ m c w' ‚â° just t)))
    gc1 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c gc oc3 comp3 fb3)))))

    eb7 : #weak‚ÑÇEq w4 (#APPLY (#CS c) (#NUM m)) (‚ÑÇ‚ÜíC¬∑ k1)
    eb7 = ‚àÄùïé-mon e4 eb6

    -- and now we conclude
    k : ‚ÑÇ¬∑
    k = fst (#weak‚ÑÇEq‚Üí {w4} {#APPLY (#CS c) (#NUM m)} {‚ÑÇ‚ÜíC¬∑ k1} eb7)

    k' : ‚ÑÇ¬∑
    k' = fst (snd (#weak‚ÑÇEq‚Üí {w4} {#APPLY (#CS c) (#NUM m)} {‚ÑÇ‚ÜíC¬∑ k1} eb7))

    cn‚ÇÅ : #APPLY (#CS c) (#NUM m) #‚áì ‚ÑÇ‚ÜíC¬∑ k at w4
    cn‚ÇÅ = fst (snd (snd (#weak‚ÑÇEq‚Üí {w4} {#APPLY (#CS c) (#NUM m)} {‚ÑÇ‚ÜíC¬∑ k1} eb7)))

    cn‚ÇÇ : ‚ÑÇ‚ÜíC¬∑ k1 #‚áì ‚ÑÇ‚ÜíC¬∑ k' at w4
    cn‚ÇÇ = fst (snd (snd (snd (#weak‚ÑÇEq‚Üí {w4} {#APPLY (#CS c) (#NUM m)} {‚ÑÇ‚ÜíC¬∑ k1} eb7))))

    sim1 : ‚àº‚ÑÇ¬∑ k k'
    sim1 = snd (snd (snd (snd (#weak‚ÑÇEq‚Üí {w4} {#APPLY (#CS c) (#NUM m)} {‚ÑÇ‚ÜíC¬∑ k1} eb7))))

    gc2 : Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ m c w4 ‚â° just t)
    gc2 = lower (gc1 w4 (‚äë-refl¬∑ _))

    cn‚ÇÉ : ‚ÑÇ‚ÜíC¬∑ k #‚áì ‚ÑÇ‚ÜíC¬∑ (Res.def r) at w4
    cn‚ÇÉ = only‚ÑÇ‚ààùïé‚Üí‚â° oc4 cn‚ÇÅ gc2 isv‚ÇÅ

    eq1 : ‚ÑÇ‚ÜíC¬∑ k1 ‚â° ‚ÑÇ‚ÜíC¬∑ k'
    eq1 = CTerm‚â° (compVal (‚ÑÇ‚ÜíT k1) (‚ÑÇ‚ÜíT k') w4 cn‚ÇÇ isv‚ÇÇ)

    sim2 : ‚àº‚ÑÇ¬∑ k k1
    sim2 = ‚àº‚ÑÇ‚â°-r (sym (‚ÑÇ‚ÜíC-inj¬∑ eq1)) sim1

    sim3 : ‚àº‚ÑÇ¬∑ (Res.def r) k1
    sim3 = ‚ÑÇ‚ÜíC‚Üí‚àº‚ÑÇ¬∑ cn‚ÇÉ sim2

{--
-------
    cn‚ÇÑ : ‚ÑÇ‚ÜíC¬∑ k1 #‚áì ‚ÑÇ‚ÜíC¬∑ (Res.def r) at w4
    cn‚ÇÑ = ‚áì-trans cn‚ÇÇ cn‚ÇÉ

    cn‚ÇÖ : ‚ÑÇ‚ÜíC¬∑ k1 ‚â° ‚ÑÇ‚ÜíC¬∑ (Res.def r)
    cn‚ÇÖ = CTerm‚â° (compVal (‚ÑÇ‚ÜíT k1) (‚ÑÇ‚ÜíT (Res.def r)) w4 cn‚ÇÑ isv‚ÇÇ)
--}



{--
    neq1 : ‚ÑÇ‚ÜíT (Res.def r) ‚áì NUM k at w3
    neq1 = only‚ÑÇ‚ààùïé‚Üí‚â° oc3 (lower (ca‚ÇÅ w3 e3)) cn‚ÇÅ tt {--isvd--}

    neq2 : k1 ‚â° k
    neq2 = NUMinj (compVal (NUM k1) (NUM k) w3 cn‚ÇÇ tt)

    neq3 : ‚ÑÇ‚ÜíT (Res.def r) ‚áì NUM k1 at w3
    neq3 = ‚â°‚Üí‚áì‚Üí‚áì (‚â°NUM (sym neq2)) neq1 -- rewrite sym neq2 = neq1
--}


{--¬¨-‚Ñï‚Üí‚ÑÇ‚ÜíT-‚áì-NUM-1 : (w : ùïé¬∑) ‚Üí ¬¨ ‚ÑÇ‚ÜíT (‚Ñï‚Üí‚ÑÇ¬∑ 0) ‚áì NUM 1 at w
¬¨-‚Ñï‚Üí‚ÑÇ‚ÜíT-‚áì-NUM-1 w h rewrite ‚Ñï‚Üí‚ÑÇ‚ÜíT¬∑ 0 = ¬¨‚â°s 0 (NUMinj (compVal (NUM 0) (NUM 1) w h tt))
--}



{--
-- If we don't use this Agda gets stuck compiling...
‚àÄùïé-getChoice‚ÜígetC : {w : ùïé¬∑} {n : ‚Ñï} {name : Name} {k : ‚Ñï}
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift (lsuc(L)) (getChoice¬∑ n name w' ‚â° just (‚Ñï‚Üí‚ÑÇ¬∑ k)))
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift (lsuc(L)) (getC n name w' ‚â° just (NUM k)))
‚àÄùïé-getChoice‚ÜígetC {w} {n} {name} {k} aw w' e' rewrite lower (aw w' e') | ‚Ñï‚Üí‚ÑÇ‚ÜíT¬∑ k = lift refl
--}


equalInType-SQUASH-UNION-LIFT‚Üí :  {n i : ‚Ñï} (p : i < n) {w : ùïé¬∑} {a b u v : CTerm}
                                  ‚Üí equalInType n w (#SQUASH (#UNION (#‚ÜëT p a) (#NEG (#‚ÜëT p b)))) u v
                                  ‚Üí equalInType i w (#SQUASH (#UNION a (#NEG b))) #AX #AX
equalInType-SQUASH-UNION-LIFT‚Üí {n} {i} p {w} {a} {b} {u} {v} eqi =
  ‚ÜíequalInType-SQUASH
    (Bar.‚àÄùïé-inBar barI (Œª w' _ ‚Üí #‚áõ-refl w' #AX))
    (Bar.‚àÄùïé-inBar barI (Œª w' _ ‚Üí #‚áõ-refl w' #AX))
    j1
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#UNION (#‚ÜëT p a) (#NEG (#‚ÜëT p b))) t t)
                        ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType i w' (#UNION a (#NEG b)) t t))
    aw w' e (t , eqj) = t , ‚ÜíequalInType-UNION (equalTypes-#‚ÜëT‚Üí p w' a a (equalInType-UNION‚Üí‚ÇÅ eqj))
                                               (eqTypesNEG‚Üê (equalTypes-#‚ÜëT‚Üí p w' b b (eqTypesNEG‚Üí (equalInType-UNION‚Üí‚ÇÇ {n} {w'} {#‚ÜëT p a} {#NEG (#‚ÜëT p b)} {t} {t} eqj))))
                                               (Bar.‚àÄùïé-inBarFunc barI aw1 equ)
      where
        equ : inbar w' (Œª w'' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                          ‚Üí (t #‚áõ (#INL x) at w'' √ó t #‚áõ (#INL y) at w'' √ó equalInType n w'' (#‚ÜëT p a) x y)
                                             ‚äé
                                             (t #‚áõ (#INR x) at w'' √ó t #‚áõ (#INR y) at w'' √ó equalInType n w'' (#NEG (#‚ÜëT p b)) x y))))
        equ = equalInType-UNION‚Üí eqj

        aw1 : ‚àÄùïé w' (Œª w'' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                                   (t #‚áõ #INL x at w'' √ó t #‚áõ #INL y at w'' √ó equalInType n w'' (#‚ÜëT p a) x y)
                                   ‚äé (t #‚áõ #INR x at w'' √ó t #‚áõ #INR y at w'' √ó equalInType n w'' (#NEG (#‚ÜëT p b)) x y)))
                              ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                                  (t #‚áõ #INL x at w'' √ó t #‚áõ #INL y at w'' √ó equalInType i w'' a x y)
                                  ‚äé (t #‚áõ #INR x at w'' √ó t #‚áõ #INR y at w'' √ó equalInType i w'' (#NEG b) x y))))
        aw1 w'' e' (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqk)) = x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , equalInType-#‚ÜëT‚Üí p w'' a x y eqk)
        aw1 w'' e' (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqk)) = x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , equalInType-NEG (Œª w0 e0 ‚Üí equalTypes-#‚ÜëT‚Üí p w0 b b (eqTypes-mon (uni n) (eqTypesNEG‚Üí (fst eqk)) w0 e0)) (equalInType-NEG-‚ÜëT‚Üí p eqk))

    j0 : inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#UNION (#‚ÜëT p a) (#NEG (#‚ÜëT p b))) t t))
    j0 = equalInType-SQUASH‚Üí eqi

    j1 : inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType i w' (#UNION a (#NEG b)) t t))
    j1 = Bar.‚àÄùïé-inBarFunc barI aw j0



equalInType-SQUASH-UNION‚Üí : {i : ‚Ñï} {w : ùïé¬∑} {a b u v : CTerm}
                             ‚Üí equalInType i w (#SQUASH (#UNION a (#NEG b))) u v
                             ‚Üí inbar w (Œª w' _ ‚Üí inhType i w' a ‚äé ‚àÄùïé w' (Œª w'' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w'' b a‚ÇÅ a‚ÇÇ))
equalInType-SQUASH-UNION‚Üí {i} {w} {a} {b} {u} {v} eqi =
  Bar.inBar-idem barI (Bar.‚àÄùïé-inBarFunc barI aw1 h3)
  where
    h1 : inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType i w' (#UNION a (#NEG b)) t t))
    h1 = equalInType-SQUASH‚Üí eqi

    h2 : inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí inbar w' (Œª w'' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                         ‚Üí (t #‚áõ (#INL x) at w'' √ó t #‚áõ (#INL y) at w'' √ó equalInType i w'' a x y)
                                            ‚äé
                                            (t #‚áõ (#INR x) at w'' √ó t #‚áõ (#INR y) at w'' √ó equalInType i w'' (#NEG b) x y))))))
    h2 = Bar.‚àÄùïé-inBarFunc barI (Œª w' e (t , eqj) ‚Üí t , equalInType-UNION‚Üí eqj) h1

    h3 : inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí inbar w' (Œª w'' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                         ‚Üí (t #‚áõ (#INL x) at w'' √ó t #‚áõ (#INL y) at w'' √ó equalInType i w'' a x y)
                                            ‚äé
                                            (t #‚áõ (#INR x) at w'' √ó t #‚áõ (#INR y) at w''
                                              √ó ‚àÄùïé w'' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ)))))))
    h3 = Bar.‚àÄùïé-inBarFunc barI (Œª w1 e1 (t , eqt) ‚Üí t , Bar.‚àÄùïé-inBarFunc barI (Œª { w3 e3 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , z)) ‚Üí x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , z) ;
                                                                                     w3 e3 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , z)) ‚Üí x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , equalInType-NEG‚Üí z) }) eqt) h2

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª t ‚Üí inbar w' (Œª w'' _ ‚Üí Œ£ CTerm (Œª x ‚Üí  Œ£ CTerm (Œª y ‚Üí
                            (t #‚áõ #INL x at w'' √ó t #‚áõ #INL y at w'' √ó equalInType i w'' a x y)
                            ‚äé (t #‚áõ #INR x at w'' √ó t #‚áõ #INR y at w'' √ó ‚àÄùïé w'' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ))))))
                        ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí  inhType i w'' a ‚äé ‚àÄùïé w'' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ)) e'))
    aw1 w1 e1 (t , j) = Bar.inBar-idem barI (Bar.‚àÄùïé-inBarFunc barI aw2 j)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                                 (t #‚áõ #INL x at w' √ó t #‚áõ #INL y at w' √ó equalInType i w' a x y)
                                 ‚äé (t #‚áõ #INR x at w' √ó t #‚áõ #INR y at w' √ó ‚àÄùïé w' (Œª w''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w''' b a‚ÇÅ a‚ÇÇ))))
                             ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí ‚ÜëwPred' (Œª w''' e‚ÇÅ ‚Üí inhType i w''' a ‚äé ‚àÄùïé w''' (Œª w'''' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w'''' b a‚ÇÅ a‚ÇÇ)) e1 w'' e) e'))
        aw2 w2 e2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , z)) = Bar.‚àÄùïé-inBar barI (Œª w3 e3 x‚ÇÅ x‚ÇÇ ‚Üí inj‚ÇÅ (x , equalInType-mon (equalInType-refl z) w3 e3))
        aw2 w2 e2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , z)) = Bar.‚àÄùïé-inBar barI (Œª w3 e3 x‚ÇÅ x‚ÇÇ ‚Üí inj‚ÇÇ (‚àÄùïé-mon e3 z))



¬¨LEM : (w : ùïé¬∑) {n i : ‚Ñï} (p : i < n) ‚Üí member w (#NEG (#LEM p)) #lamAX
¬¨LEM w {n} {i} p =
  (n , equalInType-NEG (Œª w1 e1 ‚Üí eqTypesLem w1 p) aw1)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#LEM p) a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ ea = concl h3
      where
        aw1' : equalInType n w1 (#PI (#UNIV i) (#[0]SQUASH (#[0]UNION (#[0]‚ÜëT p #[0]VAR) (#[0]NEG (#[0]‚ÜëT p #[0]VAR))))) a‚ÇÅ a‚ÇÇ
        aw1' rewrite #LEM‚â°#PI p = ea

        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType n w' (#UNIV i) u‚ÇÅ u‚ÇÇ
                             ‚Üí equalInType n w' (#SQUASH (#UNION (#‚ÜëT p u‚ÇÅ) (#NEG (#‚ÜëT p u‚ÇÅ)))) (#APPLY a‚ÇÅ u‚ÇÅ) (#APPLY a‚ÇÇ u‚ÇÇ))
        aw2 w' e' u‚ÇÅ u‚ÇÇ j = ‚â°CTerm‚ÜíequalInType (sub0-#[0]SQUASH-LEM p u‚ÇÅ) (snd (snd (equalInType-PI‚Üí aw1')) w' e' u‚ÇÅ u‚ÇÇ j)

        -- instantiate using #Œ£choice
        name : Name
        name = newChoice¬∑ w1

        r : Res
        r = Res‚ÑÇ

        w2 : ùïé¬∑
        w2 = startChoice¬∑ name r w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè¬∑ r w1

        k1 : ‚ÑÇ¬∑
        k1 = ‚ÑÇ‚ÇÅ¬∑ -- This has to be different from r's default value

        dks : ¬¨ ‚àº‚ÑÇ¬∑ (Res.def r) k1
        dks = ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑

        h1 : equalInType i w2 (#SQUASH (#UNION (#Œ£choice name k1) (#NEG (#Œ£choice name k1)))) #AX #AX
        h1 = equalInType-SQUASH-UNION-LIFT‚Üí p (aw2 w2 e2 (#Œ£choice name k1) (#Œ£choice name k1) (equalInType-#Œ£choice p w2 name k1 (startChoiceCompatible¬∑ r w1) Œ£sat-‚ÑÇ‚ÇÅ))

        h2 : inbar w2 (Œª w' _ ‚Üí inhType i w' (#Œ£choice name k1) ‚äé ‚àÄùïé w' (Œª w'' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w'' (#Œ£choice name k1) a‚ÇÅ a‚ÇÇ))
        h2 = equalInType-SQUASH-UNION‚Üí h1

        oc1 : only‚ÑÇ‚ààùïé (Res.def r) name w2
        oc1 n = getChoice-startNewChoice¬∑ n r w1 --rewrite getChoice-startNewChoice¬∑ n r w1 = ‚ä•-elim (¬¨just‚â°nothing (sym e))

        comp1 : compatible¬∑ name w2 r
        comp1 = startChoiceCompatible¬∑ r w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ r w1

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (ChoiceBar.followChoice CB name h2 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (ChoiceBar.followChoice CB name h2 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def r) name w3
        oc2 = fst (snd (snd (ChoiceBar.followChoice CB name h2 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 r
        comp2 = fst (snd (snd (snd (ChoiceBar.followChoice CB name h2 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB name h2 oc1 comp1 fb1)))))

        h3 : inhType i w3 (#Œ£choice name k1) ‚äé ‚àÄùïé w3 (Œª w'' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w'' (#Œ£choice name k1) a‚ÇÅ a‚ÇÇ)
        h3 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB name h2 oc1 comp1 fb1)))))

        -- 1st injection: proved by ¬¨equalInType-#Œ£choice
        -- For this it is enough to be able to make a choice different from k1 forever, for example choosing 0 forever

        -- 2nd injection:
        -- This is where we should be able to make another choice than the default choice
        w4 : ùïé¬∑
        w4 = freeze¬∑ name w3 k1

        rNUM : ‚ãÜ·µ£ r k1
        rNUM = sat-‚ÑÇ‚ÇÅ

        e4 : w3 ‚äë¬∑ w4
        e4 = freeze‚äë¬∑ name w3 k1 comp2 rNUM

        n1 : ‚Ñï
        n1 = fst (getFreeze¬∑ name w3 k1 comp2 fb2)

        g0 : ‚àÄùïé w4 (Œª w' _ ‚Üí Lift (lsuc(L)) (getChoice¬∑ n1 name w' ‚â° just k1))
        g0 = snd (getFreeze¬∑ name w3 k1 comp2 fb2)

        g1 : #APPLY (#CS name) (#NUM n1) #‚áõ ‚ÑÇ‚ÜíC¬∑ k1 at w4
        g1 = ‚Üí#APPLY-#CS#‚áõ‚ÑÇ‚ÜíC¬∑ g0

        h4 : equalInType i w4 (#Œ£choice name k1) (#PAIR (#NUM n1) #AX) (#PAIR (#NUM n1) #AX)
        h4 = getChoice‚ÜíequalInType-#Œ£choice i (‚äë-compatible¬∑ e4 comp2) (sat-‚ÑÇ‚ÇÅ 0) g1

        e' : w ‚äë¬∑ w3
        e' = ‚äë-trans¬∑ (‚äë-trans¬∑ e1 e2) e3

        -- conclusion
        concl : (inhType i w3 (#Œ£choice name k1) ‚äé ‚àÄùïé w3 (Œª w'' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w'' (#Œ£choice name k1) a‚ÇÅ a‚ÇÇ))
                ‚Üí ‚ä•
        concl (inj‚ÇÅ (t , eqi)) = ¬¨equalInType-#Œ£choice i w3 Res‚ÑÇ name t t isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ dks oc2 comp2 fb2 eqi
        concl (inj‚ÇÇ aw) = aw w4 e4 (#PAIR (#NUM n1) #AX) (#PAIR (#NUM n1) #AX) h4

\end{code}[hide]
