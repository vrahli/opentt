\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module mp_props2 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                (C : Choice)
                (K : Compatible W C)
--                (P : Progress {L} W C K)
                (G : GetChoice {L} W C K)
                (X : ChoiceExt {L} W C)
                (N : NewChoice {L} W C K G)
--                (V : ChoiceVal W C K G X N)
--                (F : Freeze {L} W C K P G N)
--                (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
--                (CB : ChoiceBar W M C K P G X N V F E)
                (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
--open import getChoiceDef(W)(C)(K)(G)
--open import newChoiceDef(W)(C)(K)(G)(N)
--open import choiceExtDef(W)(C)(K)(G)(X)
--open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
--open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)
open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypes-mon)
--open import ind2(W)(M)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
  using (NATREC‚áì)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
  using ()
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypesNEG‚Üê ; eqTypesSQUASH‚Üê ; ‚ÜíequalInType-NAT ; equalInType-NAT!‚Üí ; equalInType-FUN‚Üí ; ‚â°CTerm‚ÜíequalInType ;
         equalInType-FUN ; isTypeNAT! ; ‚Üí‚â°equalTypes ; eqTypesSUM‚Üê ; eqTypesNAT ; eqTypesFUN‚Üê ; eqTypesPI‚Üê ; ‚â°CTerm‚ÜíeqTypes ;
         eqTypesISECT‚Üê ; eqTypesNOENC‚Üê ; equalInType-local ; equalInType-ISECT‚Üí ; equalInType-NOENC‚Üí ; equalInType-PI ;
         equalInType-refl ; equalInType-mon ; equalInType-NEG ; equalInType-NEG‚Üí ; equalInType-PI‚Üí ; equalInType-SUM‚Üí ;
         equalInType-SUM ; equalInType-SQUASH‚Üí ; ‚Üí‚â°equalInType ; eqTypes-local ; eqTypesTRUE ; eqTypesFALSE)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-ASSERT‚ÇÉ-APPLY ; equalInType-NEG‚Üí¬¨inh ;
         equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ ; isType-#NAT!‚ÜíBOOL ; isType-#NAT!‚ÜíBOOL! ; isType-#NAT‚ÜíBOOL ;
         sub0-NEG-ASSERT‚ÇÇ-APPLY ; ‚ÜíequalInType-SQUASH ; isTypeBOOL ; isTypeBOOL! ; isTypeBOOL‚ÇÄ ; isType-#NAT!‚ÜíBOOL‚ÇÄ ;
         isTypeBOOL‚ÇÄ!‚Üí ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ; isType-#NAT‚ÜíBOOL‚ÇÄ ; eqTypesQNAT! ; equalInType-BOOL‚ÇÄ!‚Üí ;
         equalTypes-#‚áõ-left-right-rev)
open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (_#‚áõ‚Çö_at_ ; equalInType-#‚áõ‚Çö-left-right-rev ; presPure ; ‚ÜípresPure-NATREC‚ÇÅ ; ‚ÜípresPure-NATREC‚ÇÇ ; ‚ÜípresPure-NATREC‚ÇÉ ;
         equalTypesPI‚Üí‚Çó ; equalTypesPI‚Üí·µ£ ; eqTypesSUM!‚Üê ; SUMeq! ; equalInType-SUM!‚Üí ; equalInType-SUM!)
open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#[1]ASSERT‚ÇÑ ; #SUM-ASSERT‚ÇÇ ; #SUM-ASSERT‚ÇÉ ; #SUM-ASSERT‚ÇÑ ; #SUM-ASSERT‚ÇÖ ; #PI-NEG-ASSERT‚ÇÇ ; #QNAT!‚ÜíBOOL! ;
         ‚â°ASSERT‚ÇÑ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ ;
         ‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ ; #QNAT!‚ÜíBOOL!‚â° ; #[0]ASSERT‚ÇÑ ; sub0-ASSERT‚ÇÑ-APPLY ;
         equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÑ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body ; #ASSERT‚ÇÑ)
open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#MP-left ; #MP-left2 ; isType-MP-right-body ; #MP-left3 ; #SUM-ASSERT‚Çô ; #MP-left‚Çô ; isType-MP-right‚Çô-body ;
         #MP-right‚Çô ; #MP-rightŒ£‚Çô ; #MP-left-qt ; isType-MP-right-qt-body ; #MP-right-qt ; #MP-right2-qt ; #MP-left-qt‚ÇÇ ;
         isType-MP-right-qt‚ÇÇ-body ; #MP-right-qt‚ÇÇ ; #MP-right2-qt‚ÇÇ ; #MP-left-qt‚ÇÉ ; isType-MP-right-qt‚ÇÉ-body ; #MP-right-qt‚ÇÉ ;
         #MP-right2-qt‚ÇÉ ; #MP‚Çô ; #[0]MP-left‚Çô ; #[0]MP-right‚Çô ; sub0-fun-mp‚Çô ; #MP‚ÇÑ ; #[0]MP-left-qt ; #[0]MP-right-qt ;
         sub0-fun-mp‚ÇÑ ; #MP‚ÇÖ ; #[0]MP-left-qt‚ÇÇ ; #[0]MP-right-qt‚ÇÇ ; sub0-fun-mp‚ÇÖ ; #MP‚ÇÜ ; #[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ;
         sub0-fun-mp‚ÇÜ ; #MP‚Çá ; equalInTypeTNOENC‚Üí ; #MP-left2-qt‚ÇÉ)


-- This is a simple unfolding of what it means to be a member of (#MP-left f)
equalInType-#MP-left‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                         ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                        ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                                        ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh
    a‚àà w1 e1
    (#AX , equalInType-PI
             (Œª w' _ ‚Üí isTypeNAT!)
             (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body (equalInType-refl (equalInType-mon f‚àà w1 e1)))
             Œª w2 e2 n‚ÇÅ n‚ÇÇ n‚àà ‚Üí
                 ‚â°CTerm‚ÜíequalInType
                   (sym (sub0-NEG-ASSERT‚ÇÇ-APPLY n‚ÇÅ f))
                   (equalInType-NEG
                     (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° f‚àà) w2 (‚äë-trans¬∑ e1 e2) n‚ÇÅ n‚ÇÅ (equalInType-refl n‚àà)))
                     Œª w3 e3 b‚ÇÅ b‚ÇÇ q ‚Üí h w3 (‚äë-trans¬∑ e2 e3) n‚ÇÅ n‚ÇÇ (equalInType-mon n‚àà w3 e3) (b‚ÇÅ , equalInType-refl q)))
--  {--(equalInType-refl f‚àà)--}


-- We prove that the result in equalInType-#MP-left‚Üí is an equivalence
‚ÜíequalInType-#MP-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                        ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                                        ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
                        ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ f‚àà)
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#PI-NEG-ASSERT‚ÇÇ f) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)) ‚Üí ‚ä•)
        aw2 w2 e2 n‚ÇÅ n‚ÇÇ n‚àà (t , inh) = h1 w2 (‚äë-refl¬∑ w2) t t inh
          where
            h1 : ‚àÄùïé w2 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)) a‚ÇÅ a‚ÇÇ)
            h1 = equalInType-NEG‚Üí (‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (snd (snd (equalInType-PI‚Üí g‚àà)) w2 e2 n‚ÇÅ n‚ÇÇ n‚àà))



-- This is a simple unfolding of what it means to be a member of (#MP-left2 f)
equalInType-#MP-left2‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SUM-ASSERT‚ÇÇ f) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw h3))
      where
        aw : ‚àÄùïé w2 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
        aw w3 e3 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
          lift (h w3 (‚äë-trans¬∑ e2 e3) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ)
        h3 = equalInType-SUM!‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SUM-ASSERT‚ÇÇ f)) t
    h1 = equalInType-NEG
           (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ (equalInType-mon f‚àà w1 e1))
           h2


‚ÜíequalInType-#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ f‚àà))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SUM-ASSERT‚ÇÇ f)) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t) p‚àà
          where
            aw3 : ‚àÄùïé w2 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t))
            aw3 w3 e3 =
              n‚ÇÅ , n‚ÇÇ , t , t ,
              equalInType-mon n‚àà w3 e3 ,
              #‚áõ!-refl {w3} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w3 ,
              #‚áõ!-refl {w3} {#PAIR n‚ÇÇ t} , --#compAllRefl (#PAIR n‚ÇÇ t) w3 ,
              ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w3 e3)

            p‚àà : equalInType i w2 (#SUM-ASSERT‚ÇÇ f) (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t)
            p‚àà = equalInType-SUM!
                    (Œª w' _ ‚Üí isTypeNAT!)
                    (isType-MP-right-body i w2 f f (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)))
                    (Mod.‚àÄùïé-‚ñ° M aw3)


-- This is a simple unfolding of what it means to be a member of (#MP-left3 f)
equalInType-#MP-left3‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left3‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÇ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM!‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÇ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ (equalInType-mon f‚àà w1 e1)))
           h2


‚ÜíequalInType-#MP-left3 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÇ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM!
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÇ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)



‚ÜíequalTypes-#SUM-ASSERT‚Çô : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                           ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                           ‚Üí equalTypes n w (#SUM-ASSERT‚Çô a‚ÇÅ) (#SUM-ASSERT‚Çô a‚ÇÇ)
‚ÜíequalTypes-#SUM-ASSERT‚Çô {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt = eqTypesSUM‚Üê (Œª w' _ ‚Üí eqTypesNAT) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT a b ‚Üí equalInType n w' #BOOL‚ÇÄ (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚ÇÄ‚â° eqt)

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
    aw1 w' e a b ea rewrite sub0-ASSERT‚ÇÇ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÇ-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #BOOL‚ÇÄ (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÇ (#APPLY a‚ÇÇ b))
        aw2 = equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eqb


‚ÜíequalInType-#MP-left‚Çô : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT‚ÜíBOOL‚ÇÄ f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left‚Çô f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left‚Çô i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚Çô f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚Çô f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚Çô f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí eqTypesNAT)
                (isType-MP-right‚Çô-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚Çô f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


equalInType-#MP-right‚Çô‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-right‚Çô f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right‚Çô‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-rightŒ£‚Çô f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                              ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT n‚ÇÅ n‚ÇÇ
                                                     √ó inhType i w'' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÇ-APPLY a1 f) (equalInType-refl b‚àà)


‚ÜíequalInType-#MP-left-qt : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left-qt f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left-qt i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÉ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÉ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM!
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-qt-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÉ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


-- This is a simple unfolding of what it means to be a member of (#MP-left-qt f)
equalInType-#MP-left-qt‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-left-qt f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left-qt‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÉ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÉ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM!‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÉ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÉ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ (equalInType-mon f‚àà w1 e1)))
           h2


equalInType-#MP-right-qt‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-right-qt f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right-qt‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM!‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                             ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                  √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÉ-APPLY a1 f) (equalInType-refl b‚àà)


‚ÜíequalInType-#MP-left-qt‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left-qt‚ÇÇ i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÑ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÑ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM!
                (Œª w' _ ‚Üí eqTypesQNAT!)
                (isType-MP-right-qt‚ÇÇ-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÑ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


-- This is a simple unfolding of what it means to be a member of (#MP-left-qt‚ÇÇ f)
equalInType-#MP-left-qt‚ÇÇ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left-qt‚ÇÇ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÑ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÑ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM!‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÑ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÑ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ (equalInType-mon f‚àà w1 e1)))
           h2


equalInType-#MP-right-qt‚ÇÇ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-right-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right-qt‚ÇÇ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt‚ÇÇ f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #QNAT! n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM!‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                             ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #QNAT! n‚ÇÅ n‚ÇÇ
                                                  √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÉ-APPLY a1 f) (equalInType-refl b‚àà)


‚ÜíequalInType-#MP-left-qt‚ÇÉ : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left-qt‚ÇÉ i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÖ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÖ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM!
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-qt‚ÇÉ-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  #‚áõ!-refl {w4} {#PAIR n‚ÇÅ t} , --‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÖ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


-- This is a simple unfolding of what it means to be a member of (#MP-left-qt‚ÇÉ f)
equalInType-#MP-left-qt‚ÇÉ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
equalInType-#MP-left-qt‚ÇÉ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÖ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÖ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM!‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÖ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÖ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ (equalInType-mon f‚àà w1 e1)))
           h2


equalInType-#MP-right-qt‚ÇÉ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí equalInType i w (#MP-right-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right-qt‚ÇÉ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt‚ÇÉ f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM!‚Üí t‚àà)
      where
      aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                           ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                √ó inhType i w'' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))) e1 w' e')
      aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
        a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÑ-APPLY a1 f) (equalInType-refl b‚àà)


#MP-left‚Üí#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                      ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                      ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
#MP-left‚Üí#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                    √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•) ‚Üí ‚ä•)
    aw1 w1 e1 h = equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•)
        aw2 w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh = h w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh)


#MP-left2‚Üí#MP-left3 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                       ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
#MP-left2‚Üí#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


#MP-left3‚Üí#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                       ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
#MP-left3‚Üí#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left3‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


#MP-left2‚Üí#MP-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                      ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                      ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
#MP-left2‚Üí#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•)
                        ‚Üí ‚ä•)
    aw1 w1 e1 h = equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                    √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = h w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh



‚àà#MP‚Çô‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚Çô F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT‚ÜíBOOL‚ÇÄ f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚Çô‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right‚Çô‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left‚Çô f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right‚Çô f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚Çô f) h1)

    h3 : equalInType i w1 (#MP-right‚Çô f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left‚Çô i w1 f #AX #AX f‚àà cond)


‚àà#MP‚ÇÑ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚ÇÑ F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT!‚ÜíBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚ÇÑ‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÑ f) h1)

    h3 : equalInType i w1 (#MP-right-qt f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt i w1 f #AX #AX f‚àà cond)


‚àà#MP‚ÇÖ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚ÇÖ F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #QNAT!‚ÜíBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚ÇÖ‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÇ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#QNAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÇ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÖ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÇ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÇ i w1 f #AX #AX f‚àà cond)


‚àà#MP‚ÇÜ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚ÇÜ F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT!‚ÜíBOOL‚ÇÄ! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚ÇÜ‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÉ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÜ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÉ i w1 f #AX #AX f‚àà cond)


{--
‚àà#MP‚Çò‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚Çò F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT!‚ÜíNAT! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ))))))
‚àà#MP‚Çò‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÉ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÜ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÉ i w1 f #AX #AX f‚àà cond)
--}


‚àà#MP‚Çá‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚Çá F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) f
                         ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
                         ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                           √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚Çá‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÉ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) (equalInTypeTNOENC‚Üí f‚àà) h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÜ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÉ i w1 f #AX #AX (equalInTypeTNOENC‚Üí f‚àà) cond)



‚ÜíequalTypes-#MP-right2-qt‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                           ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                           ‚Üí equalTypes n w (#MP-right2-qt‚ÇÉ a‚ÇÅ) (#MP-right2-qt‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#MP-right2-qt‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  ‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ eqt


‚ÜíequalTypes-#MP-left2-qt‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-left2-qt‚ÇÉ a‚ÇÅ) (#MP-left2-qt‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#MP-left2-qt‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ eqt))

\end{code}
