\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity4b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)



‚Üìvars++ : (a b : List Var) ‚Üí ‚Üìvars (a ++ b) ‚â° ‚Üìvars a ++ ‚Üìvars b
‚Üìvars++ [] b = refl
‚Üìvars++ (0 ‚à∑ a) b rewrite ‚Üìvars++ a b = refl
‚Üìvars++ (suc x ‚à∑ a) b rewrite ‚Üìvars++ a b = refl


‚Üí‚àà‚Üìvars-map-suc : (v : Name) (l : List Name)
                   ‚Üí v ‚àà l
                   ‚Üí v ‚àà ‚Üìvars (Data.List.map suc l)
‚Üí‚àà‚Üìvars-map-suc v [] i = i
‚Üí‚àà‚Üìvars-map-suc v (x ‚à∑ l) (here px) = here px
‚Üí‚àà‚Üìvars-map-suc v (x ‚à∑ l) (there i) = there (‚Üí‚àà‚Üìvars-map-suc v l i)


‚Üí‚Üìvars-names-testMup-F : (v : Name) (F f : Term)
                          ‚Üí v ‚àà names F
                          ‚Üí v ‚àà ‚Üìvars (names (testMup 0 F f))
‚Üí‚Üìvars-names-testMup-F v F f i
  rewrite names-shiftUp 0 (shiftNameUp 0 F)
        | names-shiftUp 3 (shiftUp 0 (shiftNameUp 0 f))
        | names-shiftUp 0 (shiftNameUp 0 f)
        | ‚Üìvars++ (names (shiftNameUp 0 F) ++ 0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) [ 0 ]
        | ‚Üìvars++ (names (shiftNameUp 0 F)) (0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) =
  there (‚àà-++‚Å∫À° (‚àà-++‚Å∫À° j))
  where
    j : v ‚àà ‚Üìvars (names (shiftNameUp 0 F))
    j rewrite names-shiftNameUp‚â° 0 F = ‚Üí‚àà‚Üìvars-map-suc v (names F) i


‚Üí‚Üìvars-names-testMup-f : (v : Name) (F f : Term)
                          ‚Üí v ‚àà names f
                          ‚Üí v ‚àà ‚Üìvars (names (testMup 0 F f))
‚Üí‚Üìvars-names-testMup-f v F f i
  rewrite names-shiftUp 0 (shiftNameUp 0 F)
        | names-shiftUp 3 (shiftUp 0 (shiftNameUp 0 f))
        | names-shiftUp 0 (shiftNameUp 0 f)
        | ‚Üìvars++ (names (shiftNameUp 0 F) ++ 0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) [ 0 ]
        | ‚Üìvars++ (names (shiftNameUp 0 F)) (0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ [])
        | ++[] (names (shiftNameUp 0 f)) =
  there (‚àà-++‚Å∫À° (‚àà-++‚Å∫ ≥ (‚Üìvars (names (shiftNameUp 0 F))) (there (there j))))
  where
    j : v ‚àà ‚Üìvars (names (shiftNameUp 0 f))
    j rewrite names-shiftNameUp‚â° 0 f = ‚Üí‚àà‚Üìvars-map-suc v (names f) i



¬¨newChoiceT-testMup‚àànames-F : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà names F
¬¨newChoiceT-testMup‚àànames-F w F f i = q (‚Üí‚Üìvars-names-testMup-F (newChoiceT w (testMup 0 F f)) F f i)
  where
    q : ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà ‚Üìvars (names (testMup 0 F f))
    q = Œª x ‚Üí snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f)))) (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) x))



¬¨newChoiceT-testMup‚àànames-f : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà names f
¬¨newChoiceT-testMup‚àànames-f w F f i = q (‚Üí‚Üìvars-names-testMup-f (newChoiceT w (testMup 0 F f)) F f i)
  where
    q : ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà ‚Üìvars (names (testMup 0 F f))
    q = Œª x ‚Üí snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f)))) (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) x))


¬¨newChoiceT-testMup‚àànamesùïé : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà namesùïé¬∑ w
¬¨newChoiceT-testMup‚àànamesùïé w F f i =
  snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f))))
      (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫À° i))


data updRel2 (name : Name) (f g : Term) : Term ‚Üí Term ‚Üí Set where
  updRel2-VAR     : (x : Var) ‚Üí updRel2 name f g (VAR x) (VAR x)
  updRel2-NAT     : updRel2 name f g NAT NAT
  updRel2-QNAT    : updRel2 name f g QNAT QNAT
  updRel2-TNAT    : updRel2 name f g TNAT TNAT
  updRel2-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  updRel2-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  updRel2-NUM     : (x : ‚Ñï) ‚Üí updRel2 name f g (NUM x) (NUM x)
  updRel2-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g d‚ÇÅ d‚ÇÇ ‚Üí updRel2 name f g (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updRel2-SUC     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (SUC a‚ÇÅ) (SUC a‚ÇÇ)
  updRel2-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  updRel2-LAMBDA  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (LAMBDA a‚ÇÅ) (LAMBDA a‚ÇÇ)
  updRel2-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  updRel2-FIX     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (FIX a‚ÇÅ) (FIX a‚ÇÇ)
  updRel2-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  updRel2-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  updRel2-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  updRel2-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  updRel2-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  updRel2-ISECT   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  updRel2-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  updRel2-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  updRel2-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  updRel2-INL     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (INL a‚ÇÅ) (INL a‚ÇÇ)
  updRel2-INR     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (INR a‚ÇÅ) (INR a‚ÇÇ)
  updRel2-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel2-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel2-AX      : updRel2 name f g AX AX
  updRel2-FREE    : updRel2 name f g FREE FREE
  updRel2-CS      : (name' : Name) ‚Üí ¬¨ name' ‚â° name ‚Üí updRel2 name f g (CS name') (CS name')
  updRel2-NAME    : (name' : Name) ‚Üí ¬¨ name' ‚â° name ‚Üí updRel2 name f g (NAME name') (NAME name')
  updRel2-FRESH   : (a b : Term) ‚Üí updRel2 (suc name) (shiftNameUp 0 f) (shiftNameUp 0 g) a b ‚Üí updRel2 name f g (FRESH a) (FRESH b)
  updRel2-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  updRel2-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel2 name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel2-TSQUASH : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (TSQUASH a‚ÇÅ) (TSQUASH a‚ÇÇ)
  updRel2-TTRUNC  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (TTRUNC a‚ÇÅ) (TTRUNC a‚ÇÇ)
  updRel2-TCONST  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (TCONST a‚ÇÅ) (TCONST a‚ÇÇ)
  updRel2-SUBSING : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (SUBSING a‚ÇÅ) (SUBSING a‚ÇÇ)
  updRel2-PURE    : updRel2 name f g PURE PURE
  updRel2-DUM     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (DUM a‚ÇÅ) (DUM a‚ÇÇ)
  updRel2-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  updRel2-UNIV    : (x : ‚Ñï) ‚Üí updRel2 name f g (UNIV x) (UNIV x)
  updRel2-LIFT    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (LIFT a‚ÇÅ) (LIFT a‚ÇÇ)
  updRel2-LOWER   : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (LOWER a‚ÇÅ) (LOWER a‚ÇÇ)
  updRel2-SHRINK  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g (SHRINK a‚ÇÅ) (SHRINK a‚ÇÇ)
  updRel2-upd     : updRel2 name f g (upd name f) (force g)


uptoùïégetT : (name : Name) (w1 w2 : ùïé¬∑) ‚Üí Set
uptoùïégetT name w1 w2 = (n : Name) (k : ‚Ñï) ‚Üí ¬¨ n ‚â° name ‚Üí getT k n w1 ‚â° getT k n w2


uptoùïé : (name : Name) (w1 w2 : ùïé¬∑) ‚Üí Set
uptoùïé name w1 w2 =
  domùïé¬∑ w1 ‚â° domùïé¬∑ w2
  √ó namesùïé¬∑ w1 ‚â° namesùïé¬∑ w2
  √ó uptoùïégetT name w1 w2


uptoùïé-sym : (name : Name) (w1 w2 : ùïé¬∑) ‚Üí uptoùïé name w1 w2 ‚Üí uptoùïé name w2 w1
uptoùïé-sym name w1 w2 (eqd , eqn , u) = sym eqd , sym eqn , Œª n k d ‚Üí sym (u n k d)


uptoùïé-trans : (name : Name) (w1 w2 w3 : ùïé¬∑) ‚Üí uptoùïé name w1 w2 ‚Üí uptoùïé name w2 w3 ‚Üí uptoùïé name w1 w3
uptoùïé-trans name w1 w2 w3 (eqd1 , eqn1 , u1) (eqd2 , eqn2 , u2) =
  trans eqd1 eqd2 , trans eqn1 eqn2 , Œª  n k d ‚Üí trans (u1 n k d) (u2 n k d)


uptoùïégetT-chooseT : (cc : ContConds) (name : Name) (w : ùïé¬∑) (t : Term)
                     ‚Üí uptoùïégetT name w (chooseT name w t)
uptoùïégetT-chooseT cc name w t nm k d =
  sym (ContConds.ccGcd cc k nm name w t d)


uptoùïé-chooseT0if : (cc : ContConds) (name : Name) (w : ùïé¬∑) (n m : ‚Ñï)
                    ‚Üí uptoùïé name w (chooseT0if name w n m)
uptoùïé-chooseT0if cc name w n m with n <? m
... | yes x =
  sym (ContConds.ccDchoose‚â° cc name w (NUM m)) ,
  sym (ContConds.ccNchoose‚â° cc name w (NUM m) refl) ,
  uptoùïégetT-chooseT cc name w (NUM m)
... | no x = refl , refl , Œª nm k d ‚Üí refl


presUpdRel2 : (n : ‚Ñï) (name : Name) (f g : Term) (k : ‚Ñï) ‚Üí Set(lsuc L)
presUpdRel2 n name f g k =
  {a b v : Term} {w1 w2 w : ùïé¬∑}
  ‚Üí updRel2 name f g a b
  ‚Üí uptoùïé name w1 w
  ‚Üí compatible¬∑ name w1 Res‚ä§
  ‚Üí compatible¬∑ name w Res‚ä§
  ‚Üí ‚àÄùïé-get0-NUM w1 name
-- We use ‚àÄùïé-‚áì‚àº‚Ñï instead of strongMonEq because if g could change the target world, it could be used for...
  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚àÄùïé-‚áì‚àº‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
  ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n name comp
  ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {v} name comp
  ‚Üí isValue v
  ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
      steps k' (b , w) ‚â° (v' , w')
      √ó updRel2 name f g v v'
      √ó uptoùïé name w2 w')))


stepsPresUpdRel2 : (n : ‚Ñï) (name : Name) (f g : Term) (b : Term) (w : ùïé¬∑) ‚Üí Set(lsuc L)
stepsPresUpdRel2 n name f g b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£ (steps k (b , w) ‚â° (v , w')) (Œª comp ‚Üí
    isValue v
    √ó isHighest‚Ñï {k} {w} {w'} {b} {v} n name comp
    √ó ‚àànamesùïé {k} {w} {w'} {b} {v} name comp
    √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel2 n name f g k')))))


updRel2-NUM‚Çó‚Üí : {name : Name} {f g : Term} {n : ‚Ñï} {a : Term}
               ‚Üí updRel2 name f g (NUM n) a
               ‚Üí a ‚â° NUM n
updRel2-NUM‚Çó‚Üí {name} {f} {g} {n} {.(NUM n)} (updRel2-NUM .n) = refl


updRel2-CS‚Çó‚Üí : {name : Name} {f g : Term} {n : Name} {a : Term}
               ‚Üí updRel2 name f g (CS n) a
               ‚Üí a ‚â° CS n
updRel2-CS‚Çó‚Üí {name} {f} {g} {n} {.(CS n)} (updRel2-CS .n x) = refl


updRel2-CS‚Çó‚Üí¬¨‚â° : {name : Name} {f g : Term} {n : Name} {a : Term}
               ‚Üí updRel2 name f g (CS n) a
               ‚Üí ¬¨ n ‚â° name
updRel2-CS‚Çó‚Üí¬¨‚â° {name} {f} {g} {n} {.(CS n)} (updRel2-CS .n x) = x


-- NOTE: We won't be able to prove that for impure terms x because it might read a choice
-- and return 2 different values in the two worlds w2 and w
Œ£stepsUpdRel2 : (name : Name) (f g : Term) (x : Term) (w2 : ùïé¬∑) (b : Term) (w : ùïé¬∑) ‚Üí Set(L)
Œ£stepsUpdRel2 name f g x w2 b w =
  Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ Term (Œª y1 ‚Üí Œ£ Term (Œª y2 ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    steps k1 (x , w2) ‚â° (y1 , w3)
    √ó steps k2 (b , w) ‚â° (y2 , w')
    √ó updRel2 name f g y1 y2
    √ó uptoùïé name w3 w'))))))



steps-decomp-isHighest‚Ñï2 : {w w1 w2 : ùïé¬∑} {a b v : Term} {n m : ‚Ñï} (i : ‚Ñï) (name : Name)
              ‚Üí isValue v
              ‚Üí (comp1 : steps m (a , w) ‚â° (b , w1))
              ‚Üí (comp2 : steps n (a , w) ‚â° (v , w2))
              ‚Üí Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
                  (isHighest‚Ñï {n} {w} {w2} {a} {v} i name comp2
                   ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp)
                  √ó (‚àànamesùïé {n} {w} {w2} {a} {v} name comp2
                     ‚Üí ‚àànamesùïé {k} {w1} {w2} {b} {v} name comp)))
steps-decomp-isHighest‚Ñï2 {w} {w1} {w2} {a} {b} {v} {n} {0} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) = n , ‚â§-refl , comp2 , (Œª x ‚Üí x) , (Œª x ‚Üí x)
steps-decomp-isHighest‚Ñï2 {w} {w1} {w2} {a} {b} {v} {0} {suc m} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
        | stepVal a w isv
        | stepsVal a w m isv
        | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1)
  = 0 , ‚â§-refl , refl , (Œª (j , e , q) ‚Üí j , e , <-transÀ° ‚â§-refl q) , (Œª (nnw , idom) ‚Üí nnw , idom)
steps-decomp-isHighest‚Ñï2 {w} {w1} {w2} {a} {b} {v} {suc n} {suc m} i name isv comp1 comp2 with step‚äé a w
... | inj‚ÇÅ (a' , w' , z) rewrite z =
  fst q , ‚â§-trans (fst (snd q)) (<‚áí‚â§ (n<1+n n)) , fst (snd (snd q)) ,
  (Œª (x1 , x2) ‚Üí fst (snd (snd (snd q))) x2) ,
  (Œª (x1 , x2 , x3) ‚Üí snd (snd (snd (snd q))) x3)
  where
    q : Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
           (isHighest‚Ñï {n} {w'} {w2} {a'} {v} i name comp2
            ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp)
           √ó (‚àànamesùïé {n} {w'} {w2} {a'} {v} name comp2
              ‚Üí ‚àànamesùïé {k} {w1} {w2} {b} {v} name comp)))
    q = steps-decomp-isHighest‚Ñï2 {w'} {w1} {w2} {a'} {b} {v} {n} {m} i name isv comp1 comp2
... | inj‚ÇÇ z rewrite z
           | pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
           | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) =
  0 , _‚â§_.z‚â§n , refl , (Œª x ‚Üí x) , (Œª x ‚Üí x)


updRel2-refl : {name : Name} {f g : Term} {a : Term}
               ‚Üí ¬¨ name ‚àà names a
               ‚Üí updRel2 name f g a a
updRel2-refl {name} {f} {g} {VAR x} nn = updRel2-VAR _
updRel2-refl {name} {f} {g} {NAT} nn = updRel2-NAT
updRel2-refl {name} {f} {g} {QNAT} nn = updRel2-QNAT
updRel2-refl {name} {f} {g} {TNAT} nn = updRel2-TNAT
updRel2-refl {name} {f} {g} {LT a a‚ÇÅ} nn = updRel2-LT _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {QLT a a‚ÇÅ} nn = updRel2-QLT _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {NUM x} nn = updRel2-NUM _
updRel2-refl {name} {f} {g} {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÇ} (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÉ} (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn))
updRel2-refl {name} {f} {g} {SUC a} nn = updRel2-SUC _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {PI a a‚ÇÅ} nn = updRel2-PI _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {LAMBDA a} nn = updRel2-LAMBDA _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {APPLY a a‚ÇÅ} nn = updRel2-APPLY _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {FIX a} nn = updRel2-FIX _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {LET a a‚ÇÅ} nn = updRel2-LET _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {SUM a a‚ÇÅ} nn = updRel2-SUM _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {PAIR a a‚ÇÅ} nn = updRel2-PAIR _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {SPREAD a a‚ÇÅ} nn = updRel2-SPREAD _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {SET a a‚ÇÅ} nn = updRel2-SET _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {TUNION a a‚ÇÅ} nn = updRel2-TUNION _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {ISECT a a‚ÇÅ} nn = updRel2-ISECT _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {UNION a a‚ÇÅ} nn = updRel2-UNION _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {QTUNION a a‚ÇÅ} nn = updRel2-QTUNION _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {INL a} nn = updRel2-INL _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {INR a} nn = updRel2-INR _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {DECIDE a a‚ÇÅ a‚ÇÇ} nn = updRel2-DECIDE _ _ _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÇ} (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn))
updRel2-refl {name} {f} {g} {EQ a a‚ÇÅ a‚ÇÇ} nn = updRel2-EQ _ _ _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÇ} (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn))
updRel2-refl {name} {f} {g} {AX} nn = updRel2-AX
updRel2-refl {name} {f} {g} {FREE} nn = updRel2-FREE
updRel2-refl {name} {f} {g} {CS x} nn = updRel2-CS _ Œª z ‚Üí nn (here (sym z))
updRel2-refl {name} {f} {g} {NAME x} nn = updRel2-NAME _ Œª z ‚Üí nn (here (sym z))
updRel2-refl {name} {f} {g} {FRESH a} nn = updRel2-FRESH _ _ (updRel2-refl {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {a} Œª z ‚Üí nn (suc‚Üí‚ààlowerNames {name} {names a} z))
updRel2-refl {name} {f} {g} {CHOOSE a a‚ÇÅ} nn = updRel2-CHOOSE _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {TSQUASH a} nn = updRel2-TSQUASH _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {TTRUNC a} nn = updRel2-TTRUNC _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {TCONST a} nn = updRel2-TCONST _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {SUBSING a} nn = updRel2-SUBSING _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {DUM a} nn = updRel2-DUM _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {FFDEFS a a‚ÇÅ} nn = updRel2-FFDEFS _ _ _ _ (updRel2-refl {name} {f} {g} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {PURE} nn = updRel2-PURE
updRel2-refl {name} {f} {g} {UNIV x} nn = updRel2-UNIV _
updRel2-refl {name} {f} {g} {LIFT a} nn = updRel2-LIFT _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {LOWER a} nn = updRel2-LOWER _ _ (updRel2-refl {name} {f} {g} {a} nn)
updRel2-refl {name} {f} {g} {SHRINK a} nn = updRel2-SHRINK _ _ (updRel2-refl {name} {f} {g} {a} nn)



isHighest‚Ñï2-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (APPLY a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY a b} {v} n name comp
                      ‚Üí ‚àànamesùïé {k} {w} {w'} {APPLY a b} {v} name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p = 0 , LAMBDA t , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , q) rewrite q with is-NUM b
... |       inj‚ÇÅ (j , r) rewrite r with getT j name' w
... |          just t = 0 , CS name' , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          nothing = 0 , CS name' , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ x | inj‚ÇÅ (name' , q) | inj‚ÇÇ r with step‚äé b w
... |          inj‚ÇÅ (b0 , w0 , z) rewrite z = 0 , CS name' , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          inj‚ÇÇ z rewrite z = 0 , CS name' , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w0} {w''} {a0} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h) (snd (snd inw))

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {suc (fst ind)} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      (fst inw , fst (snd inw) , fst (snd (snd (snd (snd (snd ind)))))) ,
      fst (snd (snd (snd (snd (snd (snd ind)))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd (snd ind)))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel2-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel2 n name f g (APPLY a b) w
                           ‚Üí stepsPresUpdRel2 n name f g a w
stepsPresUpdRel2-APPLY‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , inw , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd (snd hv)))))) , fst (snd (snd (snd (snd hv)))) ,
  fst (snd (snd (snd (snd (snd hv))))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd (snd hv)))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish inw



‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel2 name f g (APPLY a‚ÇÅ b‚ÇÅ) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , w' , comp1 , comp2 , r , upw) =
  fst comp1' , fst comp2' , APPLY y1 b‚ÇÅ , APPLY y2 b‚ÇÇ , w3 , w' , snd comp1' , snd comp2' ,
  updRel2-APPLY _ _ _ _ r updb , upw
  where
    comp1' : APPLY a‚ÇÅ b‚ÇÅ ‚áì APPLY y1 b‚ÇÅ from w1 to w3
    comp1' = ‚Üísteps-APPLY b‚ÇÅ k1 comp1

    comp2' : APPLY a‚ÇÇ b‚ÇÇ ‚áì APPLY y2 b‚ÇÇ from w to w'
    comp2' = ‚Üísteps-APPLY b‚ÇÇ k2 comp2



updRel2-LAMBDA‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                  ‚Üí updRel2 name f g (LAMBDA t) a
                  ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó updRel2 name f g t u)
                     ‚äé (t ‚â° updBody name f √ó a ‚â° force g)
updRel2-LAMBDA‚Çó‚Üí {name} {f} {g} {t} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA .t a‚ÇÇ u) = inj‚ÇÅ (a‚ÇÇ , refl , u)
updRel2-LAMBDA‚Çó‚Üí {name} {f} {g} {.(updBody name f)} {.(force g)} updRel2-upd = inj‚ÇÇ (refl , refl)



updRel2-PAIR‚Çó‚Üí : {name : Name} {f g : Term} {t‚ÇÅ t‚ÇÇ : Term} {a : Term}
                ‚Üí updRel2 name f g (PAIR t‚ÇÅ t‚ÇÇ) a
                ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° PAIR u‚ÇÅ u‚ÇÇ √ó updRel2 name f g t‚ÇÅ u‚ÇÅ √ó updRel2 name f g t‚ÇÇ u‚ÇÇ))
updRel2-PAIR‚Çó‚Üí {name} {f} {g} {t‚ÇÅ} {t‚ÇÇ} {.(PAIR a‚ÇÅ a‚ÇÇ)} (updRel2-PAIR .t‚ÇÅ a‚ÇÅ .t‚ÇÇ a‚ÇÇ u1 u2) = a‚ÇÅ , a‚ÇÇ , refl , u1 , u2



updRel2-INL‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                ‚Üí updRel2 name f g (INL t) a
                ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INL u √ó updRel2 name f g t u)
updRel2-INL‚Çó‚Üí {name} {f} {g} {t} {.(INL x)} (updRel2-INL .t x u) = x , refl , u



updRel2-INR‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                ‚Üí updRel2 name f g (INR t) a
                ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INR u √ó updRel2 name f g t u)
updRel2-INR‚Çó‚Üí {name} {f} {g} {t} {.(INR x)} (updRel2-INR .t x u) = x , refl , u



Œ£steps-updRel2-NUM‚Üí : {name : Name} {f g : Term} {m : ‚Ñï} {b : Term} {w1 : ùïé¬∑} {w2 : ùïé¬∑}
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí steps k' (b , w1) ‚â° (v' , w1') √ó updRel2 name f g (NUM m) v' √ó uptoùïé name w2 w1')))
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí steps k' (b , w1) ‚â° (NUM m , w1') √ó uptoùïé name w2 w1'))
Œ£steps-updRel2-NUM‚Üí {name} {f} {g} {m} {b} {w1} {w2} (k' , .(NUM m) , w1' , comp , updRel2-NUM .m , upw) = k' , w1' , comp , upw



‚Üí‚àànamesùïé-val : {k : ‚Ñï} {name : Name} {a v : Term} {w1 w2 : ùïé¬∑}
                 ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
                 ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                 ‚Üí name ‚àà domùïé¬∑ w1
                 ‚Üí isValue a
                 ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {v} name comp
‚Üí‚àànamesùïé-val {0} {name} {a} {v} {w1} {w2} comp nnw idom isv
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = nnw , idom
‚Üí‚àànamesùïé-val {suc k} {name} {a} {v} {w1} {w2} comp nnw idom isv with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z)
  rewrite z | stepVal a w1 isv | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  nnw , idom , ‚Üí‚àànamesùïé-val {k} {name} {a} {v} {w1} {w2} comp nnw idom isv
... | inj‚ÇÇ z rewrite z = nnw , idom



‚àànamesùïé-LET‚Üí : {k1 k2 : ‚Ñï} {name : Name} {a b u v : Term} {w1 w2 w3 : ùïé¬∑}
                 ‚Üí (comp1 : steps k1 (a , w1) ‚â° (u , w2))
                 ‚Üí (comp2 : steps k2 (LET a b , w1) ‚â° (v , w3))
                 ‚Üí isValue v
                 ‚Üí ‚àànamesùïé {k2} {w1} {w3} {LET a b} {v} name comp2
                 ‚Üí ‚àànamesùïé {k1} {w1} {w2} {a} {u} name comp1
‚àànamesùïé-LET‚Üí {0} {k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  rewrite sym (pair-inj‚ÇÅ comp1) | sym (pair-inj‚ÇÇ comp1) =
  ‚àànamesùïé‚Üí¬¨‚àànameùïé {k2} {w1} {w3} {LET a b} {v} name comp2 h ,
  ‚àànamesùïé‚Üí‚ààdomùïé {k2} {w1} {w3} {LET a b} {v} name comp2 h
‚àànamesùïé-LET‚Üí {suc k1} {0} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  rewrite sym (pair-inj‚ÇÅ comp2) | sym (pair-inj‚ÇÇ comp2) = ‚ä•-elim isv
‚àànamesùïé-LET‚Üí {suc k1} {suc k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ x rewrite stepVal a w1 x | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  fst h , fst (snd h) , ‚Üí‚àànamesùïé-val {k1} {name} {a} {u} {w1} {w2} comp1 (fst h) (fst (snd h)) x
... |    inj‚ÇÇ x rewrite z = fst h , fst (snd h) , ‚àànamesùïé-LET‚Üí {k1} {k2} {name} {a'} {b} {u} {v} {w1'} {w2} {w3} comp1 comp2 isv (snd (snd h))
‚àànamesùïé-LET‚Üí {suc k1} {suc k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp1) | sym (pair-inj‚ÇÇ comp1) with isValue‚äé a
... | inj‚ÇÅ x = fst h , fst (snd h)
... | inj‚ÇÇ x rewrite z = h


updRel2-shiftUp : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel2 name f g a b
                 ‚Üí updRel2 name f g (shiftUp n a) (shiftUp n b)
updRel2-shiftUp n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel2-VAR x) = updRel2-VAR _
updRel2-shiftUp n {name} {f} {g} cf cg {.NAT} {.NAT} updRel2-NAT = updRel2-NAT
updRel2-shiftUp n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel2-QNAT = updRel2-QNAT
updRel2-shiftUp n {name} {f} {g} cf cg {.TNAT} {.TNAT} updRel2-TNAT = updRel2-TNAT
updRel2-shiftUp n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel2-NUM x) = updRel2-NUM _
updRel2-shiftUp n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ) (updRel2-shiftUp n cf cg u‚ÇÇ) (updRel2-shiftUp n cf cg u‚ÇÉ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-shiftUp (suc n) cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc (suc n)) cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ) (updRel2-shiftUp (suc n) cf cg u‚ÇÇ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ) (updRel2-shiftUp n cf cg u‚ÇÇ)
updRel2-shiftUp n {name} {f} {g} cf cg {.AX} {.AX} updRel2-AX = updRel2-AX
updRel2-shiftUp n {name} {f} {g} cf cg {.FREE} {.FREE} updRel2-FREE = updRel2-FREE
updRel2-shiftUp n {name} {f} {g} cf cg {.(CS name')} {.(CS name')} (updRel2-CS name' x) = updRel2-CS _ x
updRel2-shiftUp n {name} {f} {g} cf cg {.(NAME name')} {.(NAME name')} (updRel2-NAME name' x) = updRel2-NAME _ x
updRel2-shiftUp n {name} {f} {g} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} (updRel2-FRESH a‚ÇÅ a‚ÇÇ r) = updRel2-FRESH _ _ (updRel2-shiftUp n (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) r)
updRel2-shiftUp n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(PURE)} {.(PURE)} (updRel2-PURE) = updRel2-PURE
updRel2-shiftUp n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
updRel2-shiftUp n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel2-UNIV x) = updRel2-UNIV x
updRel2-shiftUp n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-shiftUp n cf cg u)
updRel2-shiftUp n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel2-upd
  rewrite #shiftUp (suc (suc n)) (ct g cg)
        | #shiftUp (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel2-upd



updRel2-shiftDown : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel2 name f g a b
                 ‚Üí updRel2 name f g (shiftDown n a) (shiftDown n b)
updRel2-shiftDown n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel2-VAR x) = updRel2-VAR _
updRel2-shiftDown n {name} {f} {g} cf cg {.NAT} {.NAT} updRel2-NAT = updRel2-NAT
updRel2-shiftDown n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel2-QNAT = updRel2-QNAT
updRel2-shiftDown n {name} {f} {g} cf cg {.TNAT} {.TNAT} updRel2-TNAT = updRel2-TNAT
updRel2-shiftDown n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel2-NUM x) = updRel2-NUM _
updRel2-shiftDown n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ) (updRel2-shiftDown n cf cg u‚ÇÇ) (updRel2-shiftDown n cf cg u‚ÇÉ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-shiftDown (suc n) cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc (suc n)) cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ) (updRel2-shiftDown (suc n) cf cg u‚ÇÇ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ) (updRel2-shiftDown n cf cg u‚ÇÇ)
updRel2-shiftDown n {name} {f} {g} cf cg {.AX} {.AX} updRel2-AX = updRel2-AX
updRel2-shiftDown n {name} {f} {g} cf cg {.FREE} {.FREE} updRel2-FREE = updRel2-FREE
updRel2-shiftDown n {name} {f} {g} cf cg {.(CS name')} {.(CS name')} (updRel2-CS name' x) = updRel2-CS _ x
updRel2-shiftDown n {name} {f} {g} cf cg {.(NAME name')} {.(NAME name')} (updRel2-NAME name' x) = updRel2-NAME _ x
updRel2-shiftDown n {name} {f} {g} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} (updRel2-FRESH a‚ÇÅ a‚ÇÇ r) = updRel2-FRESH _ _ (updRel2-shiftDown n (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) r)
updRel2-shiftDown n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(PURE)} {.(PURE)} (updRel2-PURE) = updRel2-PURE
updRel2-shiftDown n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
updRel2-shiftDown n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel2-UNIV x) = updRel2-UNIV _
updRel2-shiftDown n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-shiftDown n cf cg u)
updRel2-shiftDown n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel2-upd
  rewrite #shiftDown (suc (suc n)) (ct g cg)
        | #shiftDown (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel2-upd



updRel2-shiftNameUp : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel2 name f g a b
                 ‚Üí updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (shiftNameUp n a) (shiftNameUp n b)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel2-VAR x) = updRel2-VAR _
updRel2-shiftNameUp n {name} {f} {g} cf cg {.NAT} {.NAT} updRel2-NAT = updRel2-NAT
updRel2-shiftNameUp n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel2-QNAT = updRel2-QNAT
updRel2-shiftNameUp n {name} {f} {g} cf cg {.TNAT} {.TNAT} updRel2-TNAT = updRel2-TNAT
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel2-NUM x) = updRel2-NUM _
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ) (updRel2-shiftNameUp n cf cg u‚ÇÉ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.AX} {.AX} updRel2-AX = updRel2-AX
updRel2-shiftNameUp n {name} {f} {g} cf cg {.FREE} {.FREE} updRel2-FREE = updRel2-FREE
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(CS name')} {.(CS name')} (updRel2-CS name' x) = updRel2-CS _ (Œª z ‚Üí x (sucIf‚â§-inj z))
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(NAME name')} {.(NAME name')} (updRel2-NAME name' x) = updRel2-NAME _ (Œª z ‚Üí x (sucIf‚â§-inj z))
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} (updRel2-FRESH a‚ÇÅ a‚ÇÇ r) = updRel2-FRESH (shiftNameUp (suc n) a‚ÇÅ) (shiftNameUp (suc n) a‚ÇÇ) c1
  where
    c3 : updRel2 (sucIf‚â§ (suc n) (suc name))
                (shiftNameUp (suc n) (shiftNameUp 0 f))
                (shiftNameUp (suc n) (shiftNameUp 0 g))
                (shiftNameUp (suc n) a‚ÇÅ)
                (shiftNameUp (suc n) a‚ÇÇ)
    c3 = updRel2-shiftNameUp (suc n) {suc name} (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) r

    c2 : updRel2 (suc (sucIf‚â§ n name))
                (shiftNameUp (suc n) (shiftNameUp 0 f))
                (shiftNameUp (suc n) (shiftNameUp 0 g))
                (shiftNameUp (suc n) a‚ÇÅ)
                (shiftNameUp (suc n) a‚ÇÇ)
    c2 rewrite suc-sucIf‚â§ n name = c3

    c1 : updRel2 (suc (sucIf‚â§ n name))
                (shiftNameUp 0 (shiftNameUp n f))
                (shiftNameUp 0 (shiftNameUp n g))
                (shiftNameUp (suc n) a‚ÇÅ)
                (shiftNameUp (suc n) a‚ÇÇ)
    c1 rewrite shiftNameUp-shiftNameUp {0} {n} {f} _‚â§_.z‚â§n | shiftNameUp-shiftNameUp {0} {n} {g} _‚â§_.z‚â§n = c2
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(PURE)} {.(PURE)} (updRel2-PURE) = updRel2-PURE
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel2-UNIV x) = updRel2-UNIV x
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-shiftNameUp n cf cg u)
updRel2-shiftNameUp n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel2-upd = c2
  where
    c1 : updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (upd (sucIf‚â§ n name) (shiftNameUp n f)) (force (shiftNameUp n g))
    c1 = updRel2-upd

    c2 : updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g)
                (LAMBDA (LET (VAR 0)
                             (LET (IFLT (APPLY (CS (sucIf‚â§ n name)) (NUM 0)) (VAR 0)
                                        (CHOOSE (NAME (sucIf‚â§ n name)) (VAR 0)) AX)
                                  (APPLY (shiftNameUp n (shiftUp 0 f)) (VAR (sucIf‚â§ 0 0))))))
                (LAMBDA (LET (VAR 0) (APPLY (shiftNameUp n g) (VAR 0))))
    c2 rewrite sym (shiftUp-shiftNameUp 0 n f) = c1



updRel2-shiftNameUp0 : {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                   ‚Üí updRel2 name f g a b
                   ‚Üí updRel2 (suc name) (shiftNameUp 0 f) (shiftNameUp 0 g) (shiftNameUp 0 a) (shiftNameUp 0 b)
updRel2-shiftNameUp0 {name} {f} {g} cf cg {a} {b} u
  rewrite suc‚â°sucIf‚â§0 name =
  updRel2-shiftNameUp 0 {name} cf cg u



updRel2-subv : (v : Var) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
              ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ
              ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ
              ‚Üí updRel2 name f g (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
updRel2-subv v {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-VAR x) ub with x ‚âü v
... | yes p = ub
... | no p = updRel2-VAR x
updRel2-subv v {name} {f} {g} cf cg {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} updRel2-NAT ub = updRel2-NAT
updRel2-subv v {name} {f} {g} cf cg {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} updRel2-QNAT ub = updRel2-QNAT
updRel2-subv v {name} {f} {g} cf cg {.TNAT} {.TNAT} {b‚ÇÅ} {b‚ÇÇ} updRel2-TNAT ub = updRel2-TNAT
updRel2-subv v {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-LT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-QLT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-NUM x) ub = updRel2-NUM x
updRel2-subv v {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub) (updRel2-subv v cf cg ua‚ÇÇ ub) (updRel2-subv v cf cg ua‚ÇÉ ub)
updRel2-subv v {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUC a‚ÇÅ a‚ÇÇ ua) ub = updRel2-SUC _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-PI _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ ua) ub = updRel2-LAMBDA _ _ (updRel2-subv (suc v) cf cg ua (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-APPLY _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-FIX a‚ÇÅ a‚ÇÇ ua) ub = updRel2-FIX _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-LET _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SUM _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-PAIR _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SPREAD _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc (suc v)) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg (updRel2-shiftUp 0 cf cg ub)))
updRel2-subv v {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SET _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÉ)} {.(ISECT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-ISECT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-TUNION _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-UNION _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-QTUNION _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-INL a‚ÇÅ a‚ÇÇ ua) ub = updRel2-INL _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-INR a‚ÇÅ a‚ÇÇ ua) ub = updRel2-INR _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel2-DECIDE _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub)) (updRel2-subv (suc v) cf cg ua‚ÇÇ (updRel2-shiftUp 0 cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel2-EQ _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub) (updRel2-subv v cf cg ua‚ÇÇ ub)
updRel2-subv v {name} {f} {g} cf cg {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} updRel2-AX ub = updRel2-AX
updRel2-subv v {name} {f} {g} cf cg {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} updRel2-FREE ub = updRel2-FREE
updRel2-subv v {name} {f} {g} cf cg {.(CS name')} {.(CS name')} {b‚ÇÅ} {b‚ÇÇ} (updRel2-CS name' x) ub = updRel2-CS _ x
updRel2-subv v {name} {f} {g} cf cg {.(NAME name')} {.(NAME name')} {b‚ÇÅ} {b‚ÇÇ} (updRel2-NAME name' x) ub = updRel2-NAME _ x
updRel2-subv v {name} {f} {g} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-FRESH a‚ÇÅ a‚ÇÇ ua) ub = updRel2-FRESH _ _ (updRel2-subv v {suc name} (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) {a‚ÇÅ} {a‚ÇÇ} {shiftNameUp 0 b‚ÇÅ} {shiftNameUp 0 b‚ÇÇ} ua (updRel2-shiftNameUp0 {name} cf cg ub))
updRel2-subv v {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-CHOOSE _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TSQUASH _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TTRUNC _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TCONST a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TCONST _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ ua) ub = updRel2-SUBSING _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(PURE)} {.(PURE)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-PURE) ub = updRel2-PURE
updRel2-subv v {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-DUM a‚ÇÅ a‚ÇÇ ua) ub = updRel2-DUM _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-FFDEFS _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
updRel2-subv v {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-UNIV x) ub = updRel2-UNIV x
updRel2-subv v {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LIFT a‚ÇÅ a‚ÇÇ ua) ub = updRel2-LIFT _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LOWER a‚ÇÅ a‚ÇÇ ua) ub = updRel2-LOWER _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ ua) ub = updRel2-SHRINK _ _ (updRel2-subv v cf cg ua ub)
updRel2-subv v {name} {f} {g} cf cg {.(upd name f)} {.(force g)} {b‚ÇÅ} {b‚ÇÇ} updRel2-upd ub
  rewrite subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÅ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
        | subv# (suc (suc v)) (shiftUp 0 (shiftUp 0 b‚ÇÇ)) g cg
  = updRel2-upd



updRel2-sub : {name : Name} {f g : Term} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí updRel2 name f g a‚ÇÅ a‚ÇÇ
             ‚Üí updRel2 name f g b‚ÇÅ b‚ÇÇ
             ‚Üí updRel2 name f g (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
updRel2-sub {name} {f} {g} cf cg {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ua ub =
  updRel2-shiftDown 0 cf cg (updRel2-subv 0 cf cg ua (updRel2-shiftUp 0 cf cg ub))

\end{code}
