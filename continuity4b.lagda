\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar
open import encode


module continuity4b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                    (EC : Encode)
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms4(W)(C)(K)(G)(X)(N)(EC)
open import terms5(W)(C)(K)(G)(X)(N)(EC)
open import terms6(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

--open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)(EC)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)



‚Üìvars++ : (a b : List Var) ‚Üí ‚Üìvars (a ++ b) ‚â° ‚Üìvars a ++ ‚Üìvars b
‚Üìvars++ [] b = refl
‚Üìvars++ (0 ‚à∑ a) b rewrite ‚Üìvars++ a b = refl
‚Üìvars++ (suc x ‚à∑ a) b rewrite ‚Üìvars++ a b = refl


‚Üí‚àà‚Üìvars-map-suc : (v : Name) (l : List Name)
                   ‚Üí v ‚àà l
                   ‚Üí v ‚àà ‚Üìvars (Data.List.map suc l)
‚Üí‚àà‚Üìvars-map-suc v [] i = i
‚Üí‚àà‚Üìvars-map-suc v (x ‚à∑ l) (here px) = here px
‚Üí‚àà‚Üìvars-map-suc v (x ‚à∑ l) (there i) = there (‚Üí‚àà‚Üìvars-map-suc v l i)


‚Üí‚Üìvars-names-testMup-F : (v : Name) (F f : Term)
                          ‚Üí v ‚àà names F
                          ‚Üí v ‚àà ‚Üìvars (names (testMup 0 F f))
‚Üí‚Üìvars-names-testMup-F v F f i
  rewrite names-shiftUp 0 (shiftNameUp 0 F)
        | names-shiftUp 3 (shiftUp 0 (shiftNameUp 0 f))
        | names-shiftUp 0 (shiftNameUp 0 f)
        | ‚Üìvars++ (names (shiftNameUp 0 F) ++ 0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) [ 0 ]
        | ‚Üìvars++ (names (shiftNameUp 0 F)) (0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) =
  there (‚àà-++‚Å∫À° (‚àà-++‚Å∫À° j))
  where
    j : v ‚àà ‚Üìvars (names (shiftNameUp 0 F))
    j rewrite names-shiftNameUp‚â° 0 F = ‚Üí‚àà‚Üìvars-map-suc v (names F) i


‚Üí‚Üìvars-names-testMup-f : (v : Name) (F f : Term)
                          ‚Üí v ‚àà names f
                          ‚Üí v ‚àà ‚Üìvars (names (testMup 0 F f))
‚Üí‚Üìvars-names-testMup-f v F f i
  rewrite names-shiftUp 0 (shiftNameUp 0 F)
        | names-shiftUp 3 (shiftUp 0 (shiftNameUp 0 f))
        | names-shiftUp 0 (shiftNameUp 0 f)
        | ‚Üìvars++ (names (shiftNameUp 0 F) ++ 0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) [ 0 ]
        | ‚Üìvars++ (names (shiftNameUp 0 F)) (0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ [])
        | ++[] (names (shiftNameUp 0 f)) =
  there (‚àà-++‚Å∫À° (‚àà-++‚Å∫ ≥ (‚Üìvars (names (shiftNameUp 0 F))) (there (there j))))
  where
    j : v ‚àà ‚Üìvars (names (shiftNameUp 0 f))
    j rewrite names-shiftNameUp‚â° 0 f = ‚Üí‚àà‚Üìvars-map-suc v (names f) i



¬¨newChoiceT-testMup‚àànames-F : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà names F
¬¨newChoiceT-testMup‚àànames-F w F f i = q (‚Üí‚Üìvars-names-testMup-F (newChoiceT w (testMup 0 F f)) F f i)
  where
    q : ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà ‚Üìvars (names (testMup 0 F f))
    q = Œª x ‚Üí snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f)))) (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) x))



¬¨newChoiceT-testMup‚àànames-f : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà names f
¬¨newChoiceT-testMup‚àànames-f w F f i = q (‚Üí‚Üìvars-names-testMup-f (newChoiceT w (testMup 0 F f)) F f i)
  where
    q : ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà ‚Üìvars (names (testMup 0 F f))
    q = Œª x ‚Üí snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f)))) (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) x))


¬¨newChoiceT-testMup‚àànamesùïé : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà namesùïé¬∑ w
¬¨newChoiceT-testMup‚àànamesùïé w F f i =
  snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f))))
      (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫À° i))


ren : Set
ren = List (Name √ó Name)


sren : ren ‚Üí ren
sren [] = []
sren ((a , b) ‚à∑ r) = (suc a , suc b) ‚à∑ sren r


ren‚Çó : ren ‚Üí List Name
ren‚Çó [] = []
ren‚Çó ((a , b) ‚à∑ r) = a ‚à∑ ren‚Çó r


ren·µ£ : ren ‚Üí List Name
ren·µ£ [] = []
ren·µ£ ((a , b) ‚à∑ r) = b ‚à∑ ren·µ£ r


names‚ààren : Name ‚Üí Name ‚Üí ren ‚Üí Set
names‚ààren name1 name2 [] = name1 ‚â° name2
names‚ààren name1 name2 ((a , b) ‚à∑ r) =
  (name1 ‚â° a √ó name2 ‚â° b)
  ‚äé (¬¨ name1 ‚â° a √ó ¬¨ name2 ‚â° b √ó names‚ààren name1 name2 r)


{--
names‚ààren : Name ‚Üí Name ‚Üí ren ‚Üí Set
names‚ààren name1 name2 r =
  (name1 ‚â° name2 √ó ¬¨ name1 ‚àà ren‚Çó r √ó ¬¨ name2 ‚àà ren·µ£ r)
  ‚äé (name1 , name2) ‚àà r
--}



{--
names‚ààren-refl : (x : Name) (r : ren) ‚Üí names‚ààren x x r
names‚ààren-refl x r = inj‚ÇÅ refl
--}


sym-ren : ren ‚Üí ren
sym-ren [] = []
sym-ren ((a , b) ‚à∑ r) = (b , a) ‚à∑ sym-ren r


‚ààsym-ren : {a b : Name} {r : ren} ‚Üí (a , b) ‚àà r ‚Üí (b , a) ‚àà sym-ren r
‚ààsym-ren {a} {b} {[]} ()
‚ààsym-ren {a} {b} {(u , v) ‚à∑ r} (here px)
  rewrite pair-inj‚ÇÅ px | pair-inj‚ÇÇ px = here refl
‚ààsym-ren {a} {b} {(u , v) ‚à∑ r} (there i) = there (‚ààsym-ren i)


sym-ren-idem : (r : ren) ‚Üí sym-ren (sym-ren r) ‚â° r
sym-ren-idem [] = refl
sym-ren-idem ((a , b) ‚à∑ r) rewrite sym-ren-idem r = refl


{--
names‚ààren-sym : {n1 n2 : Name} {r : ren} ‚Üí names‚ààren n1 n2 r ‚Üí names‚ààren n2 n1 (sym-ren r)
names‚ààren-sym {n1} {n2} {r} (inj‚ÇÅ x) rewrite x = inj‚ÇÅ refl
names‚ààren-sym {n1} {n2} {r} (inj‚ÇÇ i) = inj‚ÇÇ (‚ààsym-ren i)
--}


{--
names‚ààren-sym‚Üí : {n1 n2 : Name} {r : ren} ‚Üí names‚ààren n1 n2 (sym-ren r) ‚Üí names‚ààren n2 n1 r
names‚ààren-sym‚Üí {n1} {n2} {r} i = c2
  where
    c2 : names‚ààren n2 n1 r
    c2 rewrite sym (sym-ren-idem r) = names‚ààren-sym c1
      where
        c1 : names‚ààren n1 n2 (sym-ren r)
        c1  rewrite sym-ren-idem r = i
--}


data updRel2 (name : Name) (f g : Term) (r : ren) : Term ‚Üí Term ‚Üí Set where
  updRel2-VAR     : (x : Var) ‚Üí updRel2 name f g r (VAR x) (VAR x)
  updRel2-NAT     : updRel2 name f g r NAT NAT
  updRel2-QNAT    : updRel2 name f g r QNAT QNAT
  updRel2-TNAT    : updRel2 name f g r TNAT TNAT
  updRel2-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  updRel2-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  updRel2-NUM     : (x : ‚Ñï) ‚Üí updRel2 name f g r (NUM x) (NUM x)
  updRel2-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g r d‚ÇÅ d‚ÇÇ ‚Üí updRel2 name f g r (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updRel2-IFEQ    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g r d‚ÇÅ d‚ÇÇ ‚Üí updRel2 name f g r (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updRel2-SUC     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (SUC a‚ÇÅ) (SUC a‚ÇÇ)
  updRel2-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  updRel2-LAMBDA  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (LAMBDA a‚ÇÅ) (LAMBDA a‚ÇÇ)
  updRel2-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  updRel2-MSEQ    : (s : ùïä) ‚Üí updRel2 name f g r (MSEQ s) (MSEQ s)
  updRel2-MAPP    : (s : ùïä) (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (MAPP s a‚ÇÅ) (MAPP s a‚ÇÇ)
  updRel2-FIX     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (FIX a‚ÇÅ) (FIX a‚ÇÇ)
  updRel2-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  updRel2-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  updRel2-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  updRel2-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  updRel2-WT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (WT a‚ÇÅ b‚ÇÅ) (WT a‚ÇÇ b‚ÇÇ)
  updRel2-SUP     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (SUP a‚ÇÅ b‚ÇÅ) (SUP a‚ÇÇ b‚ÇÇ)
  updRel2-WREC    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (WREC a‚ÇÅ b‚ÇÅ) (WREC a‚ÇÇ b‚ÇÇ)
  updRel2-MT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (MT a‚ÇÅ b‚ÇÅ) (MT a‚ÇÇ b‚ÇÇ)
  updRel2-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  updRel2-ISECT   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  updRel2-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  updRel2-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  updRel2-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  updRel2-INL     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (INL a‚ÇÅ) (INL a‚ÇÇ)
  updRel2-INR     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (INR a‚ÇÅ) (INR a‚ÇÇ)
  updRel2-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g r (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel2-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g r (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel2-EQB      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name f g r d‚ÇÅ d‚ÇÇ ‚Üí updRel2 name f g r (EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updRel2-AX      : updRel2 name f g r AX AX
  updRel2-FREE    : updRel2 name f g r FREE FREE
  updRel2-CS      : (name1 name2 : Name) ‚Üí ¬¨ name1 ‚â° name ‚Üí ¬¨ name2 ‚â° name ‚Üí names‚ààren name1 name2 r ‚Üí updRel2 name f g r (CS name1) (CS name2)
  updRel2-NAME    : (name1 name2 : Name) ‚Üí ¬¨ name1 ‚â° name ‚Üí ¬¨ name2 ‚â° name ‚Üí names‚ààren name1 name2 r ‚Üí updRel2 name f g r (NAME name1) (NAME name2)
  updRel2-FRESH   : (a b : Term) ‚Üí updRel2 (suc name) (shiftNameUp 0 f) (shiftNameUp 0 g) (sren r) a b ‚Üí updRel2 name f g r (FRESH a) (FRESH b)
  updRel2-LOAD    : (a : Term) ‚Üí updRel2 name f g r (LOAD a) (LOAD a)
  updRel2-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  updRel2-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel2 name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updRel2 name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel2-TSQUASH : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (TSQUASH a‚ÇÅ) (TSQUASH a‚ÇÇ)
  updRel2-TTRUNC  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (TTRUNC a‚ÇÅ) (TTRUNC a‚ÇÇ)
  updRel2-TCONST  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (TCONST a‚ÇÅ) (TCONST a‚ÇÇ)
  updRel2-SUBSING : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (SUBSING a‚ÇÅ) (SUBSING a‚ÇÇ)
  updRel2-PURE    : updRel2 name f g r PURE PURE
  updRel2-NOSEQ   : updRel2 name f g r NOSEQ NOSEQ
  updRel2-TERM    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (TERM a‚ÇÅ) (TERM a‚ÇÇ)
  updRel2-ENC     : (a : Term) ‚Üí updRel2 name f g r a a ‚Üí updRel2 name f g r (ENC a) (ENC a)
  updRel2-DUM     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (DUM a‚ÇÅ) (DUM a‚ÇÇ)
  updRel2-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ ‚Üí updRel2 name f g r (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  updRel2-UNIV    : (x : ‚Ñï) ‚Üí updRel2 name f g r (UNIV x) (UNIV x)
  updRel2-LIFT    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (LIFT a‚ÇÅ) (LIFT a‚ÇÇ)
  updRel2-LOWER   : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (LOWER a‚ÇÅ) (LOWER a‚ÇÇ)
  updRel2-SHRINK  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ ‚Üí updRel2 name f g r (SHRINK a‚ÇÅ) (SHRINK a‚ÇÇ)
  updRel2-upd     : updRel2 name f g r (upd name f) (force g)



{--
sameRes-refl : (w : ùïé¬∑) ‚Üí sameRes w w
sameRes-refl w name r = (Œª x ‚Üí x) , (Œª x ‚Üí x)


sameRes-sym : {w1 w2 : ùïé¬∑} ‚Üí sameRes w1 w2 ‚Üí sameRes w2 w1
sameRes-sym {w1} {w2} sres name r = snd (sres name r) , fst (sres name r)


sameRes-trans : {w1 w2 w3 : ùïé¬∑} ‚Üí sameRes w1 w2 ‚Üí sameRes w2 w3 ‚Üí sameRes w1 w3
sameRes-trans {w1} {w2} {w3} sres1 sres2 name r =
  (Œª y ‚Üí fst (sres2 name r) (fst (sres1 name r) y)) ,
  (Œª y ‚Üí snd (sres1 name r) (snd (sres2 name r) y))
--}


uptoùïégetT : (name : Name) (w1 w2 : ùïé¬∑) (r : ren) ‚Üí Set
uptoùïégetT name w1 w2 r =
  (n1 n2 : Name) (k : ‚Ñï)
  ‚Üí ¬¨ n1 ‚â° name
  ‚Üí ¬¨ n2 ‚â° name
  ‚Üí names‚ààren n1 n2 r
  ‚Üí getT k n1 w1 ‚â° getT k n2 w2


no-repeats : List Name ‚Üí Set
no-repeats [] = ‚ä§
no-repeats (n ‚à∑ l) = ¬¨ n ‚àà l √ó no-repeats l


record wfRen (w1 w2 : ùïé¬∑) (r : ren) : Set where
  constructor mkWfRen
  field
    wfRen‚Çó : (n : Name) ‚Üí n ‚àà ren‚Çó r ‚Üí n ‚àà domùïé¬∑ w1
    wfRen·µ£ : (n : Name) ‚Üí n ‚àà ren·µ£ r ‚Üí n ‚àà domùïé¬∑ w2
    wfRenNR‚Çó : no-repeats (ren‚Çó r)
    wfRenNR·µ£ : no-repeats (ren·µ£ r)


-- We know that r is in domùïé w1/domùïé w2 and has no repeats

-- Should be upto a 'ren'
record uptoùïé (name : Name) (w1 w2 : ùïé¬∑) (r : ren) : Set(1‚Ñì Level.‚äî L) where
  constructor mkUptoùïé
  field
--    upwDom   : domùïé¬∑ w1 ‚â° domùïé¬∑ w2
--    upwNames : namesùïé¬∑ w1 ‚â° namesùïé¬∑ w2
--    upwRes   : sameRes w1 w2
--    upwWf    : wfRen w1 w2 r
    upwGet   : uptoùïégetT name w1 w2 r



{--
uptoùïé-sym : (name : Name) (w1 w2 : ùïé¬∑) (r : ren) ‚Üí uptoùïé name w1 w2 r ‚Üí uptoùïé name w2 w1 (sym-ren r)
uptoùïé-sym name w1 w2 r (mkUptoùïé {--eqd eqn sres--} u) =
  mkUptoùïé
--    (sym eqd)
--    (sym eqn)
--    (sameRes-sym sres)
    (Œª n1 n2 k d1 d2 i ‚Üí sym (u n2 n1 k d2 d1 (names‚ààren-sym‚Üí i)))
--}


{--
uptoùïé-trans : (name : Name) (w1 w2 w3 : ùïé¬∑) (r : ren) ‚Üí uptoùïé name w1 w2 r ‚Üí uptoùïé name w2 w3 r ‚Üí uptoùïé name w1 w3 r
uptoùïé-trans name w1 w2 w3 r (mkUptoùïé {--eqd1 eqn1 sres1--} u1) (mkUptoùïé {--eqd2 eqn2 sres2--} u2) =
  mkUptoùïé
--    (trans eqd1 eqd2)
--    (trans eqn1 eqn2)
--    (sameRes-trans sres1 sres2)
    (Œª n1 n2 k d1 d2 i ‚Üí trans (u1 n1 n2 k d1 d2 i) (u2 n2 n2 k d2 d2 (names‚ààren-refl n2 r))) {--trans (u1 n1 k d) (u2 n k d)--}
--}


{--
sameRes-chooseT : (cc : ContConds) (name : Name) (w : ùïé¬∑) (t : Term)
                  ‚Üí sameRes (chooseT name w t) w
sameRes-chooseT cc name w t n r =
  (Œª x ‚Üí ContConds.ccCchoose‚Üí cc n name w t r x) ,
  (Œª x ‚Üí ‚Üícompatible-chooseT n name w t r x)
--}


updRel2-NUM‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {n : ‚Ñï} {a : Term}
               ‚Üí updRel2 name f g r (NUM n) a
               ‚Üí a ‚â° NUM n
updRel2-NUM‚Çó‚Üí {name} {f} {g} {r} {n} {.(NUM n)} (updRel2-NUM .n) = refl



steps-decomp-isHighest‚Ñï2 : {w w1 w2 : ùïé¬∑} {a b v : Term} {n m : ‚Ñï} (i : ‚Ñï) (name : Name)
              ‚Üí isValue v
              ‚Üí (comp1 : steps m (a , w) ‚â° (b , w1))
              ‚Üí (comp2 : steps n (a , w) ‚â° (v , w2))
              ‚Üí Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
                  (isHighest‚Ñï {n} {w} {w2} {a} {v} i name comp2
                   ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp)
                  √ó (‚àànamesùïé {n} {w} {w2} {a} {v} name comp2
                     ‚Üí ‚àànamesùïé {k} {w1} {w2} {b} {v} name comp)))
steps-decomp-isHighest‚Ñï2 {w} {w1} {w2} {a} {b} {v} {n} {0} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) = n , ‚â§-refl , comp2 , (Œª x ‚Üí x) , (Œª x ‚Üí x)
steps-decomp-isHighest‚Ñï2 {w} {w1} {w2} {a} {b} {v} {0} {suc m} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
        | stepVal a w isv
        | stepsVal a w m isv
        | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1)
  = 0 , ‚â§-refl , refl , (Œª (j , e , q) ‚Üí j , e , <-transÀ° ‚â§-refl q) , (Œª (nnw , idom) ‚Üí nnw , idom)
steps-decomp-isHighest‚Ñï2 {w} {w1} {w2} {a} {b} {v} {suc n} {suc m} i name isv comp1 comp2 with step‚äé a w
... | inj‚ÇÅ (a' , w' , z) rewrite z =
  fst q , ‚â§-trans (fst (snd q)) (<‚áí‚â§ (n<1+n n)) , fst (snd (snd q)) ,
  (Œª (x1 , x2) ‚Üí fst (snd (snd (snd q))) x2) ,
  (Œª (x1 , x2 , x3) ‚Üí snd (snd (snd (snd q))) x3)
  where
    q : Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
           (isHighest‚Ñï {n} {w'} {w2} {a'} {v} i name comp2
            ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp)
           √ó (‚àànamesùïé {n} {w'} {w2} {a'} {v} name comp2
              ‚Üí ‚àànamesùïé {k} {w1} {w2} {b} {v} name comp)))
    q = steps-decomp-isHighest‚Ñï2 {w'} {w1} {w2} {a'} {b} {v} {n} {m} i name isv comp1 comp2
... | inj‚ÇÇ z rewrite z
           | pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
           | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) =
  0 , _‚â§_.z‚â§n , refl , (Œª x ‚Üí x) , (Œª x ‚Üí x)



abstract

  updRel2-refl : {name : Name} {f g : Term} {r : ren} {a : Term}
                 ‚Üí ¬¨names a ‚â° true
                 ‚Üí updRel2 name f g r a a
  updRel2-refl {name} {f} {g} {r} {VAR x} nn = updRel2-VAR _
  updRel2-refl {name} {f} {g} {r} {NAT} nn = updRel2-NAT
  updRel2-refl {name} {f} {g} {r} {QNAT} nn = updRel2-QNAT
  updRel2-refl {name} {f} {g} {r} {TNAT} nn = updRel2-TNAT
  updRel2-refl {name} {f} {g} {r} {LT a a‚ÇÅ} nn = updRel2-LT _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {QLT a a‚ÇÅ} nn = updRel2-QLT _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {NUM x} nn = updRel2-NUM _
  updRel2-refl {name} {f} {g} {r} {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí1-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí2-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí3-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí4-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn))
  updRel2-refl {name} {f} {g} {r} {IFEQ a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel2-IFEQ _ _ _ _ _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí1-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí2-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí3-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí4-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn))
  updRel2-refl {name} {f} {g} {r} {SUC a} nn = updRel2-SUC _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {PI a a‚ÇÅ} nn = updRel2-PI _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {LAMBDA a} nn = updRel2-LAMBDA _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {APPLY a a‚ÇÅ} nn = updRel2-APPLY _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {MSEQ s} nn = updRel2-MSEQ _
  updRel2-refl {name} {f} {g} {r} {MAPP s a} nn = updRel2-MAPP _ _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {FIX a} nn = updRel2-FIX _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {LET a a‚ÇÅ} nn = updRel2-LET _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {SUM a a‚ÇÅ} nn = updRel2-SUM _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {PAIR a a‚ÇÅ} nn = updRel2-PAIR _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {SPREAD a a‚ÇÅ} nn = updRel2-SPREAD _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {WT a a‚ÇÅ} nn = updRel2-WT _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {SUP a a‚ÇÅ} nn = updRel2-SUP _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {WREC a a‚ÇÅ} nn = updRel2-WREC _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {MT a a‚ÇÅ} nn = updRel2-MT _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {SET a a‚ÇÅ} nn = updRel2-SET _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {ISECT a a‚ÇÅ} nn = updRel2-ISECT _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {TUNION a a‚ÇÅ} nn = updRel2-TUNION _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {UNION a a‚ÇÅ} nn = updRel2-UNION _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {QTUNION a a‚ÇÅ} nn = updRel2-QTUNION _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {INL a} nn = updRel2-INL _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {INR a} nn = updRel2-INR _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {DECIDE a a‚ÇÅ a‚ÇÇ} nn = updRel2-DECIDE _ _ _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel2-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel2-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
  updRel2-refl {name} {f} {g} {r} {EQ a a‚ÇÅ a‚ÇÇ} nn = updRel2-EQ _ _ _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel2-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel2-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
  updRel2-refl {name} {f} {g} {r} {EQB a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí1-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí2-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí3-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel2-refl (‚àß‚â°true‚Üí4-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn))
  updRel2-refl {name} {f} {g} {r} {AX} nn = updRel2-AX
  updRel2-refl {name} {f} {g} {r} {FREE} nn = updRel2-FREE
  updRel2-refl {name} {f} {g} {r} {CHOOSE a a‚ÇÅ} nn = updRel2-CHOOSE _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {TSQUASH a} nn = updRel2-TSQUASH _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {TTRUNC a} nn = updRel2-TTRUNC _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {TCONST a} nn = updRel2-TCONST _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {SUBSING a} nn = updRel2-SUBSING _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {PURE} nn = updRel2-PURE
  updRel2-refl {name} {f} {g} {r} {NOSEQ} nn = updRel2-NOSEQ
  updRel2-refl {name} {f} {g} {r} {TERM a} nn = updRel2-TERM _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {ENC a} nn = updRel2-ENC _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {DUM a} nn = updRel2-DUM _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {FFDEFS a a‚ÇÅ} nn = updRel2-FFDEFS _ _ _ _ (updRel2-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel2-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel2-refl {name} {f} {g} {r} {UNIV x} nn = updRel2-UNIV x
  updRel2-refl {name} {f} {g} {r} {LIFT a} nn = updRel2-LIFT _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {LOWER a} nn = updRel2-LOWER _ _ (updRel2-refl nn)
  updRel2-refl {name} {f} {g} {r} {SHRINK a} nn = updRel2-SHRINK _ _ (updRel2-refl nn)



{--
updRel2-refl : {name : Name} {f g : Term} {r : ren} {a : Term}
               ‚Üí ¬¨ name ‚àà names a
               ‚Üí updRel2 name f g r a a
updRel2-refl {name} {f} {g} {r} {VAR x} nn = updRel2-VAR _
updRel2-refl {name} {f} {g} {r} {NAT} nn = updRel2-NAT
updRel2-refl {name} {f} {g} {r} {QNAT} nn = updRel2-QNAT
updRel2-refl {name} {f} {g} {r} {TNAT} nn = updRel2-TNAT
updRel2-refl {name} {f} {g} {r} {LT a a‚ÇÅ} nn = updRel2-LT _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {QLT a a‚ÇÅ} nn = updRel2-QLT _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {NUM x} nn = updRel2-NUM _
updRel2-refl {name} {f} {g} {r} {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÇ} (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÉ} (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} nn))
updRel2-refl {name} {f} {g} {r} {SUC a} nn = updRel2-SUC _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {PI a a‚ÇÅ} nn = updRel2-PI _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {LAMBDA a} nn = updRel2-LAMBDA _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {APPLY a a‚ÇÅ} nn = updRel2-APPLY _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {FIX a} nn = updRel2-FIX _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {LET a a‚ÇÅ} nn = updRel2-LET _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {SUM a a‚ÇÅ} nn = updRel2-SUM _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {PAIR a a‚ÇÅ} nn = updRel2-PAIR _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {SPREAD a a‚ÇÅ} nn = updRel2-SPREAD _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {SET a a‚ÇÅ} nn = updRel2-SET _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {TUNION a a‚ÇÅ} nn = updRel2-TUNION _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {ISECT a a‚ÇÅ} nn = updRel2-ISECT _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {UNION a a‚ÇÅ} nn = updRel2-UNION _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {QTUNION a a‚ÇÅ} nn = updRel2-QTUNION _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {INL a} nn = updRel2-INL _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {INR a} nn = updRel2-INR _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {DECIDE a a‚ÇÅ a‚ÇÇ} nn = updRel2-DECIDE _ _ _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÇ} (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn))
updRel2-refl {name} {f} {g} {r} {EQ a a‚ÇÅ a‚ÇÇ} nn = updRel2-EQ _ _ _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÇ} (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} nn))
updRel2-refl {name} {f} {g} {r} {AX} nn = updRel2-AX
updRel2-refl {name} {f} {g} {r} {FREE} nn = updRel2-FREE
updRel2-refl {name} {f} {g} {r} {CS x} nn = updRel2-CS x x (Œª z ‚Üí nn (here (sym z))) (Œª z ‚Üí nn (here (sym z))) {!!} {--(names‚ààren-refl x r)--} -- updRel2-CS _ Œª z ‚Üí nn (here (sym z))
updRel2-refl {name} {f} {g} {r} {NAME x} nn = updRel2-NAME x x (Œª z ‚Üí nn (here (sym z))) (Œª z ‚Üí nn (here (sym z))) {!!} {--(names‚ààren-refl x r)--} -- updRel2-NAME _ Œª z ‚Üí nn (here (sym z))
updRel2-refl {name} {f} {g} {r} {FRESH a} nn = updRel2-FRESH _ _ (updRel2-refl {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {sren r} {a} (Œª z ‚Üí nn (suc‚Üí‚ààlowerNames {name} {names a} z))) -- updRel2-FRESH _ _ (updRel2-refl {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {a} Œª z ‚Üí nn (suc‚Üí‚ààlowerNames {name} {names a} z))
updRel2-refl {name} {f} {g} {r} {CHOOSE a a‚ÇÅ} nn = updRel2-CHOOSE _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {TSQUASH a} nn = updRel2-TSQUASH _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {TTRUNC a} nn = updRel2-TTRUNC _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {TCONST a} nn = updRel2-TCONST _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {SUBSING a} nn = updRel2-SUBSING _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {DUM a} nn = updRel2-DUM _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {FFDEFS a a‚ÇÅ} nn = updRel2-FFDEFS _ _ _ _ (updRel2-refl {name} {f} {g} {r} {a} (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} nn)) (updRel2-refl {name} {f} {g} {r} {a‚ÇÅ} (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a} {names a‚ÇÅ} nn))
updRel2-refl {name} {f} {g} {r} {PURE} nn = updRel2-PURE
updRel2-refl {name} {f} {g} {r} {TERM a} nn = updRel2-TERM _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {UNIV x} nn = updRel2-UNIV _
updRel2-refl {name} {f} {g} {r} {LIFT a} nn = updRel2-LIFT _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {LOWER a} nn = updRel2-LOWER _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
updRel2-refl {name} {f} {g} {r} {SHRINK a} nn = updRel2-SHRINK _ _ (updRel2-refl {name} {f} {g} {r} {a} nn)
--}


updRel2-LAMBDA‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {t : Term} {a : Term}
                  ‚Üí updRel2 name f g r (LAMBDA t) a
                  ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó updRel2 name f g r t u)
                     ‚äé (t ‚â° updBody name f √ó a ‚â° force g)
updRel2-LAMBDA‚Çó‚Üí {name} {f} {g} {r} {t} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA .t a‚ÇÇ u) = inj‚ÇÅ (a‚ÇÇ , refl , u)
updRel2-LAMBDA‚Çó‚Üí {name} {f} {g} {r} {.(updBody name f)} {.(force g)} updRel2-upd = inj‚ÇÇ (refl , refl)



updRel2-PAIR‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {t‚ÇÅ t‚ÇÇ : Term} {a : Term}
                ‚Üí updRel2 name f g r (PAIR t‚ÇÅ t‚ÇÇ) a
                ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° PAIR u‚ÇÅ u‚ÇÇ √ó updRel2 name f g r t‚ÇÅ u‚ÇÅ √ó updRel2 name f g r t‚ÇÇ u‚ÇÇ))
updRel2-PAIR‚Çó‚Üí {name} {f} {g} {r} {t‚ÇÅ} {t‚ÇÇ} {.(PAIR a‚ÇÅ a‚ÇÇ)} (updRel2-PAIR .t‚ÇÅ a‚ÇÅ .t‚ÇÇ a‚ÇÇ u1 u2) = a‚ÇÅ , a‚ÇÇ , refl , u1 , u2



updRel2-SUP‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {t‚ÇÅ t‚ÇÇ : Term} {a : Term}
                ‚Üí updRel2 name f g r (SUP t‚ÇÅ t‚ÇÇ) a
                ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° SUP u‚ÇÅ u‚ÇÇ √ó updRel2 name f g r t‚ÇÅ u‚ÇÅ √ó updRel2 name f g r t‚ÇÇ u‚ÇÇ))
updRel2-SUP‚Çó‚Üí {name} {f} {g} {r} {t‚ÇÅ} {t‚ÇÇ} {.(SUP a‚ÇÅ a‚ÇÇ)} (updRel2-SUP .t‚ÇÅ a‚ÇÅ .t‚ÇÇ a‚ÇÇ u1 u2) = a‚ÇÅ , a‚ÇÇ , refl , u1 , u2



updRel2-INL‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {t : Term} {a : Term}
                ‚Üí updRel2 name f g r (INL t) a
                ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INL u √ó updRel2 name f g r t u)
updRel2-INL‚Çó‚Üí {name} {f} {g} {r} {t} {.(INL x)} (updRel2-INL .t x u) = x , refl , u



updRel2-INR‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {t : Term} {a : Term}
                ‚Üí updRel2 name f g r (INR t) a
                ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INR u √ó updRel2 name f g r t u)
updRel2-INR‚Çó‚Üí {name} {f} {g} {r} {t} {.(INR x)} (updRel2-INR .t x u) = x , refl , u




‚Üí‚àànamesùïé-val : {k : ‚Ñï} {name : Name} {a v : Term} {w1 w2 : ùïé¬∑}
                 ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
                 ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                 ‚Üí name ‚àà domùïé¬∑ w1
                 ‚Üí isValue a
                 ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {v} name comp
‚Üí‚àànamesùïé-val {0} {name} {a} {v} {w1} {w2} comp nnw idom isv
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = nnw , idom
‚Üí‚àànamesùïé-val {suc k} {name} {a} {v} {w1} {w2} comp nnw idom isv with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z)
  rewrite z | stepVal a w1 isv | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  nnw , idom , ‚Üí‚àànamesùïé-val {k} {name} {a} {v} {w1} {w2} comp nnw idom isv
... | inj‚ÇÇ z rewrite z = nnw , idom



‚àànamesùïé-LET‚Üí : {k1 k2 : ‚Ñï} {name : Name} {a b u v : Term} {w1 w2 w3 : ùïé¬∑}
                 ‚Üí (comp1 : steps k1 (a , w1) ‚â° (u , w2))
                 ‚Üí (comp2 : steps k2 (LET a b , w1) ‚â° (v , w3))
                 ‚Üí isValue v
                 ‚Üí ‚àànamesùïé {k2} {w1} {w3} {LET a b} {v} name comp2
                 ‚Üí ‚àànamesùïé {k1} {w1} {w2} {a} {u} name comp1
‚àànamesùïé-LET‚Üí {0} {k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  rewrite sym (pair-inj‚ÇÅ comp1) | sym (pair-inj‚ÇÇ comp1) =
  ‚àànamesùïé‚Üí¬¨‚àànameùïé {k2} {w1} {w3} {LET a b} {v} name comp2 h ,
  ‚àànamesùïé‚Üí‚ààdomùïé {k2} {w1} {w3} {LET a b} {v} name comp2 h
‚àànamesùïé-LET‚Üí {suc k1} {0} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  rewrite sym (pair-inj‚ÇÅ comp2) | sym (pair-inj‚ÇÇ comp2) = ‚ä•-elim isv
‚àànamesùïé-LET‚Üí {suc k1} {suc k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ x rewrite stepVal a w1 x | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  fst h , fst (snd h) , ‚Üí‚àànamesùïé-val {k1} {name} {a} {u} {w1} {w2} comp1 (fst h) (fst (snd h)) x
... |    inj‚ÇÇ x rewrite z = fst h , fst (snd h) , ‚àànamesùïé-LET‚Üí {k1} {k2} {name} {a'} {b} {u} {v} {w1'} {w2} {w3} comp1 comp2 isv (snd (snd h))
‚àànamesùïé-LET‚Üí {suc k1} {suc k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp1) | sym (pair-inj‚ÇÇ comp1) with isValue‚äé a
... | inj‚ÇÅ x = fst h , fst (snd h)
... | inj‚ÇÇ x rewrite z = h


abstract

  updRel2-shiftUp : (n : ‚Ñï) {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a b : Term}
                    ‚Üí updRel2 name f g r a b
                    ‚Üí updRel2 name f g r (shiftUp n a) (shiftUp n b)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(VAR x)} {.(VAR x)} (updRel2-VAR x) = updRel2-VAR _
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.NAT} {.NAT} updRel2-NAT = updRel2-NAT
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.QNAT} {.QNAT} updRel2-QNAT = updRel2-QNAT
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.TNAT} {.TNAT} updRel2-TNAT = updRel2-TNAT
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(NUM x)} {.(NUM x)} (updRel2-NUM x) = updRel2-NUM _
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ) (updRel2-shiftUp n cf cg u‚ÇÇ) (updRel2-shiftUp n cf cg u‚ÇÉ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFEQ _ _ _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ) (updRel2-shiftUp n cf cg u‚ÇÇ) (updRel2-shiftUp n cf cg u‚ÇÉ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-shiftUp (suc n) cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(MSEQ s)} {.(MSEQ s)} (updRel2-MSEQ s) = updRel2-MSEQ _
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (updRel2-MAPP s a‚ÇÅ a‚ÇÇ u) = updRel2-MAPP _ _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc (suc n)) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (updRel2-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-WT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (updRel2-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUP _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (updRel2-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-WREC _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc (suc (suc n))) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (updRel2-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-MT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp (suc n) cf cg u‚ÇÅ) (updRel2-shiftUp (suc n) cf cg u‚ÇÇ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ) (updRel2-shiftUp n cf cg u‚ÇÇ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ) (updRel2-shiftUp n cf cg u‚ÇÇ) (updRel2-shiftUp n cf cg u‚ÇÉ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.AX} {.AX} updRel2-AX = updRel2-AX
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.FREE} {.FREE} updRel2-FREE = updRel2-FREE
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(CS name1)} {.(CS name2)} (updRel2-CS name1 name2 d1 d2 i) = updRel2-CS name1 name2 d1 d2 i
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(NAME name1)} {.(NAME name2)} (updRel2-NAME name1 name2 d1 d2 i) = updRel2-NAME name1 name2 d1 d2 i
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} (updRel2-FRESH a‚ÇÅ a‚ÇÇ r‚ÇÅ) = updRel2-FRESH _ _ (updRel2-shiftUp n (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) r‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(LOAD a)} {.(LOAD a)} (updRel2-LOAD a) = updRel2-LOAD _ ---(updRel2-shiftUp n cf cg r‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(PURE)} {.(PURE)} (updRel2-PURE) = updRel2-PURE
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(NOSEQ)} {.(NOSEQ)} (updRel2-NOSEQ) = updRel2-NOSEQ
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} (updRel2-TERM a‚ÇÅ a‚ÇÇ u) = updRel2-TERM _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(ENC a)} {.(ENC a)} (updRel2-ENC a u) = updRel2-ENC _ u
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftUp n cf cg u) (updRel2-shiftUp n cf cg u‚ÇÅ)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(UNIV x)} {.(UNIV x)} (updRel2-UNIV x) = updRel2-UNIV x
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-shiftUp n cf cg u)
  updRel2-shiftUp n {name} {f} {g} {r} cf cg {.(upd name f)} {.(force g)} updRel2-upd
    rewrite #shiftUp (suc (suc n)) (ct g cg)
            | #shiftUp (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel2-upd



abstract

  updRel2-shiftDown : (n : ‚Ñï) {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a b : Term}
                      ‚Üí updRel2 name f g r a b
                      ‚Üí updRel2 name f g r (shiftDown n a) (shiftDown n b)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(VAR x)} {.(VAR x)} (updRel2-VAR x) = updRel2-VAR _
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.NAT} {.NAT} updRel2-NAT = updRel2-NAT
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.QNAT} {.QNAT} updRel2-QNAT = updRel2-QNAT
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.TNAT} {.TNAT} updRel2-TNAT = updRel2-TNAT
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(NUM x)} {.(NUM x)} (updRel2-NUM x) = updRel2-NUM _
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ) (updRel2-shiftDown n cf cg u‚ÇÇ) (updRel2-shiftDown n cf cg u‚ÇÉ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFEQ _ _ _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ) (updRel2-shiftDown n cf cg u‚ÇÇ) (updRel2-shiftDown n cf cg u‚ÇÉ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-shiftDown (suc n) cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(MSEQ s)} {.(MSEQ s)} (updRel2-MSEQ s) = updRel2-MSEQ _
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (updRel2-MAPP s a‚ÇÅ a‚ÇÇ u) = updRel2-MAPP _ _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc (suc n)) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (updRel2-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-WT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (updRel2-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUP _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (updRel2-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-WREC _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc (suc (suc n))) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (updRel2-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-MT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown (suc n) cf cg u‚ÇÅ) (updRel2-shiftDown (suc n) cf cg u‚ÇÇ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ) (updRel2-shiftDown n cf cg u‚ÇÇ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ) (updRel2-shiftDown n cf cg u‚ÇÇ) (updRel2-shiftDown n cf cg u‚ÇÉ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.AX} {.AX} updRel2-AX = updRel2-AX
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.FREE} {.FREE} updRel2-FREE = updRel2-FREE
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(CS name1)} {.(CS name2)} (updRel2-CS name1 name2 d1 d2 x) = updRel2-CS name1 name2 d1 d2 x
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(NAME name1)} {.(NAME name2)} (updRel2-NAME name1 name2 d1 d2 x) = updRel2-NAME name1 name2 d1 d2 x
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} (updRel2-FRESH a‚ÇÅ a‚ÇÇ r‚ÇÅ) = updRel2-FRESH _ _ (updRel2-shiftDown n (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) r‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(LOAD a)} {.(LOAD a)} (updRel2-LOAD a) = updRel2-LOAD _ -- (updRel2-shiftDown n cf cg r‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(PURE)} {.(PURE)} (updRel2-PURE) = updRel2-PURE
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(NOSEQ)} {.(NOSEQ)} (updRel2-NOSEQ) = updRel2-NOSEQ
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} (updRel2-TERM a‚ÇÅ a‚ÇÇ u) = updRel2-TERM _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(ENC a)} {.(ENC a)} (updRel2-ENC a u) = updRel2-ENC _ u
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftDown n cf cg u) (updRel2-shiftDown n cf cg u‚ÇÅ)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(UNIV x)} {.(UNIV x)} (updRel2-UNIV x) = updRel2-UNIV _
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-shiftDown n cf cg u)
  updRel2-shiftDown n {name} {f} {g} {r} cf cg {.(upd name f)} {.(force g)} updRel2-upd
    rewrite #shiftDown (suc (suc n)) (ct g cg)
            | #shiftDown (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel2-upd


sucIf‚â§-ren : (n : Name) (r : ren) ‚Üí ren
sucIf‚â§-ren n [] = []
sucIf‚â§-ren n ((a , b) ‚à∑ r) = (sucIf‚â§ n a , sucIf‚â§ n b) ‚à∑ sucIf‚â§-ren n r


‚Üí‚ààren-sucIf‚â§-ren : (n name1 name2 : Name) (r : ren)
                    ‚Üí (name1 , name2) ‚àà r
                    ‚Üí (sucIf‚â§ n name1 , sucIf‚â§ n name2) ‚àà sucIf‚â§-ren n r
‚Üí‚ààren-sucIf‚â§-ren n name1 name2 (x ‚à∑ xs) (here px) rewrite sym px = here refl
‚Üí‚ààren-sucIf‚â§-ren n name1 name2 (x ‚à∑ xs) (there i) = there (‚Üí‚ààren-sucIf‚â§-ren n name1 name2 xs i)



‚ààren‚Çó-sucIf‚â§-ren‚Üí : {name : Name} {r : ren} (n : Name)
                     ‚Üí sucIf‚â§ n name ‚àà ren‚Çó (sucIf‚â§-ren n r)
                     ‚Üí name ‚àà ren‚Çó r
‚ààren‚Çó-sucIf‚â§-ren‚Üí {name} {[]} n ()
‚ààren‚Çó-sucIf‚â§-ren‚Üí {name} {(a , b) ‚à∑ r} n (here px) rewrite sym (sucIf‚â§-inj {n} {name} {a} px) = here refl
‚ààren‚Çó-sucIf‚â§-ren‚Üí {name} {(a , b) ‚à∑ r} n (there i) = there (‚ààren‚Çó-sucIf‚â§-ren‚Üí {name} {r} n i)



‚ààren·µ£-sucIf‚â§-ren‚Üí : {name : Name} {r : ren} (n : Name)
                     ‚Üí sucIf‚â§ n name ‚àà ren·µ£ (sucIf‚â§-ren n r)
                     ‚Üí name ‚àà ren·µ£ r
‚ààren·µ£-sucIf‚â§-ren‚Üí {name} {[]} n ()
‚ààren·µ£-sucIf‚â§-ren‚Üí {name} {(a , b) ‚à∑ r} n (here px) rewrite sym (sucIf‚â§-inj {n} {name} {b} px) = here refl
‚ààren·µ£-sucIf‚â§-ren‚Üí {name} {(a , b) ‚à∑ r} n (there i) = there (‚ààren·µ£-sucIf‚â§-ren‚Üí {name} {r} n i)



‚Üí¬¨‚ààren‚Çó-sucIf‚â§-ren : {name : Name} {r : ren} (n : Name)
                     ‚Üí ¬¨ name ‚àà ren‚Çó r
                     ‚Üí ¬¨ sucIf‚â§ n name ‚àà ren‚Çó (sucIf‚â§-ren n r)
‚Üí¬¨‚ààren‚Çó-sucIf‚â§-ren {name} {r} n ni i = ni (‚ààren‚Çó-sucIf‚â§-ren‚Üí {name} {r} n i)



‚Üí¬¨‚ààren·µ£-sucIf‚â§-ren : {name : Name} {r : ren} (n : Name)
                     ‚Üí ¬¨ name ‚àà ren·µ£ r
                     ‚Üí ¬¨ sucIf‚â§ n name ‚àà ren·µ£ (sucIf‚â§-ren n r)
‚Üí¬¨‚ààren·µ£-sucIf‚â§-ren {name} {r} n ni i = ni (‚ààren·µ£-sucIf‚â§-ren‚Üí {name} {r} n i)


‚Üínames‚ààren-sucIf‚â§-ren : (n name1 name2 : Name) (r : ren)
                         ‚Üí names‚ààren name1 name2 r
                         ‚Üí names‚ààren (sucIf‚â§ n name1) (sucIf‚â§ n name2) (sucIf‚â§-ren n r)
‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 [] i rewrite i = refl
‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 ((a , b) ‚à∑ r) (inj‚ÇÅ (u , v)) rewrite u | v = inj‚ÇÅ (refl , refl)
‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 ((a , b) ‚à∑ r) (inj‚ÇÇ (u , v , x)) =
  inj‚ÇÇ ((Œª z ‚Üí u (sucIf‚â§-inj z)) , (Œª z ‚Üí v (sucIf‚â§-inj z)) , ‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 r x)
{-- r (inj‚ÇÅ (e , i‚ÇÅ , i‚ÇÇ)) rewrite e = inj‚ÇÅ (refl , ‚Üí¬¨‚ààren‚Çó-sucIf‚â§-ren n i‚ÇÅ , ‚Üí¬¨‚ààren·µ£-sucIf‚â§-ren n i‚ÇÇ) --inj‚ÇÅ refl
‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 r (inj‚ÇÇ i) = inj‚ÇÇ (‚Üí‚ààren-sucIf‚â§-ren n name1 name2 r i)
--}


sucIf‚â§-ren-suc-sren : (n : Name) (r : ren)
                      ‚Üí sucIf‚â§-ren (suc n) (sren r)
                         ‚â° sren (sucIf‚â§-ren n r)
sucIf‚â§-ren-suc-sren n [] = refl
sucIf‚â§-ren-suc-sren n ((a , b) ‚à∑ r)
  rewrite suc-sucIf‚â§ n a | suc-sucIf‚â§ n b | sucIf‚â§-ren-suc-sren n r = refl



abstract

  updRel2-shiftNameUp : (n : ‚Ñï) {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a b : Term}
                        ‚Üí updRel2 name f g r a b
                        ‚Üí updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (sucIf‚â§-ren n r) (shiftNameUp n a) (shiftNameUp n b)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(VAR x)} {.(VAR x)} (updRel2-VAR x) = updRel2-VAR _
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.NAT} {.NAT} updRel2-NAT = updRel2-NAT
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.QNAT} {.QNAT} updRel2-QNAT = updRel2-QNAT
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.TNAT} {.TNAT} updRel2-TNAT = updRel2-TNAT
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(NUM x)} {.(NUM x)} (updRel2-NUM x) = updRel2-NUM _
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ) (updRel2-shiftNameUp n cf cg u‚ÇÉ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFEQ _ _ _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ) (updRel2-shiftNameUp n cf cg u‚ÇÉ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(MSEQ s)} {.(MSEQ s)} (updRel2-MSEQ s) = updRel2-MSEQ _
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (updRel2-MAPP s a‚ÇÅ a‚ÇÇ u) = updRel2-MAPP _ _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (updRel2-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-WT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (updRel2-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUP _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (updRel2-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-WREC _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (updRel2-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-MT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel2-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ) (updRel2-shiftNameUp n cf cg u‚ÇÇ) (updRel2-shiftNameUp n cf cg u‚ÇÉ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.AX} {.AX} updRel2-AX = updRel2-AX
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.FREE} {.FREE} updRel2-FREE = updRel2-FREE
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(CS name1)} {.(CS name2)} (updRel2-CS name1 name2 d1 d2 i) = updRel2-CS (sucIf‚â§ n name1) (sucIf‚â§ n name2) (Œª z ‚Üí d1 (sucIf‚â§-inj z)) (Œª z ‚Üí d2 (sucIf‚â§-inj z)) (‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 r i)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(NAME name1)} {.(NAME name2)} (updRel2-NAME name1 name2 d1 d2 i) = updRel2-NAME (sucIf‚â§ n name1) (sucIf‚â§ n name2) (Œª z ‚Üí d1 (sucIf‚â§-inj z)) (Œª z ‚Üí d2 (sucIf‚â§-inj z)) (‚Üínames‚ààren-sucIf‚â§-ren n name1 name2 r i)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} (updRel2-FRESH a‚ÇÅ a‚ÇÇ r‚ÇÅ) =
    updRel2-FRESH (shiftNameUp (suc n) a‚ÇÅ) (shiftNameUp (suc n) a‚ÇÇ) c1
    where
      c3 : updRel2 (sucIf‚â§ (suc n) (suc name))
                   (shiftNameUp (suc n) (shiftNameUp 0 f))
                   (shiftNameUp (suc n) (shiftNameUp 0 g))
                   (sucIf‚â§-ren (suc n) (sren r))
                   (shiftNameUp (suc n) a‚ÇÅ)
                   (shiftNameUp (suc n) a‚ÇÇ)
      c3 = updRel2-shiftNameUp (suc n) {suc name} (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) r‚ÇÅ

      c2 : updRel2 (suc (sucIf‚â§ n name))
                   (shiftNameUp (suc n) (shiftNameUp 0 f))
                   (shiftNameUp (suc n) (shiftNameUp 0 g))
                   (sren (sucIf‚â§-ren n r))
                   (shiftNameUp (suc n) a‚ÇÅ)
                   (shiftNameUp (suc n) a‚ÇÇ)
      c2 rewrite suc-sucIf‚â§ n name | sym (sucIf‚â§-ren-suc-sren n r) = c3

      c1 : updRel2 (suc (sucIf‚â§ n name))
                   (shiftNameUp 0 (shiftNameUp n f))
                   (shiftNameUp 0 (shiftNameUp n g))
                   (sren (sucIf‚â§-ren n r))
                   (shiftNameUp (suc n) a‚ÇÅ)
                   (shiftNameUp (suc n) a‚ÇÇ)
      c1 rewrite shiftNameUp-shiftNameUp {0} {n} {f} _‚â§_.z‚â§n | shiftNameUp-shiftNameUp {0} {n} {g} _‚â§_.z‚â§n = c2
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(LOAD a)} {.(LOAD a)} (updRel2-LOAD a) = updRel2-LOAD _ --(updRel2-shiftNameUp n cf cg u) --(updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(PURE)} {.(PURE)} (updRel2-PURE) = updRel2-PURE
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(NOSEQ)} {.(NOSEQ)} (updRel2-NOSEQ) = updRel2-NOSEQ
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} (updRel2-TERM a‚ÇÅ a‚ÇÇ u) = updRel2-TERM _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(ENC a)} {.(ENC a)} (updRel2-ENC a u) = updRel2-ENC _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftNameUp n cf cg u) (updRel2-shiftNameUp n cf cg u‚ÇÅ)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(UNIV x)} {.(UNIV x)} (updRel2-UNIV x) = updRel2-UNIV x
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-shiftNameUp n cf cg u)
  updRel2-shiftNameUp n {name} {f} {g} {r} cf cg {.(upd name f)} {.(force g)} updRel2-upd = c2
    where
      c1 : updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (sucIf‚â§-ren n r) (upd (sucIf‚â§ n name) (shiftNameUp n f)) (force (shiftNameUp n g))
      c1 = updRel2-upd

      c2 : updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (sucIf‚â§-ren n r)
                   (LAMBDA (LET (VAR 0)
                                (LET (IFLT (APPLY (CS (sucIf‚â§ n name)) (NUM 0)) (VAR 0)
                                           (CHOOSE (NAME (sucIf‚â§ n name)) (VAR 0)) AX)
                                     (APPLY (shiftNameUp n (shiftUp 0 f)) (VAR (sucIf‚â§ 0 0))))))
                   (LAMBDA (LET (VAR 0) (APPLY (shiftNameUp n g) (VAR 0))))
      c2 rewrite sym (shiftUp-shiftNameUp 0 n f) = c1



sren‚â°sucIf‚â§0-ren : (r : ren) ‚Üí sren r ‚â° sucIf‚â§-ren 0 r
sren‚â°sucIf‚â§0-ren [] = refl
sren‚â°sucIf‚â§0-ren ((a , b) ‚à∑ r)
  rewrite suc‚â°sucIf‚â§0 a | suc‚â°sucIf‚â§0 b | sren‚â°sucIf‚â§0-ren r = refl



updRel2-shiftNameUp0 : {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a b : Term}
                   ‚Üí updRel2 name f g r a b
                   ‚Üí updRel2 (suc name) (shiftNameUp 0 f) (shiftNameUp 0 g) (sren r) (shiftNameUp 0 a) (shiftNameUp 0 b)
updRel2-shiftNameUp0 {name} {f} {g} {r} cf cg {a} {b} u
  rewrite suc‚â°sucIf‚â§0 name | sren‚â°sucIf‚â§0-ren r =
  updRel2-shiftNameUp 0 {name} cf cg u



abstract

  updRel2-subv : (v : Var) {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
                 ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
                 ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                 ‚Üí updRel2 name f g r (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-VAR x) ub with x ‚âü v
  ... | yes p = ub
  ... | no p = updRel2-VAR x
  updRel2-subv v {name} {f} {g} {r} cf cg {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} updRel2-NAT ub = updRel2-NAT
  updRel2-subv v {name} {f} {g} {r} cf cg {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} updRel2-QNAT ub = updRel2-QNAT
  updRel2-subv v {name} {f} {g} {r} cf cg {.TNAT} {.TNAT} {b‚ÇÅ} {b‚ÇÇ} updRel2-TNAT ub = updRel2-TNAT
  updRel2-subv v {name} {f} {g} {r} cf cg {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-LT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-QLT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-NUM x) ub = updRel2-NUM x
  updRel2-subv v {name} {f} {g} {r} cf cg {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub) (updRel2-subv v cf cg ua‚ÇÇ ub) (updRel2-subv v cf cg ua‚ÇÉ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(IFEQ a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updRel2-IFEQ _ _ _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub) (updRel2-subv v cf cg ua‚ÇÇ ub) (updRel2-subv v cf cg ua‚ÇÉ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUC a‚ÇÅ a‚ÇÇ ua) ub = updRel2-SUC _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-PI _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ ua) ub = updRel2-LAMBDA _ _ (updRel2-subv (suc v) cf cg ua (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-APPLY _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(MSEQ s)} {.(MSEQ s)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-MSEQ s) ub = updRel2-MSEQ _
  updRel2-subv v {name} {f} {g} {r} cf cg {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-MAPP s a‚ÇÅ a‚ÇÇ ua) ub = updRel2-MAPP _ _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-FIX a‚ÇÅ a‚ÇÇ ua) ub = updRel2-FIX _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-LET _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SUM _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-PAIR _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SPREAD _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc (suc v)) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg (updRel2-shiftUp 0 cf cg ub)))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(WT a‚ÇÅ b‚ÇÉ)} {.(WT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-WT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-WT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SUP a‚ÇÅ b‚ÇÉ)} {.(SUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SUP _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(WREC a‚ÇÅ b‚ÇÉ)} {.(WREC a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-WREC a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-WREC _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc (suc (suc v))) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg (updRel2-shiftUp 0 cf cg (updRel2-shiftUp 0 cf cg ub))))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(MT a‚ÇÅ b‚ÇÉ)} {.(MT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-MT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-MT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-SET _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(ISECT a‚ÇÅ b‚ÇÉ)} {.(ISECT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-ISECT _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-TUNION _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-UNION _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-QTUNION _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-INL a‚ÇÅ a‚ÇÇ ua) ub = updRel2-INL _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-INR a‚ÇÅ a‚ÇÇ ua) ub = updRel2-INR _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel2-DECIDE _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv (suc v) cf cg ua‚ÇÅ (updRel2-shiftUp 0 cf cg ub)) (updRel2-subv (suc v) cf cg ua‚ÇÇ (updRel2-shiftUp 0 cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel2-EQ _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub) (updRel2-subv v cf cg ua‚ÇÇ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(EQB a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-EQB a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub) (updRel2-subv v cf cg ua‚ÇÇ ub) (updRel2-subv v cf cg ua‚ÇÉ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} updRel2-AX ub = updRel2-AX
  updRel2-subv v {name} {f} {g} {r} cf cg {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} updRel2-FREE ub = updRel2-FREE
  updRel2-subv v {name} {f} {g} {r} cf cg {.(CS name1)} {.(CS name2)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-CS name1 name2 d1 d2 x) ub = updRel2-CS name1 name2 d1 d2 x
  updRel2-subv v {name} {f} {g} {r} cf cg {.(NAME name1)} {.(NAME name2)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-NAME name1 name2 d1 d2 x) ub = updRel2-NAME name1 name2 d1 d2 x
  updRel2-subv v {name} {f} {g} {r} cf cg {.(FRESH a‚ÇÅ)} {.(FRESH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-FRESH a‚ÇÅ a‚ÇÇ ua) ub = updRel2-FRESH _ _ (updRel2-subv v {suc name} (‚Üí#shiftNameUp 0 {f} cf) (‚Üí#shiftNameUp 0 {g} cg) {a‚ÇÅ} {a‚ÇÇ} {shiftNameUp 0 b‚ÇÅ} {shiftNameUp 0 b‚ÇÇ} ua (updRel2-shiftNameUp0 {name} cf cg ub))
  updRel2-subv v {name} {f} {g} {r} cf cg {.(LOAD a)} {.(LOAD a)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LOAD a) ub = updRel2-LOAD _ --ua -- (updRel2-subv v {name} cf cg {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-CHOOSE _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TSQUASH _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TTRUNC _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TCONST a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TCONST _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SUBSING a‚ÇÅ a‚ÇÇ ua) ub = updRel2-SUBSING _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(PURE)} {.(PURE)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-PURE) ub = updRel2-PURE
  updRel2-subv v {name} {f} {g} {r} cf cg {.(NOSEQ)} {.(NOSEQ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-NOSEQ) ub = updRel2-NOSEQ
  updRel2-subv v {name} {f} {g} {r} cf cg {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-TERM a‚ÇÅ a‚ÇÇ ua) ub = updRel2-TERM _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(ENC a)} {.(ENC a)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-ENC a ua) ub = updRel2-ENC _ ua
  updRel2-subv v {name} {f} {g} {r} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-DUM a‚ÇÅ a‚ÇÇ ua) ub = updRel2-DUM _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel2-FFDEFS _ _ _ _ (updRel2-subv v cf cg ua ub) (updRel2-subv v cf cg ua‚ÇÅ ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-UNIV x) ub = updRel2-UNIV x
  updRel2-subv v {name} {f} {g} {r} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LIFT a‚ÇÅ a‚ÇÇ ua) ub = updRel2-LIFT _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-LOWER a‚ÇÅ a‚ÇÇ ua) ub = updRel2-LOWER _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel2-SHRINK a‚ÇÅ a‚ÇÇ ua) ub = updRel2-SHRINK _ _ (updRel2-subv v cf cg ua ub)
  updRel2-subv v {name} {f} {g} {r} cf cg {.(upd name f)} {.(force g)} {b‚ÇÅ} {b‚ÇÇ} updRel2-upd ub
    rewrite subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÅ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
            | subv# (suc (suc v)) (shiftUp 0 (shiftUp 0 b‚ÇÇ)) g cg
    = updRel2-upd



updRel2-sub : {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí updRel2 name f g r a‚ÇÅ a‚ÇÇ
             ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
             ‚Üí updRel2 name f g r (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
updRel2-sub {name} {f} {g} {r} cf cg {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ua ub =
  updRel2-shiftDown 0 cf cg (updRel2-subv 0 cf cg ua (updRel2-shiftUp 0 cf cg ub))


uptoùïé‚ÜíuptoùïégetT : {name : Name} {w1 w2 : ùïé¬∑} {r : ren}
                     ‚Üí uptoùïé name w1 w2 r
                     ‚Üí uptoùïégetT name w1 w2 r
uptoùïé‚ÜíuptoùïégetT {name} {w1} {w2} {r} upw = uptoùïé.upwGet upw


{--
uptoùïé‚Üí‚â°domùïé : {name : Name} {w1 w2 : ùïé¬∑}
                 ‚Üí uptoùïé name w1 w2
                 ‚Üí domùïé¬∑ w1 ‚â° domùïé¬∑ w2
uptoùïé‚Üí‚â°domùïé {name} {w1} {w2} upw = uptoùïé.upwDom upw
--}


{--
uptoùïé‚Üí‚â°namesùïé : {name : Name} {w1 w2 : ùïé¬∑}
                 ‚Üí uptoùïé name w1 w2
                 ‚Üí namesùïé¬∑ w1 ‚â° namesùïé¬∑ w2
uptoùïé‚Üí‚â°namesùïé {name} {w1} {w2} upw = uptoùïé.upwNames upw
--}


{--
getT‚â°‚Üímap-getT‚â° : {n : ‚Ñï} {name name' : Name} {w w' : ùïé¬∑} {r : ren} {t : Term}
                   ‚Üí ¬¨ name' ‚â° name
                   ‚Üí uptoùïé name w w' r
                   ‚Üí getT n name' w ‚â° just t
                   ‚Üí Data.Maybe.map (Œª t ‚Üí t , w') (getT n name' w') ‚â° just (t , w')
getT‚â°‚Üímap-getT‚â° {n} {name} {name'} {w} {w'} {r} {t} neq upw gt
  rewrite sym (uptoùïé‚ÜíuptoùïégetT upw name' n neq) | gt = refl
--}


‚â°N‚Üí‚â°freshName : {a b : List Name}
                 ‚Üí a ‚â°N b
                 ‚Üí fst (freshName a) ‚â° fst (freshName b)
‚â°N‚Üí‚â°freshName {a} {b} e = ‚â°N‚Üí‚â°freshNameAux e


‚Üí‚â°++ : {a b c d : List Name} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí (a ++ c) ‚â° (b ++ d)
‚Üí‚â°++ {a} {b} {c} {d} e f rewrite e | f = refl


‚Üí‚â°N++ : {a b c d : List Name} ‚Üí a ‚â°N b ‚Üí c ‚â°N d ‚Üí (a ++ c) ‚â°N (b ++ d)
‚Üí‚â°N++ {a} {b} {c} {d} e f x =
  h1 , h2
  where
    h1 : x ‚àà a ++ c ‚Üí x ‚àà b ++ d
    h1 i with ‚àà-++‚Åª a i
    ... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (fst (e x) p)
    ... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ b (fst (f x) p)

    h2 : x ‚àà b ++ d ‚Üí x ‚àà a ++ c
    h2 i with ‚àà-++‚Åª b i
    ... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (snd (e x) p)
    ... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ a (snd (f x) p)


{--
uptoùïé‚Üí‚â°newChoiceT : {name : Name} {w1 w2 : ùïé¬∑} (a : Term)
                       ‚Üí uptoùïé name w1 w2
                       ‚Üí newChoiceT w1 a ‚â° newChoiceT w2 a
uptoùïé‚Üí‚â°newChoiceT {name} {w1} {w2} a upw =
  ‚â°N‚Üí‚â°freshName
    {domùïé¬∑ w1 ++ namesùïé¬∑ w1 ++ ‚Üìvars (names a)}
    {domùïé¬∑ w2 ++ namesùïé¬∑ w2 ++ ‚Üìvars (names a)}
    (‚â°‚Üí‚â°N (‚Üí‚â°++ (uptoùïé.upwDom upw)
                  (‚Üí‚â°++ (uptoùïé.upwNames upw) refl)))
--}


{--
uptoùïé‚Üí‚â°newChoiceT+ : {name : Name} {w1 w2 : ùïé¬∑} (a : Term)
                       ‚Üí uptoùïé name w1 w2
                       ‚Üí newChoiceT+ w1 a ‚â° newChoiceT+ w2 a
uptoùïé‚Üí‚â°newChoiceT+ {name} {w1} {w2} a upw
  rewrite uptoùïé‚Üí‚â°newChoiceT a upw = refl
--}


-- MOVE to computation
fresh-inst : (w : ùïé¬∑) (a : Term) ‚Üí Term
fresh-inst w a = shiftNameDown 0 (renn 0 (newChoiceT+ w a) a)


{--
uptoùïé‚Üí‚â°fresh-inst : {name : Name} {w1 w2 : ùïé¬∑} (a : Term)
                      ‚Üí uptoùïé name w1 w2
                      ‚Üí fresh-inst w1 a ‚â° fresh-inst w2 a
uptoùïé‚Üí‚â°fresh-inst {name} {w1} {w2} a upw rewrite uptoùïé‚Üí‚â°newChoiceT+ a upw = refl
--}




‚â°pres‚àà : {a b : List Name} {x : Name}
          ‚Üí a ‚â° b
          ‚Üí x ‚àà a
          ‚Üí x ‚àà b
‚â°pres‚àà {a} {b} {x} e i rewrite e = i


‚â°pres¬¨‚àà : {a b : List Name} {x : Name}
          ‚Üí a ‚â° b
          ‚Üí ¬¨ x ‚àà a
          ‚Üí ¬¨ x ‚àà b
‚â°pres¬¨‚àà {a} {b} {x} e ni rewrite e = ni



{--
sameRes-startChoice : (cc : ContConds) (n : ‚Ñï) (w1 w2 : ùïé¬∑)
                      ‚Üí domùïé¬∑ w1 ‚â° domùïé¬∑ w2
                      ‚Üí sameRes w1 w2
                      ‚Üí sameRes (startChoice¬∑ n Res‚ä§ w1) (startChoice¬∑ n Res‚ä§ w2)
sameRes-startChoice cc n w1 w2 eqd same name r =
  c1 , c2
  where
    c1 : compatible¬∑ name (startChoice¬∑ n Res‚ä§ w1) r ‚Üí compatible¬∑ name (startChoice¬∑ n Res‚ä§ w2) r
    c1 compat with n ‚âü name
    ... | yes p rewrite p with Name‚àà‚äé name (domùïé¬∑ w1)
    ... |    inj‚ÇÅ i = ContConds.ccC‚ààstart‚Üê cc name r Res‚ä§ w2 (‚â°pres‚àà eqd i) (fst (same name r) (ContConds.ccC‚ààstart‚Üí cc name r Res‚ä§ w1 i compat))
    ... |    inj‚ÇÇ ni rewrite sym (ContConds.ccC¬¨‚ààstart‚Üí cc name r Res‚ä§ w1 ni compat) = startChoiceCompatible¬∑ Res‚ä§ w2 name (‚â°pres¬¨‚àà eqd ni)
    c1 compat | no p = ContConds.ccC¬¨‚â°start‚Üê cc n name r Res‚ä§ w2 p (fst (same name r) (ContConds.ccC¬¨‚â°start‚Üí cc n name r Res‚ä§ w1 p compat))

    c2 : compatible¬∑ name (startChoice¬∑ n Res‚ä§ w2) r ‚Üí compatible¬∑ name (startChoice¬∑ n Res‚ä§ w1) r
    c2 compat with n ‚âü name
    ... | yes p rewrite p with Name‚àà‚äé name (domùïé¬∑ w2)
    ... |    inj‚ÇÅ i = ContConds.ccC‚ààstart‚Üê cc name r Res‚ä§ w1 (‚â°pres‚àà (sym eqd) i) (snd (same name r) (ContConds.ccC‚ààstart‚Üí cc name r Res‚ä§ w2 i compat))
    ... |    inj‚ÇÇ ni rewrite sym (ContConds.ccC¬¨‚ààstart‚Üí cc name r Res‚ä§ w2 ni compat) = startChoiceCompatible¬∑ Res‚ä§ w1 name (‚â°pres¬¨‚àà (sym eqd) ni)
    c2 compat | no p = ContConds.ccC¬¨‚â°start‚Üê cc n name r Res‚ä§ w1 p (snd (same name r) (ContConds.ccC¬¨‚â°start‚Üí cc n name r Res‚ä§ w2 p compat))
--}



{--
‚Üíuptoùïé-startChoice : (cc : ContConds) {name : Name} {w1 w2 : ùïé¬∑} {r : ren} (n : Name)
                       ‚Üí uptoùïé name w1 w2 r
                       ‚Üí uptoùïé name (startChoice¬∑ n Res‚ä§ w1) (startChoice¬∑ n Res‚ä§ w2) r
‚Üíuptoùïé-startChoice cc {name} {w1} {w2} {r} n upw =
  mkUptoùïé
    -- (ContConds.ccD‚â°start cc n w1 w2 (uptoùïé.upwDom upw))
    -- (‚Üí‚â°namesùïé-start cc n w1 w2 (uptoùïé.upwNames upw))
    -- (sameRes-startChoice cc n w1 w2 (uptoùïé.upwDom upw) (uptoùïé.upwRes upw))
    Œª n1 n2 k d1 d2 i ‚Üí {!!} --(Œª nm k d ‚Üí uptoùïé‚Üí‚â°getT cc k nm name n w1 w2 d (uptoùïé.upwGet upw nm k d))
--}



{--
‚Üíuptoùïé-startNewChoiceT : (cc : ContConds) {name : Name} {w1 w2 : ùïé¬∑} {r : ren} (a : Term)
                           ‚Üí uptoùïé name w1 w2 r
                           ‚Üí uptoùïé name (startNewChoiceT Res‚ä§ w1 a) (startNewChoiceT Res‚ä§ w2 a) r
‚Üíuptoùïé-startNewChoiceT cc {name} {w1} {w2} {r} a upw
  rewrite uptoùïé‚Üí‚â°newChoiceT a upw = ‚Üíuptoùïé-startChoice cc (newChoiceT w2 a) upw
--}



{--
‚ÜíuptoùïégetT-chooseT : (cc : ContConds) (name name' : Name) (w1 w1' : ùïé¬∑) (t : Term)
                 ‚Üí uptoùïé name w1 w1'
                 ‚Üí uptoùïégetT name (chooseT name' w1 t) (chooseT name' w1' t)
‚ÜíuptoùïégetT-chooseT cc name name' w1 w1' t upw n k dn with n ‚âü name'
... | yes p rewrite p = ContConds.ccGget cc name' w1 w1' t k (Œª z ‚Üí uptoùïé.upwGet upw name' z dn) (uptoùïé.upwRes upw) (uptoùïé.upwDom upw) -- we need w1 and w1' to have the same restritions
... | no p = trans (ContConds.ccGcd cc k n name' w1 t p)
                   (trans (uptoùïé.upwGet upw n k dn)
                          (sym (ContConds.ccGcd cc k n name' w1' t p)))
--}


{--
‚ÜísameRes-chooseT : (cc : ContConds) (name : Name) (w1 w2 : ùïé¬∑) (t : Term)
                    ‚Üí sameRes w1 w2
                    ‚Üí sameRes (chooseT name w1 t) (chooseT name w2 t)
‚ÜísameRes-chooseT cc name w1 w2 t same =
  sameRes-trans (sameRes-chooseT cc name w1 t)
                (sameRes-trans same (sameRes-sym (sameRes-chooseT cc name w2 t)))
--}


‚Üí‚â°-namesùïé-chooseT : (cc : ContConds) (w1 w2 : ùïé¬∑) (name : Name) (t : Term)
                       ‚Üí namesùïé¬∑ w1 ‚â° namesùïé¬∑ w2
                       ‚Üí namesùïé¬∑ (chooseT name w1 t) ‚â° namesùïé¬∑ (chooseT name w2 t)
‚Üí‚â°-namesùïé-chooseT cc w1 w2 name t eqn
  rewrite ContConds.ccNchoose‚â° cc name w1 t
        | ContConds.ccNchoose‚â° cc name w2 t = eqn


‚Üí‚â°N-namesùïé-chooseT : (cc : ContConds) (w1 w2 : ùïé¬∑) (name : Name) (t : Term)
                       ‚Üí namesùïé¬∑ w1 ‚â°N namesùïé¬∑ w2
                       ‚Üí namesùïé¬∑ (chooseT name w1 t) ‚â°N namesùïé¬∑ (chooseT name w2 t)
‚Üí‚â°N-namesùïé-chooseT cc w1 w2 name t eqn n
  rewrite ContConds.ccNchoose‚â° cc name w1 t
        | ContConds.ccNchoose‚â° cc name w2 t = eqn n



{--
uptoùïé-chooseT : (cc : ContConds) (name name' : Name) (w1 w1' : ùïé¬∑) (t : Term)
                 ‚Üí uptoùïé name w1 w1'
                 ‚Üí uptoùïé name (chooseT name' w1 t) (chooseT name' w1' t)
uptoùïé-chooseT cc name name' w1 w1' t upw =
  mkUptoùïé
    (‚Üídomùïé-chooseT‚â° cc name' w1 w1' t (uptoùïé.upwDom upw))
    (‚Üí‚â°-namesùïé-chooseT cc w1 w1' name' t (uptoùïé.upwNames upw)) -- we need to assume here that w1 and w1' have the same restrictions and change this requirement to be a set equality instead of a list equality
    (‚ÜísameRes-chooseT cc name' w1 w1' t (uptoùïé.upwRes upw))
    (‚ÜíuptoùïégetT-chooseT cc name name' w1 w1' t upw)
--}


{--
updRel2-CS‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {n : Name} {a : Term}
               ‚Üí updRel2 name f g r (CS n) a
               ‚Üí a ‚â° CS n
updRel2-CS‚Çó‚Üí {name} {f} {g} {r} {n} {.(CS n)} (updRel2-CS .n x) = refl


updRel2-CS‚Çó‚Üí¬¨‚â° : {name : Name} {f g : Term} {r : ren} {n : Name} {a : Term}
               ‚Üí updRel2 name f g r (CS n) a
               ‚Üí ¬¨ n ‚â° name
updRel2-CS‚Çó‚Üí¬¨‚â° {name} {f} {g} {r} {n} {.(CS n)} (updRel2-CS .n x) = x



isHighest‚Ñï2-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (APPLY a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY a b} {v} n name comp
                      ‚Üí ‚àànamesùïé {k} {w} {w'} {APPLY a b} {v} name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p = 0 , LAMBDA t , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , q) rewrite q with is-NUM b
... |       inj‚ÇÅ (j , r) rewrite r with getT j name' w
... |          just t = 0 , CS name' , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          nothing = 0 , CS name' , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ x | inj‚ÇÅ (name' , q) | inj‚ÇÇ r with step‚äé b w
... |          inj‚ÇÅ (b0 , w0 , z) rewrite z = 0 , CS name' , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          inj‚ÇÇ z rewrite z = 0 , CS name' , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w0} {w''} {a0} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h) (snd (snd inw))

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {suc (fst ind)} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      (fst inw , fst (snd inw) , fst (snd (snd (snd (snd (snd ind)))))) ,
      fst (snd (snd (snd (snd (snd (snd ind)))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd (snd ind)))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel2-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel2 n name f g (APPLY a b) w
                           ‚Üí stepsPresUpdRel2 n name f g a w
stepsPresUpdRel2-APPLY‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , inw , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd (snd hv)))))) , fst (snd (snd (snd (snd hv)))) ,
  fst (snd (snd (snd (snd (snd hv))))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd (snd hv)))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish inw





‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel2 name f g (APPLY a‚ÇÅ b‚ÇÅ) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , w' , comp1 , comp2 , r , upw) =
  fst comp1' , fst comp2' , APPLY y1 b‚ÇÅ , APPLY y2 b‚ÇÇ , w3 , w' , snd comp1' , snd comp2' ,
  updRel2-APPLY _ _ _ _ r updb , upw
  where
    comp1' : APPLY a‚ÇÅ b‚ÇÅ ‚áì APPLY y1 b‚ÇÅ from w1 to w3
    comp1' = ‚Üísteps-APPLY b‚ÇÅ k1 comp1

    comp2' : APPLY a‚ÇÇ b‚ÇÇ ‚áì APPLY y2 b‚ÇÇ from w to w'
    comp2' = ‚Üísteps-APPLY b‚ÇÇ k2 comp2


Œ£steps-updRel2-NUM‚Üí : {name : Name} {f g : Term} {r : ren} {m : ‚Ñï} {b : Term} {w1 : ùïé¬∑} {w2 : ùïé¬∑}
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí steps k' (b , w1) ‚â° (v' , w1') √ó updRel2 name f g r (NUM m) v' √ó uptoùïé name w2 w1' r)))
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí steps k' (b , w1) ‚â° (NUM m , w1') √ó uptoùïé name w2 w1'))
Œ£steps-updRel2-NUM‚Üí {name} {f} {g} {r} {m} {b} {w1} {w2} (k' , .(NUM m) , w1' , comp , updRel2-NUM .m , upw) = k' , w1' , comp , upw
--}


{--
uptoùïégetT-chooseT : (cc : ContConds) (name : Name) (w : ùïé¬∑) (r : ren) (t : Term)
                     ‚Üí uptoùïégetT name w (chooseT name w t) r
uptoùïégetT-chooseT cc name w r t n1 n2 k d1 d2 i
  rewrite ContConds.ccGcd cc k n2 name w t d2 =
  {!!} --sym (ContConds.ccGcd cc k nm name w t d)
--}


{--
uptoùïé-chooseT0if : (cc : ContConds) (name : Name) (w : ùïé¬∑) (r : ren) (n m : ‚Ñï)
                    ‚Üí uptoùïé name w (chooseT0if name w n m) r
uptoùïé-chooseT0if cc name w r n m with n <? m
... | yes x =
  mkUptoùïé
--    (sym (ContConds.ccDchoose‚â° cc name w (NUM m)))
--    (sym (ContConds.ccNchoose‚â° cc name w (NUM m)))
--    (sameRes-sym (sameRes-chooseT cc name w (NUM m)))
    (uptoùïégetT-chooseT cc name w r (NUM m))
... | no x = mkUptoùïé {--refl refl (sameRes-refl w)--} (Œª n1 n2 k d1 d2 r ‚Üí {!!} {--refl--})
--}




-- subRen r1 r2 means that r1 is a sub-renaming of r2
data subRen (l k : List Name) : ren ‚Üí ren ‚Üí Set where
  subRen-refl : (r : ren) ‚Üí subRen l k r r
  subRen-trans : (a b : Name) (r1 r2 : ren)
                 ‚Üí ¬¨ a ‚àà l -- The new names picked are 'fresh' names
                 ‚Üí ¬¨ b ‚àà k
                 ‚Üí subRen l k r1 r2
                 ‚Üí subRen l k r1 ((a , b) ‚à∑ r2)


presUpdRel2 : (n : ‚Ñï) (name : Name) (f g : Term) (k : ‚Ñï) ‚Üí Set(lsuc L)
presUpdRel2 n name f g k =
  {a b v : Term} {w0 w1 w2 w : ùïé¬∑} {r : ren}
  ‚Üí updRel2 name f g r a b
  ‚Üí names a ‚äÜ domùïé¬∑ w1
  ‚Üí names b ‚äÜ domùïé¬∑ w
  ‚Üí name ‚àà domùïé¬∑ w
--  ‚Üí names f ‚äÜ domùïé¬∑ w1
--  ‚Üí names g ‚äÜ domùïé¬∑ w
  ‚Üí uptoùïé name w1 w r
  ‚Üí compatible¬∑ name w1 Res‚ä§
  ‚Üí compatible¬∑ name w Res‚ä§
  ‚Üí ‚àÄùïé-get0-NUM w1 name
-- We use ‚àÄùïé-‚áì‚àº‚Ñï instead of strongMonEq because if g could change the target world, it could be used for...
--  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚àÄùïé-‚áì‚àº‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí w0 ‚äë¬∑ w1
  ‚Üí w0 ‚äë¬∑ w
  ‚Üí ‚àÄùïé w0 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚áõ!same‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
  ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n name comp
  ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {v} name comp
  ‚Üí isValue v
  ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ren (Œª r' ‚Üí
      steps k' (b , w) ‚â° (v' , w')
      √ó updRel2 name f g r' v v'
      √ó uptoùïé name w2 w' r'
      √ó subRen (domùïé¬∑ w1) (domùïé¬∑ w) r r'))))


stepsPresUpdRel2 : (n : ‚Ñï) (name : Name) (f g : Term) (b : Term) (w : ùïé¬∑) ‚Üí Set(lsuc L)
stepsPresUpdRel2 n name f g b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£ (steps k (b , w) ‚â° (v , w')) (Œª comp ‚Üí
    isValue v
    √ó isHighest‚Ñï {k} {w} {w'} {b} {v} n name comp
    √ó ‚àànamesùïé {k} {w} {w'} {b} {v} name comp
    √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel2 n name f g k')))))


-- NOTE: We won't be able to prove that for impure terms x because it might read a choice
-- and return 2 different values in the two worlds w2 and w
Œ£stepsUpdRel2 : (name : Name) (f g : Term) (x : Term) (w1 w2 : ùïé¬∑) (b : Term) (w : ùïé¬∑) (r : ren) ‚Üí Set(1‚Ñì Level.‚äî L)
Œ£stepsUpdRel2 name f g x w1 w2 b w r =
  Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ Term (Œª y1 ‚Üí Œ£ Term (Œª y2 ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ren (Œª r' ‚Üí
    steps k1 (x , w2) ‚â° (y1 , w3)
    √ó steps k2 (b , w) ‚â° (y2 , w')
    √ó updRel2 name f g r' y1 y2
    √ó uptoùïé name w3 w' r'
    √ó subRen (domùïé¬∑ w1) (domùïé¬∑ w) r r')))))))



abstract
  isHighest‚Ñï2-APPLY‚ÇÇ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {name' : Name} {b v : Term} {w w' : ùïé¬∑}
                        ‚Üí (comp : steps k (APPLY (CS name') b , w) ‚â° (v , w'))
                        ‚Üí isValue v
                        ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY (CS name') b} {v} n name comp
                        ‚Üí ‚àànamesùïé {k} {w} {w'} {APPLY (CS name') b} {v} name comp
                        ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                            isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                            √ó ‚àànamesùïé {k'} {w} {w''} {b} {u} name comp'
                            √ó isValue u
                            √ó k' < k))))
  isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {0} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv h inw
    rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
  isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv h inw with is-NUM b
  ... | inj‚ÇÅ (j , r) rewrite r with getT j name' w
  ... |    just t = 0 , NUM j , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
  ... |    nothing = 0 , NUM j , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
  isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ r with step‚äé b w
  ... |    inj‚ÇÅ (b0 , w0 , z) rewrite z = suc (fst ind) , concl
    where
      ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                               isHighest‚Ñï {k'} {w0} {w''} {b0} {u} n name comp'
                               √ó ‚àànamesùïé {k'} {w0} {w''} {b0} {u} name comp'
                               √ó isValue u
                               √ó k' < k))))
      ind = isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {k} {name} {f} {g} {name'} {b0} {v} {w0} {w'} comp isv (snd h) (snd (snd inw))

      concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                            isHighest‚Ñï {suc (fst ind)} {w} {w''} {b} {u} n name comp'
                            √ó ‚àànamesùïé {suc (fst ind)} {w} {w''} {b} {u} name comp'
                            √ó isValue u
                            √ó suc (fst ind) < suc k)))
      concl rewrite z =
        fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
        (fst h , fst (snd (snd (snd (snd ind))))) ,
        (fst inw , fst (snd inw) , fst (snd (snd (snd (snd (snd ind)))))) ,
        fst (snd (snd (snd (snd (snd (snd ind)))))) ,
        _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd (snd ind)))))))
  ... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



abstract
  stepsPresUpdRel2-APPLY‚ÇÇ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {name' : Name} {b : Term} {w : ùïé¬∑}
                             ‚Üí stepsPresUpdRel2 n name f g (APPLY (CS name') b) w
                             ‚Üí stepsPresUpdRel2 n name f g b w
  stepsPresUpdRel2-APPLY‚ÇÇ‚Üí {n} {name} {f} {g} {name'} {b} {w} (k , v , w' , comp , isv , ish , inw , ind) =
    fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
    fst (snd (snd (snd (snd (snd (snd hv)))))) , fst (snd (snd (snd (snd hv)))) ,
    fst (snd (snd (snd (snd (snd hv))))) ,
    Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd (snd hv)))))))))
    where
      hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                              isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                              √ó ‚àànamesùïé {k'} {w} {w''} {b} {u} name comp'
                              √ó isValue u
                              √ó k' < k))))
      hv = isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {k} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv ish inw


‚ÜíŒ£-steps-APPLY-CS : (n : ‚Ñï) (a b : Term) (w w' : ùïé¬∑) (name : Name)
                 ‚Üí steps n (a , w) ‚â° (b , w')
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí steps m (APPLY (CS name) a , w) ‚â° (APPLY (CS name) b , w'))
‚ÜíŒ£-steps-APPLY-CS n a b w w' name h =
  fst (Œ£-steps-APPLY-CS‚â§ n a b w w' name h) ,
  snd (snd (Œ£-steps-APPLY-CS‚â§ n a b w w' name h))



dren : ren ‚Üí ren
dren [] = []
dren ((a , b) ‚à∑ r) = (pred a , pred b) ‚à∑ dren r



‚ààren-sucIf‚â§-ren‚Üí : (n name1 name2 : Name) (r : ren)
                    ‚Üí (sucIf‚â§ n name1 , sucIf‚â§ n name2) ‚àà sucIf‚â§-ren n r
                    ‚Üí (name1 , name2) ‚àà r
‚ààren-sucIf‚â§-ren‚Üí n name1 name2 ((a , b) ‚à∑ xs) (here px)
  rewrite sym (sucIf‚â§-inj {n} {name1} {a} (pair-inj‚ÇÅ px))
        | sym (sucIf‚â§-inj {n} {name2} {b} (pair-inj‚ÇÇ px)) = here refl
‚ààren-sucIf‚â§-ren‚Üí n name1 name2 (x ‚à∑ xs) (there i) = there (‚ààren-sucIf‚â§-ren‚Üí n name1 name2 xs i)



‚Üí‚ààren‚Çó-sucIf‚â§-ren : {name : Name} {r : ren} (n : Name)
                    ‚Üí name ‚àà ren‚Çó r
                    ‚Üí sucIf‚â§ n name ‚àà ren‚Çó (sucIf‚â§-ren n r)
‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {[]} n ()
‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (here px) rewrite sym px = here refl
‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (there i) = there (‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {r} n i)


‚Üí‚ààren·µ£-sucIf‚â§-ren : {name : Name} {r : ren} (n : Name)
                    ‚Üí name ‚àà ren·µ£ r
                    ‚Üí sucIf‚â§ n name ‚àà ren·µ£ (sucIf‚â§-ren n r)
‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {[]} n ()
‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (here px) rewrite sym px = here refl
‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (there i) = there (‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {r} n i)


names‚ààren-sucIf‚â§-ren‚Üí : (n name1 name2 : Name) (r : ren)
                         ‚Üí names‚ààren (sucIf‚â§ n name1) (sucIf‚â§ n name2) (sucIf‚â§-ren n r)
                         ‚Üí names‚ààren name1 name2 r
names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 [] e = sucIf‚â§-inj {n} {name1} {name2} e
names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 ((a , b) ‚à∑ r) (inj‚ÇÅ (e‚ÇÅ , e‚ÇÇ)) =
  inj‚ÇÅ (sucIf‚â§-inj {n} {name1} {a} e‚ÇÅ , (sucIf‚â§-inj {n} {name2} {b} e‚ÇÇ))
names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 ((a , b) ‚à∑ r) (inj‚ÇÇ (e‚ÇÅ , e‚ÇÇ , x)) =
  inj‚ÇÇ ((Œª z ‚Üí e‚ÇÅ (‚Üí‚â°sucIf‚â§ z)) , (Œª z ‚Üí e‚ÇÇ (‚Üí‚â°sucIf‚â§ z)) , (names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 r x))



force‚â°shiftNameUp‚Üí : (v : Var) (name : Name) (g : Term) (b : Term)
                      ‚Üí LET (VAR 0) (APPLY (shiftNameUp v g) (VAR 0)) ‚â° shiftNameUp v b
                      ‚Üí b ‚â° LET (VAR 0) (APPLY g (VAR 0))
force‚â°shiftNameUp‚Üí v name g (LET (VAR 0) (APPLY b (VAR 0))) e
  rewrite shiftNameUp-inj {v} {g} {b} (APPLYinj1 (LETinj2 e)) = refl



updRel2-shiftNameUp-LAMBDA‚Üí : (v : Name) {name : Name} {f g : Term} (cf : # f) (cg : # g) {r : ren} {a b t u : Term}
                                ‚Üí t ‚â° shiftNameUp v a
                                ‚Üí u ‚â° shiftNameUp v b
                                ‚Üí updRel2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v g) (sucIf‚â§-ren v r) (LAMBDA t) u
                                ‚Üí ((c : Term)
                                    ‚Üí updRel2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v g) (sucIf‚â§-ren v r) (shiftNameUp v a) (shiftNameUp v c)
                                    ‚Üí updRel2 name f g r a c)
                                ‚Üí updRel2 name f g r (LAMBDA a) b
updRel2-shiftNameUp-LAMBDA‚Üí v {name} {f} {g} cf cg {r} {a} {LAMBDA b} {t} {.(LAMBDA c)} e‚ÇÅ e‚ÇÇ (updRel2-LAMBDA .t c u‚ÇÅ) ind rewrite e‚ÇÅ | LAMinj e‚ÇÇ = updRel2-LAMBDA _ _ (ind b u‚ÇÅ)
updRel2-shiftNameUp-LAMBDA‚Üí v {name} {f} {g} cf cg {r} {a} {LAMBDA b} {.(updBody (sucIf‚â§ v name) (shiftNameUp v f))} {.(force (shiftNameUp v g))} e‚ÇÅ e‚ÇÇ updRel2-upd ind
  rewrite updBody‚â°shiftNameUp‚Üí v name f a e‚ÇÅ
        | force‚â°shiftNameUp‚Üí v name g b (LAMinj e‚ÇÇ) = updRel2-upd

\end{code}
