\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (_‚â¢_ ; sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode
open import MarkovPrinciple


module mpp3 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
            (C : Choice)
            (K : Compatible W C)
            (G : GetChoice {L} W C K)
            (X : ChoiceExt {L} W C)
            (N : NewChoice {L} W C K G)
            (MP : MarkovPrinciple (lsuc(L)))
            (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
  using (‚â°EQ ; ‚â°APPLY ; ‚â°NATREC)
open import terms4(W)(C)(K)(G)(X)(N)(EC)
  using (¬¨Names‚Üí‚áì)
open import terms6(W)(C)(K)(G)(X)(N)(EC)
  using (IFEQ‚áì‚ÇÅ)
open import terms8(W)(C)(K)(G)(X)(N)(EC)
  using (SUM! ; #[0]IFEQ ; #[0]BTRUE ; #[0]BFALSE ; #[1]IFEQ ; #[1]APPLY2 ; #[1]NUM ; #[1]BTRUE ; #[1]BFALSE)

open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚àÄùïé-‚ñ°Func2 ; ‚àÄùïé-‚ñ°Func3)
open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
  using (TSext-equalTypes-equalInType ; #‚áõ-mon)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypesFUN‚Üê ; equalInType-refl ; equalInType-mon ; equalInType-FUN‚Üí ; ‚â°CTerm‚ÜíequalInType ; NUM-equalInType-NAT! ;
         equalInType-NAT!‚Üí ; equalInType-SUM ; isTypeNAT! ; equalInType-FUN ; equalInType-local ; equalInType-PI ;
         eqTypesNEG‚Üê ; ‚Üí‚â°equalTypes ; ‚Üí‚â°equalInType ; equalInType-sym ; equalInType-PI‚Üí ; equalInType-SUM‚Üí ; equalInType-NEG ;
         equalInType-SQUASH‚Üí ; equalInType-EQ‚Üí ; equalInType-EQ ; ‚â°CTerm‚ÜíeqTypes ; equalInType-NEG‚Üí ; isFam)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (isTypeBOOL ; isTypeBOOL! ; sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-NEG-ASSERT‚ÇÇ-APPLY ;
         equalInType-trans ; equalInType-BOOL‚Üí ; ‚ÜíequalInType-BOOL ; equalInType-NEG‚Üí¬¨inh ; ‚ÜíequalInType-SQUASH ;
         ‚ÜíequalInType-BOOL! ; sub0-ASSERT‚ÇÉ-APPLY ; inhType-mon ; equalInType-BOOL!‚Üí ; equalInType-BOOL‚ÇÄ!‚Üí ;
         equalInType-#‚áõ-LR ; equalTypes‚ÜíequalInType ; ‚ÜíequalInType-BOOL‚ÇÄ! ; isTypeBOOL‚ÇÄ!‚Üí ; ‚ÜíequalInType-BOOL‚ÇÄ!-INL ;
         ‚ÜíequalInType-TRUE ; equalInType-EQ‚Üí‚ÇÅ ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ; equalTypes-#‚áõ-left-rev)
open import props4(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalInType-NAT!)
open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#‚áõ‚Çö-left-right-rev ; SUMeq! ; equalInType-SUM! ; equalInType-SUM!‚Üí)
open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ ; #SUM-ASSERT‚ÇÖ ; #ASSERT‚ÇÑ ; #[0]ASSERT‚ÇÑ ; sub0-ASSERT‚ÇÑ-APPLY ; ‚â°ASSERT‚ÇÑ ;
         equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ ; #ASSERT‚ÇÑ‚â°)
open import pure(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-TPURE‚Üí ; #¬¨Names-APPLY ; ¬¨Names‚Üí‚áõ! ; equalInType-TPURE‚Üí‚Çó ; equalInType-TPURE‚Üí·µ£ ; #‚áõ!nv ; #‚áõv ;
         ‚Üí#‚áõ!-APPLY ; APPLY#‚áõ‚Üí#‚áõ!nv ; #‚áõ!-pres-#‚áõ!nv ; #‚áõ!‚Üí‚ààType ; #‚áõ!‚ÜíequalInType)
open import pure2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (Œ†pure‚Üí‚ÇÇ ; #[0]MP-left2-qt‚ÇÑ ; #[0]MP-right2-qt‚ÇÑ ; mpEvalEx ; sub0-fun-mp2-qt‚ÇÑ)

open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#[0]MP-left ; #[0]MP-right ; #[0]MP-left3 ; #[0]MP-left2 ; #[0]MP-right2 ; #[0]MP-left-qt ; #[0]MP-right-qt ;
         #[0]MP-left-qt‚ÇÇ ; #[0]MP-right-qt‚ÇÇ ; #[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ; sub0-fun-mp ; ‚ÜíequalTypes-#MP-left ;
         ‚ÜíequalTypes-#MP-right ; #MP-left ; #MP-right ; sub0-fun-mp‚ÇÑ ; ‚ÜíequalTypes-#MP-left-qt ; ‚ÜíequalTypes-#MP-right-qt ;
         #MP-left-qt ; #MP-right-qt ; sub0-fun-mp‚ÇÇ ; ‚ÜíequalTypes-#MP-left3 ; ‚Üí‚ààType-FUN ;
         #MP-left3 ; ‚Üí‚ààType-PI ; sub0-fun-mp‚ÇÉ ; ‚ÜíequalTypes-#MP-left2 ; sub0-ASSERT‚Çò-APPLY ;
         ‚ÜíequalTypes-#MP-right2 ; #MP-left2 ; #MP-right2 ; sub0-fun-mp‚ÇÜ ; ‚ÜíequalTypes-#MP-left-qt‚ÇÉ ;
         ‚ÜíequalTypes-#MP-right-qt‚ÇÉ ; #MP-left-qt‚ÇÉ ; #MP-right-qt‚ÇÉ ; #[0]MP-right2-qt‚ÇÉ ;
         #MP-right2-qt‚ÇÉ ; isType-MP-right-qt‚ÇÉ-body ; #MP-left2-qt‚ÇÉ ; #ASSERT‚Çò ; inhType-ASSERT‚Çò‚Üí‚ààNAT! ;
         #[0]MP-left2-qt‚ÇÉ ; sub0-fun-mp-qt‚ÇÉ ; #[0]SUM! ; #[1]ASSERT‚Çò ; #[0]ASSERT‚Çò ; ‚â°ASSERT‚Çò ;
         #MP-left‚Çò ; #MP-right‚Çò ; ‚ÜíequalTypes-#MP-right‚Çò ; ‚ÜíequalTypes-#MP-left‚Çò ; #NAT!‚ÜíNAT!‚â° ; ‚â°SUM! ;
         equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò ; equalInType-#‚áõ!-type-rev)
open import mp_props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#MP-left-qt‚Üí ; #MP-left2‚Üí#MP-left ; #MP-left3‚Üí#MP-left2 ; #MP-left2‚Üí#MP-left3 ;
         equalInType-#MP-left-qt‚ÇÉ‚Üí ; ‚ÜíequalInType-#MP-left-qt‚ÇÉ ; ‚ÜíequalTypes-#MP-left2-qt‚ÇÉ ; ‚ÜíequalTypes-#MP-right2-qt‚ÇÉ)
-- MOVE all these usings to a separate file so that we don't have to rely on ExcludedMiddle
open import mp_props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#MPp‚ÇÜ ; ‚ÜíinhType-ASSERT‚ÇÑ-APPLY ; #¬¨Names‚ÜíinhType-ASSERT‚ÇÑ ; strongBool!-BTRUE‚Üí ; equalInType-ASSERT‚ÇÑ‚Üí ;
         isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! ; #lamInfSearchP ; #lamInfSearchPP ; #APPLY-#lamInfSearchP-#‚áõ! ;
         #APPLY-#lamInfSearchPP#‚áõ!)
open import mpp2(W)(M)(C)(K)(G)(X)(N)(MP)(EC)
  using (MPp‚Çá-inh‚ÇÇ)
open import mp_search(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#infSearchP ; #‚áõ!same‚Ñï-mon ; #infSearch ; #infSearchF ; #infSearchI ; #infSearch‚áõ‚ÇÅ ; #infSearch‚áõ‚ÇÇ ; #infSearch‚áõ‚ÇÉ ;
         #¬¨Names‚Üí‚áõ! ; #¬¨Names-#infSearch)



#[0]MP-right2-qt‚ÇÖ : CTerm ‚Üí CTerm0
#[0]MP-right2-qt‚ÇÖ f = #[0]SUM! #[0]NAT! (#[1]ASSERT‚Çò (#[1]APPLY (#[1]APPLY ‚åû f ‚åü #[1]VAR1) #[1]VAR0))


#[0]MP-left2-qt‚ÇÖ : CTerm ‚Üí CTerm0
#[0]MP-left2-qt‚ÇÖ f = #[0]NEG (#[0]NEG (#[0]MP-right2-qt‚ÇÖ f))


{--
#MP-right2-qt‚ÇÖ : CTerm ‚Üí CTerm
#MP-right2-qt‚ÇÖ f = #SUM! #NAT! (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))


#MP-left2-qt‚ÇÖ : CTerm ‚Üí CTerm
#MP-left2-qt‚ÇÖ f = #NEG (#NEG (#MP-right2-qt‚ÇÖ f))
--}


sub0-fun-mp2-qt‚ÇÖ : (f a : CTerm)
                 ‚Üí sub0 a (#[0]FUN (#[0]MP-left2-qt‚ÇÖ f) (#[0]MP-right2-qt‚ÇÖ f))
                 ‚â° #FUN (#MP-left‚Çò (#APPLY f a)) (#MP-right‚Çò (#APPLY f a))
sub0-fun-mp2-qt‚ÇÖ f a =
  ‚â°sub0-#[0]FUN
    a (#[0]MP-left2-qt‚ÇÖ f) (#[0]MP-right2-qt‚ÇÖ f) (#MP-left‚Çò (#APPLY f a)) (#MP-right‚Çò (#APPLY f a))
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SUM! refl (‚â°NATREC (‚â°APPLY (‚â°APPLY e1 e2) refl) refl refl)))))
    (CTerm‚â° (‚â°SUM! refl (‚â°ASSERT‚Çò (‚Üí‚â°APPLY (‚â°APPLY e1 e2) refl))))
  where
    e1 : shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚åú CTerm‚ÜíCTerm1 f ‚åù)
         ‚â° ‚åú f ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | CTerm‚ÜíCTerm1‚ÜíTerm f
             | #subv 1 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f) | #shiftDown 1 f = refl

    e2 : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e2 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


‚Üí‚Ñï‚Üíùîπ : CTerm ‚Üí CTerm
‚Üí‚Ñï‚Üíùîπ f = #LAMBDA (#[0]IFEQ (#[0]APPLY ‚åû f ‚åü #[0]VAR) (#[0]NUM 0) #[0]BTRUE #[0]BFALSE)


‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ : CTerm ‚Üí CTerm
‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f = #LAMBDA (#[0]LAMBDA (#[1]IFEQ (#[1]APPLY2 ‚åû f ‚åü #[1]VAR1 #[1]VAR0) (#[1]NUM 0) #[1]BTRUE #[1]BFALSE))


#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ!-sub‚ÇÅ : (f a : CTerm)
                    ‚Üí ‚åú ‚Üí‚Ñï‚Üíùîπ (#APPLY f a) ‚åù
                    ‚â° ‚åú sub0 a (#[0]LAMBDA (#[1]IFEQ (#[1]APPLY2 (CTerm‚ÜíCTerm1 f) #[1]VAR1 #[1]VAR0) (#[1]NUM 0) #[1]BTRUE #[1]BFALSE)) ‚åù
#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ!-sub‚ÇÅ f a
  rewrite #shiftUp 0 a | #shiftUp 0 a
        | #subv 1 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #shiftDown 1 f
        | #shiftDown 1 a
  = refl


#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ! : {w : ùïé¬∑} {f a : CTerm}
               ‚Üí #APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a #‚áõ! ‚Üí‚Ñï‚Üíùîπ (#APPLY f a) at w
#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ! {w} {f} {a} =
  ‚â°‚ÜíAPPLY-LAMBDA‚áõ! w
    ‚åú #[0]LAMBDA (#[1]IFEQ (#[1]APPLY2 ‚åû f ‚åü #[1]VAR1 #[1]VAR0) (#[1]NUM 0) #[1]BTRUE #[1]BFALSE) ‚åù
    ‚åú a ‚åù
    ‚åú ‚Üí‚Ñï‚Üíùîπ (#APPLY f a) ‚åù
    (#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ!-sub‚ÇÅ f a)


#APPLY‚Üí‚Ñï‚Üíùîπ-sub‚ÇÅ : (f n : CTerm)
                ‚Üí ‚åú #IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE ‚åù
                ‚â° ‚åú sub0 n (#[0]IFEQ (#[0]APPLY (CTerm‚ÜíCTerm0 f) #[0]VAR) (#[0]NUM 0) #[0]BTRUE #[0]BFALSE) ‚åù
#APPLY‚Üí‚Ñï‚Üíùîπ-sub‚ÇÅ f n
  rewrite #shiftUp 0 n | #shiftDown 0 n
        | #subv 0 ‚åú n ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #shiftDown 0 f
  = refl


-- from ac2.lagda
IFEQ#‚áõ!‚ÇÅ : {w : ùïé¬∑} {n m a u v : CTerm}
         ‚Üí n #‚áõ! m at w
         ‚Üí #IFEQ n a u v #‚áõ! #IFEQ m a u v at w
IFEQ#‚áõ!‚ÇÅ {w} {n} {m} {a} {u} {v} comp w1 e1 = lift (IFEQ‚áì‚ÇÅ (lower (comp w1 e1)))


IFEQ#‚áõ!= : {k j : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
         ‚Üí j ‚â° k
         ‚Üí #IFEQ (#NUM j) (#NUM k) a b #‚áõ! a at w
IFEQ#‚áõ!= {k} {j} {w} {a} {b} lekj w1 e1 = lift (1 , c)
  where
    c : steps 1 (‚åú #IFEQ (#NUM j) (#NUM k) a b ‚åù , w1) ‚â° (‚åú a ‚åù , w1)
    c with j ‚âü k
    ... | yes p = refl
    ... | no p = ‚ä•-elim (p lekj)


IFEQ#‚áõ!¬¨= : {k j : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
         ‚Üí ¬¨ j ‚â° k
         ‚Üí #IFEQ (#NUM j) (#NUM k) a b #‚áõ! b at w
IFEQ#‚áõ!¬¨= {k} {j} {w} {a} {b} lekj w1 e1 = lift (1 , c)
  where
    c : steps 1 (‚åú #IFEQ (#NUM j) (#NUM k) a b ‚åù , w1) ‚â° (‚åú b ‚åù , w1)
    c with j ‚âü k
    ... | yes p = ‚ä•-elim (‚ä•-elim (lekj p))
    ... | no p = refl


#APPLY‚Üí‚Ñï‚Üíùîπ0 : (w : ùïé¬∑) (f n : CTerm)
            ‚Üí #APPLY f n #‚áõ! #N0 at w
            ‚Üí #APPLY (‚Üí‚Ñï‚Üíùîπ f) n #‚áõ! #BTRUE at w
#APPLY‚Üí‚Ñï‚Üíùîπ0 w f n c =
  #‚áõ!-trans
    {w}
    {#APPLY (‚Üí‚Ñï‚Üíùîπ f) n}
    {#IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE}
    {#BTRUE}
    (‚â°‚ÜíAPPLY-LAMBDA‚áõ! w
       ‚åú #[0]IFEQ (#[0]APPLY ‚åû f ‚åü #[0]VAR) (#[0]NUM 0) #[0]BTRUE #[0]BFALSE ‚åù
       ‚åú n ‚åù
       ‚åú #IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE ‚åù
       (#APPLY‚Üí‚Ñï‚Üíùîπ-sub‚ÇÅ f n))
    (#‚áõ!-trans
      {w}
      {#IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE}
      {#IFEQ #N0 #N0 #BTRUE #BFALSE}
      {#BTRUE}
      (IFEQ#‚áõ!‚ÇÅ {w} {#APPLY f n} {#N0} {#N0} {#BTRUE} {#BFALSE} c)
      (IFEQ#‚áõ!= {0} {0} {w} {#BTRUE} {#BFALSE} refl))


#APPLY‚Üí‚Ñï‚Üíùîπs : (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
            ‚Üí #APPLY f n #‚áõ! #NUM (suc k) at w
            ‚Üí #APPLY (‚Üí‚Ñï‚Üíùîπ f) n #‚áõ! #BFALSE at w
#APPLY‚Üí‚Ñï‚Üíùîπs w f n k c =
  #‚áõ!-trans
    {w}
    {#APPLY (‚Üí‚Ñï‚Üíùîπ f) n}
    {#IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE}
    {#BFALSE}
    (‚â°‚ÜíAPPLY-LAMBDA‚áõ! w
       ‚åú #[0]IFEQ (#[0]APPLY ‚åû f ‚åü #[0]VAR) (#[0]NUM 0) #[0]BTRUE #[0]BFALSE ‚åù
       ‚åú n ‚åù
       ‚åú #IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE ‚åù
       (#APPLY‚Üí‚Ñï‚Üíùîπ-sub‚ÇÅ f n))
    (#‚áõ!-trans
      {w}
      {#IFEQ (#APPLY f n) #N0 #BTRUE #BFALSE}
      {#IFEQ (#NUM (suc k)) #N0 #BTRUE #BFALSE}
      {#BFALSE}
      (IFEQ#‚áõ!‚ÇÅ {w} {#APPLY f n} {#NUM (suc k)} {#N0} {#BTRUE} {#BFALSE} c)
      (IFEQ#‚áõ!¬¨= {0} {suc k} {w} {#BTRUE} {#BFALSE} Œª ()))


equalInType‚Üí‚Ñï‚Üíùîπ : {i : ‚Ñï} {w : ùïé¬∑} {f g : CTerm}
                ‚Üí equalInType i w (#FUN #NAT! #NAT!) f g
                ‚Üí equalInType i w (#FUN #NAT! #BOOL‚ÇÄ!) (‚Üí‚Ñï‚Üíùîπ f) (‚Üí‚Ñï‚Üíùîπ g)
equalInType‚Üí‚Ñï‚Üíùîπ {i} {w} {f} {g} f‚àà =
  equalInType-FUN
    isTypeNAT!
    (isTypeBOOL‚ÇÄ!‚Üí i w)
    aw
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! a‚ÇÅ a‚ÇÇ
                    ‚Üí equalInType i w' #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a‚ÇÅ) (#APPLY (‚Üí‚Ñï‚Üíùîπ g) a‚ÇÇ))
  aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
    ‚ÜíequalInType-BOOL‚ÇÄ! i w1 (#APPLY (‚Üí‚Ñï‚Üíùîπ f) n‚ÇÅ) (#APPLY (‚Üí‚Ñï‚Üíùîπ g) n‚ÇÇ)
      (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT!‚Üí i w1 (#APPLY f n‚ÇÅ) (#APPLY g n‚ÇÇ) (equalInType-FUN‚Üí f‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà)))
    where
    aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' (#APPLY f n‚ÇÅ) (#APPLY g n‚ÇÇ)
                         ‚Üí #strongBool! w' (#APPLY (‚Üí‚Ñï‚Üíùîπ f) n‚ÇÅ) (#APPLY (‚Üí‚Ñï‚Üíùîπ g) n‚ÇÇ))
    aw1 w2 e2 (0 , c‚ÇÅ , c‚ÇÇ) = #AX , #AX , inj‚ÇÅ (#APPLY‚Üí‚Ñï‚Üíùîπ0 w2 f n‚ÇÅ c‚ÇÅ , #APPLY‚Üí‚Ñï‚Üíùîπ0 w2 g n‚ÇÇ c‚ÇÇ)
    aw1 w2 e2 (suc k , c‚ÇÅ , c‚ÇÇ) = #AX , #AX , inj‚ÇÇ (#APPLY‚Üí‚Ñï‚Üíùîπs w2 f n‚ÇÅ k c‚ÇÅ , #APPLY‚Üí‚Ñï‚Üíùîπs w2 g n‚ÇÇ k c‚ÇÇ)


equalInType‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ : {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm}
                  ‚Üí ‚ààType i w (#FUN #NAT! (#FUN #NAT! #NAT!)) f
                  ‚Üí ‚ààType i w (#FUN #NAT! #NAT!‚ÜíBOOL‚ÇÄ!) (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f)
equalInType‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ {i} {w} {f} f‚àà =
  equalInType-FUN isTypeNAT! (isType-#NAT!‚ÜíBOOL‚ÇÄ! w i) aw
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! a‚ÇÅ a‚ÇÇ
                    ‚Üí equalInType i w' #NAT!‚ÜíBOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a‚ÇÅ) (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a‚ÇÇ))
  aw w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
    ‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíBOOL‚ÇÄ!‚â°)
      (equalInType-#‚áõ‚Çö-left-right-rev
         {i} {w1} {#FUN #NAT! #BOOL‚ÇÄ!}
         {#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a‚ÇÅ} {‚Üí‚Ñï‚Üíùîπ (#APPLY f a‚ÇÅ)}
         {#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a‚ÇÇ} {‚Üí‚Ñï‚Üíùîπ (#APPLY f a‚ÇÇ)}
         (#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ! {w1} {f} {a‚ÇÅ}) (#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ! {w1} {f} {a‚ÇÇ})
         (equalInType‚Üí‚Ñï‚Üíùîπ {i} {w1} {#APPLY f a‚ÇÅ} {#APPLY f a‚ÇÇ} (equalInType-FUN‚Üí f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà)))


equalTypes‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ : {i : ‚Ñï} {w : ùïé¬∑} {f a : CTerm}
                 ‚Üí ‚ààType i w (#FUN #NAT! (#FUN #NAT! #NAT!)) f
                 ‚Üí ‚ààType i w #NAT! a
                 ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a) (‚Üí‚Ñï‚Üíùîπ (#APPLY f a))
equalTypes‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ {i} {w} {f} {a} f‚àà a‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!}
    {#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ f) a}
    {‚Üí‚Ñï‚Üíùîπ (#APPLY f a)}
    {‚Üí‚Ñï‚Üíùîπ (#APPLY f a)}
    {‚Üí‚Ñï‚Üíùîπ (#APPLY f a)}
    (#APPLY‚Üí‚Ñï‚Üí‚Ñï-#‚áõ! {w} {f} {a})
    (#‚áõ!-refl {w} {‚Üí‚Ñï‚Üíùîπ (#APPLY f a)})
    (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíBOOL‚ÇÄ!‚â°) (equalInType‚Üí‚Ñï‚Üíùîπ (equalInType-FUN‚Üí f‚àà w (‚äë-refl¬∑ w) a a a‚àà)))


‚ÜíinhType-ASSERT‚ÇÑ : (i : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                 ‚Üí equalInType i w #BOOL‚ÇÄ! t #BTRUE
                 ‚Üí equalInType i w (#ASSERT‚ÇÑ t) a b
‚ÜíinhType-ASSERT‚ÇÑ i w t a b t‚àà =
  TSext-equalTypes-equalInType i w (#ASSERT‚ÇÑ #BTRUE) (#ASSERT‚ÇÑ t) a b
    (equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ (equalInType-sym t‚àà))
    (equalInType-EQ (isTypeBOOL‚ÇÄ!‚Üí i w) (Mod.‚àÄùïé-‚ñ° M aw))
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí EQeq #BTRUE #BTRUE (equalInType i w' #BOOL‚ÇÄ!) w' a b)
  aw w1 e1 = ‚ÜíequalInType-BOOL‚ÇÄ!-INL i w1 #AX #AX


‚ÜíinhType-ASSERT‚Çò : (i : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                 ‚Üí equalInType i w #NAT! t #N0
                 ‚Üí equalInType i w (#ASSERT‚Çò t) a b
‚ÜíinhType-ASSERT‚Çò i w t a b t‚àà =
  TSext-equalTypes-equalInType i w (#ASSERT‚Çò #N0) (#ASSERT‚Çò t) a b
    (equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò (equalInType-sym t‚àà))
    (equalInType-#‚áõ!-type-rev {i} {w} {#ASSERT‚Çò #N0} {#TRUE} {a} {b}
      (Œª w1 e1 ‚Üí lift (1 , refl))
      (‚ÜíequalInType-TRUE i))


#‚áõ!same‚Ñï-N0‚Üí : {w : ùïé¬∑} {t : CTerm}
             ‚Üí #‚áõ!same‚Ñï w t #N0
             ‚Üí t #‚áõ! #N0 at w
#‚áõ!same‚Ñï-N0‚Üí {w} {t} (k , c‚ÇÅ , c‚ÇÇ)
  rewrite #NUMinj {k} {0} (sym (#‚áõ!‚Üí‚â° {#N0} {#NUM k} {w} c‚ÇÇ tt))
  = c‚ÇÅ


#APPLY‚Üí‚Ñï‚Üíùîπ‚ààBOOL‚ÇÄ! : {i : ‚Ñï} {w : ùïé¬∑} {f a : CTerm}
                  ‚Üí equalInType i w #NAT! (#APPLY f a) #N0
                  ‚Üí equalInType i w #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE
#APPLY‚Üí‚Ñï‚Üíùîπ‚ààBOOL‚ÇÄ! {i} {w} {f} {a} f‚àà =
  ‚ÜíequalInType-BOOL‚ÇÄ! i w (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE
    (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT!‚Üí i w (#APPLY f a) #N0 f‚àà))
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' (#APPLY f a) #N0 ‚Üí #strongBool! w' (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE)
  aw w1 e1 c = #AX , #AX , inj‚ÇÅ (#APPLY‚Üí‚Ñï‚Üíùîπ0 w1 f a (#‚áõ!same‚Ñï-N0‚Üí {w1} {#APPLY f a} c) , #‚áõ!-refl {w1} {#BTRUE})


IFEQ‚áìfrom-to-decomp : (a b c d v : Term) (w w' : ùïé¬∑)
                    ‚Üí IFEQ a b c d ‚áì v from w to w'
                    ‚Üí isValue v
                    ‚Üí Œ£ ùïé¬∑ (Œª w1 ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª m ‚Üí
                        a ‚áì NUM n from w to w1
                      √ó b ‚áì NUM m from w1 to w2
                      √ó ((n ‚â° m √ó c ‚áì v from w2 to w') ‚äé (¬¨ (n ‚â° m) √ó d ‚áì v from w2 to w'))))))
IFEQ‚áìfrom-to-decomp a b c d v w w' (k , comp) isv
  with IFEQ‚ÜíhasValue-decomp k a b c d v w w' comp isv
... | k1 , k2 , k3 , w1 , w2 , n , m , c1 , c2 , inj‚ÇÅ (x , y) , c3 =
  w1 , w2 , n , m , (k1 , c1) , (k2 , c2) , inj‚ÇÅ (x , k3 , y)
... | k1 , k2 , k3 , w1 , w2 , n , m , c1 , c2 , inj‚ÇÇ (x , y) , c3 =
  w1 , w2 , n , m , (k1 , c1) , (k2 , c2) , inj‚ÇÇ (x , k3 , y)


IFEQ‚áìfrom-to-decomp‚ÇÅ : (m : ‚Ñï) (a c d v : Term) (w w' : ùïé¬∑)
                     ‚Üí IFEQ a (NUM m) c d ‚áì v from w to w'
                     ‚Üí isValue v
                     ‚Üí isValue c
                     ‚Üí isValue d
                     ‚Üí (a ‚áì NUM m from w to w' √ó c ‚â° v)
                       ‚äé Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n from w to w' √ó n ‚â¢ m √ó d ‚â° v)
IFEQ‚áìfrom-to-decomp‚ÇÅ m a c d v w w' comp isv isvc isvd
  with IFEQ‚áìfrom-to-decomp a (NUM m) c d v w w' comp isv
... | w1 , w2 , n , m' , c1 , (k1 , c2) , inj‚ÇÅ (x , (k2 , y))
  rewrite x
        | stepsVal (NUM m) w1 k1 tt | NUMinj (sym (pair-inj‚ÇÅ c2)) | sym (pair-inj‚ÇÇ c2)
        | stepsVal c w1 k2 isvc | pair-inj‚ÇÅ y | pair-inj‚ÇÇ y
  = inj‚ÇÅ (c1 , refl)
... | w1 , w2 , n , m' , c1 , (k1 , c2) , inj‚ÇÇ (x , (k2 , y))
  rewrite stepsVal (NUM m) w1 k1 tt | NUMinj (sym (pair-inj‚ÇÅ c2)) | sym (pair-inj‚ÇÇ c2)
        | stepsVal d w1 k2 isvd | pair-inj‚ÇÅ y | pair-inj‚ÇÇ y
  = inj‚ÇÇ (n , c1 , x , refl)


#APPLY‚Üí‚Ñï‚Üíùîπ-INL‚Üí : {w : ùïé¬∑} {f a x : CTerm}
                ‚Üí #APPLY (‚Üí‚Ñï‚Üíùîπ f) a #‚áõ! #INL x at w
                ‚Üí #APPLY f a #‚áõ! #N0 at w
#APPLY‚Üí‚Ñï‚Üíùîπ-INL‚Üí {w} {f} {a} {x} c = c2
  where
  c1 : #IFEQ (#APPLY f a) #N0 #BTRUE #BFALSE #‚áõ! #INL x at w
  c1 = val-#‚áõ!‚Üí {w} {#APPLY (‚Üí‚Ñï‚Üíùîπ f) a} {#IFEQ (#APPLY f a) #N0 #BTRUE #BFALSE} {#INL x} tt
         (‚â°‚ÜíAPPLY-LAMBDA‚áõ! w
           ‚åú #[0]IFEQ (#[0]APPLY ‚åû f ‚åü #[0]VAR) (#[0]NUM 0) #[0]BTRUE #[0]BFALSE ‚åù
           ‚åú a ‚åù
           ‚åú #IFEQ (#APPLY f a) #N0 #BTRUE #BFALSE ‚åù
           (#APPLY‚Üí‚Ñï‚Üíùîπ-sub‚ÇÅ f a))
         c

  c2 : #APPLY f a #‚áõ! #N0 at w
  c2 w1 e1 with IFEQ‚áìfrom-to-decomp‚ÇÅ 0 ‚åú #APPLY f a ‚åù ‚åú #BTRUE ‚åù ‚åú #BFALSE ‚åù ‚åú #INL x ‚åù w1 w1 (lower (c1 w1 e1)) tt tt tt
  ... | inj‚ÇÅ (x‚ÇÅ , x‚ÇÇ) = lift x‚ÇÅ
  ... | inj‚ÇÇ (n , x‚ÇÅ , x‚ÇÇ , ())


#APPLY‚Üí‚Ñï‚Üíùîπ‚ààBOOL‚ÇÄ!‚Üí : {i : ‚Ñï} {w : ùïé¬∑} {f a : CTerm}
                   ‚Üí equalInType i w #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE
                   ‚Üí equalInType i w #NAT! (#APPLY f a) #N0
#APPLY‚Üí‚Ñï‚Üíùîπ‚ààBOOL‚ÇÄ!‚Üí {i} {w} {f} {a} f‚àà =
  ‚ÜíequalInType-NAT! i w (#APPLY f a) #N0 (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-BOOL‚ÇÄ!‚Üí i w (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE f‚àà))
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool! w' (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE ‚Üí #‚áõ!same‚Ñï w' (#APPLY f a) #N0)
  aw w1 e1 c = 0 , #APPLY‚Üí‚Ñï‚Üíùîπ-INL‚Üí {w1} {f} {a} {fst q} (snd q) , #‚áõ!-refl {w1} {#N0}
    where
    q : Œ£ CTerm (Œª x ‚Üí (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #‚áõ! #INL x at w1)
    q = strongBool!-BTRUE‚Üí w1 (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) c


#ASSERT‚Çò‚Üí#ASSERT‚ÇÑ : {i : ‚Ñï} {w : ùïé¬∑} {f a b‚ÇÅ b‚ÇÇ : CTerm}
                  ‚Üí ‚ààType i w (#FUN #NAT! #NAT!) f
                  ‚Üí ‚ààType i w #NAT! a
                  ‚Üí equalInType i w (#ASSERT‚Çò (#APPLY f a)) b‚ÇÅ b‚ÇÇ
                  ‚Üí equalInType i w (#ASSERT‚ÇÑ (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a)) b‚ÇÅ b‚ÇÇ
#ASSERT‚Çò‚Üí#ASSERT‚ÇÑ {i} {w} {f} {a} {b‚ÇÅ} {b‚ÇÇ} f‚àà a‚àà b‚àà =
  ‚ÜíinhType-ASSERT‚ÇÑ i w (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) b‚ÇÅ b‚ÇÇ (#APPLY‚Üí‚Ñï‚Üíùîπ‚ààBOOL‚ÇÄ! {f = f} h)
  where
  h : equalInType i w #NAT! (#APPLY f a) #N0
  h = inhType-ASSERT‚Çò‚Üí‚ààNAT! i w (#APPLY f a) (equalInType-FUN‚Üí f‚àà w (‚äë-refl¬∑ w) a a a‚àà) (b‚ÇÅ , equalInType-refl b‚àà)


#ASSERT‚ÇÑ‚Üí#ASSERT‚Çò : {i : ‚Ñï} {w : ùïé¬∑} {f a b‚ÇÅ b‚ÇÇ : CTerm}
                  ‚Üí ‚ààType i w (#FUN #NAT! #NAT!) f
                  ‚Üí ‚ààType i w #NAT! a
                  ‚Üí equalInType i w (#ASSERT‚ÇÑ (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a)) b‚ÇÅ b‚ÇÇ
                  ‚Üí equalInType i w (#ASSERT‚Çò (#APPLY f a)) b‚ÇÅ b‚ÇÇ
#ASSERT‚ÇÑ‚Üí#ASSERT‚Çò {i} {w} {f} {a} {b‚ÇÅ} {b‚ÇÇ} f‚àà a‚àà b‚àà =
  ‚ÜíinhType-ASSERT‚Çò i w (#APPLY f a) b‚ÇÅ b‚ÇÇ (#APPLY‚Üí‚Ñï‚Üíùîπ‚ààBOOL‚ÇÄ!‚Üí {f = f} h)
  where
  h : equalInType i w #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) #BTRUE
  h = equalInType-EQ‚Üí‚ÇÅ (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÑ‚â° (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a)) b‚àà)


#MP-right‚Çò‚Üí#MP-right2-qt‚ÇÉ : {i : ‚Ñï} {w : ùïé¬∑} {f a b : CTerm}
                          ‚Üí ‚ààType i w (#FUN #NAT! #NAT!) f
                          ‚Üí equalInType i w (#MP-right‚Çò f) a b
                          ‚Üí equalInType i w (#MP-right2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ f)) a b
#MP-right‚Çò‚Üí#MP-right2-qt‚ÇÉ {i} {w} {f} {a} {b} f‚àà a‚àà =
  equalInType-SUM!
    {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR)}
    (Œª _ _ ‚Üí isTypeNAT!)
    aw1 aw2
  where
  aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType i w' #NAT! a b ‚Üí equalInType i w' #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) (#APPLY (‚Üí‚Ñï‚Üíùîπ f) b))
  aw0 = equalInType-FUN‚Üí (equalInType‚Üí‚Ñï‚Üíùîπ f‚àà)

  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                     ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR))))
  aw1 w' e a b ea rewrite sub0-ASSERT‚ÇÑ-APPLY a (‚Üí‚Ñï‚Üíùîπ f) | sub0-ASSERT‚ÇÑ-APPLY b (‚Üí‚Ñï‚Üíùîπ f) = aw2
    where
    eqb : equalInType i w' #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) (#APPLY (‚Üí‚Ñï‚Üíùîπ f) b)
    eqb = aw0 w' e a b ea

    aw2 : equalTypes i w' (#ASSERT‚ÇÑ (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a)) (#ASSERT‚ÇÑ (#APPLY (‚Üí‚Ñï‚Üíùîπ f) b))
    aw2 = equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ eqb

  aw2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!)
                              (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR))))
                              w' a b)
  aw2 = Mod.‚àÄùïé-‚ñ°Func M aw3 (equalInType-SUM!‚Üí {B = #[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR)} a‚àà)
    where
    aw3 : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!)
                                 (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                 w' a b
                        ‚Üí SUMeq! (equalInType i w' #NAT!)
                                 (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR))))
                                 w' a b)
    aw3 w1 e1 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , a‚àà , c‚ÇÅ , c‚ÇÇ , b‚àà) =
      a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , a‚àà , c‚ÇÅ , c‚ÇÇ ,
      ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY a‚ÇÅ (‚Üí‚Ñï‚Üíùîπ f)))
        (#ASSERT‚Çò‚Üí#ASSERT‚ÇÑ (equalInType-mon f‚àà w1 e1) (equalInType-refl a‚àà) (‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚Çò-APPLY a‚ÇÅ f) b‚àà))


#MP-right2-qt‚ÇÉ‚Üí#MP-right‚Çò : {i : ‚Ñï} {w : ùïé¬∑} {f a b : CTerm}
                          ‚Üí ‚ààType i w (#FUN #NAT! #NAT!) f
                          ‚Üí equalInType i w (#MP-right2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ f)) a b
                          ‚Üí equalInType i w (#MP-right‚Çò f) a b
#MP-right2-qt‚ÇÉ‚Üí#MP-right‚Çò {i} {w} {f} {a} {b} f‚àà a‚àà =
  equalInType-SUM! {B = #[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR)} (Œª _ _ ‚Üí isTypeNAT!)
    aw1 aw2
  where
  aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType i w' #NAT! a b ‚Üí equalInType i w' #BOOL‚ÇÄ! (#APPLY (‚Üí‚Ñï‚Üíùîπ f) a) (#APPLY (‚Üí‚Ñï‚Üíùîπ f) b))
  aw0 = equalInType-FUN‚Üí (equalInType‚Üí‚Ñï‚Üíùîπ f‚àà)

  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                     ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
  aw1 w' e a b ea rewrite sub0-ASSERT‚Çò-APPLY a f | sub0-ASSERT‚Çò-APPLY b f =
    equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò (equalInType-FUN‚Üí f‚àà w' e a b ea)

  aw2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!)
                              (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                              w' a b)
  aw2 = Mod.‚àÄùïé-‚ñ°Func M aw3 (equalInType-SUM!‚Üí {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR)} a‚àà)
    where
    aw3 : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!)
                                 (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû ‚Üí‚Ñï‚Üíùîπ f ‚åü #[0]VAR))))
                                 w' a b
                        ‚Üí SUMeq! (equalInType i w' #NAT!)
                                 (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                 w' a b)
    aw3 w1 e1 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , a‚àà , c‚ÇÅ , c‚ÇÇ , b‚àà) =
      a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , a‚àà , c‚ÇÅ , c‚ÇÇ ,
      ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚Çò-APPLY a‚ÇÅ f))
        (#ASSERT‚ÇÑ‚Üí#ASSERT‚Çò (equalInType-mon f‚àà w1 e1) (equalInType-refl a‚àà)
           (‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÑ-APPLY a‚ÇÅ (‚Üí‚Ñï‚Üíùîπ f)) b‚àà))


#MP-left2-qt‚ÇÉ‚Üí#MP-left‚Çò : {i : ‚Ñï} {w : ùïé¬∑} {f a b : CTerm}
                        ‚Üí ‚ààType i w (#FUN #NAT! #NAT!) f
                        ‚Üí equalInType i w (#MP-left2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ f)) a b
                        ‚Üí equalInType i w (#MP-left‚Çò f) a b
#MP-left2-qt‚ÇÉ‚Üí#MP-left‚Çò {i} {w} {f} {a} {b} f‚àà a‚àà =
  equalInType-NEG
    (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP-right‚Çò (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíNAT!‚â°) f‚àà)))
    aw
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#MP-right‚Çò f)) a‚ÇÅ a‚ÇÇ)
  aw w1 e1 x‚ÇÅ x‚ÇÇ x‚àà =
    equalInType-NEG‚Üí a‚àà w1 e1 x‚ÇÅ x‚ÇÇ
      (equalInType-NEG
        (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíBOOL‚ÇÄ!‚â°) (equalInType‚Üí‚Ñï‚Üíùîπ (equalInType-mon f‚àà w1 e1))))
        aw1)
    where
    aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#MP-right2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ f)) a‚ÇÅ a‚ÇÇ)
    aw1 w2 e2 y‚ÇÅ y‚ÇÇ y‚àà =
      equalInType-NEG‚Üí x‚àà w2 e2 y‚ÇÅ y‚ÇÇ (#MP-right2-qt‚ÇÉ‚Üí#MP-right‚Çò (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)) y‚àà)


#MP-left‚Çò‚Üí#MP-left2-qt‚ÇÉ : {i : ‚Ñï} {w : ùïé¬∑} {f a b : CTerm}
                        ‚Üí ‚ààType i w (#FUN #NAT! #NAT!) f
                        ‚Üí equalInType i w (#MP-left‚Çò f) a b
                        ‚Üí equalInType i w (#MP-left2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ f)) a b
#MP-left‚Çò‚Üí#MP-left2-qt‚ÇÉ {i} {w} {f} {a} {b} f‚àà a‚àà =
  equalInType-NEG
    (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíBOOL‚ÇÄ!‚â°) (equalInType‚Üí‚Ñï‚Üíùîπ f‚àà))))
    aw
  where
  aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#MP-right2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ f))) a‚ÇÅ a‚ÇÇ)
  aw w1 e1 x‚ÇÅ x‚ÇÇ x‚àà =
    equalInType-NEG‚Üí a‚àà w1 e1 x‚ÇÅ x‚ÇÇ
      (equalInType-NEG
        (‚ÜíequalTypes-#MP-right‚Çò (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíNAT!‚â°) (equalInType-mon f‚àà w1 e1)))
        aw1)
     where
     aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#MP-right‚Çò f) a‚ÇÅ a‚ÇÇ)
     aw1 w2 e2 y‚ÇÅ y‚ÇÇ y‚àà =
       equalInType-NEG‚Üí x‚àà w2 e2 y‚ÇÅ y‚ÇÇ (#MP-right‚Çò‚Üí#MP-right2-qt‚ÇÉ (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)) y‚àà)


#¬¨Names‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ : {t : CTerm}
              ‚Üí #¬¨Names t
              ‚Üí #¬¨Names (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ t)
#¬¨Names‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ {t} h rewrite h = refl


#¬¨Enc‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ : {t : CTerm}
              ‚Üí #¬¨Enc t
              ‚Üí #¬¨Enc (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ t)
#¬¨Enc‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ {t} h rewrite h = refl


#MPeval : CTerm ‚Üí CTerm
#MPeval eval = #PI #NAT! (#[0]FUN (#[0]MP-left2-qt‚ÇÖ eval) (#[0]MP-right2-qt‚ÇÖ eval))


#MPevalExt : CTerm ‚Üí CTerm
#MPevalExt eval = (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP)


-- This is a variant of MPp‚Çá-inh‚ÇÇ that uses SUM! instead of SUM and NAT! instead of BOOL‚ÇÄ! (for the MLTT translation)
MPp‚Çá-inh‚ÇÉ : (i : ‚Ñï) (w : ùïé¬∑) (eval : CTerm)
          ‚Üí #¬¨Names eval
          ‚Üí #¬¨Enc eval
          ‚Üí ‚ààType i w (#FUN #NAT! (#FUN #NAT! #NAT!)) eval
          ‚Üí ‚ààType i w (#MPeval eval) (#MPevalExt eval)
MPp‚Çá-inh‚ÇÉ i w eval nnf nef eval‚àà =
  equalInType-PI
    {B = #[0]FUN (#[0]MP-left2-qt‚ÇÖ eval) (#[0]MP-right2-qt‚ÇÖ eval)}
    (Œª w' e' ‚Üí isTypeNAT! {w'} {i})
    aw1 aw2
  where
  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' #NAT! a‚ÇÅ a‚ÇÇ)
                     ‚Üí equalTypes i w' (sub0 a‚ÇÅ (#[0]FUN (#[0]MP-left2-qt‚ÇÖ eval) (#[0]MP-right2-qt‚ÇÖ eval)))
                                       (sub0 a‚ÇÇ (#[0]FUN (#[0]MP-left2-qt‚ÇÖ eval) (#[0]MP-right2-qt‚ÇÖ eval))))
  aw1 w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
    ‚â°CTerm‚ÜíeqTypes (sym (sub0-fun-mp2-qt‚ÇÖ eval n‚ÇÅ)) (sym (sub0-fun-mp2-qt‚ÇÖ eval n‚ÇÇ))
      (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left‚Çò (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíNAT!‚â°) (equalInType-FUN‚Üí eval‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà)))
                   (‚ÜíequalTypes-#MP-right‚Çò (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíNAT!‚â°) (equalInType-FUN‚Üí eval‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà))))

  aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! a‚ÇÅ a‚ÇÇ
                     ‚Üí equalInType i w' (sub0 a‚ÇÅ (#[0]FUN (#[0]MP-left2-qt‚ÇÖ eval) (#[0]MP-right2-qt‚ÇÖ eval)))
                                        (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) a‚ÇÅ)
                                        (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) a‚ÇÇ))
  aw2 w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
    ‚â°CTerm‚ÜíequalInType (sym (sub0-fun-mp2-qt‚ÇÖ eval n‚ÇÅ))
      (equalInType-FUN
        (‚ÜíequalTypes-#MP-left‚Çò (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíNAT!‚â°) (equalInType-refl (equalInType-FUN‚Üí eval‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà))))
        (‚ÜíequalTypes-#MP-right‚Çò (‚â°CTerm‚ÜíequalInType (sym #NAT!‚ÜíNAT!‚â°) (equalInType-refl (equalInType-FUN‚Üí eval‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà))))
        aw3)
    where
    aw3' : equalInType i w1 (#FUN (#MP-left2-qt‚ÇÉ (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ)) (#MP-right2-qt‚ÇÉ (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ)))
                            (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) n‚ÇÅ)
                            (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) n‚ÇÇ)
    aw3' = ‚â°CTerm‚ÜíequalInType (sub0-fun-mp2-qt‚ÇÑ (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ)
                              (snd (snd (equalInType-PI‚Üí
                                           {B = #[0]FUN (#[0]MP-left2-qt‚ÇÑ (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval)) (#[0]MP-right2-qt‚ÇÑ (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval))}
                                           (MPp‚Çá-inh‚ÇÇ i w (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval)
                                                      (#¬¨Names‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ {eval} nnf)
                                                      (#¬¨Enc‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ {eval} nef)
                                                      (equalInType‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval‚àà))))
                                   w1 e1 n‚ÇÅ n‚ÇÇ n‚àà)

    aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left‚Çò (#APPLY eval n‚ÇÅ)) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right‚Çò (#APPLY eval n‚ÇÅ))
                                      (#APPLY (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) n‚ÇÅ) a‚ÇÅ)
                                      (#APPLY (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) n‚ÇÇ) a‚ÇÇ))
    aw3 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà =
      #MP-right2-qt‚ÇÉ‚Üí#MP-right‚Çò
        (equalInType-FUN‚Üí eval‚àà w2 (‚äë-trans¬∑ e1 e2) n‚ÇÅ n‚ÇÅ (equalInType-mon (equalInType-refl n‚àà) w2 e2))
        (TSext-equalTypes-equalInType i w2
           (#MP-right2-qt‚ÇÉ (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ))
           (#MP-right2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ (#APPLY eval n‚ÇÅ)))
           _ _
           (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ (equalTypes‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ (equalInType-mon eval‚àà w2 (‚äë-trans¬∑ e1 e2))
                                                         (equalInType-mon (equalInType-refl n‚àà) w2 e2)))
           aw4)
      where
      aw6 : equalInType i w2 (#MP-left2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ (#APPLY eval n‚ÇÅ))) a‚ÇÅ a‚ÇÇ
      aw6 = #MP-left‚Çò‚Üí#MP-left2-qt‚ÇÉ (equalInType-FUN‚Üí eval‚àà w2 (‚äë-trans¬∑ e1 e2) n‚ÇÅ n‚ÇÅ (equalInType-mon (equalInType-refl n‚àà) w2 e2)) a‚àà

      aw5 : equalInType i w2 (#MP-left2-qt‚ÇÉ (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ)) a‚ÇÅ a‚ÇÇ
      aw5 = TSext-equalTypes-equalInType i w2
              (#MP-left2-qt‚ÇÉ (‚Üí‚Ñï‚Üíùîπ (#APPLY eval n‚ÇÅ)))
              (#MP-left2-qt‚ÇÉ (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ))
              a‚ÇÅ a‚ÇÇ
              (‚ÜíequalTypes-#MP-left2-qt‚ÇÉ
                (equalInType-sym (equalTypes‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ (equalInType-mon eval‚àà w2 (‚äë-trans¬∑ e1 e2))
                                                   (equalInType-mon (equalInType-refl n‚àà) w2 e2))))
              aw6

      aw4 : equalInType i w2 (#MP-right2-qt‚ÇÉ (#APPLY (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) n‚ÇÅ))
                             (#APPLY (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) n‚ÇÅ) a‚ÇÅ)
                             (#APPLY (#APPLY (mpEvalEx (‚Üí‚Ñï‚Üí‚Ñï‚Üíùîπ eval) #lamInfSearchP) n‚ÇÇ) a‚ÇÇ)
      aw4 = equalInType-FUN‚Üí aw3' w2 e2 a‚ÇÅ a‚ÇÇ aw5

\end{code}
