\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
--open import Relation.Binary.PropositionalEquality hiding ([_] ; Extensionality) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
--open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Bool using (Bool ; true ; false ; if_then_else_)
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
--open import Agda.Builtin.String
--open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Data.List.Properties
--open import Function.Inverse using (Inverse)
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms


module worldInstanceRef3 (E : Extensionality 0‚Ñì 0‚Ñì) where

true‚â†false : ¬¨ true ‚â° false
true‚â†false ()


‚äébool : (b : Bool) ‚Üí b ‚â° true ‚äé b ‚â° false
‚äébool true = inj‚ÇÅ refl
‚äébool false = inj‚ÇÇ refl


_‚â°·µá_ : (a b : Bool) ‚Üí a ‚â° b ‚äé ¬¨ a ‚â° b
false ‚â°·µá false = inj‚ÇÅ refl
false ‚â°·µá true = inj‚ÇÇ (Œª ())
true ‚â°·µá false = inj‚ÇÇ (Œª ())
true ‚â°·µá true = inj‚ÇÅ refl
\end{code}



This provides an instance of world and choice for choice sequences


\begin{code}
B‚ÜíC : Bool ‚Üí CTerm
B‚ÜíC true = #BTRUE
B‚ÜíC false = #BFALSE


-- We could use Bools instead but then in choiceBarInstance.lagda, we have to pick a better type that contains only choices.
-- Could instead ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ‚Üí in choiceBar have an assumption about a and b being choices?
open import choice

¬¨seq-choice : (c : Bool) ‚Üí #¬¨Seq (B‚ÜíC c)
¬¨seq-choice true  = refl
¬¨seq-choice false = refl

¬¨enc-choice : (c : Bool) ‚Üí #¬¨Enc (B‚ÜíC c)
¬¨enc-choice true  = refl
¬¨enc-choice false = refl

choiceRef : Choice
choiceRef = mkChoice Bool B‚ÜíC ¬¨seq-choice ¬¨enc-choice --B‚ÜíC-inj

open import choiceDef{1‚Ñì}(choiceRef)


-- The Bool says whether the cell is "frozen"
record Cell : Set‚ÇÅ where
  constructor cell
  field
    name : Name
    r : Res{0‚Ñì}
    v : Maybe ‚ÑÇ¬∑


-- Worlds - entries are added at the end of the list
world : Set‚ÇÅ
world = List Cell


wdom : world ‚Üí List Name
wdom [] = []
wdom (cell name _ _ ‚à∑ w) = name ‚à∑ wdom w


wnames : world ‚Üí List Name
wnames w = []


update : (n : Name) (v : ‚ÑÇ¬∑) (w : world) ‚Üí world
update _ _ [] = []
-- We leave 'just' cells alone
update n v (cell name r (just x) ‚à∑ w) with n ‚âü name
... | yes p = cell name r (just x) ‚à∑ w
... | no  p = cell name r (just x) ‚à∑ update n v w
-- We might update a 'nothing' cell
update n v (cell name r nothing ‚à∑ w) with n ‚âü name
... | yes p = cell name r (just v) ‚à∑ w
... | no  p = cell name r nothing ‚à∑ update n v w


newCell : (n : Name) (r : Res{0‚Ñì}) (w : world) ‚Üí world
newCell n r w = cell n r nothing ‚à∑ w


getRef : Name ‚Üí world ‚Üí Maybe Cell
getRef name [] = nothing
getRef name (cell n r v ‚à∑ w) with name ‚âü n
... | yes p = just (cell n r v)
... | no p = getRef name w


M‚ÑÇ¬∑ : Set
M‚ÑÇ¬∑ = Maybe ‚ÑÇ¬∑


‚ààworld : (n : Name) (r : Res{0‚Ñì}) (v : M‚ÑÇ¬∑) (w : world) ‚Üí Set‚ÇÅ
‚ààworld n r v w = getRef n w ‚â° just (cell n r v)


hasRes : (c : Name) (w : world) (r : Res{0‚Ñì}) ‚Üí Set‚ÇÅ
hasRes c w r = Œ£ M‚ÑÇ¬∑ (Œª v ‚Üí ‚ààworld c r v w)


data _‚âº_ : (w2 : world) (w1 : world) ‚Üí Set‚ÇÅ where
  ‚âº-refl  : (w : world) ‚Üí w ‚âº w
  ‚âº-trans : {w1 w2 w3 : world} ‚Üí w1 ‚âº w2 ‚Üí w2 ‚âº w3 ‚Üí w1 ‚âº w3
  upd     : (w : world) (n : Name) (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑)
          ‚Üí hasRes n w r
          ‚Üí ‚ãÜ·µ£ r v
          ‚Üí w ‚âº update n v w
  new     : (w : world) (n : Name) (r : Res{0‚Ñì})
          ‚Üí ¬¨ (n ‚àà wdom w) -- 'name' is not in 'w' so that we don't shadow an entry
          ‚Üí w ‚âº newCell n r w


open import world

PossibleWorldsRef : PossibleWorlds
PossibleWorldsRef = mkPossibleWorlds world _‚âº_ ‚âº-refl ‚âº-trans

open import worldDef(PossibleWorldsRef)


resSatRef : (v : M‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí Set
resSatRef nothing r = ‚ä§
resSatRef (just v) r = ‚ãÜ·µ£ r v


-- This is the same as 'hasRef' & enforces satisfiability too
compatibleRef : (c : Name) (w : ùïé¬∑) (r : Res{0‚Ñì}) ‚Üí Set‚ÇÅ
compatibleRef c w r = Œ£ M‚ÑÇ¬∑ (Œª v ‚Üí ‚ààworld c r v w √ó resSatRef v r)


pres-resSatRef : (v v' : M‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí Set
pres-resSatRef v v' r = resSatRef v r ‚Üí resSatRef v' r


pres-resSatRef-refl : (v : M‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí pres-resSatRef v v r
pres-resSatRef-refl v r d = d


pres-resSatRef-trans : {v1 v2 v3 : M‚ÑÇ¬∑} {r : Res{0‚Ñì}}
                     ‚Üí pres-resSatRef v1 v2 r
                     ‚Üí pres-resSatRef v2 v3 r
                     ‚Üí pres-resSatRef v1 v3 r
pres-resSatRef-trans {v1} {v2} {v3} {r} p1 p2 s = p2 (p1 s)


satFrozen : (r : Res{0‚Ñì}) (v v' : M‚ÑÇ¬∑) ‚Üí Set
satFrozen r (just v) (just v') = v ‚â° v'
satFrozen r (just v) nothing   = ‚ä•
satFrozen r nothing  x         = ‚ä§


satFrozen-refl : (r : Res{0‚Ñì}) (v : M‚ÑÇ¬∑) ‚Üí satFrozen r v v
satFrozen-refl r (just x) = refl
satFrozen-refl r nothing = tt


satFrozen-trans : {r : Res{0‚Ñì}} {v1 v2 v3 : M‚ÑÇ¬∑}
                ‚Üí satFrozen r v1 v2
                ‚Üí satFrozen r v2 v3
                ‚Üí satFrozen r v1 v3
satFrozen-trans {r} {just x} {just x‚ÇÅ} {just x‚ÇÇ} s1 s2 = trans s1 s2
satFrozen-trans {r} {nothing} {v2} {v3} s1 s2 = tt


cell-inj1 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : M‚ÑÇ¬∑} ‚Üí cell n1 r1 v1 ‚â° cell n2 r2 v2 ‚Üí n1 ‚â° n2
cell-inj1 refl =  refl


cell-inj2 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : M‚ÑÇ¬∑} ‚Üí cell n1 r1 v1 ‚â° cell n2 r2 v2 ‚Üí r1 ‚â° r2
cell-inj2 refl =  refl


cell-inj3 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : M‚ÑÇ¬∑} ‚Üí cell n1 r1 v1 ‚â° cell n2 r2 v2 ‚Üí v1 ‚â° v2
cell-inj3 refl =  refl


getRef-update-just-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑)
                     ‚Üí getRef name w ‚â° just (cell name r (just v))
                     ‚Üí getRef name (update name v' w) ‚â° just (cell name r (just v))
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e with name ‚âü name‚ÇÅ
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e)
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e | yes p | yes q = refl
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e | no p
  with name ‚âü name‚ÇÅ
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e | no p | yes q = ‚ä•-elim (p q)
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} v' e | no p | no q = getRef-update-just-‚â° {w} v' e
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} v' e
  with name ‚âü name‚ÇÅ
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} v' e | yes p
  rewrite p
  = ‚ä•-elim (¬¨just‚â°nothing (sym (cell-inj3 (just-inj e))))
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} v' e | no p
  with name ‚âü name‚ÇÅ
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} v' e | no p | yes q = ‚ä•-elim (p q)
getRef-update-just-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} v' e | no p | no q = getRef-update-just-‚â° {w} v' e


getRef-update-nothing-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑}
                        ‚Üí getRef name w ‚â° just (cell name r nothing)
                        ‚Üí getRef name (update name v w) ‚â° just (cell name r (just v))
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e with name ‚âü name‚ÇÅ
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e)
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e | yes p | yes q =
  ‚ä•-elim (¬¨just‚â°nothing (cell-inj3 (just-inj e)))
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e | no p
  with name ‚âü name‚ÇÅ
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e | no p | yes q = ‚ä•-elim (p q)
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ (just x) ‚à∑ w} {name} {r} {v} e | no p | no q = getRef-update-nothing-‚â° {w} e
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e
  with name ‚âü name‚ÇÅ
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e | yes p
  rewrite p
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e | yes p | yes q
  rewrite cell-inj2 (just-inj e)
  = refl
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e | yes p | no q  = ‚ä•-elim (q refl)
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e | no p
  with name ‚âü name‚ÇÅ
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e | no p | yes q = ‚ä•-elim (p q)
getRef-update-nothing-‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {v} e | no p | no q = getRef-update-nothing-‚â° {w} e


{--
getRef-update-true-¬¨frz-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                       ‚Üí ¬¨ (Rfrz? r)
                       ‚Üí getRef name w ‚â° just (cell name r v true)
                       ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v' f)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e with name ‚âü name‚ÇÅ
... | yes p rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with Res.frz r
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | true = ‚ä•-elim (frz tt)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | false with freeze‚ÇÅ r v' f
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | false | true with name‚ÇÅ ‚âü name‚ÇÅ
... | yes q = refl
... | no q = ‚ä•-elim (q refl)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | false | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes q = refl
... | no q = ‚ä•-elim (q refl)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | no p with name ‚âü name‚ÇÅ
... |    yes q = ‚ä•-elim (p q)
... |    no q = getRef-update-true-¬¨frz-‚â° {w} v' f frz e



getRef-update-false-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                      ‚Üí freeze‚ÇÅ r v' f ‚â° true
                      ‚Üí getRef name w ‚â° just (cell name r v false)
                      ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v' f)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e with name ‚âü name‚ÇÅ
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q with Res.frz r
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | true with freeze‚ÇÅ r v' f
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | true | true with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = refl
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | true | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = ‚ä•-elim (true‚â†false (sym fr))
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z = refl
... | no z = ‚ä•-elim (z refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | no p with name ‚âü name‚ÇÅ
...     | yes q = ‚ä•-elim (p q)
...     | no q = getRef-update-false-‚â° {w} v' f fr e


getRef-update-false-‚â°‚Ä≤ : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                       ‚Üí Res.frz r ‚â° true
                       ‚Üí freeze‚ÇÅ r v' f ‚â° false
                       ‚Üí getRef name w ‚â° just (cell name r v false)
                       ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v false)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e with name ‚âü name‚ÇÅ
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q with Res.frz r
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | true with freeze‚ÇÅ r v' f
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | true | true with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = ‚ä•-elim (true‚â†false fr)
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | true | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = refl
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z = ‚ä•-elim (true‚â†false (sym frr))
... | no z = ‚ä•-elim (z refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | no p with name ‚âü name‚ÇÅ
...     | yes q = ‚ä•-elim (p q)
...     | no q = getRef-update-false-‚â°‚Ä≤ {w} v' f frr fr e
--}


getRef-update-¬¨‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : M‚ÑÇ¬∑} (name' : Name) (v' : ‚ÑÇ¬∑)
                 ‚Üí ¬¨ name' ‚â° name
                 ‚Üí getRef name w ‚â° just (cell name r v)
                 ‚Üí getRef name (update name' v' w) ‚â° just (cell name r v)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {nothing} name' v' d e
 with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {nothing} name' v' d e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e)
  with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {nothing} name' v' d e | yes p | yes q
  rewrite q = ‚ä•-elim (d refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {nothing} name' v' d e | yes p | no q
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {nothing} name' v' d e | yes p | no q | yes s = refl
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {nothing} name' v' d e | yes p | no q | no s = ‚ä•-elim (s refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p
  with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | yes q
  rewrite q
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | yes q | yes s = ‚ä•-elim (p s)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | yes q | no s = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | no q
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | no q | yes s = ‚ä•-elim (p s)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | no q | no s =
  getRef-update-¬¨‚â° {w} {name} {r} {nothing} name' v' d e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p
  with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | yes q
  rewrite q
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | yes q | yes s = ‚ä•-elim (p s)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | yes q | no s = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | no q
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | no q | yes s
  rewrite s = ‚ä•-elim (p refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {nothing} name' v' d e | no p | no q | no s =
  getRef-update-¬¨‚â° {w} {name} {r} {nothing} name' v' d e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e)
  with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | yes p | yes q
  rewrite q = ‚ä•-elim (d refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | yes p | no q
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | yes p | no q | yes z = refl
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | yes p | no q | no z  = ‚ä•-elim (z refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q
  rewrite q with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | yes z
  rewrite z = ‚ä•-elim (p refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | yes s = ‚ä•-elim (z s)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | yes y
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | yes y | yes k = ‚ä•-elim (s k)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | yes y | no k = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | no y = ‚ä•-elim (y refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s
  with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | yes y
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | yes y | yes k = ‚ä•-elim (s k)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | yes y | no k = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | yes q | no z | no s | no y = ‚ä•-elim (y refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | yes z
  rewrite z = ‚ä•-elim (p refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z
  with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | yes y = ‚ä•-elim (q y)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | no y
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | no y | yes s = ‚ä•-elim (p s)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ nothing ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | no y | no s =
  getRef-update-¬¨‚â° {w} name' v' d e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z
  with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | yes y = ‚ä•-elim (q y)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | no y
  with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | no y | yes s = ‚ä•-elim (p s)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ (just v‚ÇÅ) ‚à∑ w} {name} {r} {just v} name' v' d e | no p | no q | no z | no y | no s =
  getRef-update-¬¨‚â° {w} name' v' d e


¬¨‚ààwdom‚ÜígetRef-nothing : {n : Name} {w : ùïé¬∑}
                      ‚Üí ¬¨ n ‚àà wdom w
                      ‚Üí getRef n w ‚â° nothing
¬¨‚ààwdom‚ÜígetRef-nothing {n} {[]} ni = refl
¬¨‚ààwdom‚ÜígetRef-nothing {n} {cell name r v ‚à∑ w} ni with n ‚âü name
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = ¬¨‚ààwdom‚ÜígetRef-nothing {n} {w} (Œª x ‚Üí ni (there x))


{--
‚ÜíRfrz? : {r : Res{0‚Ñì}} ‚Üí Res.frz r ‚â° true ‚Üí Rfrz? r
‚ÜíRfrz? {r} e rewrite e = tt


Rfrz?‚Üí : {r : Res{0‚Ñì}} ‚Üí Rfrz? r ‚Üí Res.frz r ‚â° true
Rfrz?‚Üí {r} e with Res.frz r
... | true = refl
... | false = ‚ä•-elim e


‚Üí¬¨Rfrz? : {r : Res{0‚Ñì}} ‚Üí Res.frz r ‚â° false ‚Üí ¬¨ Rfrz? r
‚Üí¬¨Rfrz? {r} e rewrite e = Œª z ‚Üí z
--}


‚äë-pres-getRef : {w1 w2 : world} {name : Name} {r : Res} {v : M‚ÑÇ¬∑}
              ‚Üí w1 ‚äë¬∑ w2
              ‚Üí getRef name w1 ‚â° just (cell name r v)
              ‚Üí Œ£ M‚ÑÇ¬∑ (Œª v' ‚Üí
                getRef name w2 ‚â° just (cell name r v')
                √ó pres-resSatRef v v' r
                √ó satFrozen r v v')
‚äë-pres-getRef {w1} {.w1} {name} {r} {v} (‚âº-refl .w1) i =
  v , i , pres-resSatRef-refl v r , satFrozen-refl r v
‚äë-pres-getRef {w1} {w3} {name} {r} {v} (‚âº-trans {.w1} {w2} {.w3} e‚ÇÅ e‚ÇÇ) i
  with ‚äë-pres-getRef {w1} {w2} {name} {r} {v} e‚ÇÅ i
... | v' , i' , p' , s'
  with ‚äë-pres-getRef {w2} {w3} {name} {r} {v'} e‚ÇÇ i'
... | v'' , i'' , p'' , s'' = v'' , i'' , pres-resSatRef-trans p' p'' , satFrozen-trans {r = r} s' s''
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ w1)} {name} {r} {v} (upd .w1 n r‚ÇÅ v‚ÇÅ hr x) i with n ‚âü name
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ w1)} {name} {r} {nothing} (upd .w1 n r‚ÇÅ v‚ÇÅ (mx , hr) x) i | yes p
  rewrite p | cell-inj2 (just-inj (trans (sym hr) i))
  = just v‚ÇÅ , getRef-update-nothing-‚â° {w1} {name} {r} {v‚ÇÅ} i , (Œª _ ‚Üí x) , tt
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ w1)} {name} {r} {just v} (upd .w1 n r‚ÇÅ v‚ÇÅ hr x) i | yes p
  rewrite p
  = just v , getRef-update-just-‚â° {w1} {name} {r} {v} v‚ÇÅ i , (Œª x ‚Üí x) , refl
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ w1)} {name} {r} {v} (upd .w1 n r‚ÇÅ v‚ÇÅ hr x) i | no p =
  v , getRef-update-¬¨‚â° {w1} {name} {r} {v} n v‚ÇÅ p i , (Œª x ‚Üí x) , satFrozen-refl r v
‚äë-pres-getRef {w1} {.(cell n r‚ÇÅ nothing ‚à∑ w1)} {name} {r} {v} (new .w1 n r‚ÇÅ x) i with name ‚âü n
... | yes p rewrite p | ¬¨‚ààwdom‚ÜígetRef-nothing {n} {w1} x = ‚ä•-elim (¬¨just‚â°nothing (sym i))
... | no p = v , i , (Œª x ‚Üí x) , satFrozen-refl r v


‚äë-compatibleRef : {c : Name} {w1 w2 : ùïé¬∑} {r : Res{0‚Ñì}} ‚Üí w1 ‚äë¬∑ w2 ‚Üí compatibleRef c w1 r ‚Üí compatibleRef c w2 r
‚äë-compatibleRef {c} {w1} {w2} {r} e (v , comp , sat)
  with ‚äë-pres-getRef {w1} {w2} {c} {r} {v} e comp
... | v' , i' , pr , sf = v' , i' , pr sat


open import compatible(PossibleWorldsRef)(choiceRef)

compatibleREF : Compatible
compatibleREF = mkCompatible compatibleRef ‚äë-compatibleRef

open import compatibleDef(PossibleWorldsRef)(choiceRef)(compatibleREF)


getRefChoice : (n : ‚Ñï) (name : Name) (w : world) ‚Üí Maybe ‚ÑÇ¬∑
getRefChoice _ name w with getRef name w
... | just (cell _ _ v) = v
... | nothing = nothing


getRefChoiceCompatible : (c : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) (n : ‚Ñï) (t : ‚ÑÇ¬∑)
                       ‚Üí compatibleRef c w r ‚Üí getRefChoice n c w ‚â° just t ‚Üí ¬∑·µ£ r n t
getRefChoiceCompatible c r w n t (k , i , sat) g
  rewrite i | g = sat n


-- We're really only generating numbers as choices here
T‚Üí‚ÑÇref : Term ‚Üí ‚ÑÇ¬∑
T‚Üí‚ÑÇref (INL AX) = true
T‚Üí‚ÑÇref (INR AX) = false
T‚Üí‚ÑÇref _ = true


getRef‚äé : (name : Name) (w : world)
        ‚Üí Œ£ Cell (Œª c ‚Üí getRef name w ‚â° just c)
        ‚äé getRef name w ‚â° nothing
getRef‚äé name w with getRef name w
... | just c = inj‚ÇÅ (c , refl)
... | nothing = inj‚ÇÇ refl


chooseREF : (cs : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑) ‚Üí ùïé¬∑
chooseREF n w c with getRef‚äé n w
... | inj‚ÇÅ (cell name r v , e) with Res.dec r
... |    (true , D) with Res.inv r
... |       (true , I) with D 0 c
... |          inj‚ÇÅ y = update n c w
... |          inj‚ÇÇ y = w
chooseREF n w c | inj‚ÇÅ (cell name r v , e) | (true , _) | (false , _) = w
chooseREF n w c | inj‚ÇÅ (cell name r v , e) | (false , _) = w
chooseREF n w c | inj‚ÇÇ _ = w


getRef‚Üí‚ààworld : {n name : Name} {w : ùïé¬∑} {r : Res} {v : M‚ÑÇ¬∑}
              ‚Üí getRef n w ‚â° just (cell name r v)
              ‚Üí ‚ààworld n r v w
getRef‚Üí‚ààworld {n} {name} {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ ‚à∑ w} {r} {v} h with n ‚âü name‚ÇÅ
... | yes p rewrite p | h | cell-inj1 (just-inj h) = refl
... | no p = getRef‚Üí‚ààworld {n} {name} {w} h


chooseREF‚äë : (cs : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑) ‚Üí w ‚äë¬∑ chooseREF cs w c
chooseREF‚äë n w c with getRef‚äé n w
... | inj‚ÇÅ (cell name r v , e) with Res.dec r
... |    (true , D) with Res.inv r
... |       (true , I) with D 0 c
... |          inj‚ÇÅ y = upd w n r c (v , getRef‚Üí‚ààworld {n} {name} {w} e) (inv‚Üí¬∑·µ£‚Üí‚ãÜ·µ£ {r} {c} I y)
... |          inj‚ÇÇ y = ‚äë-refl¬∑ _
chooseREF‚äë n w c | inj‚ÇÅ (cell name r v , e) | (true , _) | (false , _) = ‚äë-refl¬∑ _
chooseREF‚äë n w c | inj‚ÇÅ (cell name r v , e) | (false , _) = ‚äë-refl¬∑ _
chooseREF‚äë n w c | inj‚ÇÇ _ = ‚äë-refl¬∑ _


is‚ÑÇ‚ÇÄref : ‚ÑÇ¬∑ ‚Üí Bool
is‚ÑÇ‚ÇÄref b = b


open import getChoice(PossibleWorldsRef)(choiceRef)(compatibleREF)

getChoiceRef : GetChoice
getChoiceRef = mkGetChoice getRefChoice T‚Üí‚ÑÇref chooseREF chooseREF‚äë
-- wdom
-- is‚ÑÇ‚ÇÄref
-- getRefChoiceCompatible

open import getChoiceDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)


progressRef : (c : Name) (w1 w2 : ùïé¬∑) ‚Üí Set‚ÇÅ
progressRef c w1 w2 =
  (r : Res) (v : M‚ÑÇ¬∑)
  ‚Üí ‚ààworld c r v w1
  ‚Üí Œ£ M‚ÑÇ¬∑ (Œª v' ‚Üí ‚ààworld c r v' w2 √ó satFrozen r v v')


progressRef-refl : (c : Name) (w : ùïé¬∑) ‚Üí progressRef c w w
progressRef-refl c w r v i = v , i , satFrozen-refl r v


progressRef-trans : {c : Name} {w1 w2 w3 : ùïé¬∑}
                  ‚Üí progressRef c w1 w2
                  ‚Üí progressRef c w2 w3
                  ‚Üí progressRef c w1 w3
progressRef-trans {c} {w1} {w2} {w3} p1 p2 r v i
  with p1 r v i
... | v' , i' , sf'
  with p2 r v' i'
... | v'' , i'' , sf'' =
  v'' , i'' , satFrozen-trans {r = r} sf' sf''


ùïé‚ÜírefChain : (w : ùïé¬∑) ‚Üí chain w
ùïé‚ÜírefChain w = mkChain (Œª _ ‚Üí w) (‚äë-refl¬∑ _) Œª _ ‚Üí ‚äë-refl¬∑ _


refChainProgress : (w : ùïé¬∑) (x : Name) (n : ‚Ñï) {r : Res{0‚Ñì}}
                 ‚Üí compatibleRef x (chain.seq (ùïé‚ÜírefChain w) n) r
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí n < m √ó progressRef x (chain.seq (ùïé‚ÜírefChain w) n) (chain.seq (ùïé‚ÜírefChain w) m))
refChainProgress w x n {r} (v , i , sat) = suc n , ‚â§-refl , progressRef-refl x w


open import progress(PossibleWorldsRef)(choiceRef)(compatibleREF)

progressREF : Progress
progressREF =
  mkProgress
    progressRef
    ùïé‚ÜírefChain
    refChainProgress

open import progressDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)


C0 : ‚ÑÇ¬∑
C0 = true --0


C1 : ‚ÑÇ¬∑
C1 = false --1


dec‚ÑÇ‚ÇÄref : (c : ‚ÑÇ¬∑) ‚Üí c ‚â° C0 ‚äé ¬¨ c ‚â° C0
dec‚ÑÇ‚ÇÄref false = inj‚ÇÇ (Œª ())
dec‚ÑÇ‚ÇÄref true = inj‚ÇÅ refl


dec‚ÑÇ‚ÇÅref : (c : ‚ÑÇ¬∑) ‚Üí c ‚â° C1 ‚äé ¬¨ c ‚â° C1
dec‚ÑÇ‚ÇÅref false = inj‚ÇÅ refl
dec‚ÑÇ‚ÇÅref true = inj‚ÇÇ (Œª ())


open import choiceExt{1‚Ñì}(PossibleWorldsRef)(choiceRef)

choiceExtRef : ChoiceExt
choiceExtRef = mkChoiceExt C0 C1 dec‚ÑÇ‚ÇÄref dec‚ÑÇ‚ÇÅref

open import choiceExtDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)


newRefChoice : (w : ùïé¬∑) ‚Üí Name
newRefChoice w = fst (freshName (wdom w ++ wnames w))


startRefChoice : (n : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
startRefChoice n r w = newCell n r w


startNewRefChoice : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
startNewRefChoice r w = startRefChoice (newRefChoice w) r w


getRef-newCell : (w : ùïé¬∑) (name : Name) (r : Res)
               ‚Üí getRef name (newCell name r w) ‚â° just (cell name r nothing)
getRef-newCell w name r with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)


getRefChoice-startRefChoice : (n : ‚Ñï) (r : Res) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) (name : Name)
                            ‚Üí ¬¨ name ‚àà wdom w
                            ‚Üí getRefChoice n name (startRefChoice name r w) ‚â° just t ‚Üí t ‚â° Res.c‚ÇÄ r
--                             ‚Üí getRefChoice n (newRefChoice w) (startNewRefChoice r w) ‚â° nothing
getRefChoice-startRefChoice n r w t name ni e
  rewrite getRef-newCell w name r
  = ‚ä•-elim (¬¨just‚â°nothing (sym e))


startRefChoice‚äè : (r : Res) (w : ùïé¬∑) (name : Name) ‚Üí ¬¨ name ‚àà wdom w ‚Üí w ‚äë¬∑ startRefChoice name r w
startRefChoice‚äè r w name ni = new w name r ni


startRefChoiceCompatible : (r : Res{0‚Ñì}) (w : ùïé¬∑) (name : Name)
                         ‚Üí ¬¨ name ‚àà wdom w ‚Üí compatibleRef name (startRefChoice name r w) r
startRefChoiceCompatible r w name ni =
  nothing , getRef-newCell w name r , tt


open import newChoice(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)

newChoiceRef : NewChoice
newChoiceRef =
  mkNewChoice
    wdom --newRefChoice
    wnames
    startRefChoice
    getRefChoice-startRefChoice
    startRefChoice‚äè
    startRefChoiceCompatible

open import newChoiceDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(newChoiceRef)


open import encoding3(E)


open import computation(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)(newChoiceRef)(enc)


¬¨‚àºc01 : (w : ùïé¬∑) ‚Üí ¬¨ ‚àºC! w (‚ÑÇ‚ÜíC¬∑ C0) (‚ÑÇ‚ÜíC¬∑ C1)
¬¨‚àºc01 w h = x (#compVal (‚àºC!‚Üí#‚áì {w} {‚ÑÇ‚ÜíC¬∑ C0} {‚ÑÇ‚ÜíC¬∑ C1} tt h) tt)
  where
    x : ‚ÑÇ‚ÜíC¬∑ C0 ‚â° ‚ÑÇ‚ÜíC¬∑ C1 ‚Üí ‚ä•
    x ()


‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 : T‚Üí‚ÑÇ¬∑ ‚åú C‚ÑÇ‚ÇÄ ‚åù ‚â° ‚ÑÇ‚ÇÄ¬∑
‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 = refl


‚ÑÇ‚ÜíT‚Üí‚ÑÇ1 : T‚Üí‚ÑÇ¬∑ ‚åú C‚ÑÇ‚ÇÅ ‚åù ‚â° ‚ÑÇ‚ÇÅ¬∑
‚ÑÇ‚ÜíT‚Üí‚ÑÇ1 = refl


open import choiceVal{1‚Ñì}(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)(newChoiceRef)(enc)

choiceValRef : ChoiceVal
choiceValRef = mkChoiceVal ¬¨‚àºc01 tt tt ‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 ‚ÑÇ‚ÜíT‚Üí‚ÑÇ1

open import choiceValDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)(newChoiceRef)(enc)(choiceValRef)


freezeRef : (n : Name) (w : ùïé¬∑) (v : ‚ÑÇ¬∑) ‚Üí world
freezeRef n w v = update n v w


hasRes‚à∑ : (name : Name) (r : Res) (v : M‚ÑÇ¬∑) (w : ùïé¬∑)
        ‚Üí hasRes name (cell name r v ‚à∑ w) r
hasRes‚à∑ name r v w with name ‚âü name
... | yes p = v , refl
... | no p = ‚ä•-elim (p refl)


freezableRef : (c : Name) (w : ùïé¬∑) ‚Üí Set
freezableRef c w with getRef c w
... | just (cell n r nothing) = ‚ä§
... | _ = ‚ä•


{--
‚äë-freeze‚à∑ : (name : Name) (r : Res) (v‚ÇÅ v‚ÇÇ : ‚ÑÇ¬∑) (w : ùïé¬∑)
            ‚Üí ‚ãÜ·µ£ r v‚ÇÇ
            ‚Üí (cell name r v‚ÇÅ false ‚à∑ w) ‚äë¬∑ (cell name r v‚ÇÇ true ‚à∑ w)
‚äë-freeze‚à∑ name r v‚ÇÅ v‚ÇÇ w sat =
  ‚äë-trans¬∑ (upd (cell name r v‚ÇÅ false ‚à∑ w) name r v‚ÇÇ true (hasRes‚à∑ name r v‚ÇÅ false w) sat) z
  where
    z : (update name v‚ÇÇ true (cell name r v‚ÇÅ false ‚à∑ w)) ‚äë¬∑ (cell name r v‚ÇÇ true ‚à∑ w)
    z with name ‚âü name
    ... | yes p = ‚äë-refl¬∑ _
    ... | no p = ‚ä•-elim (p refl)
--}


wdom++ : (w1 w2 : ùïé¬∑) ‚Üí wdom (w1 ++ w2) ‚â° wdom w1 ++ wdom w2
wdom++ [] w2 = refl
wdom++ (x ‚à∑ w1) w2 rewrite wdom++ w1 w2 = refl


getRef++-¬¨‚àà : {name : Name} (w1 w2 : ùïé¬∑)
              ‚Üí ¬¨ name ‚àà wdom w1
              ‚Üí getRef name (w1 ++ w2) ‚â° getRef name w2
getRef++-¬¨‚àà {name} [] w2 ni = refl
getRef++-¬¨‚àà {name} (cell name‚ÇÅ r v ‚à∑ w1) w2 ni with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = getRef++-¬¨‚àà w1 w2 (Œª x ‚Üí ni (there x))


hasRes++-¬¨‚àà : {name : Name} (w1 w2 : ùïé¬∑) (r : Res)
              ‚Üí ¬¨ name ‚àà wdom w1
              ‚Üí hasRes name w2 r
              ‚Üí hasRes name (w1 ++ w2) r
hasRes++-¬¨‚àà {name} w1 w2 r ni hr rewrite getRef++-¬¨‚àà w1 w2 ni = hr


update++-¬¨‚àà : {name : Name} {w1 : ùïé¬∑} (w2 : ùïé¬∑) (t : ‚ÑÇ¬∑)
            ‚Üí ¬¨ name ‚àà wdom w1
            ‚Üí update name t (w1 ++ w2) ‚â° w1 ++ update name t w2
update++-¬¨‚àà {name} {[]} w2 t ni = refl
update++-¬¨‚àà {name} {cell name‚ÇÅ r nothing ‚à∑ w1} w2 t ni with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p rewrite update++-¬¨‚àà {name} {w1} w2 t (Œª x ‚Üí ni (there x)) = refl
update++-¬¨‚àà {name} {cell name‚ÇÅ r (just v) ‚à∑ w1} w2 t ni with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p rewrite update++-¬¨‚àà {name} {w1} w2 t (Œª x ‚Üí ni (there x)) = refl


preFreezeRef‚äë : (c : Name) (w w' : ùïé¬∑) (t : ‚ÑÇ¬∑) {r : Res}
              ‚Üí compatibleRef c w r
              ‚Üí ‚ãÜ·µ£ r t
              ‚Üí ¬¨ (c ‚àà wdom w')
              ‚Üí (w' ++ w) ‚äë¬∑ (w' ++ freezeRef c w t)
preFreezeRef‚äë c (cell name r‚ÇÅ nothing ‚à∑ w) w' t {r} (v , comp , sat) rt ni
  with c ‚âü name
preFreezeRef‚äë c (cell name r‚ÇÅ nothing ‚à∑ w) w' t {r} (v , comp , sat) rt ni | yes p
  rewrite p | sym (cell-inj2 (just-inj comp)) | sym (cell-inj3 (just-inj comp))
  = ‚äë-trans¬∑ (upd (w' ++ cell name r‚ÇÅ nothing ‚à∑ w) name r‚ÇÅ t hr' rt) e'
  where
  hr' : hasRes name (w' ++ cell name r‚ÇÅ nothing ‚à∑ w) r‚ÇÅ
  hr' = hasRes++-¬¨‚àà w' (cell name r‚ÇÅ nothing ‚à∑ w) r‚ÇÅ ni (hasRes‚à∑ _ _ _ _)

  e' : update name t (w' ++ cell name r‚ÇÅ nothing ‚à∑ w) ‚äë¬∑ (w' ++ cell name r‚ÇÅ (just t) ‚à∑ w)
  e' rewrite update++-¬¨‚àà {name} {w'} (cell name r‚ÇÅ nothing ‚à∑ w) t ni with name ‚âü name
  e' | yes x with t ‚â°·µá Res.c‚ÇÅ r‚ÇÅ
  e' | yes x | inj‚ÇÅ y = ‚äë-refl¬∑ _
  e' | yes x | inj‚ÇÇ y = ‚äë-refl¬∑ _
  e' | no x = ‚ä•-elim (x refl)
preFreezeRef‚äë c (cell name r‚ÇÅ nothing ‚à∑ w) w' t {r} (v , comp , sat) rt ni | no p
  rewrite sym (++-assoc w' [ cell name r‚ÇÅ nothing ] w)
        | sym (++-assoc w' [ cell name r‚ÇÅ nothing ] (update c t w))
  = preFreezeRef‚äë c w (w' ++ [ cell name r‚ÇÅ nothing ]) t {r} (v , comp , sat) rt ni'
  where
  ni' : ¬¨ c ‚àà wdom (w' ++ [ cell name r‚ÇÅ nothing ])
  ni' i rewrite wdom++ w' [ cell name r‚ÇÅ nothing ] with ‚àà-++‚Åª (wdom w') i
  ... | inj‚ÇÅ q = ‚ä•-elim (ni q)
  ... | inj‚ÇÇ (here q) = ‚ä•-elim (p q)
preFreezeRef‚äë c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) w' t {r} (v , comp , sat) rt ni
  with c ‚âü name
preFreezeRef‚äë c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) w' t {r} (v , comp , sat) rt ni | yes p
  rewrite p = ‚âº-refl _
preFreezeRef‚äë c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) w' t {r} (v , comp , sat) rt ni | no p
  rewrite sym (++-assoc w' [ cell name r‚ÇÅ (just v‚ÇÅ) ] w)
        | sym (++-assoc w' [ cell name r‚ÇÅ (just v‚ÇÅ) ] (update c t w))
  = preFreezeRef‚äë c w (w' ++ [ cell name r‚ÇÅ (just v‚ÇÅ) ]) t {r} (v , comp , sat) rt ni'
  where
  ni' : ¬¨ c ‚àà wdom (w' ++ [ cell name r‚ÇÅ (just v‚ÇÅ) ])
  ni' i rewrite wdom++ w' [ cell name r‚ÇÅ (just v‚ÇÅ) ] with ‚àà-++‚Åª (wdom w') i
  ... | inj‚ÇÅ q = ‚ä•-elim (ni q)
  ... | inj‚ÇÇ (here q) = ‚ä•-elim (p q)


freezeRef‚äë : (c : Name) (w : ùïé¬∑) {r : Res} ‚Üí compatibleRef c w r ‚Üí w ‚äë¬∑ freezeRef c w (Res.c‚ÇÅ r)
freezeRef‚äë c w {r} comp = preFreezeRef‚äë c w [] (Res.c‚ÇÅ r) comp (Res.sat‚ÇÅ r) Œª ()


freezableStartRef : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí freezableRef (newRefChoice w) (startNewRefChoice r w)
freezableStartRef r w with newRefChoice w ‚âü newRefChoice w
... | yes p = tt
... | no p = ‚ä•-elim (p refl)


progressFreeze : (r : Res) (c : Name) (w : ùïé¬∑) ‚Üí Set‚ÇÅ
progressFreeze r c w =
    (v : M‚ÑÇ¬∑)
  ‚Üí ‚ààworld c r v w
  ‚Üí Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí ‚ààworld c r (just v') (freezeRef c w (Res.c‚ÇÅ r)) √ó satFrozen r v (just v'))


progressRef-freeze : (c : Name) (w : ùïé¬∑) (r : Res) ‚Üí progressFreeze r c w
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i
  with c ‚âü name
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i | yes p
  rewrite p
  with name ‚âü name
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i | yes p | yes q
  rewrite sym (cell-inj2 (just-inj i)) | sym (cell-inj3 (just-inj i))
  = Res.c‚ÇÅ r‚ÇÅ , refl , tt
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i | yes p | no q = ‚ä•-elim (q refl)
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i | no p
  with c ‚âü name
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i | no p | yes q = ‚ä•-elim (p q)
progressRef-freeze c (cell name r‚ÇÅ nothing ‚à∑ w) r v i | no p | no q =
  progressRef-freeze c w r v i
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i
  with c ‚âü name
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i | yes p
  rewrite p
  with name ‚âü name
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i | yes p | yes q
  rewrite sym (cell-inj2 (just-inj i)) | sym (cell-inj3 (just-inj i))
  = v‚ÇÅ , refl , refl
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i | yes p | no q = ‚ä•-elim (q refl)
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i | no p
  with c ‚âü name
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i | no p | yes q = ‚ä•-elim (p q)
progressRef-freeze c (cell name r‚ÇÅ (just v‚ÇÅ) ‚à∑ w) r v i | no p | no q =
  progressRef-freeze c w r v i


‚äë‚ÜíprogressRef : (c : Name) {w1 w2 : ùïé¬∑} ‚Üí w1 ‚äë¬∑ w2 ‚Üí progressRef c w1 w2
‚äë‚ÜíprogressRef c {w1} {w2} e r v i
  with ‚äë-pres-getRef e i
... | v' , i' , s' , f' = v' , i' , f'


getFreezeRef-aux : (c : Name) (w : ùïé¬∑) {r : Res{0‚Ñì}}
                 ‚Üí compatibleRef c w r
                 ‚Üí freezableRef c w
                 ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freezeRef c w (Res.c‚ÇÅ r))
                                 (Œª w' _ ‚Üí Lift 2‚Ñì (getRefChoice n c w' ‚â° just (Res.c‚ÇÅ r) √ó ¬¨ freezableRef c w')))
getFreezeRef-aux c w {r} (just v , comp , sat) fb rewrite comp = ‚ä•-elim fb
getFreezeRef-aux c w {r} (nothing , comp , sat) fb rewrite comp = 0 , aw
  where
    t : ‚ÑÇ¬∑
    t = Res.c‚ÇÅ r

    aw : ‚àÄùïé (freezeRef c w t) (Œª w' _ ‚Üí Lift 2‚Ñì (getRefChoice 0 c w' ‚â° just t √ó ¬¨ freezableRef c w'))
    aw w1 e1 with progressRef-freeze c w r nothing comp
    ... | v1 , i1 , s1 with ‚äë‚ÜíprogressRef c e1 r (just v1) i1
    ... | nothing , i2 , s2 = ‚ä•-elim s2
    ... | just v2 , i2 , s2
      rewrite comp | s2 | i2
      rewrite getRef-update-nothing-‚â° {w} {c} {r} {Res.c‚ÇÅ r} comp
      rewrite sym (cell-inj3 (just-inj i1))
      = lift (refl , Œª x ‚Üí x)


getFreezeRef : (c : Name) (w : ùïé¬∑) {r : Res{0‚Ñì}}
             ‚Üí compatibleRef c w r
             ‚Üí Rfrz? r
             ‚Üí freezableRef c w
             ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freezeRef c w (Res.c‚ÇÅ r)) (Œª w' _ ‚Üí Lift 2‚Ñì (getRefChoice n c w' ‚â° just (Res.c‚ÇÅ r))))
getFreezeRef c w {r} comp frz fb
  with getFreezeRef-aux c w comp fb
... | n , F = n , Œª w1 e1 ‚Üí lift (fst (lower (F w1 e1)))


freezableRefDec : (c : Name) (w : ùïé¬∑) ‚Üí freezableRef c w ‚äé ¬¨ freezableRef c w
freezableRefDec c w with getRef c w
... | just (cell n r nothing) = inj‚ÇÅ tt
... | just (cell n r (just v)) = inj‚ÇÇ (Œª ())
... | nothing = inj‚ÇÇ (Œª ())


{--
¬¨freezableRef : (c : Name) (w : ùïé¬∑) {r : Res{0‚Ñì}}
              ‚Üí compatible¬∑ c w r
              ‚Üí Rfrz? r
              ‚Üí ¬¨ freezableRef c w
              ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift 2‚Ñì (getChoice¬∑ n c w' ‚â° just (Res.c‚ÇÅ r))))
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf
  rewrite i
  with ‚äébool (Res.frz r)
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÅ p
  rewrite p
  with v ‚â°·µá Res.c‚ÇÅ r
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÅ p | inj‚ÇÅ q
  rewrite q = 0 , h
  where
  h : (w' : List Cell) (e : w ‚âº w') ‚Üí Lift 2‚Ñì (getRefChoice 0 c w' ‚â° just (Res.c‚ÇÅ r))
  h w' e with ‚äë-pres-getRef {w} {w'} {c} {r} {Res.c‚ÇÅ r} {true} e i
  h w' e | v' , f' , gr , presr , satf , presf
    rewrite p | gr
    with Res.c‚ÇÅ r ‚â°·µá Res.c‚ÇÅ r
  ... | inj‚ÇÅ z = lift (‚â°just (sym (snd (satf refl))))
  ... | inj‚ÇÇ z = ‚ä•-elim (z refl)
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÅ p | inj‚ÇÇ q = ‚ä•-elim (true‚â†false (sym ft))
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÇ p rewrite p = ‚ä•-elim frz
¬¨freezableRef c w {r} (v , false , i , rs , ft) frz nf
  rewrite i = ‚ä•-elim (nf tt)
--}


open import freeze(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)

freezeREF : Freeze
freezeREF =
  mkFreeze
    freezeRef
    freezableRef
    freezableRefDec
    freezeRef‚äë
    getFreezeRef
    freezableStartRef
--    {!¬¨freezableRef!}

open import freezeDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)(freezeREF)

\end{code}
