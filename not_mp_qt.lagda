\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod


module not_mp_qt {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
                 (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
                 (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                 (F : Freeze {L} W C K P G N)
                 (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                 (CB : ChoiceBar W M C K P G X N V F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(E)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import mp_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_mp(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)


#QTNAT!‚ÜíT : CTerm ‚Üí CTerm
#QTNAT!‚ÜíT T = #FUN #QTNAT! T


c‚ÑÇ : Set(lsuc(L))
c‚ÑÇ = (c : Name) (r : Res) (w : ùïé¬∑) (n : ‚Ñï)
      ‚Üí compatible¬∑ c w r
      ‚Üí ‚àÄùïé w (Œª w' e ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ n c w' ‚â° just ‚ÑÇ‚ÇÄ¬∑ ‚äé getChoice¬∑ n c w' ‚â° just ‚ÑÇ‚ÇÅ¬∑))


-- It seems that this would only be true with references because we don't have to jump to where 'a' is defined at 'n'
-- and can then use c‚ÑÇ above
‚áì!same‚Ñï‚Üí‚áì!same-bool : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (w : ùïé¬∑) (t1 t2 : Term) (a : Name)
                         ‚Üí compatible¬∑ a w Res‚ÑÇ
                         ‚Üí ‚áì!same‚Ñï w t1 t2
                         ‚Üí ‚áì!same-bool w (APPLY (CS a) t1) (APPLY (CS a) t2)
‚áì!same‚Ñï‚Üí‚áì!same-bool cb cc w t1 t2 a compat (n , c‚ÇÅ , c‚ÇÇ) with lower (cc a Res‚ÑÇ w n compat w (‚äë-refl¬∑ w))
... | inj‚ÇÅ gc = AX , AX , inj‚ÇÇ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) t1 BFALSE w w n a (snd c‚ÇÅ) gt ,
                                Œ£-steps-APPLY-CS (fst c‚ÇÇ) t2 BFALSE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BFALSE
      gt rewrite gc = ‚â°just (‚â°CTerm (fst (snd cb)))
... | inj‚ÇÇ gc = AX , AX , inj‚ÇÅ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) t1 BTRUE w w n a (snd c‚ÇÅ) gt ,
                                Œ£-steps-APPLY-CS (fst c‚ÇÇ) t2 BTRUE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BTRUE
      gt rewrite gc = ‚â°just (‚â°CTerm (snd (snd cb)))


‚áì!same‚Ñï‚Üí#‚áì!same-bool : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (w : ùïé¬∑) (t1 t2 : CTerm) (a : Name)
                         ‚Üí compatible¬∑ a w Res‚ÑÇ
                         ‚Üí ‚áì!same‚Ñï w ‚åú t1 ‚åù ‚åú t2 ‚åù
                         ‚Üí #‚áì!same-bool w (#APPLY (#CS a) t1) (#APPLY (#CS a) t2)
‚áì!same‚Ñï‚Üí#‚áì!same-bool cb cc w t1 t2 a compat (n , c‚ÇÅ , c‚ÇÇ) with lower (cc a Res‚ÑÇ w n compat w (‚äë-refl¬∑ w))
... | inj‚ÇÅ gc = #AX , #AX , inj‚ÇÇ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) ‚åú t1 ‚åù BFALSE w w n a (snd c‚ÇÅ) gt ,
                                  Œ£-steps-APPLY-CS (fst c‚ÇÇ) ‚åú t2 ‚åù BFALSE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BFALSE
      gt rewrite gc = ‚â°just (‚â°CTerm (fst (snd cb)))
... | inj‚ÇÇ gc = #AX , #AX , inj‚ÇÅ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) ‚åú t1 ‚åù BTRUE w w n a (snd c‚ÇÅ) gt ,
                                  Œ£-steps-APPLY-CS (fst c‚ÇÇ) ‚åú t2 ‚åù BTRUE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BTRUE
      gt rewrite gc = ‚â°just (‚â°CTerm (snd (snd cb)))


‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ-qt : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) {i : ‚Ñï} {w : ùïé¬∑} {c : Name} {a‚ÇÅ a‚ÇÇ : CTerm}
                                  ‚Üí compatible¬∑ c w Res‚ÑÇ
                                  ‚Üí equalInType i w #QTNAT! a‚ÇÅ a‚ÇÇ
                                  ‚Üí equalInType i w Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ-qt cb cc {i} {w} {c} {a‚ÇÅ} {a‚ÇÇ} compat ea =
  ‚â°CTerm‚ÜíequalInType
    (sym (fst cb))
    (‚ÜíequalInType-QTBOOL! i w (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ) (Mod.‚àÄùïé-‚ñ°Func M aw1 ea1))
  where
    ea1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq! w' a‚ÇÅ a‚ÇÇ)
    ea1 = equalInType-QTNAT!‚Üí i w a‚ÇÅ a‚ÇÇ ea

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí #weakMonEq! w' a‚ÇÅ a‚ÇÇ ‚Üí #weakBool! w' (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ))
    aw1 w1 e1 wm w2 e2 = lift (‚áì!same‚Ñï‚Üí#‚áì!same-bool cb cc w2 a‚ÇÅ a‚ÇÇ c (‚äë-compatible¬∑ (‚äë-trans¬∑ e1 e2) compat) (lower (wm w2 e2)))


‚ÜíequalInType-APPLY-CS-QTBOOL!-qt : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) {i : ‚Ñï} {w : ùïé¬∑} {c : Name} {a‚ÇÅ a‚ÇÇ : CTerm}
                                  ‚Üí compatible¬∑ c w Res‚ÑÇ
                                  ‚Üí equalInType i w #QTNAT! a‚ÇÅ a‚ÇÇ
                                  ‚Üí equalInType i w #QTBOOL! (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
‚ÜíequalInType-APPLY-CS-QTBOOL!-qt cb cc {i} {w} {c} {a‚ÇÅ} {a‚ÇÇ} compat ea =
  ‚â°CTerm‚ÜíequalInType (fst cb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ-qt cb cc compat ea)


‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) {n : ‚Ñï} {w : ùïé¬∑} {a : Name}
                                   ‚Üí compatible¬∑ a w Res‚ÑÇ
                                   ‚Üí ‚ààType n w (#QTNAT!‚ÜíQTBOOL!) (#CS a)
‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! cb cc {n} {w} {a} compat =
  equalInType-FUN eqTypesQTNAT! (eqTypesQTBOOL! {w} {n}) aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #QTNAT! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType n w' #QTBOOL! (#APPLY (#CS a) a‚ÇÅ) (#APPLY (#CS a) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = ‚ÜíequalInType-APPLY-CS-QTBOOL!-qt cb cc (‚äë-compatible¬∑ e1 compat) ea


Œ£choice-qt : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí Term
Œ£choice-qt n k = SUM QTNAT! (EQ (APPLY (CS n) (VAR 0)) (‚ÑÇ‚ÜíT k) type‚ÑÇ‚ÇÄ‚ÇÅ)


#Œ£choice-qt : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí CTerm
#Œ£choice-qt n k = ct (Œ£choice-qt n k) c
  where
    c : # (Œ£choice-qt n k)
    c rewrite #-type‚ÑÇ‚ÇÄ‚ÇÅ | #-‚ÑÇ‚ÜíT k = refl


#Œ£choice-qt‚â° : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí #Œ£choice-qt n k ‚â° #SUM #QTNAT! (#[0]EQ (#[0]APPLY (#[0]CS n) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)
#Œ£choice-qt‚â° n k = CTerm‚â° refl


equalTypes-#Œ£choice-qt-body : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (i : ‚Ñï) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                           ‚Üí compatible¬∑ c w Res‚ÑÇ
                           ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                                           ‚Üí equalInType i w' #QTNAT! a‚ÇÅ a‚ÇÇ
                                           ‚Üí equalTypes i w' (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
                                                              (#EQ (#APPLY (#CS c) a‚ÇÇ) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))
equalTypes-#Œ£choice-qt-body cb cc i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea =
  eqTypesEQ‚Üê (Type‚ÑÇ‚ÇÄ‚ÇÅ-isType¬∑ i w') aw1 aw2
  where
    aw1 : equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
    aw1 = ‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ-qt cb cc (‚äë-compatible¬∑ e' comp) ea --

    aw2 : equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚ÑÇ‚ÜíC¬∑ k) (‚ÑÇ‚ÜíC¬∑ k)
    aw2 = sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w' k sat


equalTypes-#Œ£choice-qt-body-sub0 : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (i : ‚Ñï) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                                ‚Üí compatible¬∑ c w Res‚ÑÇ
                                ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                                ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                                                ‚Üí equalInType i w' #QTNAT! a‚ÇÅ a‚ÇÇ
                                                ‚Üí equalTypes i w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                                                   (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
equalTypes-#Œ£choice-qt-body-sub0 cb cc i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea rewrite sub0-#Œ£choice-body‚â° a‚ÇÅ c k | sub0-#Œ£choice-body‚â° a‚ÇÇ c k =
  equalTypes-#Œ£choice-qt-body cb cc i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea


getChoice‚ÜíequalInType-#Œ£choice-qt-aux : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {k : ‚ÑÇ¬∑} (i : ‚Ñï)
                                      ‚Üí compatible¬∑ name w Res‚ÑÇ
                                      ‚Üí ¬∑·µ£ Res‚ÑÇ n k
                                      ‚Üí #APPLY (#CS name) (#NUM n) #‚áõ! ‚ÑÇ‚ÜíC¬∑ k at w
                                      ‚Üí equalInType
                                           i w
                                           (#SUM #QTNAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (#PAIR (#NUM n) #AX) (#PAIR (#NUM n) #AX)
getChoice‚ÜíequalInType-#Œ£choice-qt-aux cb cc {n} {name} {w} {k} i comp sat g =
  equalInType-SUM
    {i} {w} {#QTNAT!} {#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ}
    (eqTypes-mon (uni i) eqTypesQTNAT!)
    (equalTypes-#Œ£choice-qt-body-sub0 cb cc i w name k comp (0 , sat))
    j
  where
    j : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #QTNAT!)
                              (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                              w'
                              (#PAIR (#NUM n) #AX)
                              (#PAIR (#NUM n) #AX))
    j = Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí #NUM n , #NUM n , #AX , #AX ,
                                NUM-equalInType-QTNAT! i w1 n ,
                                #compAllRefl (#PAIR (#NUM n) #AX) w1 ,
                                #compAllRefl (#PAIR (#NUM n) #AX) w1 ,
                                getChoice‚ÜíequalInType-#Œ£choice-aux1 i sat (‚àÄùïé-mon e1 g))


getChoice‚ÜíequalInType-#Œ£choice-qt : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {k : ‚ÑÇ¬∑} (i : ‚Ñï)
                                  ‚Üí compatible¬∑ name w Res‚ÑÇ
                                  ‚Üí ¬∑·µ£ Res‚ÑÇ n k
                                  ‚Üí #APPLY (#CS name) (#NUM n) #‚áõ! ‚ÑÇ‚ÜíC¬∑ k at w
                                  ‚Üí equalInType i w (#Œ£choice-qt name k) (#PAIR (#NUM n) #AX) (#PAIR (#NUM n) #AX)
getChoice‚ÜíequalInType-#Œ£choice-qt cb cc {n} {name} {w} {k} i comp sat g rewrite #Œ£choice-qt‚â° name k =
  getChoice‚ÜíequalInType-#Œ£choice-qt-aux cb cc i comp sat g


¬¨‚àÄùïé¬¨equalInType-#Œ£choice-qt : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (i : ‚Ñï) (w : ùïé¬∑) (name : Name) (k : ‚ÑÇ¬∑)
                            ‚Üí ‚ãÜ·µ£ Res‚ÑÇ k
                            ‚Üí compatible¬∑ name w Res‚ÑÇ
                            ‚Üí freezable¬∑ name w
                            ‚Üí ¬¨ ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType i w' (#Œ£choice-qt name k))
¬¨‚àÄùïé¬¨equalInType-#Œ£choice-qt cb cc i w name k rk comp fb aw = aw w1 e1 (#PAIR (#NUM n1) #AX , h1)
  where
    w1 : ùïé¬∑
    w1 = freeze¬∑ name w k

    e1 : w ‚äë¬∑ w1
    e1 = freeze‚äë¬∑ name w k comp rk

    n1 : ‚Ñï
    n1 = fst (getFreeze¬∑ name w k comp tt fb)

    g0 : ‚àÄùïé w1 (Œª w' _ ‚Üí Lift (lsuc(L)) (getChoice¬∑ n1 name w' ‚â° just k))
    g0 = snd (getFreeze¬∑ name w k comp tt fb)

    g1 : #APPLY (#CS name) (#NUM n1) #‚áõ! ‚ÑÇ‚ÜíC¬∑ k at w1
    g1 = ‚Üí#APPLY-#CS#‚áõ‚ÑÇ‚ÜíC¬∑ g0

    h1 : equalInType i w1 (#Œ£choice-qt name k) (#PAIR (#NUM n1) #AX) (#PAIR (#NUM n1) #AX)
    h1 = getChoice‚ÜíequalInType-#Œ£choice-qt cb cc i (‚äë-compatible¬∑ e1 comp) (rk 0) g1


¬¨Œ£QTNAT!‚Üí¬¨inhType-Œ£choice-qt : QTBool‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑) (name : Name)
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY (#CS name) n‚ÇÅ)))))
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType n w' (#Œ£choice-qt name ‚ÑÇ‚ÇÅ¬∑))
¬¨Œ£QTNAT!‚Üí¬¨inhType-Œ£choice-qt bcb n w name aw w1 e1 (t , inh) =
  lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
  where
    h0 : ‚ààType n w1 (#SUM #QTNAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t
    h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice-qt‚â° name ‚ÑÇ‚ÇÅ¬∑) inh

    h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #QTNAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' t t)
    h1 = equalInType-SUM‚Üí h0

    aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #QTNAT!)
                                   (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                   w' t t
                          ‚Üí Lift (lsuc L) ‚ä•)
    aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (aw w2 (‚äë-trans¬∑ e1 e2) (a‚ÇÅ , a‚ÇÇ , ea , b‚ÇÅ , equalInType-refl eqi2))
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#ASSERT‚ÇÉ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi2 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÉ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1


fun-equalInType-SUM-QTNAT! : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm0} {u v : CTerm}
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #QTNAT! m
                                          ‚Üí equalInType n w' (sub0 m a) t‚ÇÅ t‚ÇÇ
                                          ‚Üí equalInType n w' (sub0 m b) t‚ÇÅ t‚ÇÇ)
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #QTNAT! a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes n w' (sub0 a‚ÇÅ b) (sub0 a‚ÇÇ b))
                          ‚Üí equalInType n w (#SUM #QTNAT! a) u v
                          ‚Üí equalInType n w (#SUM #QTNAT! b) u v
fun-equalInType-SUM-QTNAT! {n} {w} {a} {b} {u} {v} imp eqb eqi =
  equalInType-SUM
    (Œª w' _ ‚Üí eqTypesQTNAT!)
    eqb
    (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SUM‚Üí eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType n w' #QTNAT!) (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType n w' (sub0 a‚ÇÅ a)) w' u v
                        ‚Üí SUMeq (equalInType n w' #QTNAT!) (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType n w' (sub0 a‚ÇÅ b)) w' u v)
    aw w1 e1 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , imp w1 e1 a‚ÇÅ b‚ÇÅ b‚ÇÇ (equalInType-refl ea) eb


#SUM-ASSERT‚ÇÑ‚Üí#Œ£choice-qt : (bcb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                       ‚Üí compatible¬∑ name w Res‚ÑÇ
                       ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                       ‚Üí inhType n w (#SUM-ASSERT‚ÇÑ (#CS name))
                       ‚Üí inhType n w (#Œ£choice-qt name ‚ÑÇ‚ÇÅ¬∑)
#SUM-ASSERT‚ÇÑ‚Üí#Œ£choice-qt bcb cc {n} {w} {name} comp sat (t , inh) =
  t , ‚â°CTerm‚ÜíequalInType
        (sym (#Œ£choice-qt‚â° name ‚ÑÇ‚ÇÅ¬∑))
        (fun-equalInType-SUM-QTNAT! {n} {w} {#[0]ASSERT‚ÇÉ (#[0]APPLY (#[0]CS name) #[0]VAR)} aw1 aw2 inh)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #QTNAT! m
                        ‚Üí equalInType n w' (sub0 m (#[0]ASSERT‚ÇÉ (#[0]APPLY (#[0]CS name) #[0]VAR))) t‚ÇÅ t‚ÇÇ
                        ‚Üí equalInType n w' (sub0 m (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 m t‚ÇÅ t‚ÇÇ j eqi = ‚â°CTerm‚ÜíequalInType (sym (sub0-#Œ£choice-body‚â° m name ‚ÑÇ‚ÇÅ¬∑)) eqi2
      where
        eqi1 : equalInType n w1 (#ASSERT‚ÇÉ (#APPLY (#CS name) m)) t‚ÇÅ t‚ÇÇ
        eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÉ-APPLY m (#CS name)) eqi

        eqt : equalTypes n w1 (#EQ (#APPLY (#CS name) m) #BTRUE #QTBOOL!) (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
        eqt = eqTypesEQ‚Üê (equalTypes-QTBOOL!-Type‚ÑÇ‚ÇÄ‚ÇÅ bcb n w1)
                          (‚ÜíequalInType-APPLY-CS-QTBOOL!-qt bcb cc (‚äë-compatible¬∑ e1 comp) j)
                          (equalInType-QT-BTRUE-‚ÑÇ‚ÇÅ bcb n w1)

        eqi2 : equalInType n w1 (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) t‚ÇÅ t‚ÇÇ
        eqi2 = equalTypes‚ÜíequalInType
                 (‚â°CTerm‚ÜíeqTypes (sym (#ASSERT‚ÇÉ‚â° (#APPLY (#CS name) m))) refl eqt)
                 eqi1

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #QTNAT! a‚ÇÅ a‚ÇÇ)
                        ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
    aw2 = equalTypes-#Œ£choice-qt-body-sub0 bcb cc n w name ‚ÑÇ‚ÇÅ¬∑ comp sat


Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÑ : (n : ‚Ñï) (w : ùïé¬∑) (f : CTerm)
                                        ‚Üí ‚ààType n w #QTNAT!‚ÜíQTBOOL! f
                                        ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w #QTNAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType n w (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))
                                        ‚Üí inhType n w (#SUM-ASSERT‚ÇÑ f)
Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÑ n w f f‚àà (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) =
  #PAIR n‚ÇÅ t ,
  equalInType-SUM
    (Œª w' _ ‚Üí eqTypesQTNAT!)
    (isType-MP-right-qt‚ÇÇ-body n w f f f‚àà)
    (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType n w' #QTNAT!)
                                (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
    aw w1 e1 =
      n‚ÇÅ , n‚ÇÅ , t , t , equalInType-refl (equalInType-mon n‚àà w1 e1) ,
      #‚áõ-refl w1 (#PAIR n‚ÇÅ t) , #‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
      ‚Üí‚â°equalInType (sym (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f)) (equalInType-mon inh w1 e1)


¬¨only‚ÑÇ‚ààùïé-#weakMonEq!-#weak‚ÑÇEq : (cc : c‚ÑÇ) (w : ùïé¬∑) (c : Name) (r : Res) (a‚ÇÅ a‚ÇÇ : CTerm) (k1 : ‚ÑÇ¬∑)
      ‚Üí ((w : ùïé¬∑) ‚Üí ¬¨ ‚àºC! w (‚ÑÇ‚ÜíC¬∑ (Res.def r)) (‚ÑÇ‚ÜíC¬∑ k1))
      ‚Üí compatible¬∑ c w r
      ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w
      ‚Üí #weakMonEq! w a‚ÇÅ a‚ÇÇ
      ‚Üí #weak‚ÑÇEq w (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1)
      ‚Üí ‚ä•
¬¨only‚ÑÇ‚ààùïé-#weakMonEq!-#weak‚ÑÇEq cc w c r a‚ÇÅ a‚ÇÇ k1 diff compat only wn wc with lower (wn w (‚äë-refl¬∑ w))
... | k , c‚ÇÅ , c‚ÇÇ with lower (cc c r w k compat w (‚äë-refl¬∑ w))
... |    inj‚ÇÅ gc = diff w h3
  where
    h1 : ‚ÑÇ‚ÇÄ¬∑ ‚â° Res.def r
    h1 = only k ‚ÑÇ‚ÇÄ¬∑ gc

    gt : getT k c w ‚â° just (‚ÑÇ‚ÜíT ‚ÑÇ‚ÇÄ¬∑)
    gt rewrite gc = refl

    ca : #APPLY (#CS c) a‚ÇÅ #‚áì! ‚ÑÇ‚ÜíC¬∑ ‚ÑÇ‚ÇÄ¬∑ at w
    ca = Œ£-steps-APPLY-CS (fst c‚ÇÅ) ‚åú a‚ÇÅ ‚åù (‚ÑÇ‚ÜíT ‚ÑÇ‚ÇÄ¬∑) w w k c (snd c‚ÇÅ) gt

    h2 : ‚àºC! w (‚ÑÇ‚ÜíC¬∑ ‚ÑÇ‚ÇÄ¬∑) (‚ÑÇ‚ÜíC¬∑ k1)
    h2 = lower (wc w (‚äë-refl¬∑ w)) ‚ÑÇ‚ÇÄ¬∑ k1 ca (‚áì!-refl (‚ÑÇ‚ÜíT k1) w)

    h3 : ‚àºC! w (‚ÑÇ‚ÜíC¬∑ (Res.def r)) (‚ÑÇ‚ÜíC¬∑ k1)
    h3 = subst (Œª x ‚Üí ‚àºC! w (‚ÑÇ‚ÜíC¬∑ x) (‚ÑÇ‚ÜíC¬∑ k1)) h1 h2
... |    inj‚ÇÇ gc = diff w h3
  where
    h1 : ‚ÑÇ‚ÇÅ¬∑ ‚â° Res.def r
    h1 = only k ‚ÑÇ‚ÇÅ¬∑ gc

    gt : getT k c w ‚â° just (‚ÑÇ‚ÜíT ‚ÑÇ‚ÇÅ¬∑)
    gt rewrite gc = refl

    ca : #APPLY (#CS c) a‚ÇÅ #‚áì! ‚ÑÇ‚ÜíC¬∑ ‚ÑÇ‚ÇÅ¬∑ at w
    ca = Œ£-steps-APPLY-CS (fst c‚ÇÅ) ‚åú a‚ÇÅ ‚åù (‚ÑÇ‚ÜíT ‚ÑÇ‚ÇÅ¬∑) w w k c (snd c‚ÇÅ) gt

    h2 : ‚àºC! w (‚ÑÇ‚ÜíC¬∑ ‚ÑÇ‚ÇÅ¬∑) (‚ÑÇ‚ÜíC¬∑ k1)
    h2 = lower (wc w (‚äë-refl¬∑ w)) ‚ÑÇ‚ÇÅ¬∑ k1 ca (‚áì!-refl (‚ÑÇ‚ÜíT k1) w)

    h3 : ‚àºC! w (‚ÑÇ‚ÜíC¬∑ (Res.def r)) (‚ÑÇ‚ÜíC¬∑ k1)
    h3 = subst (Œª x ‚Üí ‚àºC! w (‚ÑÇ‚ÜíC¬∑ x) (‚ÑÇ‚ÜíC¬∑ k1)) h1 h2


¬¨equalInType-#Œ£choice-qt : (cc : c‚ÑÇ) (i : ‚Ñï) (w : ùïé¬∑) (r : Res) (c : Name) {k1 : ‚ÑÇ¬∑}
                        ‚Üí isValue (‚ÑÇ‚ÜíT (Res.def r))
                        ‚Üí isValue (‚ÑÇ‚ÜíT k1)
                        ‚Üí ((w : ùïé¬∑) ‚Üí ¬¨ ‚àºC! w (‚ÑÇ‚ÜíC¬∑ (Res.def r)) (‚ÑÇ‚ÜíC¬∑ k1))
                        ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w
                        ‚Üí compatible¬∑ c w r
                        ‚Üí freezable¬∑ c w
                        ‚Üí ¬¨ inhType i w (#Œ£choice-qt c k1)
¬¨equalInType-#Œ£choice-qt cc i w r c {k1} isv‚ÇÅ isv‚ÇÇ diff oc comp fb (x , eqi) =
  ¬¨only‚ÑÇ‚ààùïé-#weakMonEq!-#weak‚ÑÇEq cc w3 c r a‚ÇÅ a‚ÇÇ k1 diff comp3 oc3 (‚àÄùïé-mon e3 ea3) eb6 --diff w4 sim3
  where
    h0 : equalInType i w (#SUM #QTNAT! (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k1) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) x x
    h0 rewrite #Œ£choice-qt‚â° c k1 = eqi

    h1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #QTNAT!) (Œª a b ea ‚Üí equalInType i w' (#EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)) w' x x)
    h1 = Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SUM‚Üí {i} {w} {#QTNAT!} {#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k1) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ} h0)
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType i w' #QTNAT!)
                                     (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k1) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                     w' x x
                           ‚Üí SUMeq (equalInType i w' #QTNAT!)
                                    (Œª a b ea ‚Üí equalInType i w' (#EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))
                                    w' x x)
        aw w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) rewrite sub0-#Œ£choice-body‚â° a‚ÇÅ c k1 = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb

    -- 1st jump to bar
    w1 : ùïé¬∑
    w1 = fst (ChoiceBar.followChoice CB c h1 oc comp fb)

    e1 : w ‚äë¬∑ w1
    e1 = fst (snd (ChoiceBar.followChoice CB c h1 oc comp fb))

    oc1 : only‚ÑÇ‚ààùïé (Res.def r) c w1
    oc1 = fst (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb)))

    comp1 : compatible¬∑ c w1 r
    comp1 = fst (snd (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb))))

    fb1 : freezable¬∑ c w1
    fb1 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb)))))

    h2 : SUMeq (equalInType i w1 #QTNAT!) (Œª a b ea ‚Üí equalInType i w1 (#EQ (#APPLY (#CS c) a) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)) w1 x x
    h2 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c h1 oc comp fb)))))

    a‚ÇÅ : CTerm
    a‚ÇÅ = fst h2

    a‚ÇÇ : CTerm
    a‚ÇÇ = fst (snd h2)

    b‚ÇÅ : CTerm
    b‚ÇÅ = fst (snd (snd h2))

    b‚ÇÇ : CTerm
    b‚ÇÇ = fst (snd (snd (snd h2)))

    ea1 : equalInType i w1 #QTNAT! a‚ÇÅ a‚ÇÇ
    ea1 = fst (snd (snd (snd (snd h2))))

    eb1 : equalInType i w1 (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
    eb1 = snd (snd (snd (snd (snd (snd (snd h2))))))

    -- 2nd jump to bar
    ea2 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí #weakMonEq! w' a‚ÇÅ a‚ÇÇ)
    ea2 = equalInType-QTNAT!‚Üí i w1 a‚ÇÅ a‚ÇÇ ea1

    w2 : ùïé¬∑
    w2 = fst (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)

    e2 : w1 ‚äë¬∑ w2
    e2 = fst (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1))

    oc2 : only‚ÑÇ‚ààùïé (Res.def r) c w2
    oc2 = fst (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)))

    comp2 : compatible¬∑ c w2 r
    comp2 = fst (snd (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1))))

    fb2 : freezable¬∑ c w2
    fb2 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)))))

    ea3 : #weakMonEq! w2 a‚ÇÅ a‚ÇÇ
    ea3 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c ea2 oc1 comp1 fb1)))))

    eb2 : equalInType i w2 (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
    eb2 = equalInType-mon eb1 w2 e2

    eb3 : equalInType i w2 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1)
    eb3 = equalInType-EQ‚Üí‚ÇÅ eb2

    --

    eb5 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí #weak‚ÑÇEq w' (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1))
    eb5 = ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ‚Üí¬∑ i w2 (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1) eb3

    -- 3rd jump to bar
    w3 : ùïé¬∑
    w3 = fst (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)

    e3 : w2 ‚äë¬∑ w3
    e3 = fst (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2))

    oc3 : only‚ÑÇ‚ààùïé (Res.def r) c w3
    oc3 = fst (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)))

    comp3 : compatible¬∑ c w3 r
    comp3 = fst (snd (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2))))

    fb3 : freezable¬∑ c w3
    fb3 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)))))

    eb6 : #weak‚ÑÇEq w3 (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k1)
    eb6 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB c eb5 oc2 comp2 fb2)))))


-- This version makes use of #QTNAT! and #QTBOOL!
-- It requires alwaysFreezable, which means that all names are always mutable.
-- Freezable/mutable is used to guarantee that if a name is freezable then freezing it will make it immutable.
-- + FCSs are always freezable, because freezable returns always true because FCS slots are immutable once filled out.
-- + References are not always freezable. Freezable retuns whether the cell is frozen, and once it is, it is not freezable anymore.
--   This is because a reference has only 1 cell to fill out.
-- Questions:
-- (1) Is c‚ÑÇ necessary?
-- (2) Are there stateful computations that satisfy both properties?
¬¨MP‚ÇÖ : (bcb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚ÇÖ) #lamAX
¬¨MP‚ÇÖ bcb cc afb w n = equalInType-NEG (isTypeMP‚ÇÖ w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP‚ÇÖ a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = h8 h7
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType n w' #QTNAT!‚ÜíQTBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
        aw2 = ‚àà#MP‚ÇÖ‚Üí n w1 F G ea

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
        oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ Res‚ÑÇ w1

        f : CTerm
        f = #CS name

        eqf1 : ‚ààType n w2 #QTNAT!‚ÜíQTBOOL! f
        eqf1 = ‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! bcb cc {n} {w2} {name} comp1

        h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                                   √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                               ‚Üí ‚ä•)
                             ‚Üí ‚ä•)
        h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice-qt bcb cc n w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (afb name w3) z
          where
            z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType n w4 (#Œ£choice-qt name ‚ÑÇ‚ÇÅ¬∑))
            z = ¬¨Œ£QTNAT!‚Üí¬¨inhType-Œ£choice-qt bcb n w3 name aw

        h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
        h4 = aw2 w2 e2 f eqf1 h3

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
        oc2 = fst (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 Res‚ÑÇ
        comp2 = fst (snd (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)))))

        h6 : Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w3 #QTNAT! n‚ÇÅ n‚ÇÇ
              √ó inhType n w3 (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))
        h6 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)))))

        h7 : inhType n w3 (#Œ£choice-qt name ‚ÑÇ‚ÇÅ¬∑)
        h7 = #SUM-ASSERT‚ÇÑ‚Üí#Œ£choice-qt bcb cc comp2 (0 , sat-‚ÑÇ‚ÇÅ 0) (Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÑ n w3 f (equalInType-mon eqf1 w3 e3) h6)

        h8 : ¬¨ inhType n w3 (#Œ£choice-qt name ‚ÑÇ‚ÇÅ¬∑)
        h8 = ¬¨equalInType-#Œ£choice-qt cc n w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ oc2 comp2 fb2

\end{code}
