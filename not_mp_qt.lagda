\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod


module not_mp_qt {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
                 (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
                 (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                 (F : Freeze {L} W C K P G N)
                 (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                 (CB : ChoiceBar W M C K P G X N V F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(E)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import mp_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_mp(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)


#QTNAT!‚ÜíT : CTerm ‚Üí CTerm
#QTNAT!‚ÜíT T = #FUN #QTNAT! T


c‚ÑÇ : Set(lsuc(L))
c‚ÑÇ = (c : Name) (w : ùïé¬∑) (n : ‚Ñï)
      ‚Üí compatible¬∑ c w Res‚ÑÇ
      ‚Üí ‚àÄùïé w (Œª w' e ‚Üí Lift {0‚Ñì} (lsuc(L)) (getChoice¬∑ n c w' ‚â° just ‚ÑÇ‚ÇÄ¬∑ ‚äé getChoice¬∑ n c w' ‚â° just ‚ÑÇ‚ÇÅ¬∑))


-- It seems that this would only be true with references because we don't have to jump to where 'a' is defined at 'n'
-- and we might then be able to use c‚ÑÇ above
‚áì!same‚Ñï‚Üí‚áì!same-bool : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (w : ùïé¬∑) (t1 t2 : Term) (a : Name)
                         ‚Üí compatible¬∑ a w Res‚ÑÇ
                         ‚Üí ‚áì!same‚Ñï w t1 t2
                         ‚Üí ‚áì!same-bool w (APPLY (CS a) t1) (APPLY (CS a) t2)
‚áì!same‚Ñï‚Üí‚áì!same-bool cb cc w t1 t2 a compat (n , c‚ÇÅ , c‚ÇÇ) with lower (cc a w n compat w (‚äë-refl¬∑ w))
... | inj‚ÇÅ gc = AX , AX , inj‚ÇÇ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) t1 BFALSE w w n a (snd c‚ÇÅ) gt ,
                                Œ£-steps-APPLY-CS (fst c‚ÇÇ) t2 BFALSE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BFALSE
      gt rewrite gc = ‚â°just (‚â°CTerm (fst (snd cb)))
... | inj‚ÇÇ gc = AX , AX , inj‚ÇÅ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) t1 BTRUE w w n a (snd c‚ÇÅ) gt ,
                                Œ£-steps-APPLY-CS (fst c‚ÇÇ) t2 BTRUE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BTRUE
      gt rewrite gc = ‚â°just (‚â°CTerm (snd (snd cb)))


‚áì!same‚Ñï‚Üí#‚áì!same-bool : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) (w : ùïé¬∑) (t1 t2 : CTerm) (a : Name)
                         ‚Üí compatible¬∑ a w Res‚ÑÇ
                         ‚Üí ‚áì!same‚Ñï w ‚åú t1 ‚åù ‚åú t2 ‚åù
                         ‚Üí #‚áì!same-bool w (#APPLY (#CS a) t1) (#APPLY (#CS a) t2)
‚áì!same‚Ñï‚Üí#‚áì!same-bool cb cc w t1 t2 a compat (n , c‚ÇÅ , c‚ÇÇ) with lower (cc a w n compat w (‚äë-refl¬∑ w))
... | inj‚ÇÅ gc = #AX , #AX , inj‚ÇÇ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) ‚åú t1 ‚åù BFALSE w w n a (snd c‚ÇÅ) gt ,
                                  Œ£-steps-APPLY-CS (fst c‚ÇÇ) ‚åú t2 ‚åù BFALSE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BFALSE
      gt rewrite gc = ‚â°just (‚â°CTerm (fst (snd cb)))
... | inj‚ÇÇ gc = #AX , #AX , inj‚ÇÅ (Œ£-steps-APPLY-CS (fst c‚ÇÅ) ‚åú t1 ‚åù BTRUE w w n a (snd c‚ÇÅ) gt ,
                                  Œ£-steps-APPLY-CS (fst c‚ÇÇ) ‚åú t2 ‚åù BTRUE w w n a (snd c‚ÇÇ) gt)
    where
      gt : getT n a w ‚â° just BTRUE
      gt rewrite gc = ‚â°just (‚â°CTerm (snd (snd cb)))


‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! : (cb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) {n : ‚Ñï} {w : ùïé¬∑} {a : Name}
                                   ‚Üí compatible¬∑ a w Res‚ÑÇ
                                   ‚Üí ‚ààType n w (#QTNAT!‚ÜíQTBOOL!) (#CS a)
‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! cb cc {n} {w} {a} compat =
  equalInType-FUN eqTypesQTNAT! (eqTypesQTBOOL! {w} {n}) aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #QTNAT! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType n w' #QTBOOL! (#APPLY (#CS a) a‚ÇÅ) (#APPLY (#CS a) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea =
      ‚ÜíequalInType-QTBOOL! n w1 (#APPLY (#CS a) a‚ÇÅ) (#APPLY (#CS a) a‚ÇÇ) (Mod.‚àÄùïé-‚ñ°Func M aw1 ea1)
      where
        ea1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí #weakMonEq! w' a‚ÇÅ a‚ÇÇ)
        ea1 = equalInType-QTNAT!‚Üí n w1 a‚ÇÅ a‚ÇÇ ea

        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí #weakMonEq! w' a‚ÇÅ a‚ÇÇ ‚Üí #weakBool! w' (#APPLY (#CS a) a‚ÇÅ) (#APPLY (#CS a) a‚ÇÇ))
        aw1 w2 e2 wm w3 e3 = lift (‚áì!same‚Ñï‚Üí#‚áì!same-bool cb cc w3 a‚ÇÅ a‚ÇÇ a (‚äë-compatible¬∑ (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)) compat) (lower (wm w3 e3)))
 {--(m , c‚ÇÅ , c‚ÇÇ) = equalTerms-pres-#‚áõ-left-rev‚ÜíequalInType-pres-#‚áõ-LR-rev
                                    T pres {n} {w2}
                                    {#APPLY (#CS a) a‚ÇÅ} {#APPLY (#CS a) (#NUM m)} {#APPLY (#CS b) a‚ÇÇ} {#APPLY (#CS b) (#NUM m)}
                                    (#‚áõ!-APPLY-CS {w2} {a‚ÇÅ} {#NUM m} a c‚ÇÅ)
                                    (#‚áõ!-APPLY-CS {w2} {a‚ÇÇ} {#NUM m} b c‚ÇÇ)
                                    (i w2 (‚äë-trans¬∑ e1 e2) m)
--}


¬¨MP‚ÇÖ : (bcb : QTBool‚ÑÇ CB) (cc : c‚ÑÇ) ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚ÇÖ) #lamAX
¬¨MP‚ÇÖ bcb cc afb w n = equalInType-NEG (isTypeMP‚ÇÖ w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP‚ÇÖ a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = {!!} --h8 h7
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType n w' #QTNAT!‚ÜíQTBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
        aw2 = ‚àà#MP‚ÇÖ‚Üí n w1 F G ea

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
        oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ Res‚ÑÇ w1

        f : CTerm
        f = #CS name

        --eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #QTBOOL! (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        --eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #QTNAT!‚ÜíQTBOOL! f
        eqf1 = ‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! bcb cc {n} {w2} {name} comp1 --‚ÜíequalInType-CS-QTNAT!‚ÜíQTBOOL! eqf2

{--
        h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #QTNAT! n‚ÇÅ n‚ÇÇ
                                                   √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                               ‚Üí ‚ä•)
                             ‚Üí ‚ä•)
        h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice n w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (afb name w3) z
          where
            z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType n w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
            z = ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice bcb n w3 name aw

        h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
        h4 = aw2 w2 e2 f eqf1 h3

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
        oc2 = fst (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 Res‚ÑÇ
        comp2 = fst (snd (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)))))

        h6 : Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w3 #NAT! n‚ÇÅ n‚ÇÇ
              √ó inhType n w3 (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))
        h6 = snd (snd (snd (snd (snd (ChoiceBar.followChoice CB name h4 oc1 comp1 fb1)))))

        h7 : inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h7 = #SUM-ASSERT‚ÇÉ‚Üí#Œ£choice bcb comp2 (0 , sat-‚ÑÇ‚ÇÅ 0) (Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÉ n w3 f (equalInType-mon eqf1 w3 e3) h6)

        h8 : ¬¨ inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h8 = ¬¨equalInType-#Œ£choice n w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ oc2 comp2 fb2
--}

\end{code}
