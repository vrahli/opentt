\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity5b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4b(W)(M)(C)(K)(P)(G)(X)(N)(E)



-- subRen r1 r2 means that r1 is a sub-renaming of r2
data subRen (l k : List Name) : ren ‚Üí ren ‚Üí Set where
  subRen-refl : (r : ren) ‚Üí subRen l k r r
  subRen-trans : (a b : Name) (r1 r2 : ren)
                 ‚Üí ¬¨ a ‚àà l -- The new names picked are 'fresh' names
                 ‚Üí ¬¨ b ‚àà k
                 ‚Üí subRen l k r1 r2
                 ‚Üí subRen l k r1 ((a , b) ‚à∑ r2)


presUpdRel2 : (n : ‚Ñï) (name : Name) (f g : Term) (k : ‚Ñï) ‚Üí Set(lsuc L)
presUpdRel2 n name f g k =
  {a b v : Term} {w0 w1 w2 w : ùïé¬∑} {r : ren}
  ‚Üí updRel2 name f g r a b
  ‚Üí names a ‚äÜ domùïé¬∑ w1
  ‚Üí names b ‚äÜ domùïé¬∑ w
  ‚Üí name ‚àà domùïé¬∑ w
--  ‚Üí names f ‚äÜ domùïé¬∑ w1
--  ‚Üí names g ‚äÜ domùïé¬∑ w
  ‚Üí uptoùïé name w1 w r
  ‚Üí compatible¬∑ name w1 Res‚ä§
  ‚Üí compatible¬∑ name w Res‚ä§
  ‚Üí ‚àÄùïé-get0-NUM w1 name
-- We use ‚àÄùïé-‚áì‚àº‚Ñï instead of strongMonEq because if g could change the target world, it could be used for...
--  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚àÄùïé-‚áì‚àº‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí w0 ‚äë¬∑ w1
  ‚Üí w0 ‚äë¬∑ w
  ‚Üí ‚àÄùïé w0 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚áõ!same‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
  ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n name comp
  ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {v} name comp
  ‚Üí isValue v
  ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ren (Œª r' ‚Üí
      steps k' (b , w) ‚â° (v' , w')
      √ó updRel2 name f g r' v v'
      √ó uptoùïé name w2 w' r'
      √ó subRen (domùïé¬∑ w1) (domùïé¬∑ w) r r'))))


stepsPresUpdRel2 : (n : ‚Ñï) (name : Name) (f g : Term) (b : Term) (w : ùïé¬∑) ‚Üí Set(lsuc L)
stepsPresUpdRel2 n name f g b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£ (steps k (b , w) ‚â° (v , w')) (Œª comp ‚Üí
    isValue v
    √ó isHighest‚Ñï {k} {w} {w'} {b} {v} n name comp
    √ó ‚àànamesùïé {k} {w} {w'} {b} {v} name comp
    √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel2 n name f g k')))))


-- NOTE: We won't be able to prove that for impure terms x because it might read a choice
-- and return 2 different values in the two worlds w2 and w
Œ£stepsUpdRel2 : (name : Name) (f g : Term) (x : Term) (w1 w2 : ùïé¬∑) (b : Term) (w : ùïé¬∑) (r : ren) ‚Üí Set(1‚Ñì Level.‚äî L)
Œ£stepsUpdRel2 name f g x w1 w2 b w r =
  Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ Term (Œª y1 ‚Üí Œ£ Term (Œª y2 ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ren (Œª r' ‚Üí
    steps k1 (x , w2) ‚â° (y1 , w3)
    √ó steps k2 (b , w) ‚â° (y2 , w')
    √ó updRel2 name f g r' y1 y2
    √ó uptoùïé name w3 w' r'
    √ó subRen (domùïé¬∑ w1) (domùïé¬∑ w) r r')))))))



isHighest‚Ñï2-APPLY‚ÇÇ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {name' : Name} {b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (APPLY (CS name') b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY (CS name') b} {v} n name comp
                      ‚Üí ‚àànamesùïé {k} {w} {w'} {APPLY (CS name') b} {v} name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {b} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {0} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv h inw
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv h inw with is-NUM b
... | inj‚ÇÅ (j , r) rewrite r with getT j name' w
... |    just t = 0 , NUM j , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |    nothing = 0 , NUM j , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ r with step‚äé b w
... |    inj‚ÇÅ (b0 , w0 , z) rewrite z = suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {b0} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w0} {w''} {b0} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {k} {name} {f} {g} {name'} {b0} {v} {w0} {w'} comp isv (snd h) (snd (snd inw))

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {b} {u} n name comp'
                          √ó ‚àànamesùïé {suc (fst ind)} {w} {w''} {b} {u} name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      (fst inw , fst (snd inw) , fst (snd (snd (snd (snd (snd ind)))))) ,
      fst (snd (snd (snd (snd (snd (snd ind)))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd (snd ind)))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel2-APPLY‚ÇÇ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {name' : Name} {b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel2 n name f g (APPLY (CS name') b) w
                           ‚Üí stepsPresUpdRel2 n name f g b w
stepsPresUpdRel2-APPLY‚ÇÇ‚Üí {n} {name} {f} {g} {name'} {b} {w} (k , v , w' , comp , isv , ish , inw , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd (snd hv)))))) , fst (snd (snd (snd (snd hv)))) ,
  fst (snd (snd (snd (snd (snd hv))))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd (snd hv)))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {b} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï2-APPLY‚ÇÇ‚Üí {n} {k} {name} {f} {g} {name'} {b} {v} {w} {w'} comp isv ish inw


‚ÜíŒ£-steps-APPLY-CS : (n : ‚Ñï) (a b : Term) (w w' : ùïé¬∑) (name : Name)
                 ‚Üí steps n (a , w) ‚â° (b , w')
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí steps m (APPLY (CS name) a , w) ‚â° (APPLY (CS name) b , w'))
‚ÜíŒ£-steps-APPLY-CS n a b w w' name h =
  fst (Œ£-steps-APPLY-CS‚â§ n a b w w' name h) ,
  snd (snd (Œ£-steps-APPLY-CS‚â§ n a b w w' name h))



dren : ren ‚Üí ren
dren [] = []
dren ((a , b) ‚à∑ r) = (pred a , pred b) ‚à∑ dren r



‚ààren-sucIf‚â§-ren‚Üí : (n name1 name2 : Name) (r : ren)
                    ‚Üí (sucIf‚â§ n name1 , sucIf‚â§ n name2) ‚àà sucIf‚â§-ren n r
                    ‚Üí (name1 , name2) ‚àà r
‚ààren-sucIf‚â§-ren‚Üí n name1 name2 ((a , b) ‚à∑ xs) (here px)
  rewrite sym (sucIf‚â§-inj {n} {name1} {a} (pair-inj‚ÇÅ px))
        | sym (sucIf‚â§-inj {n} {name2} {b} (pair-inj‚ÇÇ px)) = here refl
‚ààren-sucIf‚â§-ren‚Üí n name1 name2 (x ‚à∑ xs) (there i) = there (‚ààren-sucIf‚â§-ren‚Üí n name1 name2 xs i)



‚Üí‚ààren‚Çó-sucIf‚â§-ren : {name : Name} {r : ren} (n : Name)
                    ‚Üí name ‚àà ren‚Çó r
                    ‚Üí sucIf‚â§ n name ‚àà ren‚Çó (sucIf‚â§-ren n r)
‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {[]} n ()
‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (here px) rewrite sym px = here refl
‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (there i) = there (‚Üí‚ààren‚Çó-sucIf‚â§-ren {name} {r} n i)


‚Üí‚ààren·µ£-sucIf‚â§-ren : {name : Name} {r : ren} (n : Name)
                    ‚Üí name ‚àà ren·µ£ r
                    ‚Üí sucIf‚â§ n name ‚àà ren·µ£ (sucIf‚â§-ren n r)
‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {[]} n ()
‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (here px) rewrite sym px = here refl
‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {(a , b) ‚à∑ r} n (there i) = there (‚Üí‚ààren·µ£-sucIf‚â§-ren {name} {r} n i)


names‚ààren-sucIf‚â§-ren‚Üí : (n name1 name2 : Name) (r : ren)
                         ‚Üí names‚ààren (sucIf‚â§ n name1) (sucIf‚â§ n name2) (sucIf‚â§-ren n r)
                         ‚Üí names‚ààren name1 name2 r
names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 [] e = sucIf‚â§-inj {n} {name1} {name2} e
names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 ((a , b) ‚à∑ r) (inj‚ÇÅ (e‚ÇÅ , e‚ÇÇ)) =
  inj‚ÇÅ (sucIf‚â§-inj {n} {name1} {a} e‚ÇÅ , (sucIf‚â§-inj {n} {name2} {b} e‚ÇÇ))
names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 ((a , b) ‚à∑ r) (inj‚ÇÇ (e‚ÇÅ , e‚ÇÇ , x)) =
  inj‚ÇÇ ((Œª z ‚Üí e‚ÇÅ (‚Üí‚â°sucIf‚â§ z)) , (Œª z ‚Üí e‚ÇÇ (‚Üí‚â°sucIf‚â§ z)) , (names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 r x))



force‚â°shiftNameUp‚Üí : (v : Var) (name : Name) (g : Term) (b : Term)
                      ‚Üí LET (VAR 0) (APPLY (shiftNameUp v g) (VAR 0)) ‚â° shiftNameUp v b
                      ‚Üí b ‚â° LET (VAR 0) (APPLY g (VAR 0))
force‚â°shiftNameUp‚Üí v name g (LET (VAR 0) (APPLY b (VAR 0))) e
  rewrite shiftNameUp-inj {v} {g} {b} (APPLYinj1 (LETinj2 e)) = refl



updRel2-shiftNameUp-LAMBDA‚Üí : (v : Name) {name : Name} {f g : Term} (cf : # f) (cg : # g) {r : ren} {a b t u : Term}
                                ‚Üí t ‚â° shiftNameUp v a
                                ‚Üí u ‚â° shiftNameUp v b
                                ‚Üí updRel2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v g) (sucIf‚â§-ren v r) (LAMBDA t) u
                                ‚Üí ((c : Term)
                                    ‚Üí updRel2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v g) (sucIf‚â§-ren v r) (shiftNameUp v a) (shiftNameUp v c)
                                    ‚Üí updRel2 name f g r a c)
                                ‚Üí updRel2 name f g r (LAMBDA a) b
updRel2-shiftNameUp-LAMBDA‚Üí v {name} {f} {g} cf cg {r} {a} {LAMBDA b} {t} {.(LAMBDA c)} e‚ÇÅ e‚ÇÇ (updRel2-LAMBDA .t c u‚ÇÅ) ind rewrite e‚ÇÅ | LAMinj e‚ÇÇ = updRel2-LAMBDA _ _ (ind b u‚ÇÅ)
updRel2-shiftNameUp-LAMBDA‚Üí v {name} {f} {g} cf cg {r} {a} {LAMBDA b} {.(updBody (sucIf‚â§ v name) (shiftNameUp v f))} {.(force (shiftNameUp v g))} e‚ÇÅ e‚ÇÇ updRel2-upd ind
  rewrite updBody‚â°shiftNameUp‚Üí v name f a e‚ÇÅ
        | force‚â°shiftNameUp‚Üí v name g b (LAMinj e‚ÇÇ) = updRel2-upd



updRel2-shiftNameUp‚Üí : (n : ‚Ñï) {name : Name} {f g : Term} {r : ren} (cf : # f) (cg : # g) {a b : Term}
                        ‚Üí updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (sucIf‚â§-ren n r) (shiftNameUp n a) (shiftNameUp n b)
                        ‚Üí updRel2 name f g r a b
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {VAR x} {VAR .x} (updRel2-VAR .x) = updRel2-VAR x
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {NAT} {NAT} updRel2-NAT = updRel2-NAT
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {QNAT} {QNAT} updRel2-QNAT = updRel2-QNAT
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {TNAT} {TNAT} updRel2-TNAT = updRel2-TNAT
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {LT a a‚ÇÅ} {LT b b‚ÇÅ} (updRel2-LT .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {QLT a a‚ÇÅ} {QLT b b‚ÇÅ} (updRel2-QLT .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {NUM x} {NUM .x} (updRel2-NUM .x) = updRel2-NUM x
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} {IFLT b b‚ÇÅ b‚ÇÇ b‚ÇÉ} (updRel2-IFLT .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) .(shiftNameUp n a‚ÇÇ) .(shiftNameUp n b‚ÇÇ) .(shiftNameUp n a‚ÇÉ) .(shiftNameUp n b‚ÇÉ) u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÇ) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÉ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {SUC a} {SUC b} (updRel2-SUC .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-SUC _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {PI a a‚ÇÅ} {PI b b‚ÇÅ} (updRel2-PI .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {LAMBDA a} {b} u =
  updRel2-shiftNameUp-LAMBDA‚Üí n {name} {f} {g} cf cg {r} {a} {b} {shiftNameUp n a} {shiftNameUp n b} refl refl u ind
  where
    ind : (c : Term)
          ‚Üí updRel2 (sucIf‚â§ n name) (shiftNameUp n f) (shiftNameUp n g) (sucIf‚â§-ren n r) (shiftNameUp n a) (shiftNameUp n c)
          ‚Üí updRel2 name f g r a c
    ind c = updRel2-shiftNameUp‚Üí n cf cg {a} {c}
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {APPLY a a‚ÇÅ} {APPLY b b‚ÇÅ} (updRel2-APPLY .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {FIX a} {FIX b} (updRel2-FIX .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-FIX _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {LET a a‚ÇÅ} {LET b b‚ÇÅ} (updRel2-LET .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {SUM a a‚ÇÅ} {SUM b b‚ÇÅ} (updRel2-SUM .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {PAIR a a‚ÇÅ} {PAIR b b‚ÇÅ} (updRel2-PAIR .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {SPREAD a a‚ÇÅ} {SPREAD b b‚ÇÅ} (updRel2-SPREAD .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {SET a a‚ÇÅ} {SET b b‚ÇÅ} (updRel2-SET .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {TUNION a a‚ÇÅ} {TUNION b b‚ÇÅ} (updRel2-TUNION .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {ISECT a a‚ÇÅ} {ISECT b b‚ÇÅ} (updRel2-ISECT .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {UNION a a‚ÇÅ} {UNION b b‚ÇÅ} (updRel2-UNION .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {QTUNION a a‚ÇÅ} {QTUNION b b‚ÇÅ} (updRel2-QTUNION .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {INL a} {INL b} (updRel2-INL .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-INL _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {INR a} {INR b} (updRel2-INR .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-INR _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {DECIDE a a‚ÇÅ a‚ÇÇ} {DECIDE b b‚ÇÅ b‚ÇÇ} (updRel2-DECIDE .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) .(shiftNameUp n a‚ÇÇ) .(shiftNameUp n b‚ÇÇ) u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÇ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {EQ a a‚ÇÅ a‚ÇÇ} {EQ b b‚ÇÅ b‚ÇÇ} (updRel2-EQ .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) .(shiftNameUp n a‚ÇÇ) .(shiftNameUp n b‚ÇÇ) u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÇ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {EQB a a‚ÇÅ a‚ÇÇ a‚ÇÉ} {EQB b b‚ÇÅ b‚ÇÇ b‚ÇÉ} (updRel2-EQB .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) .(shiftNameUp n a‚ÇÇ) .(shiftNameUp n b‚ÇÇ) .(shiftNameUp n a‚ÇÉ) .(shiftNameUp n b‚ÇÉ) u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÇ) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÉ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {AX} {AX} updRel2-AX = updRel2-AX
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {FREE} {FREE} updRel2-FREE = updRel2-FREE
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {CS name1} {CS name2} (updRel2-CS .(sucIf‚â§ n name1) .(sucIf‚â§ n name2) d1 d2 i) = updRel2-CS name1 name2 (Œª z ‚Üí d1 (‚Üí‚â°sucIf‚â§ z)) (Œª z ‚Üí d2 (‚Üí‚â°sucIf‚â§ z)) (names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 r i)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {NAME name1} {NAME name2} (updRel2-NAME .(sucIf‚â§ n name1) .(sucIf‚â§ n name2) d1 d2 i) = updRel2-NAME name1 name2 (Œª z ‚Üí d1 (‚Üí‚â°sucIf‚â§ z)) (Œª z ‚Üí d2 (‚Üí‚â°sucIf‚â§ z)) (names‚ààren-sucIf‚â§-ren‚Üí n name1 name2 r i)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {FRESH a} {FRESH b} (updRel2-FRESH .(shiftNameUp (suc n) a) .(shiftNameUp (suc n) b) u) =
  updRel2-FRESH _ _ (updRel2-shiftNameUp‚Üí (suc n) {suc name} {shiftNameUp 0 f}
                       {shiftNameUp 0 g} {sren r} (‚Üí#shiftNameUp 0 {f} cf)
                       (‚Üí#shiftNameUp 0 {g} cg) {a} {b} upd1)
  where
    seq1 : suc (sucIf‚â§ n name) ‚â° sucIf‚â§ (suc n) (sucIf‚â§ 0 name)
    seq1 rewrite sym (sucIf‚â§-sucIf‚â§ {name} {0} {n} _‚â§_.z‚â§n) | sym (suc‚â°sucIf‚â§0 (sucIf‚â§ n name)) = refl

    seq2 : sren (sucIf‚â§-ren n r) ‚â° sucIf‚â§-ren (suc n) (sren r)
    seq2 = sym (sucIf‚â§-ren-suc-sren n r)

    upd1 : updRel2 (sucIf‚â§ (suc n) (suc name))
                   (shiftNameUp (suc n) (shiftNameUp 0 f))
                   (shiftNameUp (suc n) (shiftNameUp 0 g))
                   (sucIf‚â§-ren (suc n) (sren r))
                   (shiftNameUp (suc n) a)
                   (shiftNameUp (suc n) b)
    upd1 rewrite suc‚â°sucIf‚â§0 name | sym seq1 | sym seq2 | sym (shiftNameUp-shiftNameUp {0} {n} {f} _‚â§_.z‚â§n) | sym (shiftNameUp-shiftNameUp {0} {n} {g} _‚â§_.z‚â§n) = u
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {LOAD a} {LOAD .a} (updRel2-LOAD .a) = updRel2-LOAD _
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {CHOOSE a a‚ÇÅ} {CHOOSE b b‚ÇÅ} (updRel2-CHOOSE .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {TSQUASH a} {TSQUASH b} (updRel2-TSQUASH .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-TSQUASH _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {TTRUNC a} {TTRUNC b} (updRel2-TTRUNC .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-TTRUNC _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {TCONST a} {TCONST b} (updRel2-TCONST .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-TCONST _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {SUBSING a} {SUBSING b} (updRel2-SUBSING .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-SUBSING _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {DUM a} {DUM b} (updRel2-DUM .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-DUM _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {FFDEFS a a‚ÇÅ} {FFDEFS b b‚ÇÅ} (updRel2-FFDEFS .(shiftNameUp n a) .(shiftNameUp n b) .(shiftNameUp n a‚ÇÅ) .(shiftNameUp n b‚ÇÅ) u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-shiftNameUp‚Üí n cf cg u) (updRel2-shiftNameUp‚Üí n cf cg u‚ÇÅ)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {PURE} {PURE} updRel2-PURE = updRel2-PURE
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {UNIV x} {UNIV .x} (updRel2-UNIV .x) = updRel2-UNIV x
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {LIFT a} {LIFT b} (updRel2-LIFT .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-LIFT _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {LOWER a} {LOWER b} (updRel2-LOWER .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-LOWER _ _ (updRel2-shiftNameUp‚Üí n cf cg u)
updRel2-shiftNameUp‚Üí n {name} {f} {g} {r} cf cg {SHRINK a} {SHRINK b} (updRel2-SHRINK .(shiftNameUp n a) .(shiftNameUp n b) u) = updRel2-SHRINK _ _ (updRel2-shiftNameUp‚Üí n cf cg u)



‚ÜíupdRel2-shiftNameDown : (v : Name) {name : Name} {f g : Term} (cf : # f) (cg : # g) (r : ren) {a b : Term}
                           ‚Üí ((x : Name) ‚Üí x ‚àà names a ‚Üí ¬¨ x ‚â° v)
                           ‚Üí ((x : Name) ‚Üí x ‚àà names b ‚Üí ¬¨ x ‚â° v)
                           ‚Üí (0 ‚àà names a ‚Üí 0 < v)
                           ‚Üí (0 ‚àà names b ‚Üí 0 < v)
                           ‚Üí updRel2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v g) (sucIf‚â§-ren v r) a b
                           ‚Üí updRel2 name f g r (shiftNameDown v a) (shiftNameDown v b)
‚ÜíupdRel2-shiftNameDown v {name} {f} {g} cf cg r {a} {b} impa1 impb1 impa2 impb2 u =
  updRel2-shiftNameUp‚Üí v {name} {f} {g} {r} cf cg {shiftNameDown v a} {shiftNameDown v b} upd1
  where
    upd1 : updRel2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v g) (sucIf‚â§-ren v r) (shiftNameUp v (shiftNameDown v a)) (shiftNameUp v (shiftNameDown v b))
    upd1 rewrite shiftNameUpDown v a impa1 impa2 | shiftNameUpDown v b impb1 impb2 = u




‚ÜíupdRel2-shiftNameDown0 : {name : Name} {f g : Term} (cf : # f) (cg : # g) (r : ren) {a b : Term}
                           ‚Üí ¬¨ 0 ‚àà names a
                           ‚Üí ¬¨ 0 ‚àà names b
                           ‚Üí updRel2 (suc name) (shiftNameUp 0 f) (shiftNameUp 0 g) (sren r) a b
                           ‚Üí updRel2 name f g r (shiftNameDown 0 a) (shiftNameDown 0 b)
‚ÜíupdRel2-shiftNameDown0 {name} {f} {g} cf cg r {a} {b} impa impb u =
  ‚ÜíupdRel2-shiftNameDown
    0 {name} {f} {g} cf cg r {a} {b} na nb
    (Œª x ‚Üí ‚ä•-elim (impa x)) (Œª x ‚Üí ‚ä•-elim (impb x))
    u'
  where
    na : (x : Name) ‚Üí x ‚àà names a ‚Üí ¬¨ x ‚â° 0
    na x i e rewrite e = impa i

    nb : (x : Name) ‚Üí x ‚àà names b ‚Üí ¬¨ x ‚â° 0
    nb x i e rewrite e = impb i

    u' : updRel2 (sucIf‚â§ 0 name) (shiftNameUp 0 f) (shiftNameUp 0 g) (sucIf‚â§-ren 0 r) a b
    u' rewrite sym (suc‚â°sucIf‚â§0 name) | sym (sren‚â°sucIf‚â§0-ren r) = u



‚Üínames‚ààren‚à∑ : {n1 n2 name1 name2 : Name} {r : ren}
               ‚Üí ¬¨ n1 ‚â° name1
               ‚Üí ¬¨ n2 ‚â° name2
               ‚Üí names‚ààren name1 name2 r
               ‚Üí names‚ààren name1 name2 ((n1 , n2) ‚à∑ r)
‚Üínames‚ààren‚à∑ {n1} {n2} {name1} {name2} {r} d1 d2 i =
  inj‚ÇÇ ((Œª z ‚Üí d1 (sym z)) , (Œª z ‚Üí d2 (sym z)) , i)



‚Üí‚ààren‚Çó : (a b : Name) (r : ren) ‚Üí (a , b) ‚àà r ‚Üí a ‚àà ren‚Çó r
‚Üí‚ààren‚Çó a b ((u , v) ‚à∑ r) (here px) rewrite pair-inj‚ÇÅ px | pair-inj‚ÇÇ px = here refl
‚Üí‚ààren‚Çó a b ((u , v) ‚à∑ r) (there i) = there (‚Üí‚ààren‚Çó a b r i)


‚Üí‚ààren·µ£ : (a b : Name) (r : ren) ‚Üí (a , b) ‚àà r ‚Üí b ‚àà ren·µ£ r
‚Üí‚ààren·µ£ a b ((u , v) ‚à∑ r) (here px) rewrite pair-inj‚ÇÅ px | pair-inj‚ÇÇ px = here refl
‚Üí‚ààren·µ£ a b ((u , v) ‚à∑ r) (there i) = there (‚Üí‚ààren·µ£ a b r i)


suc‚ààren‚Çó-sren‚Üí : {n : Name} {r : ren}
                 ‚Üí suc n ‚àà ren‚Çó (sren r)
                 ‚Üí n ‚àà ren‚Çó r
suc‚ààren‚Çó-sren‚Üí {n} {[]} ()
suc‚ààren‚Çó-sren‚Üí {n} {(a , b) ‚à∑ r} (here p) = here (suc-injective p)
suc‚ààren‚Çó-sren‚Üí {n} {(a , b) ‚à∑ r} (there p) = there (suc‚ààren‚Çó-sren‚Üí p)


suc‚ààren·µ£-sren‚Üí : {n : Name} {r : ren}
                 ‚Üí suc n ‚àà ren·µ£ (sren r)
                 ‚Üí n ‚àà ren·µ£ r
suc‚ààren·µ£-sren‚Üí {n} {[]} ()
suc‚ààren·µ£-sren‚Üí {n} {(a , b) ‚à∑ r} (here p) = here (suc-injective p)
suc‚ààren·µ£-sren‚Üí {n} {(a , b) ‚à∑ r} (there p) = there (suc‚ààren·µ£-sren‚Üí p)


¬¨‚ààren‚Çó-names‚ààren‚Üí : (n1 n2 : Name) (r : ren)
                    ‚Üí names‚ààren n1 n2 r
                    ‚Üí ¬¨ n1 ‚àà ren‚Çó r
                    ‚Üí n1 ‚â° n2
¬¨‚ààren‚Çó-names‚ààren‚Üí n1 n2 [] i d = i
¬¨‚ààren‚Çó-names‚ààren‚Üí n1 n2 ((a , b) ‚à∑ r) (inj‚ÇÅ (i‚ÇÅ , i‚ÇÇ)) d rewrite i‚ÇÅ | i‚ÇÇ = ‚ä•-elim (d (here refl))
¬¨‚ààren‚Çó-names‚ààren‚Üí n1 n2 ((a , b) ‚à∑ r) (inj‚ÇÇ (i‚ÇÅ , i‚ÇÇ , x)) d = ¬¨‚ààren‚Çó-names‚ààren‚Üí n1 n2 r x (Œª z ‚Üí d (there z))



¬¨‚ààren·µ£-names‚ààren‚Üí : (n1 n2 : Name) (r : ren)
                    ‚Üí names‚ààren n1 n2 r
                    ‚Üí ¬¨ n2 ‚àà ren·µ£ r
                    ‚Üí n1 ‚â° n2
¬¨‚ààren·µ£-names‚ààren‚Üí n1 n2 [] i d = i
¬¨‚ààren·µ£-names‚ààren‚Üí n1 n2 ((a , b) ‚à∑ r) (inj‚ÇÅ (i‚ÇÅ , i‚ÇÇ)) d rewrite i‚ÇÅ | i‚ÇÇ = ‚ä•-elim (d (here refl))
¬¨‚ààren·µ£-names‚ààren‚Üí n1 n2 ((a , b) ‚à∑ r) (inj‚ÇÇ (i‚ÇÅ , i‚ÇÇ , x)) d = ¬¨‚ààren·µ£-names‚ààren‚Üí n1 n2 r x (Œª z ‚Üí d (there z))


updRel2-renn : {name : Name} {f g : Term} {r : ren} {a b : Term} (n n1 n2 : Name)
               ‚Üí ¬¨ n1 ‚àà names a
               ‚Üí ¬¨ n2 ‚àà names b
               ‚Üí ¬¨ n1 ‚â° name
               ‚Üí ¬¨ n2 ‚â° name
               ‚Üí ¬¨ n ‚àà ren‚Çó r
               ‚Üí ¬¨ n ‚àà ren·µ£ r
               ‚Üí ¬¨ n ‚àà names f
               ‚Üí ¬¨ n ‚àà names g
               ‚Üí ¬¨ n ‚â° name
               ‚Üí updRel2 name f g r a b
               ‚Üí updRel2 name f g ((n1 , n2) ‚à∑ r) (renn n n1 a) (renn n n2 b)
updRel2-renn {name} {f} {g} {r} {.(VAR x)} {.(VAR x)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-VAR x) = updRel2-VAR x
updRel2-renn {name} {f} {g} {r} {.NAT} {.NAT} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-NAT = updRel2-NAT
updRel2-renn {name} {f} {g} {r} {.QNAT} {.QNAT} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-QNAT = updRel2-QNAT
updRel2-renn {name} {f} {g} {r} {.TNAT} {.TNAT} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-TNAT = updRel2-TNAT
updRel2-renn {name} {f} {g} {r} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LT _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QLT _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(NUM x)} {.(NUM x)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-NUM x) = updRel2-NUM x
updRel2-renn {name} {f} {g} {r} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ) (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÇ) (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÉ)
updRel2-renn {name} {f} {g} {r} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-SUC a‚ÇÅ a‚ÇÇ u) = updRel2-SUC _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PI _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel2-LAMBDA _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-APPLY _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-FIX a‚ÇÅ a‚ÇÇ u) = updRel2-FIX _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-LET _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SUM _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-PAIR _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SPREAD _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-SET _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-ISECT _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-TUNION _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-UNION _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-QTUNION _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-INL a‚ÇÅ a‚ÇÇ u) = updRel2-INL _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-INR a‚ÇÅ a‚ÇÇ u) = updRel2-INR _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {n1} na) (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {n1} na) (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ) (updRel2-renn n n1 n2 (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {n1} na) (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÇ)
updRel2-renn {name} {f} {g} {r} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel2-EQ _ _ _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {n1} na) (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {n1} na) (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ) (updRel2-renn n n1 n2 (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {n1} na) (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÇ)
updRel2-renn {name} {f} {g} {r} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel2-EQB _ _ _ _ _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ) (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÇ) (updRel2-renn n n1 n2 (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {n1} na) (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÉ)
updRel2-renn {name} {f} {g} {r} {.AX} {.AX} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-AX = updRel2-AX
updRel2-renn {name} {f} {g} {r} {.FREE} {.FREE} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-FREE = updRel2-FREE
updRel2-renn {name} {f} {g} {r} {.(CS name1)} {.(CS name2)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-CS name1 name2 x x‚ÇÅ x‚ÇÇ) with name1 ‚âü n | name2 ‚âü n
... | yes p | yes q rewrite p | q = updRel2-CS n1 n2 d1 d2 (inj‚ÇÅ (refl , refl))
... | yes p | no q rewrite p = updRel2-CS n1 name2 d1 x‚ÇÅ (‚ä•-elim (c x‚ÇÇ))
  where
    c : ¬¨ names‚ààren n name2 r
    c i = q (sym (¬¨‚ààren‚Çó-names‚ààren‚Üí n name2 r i nr1)) {--(inj‚ÇÅ (i , x‚ÇÅ , x‚ÇÇ)) rewrite i = q refl
    c (inj‚ÇÇ i) = nr1 (‚Üí‚ààren‚Çó n name2 r i)--}
... | no p | yes q rewrite q = updRel2-CS name1 n2 x d2 (‚ä•-elim (c x‚ÇÇ))
  where
    c : ¬¨ names‚ààren name1 n r
    c i = p (¬¨‚ààren·µ£-names‚ààren‚Üí name1 n r i nr2) {--(inj‚ÇÅ (i , x‚ÇÅ , x‚ÇÇ)) rewrite i = p refl
    c (inj‚ÇÇ i) = nr2 (‚Üí‚ààren·µ£ name1 n r i)--}
... | no p | no q = updRel2-CS name1 name2 x x‚ÇÅ (‚Üínames‚ààren‚à∑ (Œª x ‚Üí na (here x)) (Œª x ‚Üí nb (here x)) x‚ÇÇ)
updRel2-renn {name} {f} {g} {r} {.(NAME name1)} {.(NAME name2)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-NAME name1 name2 x x‚ÇÅ x‚ÇÇ) with name1 ‚âü n | name2 ‚âü n
... | yes p | yes q rewrite p | q = updRel2-NAME n1 n2 d1 d2 (inj‚ÇÅ (refl , refl)) {--(inj‚ÇÇ (here refl))--}
... | yes p | no q rewrite p = updRel2-NAME n1 name2 d1 x‚ÇÅ (‚ä•-elim (c x‚ÇÇ))
  where
    c : ¬¨ names‚ààren n name2 r
    c i = q (sym (¬¨‚ààren‚Çó-names‚ààren‚Üí n name2 r i nr1)) {--(inj‚ÇÅ (i , x‚ÇÅ , x‚ÇÇ)) rewrite i = q refl
    c (inj‚ÇÇ i) = nr1 (‚Üí‚ààren‚Çó n name2 r i)--}
... | no p | yes q rewrite q = updRel2-NAME name1 n2 x d2 (‚ä•-elim (c x‚ÇÇ))
  where
    c : ¬¨ names‚ààren name1 n r
    c i = p (¬¨‚ààren·µ£-names‚ààren‚Üí name1 n r i nr2) {--(inj‚ÇÅ (i , x‚ÇÅ , x‚ÇÇ)) rewrite i = p refl
    c (inj‚ÇÇ i) = nr2 (‚Üí‚ààren·µ£ name1 n r i)--}
... | no p | no q = updRel2-NAME name1 name2 x x‚ÇÅ (‚Üínames‚ààren‚à∑ (Œª x ‚Üí na (here x)) (Œª x ‚Üí nb (here x)) x‚ÇÇ)
updRel2-renn {name} {f} {g} {r} {.(FRESH a)} {.(FRESH b)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-FRESH a b u) =
  updRel2-FRESH
    _ _ (updRel2-renn {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {sren r} {a} {b}
    (suc n) (suc n1) (suc n2)
    (Œª x ‚Üí na (suc‚Üí‚ààlowerNames {n1} {names a} x))
    (Œª x ‚Üí nb (suc‚Üí‚ààlowerNames {n2} {names b} x))
    (Œª x ‚Üí d1 (suc-injective x))
    (Œª x ‚Üí d2 (suc-injective x))
    (Œª x ‚Üí nr1 (suc‚ààren‚Çó-sren‚Üí x))
    (Œª x ‚Üí nr2 (suc‚ààren·µ£-sren‚Üí x))
    (‚Üí¬¨s‚àànames-shiftNameUp n f nf)
    (‚Üí¬¨s‚àànames-shiftNameUp n g ng)
    (Œª x ‚Üí nnm (suc-injective x))
    u)
updRel2-renn {name} {f} {g} {r} {.(LOAD a)} {.(LOAD a)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-LOAD a) = updRel2-LOAD _ --updRel2-LOAD _ ? -- (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-CHOOSE _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel2-TSQUASH _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel2-TTRUNC _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-TCONST a‚ÇÅ a‚ÇÇ u) = updRel2-TCONST _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel2-SUBSING _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.PURE} {.PURE} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-PURE = updRel2-PURE
updRel2-renn {name} {f} {g} {r} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-DUM a‚ÇÅ a‚ÇÇ u) = updRel2-DUM _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel2-FFDEFS _ _ _ _ (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u) (updRel2-renn n n1 n2 (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÅ} {names b‚ÇÅ} {n1} na) (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names b‚ÇÇ} {n2} nb) d1 d2 nr1 nr2 nf ng nnm u‚ÇÅ)
updRel2-renn {name} {f} {g} {r} {.(UNIV x)} {.(UNIV x)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-UNIV x) = updRel2-UNIV _
updRel2-renn {name} {f} {g} {r} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-LIFT a‚ÇÅ a‚ÇÇ u) = updRel2-LIFT _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-LOWER a‚ÇÅ a‚ÇÇ u) = updRel2-LOWER _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm (updRel2-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel2-SHRINK _ _ (updRel2-renn n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm u)
updRel2-renn {name} {f} {g} {r} {.(upd name f)} {.(force g)} n n1 n2 na nb d1 d2 nr1 nr2 nf ng nnm updRel2-upd with name ‚âü n
... | yes p rewrite p | renn¬¨‚àà n n1 (shiftUp 0 f) (‚Üí¬¨‚àànames-shiftUp {n} {0} {f} nf) | renn¬¨‚àà n n2 g ng = ‚ä•-elim (nnm refl)
... | no p rewrite renn¬¨‚àà n n1 (shiftUp 0 f) (‚Üí¬¨‚àànames-shiftUp {n} {0} {f} nf) | renn¬¨‚àà n n2 g ng = updRel2-upd



{--
step-uptoùïé : (cc : ContConds) (name : Name) (a b : Term) (w1 w2 w1' : ùïé¬∑) (r : ren)
               ‚Üí ¬¨ name ‚àà names a
               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
               ‚Üí name ‚àà domùïé¬∑ w1
               ‚Üí step a w1 ‚â° just (b , w2)
               ‚Üí uptoùïé name w1 w1' r
               ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (b , w2')
                   √ó uptoùïé name w2 w2' r' -- we'll probably need to know that r' extends r
                   √ó ¬¨ name ‚àà names b
                   √ó ¬¨ name ‚àà namesùïé¬∑ w2
                   √ó name ‚àà domùïé¬∑ w2))
step-uptoùïé cc name NAT b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name QNAT b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name TNAT b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (LT a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (QLT a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (NUM x) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) b w1 w2 w1' r nna nnw idom comp upw with is-NUM a
... | inj‚ÇÅ (n , p) rewrite p with is-NUM a‚ÇÅ
... |    inj‚ÇÅ (m , q) rewrite q with n <? m
... |       yes xr rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÇ} {names a‚ÇÉ} {name} nna , nnw , idom
... |       no xr rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names a‚ÇÇ} {names a‚ÇÉ} {name} nna , nnw , idom
step-uptoùïé cc name (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) b w1 w2 w1' r nna nnw idom comp upw | inj‚ÇÅ (n , p) | inj‚ÇÇ q with step‚äé a‚ÇÅ w1
... |       inj‚ÇÅ (a‚ÇÅ' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                       | fst (snd (snd (step-uptoùïé cc name a‚ÇÅ a‚ÇÅ' w1 w1x w1' r (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    (Œª x ‚Üí nna (¬¨‚àà1‚Üí‚àà++3 {_} {_} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} {names a‚ÇÅ'} (fst (snd (snd (snd (snd ind))))) x)) ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a‚ÇÅ w1' ‚â° just (a‚ÇÅ' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a‚ÇÅ'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a‚ÇÅ a‚ÇÅ' w1 w1x w1' r (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} {name} nna) nnw idom z upw
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) b w1 w2 w1' r nna nnw idom comp upw | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                   | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    (Œª x ‚Üí nna (¬¨‚àà1‚Üí‚àà++4 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} {names a'} (fst (snd (snd (snd (snd ind))))) x)) ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a‚ÇÉ} {name} nna) nnw idom z upw
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (SUC a) b w1 w2 w1' r nna nnw idom comp upw with is-NUM a
... | inj‚ÇÅ (n , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àà[] {Name} {name} , nnw , idom
... | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                   | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r nna nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    fst (snd (snd (snd (snd ind)))) ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r nna nnw idom z upw
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (PI a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (LAMBDA a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (APPLY f a) b w1 w2 w1' r nna nnw idom comp upw with is-LAM f
... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àànames-sub {name} {a} {t} (Œª x ‚Üí nna (‚àà-++‚Å∫ ≥ (names t) x)) (Œª x ‚Üí nna (‚àà-++‚Å∫À° x)) , nnw , idom
... | inj‚ÇÇ x with is-CS f
... |    inj‚ÇÅ (name' , p) rewrite p with is-NUM a
... |       inj‚ÇÅ (n , q) rewrite q with getT‚äé n name' w1
... |          inj‚ÇÅ (y , xr) rewrite xr | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' ,
  {!!} ,
  {!!} , --getT‚â°‚Üímap-getT‚â° (Œª z ‚Üí nna (here (sym z))) upw r ,
  upw ,
  (Œª iy ‚Üí nnw (ContConds.ccGnames cc name name' n y w1 xr iy)) ,
  nnw , idom
... |          inj‚ÇÇ xr rewrite xr = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (APPLY f a) b w1 w2 w1' r nna nnw idom comp upw | inj‚ÇÇ x | inj‚ÇÅ (name' , p) | inj‚ÇÇ y with step‚äé a w1
... |          inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                         | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r (Œª z ‚Üí nna (there z)) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl ,
    fst (snd (snd (snd ind))) ,
    (Œª { (here z) ‚Üí nna (here z) ; (there z) ‚Üí fst (snd (snd (snd (snd ind)))) z }) ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r (Œª z ‚Üí nna (there z)) nnw idom z upw
... |          inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (APPLY f a) b w1 w2 w1' r nna nnw idom comp upw | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé f w1
... | inj‚ÇÅ (f' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                | fst (snd (snd (step-uptoùïé cc name f f' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names f} {names a} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    (‚Üí¬¨‚àà++2 {_} {_} {name} {names f} {names a} {names f'} {names a} (Œª x ‚Üí fst (snd (snd (snd (snd ind))))) (Œª x ‚Üí x) nna) ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step f w1' ‚â° just (f' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names f'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name f f' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names f} {names a} {name} nna) nnw idom z upw
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (FIX a) b w1 w2 w1' r nna nnw idom comp upw with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àànames-sub {name} {FIX (LAMBDA t)} {t} nna nna , nnw , idom
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                   | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r nna nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    fst (snd (snd (snd (snd ind)))) ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r nna nnw idom z upw
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (LET a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw with isValue‚äé a
... | inj‚ÇÅ x rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw ,
  ¬¨‚àànames-sub {name} {a} {a‚ÇÅ} (Œª x ‚Üí nna (‚àà-++‚Å∫À° x)) (Œª x ‚Üí nna (‚àà-++‚Å∫ ≥ (names a) x)) ,
  nnw , idom
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                   | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    ‚Üí¬¨‚àà++2 {_} {_} {name} {names a} {names a‚ÇÅ} {names a'} {names a‚ÇÅ} (Œª x ‚Üí fst (snd (snd (snd (snd ind))))) (Œª x ‚Üí x) nna ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {name} nna) nnw idom z upw
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (SUM a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (PAIR a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (SPREAD a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw with is-PAIR a
... | inj‚ÇÅ (u , v , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw ,
  ¬¨‚àànames-sub {name} {v} {sub u a‚ÇÅ} (Œª x ‚Üí nna (‚àà-++‚Å∫À° (‚àà-++‚Å∫ ≥ (names u) x))) (¬¨‚àànames-sub {name} {u} {a‚ÇÅ} (Œª x ‚Üí nna (‚àà-++‚Å∫À° (‚àà-++‚Å∫À° x))) (Œª x ‚Üí nna (‚àà-++‚Å∫ ≥ (names u ++ names v) x))) ,
  nnw , idom
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                   | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    ‚Üí¬¨‚àà++2 {_} {_} {name} {names a} {names a‚ÇÅ} {names a'} {names a‚ÇÅ} (Œª x ‚Üí fst (snd (snd (snd (snd ind))))) (Œª x ‚Üí x) nna ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {name} nna) nnw idom z upw
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (SET a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (TUNION a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (ISECT a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (UNION a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (QTUNION a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (INL a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (INR a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (DECIDE a a‚ÇÅ a‚ÇÇ) b w1 w2 w1' r nna nnw idom comp upw with is-INL a
... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àànames-sub {name} {t} {a‚ÇÅ} (Œª x ‚Üí nna (‚àà-++‚Å∫À° x)) (Œª x ‚Üí nna (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° x))) , nnw , idom
... | inj‚ÇÇ x with is-INR a
... |    inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  w1' , r , refl , upw , ¬¨‚àànames-sub {name} {t} {a‚ÇÇ} (Œª x ‚Üí nna (‚àà-++‚Å∫À° x)) (Œª x ‚Üí nna (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names a‚ÇÅ) x))) , nnw , idom
... |    inj‚ÇÇ y with step‚äé a w1
... |       inj‚ÇÅ (a' , w1x , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp))
                                      | fst (snd (snd (step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    ‚Üí¬¨‚àà++3 {_} {_} {name} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {names a'} {names a‚ÇÅ} {names a‚ÇÇ} (Œª x ‚Üí fst (snd (snd (snd (snd ind))))) (Œª x ‚Üí x) (Œª x ‚Üí x) nna ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names a'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name a a' w1 w1x w1' r (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names a} {names a‚ÇÅ} {names a‚ÇÇ} {name} nna) nnw idom z upw
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (EQ a a‚ÇÅ a‚ÇÇ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (EQB a a‚ÇÅ a‚ÇÇ a‚ÇÉ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name AX b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name FREE b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (CS x) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (NAME x) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (FRESH a) b w1 w2 w1' r nna nnw idom comp upw rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  concl
  where
    concl : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí just (fresh-inst w1' a , startNewChoiceT Res‚ä§ w1' a) ‚â° just (fresh-inst w1 a , w2')
                   √ó uptoùïé name (startNewChoiceT Res‚ä§ w1 a) w2' r'
                   √ó ¬¨ name ‚àà names (fresh-inst w1 a)
                   √ó ¬¨ name ‚àà namesùïé¬∑ (startNewChoiceT Res‚ä§ w1 a)
                   √ó name ‚àà domùïé¬∑ (startNewChoiceT Res‚ä§ w1 a)))
    concl = startNewChoiceT Res‚ä§ w1' a ,
            {!!} ,
            {!!} , --‚â°just (‚â°pair (uptoùïé‚Üí‚â°fresh-inst a (uptoùïé-sym _ _ _ upw)) refl) ,
            {!!} , --‚Üíuptoùïé-startNewChoiceT cc a upw ,
            (Œª x ‚Üí nna (suc‚Üí‚ààlowerNames (‚àànames-shiftNameDown-renn‚Üí name (newChoiceT+ w1 a) a (_‚â§_.s‚â§s _‚â§_.z‚â§n) (‚ààdomùïé‚Üí¬¨‚â°newChoiceT+ name w1 a idom) x))) ,
            (Œª x ‚Üí nnw (‚àànamesùïé-startNewChoiceT‚Üí cc name w1 a x)) ,
            ContConds.ccDstart cc name w1 a idom
step-uptoùïé cc name (CHOOSE n t) b w1 w2 w1' r nna nnw idom comp upw with is-NAME n
... | inj‚ÇÅ (name' , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  chooseT name' w1' t ,
  {!!} , --
  refl ,
  {!!} , --uptoùïé-chooseT cc name name' w1 w1' t upw ,
  (Œª ()) ,
  (Œª x ‚Üí nnw (namesùïé-chooseT‚Üí cc name name' w1 t x)) ,
  domùïé-chooseT cc name name' w1 t idom
... | inj‚ÇÇ x with step‚äé n w1
... |    inj‚ÇÅ (n' , w1x , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
                                   | fst (snd (snd (step-uptoùïé cc name n n' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names n} {names t} {name} nna) nnw idom z upw)))
  = fst ind , fst (snd ind) , refl , fst (snd (snd (snd ind))) ,
    ‚Üí¬¨‚àà++2 {_} {_} {name} {names n} {names t} {names n'} {names t} (Œª x ‚Üí fst (snd (snd (snd (snd ind))))) (Œª x ‚Üí x) nna ,
    snd (snd (snd (snd (snd ind))))
  where
    ind : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí step n w1' ‚â° just (n' , w2')
                   √ó uptoùïé name w1x w2' r'
                   √ó ¬¨ name ‚àà names n'
                   √ó ¬¨ name ‚àà namesùïé¬∑ w1x
                   √ó name ‚àà domùïé¬∑ w1x))
    ind = step-uptoùïé cc name n n' w1 w1x w1' r (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names n} {names t} {name} nna) nnw idom z upw
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-uptoùïé cc name (TSQUASH a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (TTRUNC a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (TCONST a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (SUBSING a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (DUM a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (FFDEFS a a‚ÇÅ) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name PURE b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (UNIV x) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (LIFT a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (LOWER a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom
step-uptoùïé cc name (SHRINK a) b w1 w2 w1' r nna nnw idom comp upw rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = w1' , r , refl , upw , nna , nnw , idom



steps-uptoùïé : (cc : ContConds) (name : Name) (k : ‚Ñï) (a b : Term) (w1 w2 w1' : ùïé¬∑) (r : ren)
               ‚Üí ¬¨ name ‚àà names a
               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
               ‚Üí name ‚àà domùïé¬∑ w1
               ‚Üí steps k (a , w1) ‚â° (b , w2)
               ‚Üí uptoùïé name w1 w1' r
               ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí steps k' (a , w1') ‚â° (b , w2')
                   √ó uptoùïé name w2 w2' r'
                   √ó ¬¨ name ‚àà names b
                   √ó ¬¨ name ‚àà namesùïé¬∑ w2
                   √ó name ‚àà domùïé¬∑ w2)))
steps-uptoùïé cc name 0 a b w1 w2 w1' r nna nnw idom comp upw
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = 0 , w1' , r , refl , upw , nna , nnw , idom
steps-uptoùïé cc name (suc k) a b w1 w2 w1' r nna nnw idom comp upw with step‚äé a w1
... | inj‚ÇÅ (a' , w1x , z) rewrite z =
  suc (fst h2) , fst (snd h2) , fst (snd (snd h2)) ,
  step-steps-trans {w1'} {fst h1} {fst (snd h2)} {a} {a'} {b} (fst (snd (snd h1))) (fst (snd (snd (snd h2)))) ,
  snd (snd (snd (snd h2)))
  where
    h1 : Œ£ ùïé¬∑ (Œª w1x' ‚Üí Œ£ ren (Œª r' ‚Üí step a w1' ‚â° just (a' , w1x')
           √ó uptoùïé name w1x w1x' r'
           √ó ¬¨ name ‚àà names a'
           √ó ¬¨ name ‚àà namesùïé¬∑ w1x
           √ó name ‚àà domùïé¬∑ w1x))
    h1 = step-uptoùïé cc name a a' w1 w1x w1' r nna nnw idom z upw

    h2 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ ren (Œª r' ‚Üí steps k' (a' , fst h1) ‚â° (b , w2')
           √ó uptoùïé name w2 w2' r'
           √ó ¬¨ name ‚àà names b
           √ó ¬¨ name ‚àà namesùïé¬∑ w2
           √ó name ‚àà domùïé¬∑ w2)))
    h2 = steps-uptoùïé
           cc name k a' b w1x w2 (fst h1) {!!} (fst (snd (snd (snd (snd h1)))))
           (fst (snd (snd (snd (snd (snd h1))))))
           (snd (snd (snd (snd (snd (snd h1))))))
           comp
           (fst (snd (snd (snd h1))))
... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = 0 , w1' , r , refl , upw , nna , nnw , idom
--}

\end{code}
