\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module mp_props {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
                (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
                (N : NewChoice {L} W C K G)
--                (V : ChoiceVal W C K G X N)
--                (F : Freeze {L} W C K P G N)
                (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
--                (CB : ChoiceBar W M C K P G X N V F E)
                (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
--open import getChoiceDef(W)(C)(K)(G)
--open import newChoiceDef(W)(C)(K)(G)(N)
--open import choiceExtDef(W)(C)(K)(G)(X)
--open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
--open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (eqTypes-mon)
--open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-ASSERT‚ÇÉ-APPLY ; equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ ;
         isType-#NAT!‚ÜíBOOL ; isType-#NAT!‚ÜíBOOL! ; isType-#NAT‚ÜíBOOL ; equalInType-NEG‚Üí¬¨inh ; sub0-NEG-ASSERT‚ÇÇ-APPLY ;
         ‚ÜíequalInType-SQUASH ; isTypeBOOL ; isTypeBOOL! ; isTypeBOOL‚ÇÄ ; isType-#NAT!‚ÜíBOOL‚ÇÄ ; isTypeBOOL‚ÇÄ!‚Üí ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ;
         isType-#NAT‚ÜíBOOL‚ÇÄ ; eqTypesQNAT!)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

--open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
--open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
--open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
--open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB) using (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body)



-- œÄ (F : ‚Ñï ‚Üí ùîπ). ¬¨(Œ† (n : ‚Ñï). ¬¨(F n ‚â° true)) ‚Üí ||Œ£ (n : ‚Ñï). F n ‚â° true||
MP : Term
MP = PI NAT!‚ÜíBOOL‚ÇÄ (FUN (NEG (PI NAT! (NEG (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))
                        (SQUASH (SUM NAT! (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))


#MP : CTerm
#MP = ct MP c
  where
    c : # MP
    c = refl


-- Similar to #[0]MP-right (without the squash): Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2 : CTerm0
#[0]MP-right2 = #[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right : CTerm0
#[0]MP-right = #[0]SQUASH #[0]MP-right2


-- Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2-qt : CTerm0
#[0]MP-right2-qt = #[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÉ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right-qt : CTerm0
#[0]MP-right-qt = #[0]SQUASH #[0]MP-right2-qt


-- Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2-qt‚ÇÇ : CTerm0
#[0]MP-right2-qt‚ÇÇ = #[0]SUM #[0]QNAT! (#[1]ASSERT‚ÇÉ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right-qt‚ÇÇ : CTerm0
#[0]MP-right-qt‚ÇÇ = #[0]SQUASH #[0]MP-right2-qt‚ÇÇ


-- Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2-qt‚ÇÉ : CTerm0
#[0]MP-right2-qt‚ÇÉ = #[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÑ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right-qt‚ÇÉ : CTerm0
#[0]MP-right-qt‚ÇÉ = #[0]SQUASH #[0]MP-right2-qt‚ÇÉ


-- ¬¨Œ†(n : ‚Ñï).¬¨(f(n)=true)
#[0]MP-left : CTerm0
#[0]MP-left = #[0]NEG (#[0]PI #[0]NAT! (#[1]NEG (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))))


-- Similar to #[0]MP-left: ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#[0]MP-left2 : CTerm0
#[0]MP-left2 = #[0]NEG (#[0]NEG #[0]MP-right2)


-- Similar to #[0]MP-left2 (with a squash): ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left3 : CTerm0
#[0]MP-left3 = #[0]NEG (#[0]NEG #[0]MP-right)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left-qt : CTerm0
#[0]MP-left-qt = #[0]NEG (#[0]NEG #[0]MP-right-qt)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left-qt‚ÇÇ : CTerm0
#[0]MP-left-qt‚ÇÇ = #[0]NEG (#[0]NEG #[0]MP-right-qt‚ÇÇ)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left-qt‚ÇÉ : CTerm0
#[0]MP-left-qt‚ÇÉ = #[0]NEG (#[0]NEG #[0]MP-right-qt‚ÇÉ)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2 : CTerm ‚Üí CTerm
#MP-right2 f = #SUM-ASSERT‚ÇÇ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right : CTerm ‚Üí CTerm
#MP-right f = #SQUASH (#MP-right2 f)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2-qt : CTerm ‚Üí CTerm
#MP-right2-qt f = #SUM-ASSERT‚ÇÉ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right-qt : CTerm ‚Üí CTerm
#MP-right-qt f = #SQUASH (#MP-right2-qt f)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2-qt‚ÇÇ : CTerm ‚Üí CTerm
#MP-right2-qt‚ÇÇ f = #SUM-ASSERT‚ÇÑ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right-qt‚ÇÇ : CTerm ‚Üí CTerm
#MP-right-qt‚ÇÇ f = #SQUASH (#MP-right2-qt‚ÇÇ f)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-right2-qt‚ÇÉ f = #SUM-ASSERT‚ÇÖ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-right-qt‚ÇÉ f = #SQUASH (#MP-right2-qt‚ÇÉ f)


-- ¬¨Œ†(n : ‚Ñï).¬¨(f(n)=true)
#MP-left : CTerm ‚Üí CTerm
#MP-left f = #NEG (#PI-NEG-ASSERT‚ÇÇ f)


-- ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#MP-left2 : CTerm ‚Üí CTerm
#MP-left2 f = #NEG (#NEG (#MP-right2 f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left3 : CTerm ‚Üí CTerm
#MP-left3 f = #NEG (#NEG (#MP-right f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left-qt : CTerm ‚Üí CTerm
#MP-left-qt f = #NEG (#NEG (#MP-right-qt f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left-qt‚ÇÇ : CTerm ‚Üí CTerm
#MP-left-qt‚ÇÇ f = #NEG (#NEG (#MP-right-qt‚ÇÇ f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-left-qt‚ÇÉ f = #NEG (#NEG (#MP-right-qt‚ÇÉ f))


#MP-PI : CTerm
#MP-PI = #PI #NAT!‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left #[0]MP-right)


#MP‚â°#PI : #MP ‚â° #MP-PI
#MP‚â°#PI = CTerm‚â° refl


-- Another version of MP using ¬¨¬¨Œ£ instead of ¬¨‚àÄ
#MP‚ÇÇ : CTerm
#MP‚ÇÇ = #PI #NAT!‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left3 #[0]MP-right)


-- Another version of MP similar to #MP‚ÇÇ but without the truncation
#MP‚ÇÉ : CTerm
#MP‚ÇÉ = #PI #NAT!‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left2 #[0]MP-right2)


-- Another version of MP that uses #NAT!‚ÜíBOOL! instead
#MP‚ÇÑ : CTerm
#MP‚ÇÑ = #PI #NAT!‚ÜíBOOL! (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)


-- Another version of MP that uses #QNAT!‚ÜíBOOL! instead
#MP‚ÇÖ : CTerm
#MP‚ÇÖ = #PI #QNAT!‚ÜíBOOL! (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)


-- Another version of MP that uses #NAT!‚ÜíBOOL! instead
#MP‚ÇÜ : CTerm
#MP‚ÇÜ = #PI #NAT!‚ÜíBOOL‚ÇÄ! (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)


#MP‚Çá : CTerm
#MP‚Çá = #PI (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)


-- Similar to #[0]MP-right (without the squash): Œ£(n:‚Ñï).f(n)=true
#[0]MP-rightŒ£‚Çô : CTerm0
#[0]MP-rightŒ£‚Çô = #[0]SUM #[0]NAT (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right‚Çô : CTerm0
#[0]MP-right‚Çô = #[0]SQUASH #[0]MP-rightŒ£‚Çô


-- Similar to #[0]MP-left2 (with a squash): ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left‚Çô : CTerm0
#[0]MP-left‚Çô = #[0]NEG (#[0]NEG #[0]MP-right‚Çô)


#SUM-ASSERT‚Çô : CTerm ‚Üí CTerm
#SUM-ASSERT‚Çô f = #SUM #NAT (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR))


-- Œ£(n:‚Ñï).f(n)=true
#MP-rightŒ£‚Çô : CTerm ‚Üí CTerm
#MP-rightŒ£‚Çô f = #SUM-ASSERT‚Çô f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right‚Çô : CTerm ‚Üí CTerm
#MP-right‚Çô f = #SQUASH (#MP-rightŒ£‚Çô f)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left‚Çô : CTerm ‚Üí CTerm
#MP-left‚Çô f = #NEG (#NEG (#MP-right‚Çô f))


-- Another version of MP similar to #MP‚ÇÇ but quantified over #NAT‚ÜíBOOL instead of #NAT!‚ÜíBOOL
#MP‚Çô : CTerm
#MP‚Çô = #PI #NAT‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)


sub0-fun-mp : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)
                             ‚â° #FUN (#MP-left a) (#MP-right a)
sub0-fun-mp a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left #[0]MP-right (#MP-left a) (#MP-right a)
    (CTerm‚â° (‚â°NEG (‚â°PI refl (‚â°NEG (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


sub0-fun-mp‚ÇÇ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)
                             ‚â° #FUN (#MP-left3 a) (#MP-right a)
sub0-fun-mp‚ÇÇ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left3 #[0]MP-right (#MP-left3 a) (#MP-right a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e1 refl) refl refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl

    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚Çô : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)
                             ‚â° #FUN (#MP-left‚Çô a) (#MP-right‚Çô a)
sub0-fun-mp‚Çô a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left‚Çô #[0]MP-right‚Çô (#MP-left‚Çô a) (#MP-right‚Çô a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e1 refl) refl refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM #NAT (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl

    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚ÇÉ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left2 #[0]MP-right2)
                             ‚â° #FUN (#MP-left2 a) (#MP-right2 a)
sub0-fun-mp‚ÇÉ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left2 #[0]MP-right2 (#MP-left2 a) (#MP-right2 a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SUM refl (‚â°EQ (‚â°APPLY e refl) refl refl)))))
    (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


sub0-fun-mp‚ÇÑ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)
                              ‚â° #FUN (#MP-left-qt a) (#MP-right-qt a)
sub0-fun-mp‚ÇÑ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left-qt #[0]MP-right-qt (#MP-left-qt a) (#MP-right-qt a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e refl) refl refl))))))
    (CTerm‚â° (‚â°SET refl (‚â°SUM refl (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚ÇÖ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)
                              ‚â° #FUN (#MP-left-qt‚ÇÇ a) (#MP-right-qt‚ÇÇ a)
sub0-fun-mp‚ÇÖ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ (#MP-left-qt‚ÇÇ a) (#MP-right-qt‚ÇÇ a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e refl) refl refl))))))
    (CTerm‚â° (‚â°SET refl (‚â°SUM refl (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚ÇÜ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)
                              ‚â° #FUN (#MP-left-qt‚ÇÉ a) (#MP-right-qt‚ÇÉ a)
sub0-fun-mp‚ÇÜ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ (#MP-left-qt‚ÇÉ a) (#MP-right-qt‚ÇÉ a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e refl) refl refl))))))
    (CTerm‚â° (‚â°SET refl (‚â°SUM refl (‚â°ASSERT‚ÇÑ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


‚àÄùïé‚àÉùïé-func : {w : ùïé¬∑} {f g : wPred w}
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí f w1 e1 ‚Üí g w1 e1)
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w1 (‚ÜëwPred f e1))
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w1 (‚ÜëwPred g e1))
‚àÄùïé‚àÉùïé-func {w} {f} {g} h q w1 e1 =
  fst q' , fst (snd q') , h (fst q') (‚äë-trans¬∑ e1 (fst (snd q'))) (snd (snd q'))
  where
    q' : ‚àÉùïé w1 (‚ÜëwPred f e1)
    q' = q w1 e1


‚ÜíequalTypes-#MP-left : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left a‚ÇÅ) (#MP-left a‚ÇÇ)
‚ÜíequalTypes-#MP-left {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ eqt)


‚ÜíequalTypes-#MP-left2 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left2 a‚ÇÅ) (#MP-left2 a‚ÇÇ)
‚ÜíequalTypes-#MP-left2 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt))


‚ÜíequalTypes-#MP-left3 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left3 a‚ÇÅ) (#MP-left3 a‚ÇÇ)
‚ÜíequalTypes-#MP-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt)))


‚ÜíequalTypes-#MP-left-qt : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left-qt a‚ÇÅ) (#MP-left-qt a‚ÇÇ)
‚ÜíequalTypes-#MP-left-qt {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ eqt)))


‚ÜíequalTypes-#MP-left-qt‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #QNAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left-qt‚ÇÇ a‚ÇÅ) (#MP-left-qt‚ÇÇ a‚ÇÇ)
‚ÜíequalTypes-#MP-left-qt‚ÇÇ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ eqt)))


‚ÜíequalTypes-#MP-left-qt‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-left-qt‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#MP-left-qt‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ eqt)))


‚àà#NAT!‚Üí‚àà#NAT : {n : ‚Ñï} {w : ùïé¬∑} {n‚ÇÅ n‚ÇÇ : CTerm}
                  ‚Üí equalInType n w #NAT! n‚ÇÅ n‚ÇÇ
                  ‚Üí equalInType n w #NAT n‚ÇÅ n‚ÇÇ
‚àà#NAT!‚Üí‚àà#NAT {n} {w} {n‚ÇÅ} {n‚ÇÇ} n‚àà =
  ‚ÜíequalInType-NAT n w n‚ÇÅ n‚ÇÇ (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT!‚Üí n w n‚ÇÅ n‚ÇÇ n‚àà))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí NATeq w' n‚ÇÅ n‚ÇÇ)
    aw w1 e1 (k , c‚ÇÅ , c‚ÇÇ) = k , #‚áõ!‚Üí#‚áõ {w1} {n‚ÇÅ} {#NUM k} c‚ÇÅ , #‚áõ!‚Üí#‚áõ {w1} {n‚ÇÇ} {#NUM k} c‚ÇÇ


‚àà#NAT‚ÜíBOOL‚Üí‚àà#NAT!‚ÜíBOOL : {n : ‚Ñï} {w : ùïé¬∑} {f‚ÇÅ f‚ÇÇ : CTerm}
                             ‚Üí equalInType n w #NAT‚ÜíBOOL f‚ÇÅ f‚ÇÇ
                             ‚Üí equalInType n w #NAT!‚ÜíBOOL f‚ÇÅ f‚ÇÇ
‚àà#NAT‚ÜíBOOL‚Üí‚àà#NAT!‚ÜíBOOL {n} {w} {f‚ÇÅ} {f‚ÇÇ} f‚àà =
  ‚â°CTerm‚ÜíequalInType
    (sym #NAT!‚ÜíBOOL‚â°)
    (equalInType-FUN
      isTypeNAT!
      (isTypeBOOL w n)
      aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                       ‚Üí equalInType n w' #BOOL (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ))
    aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚â° f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ (‚àà#NAT!‚Üí‚àà#NAT n‚àà)


‚àà#NAT‚ÜíBOOL‚ÇÄ‚Üí‚àà#NAT!‚ÜíBOOL‚ÇÄ : {n : ‚Ñï} {w : ùïé¬∑} {f‚ÇÅ f‚ÇÇ : CTerm}
                         ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                         ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
‚àà#NAT‚ÜíBOOL‚ÇÄ‚Üí‚àà#NAT!‚ÜíBOOL‚ÇÄ {n} {w} {f‚ÇÅ} {f‚ÇÇ} f‚àà =
  ‚â°CTerm‚ÜíequalInType
    (sym #NAT!‚ÜíBOOL‚ÇÄ‚â°)
    (equalInType-FUN
      isTypeNAT!
      isTypeBOOL‚ÇÄ
      aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                       ‚Üí equalInType n w' #BOOL‚ÇÄ (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ))
    aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ (‚àà#NAT!‚Üí‚àà#NAT n‚àà)


‚ÜíequalTypes-#MP‚Çô-left3 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                         ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                         ‚Üí equalTypes n w (#MP-left3 a‚ÇÅ) (#MP-left3 a‚ÇÇ)
‚ÜíequalTypes-#MP‚Çô-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  ‚ÜíequalTypes-#MP-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} (‚àà#NAT‚ÜíBOOL‚ÇÄ‚Üí‚àà#NAT!‚ÜíBOOL‚ÇÄ eqt)


isType-MP-right-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                      ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                        (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


isType-MP-right-qt-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL! f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                      ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                        (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-qt-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


isType-MP-right-qt‚ÇÇ-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #QNAT!‚ÜíBOOL! f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #QNAT! a b)
                                        ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                           (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-qt‚ÇÇ-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #QNAT!‚ÜíBOOL!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


isType-MP-right-qt‚ÇÉ-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                      ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                        (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-qt‚ÇÉ-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÑ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÑ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÑ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


‚ÜíequalTypes-#MP-right : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                      ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w (#MP-right a‚ÇÅ) (#MP-right a‚ÇÇ)
‚ÜíequalTypes-#MP-right {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt)


‚ÜíequalTypes-#MP-right-qt : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right-qt a‚ÇÅ) (#MP-right-qt a‚ÇÇ)
‚ÜíequalTypes-#MP-right-qt {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ eqt)


‚ÜíequalTypes-#MP-right-qt‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #QNAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right-qt‚ÇÇ a‚ÇÅ) (#MP-right-qt‚ÇÇ a‚ÇÇ)
‚ÜíequalTypes-#MP-right-qt‚ÇÇ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ eqt)


‚ÜíequalTypes-#MP-right-qt‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#MP-right-qt‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ eqt)


‚ÜíequalTypes-#MP-right2 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w (#MP-right2 a‚ÇÅ) (#MP-right2 a‚ÇÇ)
‚ÜíequalTypes-#MP-right2 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt


isType-MP-right‚Çô-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                      ‚Üí equalInType i w #NAT‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT a b)
                                     ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                       (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right‚Çô-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


‚ÜíequalTypes-#MP‚Çô-right : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w (#MP-right‚Çô a‚ÇÅ) (#MP-right‚Çô a‚ÇÇ)
‚ÜíequalTypes-#MP‚Çô-right {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (eqTypesSUM‚Üê (Œª w' _ ‚Üí eqTypesNAT) (isType-MP-right‚Çô-body n w a‚ÇÅ a‚ÇÇ eqt))


‚ÜíequalTypes-#MP‚Çô-left : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                      ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w (#MP-left‚Çô a‚ÇÅ) (#MP-left‚Çô a‚ÇÇ)
‚ÜíequalTypes-#MP‚Çô-left {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP‚Çô-right eqt))


isTypeMP-PI : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP-PI
isTypeMP-PI w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left #[0]MP-right}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left #[0]MP-right}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp a‚ÇÅ | sub0-fun-mp a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left eqb) (‚ÜíequalTypes-#MP-right eqb)



isTypeMP‚ÇÇ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÇ
isTypeMP‚ÇÇ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left3 #[0]MP-right}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left3 #[0]MP-right}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÇ a‚ÇÅ | sub0-fun-mp‚ÇÇ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 eqb) (‚ÜíequalTypes-#MP-right eqb)



isTypeMP‚ÇÉ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÉ
isTypeMP‚ÇÉ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left2 #[0]MP-right2}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left2 #[0]MP-right2}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left2 #[0]MP-right2))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left2 #[0]MP-right2)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÉ a‚ÇÅ | sub0-fun-mp‚ÇÉ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left2 eqb) (‚ÜíequalTypes-#MP-right2 eqb)


isTypeMP‚ÇÑ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÑ
isTypeMP‚ÇÑ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt}
    {#NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÑ a‚ÇÅ | sub0-fun-mp‚ÇÑ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt eqb) (‚ÜíequalTypes-#MP-right-qt eqb)


isType-#QNAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #QNAT!‚ÜíBOOL!
isType-#QNAT!‚ÜíBOOL! w n =
  ‚â°CTerm‚ÜíeqTypes
    (sym #QNAT!‚ÜíBOOL!‚â°) (sym #QNAT!‚ÜíBOOL!‚â°)
    (eqTypesFUN‚Üê eqTypesQNAT! (isTypeBOOL! w n))


{-
isType-#NAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT!‚ÜíBOOL!
isType-#NAT!‚ÜíBOOL! w n =
  ‚â°CTerm‚ÜíeqTypes
    (sym #NAT!‚ÜíBOOL!‚â°) (sym #NAT!‚ÜíBOOL!‚â°)
    (eqTypesFUN‚Üê (isTypeNAT! {w} {n}) (isTypeBOOL! w n))
-}


isTypeMP‚ÇÖ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÖ
isTypeMP‚ÇÖ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#QNAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ}
    {#QNAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ}
    (Œª w' e ‚Üí isType-#QNAT!‚ÜíBOOL! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #QNAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÖ a‚ÇÅ | sub0-fun-mp‚ÇÖ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÇ eqb) (‚ÜíequalTypes-#MP-right-qt‚ÇÇ eqb)


isTypeMP‚ÇÜ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÜ
isTypeMP‚ÇÜ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ eqb) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ eqb)


-- MOVE
#TNOENC‚â° : (T : CTerm) ‚Üí #TNOENC T ‚â° #ISECT T #NOENC
#TNOENC‚â° T = CTerm‚â° refl


-- MOVE to props2
eqTypesTNOENC‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
               ‚Üí equalTypes i w A B
               ‚Üí equalTypes i w (#TNOENC A) (#TNOENC B)
eqTypesTNOENC‚Üê {w} {i} {A} {B} eqtA rewrite #TNOENC‚â° A | #TNOENC‚â° B
  = eqTypesISECT‚Üê eqtA eqTypesNOENC‚Üê


-- MOVE to props2
equalInTypeTNOENC‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {A a b : CTerm}
                   ‚Üí equalInType i w (#TNOENC A) a b
                   ‚Üí equalInType i w A a b
equalInTypeTNOENC‚Üí {w} {i} {A} {B} eqtA rewrite #TNOENC‚â° A
  = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 (p , q) ‚Üí p) (equalInType-ISECT‚Üí eqtA))


-- MOVE to props2
equalInTypeTNOENC‚Üí‚Çó : {w : ùïé¬∑} {i : ‚Ñï} {A a b : CTerm}
                    ‚Üí equalInType i w (#TNOENC A) a b
                    ‚Üí #¬¨Enc a
equalInTypeTNOENC‚Üí‚Çó {w} {i} {A} {a} {b} eqtA rewrite #TNOENC‚â° A
  = lower (Mod.‚ñ°-const M
            (Mod.‚àÄùïé-‚ñ°Func M
              (Œª w1 e1 (p , q) ‚Üí Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 (lift (u , v)) ‚Üí lift u) (equalInType-NOENC‚Üí q)))
              (equalInType-ISECT‚Üí {_} {_} {A} {#NOENC} eqtA)))


-- MOVE to props2
equalInTypeTNOENC‚Üí·µ£ : {w : ùïé¬∑} {i : ‚Ñï} {A a b : CTerm}
                    ‚Üí equalInType i w (#TNOENC A) a b
                    ‚Üí #¬¨Enc b
equalInTypeTNOENC‚Üí·µ£ {w} {i} {A} {a} {b} eqtA rewrite #TNOENC‚â° A
  = lower (Mod.‚ñ°-const M
            (Mod.‚àÄùïé-‚ñ°Func M
              (Œª w1 e1 (p , q) ‚Üí Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 (lift (u , v)) ‚Üí lift v) (equalInType-NOENC‚Üí q)))
              (equalInType-ISECT‚Üí {_} {_} {A} {#NOENC} eqtA)))


isTypeMP‚Çá : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚Çá
isTypeMP‚Çá w n =
  eqTypesPI‚Üê
    {w} {n}
    {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí eqTypesTNOENC‚Üê (isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n))
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb))


isTypeMP‚Çô : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚Çô
isTypeMP‚Çô w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô}
    {#NAT‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô}
    (Œª w' e ‚Üí isType-#NAT‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚Çô a‚ÇÅ | sub0-fun-mp‚Çô a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP‚Çô-left eqb) (‚ÜíequalTypes-#MP‚Çô-right eqb)


isTypeMP : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP
isTypeMP w n rewrite #MP‚â°#PI = isTypeMP-PI w n


isTypeNegMP : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#NEG #MP)
isTypeNegMP w n = eqTypesNEG‚Üê (isTypeMP w n)


-- This is a simple unfolding of what it means to be a member of (#MP-left f)
equalInType-#MP-left‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                         ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                        ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                                        ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh
    a‚àà w1 e1
    (#AX , equalInType-PI
             (Œª w' _ ‚Üí isTypeNAT!)
             (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body (equalInType-refl (equalInType-mon f‚àà w1 e1)))
             Œª w2 e2 n‚ÇÅ n‚ÇÇ n‚àà ‚Üí
                 ‚â°CTerm‚ÜíequalInType
                   (sym (sub0-NEG-ASSERT‚ÇÇ-APPLY n‚ÇÅ f))
                   (equalInType-NEG
                     (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° f‚àà) w2 (‚äë-trans¬∑ e1 e2) n‚ÇÅ n‚ÇÅ (equalInType-refl n‚àà)))
                     Œª w3 e3 b‚ÇÅ b‚ÇÇ q ‚Üí h w3 (‚äë-trans¬∑ e2 e3) n‚ÇÅ n‚ÇÇ (equalInType-mon n‚àà w3 e3) (b‚ÇÅ , equalInType-refl q)))
--  {--(equalInType-refl f‚àà)--}


-- We prove that the result in equalInType-#MP-left‚Üí is an equivalence
‚ÜíequalInType-#MP-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                        ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                                        ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
                        ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ f‚àà)
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#PI-NEG-ASSERT‚ÇÇ f) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)) ‚Üí ‚ä•)
        aw2 w2 e2 n‚ÇÅ n‚ÇÇ n‚àà (t , inh) = h1 w2 (‚äë-refl¬∑ w2) t t inh
          where
            h1 : ‚àÄùïé w2 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)) a‚ÇÅ a‚ÇÇ)
            h1 = equalInType-NEG‚Üí (‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (snd (snd (equalInType-PI‚Üí g‚àà)) w2 e2 n‚ÇÅ n‚ÇÇ n‚àà))



-- This is a simple unfolding of what it means to be a member of (#MP-left2 f)
equalInType-#MP-left2‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SUM-ASSERT‚ÇÇ f) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw h3))
      where
        aw : ‚àÄùïé w2 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
        aw w3 e3 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
          lift (h w3 (‚äë-trans¬∑ e2 e3) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ)
        h3 = equalInType-SUM‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SUM-ASSERT‚ÇÇ f)) t
    h1 = equalInType-NEG
           (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ (equalInType-mon f‚àà w1 e1))
           h2


‚ÜíequalInType-#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ f‚àà))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SUM-ASSERT‚ÇÇ f)) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t) p‚àà
          where
            aw3 : ‚àÄùïé w2 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t))
            aw3 w3 e3 =
              n‚ÇÅ , n‚ÇÇ , t , t ,
              equalInType-mon n‚àà w3 e3 ,
              ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w3 , --#compAllRefl (#PAIR n‚ÇÅ t) w3 ,
              ‚áì-refl ‚åú #PAIR n‚ÇÇ t ‚åù w3 , --#compAllRefl (#PAIR n‚ÇÇ t) w3 ,
              ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w3 e3)

            p‚àà : equalInType i w2 (#SUM-ASSERT‚ÇÇ f) (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t)
            p‚àà = equalInType-SUM
                    (Œª w' _ ‚Üí isTypeNAT!)
                    (isType-MP-right-body i w2 f f (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)))
                    (Mod.‚àÄùïé-‚ñ° M aw3)


-- This is a simple unfolding of what it means to be a member of (#MP-left3 f)
equalInType-#MP-left3‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left3‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÇ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÇ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ (equalInType-mon f‚àà w1 e1)))
           h2


‚ÜíequalInType-#MP-left3 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÇ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÇ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)



‚ÜíequalTypes-#SUM-ASSERT‚Çô : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                           ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                           ‚Üí equalTypes n w (#SUM-ASSERT‚Çô a‚ÇÅ) (#SUM-ASSERT‚Çô a‚ÇÇ)
‚ÜíequalTypes-#SUM-ASSERT‚Çô {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt = eqTypesSUM‚Üê (Œª w' _ ‚Üí eqTypesNAT) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT a b ‚Üí equalInType n w' #BOOL‚ÇÄ (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚ÇÄ‚â° eqt)

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
    aw1 w' e a b ea rewrite sub0-ASSERT‚ÇÇ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÇ-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #BOOL‚ÇÄ (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÇ (#APPLY a‚ÇÇ b))
        aw2 = equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eqb


‚ÜíequalInType-#MP-left‚Çô : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT‚ÜíBOOL‚ÇÄ f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left‚Çô f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left‚Çô i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚Çô f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚Çô f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚Çô f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí eqTypesNAT)
                (isType-MP-right‚Çô-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚Çô f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


equalInType-#MP-right‚Çô‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-right‚Çô f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right‚Çô‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-rightŒ£‚Çô f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                              ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT n‚ÇÅ n‚ÇÇ
                                                     √ó inhType i w'' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÇ-APPLY a1 f) (equalInType-refl b‚àà)


‚ÜíequalInType-#MP-left-qt : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left-qt f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left-qt i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÉ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÉ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-qt-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÉ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


-- This is a simple unfolding of what it means to be a member of (#MP-left-qt f)
equalInType-#MP-left-qt‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-left-qt f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left-qt‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÉ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÉ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÉ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÉ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ (equalInType-mon f‚àà w1 e1)))
           h2


equalInType-#MP-right-qt‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-right-qt f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right-qt‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                              ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                     √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÉ-APPLY a1 f) (equalInType-refl b‚àà)


‚ÜíequalInType-#MP-left-qt‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left-qt‚ÇÇ i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÑ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÑ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí eqTypesQNAT!)
                (isType-MP-right-qt‚ÇÇ-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÑ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


-- This is a simple unfolding of what it means to be a member of (#MP-left-qt‚ÇÇ f)
equalInType-#MP-left-qt‚ÇÇ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left-qt‚ÇÇ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÑ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÑ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÑ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÑ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ (equalInType-mon f‚àà w1 e1)))
           h2


equalInType-#MP-right-qt‚ÇÇ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                          ‚Üí equalInType i w (#MP-right-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right-qt‚ÇÇ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt‚ÇÇ f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #QNAT! n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #QNAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                              ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #QNAT! n‚ÇÅ n‚ÇÇ
                                                     √ó inhType i w'' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÉ-APPLY a1 f) (equalInType-refl b‚àà)


‚ÜíequalInType-#MP-left-qt‚ÇÉ : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left-qt‚ÇÉ i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÖ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÖ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-qt‚ÇÉ-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w4 , --#compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÖ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


-- This is a simple unfolding of what it means to be a member of (#MP-left-qt‚ÇÉ f)
equalInType-#MP-left-qt‚ÇÉ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí equalInType i w (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
equalInType-#MP-left-qt‚ÇÉ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÖ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÖ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÖ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÖ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ (equalInType-mon f‚àà w1 e1)))
           h2


equalInType-#MP-right-qt‚ÇÉ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí equalInType i w (#MP-right-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right-qt‚ÇÉ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí h))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt‚ÇÉ f)
                         ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                       √ó inhType i w'' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))) e'))
    aw1 w1 e1 (t , t‚àà) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-SUM‚Üí t‚àà)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' t t
                              ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w'' #NAT! n‚ÇÅ n‚ÇÇ
                                                     √ó inhType i w'' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))) e1 w' e')
        aw2 w2 e2 (a1 , a2 , b1 , b2 , a‚àà , c1 , c2 , b‚àà) z =
          a1 , a2 , a‚àà , b1 , ‚Üí‚â°equalInType (sub0-ASSERT‚ÇÑ-APPLY a1 f) (equalInType-refl b‚àà)


#MP-left2‚Üí#MP-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                      ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                      ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
#MP-left2‚Üí#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•)
                        ‚Üí ‚ä•)
    aw1 w1 e1 h = equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                    √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = h w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh



#MP-left‚Üí#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                      ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                      ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
#MP-left‚Üí#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                    √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•) ‚Üí ‚ä•)
    aw1 w1 e1 h = equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•)
        aw2 w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh = h w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh)


#MP-left2‚Üí#MP-left3 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                       ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
#MP-left2‚Üí#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


#MP-left3‚Üí#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                       ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
#MP-left3‚Üí#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left3‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


‚Üí‚ààType-NEG : (i : ‚Ñï) (w : ùïé¬∑) (A B : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí equalInType i w (#NEG A) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#NEG B) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-NEG i w A B t‚ÇÅ t‚ÇÇ ist h a‚àà =
  equalInType-NEG ist aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' B a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q = equalInType-NEG‚Üí a‚àà w1 e1 a‚ÇÅ a‚ÇÇ (h w1 e1 a‚ÇÅ a‚ÇÇ q)


‚Üí‚ààType-PI : (i : ‚Ñï) (w : ùïé¬∑) (A B : CTerm) (C D : CTerm0) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ D) (sub0 a‚ÇÇ D))
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType i w' B a ‚Üí equalInType i w' (sub0 a C) b‚ÇÅ b‚ÇÇ ‚Üí equalInType i w' (sub0 a D) b‚ÇÅ b‚ÇÇ)
               ‚Üí equalInType i w (#PI A C) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#PI B D) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-PI i w A B C D t‚ÇÅ t‚ÇÇ istb istd ha hb a‚àà =
  equalInType-PI (Œª w' e' ‚Üí eqTypes-mon (uni i) istb w' e') istd aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (sub0 a‚ÇÅ D) (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q =
      hb w1 e1 a‚ÇÅ (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ) (equalInType-refl q)
         (snd (snd (equalInType-PI‚Üí a‚àà)) w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 a‚ÇÅ a‚ÇÇ q))


‚Üí‚ààType-FUN : (i : ‚Ñï) (w : ùïé¬∑) (A B C D : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí isType i w D
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' C b‚ÇÅ b‚ÇÇ ‚Üí equalInType i w' D b‚ÇÅ b‚ÇÇ)
               ‚Üí equalInType i w (#FUN A C) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#FUN B D) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-FUN i w A B C D t‚ÇÅ t‚ÇÇ istb istd ha hb a‚àà =
  equalInType-FUN istb istd aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' D (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q =
      hb w1 e1 (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ)
         (equalInType-FUN‚Üí a‚àà w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 a‚ÇÅ a‚ÇÇ q))


‚àà#MP-right2‚Üí‚ààMP-right : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-right2 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí equalInType i w (#MP-right f) b‚ÇÅ b‚ÇÇ
‚àà#MP-right2‚Üí‚ààMP-right i w f a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType i w' (#MP-right2 f) t t))
    aw w1 e1 = a‚ÇÅ , equalInType-refl (equalInType-mon a‚àà w1 e1)


‚àà#MP‚Çô‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚Çô F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT‚ÜíBOOL‚ÇÄ f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚Çô‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right‚Çô‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left‚Çô f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right‚Çô f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚Çô f) h1)

    h3 : equalInType i w1 (#MP-right‚Çô f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left‚Çô i w1 f #AX #AX f‚àà cond)


‚àà#MP‚ÇÑ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚ÇÑ F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT!‚ÜíBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚ÇÑ‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÑ f) h1)

    h3 : equalInType i w1 (#MP-right-qt f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt i w1 f #AX #AX f‚àà cond)


‚àà#MP‚ÇÖ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚ÇÖ F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #QNAT!‚ÜíBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #QNAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚ÇÖ‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÇ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#QNAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÇ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÇ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÖ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÇ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÇ i w1 f #AX #AX f‚àà cond)


‚àà#MP‚ÇÜ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚ÇÜ F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT!‚ÜíBOOL‚ÇÄ! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚ÇÜ‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÉ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) f‚àà h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÜ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÉ i w1 f #AX #AX f‚àà cond)


‚àà#MP‚Çá‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
          ‚Üí equalInType i w #MP‚Çá F G
          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) f
                         ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
                         ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                           √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))))
‚àà#MP‚Çá‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right-qt‚ÇÉ‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) (equalInTypeTNOENC‚Üí f‚àà) h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚ÇÜ f) h1)

    h3 : equalInType i w1 (#MP-right-qt‚ÇÉ f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left-qt‚ÇÉ i w1 f #AX #AX (equalInTypeTNOENC‚Üí f‚àà) cond)


\end{code}[hide]
