\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod


module mp_props {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
                (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
                (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                (F : Freeze {L} W C K P G N)
                (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                (CB : ChoiceBar W M C K P G X N V F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import terms3(W)(C)(K)(G)(X)(N)
open import terms8(W)(C)(K)(G)(X)(N)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(E)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)



-- œÄ (F : ‚Ñï ‚Üí ùîπ). ¬¨(Œ† (n : ‚Ñï). ¬¨(F n ‚â° true)) ‚Üí ||Œ£ (n : ‚Ñï). F n ‚â° true||
MP : Term
MP = PI NAT!‚ÜíBOOL (FUN (NEG (PI NAT! (NEG (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))
                        (SQUASH (SUM NAT! (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))


#MP : CTerm
#MP = ct MP c
  where
    c : # MP
    c = refl


-- Similar to #[0]MP-right (without the squash): Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2 : CTerm0
#[0]MP-right2 = #[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right : CTerm0
#[0]MP-right = #[0]SQUASH #[0]MP-right2


-- ¬¨Œ†(n : ‚Ñï).¬¨(f(n)=true)
#[0]MP-left : CTerm0
#[0]MP-left = #[0]NEG (#[0]PI #[0]NAT! (#[1]NEG (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))))


-- Similar to #[0]MP-left: ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#[0]MP-left2 : CTerm0
#[0]MP-left2 = #[0]NEG (#[0]NEG #[0]MP-right2)


-- Similar to #[0]MP-left2 (with a squash): ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left3 : CTerm0
#[0]MP-left3 = #[0]NEG (#[0]NEG #[0]MP-right)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2 : CTerm ‚Üí CTerm
#MP-right2 f = #SUM-ASSERT‚ÇÇ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right : CTerm ‚Üí CTerm
#MP-right f = #SQUASH (#MP-right2 f)


-- ¬¨Œ†(n : ‚Ñï).¬¨(f(n)=true)
#MP-left : CTerm ‚Üí CTerm
#MP-left f = #NEG (#PI-NEG-ASSERT‚ÇÇ f)


-- ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#MP-left2 : CTerm ‚Üí CTerm
#MP-left2 f = #NEG (#NEG (#MP-right2 f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left3 : CTerm ‚Üí CTerm
#MP-left3 f = #NEG (#NEG (#MP-right f))


#MP-PI : CTerm
#MP-PI = #PI #NAT!‚ÜíBOOL (#[0]FUN #[0]MP-left #[0]MP-right)


#MP‚â°#PI : #MP ‚â° #MP-PI
#MP‚â°#PI = CTerm‚â° refl


-- Another version of MP using ¬¨¬¨Œ£ instead of ¬¨‚àÄ
#MP‚ÇÇ : CTerm
#MP‚ÇÇ = #PI #NAT!‚ÜíBOOL (#[0]FUN #[0]MP-left3 #[0]MP-right)


sub0-fun-mp : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)
                             ‚â° #FUN (#MP-left a) (#MP-right a)
sub0-fun-mp a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left #[0]MP-right (#MP-left a) (#MP-right a)
    (CTerm‚â° (‚â°NEG (‚â°PI refl (‚â°NEG (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


sub0-fun-mp‚ÇÇ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)
                             ‚â° #FUN (#MP-left3 a) (#MP-right a)
sub0-fun-mp‚ÇÇ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left3 #[0]MP-right (#MP-left3 a) (#MP-right a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e1 refl) refl refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl

    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


‚Üí‚â°equalTypes : {i : ‚Ñï} {w : ùïé¬∑} {a1 a2 b1 b2 : CTerm}
                ‚Üí a1 ‚â° a2
                ‚Üí b1 ‚â° b2
                ‚Üí equalTypes i w a1 b1
                ‚Üí equalTypes i w a2 b2
‚Üí‚â°equalTypes {i} {w} {a1} {a2} {b1} {b2} e1 e2 h rewrite e1 | e2 = h


‚Üí‚â°equalInType : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                ‚Üí T ‚â° U
                ‚Üí equalInType i w T a b
                ‚Üí equalInType i w U a b
‚Üí‚â°equalInType {i} {w} {T} {U} {a} {b} e h rewrite e = h


‚àÄùïé‚àÉùïé-func : {w : ùïé¬∑} {f g : wPred w}
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí f w1 e1 ‚Üí g w1 e1)
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w1 (‚ÜëwPred f e1))
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w1 (‚ÜëwPred g e1))
‚àÄùïé‚àÉùïé-func {w} {f} {g} h q w1 e1 =
  fst q' , fst (snd q') , h (fst q') (‚äë-trans¬∑ e1 (fst (snd q'))) (snd (snd q'))
  where
    q' : ‚àÉùïé w1 (‚ÜëwPred f e1)
    q' = q w1 e1


‚ÜíequalTypes-#MP-left : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left a‚ÇÅ) (#MP-left a‚ÇÇ)
‚ÜíequalTypes-#MP-left {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ eqt)


‚ÜíequalTypes-#MP-left3 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left3 a‚ÇÅ) (#MP-left3 a‚ÇÇ)
‚ÜíequalTypes-#MP-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt)))


isType-MP-right-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                        ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                           (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


‚ÜíequalTypes-#MP-right : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right a‚ÇÅ) (#MP-right a‚ÇÇ)
‚ÜíequalTypes-#MP-right {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (eqTypesSUM‚Üê (Œª w' _ ‚Üí isTypeNAT!) (isType-MP-right-body n w a‚ÇÅ a‚ÇÇ eqt))


isTypeMP-PI : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP-PI
isTypeMP-PI w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL} {#[0]FUN #[0]MP-left #[0]MP-right}
    {#NAT!‚ÜíBOOL} {#[0]FUN #[0]MP-left #[0]MP-right}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp a‚ÇÅ | sub0-fun-mp a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left eqb) (‚ÜíequalTypes-#MP-right eqb)



isTypeMP‚ÇÇ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÇ
isTypeMP‚ÇÇ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL} {#[0]FUN #[0]MP-left3 #[0]MP-right}
    {#NAT!‚ÜíBOOL} {#[0]FUN #[0]MP-left3 #[0]MP-right}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÇ a‚ÇÅ | sub0-fun-mp‚ÇÇ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 eqb) (‚ÜíequalTypes-#MP-right eqb)



isTypeMP : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP
isTypeMP w n rewrite #MP‚â°#PI = isTypeMP-PI w n


isTypeNegMP : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#NEG #MP)
isTypeNegMP w n = eqTypesNEG‚Üê (isTypeMP w n)


-- This is a simple unfolding of what it means to be a member of (#MP-left f)
equalInType-#MP-left‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                         ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                           ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                                           ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh
    a‚àà w1 e1
    (#AX , equalInType-PI
             (Œª w' _ ‚Üí isTypeNAT!)
             (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body (equalInType-refl (equalInType-mon f‚àà w1 e1)))
             Œª w2 e2 n‚ÇÅ n‚ÇÇ n‚àà ‚Üí
                 ‚â°CTerm‚ÜíequalInType
                   (sym (sub0-NEG-ASSERT‚ÇÇ-APPLY n‚ÇÅ f))
                   (equalInType-NEG
                     (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (equalInType-refl f‚àà) w2 (‚äë-trans¬∑ e1 e2) n‚ÇÅ n‚ÇÅ (equalInType-refl n‚àà)))
                     Œª w3 e3 b‚ÇÅ b‚ÇÇ q ‚Üí h w3 (‚äë-trans¬∑ e2 e3) n‚ÇÅ n‚ÇÇ (equalInType-mon n‚àà w3 e3) (b‚ÇÅ , equalInType-refl q)))


-- We prove that the result in equalInType-#MP-left‚Üí is an equivalence
‚ÜíequalInType-#MP-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                           ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                                           ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
                        ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ f‚àà)
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#PI-NEG-ASSERT‚ÇÇ f) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)) ‚Üí ‚ä•)
        aw2 w2 e2 n‚ÇÅ n‚ÇÇ n‚àà (t , inh) = h1 w2 (‚äë-refl¬∑ w2) t t inh
          where
            h1 : ‚àÄùïé w2 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)) a‚ÇÅ a‚ÇÇ)
            h1 = equalInType-NEG‚Üí (‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (snd (snd (equalInType-PI‚Üí g‚àà)) w2 e2 n‚ÇÅ n‚ÇÇ n‚àà))



-- This is a simple unfolding of what it means to be a member of (#MP-left2 f)
equalInType-#MP-left2‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                          ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SUM-ASSERT‚ÇÇ f) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw h3))
      where
        aw : ‚àÄùïé w2 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
        aw w3 e3 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
          lift (h w3 (‚äë-trans¬∑ e2 e3) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ)
        h3 = equalInType-SUM‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SUM-ASSERT‚ÇÇ f)) t
    h1 = equalInType-NEG
           (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ (equalInType-mon f‚àà w1 e1))
           h2


‚ÜíequalInType-#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ f‚àà))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SUM-ASSERT‚ÇÇ f)) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t) p‚àà
          where
            aw3 : ‚àÄùïé w2 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t))
            aw3 w3 e3 =
              n‚ÇÅ , n‚ÇÇ , t , t ,
              equalInType-mon n‚àà w3 e3 ,
              #compAllRefl (#PAIR n‚ÇÅ t) w3 ,
              #compAllRefl (#PAIR n‚ÇÇ t) w3 ,
              ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w3 e3)

            p‚àà : equalInType i w2 (#SUM-ASSERT‚ÇÇ f) (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÇ t)
            p‚àà = equalInType-SUM
                    (Œª w' _ ‚Üí isTypeNAT!)
                    (isType-MP-right-body i w2 f f (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)))
                    (Mod.‚àÄùïé-‚ñ° M aw3)


-- This is a simple unfolding of what it means to be a member of (#MP-left3 f)
equalInType-#MP-left3‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                          ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
equalInType-#MP-left3‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SQUASH (#SUM-ASSERT‚ÇÇ f)) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 h3))
      where
        aw1 : ‚àÄùïé w2 (Œª w' e' ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f) ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w3 e3 (u , u‚àà) = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw2 h4)
          where
            aw2 : ‚àÄùïé w3 (Œª w' e' ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u ‚Üí Lift (lsuc L) ‚ä•)
            aw2 w4 e4 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
              lift (h w4 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4)) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

            h4 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' u u)
            h4 = equalInType-SUM‚Üí u‚àà

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f))
        h3 = equalInType-SQUASH‚Üí p‚àà

    h1 : ‚ààType i w1 (#NEG (#SQUASH (#SUM-ASSERT‚ÇÇ f))) t
    h1 = equalInType-NEG
           (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ (equalInType-mon f‚àà w1 e1)))
           h2


‚ÜíequalInType-#MP-left3 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                 √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                            ‚Üí ‚ä•)
                                           ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG
    (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ f‚àà)))
    aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#SQUASH (#SUM-ASSERT‚ÇÇ f))) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                   √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) = equalInType-NEG‚Üí g‚àà w2 e2 #AX #AX s‚àà
          where
            i‚àà : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType i w' (#SUM-ASSERT‚ÇÇ f))
            i‚àà w3 e3 =
              #PAIR n‚ÇÅ t ,
              equalInType-SUM
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-body i w3 f f (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                (Mod.‚àÄùïé-‚ñ° M aw3)
              where
                aw3 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
                aw3 w4 e4 =
                  n‚ÇÅ , n‚ÇÅ , t , t ,
                  equalInType-refl (equalInType-mon n‚àà w4 (‚äë-trans¬∑ e3 e4)) ,
                  #compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  #compAllRefl (#PAIR n‚ÇÅ t) w4 ,
                  ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f)) (equalInType-mon inh w4 (‚äë-trans¬∑ e3 e4))

            s‚àà : equalInType i w2 (#SQUASH (#SUM-ASSERT‚ÇÇ f)) #AX #AX
            s‚àà = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M i‚àà)


#MP-left2‚Üí#MP-left : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                      ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                      ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
#MP-left2‚Üí#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left i w f a‚ÇÅ a‚ÇÇ f‚àà aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•)
                        ‚Üí ‚ä•)
    aw1 w1 e1 h = equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                    √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = h w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh



#MP-left‚Üí#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                      ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                      ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
#MP-left‚Üí#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                    √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•) ‚Üí ‚ä•)
    aw1 w1 e1 h = equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•)
        aw2 w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh = h w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh)


#MP-left2‚Üí#MP-left3 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                       ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
#MP-left2‚Üí#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left3 i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left2‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


#MP-left3‚Üí#MP-left2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                       ‚Üí ‚ààType i w #NAT!‚ÜíBOOL f
                       ‚Üí equalInType i w (#MP-left3 f) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w (#MP-left2 f) a‚ÇÅ a‚ÇÇ
#MP-left3‚Üí#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left2 i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left3‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


‚Üí‚ààType-NEG : (i : ‚Ñï) (w : ùïé¬∑) (A B : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí equalInType i w (#NEG A) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#NEG B) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-NEG i w A B t‚ÇÅ t‚ÇÇ ist h a‚àà =
  equalInType-NEG ist aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' B a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q = equalInType-NEG‚Üí a‚àà w1 e1 a‚ÇÅ a‚ÇÇ (h w1 e1 a‚ÇÅ a‚ÇÇ q)


‚Üí‚ààType-PI : (i : ‚Ñï) (w : ùïé¬∑) (A B : CTerm) (C D : CTerm0) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ D) (sub0 a‚ÇÇ D))
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType i w' B a ‚Üí equalInType i w' (sub0 a C) b‚ÇÅ b‚ÇÇ ‚Üí equalInType i w' (sub0 a D) b‚ÇÅ b‚ÇÇ)
               ‚Üí equalInType i w (#PI A C) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#PI B D) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-PI i w A B C D t‚ÇÅ t‚ÇÇ istb istd ha hb a‚àà =
  equalInType-PI (Œª w' e' ‚Üí eqTypes-mon (uni i) istb w' e') istd aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (sub0 a‚ÇÅ D) (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q =
      hb w1 e1 a‚ÇÅ (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ) (equalInType-refl q)
         (snd (snd (equalInType-PI‚Üí a‚àà)) w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 a‚ÇÅ a‚ÇÇ q))


‚Üí‚ààType-FUN : (i : ‚Ñï) (w : ùïé¬∑) (A B C D : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí isType i w D
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' C b‚ÇÅ b‚ÇÇ ‚Üí equalInType i w' D b‚ÇÅ b‚ÇÇ)
               ‚Üí equalInType i w (#FUN A C) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#FUN B D) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-FUN i w A B C D t‚ÇÅ t‚ÇÇ istb istd ha hb a‚àà =
  equalInType-FUN istb istd aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' D (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q =
      hb w1 e1 (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ)
         (equalInType-FUN‚Üí a‚àà w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 a‚ÇÅ a‚ÇÇ q))

\end{code}[hide]
