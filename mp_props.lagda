\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module mp_props {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
                (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
                (N : NewChoice {L} W C K G)
--                (V : ChoiceVal W C K G X N)
--                (F : Freeze {L} W C K P G N)
                (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
--                (CB : ChoiceBar W M C K P G X N V F E)
                (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
--open import getChoiceDef(W)(C)(K)(G)
--open import newChoiceDef(W)(C)(K)(G)(N)
--open import choiceExtDef(W)(C)(K)(G)(X)
--open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
--open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (eqTypes-mon)
--open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
  using (NATREC‚áì)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (TSext-equalTypes-equalInType)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (eqTypesNEG‚Üê ; eqTypesSQUASH‚Üê ; ‚ÜíequalInType-NAT ; equalInType-NAT!‚Üí ; equalInType-FUN‚Üí ; ‚â°CTerm‚ÜíequalInType ;
         equalInType-FUN ; isTypeNAT! ; ‚Üí‚â°equalTypes ; eqTypesSUM‚Üê ; eqTypesNAT ; eqTypesFUN‚Üê ; eqTypesPI‚Üê ; ‚â°CTerm‚ÜíeqTypes ;
         eqTypesISECT‚Üê ; eqTypesNOENC‚Üê ; equalInType-local ; equalInType-ISECT‚Üí ; equalInType-NOENC‚Üí ; equalInType-PI ;
         equalInType-refl ; equalInType-mon ; equalInType-NEG ; equalInType-NEG‚Üí ; equalInType-PI‚Üí ; equalInType-SUM‚Üí ;
         equalInType-SUM ; equalInType-SQUASH‚Üí ; ‚Üí‚â°equalInType ; eqTypes-local ; eqTypesTRUE ; eqTypesFALSE ;
         NUM-equalInType-NAT! ; ¬¨equalInType-FALSE)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-ASSERT‚ÇÉ-APPLY ; equalInType-NEG‚Üí¬¨inh ;
         equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ ; isType-#NAT!‚ÜíBOOL ; isType-#NAT!‚ÜíBOOL! ; isType-#NAT‚ÜíBOOL ;
         sub0-NEG-ASSERT‚ÇÇ-APPLY ; ‚ÜíequalInType-SQUASH ; isTypeBOOL ; isTypeBOOL! ; isTypeBOOL‚ÇÄ ; isType-#NAT!‚ÜíBOOL‚ÇÄ ;
         isTypeBOOL‚ÇÄ!‚Üí ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ; isType-#NAT‚ÜíBOOL‚ÇÄ ; eqTypesQNAT! ; equalInType-BOOL‚ÇÄ!‚Üí ;
         equalTypes-#‚áõ-left-right-rev ; equalTypes-#‚áõ-left-right)
open import props6(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (_#‚áõ‚Çö_at_ ; equalInType-#‚áõ‚Çö-left-right-rev ; presPure ; ‚ÜípresPure-NATREC‚ÇÅ ; ‚ÜípresPure-NATREC‚ÇÇ ; ‚ÜípresPure-NATREC‚ÇÉ ;
         equalTypesPI‚Üí‚Çó ; equalTypesPI‚Üí·µ£ ; eqTypesSUM!‚Üê ; SUMeq! ; equalInType-SUM!‚Üí ; equalInType-SUM!)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (#[1]ASSERT‚ÇÑ ; #SUM-ASSERT‚ÇÇ ; #SUM-ASSERT‚ÇÉ ; #SUM-ASSERT‚ÇÑ ; #SUM-ASSERT‚ÇÖ ; #PI-NEG-ASSERT‚ÇÇ ; #QNAT!‚ÜíBOOL! ;
         ‚â°ASSERT‚ÇÑ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ ;
         ‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ ; #QNAT!‚ÜíBOOL!‚â° ; #[0]ASSERT‚ÇÑ ; sub0-ASSERT‚ÇÑ-APPLY ;
         equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÑ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body ; #ASSERT‚ÇÑ)

--open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
--open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
--open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
--open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB) using (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ ; ‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ ; ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ-body)


#[0]SUM! : CTerm0 ‚Üí CTerm1 ‚Üí CTerm0
#[0]SUM! a b = #[0]NOWRITEMOD (#[0]NOREADMOD (#[0]SUM a b))


‚â°SUM! : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí SUM! a c ‚â° SUM! b d
‚â°SUM! {a} {b} {c} {d} e f rewrite e | f = refl


-- œÄ (F : ‚Ñï ‚Üí ùîπ). ¬¨(Œ† (n : ‚Ñï). ¬¨(F n ‚â° true)) ‚Üí ||Œ£ (n : ‚Ñï). F n ‚â° true||
MP : Term
MP = PI NAT!‚ÜíBOOL‚ÇÄ (FUN (NEG (PI NAT! (NEG (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))
                        (SQUASH (SUM! NAT! (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))


#MP : CTerm
#MP = ct MP c
  where
    c : # MP
    c = refl


-- Similar to #[0]MP-right (without the squash): Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2 : CTerm0
#[0]MP-right2 = #[0]SUM! #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right : CTerm0
#[0]MP-right = #[0]SQUASH #[0]MP-right2


-- Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2-qt : CTerm0
#[0]MP-right2-qt = #[0]SUM! #[0]NAT! (#[1]ASSERT‚ÇÉ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right-qt : CTerm0
#[0]MP-right-qt = #[0]SQUASH #[0]MP-right2-qt


-- Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2-qt‚ÇÇ : CTerm0
#[0]MP-right2-qt‚ÇÇ = #[0]SUM! #[0]QNAT! (#[1]ASSERT‚ÇÉ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right-qt‚ÇÇ : CTerm0
#[0]MP-right-qt‚ÇÇ = #[0]SQUASH #[0]MP-right2-qt‚ÇÇ


-- Œ£(n:‚Ñï).f(n)=true
#[0]MP-right2-qt‚ÇÉ : CTerm0
#[0]MP-right2-qt‚ÇÉ = #[0]SUM! #[0]NAT! (#[1]ASSERT‚ÇÑ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right-qt‚ÇÉ : CTerm0
#[0]MP-right-qt‚ÇÉ = #[0]SQUASH #[0]MP-right2-qt‚ÇÉ


-- ¬¨Œ†(n : ‚Ñï).¬¨(f(n)=true)
#[0]MP-left : CTerm0
#[0]MP-left = #[0]NEG (#[0]PI #[0]NAT! (#[1]NEG (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))))


-- Similar to #[0]MP-left: ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#[0]MP-left2 : CTerm0
#[0]MP-left2 = #[0]NEG (#[0]NEG #[0]MP-right2)


-- Similar to #[0]MP-left2 (with a squash): ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left3 : CTerm0
#[0]MP-left3 = #[0]NEG (#[0]NEG #[0]MP-right)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left-qt : CTerm0
#[0]MP-left-qt = #[0]NEG (#[0]NEG #[0]MP-right-qt)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left-qt‚ÇÇ : CTerm0
#[0]MP-left-qt‚ÇÇ = #[0]NEG (#[0]NEG #[0]MP-right-qt‚ÇÇ)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left-qt‚ÇÉ : CTerm0
#[0]MP-left-qt‚ÇÉ = #[0]NEG (#[0]NEG #[0]MP-right-qt‚ÇÉ)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2 : CTerm ‚Üí CTerm
#MP-right2 f = #SUM-ASSERT‚ÇÇ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right : CTerm ‚Üí CTerm
#MP-right f = #SQUASH (#MP-right2 f)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2-qt : CTerm ‚Üí CTerm
#MP-right2-qt f = #SUM-ASSERT‚ÇÉ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right-qt : CTerm ‚Üí CTerm
#MP-right-qt f = #SQUASH (#MP-right2-qt f)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2-qt‚ÇÇ : CTerm ‚Üí CTerm
#MP-right2-qt‚ÇÇ f = #SUM-ASSERT‚ÇÑ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right-qt‚ÇÇ : CTerm ‚Üí CTerm
#MP-right-qt‚ÇÇ f = #SQUASH (#MP-right2-qt‚ÇÇ f)


-- Œ£(n:‚Ñï).f(n)=true
#MP-right2-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-right2-qt‚ÇÉ f = #SUM-ASSERT‚ÇÖ f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-right-qt‚ÇÉ f = #SQUASH (#MP-right2-qt‚ÇÉ f)


-- ¬¨Œ†(n : ‚Ñï).¬¨(f(n)=true)
#MP-left : CTerm ‚Üí CTerm
#MP-left f = #NEG (#PI-NEG-ASSERT‚ÇÇ f)


-- ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#MP-left2 : CTerm ‚Üí CTerm
#MP-left2 f = #NEG (#NEG (#MP-right2 f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left3 : CTerm ‚Üí CTerm
#MP-left3 f = #NEG (#NEG (#MP-right f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left-qt : CTerm ‚Üí CTerm
#MP-left-qt f = #NEG (#NEG (#MP-right-qt f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left-qt‚ÇÇ : CTerm ‚Üí CTerm
#MP-left-qt‚ÇÇ f = #NEG (#NEG (#MP-right-qt‚ÇÇ f))


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-left-qt‚ÇÉ f = #NEG (#NEG (#MP-right-qt‚ÇÉ f))


#MP-PI : CTerm
#MP-PI = #PI #NAT!‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left #[0]MP-right)


#MP‚â°#PI : #MP ‚â° #MP-PI
#MP‚â°#PI = CTerm‚â° refl


-- Another version of MP using ¬¨¬¨Œ£ instead of ¬¨‚àÄ
#MP‚ÇÇ : CTerm
#MP‚ÇÇ = #PI #NAT!‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left3 #[0]MP-right)


-- Another version of MP similar to #MP‚ÇÇ but without the truncation
#MP‚ÇÉ : CTerm
#MP‚ÇÉ = #PI #NAT!‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left2 #[0]MP-right2)


-- Another version of MP that uses #NAT!‚ÜíBOOL! instead
#MP‚ÇÑ : CTerm
#MP‚ÇÑ = #PI #NAT!‚ÜíBOOL! (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)


-- Another version of MP that uses #QNAT!‚ÜíBOOL! instead, i.e., nowrite ‚Ñï and ùîπ, and truncated Œ£s
#MP‚ÇÖ : CTerm
#MP‚ÇÖ = #PI #QNAT!‚ÜíBOOL! (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)


-- Another version of MP that uses #NAT!‚ÜíBOOL‚ÇÄ! instead, i.e., noread/nowrite ‚Ñï and ùîπ, and truncated Œ£s
#MP‚ÇÜ : CTerm
#MP‚ÇÜ = #PI #NAT!‚ÜíBOOL‚ÇÄ! (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)


-- a version of ASSERT that uses NATREC instead of ¬∑ ‚â° true
ASSERT‚Çò : Term ‚Üí Term
ASSERT‚Çò t = NATREC t TRUE (LAMBDA (LAMBDA FALSE))


fvars-ASSERT‚Çò : (t : Term) ‚Üí fvars (ASSERT‚Çò t) ‚â° fvars t
fvars-ASSERT‚Çò t rewrite ++[] (fvars t) = refl


#ASSERT‚Çò : CTerm ‚Üí CTerm
#ASSERT‚Çò a = ct (ASSERT‚Çò ‚åú a ‚åù) c
  where
    c : # ASSERT‚Çò ‚åú a ‚åù
    c rewrite fvars-ASSERT‚Çò ‚åú a ‚åù = CTerm.closed a


#[0]ASSERT‚Çò : CTerm0 ‚Üí CTerm0
#[0]ASSERT‚Çò a = ct0 (ASSERT‚Çò ‚åú a ‚åù) c
  where
    c : #[ [ 0 ] ] ASSERT‚Çò ‚åú a ‚åù
    c rewrite fvars-ASSERT‚Çò ‚åú a ‚åù = CTerm0.closed a


#[1]ASSERT‚Çò : CTerm1 ‚Üí CTerm1
#[1]ASSERT‚Çò a = ct1 (ASSERT‚Çò ‚åú a ‚åù) c
  where
    c : #[ 0 ‚à∑ [ 1 ] ] ASSERT‚Çò ‚åú a ‚åù
    c rewrite fvars-ASSERT‚Çò ‚åú a ‚åù = CTerm1.closed a


-- Œ£(n:‚Ñï).assert(f(n))
#[0]MP-right‚Çò : CTerm0
#[0]MP-right‚Çò = #[0]SUM! #[0]NAT! (#[1]ASSERT‚Çò (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ¬¨¬¨Œ£(n:‚Ñï).assert(f(n))
#[0]MP-left‚Çò : CTerm0
#[0]MP-left‚Çò = #[0]NEG (#[0]NEG #[0]MP-right‚Çò)


-- Œ£(n:‚Ñï).assert(f(n))
#MP-right‚Çò : CTerm ‚Üí CTerm
#MP-right‚Çò f = #SUM! #NAT! (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))


-- ¬¨¬¨Œ£(n:‚Ñï).assert(f(n))
#MP-left‚Çò : CTerm ‚Üí CTerm
#MP-left‚Çò f = #NEG (#NEG (#MP-right‚Çò f))


NAT!‚ÜíNAT! : Term
NAT!‚ÜíNAT! = FUN NAT! NAT!


#NAT!‚ÜíNAT! : CTerm
#NAT!‚ÜíNAT! = ct NAT!‚ÜíNAT! refl


#NAT!‚ÜíNAT!‚â° : #NAT!‚ÜíNAT! ‚â° #FUN #NAT! #NAT!
#NAT!‚ÜíNAT!‚â° = CTerm‚â° refl


-- Another version of MP that
-- (1) uses #NAT!‚ÜíNAT!, i.e., noread/nowrite ‚Ñï
-- (2) non-truncated Œ£s
-- (3) and an assert that relies on NATREC
#MP‚Çò : CTerm
#MP‚Çò = #PI #NAT!‚ÜíNAT! (#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò )


#MP‚Çá : CTerm
#MP‚Çá = #PI (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)


-- Similar to #[0]MP-right (without the squash): Œ£(n:‚Ñï).f(n)=true
#[0]MP-rightŒ£‚Çô : CTerm0
#[0]MP-rightŒ£‚Çô = #[0]SUM #[0]NAT (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-right‚Çô : CTerm0
#[0]MP-right‚Çô = #[0]SQUASH #[0]MP-rightŒ£‚Çô


-- Similar to #[0]MP-left2 (with a squash): ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#[0]MP-left‚Çô : CTerm0
#[0]MP-left‚Çô = #[0]NEG (#[0]NEG #[0]MP-right‚Çô)


#SUM-ASSERT‚Çô : CTerm ‚Üí CTerm
#SUM-ASSERT‚Çô f = #SUM #NAT (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR))


-- Œ£(n:‚Ñï).f(n)=true
#MP-rightŒ£‚Çô : CTerm ‚Üí CTerm
#MP-rightŒ£‚Çô f = #SUM-ASSERT‚Çô f


-- ‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-right‚Çô : CTerm ‚Üí CTerm
#MP-right‚Çô f = #SQUASH (#MP-rightŒ£‚Çô f)


-- ¬¨¬¨‚ÜìŒ£(n:‚Ñï).f(n)=true
#MP-left‚Çô : CTerm ‚Üí CTerm
#MP-left‚Çô f = #NEG (#NEG (#MP-right‚Çô f))


-- Another version of MP similar to #MP‚ÇÇ but quantified over #NAT‚ÜíBOOL instead of #NAT!‚ÜíBOOL
#MP‚Çô : CTerm
#MP‚Çô = #PI #NAT‚ÜíBOOL‚ÇÄ (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)


sub0-fun-mp : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)
                          ‚â° #FUN (#MP-left a) (#MP-right a)
sub0-fun-mp a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left #[0]MP-right (#MP-left a) (#MP-right a)
    (CTerm‚â° (‚â°NEG (‚â°PI refl (‚â°NEG (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM! #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM! #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM! refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


sub0-fun-mp‚ÇÇ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)
                             ‚â° #FUN (#MP-left3 a) (#MP-right a)
sub0-fun-mp‚ÇÇ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left3 #[0]MP-right (#MP-left3 a) (#MP-right a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM! refl (‚â°EQ (‚â°APPLY e1 refl) refl refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM! #[0]NAT! (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM! #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM! refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl

    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚Çô : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)
                             ‚â° #FUN (#MP-left‚Çô a) (#MP-right‚Çô a)
sub0-fun-mp‚Çô a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left‚Çô #[0]MP-right‚Çô (#MP-left‚Çô a) (#MP-right‚Çô a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM refl (‚â°EQ (‚â°APPLY e1 refl) refl refl))))))
    (‚â°sub0-#[0]SQUASH
      a (#[0]SUM #[0]NAT (#[1]ASSERT‚ÇÇ (#[1]APPLY #[1]VAR1 #[1]VAR0))) (#SUM #NAT (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a ‚åü #[0]VAR)))
      (CTerm‚â° (‚â°SUM refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl

    e1 : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚ÇÉ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left2 #[0]MP-right2)
                             ‚â° #FUN (#MP-left2 a) (#MP-right2 a)
sub0-fun-mp‚ÇÉ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left2 #[0]MP-right2 (#MP-left2 a) (#MP-right2 a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SUM! refl (‚â°EQ (‚â°APPLY e refl) refl refl)))))
    (CTerm‚â° (‚â°SUM! refl (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY e refl))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


sub0-fun-mp‚ÇÑ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)
                              ‚â° #FUN (#MP-left-qt a) (#MP-right-qt a)
sub0-fun-mp‚ÇÑ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left-qt #[0]MP-right-qt (#MP-left-qt a) (#MP-right-qt a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM! refl (‚â°EQ (‚â°APPLY e refl) refl refl))))))
    (CTerm‚â° (‚â°SET refl (‚â°SUM! refl (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚ÇÖ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)
                              ‚â° #FUN (#MP-left-qt‚ÇÇ a) (#MP-right-qt‚ÇÇ a)
sub0-fun-mp‚ÇÖ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ (#MP-left-qt‚ÇÇ a) (#MP-right-qt‚ÇÇ a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM! refl (‚â°EQ (‚â°APPLY e refl) refl refl))))))
    (CTerm‚â° (‚â°SET refl (‚â°SUM! refl (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚ÇÜ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)
                              ‚â° #FUN (#MP-left-qt‚ÇÉ a) (#MP-right-qt‚ÇÉ a)
sub0-fun-mp‚ÇÜ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ (#MP-left-qt‚ÇÉ a) (#MP-right-qt‚ÇÉ a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SET refl (‚â°SUM! refl (‚â°EQ (‚â°APPLY e refl) refl refl))))))
    (CTerm‚â° (‚â°SET refl (‚â°SUM! refl (‚â°ASSERT‚ÇÑ (‚Üí‚â°APPLY e refl)))))
  where
    e : shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) ‚â° shiftUp 1 ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftDown 2 a = refl


sub0-fun-mp‚Çò : (a : CTerm)
             ‚Üí sub0 a (#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò)
             ‚â° #FUN (#MP-left‚Çò a) (#MP-right‚Çò a)
sub0-fun-mp‚Çò a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left‚Çò #[0]MP-right‚Çò (#MP-left‚Çò a) (#MP-right‚Çò a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SUM! refl (‚â°NATREC (‚â°APPLY e refl) refl refl)))))
    (CTerm‚â° (‚â°SUM! refl (‚â°NATREC (‚â°APPLY e refl) refl refl)))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú CTerm‚ÜíCTerm0 a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a | CTerm‚ÜíCTerm0‚ÜíTerm a = refl


‚àÄùïé‚àÉùïé-func : {w : ùïé¬∑} {f g : wPred w}
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí f w1 e1 ‚Üí g w1 e1)
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w1 (‚ÜëwPred f e1))
              ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w1 (‚ÜëwPred g e1))
‚àÄùïé‚àÉùïé-func {w} {f} {g} h q w1 e1 =
  fst q' , fst (snd q') , h (fst q') (‚äë-trans¬∑ e1 (fst (snd q'))) (snd (snd q'))
  where
    q' : ‚àÉùïé w1 (‚ÜëwPred f e1)
    q' = q w1 e1


‚ÜíequalTypes-#MP-left : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left a‚ÇÅ) (#MP-left a‚ÇÇ)
‚ÜíequalTypes-#MP-left {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ eqt)


‚ÜíequalTypes-#MP-left2 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left2 a‚ÇÅ) (#MP-left2 a‚ÇÇ)
‚ÜíequalTypes-#MP-left2 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt))


‚ÜíequalTypes-#MP-left3 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left3 a‚ÇÅ) (#MP-left3 a‚ÇÇ)
‚ÜíequalTypes-#MP-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt)))


‚ÜíequalTypes-#MP-left-qt : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left-qt a‚ÇÅ) (#MP-left-qt a‚ÇÇ)
‚ÜíequalTypes-#MP-left-qt {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ eqt)))


‚ÜíequalTypes-#MP-left-qt‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #QNAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left-qt‚ÇÇ a‚ÇÅ) (#MP-left-qt‚ÇÇ a‚ÇÇ)
‚ÜíequalTypes-#MP-left-qt‚ÇÇ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ eqt)))


‚ÜíequalTypes-#MP-left-qt‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTypes n w (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-left-qt‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#MP-left-qt‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ eqt)))


‚àà#NAT!‚Üí‚àà#NAT : {n : ‚Ñï} {w : ùïé¬∑} {n‚ÇÅ n‚ÇÇ : CTerm}
                  ‚Üí equalInType n w #NAT! n‚ÇÅ n‚ÇÇ
                  ‚Üí equalInType n w #NAT n‚ÇÅ n‚ÇÇ
‚àà#NAT!‚Üí‚àà#NAT {n} {w} {n‚ÇÅ} {n‚ÇÇ} n‚àà =
  ‚ÜíequalInType-NAT n w n‚ÇÅ n‚ÇÇ (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT!‚Üí n w n‚ÇÅ n‚ÇÇ n‚àà))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí NATeq w' n‚ÇÅ n‚ÇÇ)
    aw w1 e1 (k , c‚ÇÅ , c‚ÇÇ) = k , #‚áõ!‚Üí#‚áõ {w1} {n‚ÇÅ} {#NUM k} c‚ÇÅ , #‚áõ!‚Üí#‚áõ {w1} {n‚ÇÇ} {#NUM k} c‚ÇÇ


‚àà#NAT‚ÜíBOOL‚Üí‚àà#NAT!‚ÜíBOOL : {n : ‚Ñï} {w : ùïé¬∑} {f‚ÇÅ f‚ÇÇ : CTerm}
                             ‚Üí equalInType n w #NAT‚ÜíBOOL f‚ÇÅ f‚ÇÇ
                             ‚Üí equalInType n w #NAT!‚ÜíBOOL f‚ÇÅ f‚ÇÇ
‚àà#NAT‚ÜíBOOL‚Üí‚àà#NAT!‚ÜíBOOL {n} {w} {f‚ÇÅ} {f‚ÇÇ} f‚àà =
  ‚â°CTerm‚ÜíequalInType
    (sym #NAT!‚ÜíBOOL‚â°)
    (equalInType-FUN
      isTypeNAT!
      (isTypeBOOL w n)
      aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                       ‚Üí equalInType n w' #BOOL (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ))
    aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚â° f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ (‚àà#NAT!‚Üí‚àà#NAT n‚àà)


‚àà#NAT‚ÜíBOOL‚ÇÄ‚Üí‚àà#NAT!‚ÜíBOOL‚ÇÄ : {n : ‚Ñï} {w : ùïé¬∑} {f‚ÇÅ f‚ÇÇ : CTerm}
                         ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                         ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
‚àà#NAT‚ÜíBOOL‚ÇÄ‚Üí‚àà#NAT!‚ÜíBOOL‚ÇÄ {n} {w} {f‚ÇÅ} {f‚ÇÇ} f‚àà =
  ‚â°CTerm‚ÜíequalInType
    (sym #NAT!‚ÜíBOOL‚ÇÄ‚â°)
    (equalInType-FUN
      isTypeNAT!
      isTypeBOOL‚ÇÄ
      aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                       ‚Üí equalInType n w' #BOOL‚ÇÄ (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ))
    aw w1 e1 n‚ÇÅ n‚ÇÇ n‚àà = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ (‚àà#NAT!‚Üí‚àà#NAT n‚àà)


‚ÜíequalTypes-#MP‚Çô-left3 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                         ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                         ‚Üí equalTypes n w (#MP-left3 a‚ÇÅ) (#MP-left3 a‚ÇÇ)
‚ÜíequalTypes-#MP‚Çô-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  ‚ÜíequalTypes-#MP-left3 {n} {w} {a‚ÇÅ} {a‚ÇÇ} (‚àà#NAT‚ÜíBOOL‚ÇÄ‚Üí‚àà#NAT!‚ÜíBOOL‚ÇÄ eqt)


isType-MP-right-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                      ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                        (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


isType-MP-right-qt-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL! f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                      ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                        (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-qt-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


isType-MP-right-qt‚ÇÇ-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #QNAT!‚ÜíBOOL! f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #QNAT! a b)
                                        ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                           (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-qt‚ÇÇ-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÉ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #QNAT!‚ÜíBOOL!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


isType-MP-right-qt‚ÇÉ-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                       ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                      ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                        (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right-qt‚ÇÉ-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÑ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÑ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÑ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


‚ÜíequalTypes-#MP-right : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                      ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w (#MP-right a‚ÇÅ) (#MP-right a‚ÇÇ)
‚ÜíequalTypes-#MP-right {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt)


‚ÜíequalTypes-#MP-right-qt : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right-qt a‚ÇÅ) (#MP-right-qt a‚ÇÇ)
‚ÜíequalTypes-#MP-right-qt {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ eqt)


‚ÜíequalTypes-#MP-right-qt‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #QNAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right-qt‚ÇÇ a‚ÇÅ) (#MP-right-qt‚ÇÇ a‚ÇÇ)
‚ÜíequalTypes-#MP-right-qt‚ÇÇ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÑ eqt)


‚ÜíequalTypes-#MP-right-qt‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                          ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                          ‚Üí equalTypes n w (#MP-right-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#MP-right-qt‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ eqt)


‚ÜíequalTypes-#MP-right2 : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType n w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w (#MP-right2 a‚ÇÅ) (#MP-right2 a‚ÇÇ)
‚ÜíequalTypes-#MP-right2 {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  ‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ eqt


isType-MP-right‚Çô-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                      ‚Üí equalInType i w #NAT‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT a b)
                                     ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                       (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right‚Çô-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT‚ÜíBOOL‚ÇÄ‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


‚ÜíequalTypes-#MP‚Çô-right : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w (#MP-right‚Çô a‚ÇÅ) (#MP-right‚Çô a‚ÇÇ)
‚ÜíequalTypes-#MP‚Çô-right {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSQUASH‚Üê (eqTypesSUM‚Üê (Œª w' _ ‚Üí eqTypesNAT) (isType-MP-right‚Çô-body n w a‚ÇÅ a‚ÇÇ eqt))


‚ÜíequalTypes-#MP‚Çô-left : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                      ‚Üí equalInType n w #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w (#MP-left‚Çô a‚ÇÅ) (#MP-left‚Çô a‚ÇÇ)
‚ÜíequalTypes-#MP‚Çô-left {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP‚Çô-right eqt))


isTypeMP-PI : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP-PI
isTypeMP-PI w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left #[0]MP-right}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left #[0]MP-right}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp a‚ÇÅ | sub0-fun-mp a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left eqb) (‚ÜíequalTypes-#MP-right eqb)



isTypeMP‚ÇÇ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÇ
isTypeMP‚ÇÇ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left3 #[0]MP-right}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left3 #[0]MP-right}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÇ a‚ÇÅ | sub0-fun-mp‚ÇÇ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 eqb) (‚ÜíequalTypes-#MP-right eqb)



isTypeMP‚ÇÉ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÉ
isTypeMP‚ÇÉ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left2 #[0]MP-right2}
    {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left2 #[0]MP-right2}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left2 #[0]MP-right2))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left2 #[0]MP-right2)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÉ a‚ÇÅ | sub0-fun-mp‚ÇÉ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left2 eqb) (‚ÜíequalTypes-#MP-right2 eqb)


isTypeMP‚ÇÑ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÑ
isTypeMP‚ÇÑ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt}
    {#NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÑ a‚ÇÅ | sub0-fun-mp‚ÇÑ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt eqb) (‚ÜíequalTypes-#MP-right-qt eqb)


isType-#QNAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #QNAT!‚ÜíBOOL!
isType-#QNAT!‚ÜíBOOL! w n =
  ‚â°CTerm‚ÜíeqTypes
    (sym #QNAT!‚ÜíBOOL!‚â°) (sym #QNAT!‚ÜíBOOL!‚â°)
    (eqTypesFUN‚Üê eqTypesQNAT! (isTypeBOOL! w n))


{-
isType-#NAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT!‚ÜíBOOL!
isType-#NAT!‚ÜíBOOL! w n =
  ‚â°CTerm‚ÜíeqTypes
    (sym #NAT!‚ÜíBOOL!‚â°) (sym #NAT!‚ÜíBOOL!‚â°)
    (eqTypesFUN‚Üê (isTypeNAT! {w} {n}) (isTypeBOOL! w n))
-}


isTypeMP‚ÇÖ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÖ
isTypeMP‚ÇÖ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#QNAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ}
    {#QNAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ}
    (Œª w' e ‚Üí isType-#QNAT!‚ÜíBOOL! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #QNAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÖ a‚ÇÅ | sub0-fun-mp‚ÇÖ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÇ eqb) (‚ÜíequalTypes-#MP-right-qt‚ÇÇ eqb)


isTypeMP‚ÇÜ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚ÇÜ
isTypeMP‚ÇÜ w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    {#NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ eqb) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ eqb)


‚â°ASSERT‚Çò : {a b : Term} ‚Üí a ‚â° b ‚Üí ASSERT‚Çò a ‚â° ASSERT‚Çò b
‚â°ASSERT‚Çò {a} {.a} refl = refl


sub0-ASSERT‚Çò-APPLY : (a b : CTerm) ‚Üí sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû b ‚åü #[0]VAR)) ‚â° #ASSERT‚Çò (#APPLY b a)
sub0-ASSERT‚Çò-APPLY a b = CTerm‚â° (‚â°ASSERT‚Çò (‚Üí‚â°APPLY x y))
  where
    x : shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú b ‚åù) ‚â° ‚åú b ‚åù
    x rewrite subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b) = refl

    y : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    y rewrite #shiftUp 0 a | #shiftDown 0 a = refl


#[1]FALSE : CTerm1
#[1]FALSE = ct1 FALSE refl


#ASSERT‚Çò‚â° : (t : CTerm) ‚Üí #ASSERT‚Çò t ‚â° #NATREC t #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))
#ASSERT‚Çò‚â° t = CTerm‚â° refl


NATREC‚áìat : {a a' : Term} (b c : Term) {w : ùïé¬∑}
          ‚Üí a ‚áì a' at w
          ‚Üí NATREC a b c ‚áì NATREC a' b c at w
NATREC‚áìat {a} {a'} b c {w} comp with ‚áì‚Üífrom-to {w} {a} {a'} comp
... | w' , comp' = ‚áì-from-to‚Üí‚áì {w} {w'} (NATREC‚áì b c comp')


NATREC‚áõ : {a a' : Term} (b c : Term) {w : ùïé¬∑}
        ‚Üí a ‚áõ a' at w
        ‚Üí NATREC a b c ‚áõ NATREC a' b c at w
NATREC‚áõ {a} {a'} b c {w} comp w1 e1 = lift (NATREC‚áìat {a} {a'} b c {w1} (lower (comp w1 e1)))


NATREC‚áõ! : {a a' : Term} (b c : Term) {w : ùïé¬∑}
         ‚Üí a ‚áõ! a' at w
         ‚Üí NATREC a b c ‚áõ! NATREC a' b c at w
NATREC‚áõ! {a} {a'} b c {w} comp w1 e1 = lift (NATREC‚áì {a} {a'} b c {w1} {w1} (lower (comp w1 e1)))


NATREC-NUM‚áõ : (w : ùïé¬∑) (n : ‚Ñï) (b c : Term) ‚Üí NATREC (NUM n) b c ‚áõ NATRECr n b c at w
NATREC-NUM‚áõ w n b c w1 e1 = lift (1 , refl)


NATREC-NUM‚áõ! : (w : ùïé¬∑) (n : ‚Ñï) (b c : Term) ‚Üí NATREC (NUM n) b c ‚áõ! NATRECr n b c at w
NATREC-NUM‚áõ! w n b c w1 e1 = lift (1 , refl)


NUM‚ÜíNATREC‚áõ : {a : Term} {k : ‚Ñï} (b c : Term) {w : ùïé¬∑}
            ‚Üí a ‚áõ NUM k at w
            ‚Üí NATREC a b c ‚áõ NATRECr k b c at w
NUM‚ÜíNATREC‚áõ {a} {k} b c {w} comp = ‚áõ-trans (NATREC‚áõ b c comp) (NATREC-NUM‚áõ w k b c)


NUM‚ÜíNATREC‚áõ! : {a : Term} {k : ‚Ñï} (b c : Term) {w : ùïé¬∑}
             ‚Üí a ‚áõ! NUM k at w
             ‚Üí NATREC a b c ‚áõ! NATRECr k b c at w
NUM‚ÜíNATREC‚áõ! {a} {k} b c {w} comp = ‚áõ!-trans (NATREC‚áõ! b c comp) (NATREC-NUM‚áõ! w k b c)


#NATRECr : ‚Ñï ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#NATRECr 0 b c = b
#NATRECr (suc n) b c = #APPLY2 c (#NUM n) (#NATREC (#NUM n) b c)


‚åú#NATRECr‚åù : (k : ‚Ñï) (b c : CTerm) ‚Üí ‚åú #NATRECr k b c ‚åù ‚â° NATRECr k ‚åú b ‚åù ‚åú c ‚åù
‚åú#NATRECr‚åù 0 b c = refl
‚åú#NATRECr‚åù (suc k) b c = refl


#NUM‚ÜíNATREC‚áõ : {a : CTerm} {k : ‚Ñï} (b c : CTerm) {w : ùïé¬∑}
             ‚Üí a #‚áõ #NUM k at w
             ‚Üí #NATREC a b c #‚áõ #NATRECr k b c at w
#NUM‚ÜíNATREC‚áõ {a} {k} b c {w} comp rewrite ‚åú#NATRECr‚åù k b c = NUM‚ÜíNATREC‚áõ ‚åú b ‚åù ‚åú c ‚åù comp


#NUM‚ÜíNATREC‚áõ! : {a : CTerm} {k : ‚Ñï} (b c : CTerm) {w : ùïé¬∑}
              ‚Üí a #‚áõ! #NUM k at w
              ‚Üí #NATREC a b c #‚áõ! #NATRECr k b c at w
#NUM‚ÜíNATREC‚áõ! {a} {k} b c {w} comp rewrite ‚åú#NATRECr‚åù k b c = NUM‚ÜíNATREC‚áõ! ‚åú b ‚åù ‚åú c ‚åù comp


#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ : (w : ùïé¬∑) (a b : CTerm)
                             ‚Üí #APPLY2 (#LAMBDA (#[0]LAMBDA #[1]FALSE)) a b #‚áõ #FALSE at w
#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ w a b w1 e1 = lift (2 , refl)


equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                                      ‚Üí equalInType n w #NAT! a b
                                      ‚Üí equalTypes n w (#ASSERT‚Çò a) (#ASSERT‚Çò b)
equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò {n} {w} {a} {b} eqb =
  ‚â°CTerm‚ÜíeqTypes
    (sym (#ASSERT‚Çò‚â° a))
    (sym (#ASSERT‚Çò‚â° b))
    (eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT!‚Üí n w a b eqb)))
  where
  aw1 : (k : ‚Ñï)
      ‚Üí equalTypes n w (#NATRECr k #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)))
                       (#NATRECr k #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)))
  aw1 0 = eqTypesTRUE
  aw1 (suc k) =
    equalTypes-#‚áõ-left-right-rev
      (#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ w (#NUM k) (#NATREC (#NUM k) #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))))
      (#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ w (#NUM k) (#NATREC (#NUM k) #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))))
      eqTypesFALSE

  aw : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' a b
                     ‚Üí equalTypes n w' (#NATREC a #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)))
                                       (#NATREC b #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))))
  aw w1 e1 (k , c‚ÇÅ , c‚ÇÇ) =
    equalTypes-#‚áõ-left-right-rev
      (#NUM‚ÜíNATREC‚áõ {a} #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)) (#‚áõ!‚Üí#‚áõ {w1} {a} {#NUM k} c‚ÇÅ))
      (#NUM‚ÜíNATREC‚áõ {b} #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)) (#‚áõ!‚Üí#‚áõ {w1} {b} {#NUM k} c‚ÇÇ))
      (eqTypes-mon (uni n) (aw1 k) w1 e1)


‚ÜíequalTypes-#MP-right‚Çò : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                       ‚Üí equalInType n w #NAT!‚ÜíNAT! a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w (#MP-right‚Çò a‚ÇÅ) (#MP-right‚Çò a‚ÇÇ)
‚ÜíequalTypes-#MP-right‚Çò {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesSUM!‚Üê (Œª w' _ ‚Üí isTypeNAT!) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b ‚Üí equalInType n w' #NAT! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíNAT!‚â° eqt)

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚Çò (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
    aw1 w' e a b ea rewrite sub0-ASSERT‚Çò-APPLY a a‚ÇÅ | sub0-ASSERT‚Çò-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #NAT! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#ASSERT‚Çò (#APPLY a‚ÇÅ a)) (#ASSERT‚Çò (#APPLY a‚ÇÇ b))
        aw2 = equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò eqb


‚ÜíequalTypes-#MP-left‚Çò : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                      ‚Üí equalInType n w #NAT!‚ÜíNAT! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w (#MP-left‚Çò a‚ÇÅ) (#MP-left‚Çò a‚ÇÇ)
‚ÜíequalTypes-#MP-left‚Çò {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesNEG‚Üê (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP-right‚Çò eqt))


isType-#NAT!‚ÜíNAT! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT!‚ÜíNAT!
isType-#NAT!‚ÜíNAT! w n rewrite #NAT!‚ÜíNAT!‚â° = eqTypesFUN‚Üê isTypeNAT! isTypeNAT!


isTypeMP‚Çò : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚Çò
isTypeMP‚Çò w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT!‚ÜíNAT!} {#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò}
    {#NAT!‚ÜíNAT!} {#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò}
    (Œª w' e ‚Üí isType-#NAT!‚ÜíNAT! w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíNAT! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚Çò a‚ÇÅ | sub0-fun-mp‚Çò a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left‚Çò eqb) (‚ÜíequalTypes-#MP-right‚Çò eqb)


-- MOVE
#TNOENC‚â° : (T : CTerm) ‚Üí #TNOENC T ‚â° #ISECT T #NOENC
#TNOENC‚â° T = CTerm‚â° refl


-- MOVE to props2
eqTypesTNOENC‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
               ‚Üí equalTypes i w A B
               ‚Üí equalTypes i w (#TNOENC A) (#TNOENC B)
eqTypesTNOENC‚Üê {w} {i} {A} {B} eqtA rewrite #TNOENC‚â° A | #TNOENC‚â° B
  = eqTypesISECT‚Üê eqtA eqTypesNOENC‚Üê


-- MOVE to props2
equalInTypeTNOENC‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {A a b : CTerm}
                   ‚Üí equalInType i w (#TNOENC A) a b
                   ‚Üí equalInType i w A a b
equalInTypeTNOENC‚Üí {w} {i} {A} {B} eqtA rewrite #TNOENC‚â° A
  = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 (p , q) ‚Üí p) (equalInType-ISECT‚Üí eqtA))


-- MOVE to props2
equalInTypeTNOENC‚Üí‚Çó : {w : ùïé¬∑} {i : ‚Ñï} {A a b : CTerm}
                    ‚Üí equalInType i w (#TNOENC A) a b
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!‚Çë a w') --#¬¨Enc a
equalInTypeTNOENC‚Üí‚Çó {w} {i} {A} {a} {b} eqi
-- rewrite #TNOENC‚â° A
  = Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw h)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí ISECTeq (equalInType i w' A) (equalInType i w' #NOENC) a b
                       ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí #‚áõ!‚Çë a w'') e'))
    aw w1 e1 (eqa , eqb) = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h z ‚Üí fst h) (equalInType-NOENC‚Üí eqb)

    h : ‚ñ°¬∑ w (Œª w' _ ‚Üí ISECTeq (equalInType i w' A) (equalInType i w' #NOENC) a b)
    h = equalInType-ISECT‚Üí (‚â°CTerm‚ÜíequalInType (#TNOENC‚â° A) eqi)
{--lower (Mod.‚ñ°-const M
            (Mod.‚àÄùïé-‚ñ°Func M
              (Œª w1 e1 (p , q) ‚Üí Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 (lift (u , v)) ‚Üí lift u) (equalInType-NOENC‚Üí q)))
              (equalInType-ISECT‚Üí {_} {_} {A} {#NOENC} eqtA)))
--}


-- MOVE to props2
equalInTypeTNOENC‚Üí·µ£ : {w : ùïé¬∑} {i : ‚Ñï} {A a b : CTerm}
                    ‚Üí equalInType i w (#TNOENC A) a b
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!‚Çë b w') --#¬¨Enc b
equalInTypeTNOENC‚Üí·µ£ {w} {i} {A} {a} {b} eqi
-- rewrite #TNOENC‚â° A
  = Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw h)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí ISECTeq (equalInType i w' A) (equalInType i w' #NOENC) a b
                       ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí #‚áõ!‚Çë b w'') e'))
    aw w1 e1 (eqa , eqb) = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h z ‚Üí snd h) (equalInType-NOENC‚Üí eqb)

    h : ‚ñ°¬∑ w (Œª w' _ ‚Üí ISECTeq (equalInType i w' A) (equalInType i w' #NOENC) a b)
    h = equalInType-ISECT‚Üí (‚â°CTerm‚ÜíequalInType (#TNOENC‚â° A) eqi)
 {--lower (Mod.‚ñ°-const M
            (Mod.‚àÄùïé-‚ñ°Func M
              (Œª w1 e1 (p , q) ‚Üí Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 (lift (u , v)) ‚Üí lift v) (equalInType-NOENC‚Üí q)))
              (equalInType-ISECT‚Üí {_} {_} {A} {#NOENC} eqtA)))
--}


isTypeMP‚Çá : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚Çá
isTypeMP‚Çá w n =
  eqTypesPI‚Üê
    {w} {n}
    {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí eqTypesTNOENC‚Üê (isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n))
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb))


isTypeMP‚Çô : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP‚Çô
isTypeMP‚Çô w n =
  eqTypesPI‚Üê
    {w} {n}
    {#NAT‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô}
    {#NAT‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô}
    (Œª w' e ‚Üí isType-#NAT‚ÜíBOOL‚ÇÄ w' n)
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô))
                                        (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left‚Çô #[0]MP-right‚Çô)))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚Çô a‚ÇÅ | sub0-fun-mp‚Çô a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP‚Çô-left eqb) (‚ÜíequalTypes-#MP‚Çô-right eqb)


isTypeMP : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #MP
isTypeMP w n rewrite #MP‚â°#PI = isTypeMP-PI w n


isTypeNegMP : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#NEG #MP)
isTypeNegMP w n = eqTypesNEG‚Üê (isTypeMP w n)


‚Üí‚ààType-NEG : (i : ‚Ñï) (w : ùïé¬∑) (A B : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí equalInType i w (#NEG A) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#NEG B) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-NEG i w A B t‚ÇÅ t‚ÇÇ ist h a‚àà =
  equalInType-NEG ist aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' B a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q = equalInType-NEG‚Üí a‚àà w1 e1 a‚ÇÅ a‚ÇÇ (h w1 e1 a‚ÇÅ a‚ÇÇ q)


‚Üí‚ààType-PI : (i : ‚Ñï) (w : ùïé¬∑) (A B : CTerm) (C D : CTerm0) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ D) (sub0 a‚ÇÇ D))
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType i w' B a ‚Üí equalInType i w' (sub0 a C) b‚ÇÅ b‚ÇÇ ‚Üí equalInType i w' (sub0 a D) b‚ÇÅ b‚ÇÇ)
               ‚Üí equalInType i w (#PI A C) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#PI B D) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-PI i w A B C D t‚ÇÅ t‚ÇÇ istb istd ha hb a‚àà =
  equalInType-PI (Œª w' e' ‚Üí eqTypes-mon (uni i) istb w' e') istd aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (sub0 a‚ÇÅ D) (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q =
      hb w1 e1 a‚ÇÅ (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ) (equalInType-refl q)
         (snd (snd (equalInType-PI‚Üí a‚àà)) w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 a‚ÇÅ a‚ÇÇ q))


‚Üí‚ààType-FUN : (i : ‚Ñï) (w : ùïé¬∑) (A B C D : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm)
               ‚Üí isType i w B
               ‚Üí isType i w D
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType i w' B u‚ÇÅ u‚ÇÇ ‚Üí equalInType i w' A u‚ÇÅ u‚ÇÇ)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' C b‚ÇÅ b‚ÇÇ ‚Üí equalInType i w' D b‚ÇÅ b‚ÇÇ)
               ‚Üí equalInType i w (#FUN A C) t‚ÇÅ t‚ÇÇ
               ‚Üí equalInType i w (#FUN B D) t‚ÇÅ t‚ÇÇ
‚Üí‚ààType-FUN i w A B C D t‚ÇÅ t‚ÇÇ istb istd ha hb a‚àà =
  equalInType-FUN istb istd aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' B a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' D (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ q =
      hb w1 e1 (#APPLY t‚ÇÅ a‚ÇÅ) (#APPLY t‚ÇÇ a‚ÇÇ)
         (equalInType-FUN‚Üí a‚àà w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 a‚ÇÅ a‚ÇÇ q))


‚àà#MP-right2‚Üí‚ààMP-right : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-right2 f) a‚ÇÅ a‚ÇÇ
                          ‚Üí equalInType i w (#MP-right f) b‚ÇÅ b‚ÇÇ
‚àà#MP-right2‚Üí‚ààMP-right i w f a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType i w' (#MP-right2 f) t t))
    aw w1 e1 = a‚ÇÅ , equalInType-refl (equalInType-mon a‚àà w1 e1)


#[0]MP-left2-qt‚ÇÉ : CTerm0
#[0]MP-left2-qt‚ÇÉ = #[0]NEG (#[0]NEG #[0]MP-right2-qt‚ÇÉ)


-- ¬¨¬¨Œ£(n:‚Ñï).f(n)=true
#MP-left2-qt‚ÇÉ : CTerm ‚Üí CTerm
#MP-left2-qt‚ÇÉ f = #NEG (#NEG (#MP-right2-qt‚ÇÉ f))


sub0-fun-mp-qt‚ÇÉ : (a : CTerm) ‚Üí sub0 a (#[0]FUN #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ)
                              ‚â° #FUN (#MP-left2-qt‚ÇÉ a) (#MP-right2-qt‚ÇÉ a)
sub0-fun-mp-qt‚ÇÉ a =
  ‚â°sub0-#[0]FUN
    a #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ (#MP-left2-qt‚ÇÉ a) (#MP-right2-qt‚ÇÉ a)
    (CTerm‚â° (‚â°NEG (‚â°NEG (‚â°SUM! refl (‚â°EQ (‚â°APPLY e refl) refl refl)))))
    (CTerm‚â° (‚â°SUM! refl (‚â°ASSERT‚ÇÑ (‚Üí‚â°APPLY e refl))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl


equalInType-#‚áõ!-type-rev : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                         ‚Üí T #‚áõ! U at w
                         ‚Üí equalInType i w U a b
                         ‚Üí equalInType i w T a b
equalInType-#‚áõ!-type-rev {i} {w} {T} {U} {a} {b} comp a‚àà =
  TSext-equalTypes-equalInType i w U T a b
    (equalTypes-#‚áõ-left-right-rev {i} {w} {U} {U} {T} {U} (#‚áõ-refl w U) (#‚áõ!‚Üí#‚áõ {w} {T} {U} comp) (fst a‚àà))
    a‚àà


equalInType-#‚áõ!-type : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                     ‚Üí T #‚áõ! U at w
                     ‚Üí equalInType i w T a b
                     ‚Üí equalInType i w U a b
equalInType-#‚áõ!-type {i} {w} {T} {U} {a} {b} comp a‚àà =
  TSext-equalTypes-equalInType i w T U a b
    (equalTypes-#‚áõ-left-right {i} {w} {T} {T} {U} {T} (#‚áõ!-refl {w} {T}) comp (fst a‚àà))
    a‚àà


#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ! : (w : ùïé¬∑) (a b : CTerm)
                              ‚Üí #APPLY2 (#LAMBDA (#[0]LAMBDA #[1]FALSE)) a b #‚áõ! #FALSE at w
#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ! w a b w1 e1 = lift (2 , refl)


inhType-ASSERT‚Çò‚Üí‚ààNAT! : (i : ‚Ñï) (w : ùïé¬∑) (t : CTerm)
                      ‚Üí ‚ààType i w #NAT! t
                      ‚Üí inhType i w (#ASSERT‚Çò t)
                      ‚Üí equalInType i w #NAT! t #N0
inhType-ASSERT‚Çò‚Üí‚ààNAT! i w t t‚àà (q , q‚àà) =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT!‚Üí i w t t t‚àà))
  where
  aw1 : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' t t ‚Üí equalInType i w' #NAT! t #N0)
  aw1 w1 e1 (n , c‚ÇÅ , c‚ÇÇ) =
    equalInType-#‚áõ‚Çö-left-right-rev {i} {w1} {#NAT!} {t} {#NUM n} {#N0} {#N0}
      c‚ÇÅ (#‚áõ!-refl {w1} {#N0}) (concl n q‚àà2)
    where
    q‚àà1 : ‚ààType i w1 (#NATREC t #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))) q
    q‚àà1 = ‚â°CTerm‚ÜíequalInType (#ASSERT‚Çò‚â° t) (equalInType-mon q‚àà w1 e1)

    q‚àà2 : ‚ààType i w1 (#NATRECr n #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))) q
    q‚àà2 = equalInType-#‚áõ!-type {i} {w1}
            {#NATREC t #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))}
            {#NATRECr n #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))}
            {q} {q}
            (#NUM‚ÜíNATREC‚áõ! {t} {n} #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)) c‚ÇÅ)
            q‚àà1

    concl : (n : ‚Ñï)
          ‚Üí ‚ààType i w1 (#NATRECr n #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))) q
          ‚Üí equalInType i w1 #NAT! (#NUM n) #N0
    concl 0 h = NUM-equalInType-NAT! i w1 0
    concl (suc n) h =
      ‚ä•-elim (¬¨equalInType-FALSE {w1} {i} {q} {q}
               (equalInType-#‚áõ!-type {i} {w1}
                  {#NATRECr (suc n) #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))} {#FALSE}
                  {q} {q}
                  (#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ! w1 (#NUM n) (#NATREC (#NUM n) #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))))
                  h))

\end{code}[hide]
