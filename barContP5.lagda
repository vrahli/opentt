\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --experimental-lossy-unification #-}
--{-# OPTIONS --auto-inline #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
--open import choiceBar
open import encode


module barContP5 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                 (X : ChoiceExt W C)
                 (N : NewChoice {L} W C K G)
                 (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                 (EM : ExcludedMiddle (lsuc(L)))
                 (EC : Encode)
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
--open import terms4(W)(C)(K)(G)(X)(N)(EC)
--open import terms5(W)(C)(K)(G)(X)(N)(EC)
open import terms6(W)(C)(K)(G)(X)(N)(EC)
--open import terms7(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

--open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import list(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import continuity-conds(W)(C)(K)(G)(X)(N)(EC)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import barContP(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)
open import barContP2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)
open import barContP3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)
open import barContP4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)


updSeqStep-upd : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                 ‚Üí compatible¬∑ r w Res‚ä§
                 ‚Üí updSeq r s n a b
                 ‚Üí updSeqStepInd r s n (updBodyL r a (MSEQ s)) w
                 ‚Üí updSeqStep w w r s n (updBodyL r b (s2l s n)) (updBodyL r a (MSEQ s))
updSeqStep-upd cn gc w r s n a b compat u (k , v , w' , comp , ish , isv , ind)
  with upd-decomp {k} {r} {MSEQ s} {a} {v} {w} {w'} refl (cn r w compat) comp isv
... | (k1 , k2 , w1' , m , m' , ltk1 , ltk2 , gt0 , comp1 , comp2) =
  k2 + 2 , fst comp3c , NUM (s m) , NUM (s m) , w2 , comp2b , snd comp3c , updSeq-NUM (s m)
  where
    comp1b : steps k1 (a , w) ‚â° (NUM m , w1')
    comp1b = ssteps‚Üísteps {k1} {a} {NUM m} {w} {w1'} comp1

    e' : w ‚äë¬∑ w1'
    e' = ‚áìfrom-to‚Üí‚äë {w} {w1'} {a} {NUM m} (k1 , comp1b)

    w2 : ùïé¬∑
    w2 = chooseT0if r w1' m' m

    ish1 : isHighest‚Ñï {k1} {w} {w1'} {a} {NUM m} n r comp1b
    ish1 = isHighest‚Ñï-LET‚Üí {n} {k1} {k} {r} {a} {SEQ (updGt r (VAR 0)) (APPLY (MSEQ s) (VAR 0))} {NUM m} {v} {w} {w1'} {w'} comp1b comp isv ish

    h1 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w) ‚â° (v' , w1') √ó updSeq r s n (NUM m) v'))
    h1 = ind k1 (<‚áí‚â§ ltk1) compat u comp1b ish1 tt

    h2 : Œ£ ‚Ñï (Œª k' ‚Üí steps k' (b , w) ‚â° (NUM m , w1'))
    h2 = Œ£steps-updSeq-NUM‚Üí w w1' r s n m b h1

    comp2b : steps (k2 + 2) (updBodyL r a (MSEQ s) , w) ‚â° (NUM (s m) , w2)
    comp2b = steps-trans+
               {k2} {2}
               {updBodyL r a (MSEQ s)}
               {APPLY (MSEQ s) (NUM m)} {NUM (s m)} {w} {w2} {w2}
               comp2 refl

    eqv : v ‚â° NUM (s m)
    eqv = steps‚Üí‚â° w w' w2 (updBodyL r a (MSEQ s)) v (NUM (s m)) k (k2 + 2) isv tt comp comp2b

    eqw' : w' ‚â° w2
    eqw' = steps‚Üí‚â°ùïé w w' w2 (updBodyL r a (MSEQ s)) v (NUM (s m)) k (k2 + 2) isv tt comp comp2b

-- From comp and comp2b we can prove that v ‚â° NUM (s m) and w' ‚â° w2
-- From w' ‚â° w2 & ish, we should be able to prove that m < n

    ltn : m < n
    ltn = isHighest‚Ñï‚Üí<‚â°upd gc {k} {w} {w'} {w1'}
            {updBodyL r a (MSEQ s)} {v} {m}
            {m'} n r comp ish gt0 (‚äë-compatible¬∑ e' compat) eqw'

    comp3 : updBodyL r b (s2l s n) ‚áì APPLY (s2l s n) (NUM m) from w to uùïé r m w1'
    comp3 = updBodyL‚áìAPPLY cn r b (s2l s n) w w1' m (s2l# s n) compat h2

    comp3b : updBodyL r b (s2l s n) ‚áì NUM (s m) from w to uùïé r m w1'
    comp3b = ‚áì-trans‚ÇÇ {w} {uùïé r m w1'} {uùïé r m w1'} {updBodyL r b (s2l s n)}
               {APPLY (s2l s n) (NUM m)} {NUM (s m)} comp3 (s2l‚áì (uùïé r m w1') s n m ltn)

    comp3c : updBodyL r b (s2l s n) ‚áì NUM (s m) from w to w2
    comp3c = ‚â°ùïé‚Üí‚áìfrom-to w (uùïé r m w1') w2 (updBodyL r b (s2l s n)) (NUM (s m)) (sym (chooseT0if‚â°uùïé w1' r m m' gt0)) comp3b


updSeqStep-sub-sub-upd : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí compatible¬∑ r w Res‚ä§
                         ‚Üí updSeq r s n a b
                         ‚Üí updSeqStepInd r s n (sub a (updBody r (MSEQ s))) w
                         ‚Üí updSeqStep w w r s n (sub b (updBody r (s2l s n))) (sub a (updBody r (MSEQ s)))
updSeqStep-sub-sub-upd cn gc w r s n a b compat u ind
  rewrite sub-upd r (MSEQ s) a refl | sub-upd r (s2l s n) b (s2l# s n)
  = updSeqStep-upd cn gc w r s n a b compat u ind


updSeqStep-sub-upd : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                     ‚Üí compatible¬∑ r w Res‚ä§
                     ‚Üí updSeq r s n a b
                     ‚Üí updSeqStepInd r s n (sub a (updBody r (MSEQ s))) w
                     ‚Üí updSeqStep w w r s n (APPLY (upd r (s2l s n)) b) (sub a (updBody r (MSEQ s)))
updSeqStep-sub-upd cn gc w r s n a b compat u ind =
  ‚áì‚Çó‚ÜíupdSeqStep
    w w r s n
    (APPLY (upd r (s2l s n)) b)
    (sub b (updBody r (s2l s n)))
    (sub a (updBody r (MSEQ s)))
    (1 , refl)
    (updSeqStep-sub-sub-upd cn gc w r s n a b compat u ind)


updSeqStep-updr : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                 ‚Üí compatible¬∑ r w Res‚ä§
                 ‚Üí updSeq r s n a b
                 ‚Üí updSeqStepInd r s n (updBodyL r a (s2l s n)) w
                 ‚Üí updSeqStep w w r s n (updBodyL r b (MSEQ s)) (updBodyL r a (s2l s n))
updSeqStep-updr cn gc w r s n a b compat u (k , v , w' , comp , ish , isv , ind)
  with upd-decomp {k} {r} {s2l s n} {a} {v} {w} {w'} (s2l# s n) (cn r w compat) comp isv
... | (k1 , k2 , w1' , m , m' , ltk1 , ltk2 , gt0 , comp1 , comp2) =
  k2 + k3 , fst comp3c , NUM (s m) , NUM (s m) , w2 , comp2b , snd comp3c , updSeq-NUM (s m)
  where
    comp1b : steps k1 (a , w) ‚â° (NUM m , w1')
    comp1b = ssteps‚Üísteps {k1} {a} {NUM m} {w} {w1'} comp1

    e' : w ‚äë¬∑ w1'
    e' = ‚áìfrom-to‚Üí‚äë {w} {w1'} {a} {NUM m} (k1 , comp1b)

    w2 : ùïé¬∑
    w2 = chooseT0if r w1' m' m

    ltn : m < n
    ltn = isHighest‚Ñï-updBody‚Üí< gc {n} {r} {s2l s n} {k1} {k} {a} {v} {m} {w} {w1'} {w'} (s2l# s n) compat comp1b comp isv ish

    compa : APPLY (s2l s n) (NUM m) ‚áì NUM (s m) from w2 to w2
    compa = s2l‚áì w2 s n m ltn

    k3 : ‚Ñï
    k3 = fst compa

    compa2 : steps k3 (APPLY (s2l s n) (NUM m) , w2) ‚â° (NUM (s m) , w2)
    compa2 = snd compa

    ish1 : isHighest‚Ñï {k1} {w} {w1'} {a} {NUM m} n r comp1b
    ish1 = isHighest‚Ñï-LET‚Üí {n} {k1} {k} {r} {a} {SEQ (updGt r (VAR 0)) (APPLY (s2l s n) (VAR 0))} {NUM m} {v} {w} {w1'} {w'} comp1b comp isv ish

    h1 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w) ‚â° (v' , w1') √ó updSeq r s n (NUM m) v'))
    h1 = ind k1 (<‚áí‚â§ ltk1) compat u comp1b ish1 tt

    h2 : Œ£ ‚Ñï (Œª k' ‚Üí steps k' (b , w) ‚â° (NUM m , w1'))
    h2 = Œ£steps-updSeq-NUM‚Üí w w1' r s n m b h1

    comp2b : steps (k2 + k3) (updBodyL r a (s2l s n) , w) ‚â° (NUM (s m) , w2)
    comp2b = steps-trans+
               {k2} {k3}
               {updBodyL r a (s2l s n)}
               {APPLY (s2l s n) (NUM m)} {NUM (s m)} {w} {w2} {w2}
               comp2 compa2

    eqv : v ‚â° NUM (s m)
    eqv = steps‚Üí‚â° w w' w2 (updBodyL r a (s2l s n)) v (NUM (s m)) k (k2 + k3) isv tt comp comp2b

    eqw' : w' ‚â° w2
    eqw' = steps‚Üí‚â°ùïé w w' w2 (updBodyL r a (s2l s n)) v (NUM (s m)) k (k2 + k3) isv tt comp comp2b

    comp3 : updBodyL r b (MSEQ s) ‚áì APPLY (MSEQ s) (NUM m) from w to uùïé r m w1'
    comp3 = updBodyL‚áìAPPLY cn r b (MSEQ s) w w1' m refl compat h2

    comp3b : updBodyL r b (MSEQ s) ‚áì NUM (s m) from w to uùïé r m w1'
    comp3b = ‚áì-trans‚ÇÇ {w} {uùïé r m w1'} {uùïé r m w1'} {updBodyL r b (MSEQ s)}
               {APPLY (MSEQ s) (NUM m)} {NUM (s m)} comp3 (2 , refl)

    comp3c : updBodyL r b (MSEQ s) ‚áì NUM (s m) from w to w2
    comp3c = ‚â°ùïé‚Üí‚áìfrom-to w (uùïé r m w1') w2 (updBodyL r b (MSEQ s)) (NUM (s m)) (sym (chooseT0if‚â°uùïé w1' r m m' gt0)) comp3b


updSeqStep-sub-sub-updr : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí compatible¬∑ r w Res‚ä§
                         ‚Üí updSeq r s n a b
                         ‚Üí updSeqStepInd r s n (sub a (updBody r (s2l s n))) w
                         ‚Üí updSeqStep w w r s n (sub b (updBody r (MSEQ s))) (sub a (updBody r (s2l s n)))
updSeqStep-sub-sub-updr cn gc w r s n a b compat u ind
  rewrite sub-upd r (MSEQ s) b refl | sub-upd r (s2l s n) a (s2l# s n)
  = updSeqStep-updr cn gc w r s n a b compat u ind


updSeqStep-sub-updr : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                     ‚Üí compatible¬∑ r w Res‚ä§
                     ‚Üí updSeq r s n a b
                     ‚Üí updSeqStepInd r s n (sub a (updBody r (s2l s n))) w
                     ‚Üí updSeqStep w w r s n (APPLY (upd r (MSEQ s)) b) (sub a (updBody r (s2l s n)))
updSeqStep-sub-updr cn gc w r s n a b compat u ind =
  ‚áì‚Çó‚ÜíupdSeqStep
    w w r s n
    (APPLY (upd r (MSEQ s)) b)
    (sub b (updBody r (MSEQ s)))
    (sub a (updBody r (s2l s n)))
    (1 , refl)
    (updSeqStep-sub-sub-updr cn gc w r s n a b compat u ind)


abstract

  updSeq-step : (cn : c‚Ñï) (gc : get-choose-‚Ñï) (w1 w2 : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (t u x : Term)
                ‚Üí updSeq r s n t u
                ‚Üí getT‚â§‚Ñï w2 n r
                ‚Üí compatible¬∑ r w1 Res‚ä§
                ‚Üí step t w1 ‚â° just (x , w2)
                ‚Üí updSeqStepInd r s n x w2
                ‚Üí updSeqStep w1 w2 r s n u x
  updSeq-step cn gc w1 w2 r s n .NAT .NAT u updSeq-NAT gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAT , NAT , w1 , refl , refl , updSeq-NAT
  updSeq-step cn gc w1 w2 r s n .QNAT .QNAT u updSeq-QNAT gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QNAT , QNAT , w1 , refl , refl , updSeq-QNAT
  updSeq-step cn gc w1 w2 r s n .TNAT .TNAT u updSeq-TNAT gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TNAT , TNAT , w1 , refl , refl , updSeq-TNAT
  updSeq-step cn gc w1 w2 r s n .(LT a‚ÇÅ b‚ÇÅ) .(LT a‚ÇÇ b‚ÇÇ) u (updSeq-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(QLT a‚ÇÅ b‚ÇÅ) .(QLT a‚ÇÇ b‚ÇÇ) u (updSeq-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(NUM x) .(NUM x) u (updSeq-NUM x) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NUM x , NUM x , w1 , refl , refl , updSeq-NUM x
  updSeq-step cn gc w1 w2 r s n .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (k1 , p) rewrite p | updSeq-NUM‚Üí r s n k1 a‚ÇÇ upd‚ÇÅ with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (k2 , q) rewrite q | updSeq-NUM‚Üí r s n k2 b‚ÇÇ upd‚ÇÇ with k1 <? k2
  ... |       yes z rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , refl , concl , upd‚ÇÉ
    where
      concl : steps 1 (IFLT (NUM k1) (NUM k2) c‚ÇÇ d‚ÇÇ , w1) ‚â° (c‚ÇÇ , w1)
      concl with k1 <? k2
      ... | yes z' = refl
      ... | no z' = ‚ä•-elim (z' z)
  ... |       no z rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , refl , concl , upd‚ÇÑ
    where
      concl : steps 1 (IFLT (NUM k1) (NUM k2) c‚ÇÇ d‚ÇÇ , w1) ‚â° (d‚ÇÇ , w1)
      concl with k1 <? k2
      ... | yes z' = ‚ä•-elim (z z')
      ... | no z' = refl
  updSeq-step cn gc w1 w2 r s n .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind | inj‚ÇÅ (k1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-IFLT‚ÇÇ w1 w1' r s n k1 b‚ÇÅ' b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÉ upd‚ÇÑ ind
    where
      ind : updSeqStep w1 w1' r s n b‚ÇÇ b‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n b‚ÇÅ b‚ÇÇ b‚ÇÅ' upd‚ÇÇ gtn compat z (updSeqStepInd-IFLT‚ÇÇ‚Üí w1' r s n k1 b‚ÇÅ' c‚ÇÅ d‚ÇÅ sind)
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-IFLT‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat z (updSeqStepInd-IFLT‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ c‚ÇÅ d‚ÇÅ sind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (k1 , p) rewrite p | updSeq-NUM‚Üí r s n k1 a‚ÇÇ upd‚ÇÅ with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (k2 , q) rewrite q | updSeq-NUM‚Üí r s n k2 b‚ÇÇ upd‚ÇÇ with k1 ‚âü k2
  ... |       yes z rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , refl , concl , upd‚ÇÉ
    where
      concl : steps 1 (IFEQ (NUM k1) (NUM k2) c‚ÇÇ d‚ÇÇ , w1) ‚â° (c‚ÇÇ , w1)
      concl with k1 ‚âü k2
      ... | yes z' = refl
      ... | no z' = ‚ä•-elim (z' z)
  ... |       no z rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , refl , concl , upd‚ÇÑ
    where
      concl : steps 1 (IFEQ (NUM k1) (NUM k2) c‚ÇÇ d‚ÇÇ , w1) ‚â° (d‚ÇÇ , w1)
      concl with k1 ‚âü k2
      ... | yes z' = ‚ä•-elim (z z')
      ... | no z' = refl
  updSeq-step cn gc w1 w2 r s n .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind | inj‚ÇÅ (k1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-IFEQ‚ÇÇ w1 w1' r s n k1 b‚ÇÅ' b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÉ upd‚ÇÑ ind
    where
      ind : updSeqStep w1 w1' r s n b‚ÇÇ b‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n b‚ÇÅ b‚ÇÇ b‚ÇÅ' upd‚ÇÇ gtn compat z (updSeqStepInd-IFEQ‚ÇÇ‚Üí w1' r s n k1 b‚ÇÅ' c‚ÇÅ d‚ÇÅ sind)
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-IFEQ‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat z (updSeqStepInd-IFEQ‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ c‚ÇÅ d‚ÇÅ sind)
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(SUC a‚ÇÅ) .(SUC a‚ÇÇ) u (updSeq-SUC a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (k , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updSeq-NUM‚Üí r s n k a‚ÇÇ upd‚ÇÅ =
    0 , 1 , NUM (suc k) , NUM (suc k) , w1 , refl , refl , updSeq-NUM (suc k)
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-SUC‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ ind
   where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat z (updSeqStepInd-SUC‚ÇÅ‚Üí w1' r s n a‚ÇÅ' sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(PI a‚ÇÅ b‚ÇÅ) .(PI a‚ÇÇ b‚ÇÇ) u (updSeq-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(LAMBDA a‚ÇÅ) .(LAMBDA a‚ÇÇ) u (updSeq-LAMBDA a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LAMBDA a‚ÇÅ , LAMBDA a‚ÇÇ , w1 , refl , refl , updSeq-LAMBDA a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u (updSeq-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = concl d
    where
      d : Œ£ Term (Œª t' ‚Üí a‚ÇÇ ‚â° LAMBDA t' √ó updSeq r s n t t')
          ‚äé (t ‚â° updBody r (MSEQ s) √ó a‚ÇÇ ‚â° upd r (s2l s n))
          ‚äé (t ‚â° updBody r (s2l s n) √ó a‚ÇÇ ‚â° upd r (MSEQ s))
      d = updSeq-LAMBDA‚Üí {r} {s} {n} {t} {a‚ÇÇ} upd‚ÇÅ

      concl : Œ£ Term (Œª t' ‚Üí a‚ÇÇ ‚â° LAMBDA t' √ó updSeq r s n t t')
              ‚äé (t ‚â° updBody r (MSEQ s) √ó a‚ÇÇ ‚â° upd r (s2l s n))
              ‚äé (t ‚â° updBody r (s2l s n) √ó a‚ÇÇ ‚â° upd r (MSEQ s))
              ‚Üí updSeqStep w1 w1 r s n (APPLY a‚ÇÇ b‚ÇÇ) (sub b‚ÇÅ t)
      concl (inj‚ÇÅ (t' , e , u')) rewrite e = 0 , 1 , sub b‚ÇÅ t , sub b‚ÇÇ t' , w1 , refl , refl , updSeq-sub u' upd‚ÇÇ
      concl (inj‚ÇÇ (inj‚ÇÅ (e , f))) rewrite e | f = c0
        where
          c0 : updSeqStep w1 w1 r s n (APPLY (upd r (s2l s n)) b‚ÇÇ) (sub b‚ÇÅ (updBody r (MSEQ s)))
          c0 = updSeqStep-sub-upd cn gc w1 r s n b‚ÇÅ b‚ÇÇ compat upd‚ÇÇ (‚â°sub-updSeqStepInd r s n b‚ÇÅ t (updBody r (MSEQ s)) w1 e sind)
      concl (inj‚ÇÇ (inj‚ÇÇ (e , f))) rewrite e | f = c0
        where
          c0 : updSeqStep w1 w1 r s n (APPLY (upd r (MSEQ s)) b‚ÇÇ) (sub b‚ÇÅ (updBody r (s2l s n)))
          c0 = updSeqStep-sub-updr cn gc w1 r s n b‚ÇÅ b‚ÇÇ compat upd‚ÇÇ (‚â°sub-updSeqStepInd r s n b‚ÇÅ t (updBody r (s2l s n)) w1 e sind)
  ... | inj‚ÇÇ x with is-CS a‚ÇÅ
  ... |    inj‚ÇÅ (nm , p) rewrite p = ‚ä•-elim (updSeq-CS‚Üí r s n nm a‚ÇÇ upd‚ÇÅ)
  updSeq-step cn gc w1 w2 r s n .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u (updSeq-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind | inj‚ÇÇ x {-- ¬¨LAM --} | inj‚ÇÇ name {-- ¬¨SEQ --} with is-MSEQ a‚ÇÅ
  ... | inj‚ÇÅ (sq , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updSeq-MSEQ‚Üí r s n sq a‚ÇÇ upd‚ÇÅ =
    0 , 1 , MAPP sq b‚ÇÅ , MAPP sq b‚ÇÇ , w1 , refl , refl , updSeq-MAPP sq b‚ÇÅ b‚ÇÇ upd‚ÇÇ
  ... | inj‚ÇÇ z with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-APPLY‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-APPLY‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(FIX a‚ÇÅ) .(FIX a‚ÇÇ) u (updSeq-FIX a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = concl d
    where
      d : Œ£ Term (Œª t' ‚Üí a‚ÇÇ ‚â° LAMBDA t' √ó updSeq r s n t t')
          ‚äé (t ‚â° updBody r (MSEQ s) √ó a‚ÇÇ ‚â° upd r (s2l s n))
          ‚äé (t ‚â° updBody r (s2l s n) √ó a‚ÇÇ ‚â° upd r (MSEQ s))
      d = updSeq-LAMBDA‚Üí {r} {s} {n} {t} {a‚ÇÇ} upd‚ÇÅ

      concl : Œ£ Term (Œª t' ‚Üí a‚ÇÇ ‚â° LAMBDA t' √ó updSeq r s n t t')
              ‚äé (t ‚â° updBody r (MSEQ s) √ó a‚ÇÇ ‚â° upd r (s2l s n))
              ‚äé (t ‚â° updBody r (s2l s n) √ó a‚ÇÇ ‚â° upd r (MSEQ s))
              ‚Üí updSeqStep w1 w1 r s n (FIX a‚ÇÇ) (sub (FIX (LAMBDA t)) t)
      concl (inj‚ÇÅ (t' , e , u')) rewrite e = 0 , 1 , sub (FIX (LAMBDA t)) t , sub (FIX (LAMBDA t')) t' , w1 , refl , refl , updSeq-sub u' (updSeq-FIX (LAMBDA t) (LAMBDA t') (updSeq-LAMBDA t t' u'))
      concl (inj‚ÇÇ (inj‚ÇÅ (e , f))) rewrite e | f = c0
        where
          c0 : updSeqStep w1 w1 r s n (FIX (upd r (s2l s n))) (sub (FIX (LAMBDA (updBody r (MSEQ s)))) (updBody r (MSEQ s)))
          c0 = ‚áì‚Çó‚ÜíupdSeqStep
                 w1 w1 r s n
                 (FIX (upd r (s2l s n)))
                 (sub (FIX (upd r (s2l s n))) (updBody r (s2l s n)))
                 (sub (FIX (upd r (MSEQ s))) (updBody r (MSEQ s)))
                 (1 , refl)
                 (updSeqStep-sub-sub-upd
                   cn gc w1 r s n (FIX (upd r (MSEQ s))) (FIX (upd r (s2l s n))) compat
                   (updSeq-FIX (upd r (MSEQ s)) (upd r (s2l s n)) updSeq-upd)
                   (‚â°sub-FIX-updSeqStepInd r s n t (updBody r (MSEQ s)) w1 e sind))
      concl (inj‚ÇÇ (inj‚ÇÇ (e , f))) rewrite e | f = c0
        where
          c0 : updSeqStep w1 w1 r s n (FIX (upd r (MSEQ s))) (sub (FIX (LAMBDA (updBody r (s2l s n)))) (updBody r (s2l s n)))
          c0 = ‚áì‚Çó‚ÜíupdSeqStep
                 w1 w1 r s n
                 (FIX (upd r (MSEQ s)))
                 (sub (FIX (upd r (MSEQ s))) (updBody r (MSEQ s)))
                 (sub (FIX (upd r (s2l s n))) (updBody r (s2l s n)))
                 (1 , refl)
                 (updSeqStep-sub-sub-updr
                   cn gc w1 r s n (FIX (upd r (s2l s n))) (FIX (upd r (MSEQ s))) compat
                   (updSeq-FIX (upd r (s2l s n)) (upd r (MSEQ s)) updSeq-updr)
                   (‚â°sub-FIX-updSeqStepInd r s n t (updBody r (s2l s n)) w1 e sind))
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-FIX‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-FIX‚ÇÅ‚Üí w1' r s n a‚ÇÅ' sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(LET a‚ÇÅ b‚ÇÅ) .(LET a‚ÇÇ b‚ÇÇ) u (updSeq-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with isValue‚äé a‚ÇÅ
  ... | inj‚ÇÅ x rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , sub a‚ÇÅ b‚ÇÅ , sub a‚ÇÇ b‚ÇÇ , w1 , refl , snd (LET-val‚áì w1 a‚ÇÇ b‚ÇÇ (updSeq‚ÜíisValue upd‚ÇÅ x)) , updSeq-sub upd‚ÇÇ upd‚ÇÅ
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-LET‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-LET‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(WT a‚ÇÅ b‚ÇÅ) .(WT a‚ÇÇ b‚ÇÇ) u (updSeq-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , WT a‚ÇÅ b‚ÇÅ , WT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(SUP a‚ÇÅ b‚ÇÅ) .(SUP a‚ÇÇ b‚ÇÇ) u (updSeq-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUP a‚ÇÅ b‚ÇÅ , SUP a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
{--  updSeq-step cn gc w1 w2 r s n .(DSUP a‚ÇÅ b‚ÇÅ) .(DSUP a‚ÇÇ b‚ÇÇ) u (updSeq-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
      d = updSeq-SUP‚Üí r s n u‚ÇÅ u‚ÇÇ a‚ÇÇ upd‚ÇÅ

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
              ‚Üí updSeqStep w1 w1 r s n (DSUP a‚ÇÇ b‚ÇÇ) (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ))
      concl (x‚ÇÅ , x‚ÇÇ , eqa , us1 , us2) rewrite eqa = 0 , 1 , sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , sub x‚ÇÇ (sub x‚ÇÅ b‚ÇÇ) , w1 , refl , refl , updSeq-sub (updSeq-sub upd‚ÇÇ us1) us2
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-DSUP‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-DSUP‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))--}
  updSeq-step cn gc w1 w2 r s n .(WREC a‚ÇÅ b‚ÇÅ) .(WREC a‚ÇÇ b‚ÇÇ) u (updSeq-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
      d = updSeq-SUP‚Üí r s n u‚ÇÅ u‚ÇÇ a‚ÇÇ upd‚ÇÅ

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
              ‚Üí updSeqStep w1 w1 r s n (WREC a‚ÇÇ b‚ÇÇ) (sub (WRECr b‚ÇÅ u‚ÇÇ) (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ)))
      concl (x‚ÇÅ , x‚ÇÇ , eqa , us1 , us2) rewrite eqa = 0 , 1 , sub (WRECr b‚ÇÅ u‚ÇÇ) (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ)) , sub (WRECr b‚ÇÇ x‚ÇÇ) (sub x‚ÇÇ (sub x‚ÇÅ b‚ÇÇ)) , w1 , refl , refl , updSeq-sub (updSeq-sub (updSeq-sub upd‚ÇÇ us1) us2) (updSeq-WRECr upd‚ÇÇ us2)
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-WREC‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-WREC‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(MT a‚ÇÅ b‚ÇÅ) .(MT a‚ÇÇ b‚ÇÇ) u (updSeq-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MT a‚ÇÅ b‚ÇÅ , MT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
--  updSeq-step cn gc w1 w2 r s n .(MSUP a‚ÇÅ b‚ÇÅ) .(MSUP a‚ÇÇ b‚ÇÇ) u (updSeq-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MSUP a‚ÇÅ b‚ÇÅ , MSUP a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
{--  updSeq-step cn gc w1 w2 r s n .(DMSUP a‚ÇÅ b‚ÇÅ) .(DMSUP a‚ÇÇ b‚ÇÇ) u (updSeq-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with is-MSUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° MSUP x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
      d = updSeq-MSUP‚Üí r s n u‚ÇÅ u‚ÇÇ a‚ÇÇ upd‚ÇÅ

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° MSUP x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
              ‚Üí updSeqStep w1 w1 r s n (DMSUP a‚ÇÇ b‚ÇÇ) (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ))
      concl (x‚ÇÅ , x‚ÇÇ , eqa , us1 , us2) rewrite eqa = 0 , 1 , sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , sub x‚ÇÇ (sub x‚ÇÅ b‚ÇÇ) , w1 , refl , refl , updSeq-sub (updSeq-sub upd‚ÇÇ us1) us2
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-DMSUP‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-DMSUP‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))--}
  updSeq-step cn gc w1 w2 r s n .(SUM a‚ÇÅ b‚ÇÅ) .(SUM a‚ÇÇ b‚ÇÇ) u (updSeq-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(PAIR a‚ÇÅ b‚ÇÅ) .(PAIR a‚ÇÇ b‚ÇÇ) u (updSeq-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(SPREAD a‚ÇÅ b‚ÇÅ) .(SPREAD a‚ÇÇ b‚ÇÇ) u (updSeq-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with is-PAIR a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° PAIR x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
      d = updSeq-PAIR‚Üí r s n u‚ÇÅ u‚ÇÇ a‚ÇÇ upd‚ÇÅ

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° PAIR x‚ÇÅ x‚ÇÇ √ó updSeq r s n u‚ÇÅ x‚ÇÅ √ó updSeq r s n u‚ÇÇ x‚ÇÇ))
              ‚Üí updSeqStep w1 w1 r s n (SPREAD a‚ÇÇ b‚ÇÇ) (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ))
      concl (x‚ÇÅ , x‚ÇÇ , eqa , us1 , us2) rewrite eqa = 0 , 1 , sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , sub x‚ÇÇ (sub x‚ÇÅ b‚ÇÇ) , w1 , refl , refl , updSeq-sub (updSeq-sub upd‚ÇÇ us1) us2
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-SPREAD‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-SPREAD‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(SET a‚ÇÅ b‚ÇÅ) .(SET a‚ÇÇ b‚ÇÇ) u (updSeq-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(ISECT a‚ÇÅ b‚ÇÅ) .(ISECT a‚ÇÇ b‚ÇÇ) u (updSeq-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , ISECT a‚ÇÅ b‚ÇÅ , ISECT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(TUNION a‚ÇÅ b‚ÇÅ) .(TUNION a‚ÇÇ b‚ÇÇ) u (updSeq-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(UNION a‚ÇÅ b‚ÇÅ) .(UNION a‚ÇÇ b‚ÇÇ) u (updSeq-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(QTUNION a‚ÇÅ b‚ÇÅ) .(QTUNION a‚ÇÇ b‚ÇÇ) u (updSeq-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(INL a‚ÇÅ) .(INL a‚ÇÇ) u (updSeq-INL a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INL a‚ÇÅ , INL a‚ÇÇ , w1 , refl , refl , updSeq-INL a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(INR a‚ÇÅ) .(INR a‚ÇÇ) u (updSeq-INR a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INR a‚ÇÅ , INR a‚ÇÇ , w1 , refl , refl , updSeq-INR a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) u (updSeq-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) gtn compat comp sind with is-INL a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí a‚ÇÇ ‚â° INL x‚ÇÅ √ó updSeq r s n u‚ÇÅ x‚ÇÅ)
      d = updSeq-INL‚Üí r s n u‚ÇÅ a‚ÇÇ upd‚ÇÅ

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí a‚ÇÇ ‚â° INL x‚ÇÅ √ó updSeq r s n u‚ÇÅ x‚ÇÅ)
              ‚Üí updSeqStep w1 w1 r s n (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) (sub u‚ÇÅ b‚ÇÅ)
      concl (x‚ÇÅ , eqa , us1) rewrite eqa = 0 , 1 , sub u‚ÇÅ b‚ÇÅ , sub x‚ÇÅ b‚ÇÇ , w1 , refl , refl , updSeq-sub upd‚ÇÇ us1
  ... | inj‚ÇÇ x with is-INR a‚ÇÅ
  ... |    inj‚ÇÅ (u‚ÇÅ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí a‚ÇÇ ‚â° INR x‚ÇÅ √ó updSeq r s n u‚ÇÅ x‚ÇÅ)
      d = updSeq-INR‚Üí r s n u‚ÇÅ a‚ÇÇ upd‚ÇÅ

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí a‚ÇÇ ‚â° INR x‚ÇÅ √ó updSeq r s n u‚ÇÅ x‚ÇÅ)
              ‚Üí updSeqStep w1 w1 r s n (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) (sub u‚ÇÅ c‚ÇÅ)
      concl (x‚ÇÅ , eqa , us1) rewrite eqa = 0 , 1 , sub u‚ÇÅ c‚ÇÅ , sub x‚ÇÅ c‚ÇÇ , w1 , refl , refl , updSeq-sub upd‚ÇÉ us1
  ... |    inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |       inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-DECIDE‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ upd‚ÇÇ upd‚ÇÉ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-DECIDE‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ c‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ) u (updSeq-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , refl , refl , updSeq-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ
  updSeq-step cn gc w1 w2 r s n .(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u (updSeq-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ , EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1 , refl , refl , updSeq-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ
  updSeq-step cn gc w1 w2 r s n .AX .AX u updSeq-AX gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , AX , AX , w1 , refl , refl , updSeq-AX
  updSeq-step cn gc w1 w2 r s n .FREE .FREE u updSeq-FREE gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FREE , FREE , w1 , refl , refl , updSeq-FREE
  updSeq-step cn gc w1 w2 r s n .(MSEQ x) .(MSEQ x) u (updSeq-MSEQ x) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MSEQ x , MSEQ x , w1 , refl , refl , updSeq-MSEQ x
  updSeq-step cn gc w1 w2 r s n .(MAPP x a‚ÇÅ) .(MAPP x a‚ÇÇ) u (updSeq-MAPP x a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (m , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updSeq-NUM‚Üí r s n m a‚ÇÇ upd‚ÇÅ =
    0 , 1 , NUM (x m) , NUM (x m) , w1 , refl , refl , updSeq-NUM (x m)
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-MAPP‚ÇÅ w1 w1' r s n x a‚ÇÅ' a‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-MAPP‚ÇÅ‚Üí w1' r s n x a‚ÇÅ' sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(CHOOSE a‚ÇÅ b‚ÇÅ) .(CHOOSE a‚ÇÇ b‚ÇÇ) u (updSeq-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind with is-NAME a‚ÇÅ
  ... | inj‚ÇÅ (name , p) rewrite p = ‚ä•-elim (updSeq-NAME‚Üí r s n name a‚ÇÇ upd‚ÇÅ)
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíupdSeqStep-CHOOSE‚ÇÅ w1 w1' r s n a‚ÇÅ' a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÇ ind
    where
      ind : updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ'
      ind = updSeq-step cn gc w1 w1' r s n a‚ÇÅ a‚ÇÇ a‚ÇÅ' upd‚ÇÅ gtn compat q (updSeqStepInd-CHOOSE‚ÇÅ‚Üí w1' r s n a‚ÇÅ' b‚ÇÅ sind)
  ... |    inj‚ÇÇ q rewrite q = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  updSeq-step cn gc w1 w2 r s n .(TSQUASH a‚ÇÅ) .(TSQUASH a‚ÇÇ) u (updSeq-TSQUASH a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TSQUASH a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , refl , refl , updSeq-TSQUASH a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(TTRUNC a‚ÇÅ) .(TTRUNC a‚ÇÇ) u (updSeq-TTRUNC a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TTRUNC a‚ÇÅ , TTRUNC a‚ÇÇ , w1 , refl , refl , updSeq-TTRUNC a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(TCONST a‚ÇÅ) .(TCONST a‚ÇÇ) u (updSeq-TCONST a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TCONST a‚ÇÅ , TCONST a‚ÇÇ , w1 , refl , refl , updSeq-TCONST a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(SUBSING a‚ÇÅ) .(SUBSING a‚ÇÇ) u (updSeq-SUBSING a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUBSING a‚ÇÅ , SUBSING a‚ÇÇ , w1 , refl , refl , updSeq-SUBSING a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .PURE .PURE u updSeq-PURE gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PURE , PURE , w1 , refl , refl , updSeq-PURE
  updSeq-step cn gc w1 w2 r s n .(TERM a‚ÇÅ) .(TERM a‚ÇÇ) u (updSeq-TERM a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TERM a‚ÇÅ , TERM a‚ÇÇ , w1 , refl , refl , updSeq-TERM a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(ENC a) .(ENC a) u (updSeq-ENC a upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , ENCr a , ENCr a , w1 , refl , refl , updSeq-ENCr upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(DUM a‚ÇÅ) .(DUM a‚ÇÇ) u (updSeq-DUM a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , DUM a‚ÇÅ , DUM a‚ÇÇ , w1 , refl , refl , updSeq-DUM a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(FFDEFS a‚ÇÅ b‚ÇÅ) .(FFDEFS a‚ÇÇ b‚ÇÇ) u (updSeq-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updSeq-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ
  updSeq-step cn gc w1 w2 r s n .(UNIV x) .(UNIV x) u (updSeq-UNIV x) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNIV x , UNIV x , w1 , refl , refl , updSeq-UNIV x
  updSeq-step cn gc w1 w2 r s n .(LIFT a‚ÇÅ) .(LIFT a‚ÇÇ) u (updSeq-LIFT a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LIFT a‚ÇÅ , LIFT a‚ÇÇ , w1 , refl , refl , updSeq-LIFT a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(LOWER a‚ÇÅ) .(LOWER a‚ÇÇ) u (updSeq-LOWER a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LOWER a‚ÇÅ , LOWER a‚ÇÇ , w1 , refl , refl , updSeq-LOWER a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(SHRINK a‚ÇÅ) .(SHRINK a‚ÇÇ) u (updSeq-SHRINK a‚ÇÅ a‚ÇÇ upd‚ÇÅ) gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SHRINK a‚ÇÅ , SHRINK a‚ÇÇ , w1 , refl , refl , updSeq-SHRINK a‚ÇÅ a‚ÇÇ upd‚ÇÅ
  updSeq-step cn gc w1 w2 r s n .(upd r (MSEQ s)) .(upd r (s2l s n)) u updSeq-upd gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 0 , upd r (MSEQ s) , upd r (s2l s n) , w1 , refl , refl , updSeq-upd
  updSeq-step cn gc w1 w2 r s n .(upd r (s2l s n)) .(upd r (MSEQ s)) u updSeq-updr gtn compat comp sind rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 0 , upd r (s2l s n) , upd r (MSEQ s) , w1 , refl , refl , updSeq-updr

\end{code}
