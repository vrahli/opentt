\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using ()
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice


module terms3 {L : Level} (W : PossibleWorlds {L})
              (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M) (E : ChoiceExt {L} W C)
              (N : NewChoice W C M G)
       where
open import worldDef(W)
open import choiceDef{L}(C)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)
open import computation(W)(C)(M)(G)(E)(N)
open import terms2(W)(C)(M)(G)(E)(N)




get0 : (name : Name) ‚Üí Term
get0 name = APPLY (CS name) (NUM 0)


setT : (name : Name) (T : Term) ‚Üí Term
setT name t = CHOOSE (NAME name) t


updGt : (name : Name) (t : Term) ‚Üí Term
updGt name t = IFLT (get0 name) t (setT name t) AX


-- TODO: we need choose to update the world only if the number is higher than the one stored
-- This will be specified as a constraint of the 'choose' operator from getChoice.lagda
-- We throw in a CBV to reduce the argument to a number
upd : (name : Name) (f : Term) ‚Üí Term
upd name f = LAMBDA (LET (VAR 0) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))))


data differ (name1 name2 : Name) (f : Term) : Term ‚Üí Term ‚Üí Set where
  differ-VAR     : (x : Var) ‚Üí differ name1 name2 f (VAR x) (VAR x)
  differ-NAT     : differ name1 name2 f NAT NAT
  differ-QNAT    : differ name1 name2 f QNAT QNAT
  differ-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  differ-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  differ-NUM     : (x : ‚Ñï) ‚Üí differ name1 name2 f (NUM x) (NUM x)
  differ-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f d‚ÇÅ d‚ÇÇ ‚Üí differ name1 name2 f (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differ-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  differ-LAMBDA  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LAMBDA a) (LAMBDA b)
  differ-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  differ-FIX     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (FIX a) (FIX b)
  differ-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  differ-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  differ-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  differ-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  differ-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  differ-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  differ-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  differ-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  differ-INL     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (INL a) (INL b)
  differ-INR     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (INR a) (INR b)
  differ-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-AX      : differ name1 name2 f AX AX
  differ-FREE    : differ name1 name2 f FREE FREE
  --differ-CS      : differ name1 name2 f (CS name1) (CS name2)
  --differ-NAME    : differ name1 name2 f (NAME name1) (NAME name2)
  --differ-FRESH   : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (FRESH a) (FRESH b)
  differ-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
  differ-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-TSQUASH : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TSQUASH a) (TSQUASH b)
  differ-TTRUNC  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TTRUNC a) (TTRUNC b)
  differ-TCONST  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TCONST a) (TCONST b)
  differ-SUBSING : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SUBSING a) (SUBSING b)
  differ-DUM     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (DUM a) (DUM b)
  differ-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  differ-UNIV    : (x : ‚Ñï) ‚Üí differ name1 name2 f (UNIV x) (UNIV x)
  differ-LIFT    : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LIFT a) (LIFT b)
  differ-LOWER   : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LOWER a) (LOWER b)
  differ-SHRINK  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SHRINK a) (SHRINK b)
  differ-upd     : differ name1 name2 f (upd name1 f) (upd name2 f)



‚àà‚Ñï : (w : ùïé¬∑) (t : Term) ‚Üí Set(lsuc(L))
‚àà‚Ñï w t = Œ£ ‚Ñï (Œª n ‚Üí t ‚áõ (NUM n) at w)


‚áìPresDiff : (f : Term) (name1 name2 : Name) (n : ‚Ñï) ‚Üí Set(lsuc(L))
‚áìPresDiff f name1 name2 n =
  (w1 w2 w1' : ùïé¬∑) (k : ‚Ñï) (a b : Term)
  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí ‚àà‚Ñï w' (APPLY f (NUM m)))
  ‚Üí ‚àÄùïé w1' (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí ‚àà‚Ñï w' (APPLY f (NUM m)))
  ‚Üí differ name1 name2 f a b
  ‚Üí getT 0 name1 w1 ‚â° getT 0 name2 w1'
  ‚Üí steps n (a , w1) ‚â° (NUM k , w2)
  ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí steps n (b , w1') ‚â° (NUM k , w2') √ó getT 0 name1 w2 ‚â° getT 0 name2 w2')


‚áìfrom-to-refl : (T : Term) (w : ùïé¬∑) ‚Üí T ‚áì T from w to w
‚áìfrom-to-refl T w = (0 , refl)


differ-NUM‚Üí : {name1 name2 : Name} {f t : Term} {m : ‚Ñï}
               ‚Üí differ name1 name2 f (NUM m) t
               ‚Üí t ‚â° NUM m
differ-NUM‚Üí {name1} {name2} {f} {.(NUM m)} {m} (differ-NUM .m) = refl


IFLT-NUM<‚áì : {n m : ‚Ñï} (p : n < m) (a b : Term) (w : ùïé¬∑) ‚Üí IFLT (NUM n) (NUM m) a b ‚áì a from w to w
IFLT-NUM<‚áì {n} {m} p a b w = 1 , c
  where
    c : steps 1 (IFLT (NUM n) (NUM m) a b , w) ‚â° (a , w)
    c with n <? m
    ... | yes r = refl
    ... | no r = ‚ä•-elim (r p)


IFLT-NUM¬¨<‚áì : {n m : ‚Ñï} (p : ¬¨ n < m) (a b : Term) (w : ùïé¬∑) ‚Üí IFLT (NUM n) (NUM m) a b ‚áì b from w to w
IFLT-NUM¬¨<‚áì {n} {m} p a b w = 1 , c
  where
    c : steps 1 (IFLT (NUM n) (NUM m) a b , w) ‚â° (b , w)
    c with n <? m
    ... | yes r = ‚ä•-elim (p r)
    ... | no r = refl --


IFLT-NUM-2nd‚áìsteps : (k : ‚Ñï) (n : ‚Ñï) {a a' : Term} (b c : Term) {w1 w2 : ùïé¬∑}
                ‚Üí steps k (a , w1) ‚â° (a' , w2)
                ‚Üí IFLT (NUM n) a b c ‚áì IFLT (NUM n) a' b c from w1 to w2
IFLT-NUM-2nd‚áìsteps 0 n {a} {a'} b c {w1} {w2} comp rewrite pair-inj‚ÇÅ comp | pair-inj‚ÇÇ comp = ‚áìfrom-to-refl _ _
IFLT-NUM-2nd‚áìsteps (suc k) n {a} {a'} b c {w1} {w2} comp with step‚äé a w1
... | inj‚ÇÅ (a'' , w1' , z) rewrite z with is-NUM a
... |    inj‚ÇÅ (m , q) rewrite q | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) | stepsVal (NUM m) w1 k tt | pair-inj‚ÇÅ comp | pair-inj‚ÇÇ comp = ‚áìfrom-to-refl _ _
... |    inj‚ÇÇ q = step-‚áì-from-to-trans s ind
  where
    ind : IFLT (NUM n) a'' b c ‚áì IFLT (NUM n) a' b c from w1' to w2
    ind = IFLT-NUM-2nd‚áìsteps k n b c comp

    s : step (IFLT (NUM n) a b c) w1 ‚â° just (IFLT (NUM n) a'' b c , w1')
    s with is-NUM a
    ... | inj‚ÇÅ (m , q') = ‚ä•-elim (q _ q')
    ... | inj‚ÇÇ q' rewrite z = refl
IFLT-NUM-2nd‚áìsteps (suc k) n {a} {a'} b c {w1} {w2} comp | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ comp | pair-inj‚ÇÇ comp = ‚áìfrom-to-refl _ _


IFLT-NUM-2nd‚áì : (n : ‚Ñï) {a a' : Term} (b c : Term) {w1 w2 : ùïé¬∑}
                ‚Üí a ‚áì a' from w1 to w2
                ‚Üí IFLT (NUM n) a b c ‚áì IFLT (NUM n) a' b c from w1 to w2
IFLT-NUM-2nd‚áì n {a} {a'} b c {w1} {w2} comp = IFLT-NUM-2nd‚áìsteps (fst comp) n b c (snd comp)


differ‚áì-aux2 : (f : Term) (name1 name2 : Name) (w1 w2 w1' : ùïé¬∑) (a b a' : Term)
               ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí ‚àà‚Ñï w' (APPLY f (NUM m)))
               ‚Üí ‚àÄùïé w1' (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí ‚àà‚Ñï w' (APPLY f (NUM m)))
               ‚Üí differ name1 name2 f a b
               ‚Üí getT 0 name1 w1 ‚â° getT 0 name2 w1'
               ‚Üí step a w1 ‚â° just (a' , w2)
               ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ Term (Œª b'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                   a' ‚áì a'' from w2 to w3 √ó b ‚áì b'' from w1' to w3' √ó getT 0 name1 w3 ‚â° getT 0 name2 w3'))))
differ‚áì-aux2 f name1 name2 w1 w2 w1' .NAT .NAT a' c‚ÇÅ c‚ÇÇ differ-NAT g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NAT , NAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .QNAT .QNAT a' c‚ÇÅ c‚ÇÇ differ-QNAT g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QNAT , QNAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(LT a‚ÇÅ b‚ÇÅ) .(LT a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(QLT a‚ÇÅ b‚ÇÅ) .(QLT a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(NUM x) .(NUM x) a' c‚ÇÅ c‚ÇÇ (differ-NUM x) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NUM x , NUM x , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
-- IFLT
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÉ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÑ d‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÉ c‚ÇÑ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) g0 s with is-NUM a‚ÇÅ
... | inj‚ÇÅ (n , p) rewrite p | differ-NUM‚Üí diff with is-NUM b‚ÇÅ
... |    inj‚ÇÅ (m , q) rewrite q | differ-NUM‚Üí diff‚ÇÅ with n <? m
... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = c‚ÇÉ , c‚ÇÑ , w1 , w1' , ‚áìfrom-to-refl _ _ , IFLT-NUM<‚áì r c‚ÇÑ d‚ÇÇ w1' , g0
... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = d‚ÇÅ , d‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , IFLT-NUM¬¨<‚áì r c‚ÇÑ d‚ÇÇ w1' , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÉ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÑ d‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÉ c‚ÇÑ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) g0 s | inj‚ÇÅ (n , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
... | inj‚ÇÅ (b‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
  IFLT (NUM n) (fst ind) c‚ÇÉ d‚ÇÅ ,
  IFLT (NUM n) (fst (snd ind)) c‚ÇÑ d‚ÇÇ ,
  fst (snd (snd ind)) ,
  fst (snd (snd (snd ind))) ,
  IFLT-NUM-2nd‚áì n c‚ÇÉ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
  IFLT-NUM-2nd‚áì n c‚ÇÑ d‚ÇÇ (fst (snd (snd (snd (snd (snd ind)))))) ,
  snd (snd (snd (snd (snd (snd ind)))))
  where
    ind : Œ£ Term (Œª a'' ‚Üí Œ£ Term (Œª b'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
            b‚ÇÅ' ‚áì a'' from w1'' to w3 √ó b‚ÇÇ ‚áì b'' from w1' to w3' √ó getT 0 name1 w3 ‚â° getT 0 name2 w3'))))
    ind = differ‚áì-aux2 f name1 name2 w1 w1'' w1' b‚ÇÅ b‚ÇÇ b‚ÇÅ' c‚ÇÅ c‚ÇÇ diff‚ÇÅ g0 z
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÉ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÑ d‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÉ c‚ÇÑ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) g0 s | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... | inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = {!!} -- as above, go by induction
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
-- PI
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(PI a‚ÇÅ b‚ÇÅ) .(PI a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(LAMBDA a) .(LAMBDA b) a' c‚ÇÅ c‚ÇÇ (differ-LAMBDA a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LAMBDA a , LAMBDA b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(FIX a) .(FIX b) a' c‚ÇÅ c‚ÇÇ (differ-FIX a b diff) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(LET a‚ÇÅ b‚ÇÅ) .(LET a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(SUM a‚ÇÅ b‚ÇÅ) .(SUM a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(PAIR a‚ÇÅ b‚ÇÅ) .(PAIR a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(SPREAD a‚ÇÅ b‚ÇÅ) .(SPREAD a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(SET a‚ÇÅ b‚ÇÅ) .(SET a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(TUNION a‚ÇÅ b‚ÇÅ) .(TUNION a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(UNION a‚ÇÅ b‚ÇÅ) .(UNION a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(QTUNION a‚ÇÅ b‚ÇÅ) .(QTUNION a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(INL a) .(INL b) a' c‚ÇÅ c‚ÇÇ (differ-INL a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = INL a , INL b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(INR a) .(INR b) a' c‚ÇÅ c‚ÇÇ (differ-INR a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = INR a , INR b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÉ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÑ) a' c‚ÇÅ c‚ÇÇ (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÉ c‚ÇÑ diff diff‚ÇÅ diff‚ÇÇ) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(EQ a‚ÇÅ b‚ÇÅ c‚ÇÉ) .(EQ a‚ÇÇ b‚ÇÇ c‚ÇÑ) a' c‚ÇÅ c‚ÇÇ (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÉ c‚ÇÑ diff diff‚ÇÅ diff‚ÇÇ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = EQ a‚ÇÅ b‚ÇÅ c‚ÇÉ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÑ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .AX .AX a' c‚ÇÅ c‚ÇÇ differ-AX g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = AX , AX , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .FREE .FREE a' c‚ÇÅ c‚ÇÇ differ-FREE g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = FREE , FREE , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(CHOOSE a‚ÇÅ b‚ÇÅ) .(CHOOSE a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÉ) .(IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÑ) a' c‚ÇÅ c‚ÇÇ (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÉ c‚ÇÑ diff diff‚ÇÅ diff‚ÇÇ) g0 s = {!!}
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(TSQUASH a) .(TSQUASH b) a' c‚ÇÅ c‚ÇÇ (differ-TSQUASH a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TSQUASH a , TSQUASH b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(TTRUNC a) .(TTRUNC b) a' c‚ÇÅ c‚ÇÇ (differ-TTRUNC a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TTRUNC a , TTRUNC b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(TCONST a) .(TCONST b) a' c‚ÇÅ c‚ÇÇ (differ-TCONST a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TCONST a , TCONST b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(SUBSING a) .(SUBSING b) a' c‚ÇÅ c‚ÇÇ (differ-SUBSING a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUBSING a , SUBSING b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(DUM a) .(DUM b) a' c‚ÇÅ c‚ÇÇ (differ-DUM a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = DUM a , DUM b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(FFDEFS a‚ÇÅ b‚ÇÅ) .(FFDEFS a‚ÇÇ b‚ÇÇ) a' c‚ÇÅ c‚ÇÇ (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(UNIV x) .(UNIV x) a' c‚ÇÅ c‚ÇÇ (differ-UNIV x) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = UNIV x , UNIV x , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(LIFT a) .(LIFT b) a' c‚ÇÅ c‚ÇÇ (differ-LIFT a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LIFT a , LIFT b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(LOWER a) .(LOWER b) a' c‚ÇÅ c‚ÇÇ (differ-LOWER a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LOWER a , LOWER b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(SHRINK a) .(SHRINK b) a' c‚ÇÅ c‚ÇÇ (differ-SHRINK a b diff) g0 s rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SHRINK a , SHRINK b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , g0
differ‚áì-aux2 f name1 name2 w1 w2 w1' .(upd name1 f) .(upd name2 f) a' c‚ÇÅ c‚ÇÇ differ-upd g0 s = {!!}


differ‚áì-aux : (f : Term) (name1 name2 : Name) (n : ‚Ñï) (ind : (n' : ‚Ñï) ‚Üí n' < n ‚Üí ‚áìPresDiff f name1 name2 n') ‚Üí ‚áìPresDiff f name1 name2 n
differ‚áì-aux f name1 name2 n ind = {!!}


differ‚áì : (f : Term) (name1 name2 : Name) (n : ‚Ñï) ‚Üí ‚áìPresDiff f name1 name2 n
differ‚áì f name1 name2 = <‚Ñïind _ (differ‚áì-aux f name1 name2)


\end{code}

