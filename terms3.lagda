\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using ()
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice


module terms3 {L : Level} (W : PossibleWorlds {L})
              (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M) (E : ChoiceExt {L} W C)
              (N : NewChoice W C M G)
       where
open import worldDef(W)
open import choiceDef{L}(C)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)
open import computation(W)(C)(M)(G)(E)(N)
open import terms2(W)(C)(M)(G)(E)(N)




get0 : (name : Name) ‚Üí Term
get0 name = APPLY (CS name) (NUM 0)


setT : (name : Name) (T : Term) ‚Üí Term
setT name t = CHOOSE (NAME name) t


updGt : (name : Name) (t : Term) ‚Üí Term
updGt name t = IFLT (get0 name) t (setT name t) AX


-- TODO: we need choose to update the world only if the number is higher than the one stored
-- This will be specified as a constraint of the 'choose' operator from getChoice.lagda
-- We throw in a CBV to reduce the argument to a number
updBody : (name : Name) (f : Term) ‚Üí Term
updBody name f = LET (VAR 0) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))


upd : (name : Name) (f : Term) ‚Üí Term
upd name f = LAMBDA (updBody name f)


data differ (name1 name2 : Name) (f : Term) : Term ‚Üí Term ‚Üí Set where
  differ-VAR     : (x : Var) ‚Üí differ name1 name2 f (VAR x) (VAR x)
  differ-NAT     : differ name1 name2 f NAT NAT
  differ-QNAT    : differ name1 name2 f QNAT QNAT
  differ-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  differ-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  differ-NUM     : (x : ‚Ñï) ‚Üí differ name1 name2 f (NUM x) (NUM x)
  differ-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f d‚ÇÅ d‚ÇÇ ‚Üí differ name1 name2 f (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differ-SUC     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SUC a) (SUC b)
  differ-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  differ-LAMBDA  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LAMBDA a) (LAMBDA b)
  differ-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  differ-FIX     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (FIX a) (FIX b)
  differ-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  differ-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  differ-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  differ-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  differ-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  differ-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  differ-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  differ-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  differ-INL     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (INL a) (INL b)
  differ-INR     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (INR a) (INR b)
  differ-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-AX      : differ name1 name2 f AX AX
  differ-FREE    : differ name1 name2 f FREE FREE
  --differ-CS      : differ name1 name2 f (CS name1) (CS name2)
  --differ-CS      : differ name1 name2 f (CS name1) (CS name2)
  --differ-NAME    : differ name1 name2 f (NAME name1) (NAME name2)
  --differ-FRESH   : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (FRESH a) (FRESH b)
  differ-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  differ-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-TSQUASH : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TSQUASH a) (TSQUASH b)
  differ-TTRUNC  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TTRUNC a) (TTRUNC b)
  differ-TCONST  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TCONST a) (TCONST b)
  differ-SUBSING : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SUBSING a) (SUBSING b)
  differ-DUM     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (DUM a) (DUM b)
  differ-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  differ-UNIV    : (x : ‚Ñï) ‚Üí differ name1 name2 f (UNIV x) (UNIV x)
  differ-LIFT    : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LIFT a) (LIFT b)
  differ-LOWER   : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LOWER a) (LOWER b)
  differ-SHRINK  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SHRINK a) (SHRINK b)
  differ-upd     : differ name1 name2 f (upd name1 f) (upd name2 f)



‚àà‚Ñï : (w : ùïé¬∑) (t : Term) ‚Üí Set(lsuc(L))
‚àà‚Ñï w t = Œ£ ‚Ñï (Œª n ‚Üí t ‚áõ (NUM n) at w)



differ-NUM‚Üí : {name1 name2 : Name} {f t : Term} {m : ‚Ñï}
               ‚Üí differ name1 name2 f (NUM m) t
               ‚Üí t ‚â° NUM m
differ-NUM‚Üí {name1} {name2} {f} {.(NUM m)} {m} (differ-NUM .m) = refl



differ-CS‚Çó‚Üí : {name1 name2 name : Name} {f t : Term} ‚Üí ¬¨ differ name1 name2 f (CS name) t
differ-CS‚Çó‚Üí {name1} {name2} {name} {f} {t} ()


differ-NAME‚Çó‚Üí : {name1 name2 name : Name} {f t : Term} ‚Üí ¬¨ differ name1 name2 f (NAME name) t
differ-NAME‚Çó‚Üí {name1} {name2} {name} {f} {t} ()


differ-LAMBDA‚Çó‚Üí : {name1 name2 : Name} {f g t : Term}
                  ‚Üí differ name1 name2 f (LAMBDA g) t
                  ‚Üí Œ£ Term (Œª g' ‚Üí t ‚â° LAMBDA g' √ó differ name1 name2 f g g')
                    ‚äé (g ‚â° updBody name1 f √ó t ‚â° upd name2 f)
differ-LAMBDA‚Çó‚Üí {name1} {name2} {f} {g} {.(LAMBDA b)} (differ-LAMBDA .g b d) = inj‚ÇÅ (b , refl , d)
differ-LAMBDA‚Çó‚Üí {name1} {name2} {f} {.(updBody name1 f)} {.(upd name2 f)} differ-upd = inj‚ÇÇ (refl , refl)


differ-PAIR‚Çó‚Üí : {name1 name2 : Name} {f a b t : Term}
                  ‚Üí differ name1 name2 f (PAIR a b) t
                  ‚Üí Œ£ Term (Œª a' ‚Üí Œ£ Term (Œª b' ‚Üí t ‚â° PAIR a' b' √ó differ name1 name2 f a a' √ó differ name1 name2 f b b'))
differ-PAIR‚Çó‚Üí {name1} {name2} {f} {a} {b} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR .a a‚ÇÇ .b b‚ÇÇ diff diff‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , diff , diff‚ÇÅ


differ-INL‚Çó‚Üí : {name1 name2 : Name} {f a t : Term}
                ‚Üí differ name1 name2 f (INL a) t
                ‚Üí Œ£ Term (Œª a' ‚Üí t ‚â° INL a' √ó differ name1 name2 f a a')
differ-INL‚Çó‚Üí {name1} {name2} {f} {a} {.(INL a‚ÇÇ)} (differ-INL .a a‚ÇÇ diff) = a‚ÇÇ , refl , diff


differ-INR‚Çó‚Üí : {name1 name2 : Name} {f a t : Term}
                ‚Üí differ name1 name2 f (INR a) t
                ‚Üí Œ£ Term (Œª a' ‚Üí t ‚â° INR a' √ó differ name1 name2 f a a')
differ-INR‚Çó‚Üí {name1} {name2} {f} {a} {.(INR a‚ÇÇ)} (differ-INR .a a‚ÇÇ diff) = a‚ÇÇ , refl , diff



‚Üídiffer-shiftUp : (v : Var) {name1 name2 : Name} {f : Term} (cf : # f) {a b : Term}
                   ‚Üí differ name1 name2 f a b
                   ‚Üí differ name1 name2 f (shiftUp v a) (shiftUp v b)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(VAR x)} {.(VAR x)} (differ-VAR x) = differ-VAR _
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.NAT} {.NAT} differ-NAT = differ-NAT
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.QNAT} {.QNAT} differ-QNAT = differ-QNAT
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QLT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(NUM x)} {.(NUM x)} (differ-NUM x) = differ-NUM x
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFLT _ _ _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ) (‚Üídiffer-shiftUp v cf diff‚ÇÉ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUC a)} {.(SUC b)} (differ-SUC a b diff) = differ-SUC _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PI _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) = differ-LAMBDA _ _ (‚Üídiffer-shiftUp (suc v) cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-APPLY _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(FIX a)} {.(FIX b)} (differ-FIX a b diff) = differ-FIX _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LET _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUM _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PAIR _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SPREAD _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc (suc v)) cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SET _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-TUNION _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-UNION _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QTUNION _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(INL a)} {.(INL b)} (differ-INL a b diff) = differ-INL _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(INR a)} {.(INR b)} (differ-INR a b diff) = differ-INR _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-DECIDE _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÇ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-EQ _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.AX} {.AX} differ-AX = differ-AX
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.FREE} {.FREE} differ-FREE = differ-FREE
--‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(CS name1)} {.(CS name2)} differ-CS = differ-CS
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-CHOOSE _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
--‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-IFC0 _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) = differ-TSQUASH _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) = differ-TTRUNC _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TCONST a)} {.(TCONST b)} (differ-TCONST a b diff) = differ-TCONST _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) = differ-SUBSING _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) = differ-DUM _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-FFDEFS _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) = differ-UNIV x
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) = differ-LIFT _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) = differ-LOWER _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) = differ-SHRINK _ _ (‚Üídiffer-shiftUp v cf diff)
‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(upd name1 f)} {.(upd name2 f)} differ-upd rewrite sucIf‚â§s0 v | #shiftUp (suc (suc (suc v))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = differ-upd



differ-subv : {name1 name2 : Name} {f : Term} (cf : # f) (v : Var) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ
             ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ
             ‚Üí differ name1 name2 f (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (differ-VAR x) d‚ÇÇ with x ‚âü v
... | yes p = d‚ÇÇ -- rewrite shiftDownUp b‚ÇÅ 0 | shiftDownUp b‚ÇÇ 0 = d‚ÇÇ
... | no p = differ-VAR _
differ-subv {name1} {name2} {f} cf v {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} differ-NAT d‚ÇÇ = differ-NAT
differ-subv {name1} {name2} {f} cf v {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} differ-QNAT d‚ÇÇ = differ-QNAT
differ-subv {name1} {name2} {f} cf v {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-LT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-QLT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (differ-NUM x) d‚ÇÇ = differ-NUM x
differ-subv {name1} {name2} {f} cf v {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÉ)} {b‚ÇÅ} {b‚ÇÇ} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ d‚ÇÖ d‚ÇÜ d‚Çá) d‚ÇÇ = differ-IFLT _ _ _ _ _ _ _ _ (differ-subv cf v d‚ÇÑ d‚ÇÇ) (differ-subv cf v d‚ÇÖ d‚ÇÇ) (differ-subv cf v d‚ÇÜ d‚ÇÇ) (differ-subv cf v d‚Çá d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(SUC a)} {.(SUC b)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUC a b d‚ÇÅ) d‚ÇÇ = differ-SUC _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-PI _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(LAMBDA a)} {.(LAMBDA b)} {b‚ÇÅ} {b‚ÇÇ} (differ-LAMBDA a b d‚ÇÅ) d‚ÇÇ = differ-LAMBDA _ _ (differ-subv cf (suc v) d‚ÇÅ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-APPLY _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(FIX a)} {.(FIX b)} {b‚ÇÅ} {b‚ÇÇ} (differ-FIX a b d‚ÇÅ) d‚ÇÇ = differ-FIX _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-LET _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SUM _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-PAIR _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SPREAD _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc (suc v)) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf d‚ÇÇ)))
differ-subv {name1} {name2} {f} cf v {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SET _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-TUNION _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-UNION _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-QTUNION _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(INL a)} {.(INL b)} {b‚ÇÅ} {b‚ÇÇ} (differ-INL a b d‚ÇÅ) d‚ÇÇ = differ-INL _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(INR a)} {.(INR b)} {b‚ÇÅ} {b‚ÇÇ} (differ-INR a b d‚ÇÅ) d‚ÇÇ = differ-INR _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ) d‚ÇÇ = differ-DECIDE _ _ _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ)) (differ-subv cf (suc v) d‚ÇÑ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
differ-subv {name1} {name2} {f} cf v {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ) d‚ÇÇ = differ-EQ _ _ _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ) (differ-subv cf v d‚ÇÑ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} differ-AX d‚ÇÇ = differ-AX
differ-subv {name1} {name2} {f} cf v {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} differ-FREE d‚ÇÇ = differ-FREE
--differ-subv {name1} {name2} {f} cf v {.(CS name1)} {.(CS name2)} {b‚ÇÅ} {b‚ÇÇ} differ-CS d‚ÇÇ = differ-CS
differ-subv {name1} {name2} {f} cf v {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-CHOOSE _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
--differ-subv {name1} {name2} {f} cf v {.(IFC0 a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ) d‚ÇÇ = differ-IFC0 _ _ _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ) (differ-subv cf v d‚ÇÑ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(TSQUASH a)} {.(TSQUASH b)} {b‚ÇÅ} {b‚ÇÇ} (differ-TSQUASH a b d‚ÇÅ) d‚ÇÇ = differ-TSQUASH _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(TTRUNC a)} {.(TTRUNC b)} {b‚ÇÅ} {b‚ÇÇ} (differ-TTRUNC a b d‚ÇÅ) d‚ÇÇ = differ-TTRUNC _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(TCONST a)} {.(TCONST b)} {b‚ÇÅ} {b‚ÇÇ} (differ-TCONST a b d‚ÇÅ) d‚ÇÇ = differ-TCONST _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(SUBSING a)} {.(SUBSING b)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUBSING a b d‚ÇÅ) d‚ÇÇ = differ-SUBSING _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(DUM a)} {.(DUM b)} {b‚ÇÅ} {b‚ÇÇ} (differ-DUM a b d‚ÇÅ) d‚ÇÇ = differ-DUM _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-FFDEFS _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (differ-UNIV x) d‚ÇÇ = differ-UNIV x
differ-subv {name1} {name2} {f} cf v {.(LIFT a)} {.(LIFT b)} {b‚ÇÅ} {b‚ÇÇ} (differ-LIFT a b d‚ÇÅ) d‚ÇÇ = differ-LIFT _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(LOWER a)} {.(LOWER b)} {b‚ÇÅ} {b‚ÇÇ} (differ-LOWER a b d‚ÇÅ) d‚ÇÇ = differ-LOWER _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(SHRINK a)} {.(SHRINK b)} {b‚ÇÅ} {b‚ÇÇ} (differ-SHRINK a b d‚ÇÅ) d‚ÇÇ = differ-SHRINK _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
differ-subv {name1} {name2} {f} cf v {.(upd name1 f)} {.(upd name2 f)} {b‚ÇÅ} {b‚ÇÇ} differ-upd d‚ÇÇ
  rewrite sucIf‚â§00
        | subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÅ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
        | subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÇ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf) = differ-upd


‚Üídiffer-shiftDown : (v : Var) {name1 name2 : Name} {f : Term} (cf : # f) {a b : Term}
                     ‚Üí differ name1 name2 f a b
                     ‚Üí differ name1 name2 f (shiftDown v a) (shiftDown v b)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(VAR x)} {.(VAR x)} (differ-VAR x) = differ-VAR _
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.NAT} {.NAT} differ-NAT = differ-NAT
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.QNAT} {.QNAT} differ-QNAT = differ-QNAT
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QLT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(NUM x)} {.(NUM x)} (differ-NUM x) = differ-NUM x
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFLT _ _ _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ) (‚Üídiffer-shiftDown v cf diff‚ÇÉ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUC a)} {.(SUC b)} (differ-SUC a b diff) = differ-SUC _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PI _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) = differ-LAMBDA _ _ (‚Üídiffer-shiftDown (suc v) cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-APPLY _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(FIX a)} {.(FIX b)} (differ-FIX a b diff) = differ-FIX _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LET _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUM _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PAIR _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SPREAD _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc (suc v)) cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SET _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-TUNION _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-UNION _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QTUNION _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(INL a)} {.(INL b)} (differ-INL a b diff) = differ-INL _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(INR a)} {.(INR b)} (differ-INR a b diff) = differ-INR _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-DECIDE _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÇ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-EQ _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.AX} {.AX} differ-AX = differ-AX
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.FREE} {.FREE} differ-FREE = differ-FREE
--‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(CS name1)} {.(CS name2)} differ-CS = differ-CS
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-CHOOSE _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
--‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-IFC0 _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) = differ-TSQUASH _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) = differ-TTRUNC _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TCONST a)} {.(TCONST b)} (differ-TCONST a b diff) = differ-TCONST _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) = differ-SUBSING _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) = differ-DUM _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-FFDEFS _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) = differ-UNIV x
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) = differ-LIFT _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) = differ-LOWER _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) = differ-SHRINK _ _ (‚Üídiffer-shiftDown v cf diff)
‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(upd name1 f)} {.(upd name2 f)} differ-upd rewrite sucIf‚â§s0 v | #shiftDown (suc (suc (suc v))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = differ-upd


differ-sub : {name1 name2 : Name} {f : Term} (cf : # f) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ
             ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ
             ‚Üí differ name1 name2 f (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
differ-sub {name1} {name2} {f} cf {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} d‚ÇÅ d‚ÇÇ =
  ‚Üídiffer-shiftDown 0 cf (differ-subv {name1} {name2} {f} cf 0 {a‚ÇÅ} {a‚ÇÇ} {shiftUp 0 b‚ÇÅ} {shiftUp 0 b‚ÇÇ} d‚ÇÅ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))


differ-isValue‚Üí : {name1 name2 : Name} {f : Term} {a b : Term}
                   ‚Üí differ name1 name2 f a b
                   ‚Üí isValue a
                   ‚Üí isValue b
differ-isValue‚Üí {name1} {name2} {f} {.NAT} {.NAT} differ-NAT isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.QNAT} {.QNAT} differ-QNAT isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(NUM x)} {.(NUM x)} (differ-NUM x) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(INL a)} {.(INL b)} (differ-INL a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(INR a)} {.(INR b)} (differ-INR a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.AX} {.AX} differ-AX isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.FREE} {.FREE} differ-FREE isv = tt
--differ-isValue‚Üí {name1} {name2} {f} {.(CS name1)} {.(CS name2)} differ-CS isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(TCONST a)} {.(TCONST b)} (differ-TCONST a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) isv = tt
differ-isValue‚Üí {name1} {name2} {f} {.(upd name1 f)} {.(upd name2 f)} differ-upd isv = tt



sub-upd : (name : Name) (f : Term) (a : Term) (cf : # f)
          ‚Üí sub a (updBody name f) ‚â° LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))
sub-upd name f a cf
  rewrite #shiftUp 0 (ct f cf)
        | shiftDownUp a 0
        | #subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 a))) f cf
        | #shiftDown 2 (ct f cf) = refl


sub-SEQ-updGt : (u : Term) (name : Name) (f : Term) (cf : # f)
                ‚Üí sub u (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))
                   ‚â° LET (updGt name u) (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u))))
sub-SEQ-updGt u name f cf
  rewrite #shiftUp 0 (ct f cf)
        | shiftDownUp u 0
        | #subv 1 (shiftUp 0 (shiftUp 0 u)) f cf
        | #shiftDown 1 (ct f cf) = refl


getT‚äé : (n : ‚Ñï) (cs : Name) (w : ùïé¬∑) ‚Üí (Œ£ Term (Œª t ‚Üí getT n cs w ‚â° just t) ‚äé getT n cs w ‚â° nothing)
getT‚äé n cs w with getT n cs w
... | just t = inj‚ÇÅ (t , refl)
... | nothing = inj‚ÇÇ refl



steps-get0 : (k : ‚Ñï) (name : Name) (w w' : ùïé¬∑) (v : Term)
             ‚Üí isValue v
             ‚Üí steps k (get0 name , w) ‚â° (v , w')
             ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí k' < k √ó getT 0 name w ‚â° just u √ó steps k' (u , w) ‚â° (v , w')))
steps-get0 0 name w w' t isv comp rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
steps-get0 (suc k) name w w' t isv comp with getT‚äé 0 name w
... | inj‚ÇÅ (u , z) rewrite z = u , k , ‚â§-refl , refl , comp
... | inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



‚â°Term‚Üí‚â°steps : (k : ‚Ñï) {a b : Term} (w : ùïé¬∑) ‚Üí a ‚â° b ‚Üí steps k (a , w) ‚â° steps k (b , w)
‚â°Term‚Üí‚â°steps k {a} {b} w e rewrite e = refl

\end{code}

