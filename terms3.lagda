\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using ()
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice
open import encode


module terms3 {L : Level} (W : PossibleWorlds {L})
              (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M) (E : ChoiceExt {L} W C)
              (N : NewChoice W C M G)
              (EC : Encode)
       where

open import worldDef(W)
open import choiceDef{L}(C)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)
open import computation(W)(C)(M)(G)(E)(N)(EC)
open import terms2(W)(C)(M)(G)(E)(N)(EC)




get0 : (name : Name) ‚Üí Term
get0 name = APPLY (CS name) (NUM 0)


setT : (name : Name) (T : Term) ‚Üí Term
setT name t = CHOOSE (NAME name) t


-- A typical choice
set‚ä• : (name : Name) ‚Üí Term
set‚ä• name = CHOOSE (NAME name) BFALSE


-- A typical choice
set‚ä§ : (name : Name) ‚Üí Term
set‚ä§ name = CHOOSE (NAME name) BTRUE


-- A typical choice
set0 : (name : Name) ‚Üí Term
set0 name = setT name (NUM 0)


set : (name : Name) ‚Üí Term
set name = CHOOSE (NAME name) (‚ÑÇ‚ÜíT ‚ÑÇ‚ÇÄ¬∑)


#set : (name : Name) ‚Üí CTerm
#set name = ct (set name) c
  where
    c : # set name
    c rewrite CTerm.closed (‚ÑÇ‚ÜíC¬∑ ‚ÑÇ‚ÇÄ¬∑) = refl


#set0 : (name : Name) ‚Üí CTerm
#set0 name = ct (set0 name) c
  where
    c : # set0 name
    c = refl


#set‚ä§ : (name : Name) ‚Üí CTerm
#set‚ä§ name = ct (set‚ä§ name) c
  where
    c : # set‚ä§ name
    c = refl


#set‚ä• : (name : Name) ‚Üí CTerm
#set‚ä• name = ct (set‚ä• name) c
  where
    c : # set‚ä• name
    c = refl


#get0 : (name : Name) ‚Üí CTerm
#get0 name = ct (get0 name) c
  where
    c : # get0 name
    c = refl


updGt : (name : Name) (t : Term) ‚Üí Term
updGt name t = IFLT (get0 name) t (setT name t) AX


-- TODO: we need choose to update the world only if the number is higher than the one stored
-- This will be specified as a constraint of the 'choose' operator from getChoice.lagda
-- We throw in a CBV to reduce the argument to a number
updBody : (name : Name) (f : Term) ‚Üí Term
updBody name f = LET (VAR 0) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))


upd : (name : Name) (f : Term) ‚Üí Term
upd name f = LAMBDA (updBody name f)


data differ (name1 name2 : Name) (f : Term) : Term ‚Üí Term ‚Üí Set where
  differ-VAR     : (x : Var) ‚Üí differ name1 name2 f (VAR x) (VAR x)
--  differ-NAT     : differ name1 name2 f NAT NAT
  differ-QNAT    : differ name1 name2 f QNAT QNAT
--  differ-TNAT    : differ name1 name2 f TNAT TNAT
  differ-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  differ-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  differ-NUM     : (x : ‚Ñï) ‚Üí differ name1 name2 f (NUM x) (NUM x)
  differ-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f d‚ÇÅ d‚ÇÇ ‚Üí differ name1 name2 f (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differ-IFEQ    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f d‚ÇÅ d‚ÇÇ ‚Üí differ name1 name2 f (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differ-SUC     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SUC a) (SUC b)
  differ-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  differ-LAMBDA  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LAMBDA a) (LAMBDA b)
  differ-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  differ-FIX     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (FIX a) (FIX b)
  differ-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  differ-WT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (WT a‚ÇÅ b‚ÇÅ) (WT a‚ÇÇ b‚ÇÇ)
  differ-SUP     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SUP a‚ÇÅ b‚ÇÅ) (SUP a‚ÇÇ b‚ÇÇ)
--  differ-DSUP    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (DSUP a‚ÇÅ b‚ÇÅ) (DSUP a‚ÇÇ b‚ÇÇ)
  differ-WREC    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (WREC a‚ÇÅ b‚ÇÅ) (WREC a‚ÇÇ b‚ÇÇ)
  differ-MT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (MT a‚ÇÅ b‚ÇÅ) (MT a‚ÇÇ b‚ÇÇ)
--  differ-MSUP    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (MSUP a‚ÇÅ b‚ÇÅ) (MSUP a‚ÇÇ b‚ÇÇ)
--  differ-DMSUP   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (DMSUP a‚ÇÅ b‚ÇÅ) (DMSUP a‚ÇÇ b‚ÇÇ)
  differ-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  differ-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  differ-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  differ-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  differ-ISECT   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  differ-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  differ-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
--  differ-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  differ-INL     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (INL a) (INL b)
  differ-INR     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (INR a) (INR b)
  differ-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
--  differ-EQB     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f d‚ÇÅ d‚ÇÇ ‚Üí differ name1 name2 f (EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differ-AX      : differ name1 name2 f AX AX
  differ-FREE    : differ name1 name2 f FREE FREE
  differ-MSEQ    : (s : ùïä) ‚Üí differ name1 name2 f (MSEQ s) (MSEQ s)
  differ-MAPP    : (s : ùïä) (a‚ÇÅ a‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f (MAPP s a‚ÇÅ) (MAPP s a‚ÇÇ)
--  differ-CS      : (name : Name) ‚Üí differ name1 name2 f (CS name) (CS name)
--  differ-NAME    : (name : Name) ‚Üí differ name1 name2 f (NAME name) (NAME name)
--  differ-FRESH   : (a b : Term) ‚Üí differ (suc name1) (suc name2) (shiftNameUp 0 f) a b ‚Üí differ name1 name2 f (FRESH a) (FRESH b)
  differ-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  differ-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí differ name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differ-TSQUASH : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TSQUASH a) (TSQUASH b)
--  differ-TTRUNC  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TTRUNC a) (TTRUNC b)
  differ-NOWRITE : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (NOWRITE a) (NOWRITE b)
  differ-NOREAD  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (NOREAD a) (NOREAD b)
  differ-SUBSING : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SUBSING a) (SUBSING b)
  differ-PURE    : differ name1 name2 f PURE PURE
  differ-NOSEQ   : differ name1 name2 f NOSEQ NOSEQ
  differ-TERM    : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (TERM a) (TERM b)
  differ-ENC     : (a : Term) ‚Üí differ name1 name2 f a a ‚Üí differ name1 name2 f (ENC a) (ENC a)
  differ-DUM     : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (DUM a) (DUM b)
  differ-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí differ name1 name2 f (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  differ-UNIV    : (x : ‚Ñï) ‚Üí differ name1 name2 f (UNIV x) (UNIV x)
  differ-LIFT    : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LIFT a) (LIFT b)
  differ-LOWER   : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (LOWER a) (LOWER b)
  differ-SHRINK  : (a b : Term) ‚Üí differ name1 name2 f a b ‚Üí differ name1 name2 f (SHRINK a) (SHRINK b)
  differ-upd     : differ name1 name2 f (upd name1 f) (upd name2 f)



‚àà‚Ñï : (w : ùïé¬∑) (t : Term) ‚Üí Set(lsuc(L))
‚àà‚Ñï w t = Œ£ ‚Ñï (Œª n ‚Üí t ‚áõ (NUM n) at w)



differ-NUM‚Üí : {name1 name2 : Name} {f t : Term} {m : ‚Ñï}
               ‚Üí differ name1 name2 f (NUM m) t
               ‚Üí t ‚â° NUM m
differ-NUM‚Üí {name1} {name2} {f} {.(NUM m)} {m} (differ-NUM .m) = refl



differ-MSEQ‚Üí : {name1 name2 : Name} {f t : Term} {s : ùïä}
               ‚Üí differ name1 name2 f (MSEQ s) t
               ‚Üí t ‚â° MSEQ s
differ-MSEQ‚Üí {name1} {name2} {f} {.(MSEQ s)} {s} (differ-MSEQ .s) = refl



{--
differ-CS‚Çó‚Üí : {name1 name2 name : Name} {f t : Term} ‚Üí ¬¨ differ name1 name2 f (CS name) t
differ-CS‚Çó‚Üí {name1} {name2} {name} {f} {t} ()


differ-NAME‚Çó‚Üí : {name1 name2 name : Name} {f t : Term} ‚Üí ¬¨ differ name1 name2 f (NAME name) t
differ-NAME‚Çó‚Üí {name1} {name2} {name} {f} {t} ()
--}



differ-LAMBDA‚Çó‚Üí : {name1 name2 : Name} {f g t : Term}
                  ‚Üí differ name1 name2 f (LAMBDA g) t
                  ‚Üí Œ£ Term (Œª g' ‚Üí t ‚â° LAMBDA g' √ó differ name1 name2 f g g')
                    ‚äé (g ‚â° updBody name1 f √ó t ‚â° upd name2 f)
differ-LAMBDA‚Çó‚Üí {name1} {name2} {f} {g} {.(LAMBDA b)} (differ-LAMBDA .g b d) = inj‚ÇÅ (b , refl , d)
differ-LAMBDA‚Çó‚Üí {name1} {name2} {f} {.(updBody name1 f)} {.(upd name2 f)} differ-upd = inj‚ÇÇ (refl , refl)


differ-PAIR‚Çó‚Üí : {name1 name2 : Name} {f a b t : Term}
                  ‚Üí differ name1 name2 f (PAIR a b) t
                  ‚Üí Œ£ Term (Œª a' ‚Üí Œ£ Term (Œª b' ‚Üí t ‚â° PAIR a' b' √ó differ name1 name2 f a a' √ó differ name1 name2 f b b'))
differ-PAIR‚Çó‚Üí {name1} {name2} {f} {a} {b} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR .a a‚ÇÇ .b b‚ÇÇ diff diff‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , diff , diff‚ÇÅ


differ-SUP‚Çó‚Üí : {name1 name2 : Name} {f a b t : Term}
                  ‚Üí differ name1 name2 f (SUP a b) t
                  ‚Üí Œ£ Term (Œª a' ‚Üí Œ£ Term (Œª b' ‚Üí t ‚â° SUP a' b' √ó differ name1 name2 f a a' √ó differ name1 name2 f b b'))
differ-SUP‚Çó‚Üí {name1} {name2} {f} {a} {b} {.(SUP a‚ÇÇ b‚ÇÇ)} (differ-SUP .a a‚ÇÇ .b b‚ÇÇ diff diff‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , diff , diff‚ÇÅ


{--
differ-MSUP‚Çó‚Üí : {name1 name2 : Name} {f a b t : Term}
                  ‚Üí differ name1 name2 f (MSUP a b) t
                  ‚Üí Œ£ Term (Œª a' ‚Üí Œ£ Term (Œª b' ‚Üí t ‚â° MSUP a' b' √ó differ name1 name2 f a a' √ó differ name1 name2 f b b'))
differ-MSUP‚Çó‚Üí {name1} {name2} {f} {a} {b} {.(MSUP a‚ÇÇ b‚ÇÇ)} (differ-MSUP .a a‚ÇÇ .b b‚ÇÇ diff diff‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , diff , diff‚ÇÅ
--}


differ-INL‚Çó‚Üí : {name1 name2 : Name} {f a t : Term}
                ‚Üí differ name1 name2 f (INL a) t
                ‚Üí Œ£ Term (Œª a' ‚Üí t ‚â° INL a' √ó differ name1 name2 f a a')
differ-INL‚Çó‚Üí {name1} {name2} {f} {a} {.(INL a‚ÇÇ)} (differ-INL .a a‚ÇÇ diff) = a‚ÇÇ , refl , diff


differ-INR‚Çó‚Üí : {name1 name2 : Name} {f a t : Term}
                ‚Üí differ name1 name2 f (INR a) t
                ‚Üí Œ£ Term (Œª a' ‚Üí t ‚â° INR a' √ó differ name1 name2 f a a')
differ-INR‚Çó‚Üí {name1} {name2} {f} {a} {.(INR a‚ÇÇ)} (differ-INR .a a‚ÇÇ diff) = a‚ÇÇ , refl , diff



abstract

  ‚Üídiffer-shiftUp : (v : Var) {name1 name2 : Name} {f : Term} (cf : # f) {a b : Term}
                     ‚Üí differ name1 name2 f a b
                     ‚Üí differ name1 name2 f (shiftUp v a) (shiftUp v b)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(VAR x)} {.(VAR x)} (differ-VAR x) = differ-VAR _
--  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.NAT} {.NAT} differ-NAT = differ-NAT
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.QNAT} {.QNAT} differ-QNAT = differ-QNAT
--  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.TNAT} {.TNAT} differ-TNAT = differ-TNAT
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QLT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(NUM x)} {.(NUM x)} (differ-NUM x) = differ-NUM x
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFLT _ _ _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ) (‚Üídiffer-shiftUp v cf diff‚ÇÉ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFEQ _ _ _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ) (‚Üídiffer-shiftUp v cf diff‚ÇÉ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUC a)} {.(SUC b)} (differ-SUC a b diff) = differ-SUC _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PI _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) = differ-LAMBDA _ _ (‚Üídiffer-shiftUp (suc v) cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-APPLY _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(FIX a)} {.(FIX b)} (differ-FIX a b diff) = differ-FIX _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LET _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (differ-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-WT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differ-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUP _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(DSUP a‚ÇÅ b‚ÇÅ)} {.(DSUP a‚ÇÇ b‚ÇÇ)} (differ-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-DSUP _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc (suc v)) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (differ-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-WREC _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc (suc (suc v))) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (differ-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-MT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (differ-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-MSUP _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(DMSUP a‚ÇÅ b‚ÇÅ)} {.(DMSUP a‚ÇÇ b‚ÇÇ)} (differ-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-DMSUP _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc (suc v)) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUM _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PAIR _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SPREAD _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc (suc v)) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SET _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differ-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-ISECT _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-TUNION _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-UNION _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
--  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QTUNION _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(INL a)} {.(INL b)} (differ-INL a b diff) = differ-INL _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(INR a)} {.(INR b)} (differ-INR a b diff) = differ-INR _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-DECIDE _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÅ) (‚Üídiffer-shiftUp (suc v) cf diff‚ÇÇ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-EQ _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ)
--  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-EQB _ _ _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ) (‚Üídiffer-shiftUp v cf diff‚ÇÉ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.AX} {.AX} differ-AX = differ-AX
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.FREE} {.FREE} differ-FREE = differ-FREE
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.MSEQ s} {.MSEQ s} (differ-MSEQ s) = differ-MSEQ s
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (differ-MAPP s a‚ÇÅ a‚ÇÇ diff) = differ-MAPP _ _ _ (‚Üídiffer-shiftUp v cf diff)
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(CS name)} {.(CS name)} (differ-CS name) = differ-CS name
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(NAME name)} {.(NAME name)} (differ-NAME name) = differ-NAME name
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(FRESH a)} {.(FRESH b)} (differ-FRESH a b diff) = differ-FRESH _ _ (‚Üídiffer-shiftUp v (‚Üí#shiftNameUp 0 {f} cf) diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-CHOOSE _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-IFC0 _ _ _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ) (‚Üídiffer-shiftUp v cf diff‚ÇÇ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) = differ-TSQUASH _ _ (‚Üídiffer-shiftUp v cf diff)
--  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) = differ-TTRUNC _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(NOWRITE a)} {.(NOWRITE b)} (differ-NOWRITE a b diff) = differ-NOWRITE _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(NOREAD a)} {.(NOREAD b)} (differ-NOREAD a b diff) = differ-NOREAD _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) = differ-SUBSING _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(PURE)} {.(PURE)} (differ-PURE) = differ-PURE
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(NOSEQ)} {.(NOSEQ)} (differ-NOSEQ) = differ-NOSEQ
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(TERM a)} {.(TERM b)} (differ-TERM a b diff) = differ-TERM _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(ENC a)} {.(ENC a)} (differ-ENC a d) = differ-ENC _ d
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) = differ-DUM _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-FFDEFS _ _ _ _ (‚Üídiffer-shiftUp v cf diff) (‚Üídiffer-shiftUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) = differ-UNIV x
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) = differ-LIFT _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) = differ-LOWER _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) = differ-SHRINK _ _ (‚Üídiffer-shiftUp v cf diff)
  ‚Üídiffer-shiftUp v {name1} {name2} {f} cf {.(upd name1 f)} {.(upd name2 f)} differ-upd rewrite sucIf‚â§s0 v | #shiftUp (suc (suc (suc v))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = differ-upd



‚â°LT : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí LT a c ‚â° LT b d
‚â°LT {a} {b} {c} {d} e f rewrite e | f = refl


‚â°QLT : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí QLT a c ‚â° QLT b d
‚â°QLT {a} {b} {c} {d} e f rewrite e | f = refl


‚â°APPLY : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí APPLY a c ‚â° APPLY b d
‚â°APPLY {a} {b} {c} {d} e f rewrite e | f = refl


‚â°MAPP : {a b : ùïä} {c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí MAPP a c ‚â° MAPP b d
‚â°MAPP {a} {b} {c} {d} e f rewrite e | f = refl


‚â°IFLT : {a b c d e f g h : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí e ‚â° f ‚Üí g ‚â° h ‚Üí IFLT a c e g ‚â° IFLT b d f h
‚â°IFLT {a} {b} {c} {d} {e} {f} {g} {h} x y z w rewrite x | y | z | w = refl


‚â°IFEQ : {a b c d e f g h : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí e ‚â° f ‚Üí g ‚â° h ‚Üí IFEQ a c e g ‚â° IFEQ b d f h
‚â°IFEQ {a} {b} {c} {d} {e} {f} {g} {h} x y z w rewrite x | y | z | w = refl


‚â°EQ : {a b c d e f : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí e ‚â° f ‚Üí EQ a c e ‚â° EQ b d f
‚â°EQ {a} {b} {c} {d} {e} {f} x y z rewrite x | y | z = refl


--‚â°EQB : {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ a‚ÇÉ b‚ÇÉ a‚ÇÑ b‚ÇÑ : Term} ‚Üí a‚ÇÅ ‚â° b‚ÇÅ ‚Üí a‚ÇÇ ‚â° b‚ÇÇ ‚Üí a‚ÇÉ ‚â° b‚ÇÉ ‚Üí a‚ÇÑ ‚â° b‚ÇÑ ‚Üí EQB a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ ‚â° EQB b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ
--‚â°EQB {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÇ} {b‚ÇÇ} {a‚ÇÉ} {b‚ÇÉ} {a‚ÇÑ} {b‚ÇÑ} x y z w rewrite x | y | z | w = refl


‚â°DECIDE : {a b c d e f : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí e ‚â° f ‚Üí DECIDE a c e ‚â° DECIDE b d f
‚â°DECIDE {a} {b} {c} {d} {e} {f} x y z rewrite x | y | z = refl


‚â°LET : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí LET a c ‚â° LET b d
‚â°LET {a} {b} {c} {d} e f rewrite e | f = refl


‚â°SUP : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí SUP a c ‚â° SUP b d
‚â°SUP {a} {b} {c} {d} e f rewrite e | f = refl


--‚â°MSUP : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí MSUP a c ‚â° MSUP b d
--‚â°MSUP {a} {b} {c} {d} e f rewrite e | f = refl


‚â°PAIR : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí PAIR a c ‚â° PAIR b d
‚â°PAIR {a} {b} {c} {d} e f rewrite e | f = refl


--‚â°DSUP : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí DSUP a c ‚â° DSUP b d
--‚â°DSUP {a} {b} {c} {d} e f rewrite e | f = refl


‚â°WREC : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí WREC a c ‚â° WREC b d
‚â°WREC {a} {b} {c} {d} e f rewrite e | f = refl


--‚â°DMSUP : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí DMSUP a c ‚â° DMSUP b d
--‚â°DMSUP {a} {b} {c} {d} e f rewrite e | f = refl


‚â°SPREAD : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí SPREAD a c ‚â° SPREAD b d
‚â°SPREAD {a} {b} {c} {d} e f rewrite e | f = refl


‚â°CHOOSE : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí CHOOSE a c ‚â° CHOOSE b d
‚â°CHOOSE {a} {b} {c} {d} e f rewrite e | f = refl


‚â°FFDEFS : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí FFDEFS a c ‚â° FFDEFS b d
‚â°FFDEFS {a} {b} {c} {d} e f rewrite e | f = refl


‚â°SUC : {a b : Term} ‚Üí a ‚â° b ‚Üí SUC a ‚â° SUC b
‚â°SUC {a} {b} e rewrite e = refl


‚â°FRESH : {a b : Term} ‚Üí a ‚â° b ‚Üí FRESH a ‚â° FRESH b
‚â°FRESH {a} {b} e rewrite e = refl


‚â°LOAD : {a b : Term} ‚Üí a ‚â° b ‚Üí LOAD a ‚â° LOAD b
‚â°LOAD {a} {b} e rewrite e = refl


‚â°LAMBDA : {a b : Term} ‚Üí a ‚â° b ‚Üí LAMBDA a ‚â° LAMBDA b
‚â°LAMBDA {a} {b} e rewrite e = refl


‚â°FIX : {a b : Term} ‚Üí a ‚â° b ‚Üí FIX a ‚â° FIX b
‚â°FIX {a} {b} e rewrite e = refl


‚â°INL : {a b : Term} ‚Üí a ‚â° b ‚Üí INL a ‚â° INL b
‚â°INL {a} {b} e rewrite e = refl


‚â°INR : {a b : Term} ‚Üí a ‚â° b ‚Üí INR a ‚â° INR b
‚â°INR {a} {b} e rewrite e = refl


‚â°TSQUASH : {a b : Term} ‚Üí a ‚â° b ‚Üí TSQUASH a ‚â° TSQUASH b
‚â°TSQUASH {a} {b} e rewrite e = refl


--‚â°TTRUNC : {a b : Term} ‚Üí a ‚â° b ‚Üí TTRUNC a ‚â° TTRUNC b
--‚â°TTRUNC {a} {b} e rewrite e = refl


‚â°NOWRITE : {a b : Term} ‚Üí a ‚â° b ‚Üí NOWRITE a ‚â° NOWRITE b
‚â°NOWRITE {a} {b} e rewrite e = refl


‚â°NOREAD : {a b : Term} ‚Üí a ‚â° b ‚Üí NOREAD a ‚â° NOREAD b
‚â°NOREAD {a} {b} e rewrite e = refl


‚â°SUBSING : {a b : Term} ‚Üí a ‚â° b ‚Üí SUBSING a ‚â° SUBSING b
‚â°SUBSING {a} {b} e rewrite e = refl


‚â°LIFT : {a b : Term} ‚Üí a ‚â° b ‚Üí LIFT a ‚â° LIFT b
‚â°LIFT {a} {b} e rewrite e = refl


‚â°LOWER : {a b : Term} ‚Üí a ‚â° b ‚Üí LOWER a ‚â° LOWER b
‚â°LOWER {a} {b} e rewrite e = refl


‚â°SHRINK : {a b : Term} ‚Üí a ‚â° b ‚Üí SHRINK a ‚â° SHRINK b
‚â°SHRINK {a} {b} e rewrite e = refl


‚â°DUM : {a b : Term} ‚Üí a ‚â° b ‚Üí DUM a ‚â° DUM b
‚â°DUM {a} {b} e rewrite e = refl


‚â°TERM : {a b : Term} ‚Üí a ‚â° b ‚Üí TERM a ‚â° TERM b
‚â°TERM {a} {b} e rewrite e = refl


‚â°ENC : {a b : Term} ‚Üí a ‚â° b ‚Üí ENC a ‚â° ENC b
‚â°ENC {a} {b} e rewrite e = refl


‚â°NAME : {a b : Name} ‚Üí a ‚â° b ‚Üí NAME a ‚â° NAME b
‚â°NAME {a} {b} e rewrite e = refl


‚â°CS : {a b : Name} ‚Üí a ‚â° b ‚Üí CS a ‚â° CS b
‚â°CS {a} {b} e rewrite e = refl


‚â°MSEQ : {a b : ùïä} ‚Üí a ‚â° b ‚Üí MSEQ a ‚â° MSEQ b
‚â°MSEQ {a} {b} e rewrite e = refl



{--
sucIf‚â§-sucIf‚â§ : {x i j : Name}
                ‚Üí i ‚â§ x
                ‚Üí sucIf‚â§ i (sucIf‚â§ j x) ‚â° sucIf‚â§ (suc j) (sucIf‚â§ i x)
sucIf‚â§-sucIf‚â§ {x} {i} {j} lex with x <? j
... | yes p with x <? i
... |    yes q = ‚ä•-elim (n‚âÆn (suc x) (_‚â§_.s‚â§s (‚â§-trans q lex)))
... |    no q with suc x <? suc j
... |       yes r = refl
... |       no r = ‚ä•-elim (r (_‚â§_.s‚â§s p))
sucIf‚â§-sucIf‚â§ {x} {i} {j} lex | no p with x <? i
... |    yes q = ‚ä•-elim (n‚âÆn (suc x) (_‚â§_.s‚â§s (‚â§-trans q lex)))
... |    no q with suc x <? i
... |       yes r = ‚ä•-elim (q (‚â§-trans (<‚áí‚â§ (n<1+n (suc x))) r))
... |       no r with suc x <? suc j
... |          yes s = ‚ä•-elim (p (s‚â§s-inj s))
... |          no s = refl
--}


sucIf‚â§-sucIf‚â§ : {x i j : Name}
                ‚Üí i ‚â§ j
                ‚Üí sucIf‚â§ i (sucIf‚â§ j x) ‚â° sucIf‚â§ (suc j) (sucIf‚â§ i x)
sucIf‚â§-sucIf‚â§ {x} {i} {j} lex with x <? j
... | yes p with x <? i
... |    yes q with x <? suc j
... |       yes r = refl
... |       no r = ‚ä•-elim (r (‚â§-trans p (<‚áí‚â§ ‚â§-refl)))
sucIf‚â§-sucIf‚â§ {x} {i} {j} lex | yes p | no q with suc x <? suc j
... |       yes r = refl
... |       no r = ‚ä•-elim (r (_‚â§_.s‚â§s p))
sucIf‚â§-sucIf‚â§ {x} {i} {j} lex | no p with x <? i
... |    yes q = ‚ä•-elim (p (‚â§-trans q lex))
... |    no q with suc x <? i
... |       yes r = ‚ä•-elim (q (‚â§-trans (<‚áí‚â§ (n<1+n (suc x))) r))
... |       no r with suc x <? suc j
... |          yes s = ‚ä•-elim (p (s‚â§s-inj s))
... |          no s = refl



suc‚Üí‚ààlowerNames : {x : Name} {a : List Name}
                   ‚Üí suc x ‚àà a
                   ‚Üí x ‚àà lowerNames a
suc‚Üí‚ààlowerNames {x} {0 ‚à∑ a} (there i) = suc‚Üí‚ààlowerNames {x} {a} i
suc‚Üí‚ààlowerNames {x} {suc x‚ÇÅ ‚à∑ a} (here px) rewrite suc-injective px = here refl
suc‚Üí‚ààlowerNames {x} {suc x‚ÇÅ ‚à∑ a} (there i) = there (suc‚Üí‚ààlowerNames {x} {a} i)


{--
shiftNameUp-shiftNameUp : {i j : ‚Ñï} {t : Term}
                          ‚Üí ((n : Name) ‚Üí n ‚àà names t ‚Üí i ‚â§ n)
                          ‚Üí shiftNameUp i (shiftNameUp j t)
                             ‚â° shiftNameUp (suc j) (shiftNameUp i t)
shiftNameUp-shiftNameUp {i} {j} {VAR x} imp = refl
--shiftNameUp-shiftNameUp {i} {j} {NAT} imp = refl
shiftNameUp-shiftNameUp {i} {j} {QNAT} imp = refl
--shiftNameUp-shiftNameUp {i} {j} {TNAT} imp = refl
shiftNameUp-shiftNameUp {i} {j} {LT t t‚ÇÅ} imp = ‚â°LT (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {QLT t t‚ÇÅ} imp = ‚â°QLT (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {NUM x} imp = refl
shiftNameUp-shiftNameUp {i} {j} {IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ} imp = ‚â°IFLT (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° k)))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫À° k))))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÉ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫ ≥ (names t‚ÇÇ) k)))))
shiftNameUp-shiftNameUp {i} {j} {IFEQ t t‚ÇÅ t‚ÇÇ t‚ÇÉ} imp = ‚â°IFEQ (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° k)))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫À° k))))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÉ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫ ≥ (names t‚ÇÇ) k)))))
shiftNameUp-shiftNameUp {i} {j} {SUC t} imp = ‚â°SUC (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {PI t t‚ÇÅ} imp = ‚â°PI (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {LAMBDA t} imp = ‚â°LAMBDA (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {APPLY t t‚ÇÅ} imp = ‚â°APPLY (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {FIX t} imp = ‚â°FIX (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {LET t t‚ÇÅ} imp = ‚â°LET (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {SUM t t‚ÇÅ} imp = ‚â°SUM (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {PAIR t t‚ÇÅ} imp = ‚â°PAIR (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {SPREAD t t‚ÇÅ} imp = ‚â°SPREAD (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {SET t t‚ÇÅ} imp = ‚â°SET (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {ISECT t t‚ÇÅ} imp = ‚â°ISECT (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {TUNION t t‚ÇÅ} imp = ‚â°TUNION (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {UNION t t‚ÇÅ} imp = ‚â°UNION (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
--shiftNameUp-shiftNameUp {i} {j} {QTUNION t t‚ÇÅ} imp = ‚â°QTUNION (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {INL t} imp = ‚â°INL (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {INR t} imp = ‚â°INR (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {DECIDE t t‚ÇÅ t‚ÇÇ} imp = ‚â°DECIDE (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° k)))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) k))))
shiftNameUp-shiftNameUp {i} {j} {EQ t t‚ÇÅ t‚ÇÇ} imp = ‚â°EQ (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° k)))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) k))))
shiftNameUp-shiftNameUp {i} {j} {AX} imp = refl
shiftNameUp-shiftNameUp {i} {j} {FREE} imp = refl
shiftNameUp-shiftNameUp {i} {j} {CS x} imp = ‚â°CS (sucIf‚â§-sucIf‚â§ {x} {i} {j} (imp x (here refl)))
shiftNameUp-shiftNameUp {i} {j} {NAME x} imp = ‚â°NAME (sucIf‚â§-sucIf‚â§ {x} {i} {j} (imp x (here refl)))
shiftNameUp-shiftNameUp {i} {j} {FRESH t} imp = ‚â°FRESH (shiftNameUp-shiftNameUp {suc i} {suc j} {t} c)
  where
    c : (n : Name) ‚Üí n ‚àà names t ‚Üí suc i ‚â§ n
    c 0 z = {!!}
    c (suc n) z = _‚â§_.s‚â§s (imp n (suc‚Üí‚ààlowerNames {n} {names t} z))
shiftNameUp-shiftNameUp {i} {j} {LOAD t} imp = ‚â°LOAD (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {CHOOSE t t‚ÇÅ} imp = ‚â°CHOOSE (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {TSQUASH t} imp = ‚â°TSQUASH (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {TTRUNC t} imp = ‚â°TTRUNC (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {NOWRITE t} imp = ‚â°NOWRITE (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {SUBSING t} imp = ‚â°SUBSING (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {NN t} imp = ‚â°NN (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {DUM t} imp = ‚â°DUM (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {FFDEFS t t‚ÇÅ} imp = ‚â°FFDEFS (shiftNameUp-shiftNameUp {i} {j} {t} (Œª n k ‚Üí imp n (‚àà-++‚Å∫À° k))) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} (Œª n k ‚Üí imp n (‚àà-++‚Å∫ ≥ (names t) k)))
shiftNameUp-shiftNameUp {i} {j} {UNIV x} imp = refl
shiftNameUp-shiftNameUp {i} {j} {LIFT t} imp = ‚â°LIFT (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {LOWER t} imp = ‚â°LOWER (shiftNameUp-shiftNameUp {i} {j} {t} imp)
shiftNameUp-shiftNameUp {i} {j} {SHRINK t} imp = ‚â°SHRINK (shiftNameUp-shiftNameUp {i} {j} {t} imp)
--}


abstract

  shiftNameUp-shiftNameUp : {i j : ‚Ñï} {t : Term}
                            ‚Üí i ‚â§ j
                            ‚Üí shiftNameUp i (shiftNameUp j t)
                               ‚â° shiftNameUp (suc j) (shiftNameUp i t)
  shiftNameUp-shiftNameUp {i} {j} {VAR x} imp = refl
--  shiftNameUp-shiftNameUp {i} {j} {NAT} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {QNAT} imp = refl
--  shiftNameUp-shiftNameUp {i} {j} {TNAT} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {LT t t‚ÇÅ} imp = ‚â°LT (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {QLT t t‚ÇÅ} imp = ‚â°QLT (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {NUM x} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ} imp = ‚â°IFLT (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÉ} imp)
  shiftNameUp-shiftNameUp {i} {j} {IFEQ t t‚ÇÅ t‚ÇÇ t‚ÇÉ} imp = ‚â°IFEQ (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÉ} imp)
  shiftNameUp-shiftNameUp {i} {j} {SUC t} imp = ‚â°SUC (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {PI t t‚ÇÅ} imp = ‚â°PI (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {LAMBDA t} imp = ‚â°LAMBDA (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {APPLY t t‚ÇÅ} imp = ‚â°APPLY (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {FIX t} imp = ‚â°FIX (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {LET t t‚ÇÅ} imp = ‚â°LET (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {WT t t‚ÇÅ} imp = ‚â°WT (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {SUP t t‚ÇÅ} imp = ‚â°SUP (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  --shiftNameUp-shiftNameUp {i} {j} {DSUP t t‚ÇÅ} imp = ‚â°DSUP (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {WREC t t‚ÇÅ} imp = ‚â°WREC (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {MT t t‚ÇÅ} imp = ‚â°MT (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  --shiftNameUp-shiftNameUp {i} {j} {MSUP t t‚ÇÅ} imp = ‚â°MSUP (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  --shiftNameUp-shiftNameUp {i} {j} {DMSUP t t‚ÇÅ} imp = ‚â°DMSUP (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {SUM t t‚ÇÅ} imp = ‚â°SUM (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {PAIR t t‚ÇÅ} imp = ‚â°PAIR (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {SPREAD t t‚ÇÅ} imp = ‚â°SPREAD (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {SET t t‚ÇÅ} imp = ‚â°SET (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {ISECT t t‚ÇÅ} imp = ‚â°ISECT (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {TUNION t t‚ÇÅ} imp = ‚â°TUNION (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {UNION t t‚ÇÅ} imp = ‚â°UNION (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
--  shiftNameUp-shiftNameUp {i} {j} {QTUNION t t‚ÇÅ} imp = ‚â°QTUNION (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {INL t} imp = ‚â°INL (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {INR t} imp = ‚â°INR (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {DECIDE t t‚ÇÅ t‚ÇÇ} imp = ‚â°DECIDE (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} imp)
  shiftNameUp-shiftNameUp {i} {j} {EQ t t‚ÇÅ t‚ÇÇ} imp = ‚â°EQ (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} imp)
--  shiftNameUp-shiftNameUp {i} {j} {EQB t t‚ÇÅ t‚ÇÇ t‚ÇÉ} imp = ‚â°EQB (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÇ} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÉ} imp)
  shiftNameUp-shiftNameUp {i} {j} {AX} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {FREE} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {MSEQ x} imp = ‚â°MSEQ refl
  shiftNameUp-shiftNameUp {i} {j} {MAPP s t} imp = ‚â°MAPP refl (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {CS x} imp = ‚â°CS (sucIf‚â§-sucIf‚â§ {x} {i} {j} imp)
  shiftNameUp-shiftNameUp {i} {j} {NAME x} imp = ‚â°NAME (sucIf‚â§-sucIf‚â§ {x} {i} {j} imp)
  shiftNameUp-shiftNameUp {i} {j} {FRESH t} imp = ‚â°FRESH (shiftNameUp-shiftNameUp {suc i} {suc j} {t} (_‚â§_.s‚â§s imp))
  shiftNameUp-shiftNameUp {i} {j} {LOAD t} imp = refl --‚â°LOAD (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {CHOOSE t t‚ÇÅ} imp = ‚â°CHOOSE (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {TSQUASH t} imp = ‚â°TSQUASH (shiftNameUp-shiftNameUp {i} {j} {t} imp)
--  shiftNameUp-shiftNameUp {i} {j} {TTRUNC t} imp = ‚â°TTRUNC (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {NOWRITE t} imp = ‚â°NOWRITE (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {NOREAD t} imp = ‚â°NOREAD (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {SUBSING t} imp = ‚â°SUBSING (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {PURE} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {NOSEQ} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {TERM t} imp = ‚â°TERM (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {ENC t} imp = ‚â°ENC (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {DUM t} imp = ‚â°DUM (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {FFDEFS t t‚ÇÅ} imp = ‚â°FFDEFS (shiftNameUp-shiftNameUp {i} {j} {t} imp) (shiftNameUp-shiftNameUp {i} {j} {t‚ÇÅ} imp)
  shiftNameUp-shiftNameUp {i} {j} {UNIV x} imp = refl
  shiftNameUp-shiftNameUp {i} {j} {LIFT t} imp = ‚â°LIFT (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {LOWER t} imp = ‚â°LOWER (shiftNameUp-shiftNameUp {i} {j} {t} imp)
  shiftNameUp-shiftNameUp {i} {j} {SHRINK t} imp = ‚â°SHRINK (shiftNameUp-shiftNameUp {i} {j} {t} imp)



suc-sucIf‚â§ : (i j : ‚Ñï) ‚Üí suc (sucIf‚â§ i j) ‚â° sucIf‚â§ (suc i) (suc j)
suc-sucIf‚â§ i j with j <? i
... | yes p with suc j <? suc i
... |    yes q = refl
... |    no q = ‚ä•-elim (q (_‚â§_.s‚â§s p))
suc-sucIf‚â§ i j | no p with suc j <? suc i
... |    yes q = ‚ä•-elim (p (s‚â§s-inj q))
... |    no q = refl



abstract

  ‚Üídiffer-shiftNameUp : (v : Var) {name1 name2 : Name} {f : Term} (cf : # f) {a b : Term}
                         ‚Üí differ name1 name2 f a b
                         ‚Üí differ (sucIf‚â§ v name1) (sucIf‚â§ v name2) (shiftNameUp v f) (shiftNameUp v a) (shiftNameUp v b)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(VAR x)} {.(VAR x)} (differ-VAR x) = differ-VAR _
--  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.NAT} {.NAT} differ-NAT = differ-NAT
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.QNAT} {.QNAT} differ-QNAT = differ-QNAT
--  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.TNAT} {.TNAT} differ-TNAT = differ-TNAT
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LT _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QLT _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(NUM x)} {.(NUM x)} (differ-NUM x) = differ-NUM x
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFLT _ _ _ _ _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÇ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÉ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFEQ _ _ _ _ _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÇ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÉ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SUC a)} {.(SUC b)} (differ-SUC a b diff) = differ-SUC _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PI _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) = differ-LAMBDA _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-APPLY _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(FIX a)} {.(FIX b)} (differ-FIX a b diff) = differ-FIX _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LET _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (differ-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-WT _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differ-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUP _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(DSUP a‚ÇÅ b‚ÇÅ)} {.(DSUP a‚ÇÇ b‚ÇÇ)} (differ-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-DSUP _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (differ-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-WREC _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (differ-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-MT _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (differ-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-MSUP _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(DMSUP a‚ÇÅ b‚ÇÅ)} {.(DMSUP a‚ÇÇ b‚ÇÇ)} (differ-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-DMSUP _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUM _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PAIR _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SPREAD _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SET _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differ-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-ISECT _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-TUNION _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-UNION _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
--  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QTUNION _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(INL a)} {.(INL b)} (differ-INL a b diff) = differ-INL _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(INR a)} {.(INR b)} (differ-INR a b diff) = differ-INR _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-DECIDE _ _ _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÇ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-EQ _ _ _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÇ)
--  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-EQB _ _ _ _ _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÇ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÉ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.AX} {.AX} differ-AX = differ-AX
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.FREE} {.FREE} differ-FREE = differ-FREE
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(MSEQ x)} {.(MSEQ x)} (differ-MSEQ x) = differ-MSEQ _
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (differ-MAPP s a‚ÇÅ a‚ÇÇ diff) = differ-MAPP _ _ _ (‚Üídiffer-shiftNameUp v cf diff)
  --‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(CS name)} {.(CS name)} (differ-CS name) = differ-CS _
  --‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(NAME name)} {.(NAME name)} (differ-NAME name) = differ-NAME _
  {--‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(FRESH a)} {.(FRESH b)} (differ-FRESH a b diff) = differ-FRESH (shiftNameUp (suc v) a) (shiftNameUp (suc v) b) c1
    where
      c3 : differ (sucIf‚â§ (suc v) (suc name1))
                  (sucIf‚â§ (suc v) (suc name2))
                  (shiftNameUp (suc v) (shiftNameUp 0 f))
                  (shiftNameUp (suc v) a)
                  (shiftNameUp (suc v) b)
      c3 = ‚Üídiffer-shiftNameUp (suc v) {suc name1} {suc name2} (‚Üí#shiftNameUp 0 {f} cf) diff

      c2 : differ (suc (sucIf‚â§ v name1))
                  (suc (sucIf‚â§ v name2))
                  (shiftNameUp (suc v) (shiftNameUp 0 f))
                  (shiftNameUp (suc v) a)
                  (shiftNameUp (suc v) b)
      c2 rewrite suc-sucIf‚â§ v name1 | suc-sucIf‚â§ v name2 = c3

      c1 : differ (suc (sucIf‚â§ v name1))
                  (suc (sucIf‚â§ v name2))
                  (shiftNameUp 0 (shiftNameUp v f))
                  (shiftNameUp (suc v) a)
                  (shiftNameUp (suc v) b)
      c1 rewrite shiftNameUp-shiftNameUp {0} {v} {f} _‚â§_.z‚â§n = c2--}
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-CHOOSE _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  --‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-IFC0 _ _ _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ) (‚Üídiffer-shiftNameUp v cf diff‚ÇÇ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) = differ-TSQUASH _ _ (‚Üídiffer-shiftNameUp v cf diff)
--  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) = differ-TTRUNC _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(NOWRITE a)} {.(NOWRITE b)} (differ-NOWRITE a b diff) = differ-NOWRITE _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(NOREAD a)} {.(NOREAD b)} (differ-NOREAD a b diff) = differ-NOREAD _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) = differ-SUBSING _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(PURE)} {.(PURE)} (differ-PURE) = differ-PURE
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(NOSEQ)} {.(NOSEQ)} (differ-NOSEQ) = differ-NOSEQ
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(TERM a)} {.(TERM b)} (differ-TERM a b diff) = differ-TERM _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(ENC a)} {.(ENC a)} (differ-ENC a d) = differ-ENC _ (‚Üídiffer-shiftNameUp v cf d)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) = differ-DUM _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-FFDEFS _ _ _ _ (‚Üídiffer-shiftNameUp v cf diff) (‚Üídiffer-shiftNameUp v cf diff‚ÇÅ)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) = differ-UNIV x
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) = differ-LIFT _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) = differ-LOWER _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) = differ-SHRINK _ _ (‚Üídiffer-shiftNameUp v cf diff)
  ‚Üídiffer-shiftNameUp v {name1} {name2} {f} cf {.(upd name1 f)} {.(upd name2 f)} differ-upd = c2
    where
      c1 : differ (sucIf‚â§ v name1) (sucIf‚â§ v name2) (shiftNameUp v f) (upd (sucIf‚â§ v name1) (shiftNameUp v f)) (upd (sucIf‚â§ v name2) (shiftNameUp v f))
      c1 = differ-upd

      c2 : differ (sucIf‚â§ v name1) (sucIf‚â§ v name2) (shiftNameUp v f)
                  (LAMBDA (LET (VAR 0)
                               (LET (IFLT (APPLY (CS (sucIf‚â§ v name1)) (NUM 0)) (VAR 0)
                                          (CHOOSE (NAME (sucIf‚â§ v name1)) (VAR 0)) AX)
                                    (APPLY (shiftNameUp v (shiftUp 0 f)) (VAR (sucIf‚â§ 0 0))))))
                  (LAMBDA (LET (VAR 0)
                               (LET (IFLT (APPLY (CS (sucIf‚â§ v name2)) (NUM 0)) (VAR 0)
                                          (CHOOSE (NAME (sucIf‚â§ v name2)) (VAR 0)) AX)
                                    (APPLY (shiftNameUp v (shiftUp 0 f)) (VAR (sucIf‚â§ 0 0))))))
      c2 rewrite sym (shiftUp-shiftNameUp 0 v f)  = c1



suc‚â°sucIf‚â§0 : (n : ‚Ñï) ‚Üí suc n ‚â° sucIf‚â§ 0 n
suc‚â°sucIf‚â§0 n with n <? 0
... | yes p = refl
... | no p = refl


‚Üídiffer-shiftNameUp0 : {name1 name2 : Name} {f : Term} (cf : # f) {a b : Term}
                   ‚Üí differ name1 name2 f a b
                   ‚Üí differ (suc name1) (suc name2) (shiftNameUp 0 f) (shiftNameUp 0 a) (shiftNameUp 0 b)
‚Üídiffer-shiftNameUp0 {name1} {name2} {f} cf {a} {b} dif
  rewrite suc‚â°sucIf‚â§0 name1 | suc‚â°sucIf‚â§0 name2 =
  ‚Üídiffer-shiftNameUp 0 {name1} {name2} cf dif



abstract

  differ-subv : {name1 name2 : Name} {f : Term} (cf : # f) (v : Var) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
                ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ
                ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ
                ‚Üí differ name1 name2 f (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (differ-VAR x) d‚ÇÇ with x ‚âü v
  ... | yes p = d‚ÇÇ -- rewrite shiftDownUp b‚ÇÅ 0 | shiftDownUp b‚ÇÇ 0 = d‚ÇÇ
  ... | no p = differ-VAR _
--  differ-subv {name1} {name2} {f} cf v {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} differ-NAT d‚ÇÇ = differ-NAT
  differ-subv {name1} {name2} {f} cf v {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} differ-QNAT d‚ÇÇ = differ-QNAT
--  differ-subv {name1} {name2} {f} cf v {.TNAT} {.TNAT} {b‚ÇÅ} {b‚ÇÇ} differ-TNAT d‚ÇÇ = differ-TNAT
  differ-subv {name1} {name2} {f} cf v {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-LT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-QLT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (differ-NUM x) d‚ÇÇ = differ-NUM x
  differ-subv {name1} {name2} {f} cf v {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÉ)} {b‚ÇÅ} {b‚ÇÇ} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ d‚ÇÖ d‚ÇÜ d‚Çá) d‚ÇÇ = differ-IFLT _ _ _ _ _ _ _ _ (differ-subv cf v d‚ÇÑ d‚ÇÇ) (differ-subv cf v d‚ÇÖ d‚ÇÇ) (differ-subv cf v d‚ÇÜ d‚ÇÇ) (differ-subv cf v d‚Çá d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(IFEQ a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÉ)} {b‚ÇÅ} {b‚ÇÇ} (differ-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ d‚ÇÖ d‚ÇÜ d‚Çá) d‚ÇÇ = differ-IFEQ _ _ _ _ _ _ _ _ (differ-subv cf v d‚ÇÑ d‚ÇÇ) (differ-subv cf v d‚ÇÖ d‚ÇÇ) (differ-subv cf v d‚ÇÜ d‚ÇÇ) (differ-subv cf v d‚Çá d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(SUC a)} {.(SUC b)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUC a b d‚ÇÅ) d‚ÇÇ = differ-SUC _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-PI _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(LAMBDA a)} {.(LAMBDA b)} {b‚ÇÅ} {b‚ÇÇ} (differ-LAMBDA a b d‚ÇÅ) d‚ÇÇ = differ-LAMBDA _ _ (differ-subv cf (suc v) d‚ÇÅ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-APPLY _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(FIX a)} {.(FIX b)} {b‚ÇÅ} {b‚ÇÇ} (differ-FIX a b d‚ÇÅ) d‚ÇÇ = differ-FIX _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-LET _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(WT a‚ÇÅ b‚ÇÉ)} {.(WT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-WT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-WT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(SUP a‚ÇÅ b‚ÇÉ)} {.(SUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SUP _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  --differ-subv {name1} {name2} {f} cf v {.(DSUP a‚ÇÅ b‚ÇÉ)} {.(DSUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-DSUP _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc (suc v)) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf d‚ÇÇ)))
  differ-subv {name1} {name2} {f} cf v {.(WREC a‚ÇÅ b‚ÇÉ)} {.(WREC a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-WREC a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-WREC _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc (suc (suc v))) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))))
  differ-subv {name1} {name2} {f} cf v {.(MT a‚ÇÅ b‚ÇÉ)} {.(MT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-MT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-MT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  --differ-subv {name1} {name2} {f} cf v {.(MSUP a‚ÇÅ b‚ÇÉ)} {.(MSUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-MSUP _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  --differ-subv {name1} {name2} {f} cf v {.(DMSUP a‚ÇÅ b‚ÇÉ)} {.(DMSUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-DMSUP _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc (suc v)) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf d‚ÇÇ)))
  differ-subv {name1} {name2} {f} cf v {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SUM _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-PAIR _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SPREAD _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc (suc v)) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf d‚ÇÇ)))
  differ-subv {name1} {name2} {f} cf v {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-SET _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(ISECT a‚ÇÅ b‚ÇÉ)} {.(ISECT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-ISECT _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-TUNION _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-UNION _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
--  differ-subv {name1} {name2} {f} cf v {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-QTUNION _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(INL a)} {.(INL b)} {b‚ÇÅ} {b‚ÇÇ} (differ-INL a b d‚ÇÅ) d‚ÇÇ = differ-INL _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(INR a)} {.(INR b)} {b‚ÇÅ} {b‚ÇÇ} (differ-INR a b d‚ÇÅ) d‚ÇÇ = differ-INR _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ) d‚ÇÇ = differ-DECIDE _ _ _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf (suc v) d‚ÇÉ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ)) (differ-subv cf (suc v) d‚ÇÑ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ) d‚ÇÇ = differ-EQ _ _ _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ) (differ-subv cf v d‚ÇÑ d‚ÇÇ)
--  differ-subv {name1} {name2} {f} cf v {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {z‚ÇÅ} {z‚ÇÇ} (differ-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) y = differ-EQB _ _ _ _ _ _ _ _ (differ-subv cf v x‚ÇÅ y) (differ-subv cf v x‚ÇÇ y) (differ-subv cf v x‚ÇÉ y) (differ-subv cf v x‚ÇÑ y)
  differ-subv {name1} {name2} {f} cf v {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} differ-AX d‚ÇÇ = differ-AX
  differ-subv {name1} {name2} {f} cf v {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} differ-FREE d‚ÇÇ = differ-FREE
  differ-subv {name1} {name2} {f} cf v {.(MSEQ x)} {.(MSEQ x)} {b‚ÇÅ} {b‚ÇÇ} (differ-MSEQ x) d‚ÇÇ = differ-MSEQ x
  differ-subv {name1} {name2} {f} cf v {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-MAPP s a‚ÇÅ a‚ÇÇ d‚ÇÅ) d‚ÇÇ = differ-MAPP _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  --differ-subv {name1} {name2} {f} cf v {.(CS name)} {.(CS name)} {b‚ÇÅ} {b‚ÇÇ} (differ-CS name) d‚ÇÇ = differ-CS name
  --differ-subv {name1} {name2} {f} cf v {.(NAME name)} {.(NAME name)} {b‚ÇÅ} {b‚ÇÇ} (differ-NAME name) d‚ÇÇ = differ-NAME name
  --differ-subv {name1} {name2} {f} cf v {.(FRESH a)} {.(FRESH b)} {b‚ÇÅ} {b‚ÇÇ} (differ-FRESH a b d‚ÇÅ) d‚ÇÇ = differ-FRESH _ _ (differ-subv (‚Üí#shiftNameUp 0 {f} cf) v d‚ÇÅ (‚Üídiffer-shiftNameUp0 {name1} {name2} cf d‚ÇÇ))
  differ-subv {name1} {name2} {f} cf v {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-CHOOSE _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  --differ-subv {name1} {name2} {f} cf v {.(IFC0 a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÉ d‚ÇÑ) d‚ÇÇ = differ-IFC0 _ _ _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ) (differ-subv cf v d‚ÇÑ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(TSQUASH a)} {.(TSQUASH b)} {b‚ÇÅ} {b‚ÇÇ} (differ-TSQUASH a b d‚ÇÅ) d‚ÇÇ = differ-TSQUASH _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
--  differ-subv {name1} {name2} {f} cf v {.(TTRUNC a)} {.(TTRUNC b)} {b‚ÇÅ} {b‚ÇÇ} (differ-TTRUNC a b d‚ÇÅ) d‚ÇÇ = differ-TTRUNC _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(NOWRITE a)} {.(NOWRITE b)} {b‚ÇÅ} {b‚ÇÇ} (differ-NOWRITE a b d‚ÇÅ) d‚ÇÇ = differ-NOWRITE _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(NOREAD a)} {.(NOREAD b)} {b‚ÇÅ} {b‚ÇÇ} (differ-NOREAD a b d‚ÇÅ) d‚ÇÇ = differ-NOREAD _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(SUBSING a)} {.(SUBSING b)} {b‚ÇÅ} {b‚ÇÇ} (differ-SUBSING a b d‚ÇÅ) d‚ÇÇ = differ-SUBSING _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(PURE)} {.(PURE)} {b‚ÇÅ} {b‚ÇÇ} (differ-PURE) d‚ÇÇ = differ-PURE
  differ-subv {name1} {name2} {f} cf v {.(NOSEQ)} {.(NOSEQ)} {b‚ÇÅ} {b‚ÇÇ} (differ-NOSEQ) d‚ÇÇ = differ-NOSEQ
  differ-subv {name1} {name2} {f} cf v {.(TERM a)} {.(TERM b)} {b‚ÇÅ} {b‚ÇÇ} (differ-TERM a b d‚ÇÅ) d‚ÇÇ = differ-TERM _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(ENC a)} {.(ENC a)} {b‚ÇÅ} {b‚ÇÇ} (differ-ENC a d) d‚ÇÇ = differ-ENC _ d
  differ-subv {name1} {name2} {f} cf v {.(DUM a)} {.(DUM b)} {b‚ÇÅ} {b‚ÇÇ} (differ-DUM a b d‚ÇÅ) d‚ÇÇ = differ-DUM _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ d‚ÇÅ d‚ÇÉ) d‚ÇÇ = differ-FFDEFS _ _ _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ) (differ-subv cf v d‚ÇÉ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (differ-UNIV x) d‚ÇÇ = differ-UNIV x
  differ-subv {name1} {name2} {f} cf v {.(LIFT a)} {.(LIFT b)} {b‚ÇÅ} {b‚ÇÇ} (differ-LIFT a b d‚ÇÅ) d‚ÇÇ = differ-LIFT _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(LOWER a)} {.(LOWER b)} {b‚ÇÅ} {b‚ÇÇ} (differ-LOWER a b d‚ÇÅ) d‚ÇÇ = differ-LOWER _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(SHRINK a)} {.(SHRINK b)} {b‚ÇÅ} {b‚ÇÇ} (differ-SHRINK a b d‚ÇÅ) d‚ÇÇ = differ-SHRINK _ _ (differ-subv cf v d‚ÇÅ d‚ÇÇ)
  differ-subv {name1} {name2} {f} cf v {.(upd name1 f)} {.(upd name2 f)} {b‚ÇÅ} {b‚ÇÇ} differ-upd d‚ÇÇ
    rewrite sucIf‚â§00
          | subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÅ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
          | subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÇ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf) = differ-upd


abstract

  ‚Üídiffer-shiftDown : (v : Var) {name1 name2 : Name} {f : Term} (cf : # f) {a b : Term}
                       ‚Üí differ name1 name2 f a b
                       ‚Üí differ name1 name2 f (shiftDown v a) (shiftDown v b)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(VAR x)} {.(VAR x)} (differ-VAR x) = differ-VAR _
--  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.NAT} {.NAT} differ-NAT = differ-NAT
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.QNAT} {.QNAT} differ-QNAT = differ-QNAT
--  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.TNAT} {.TNAT} differ-TNAT = differ-TNAT
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QLT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(NUM x)} {.(NUM x)} (differ-NUM x) = differ-NUM x
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFLT _ _ _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ) (‚Üídiffer-shiftDown v cf diff‚ÇÉ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-IFEQ _ _ _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ) (‚Üídiffer-shiftDown v cf diff‚ÇÉ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUC a)} {.(SUC b)} (differ-SUC a b diff) = differ-SUC _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PI _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) = differ-LAMBDA _ _ (‚Üídiffer-shiftDown (suc v) cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differ-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-APPLY _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(FIX a)} {.(FIX b)} (differ-FIX a b diff) = differ-FIX _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differ-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-LET _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (differ-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-WT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differ-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUP _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(DSUP a‚ÇÅ b‚ÇÅ)} {.(DSUP a‚ÇÇ b‚ÇÇ)} (differ-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-DSUP _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc (suc v)) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (differ-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-WREC _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc (suc (suc v))) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (differ-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-MT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (differ-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-MSUP _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(DMSUP a‚ÇÅ b‚ÇÅ)} {.(DMSUP a‚ÇÇ b‚ÇÇ)} (differ-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-DMSUP _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc (suc v)) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SUM _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-PAIR _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differ-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SPREAD _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc (suc v)) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-SET _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differ-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-ISECT _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-TUNION _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-UNION _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
--  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-QTUNION _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(INL a)} {.(INL b)} (differ-INL a b diff) = differ-INL _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(INR a)} {.(INR b)} (differ-INR a b diff) = differ-INR _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-DECIDE _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÅ) (‚Üídiffer-shiftDown (suc v) cf diff‚ÇÇ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-EQ _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ)
--  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differ-EQB _ _ _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ) (‚Üídiffer-shiftDown v cf diff‚ÇÉ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.AX} {.AX} differ-AX = differ-AX
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.FREE} {.FREE} differ-FREE = differ-FREE
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(MSEQ x)} {.(MSEQ x)} (differ-MSEQ x) = (differ-MSEQ x)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (differ-MAPP s a‚ÇÅ a‚ÇÇ diff) = differ-MAPP _ _ _ (‚Üídiffer-shiftDown v cf diff)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(CS name)} {.(CS name)} (differ-CS name) = (differ-CS name)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(NAME name)} {.(NAME name)} (differ-NAME name) = (differ-NAME name)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(FRESH a)} {.(FRESH b)} (differ-FRESH a b diff) = differ-FRESH _ _ (‚Üídiffer-shiftDown v (‚Üí#shiftNameUp 0 {f} cf) diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differ-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-CHOOSE _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  --‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-IFC0 a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differ-IFC0 _ _ _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ) (‚Üídiffer-shiftDown v cf diff‚ÇÇ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) = differ-TSQUASH _ _ (‚Üídiffer-shiftDown v cf diff)
--  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) = differ-TTRUNC _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(NOWRITE a)} {.(NOWRITE b)} (differ-NOWRITE a b diff) = differ-NOWRITE _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(NOREAD a)} {.(NOREAD b)} (differ-NOREAD a b diff) = differ-NOREAD _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) = differ-SUBSING _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(PURE)} {.(PURE)} (differ-PURE) = differ-PURE
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(NOSEQ)} {.(NOSEQ)} (differ-NOSEQ) = differ-NOSEQ
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(TERM a)} {.(TERM b)} (differ-TERM a b diff) = differ-TERM _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(ENC a)} {.(ENC a)} (differ-ENC a d) = differ-ENC _ d
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) = differ-DUM _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differ-FFDEFS _ _ _ _ (‚Üídiffer-shiftDown v cf diff) (‚Üídiffer-shiftDown v cf diff‚ÇÅ)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) = differ-UNIV x
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) = differ-LIFT _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) = differ-LOWER _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) = differ-SHRINK _ _ (‚Üídiffer-shiftDown v cf diff)
  ‚Üídiffer-shiftDown v {name1} {name2} {f} cf {.(upd name1 f)} {.(upd name2 f)} differ-upd rewrite sucIf‚â§s0 v | #shiftDown (suc (suc (suc v))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = differ-upd


differ-sub : {name1 name2 : Name} {f : Term} (cf : # f) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí differ name1 name2 f a‚ÇÅ a‚ÇÇ
             ‚Üí differ name1 name2 f b‚ÇÅ b‚ÇÇ
             ‚Üí differ name1 name2 f (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
differ-sub {name1} {name2} {f} cf {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} d‚ÇÅ d‚ÇÇ =
  ‚Üídiffer-shiftDown 0 cf (differ-subv {name1} {name2} {f} cf 0 {a‚ÇÅ} {a‚ÇÇ} {shiftUp 0 b‚ÇÅ} {shiftUp 0 b‚ÇÇ} d‚ÇÅ (‚Üídiffer-shiftUp 0 cf d‚ÇÇ))



abstract

  differ-isValue‚Üí : {name1 name2 : Name} {f : Term} {a b : Term}
                     ‚Üí differ name1 name2 f a b
                     ‚Üí isValue a
                     ‚Üí isValue b
--  differ-isValue‚Üí {name1} {name2} {f} {.NAT} {.NAT} differ-NAT isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.QNAT} {.QNAT} differ-QNAT isv = tt
--  differ-isValue‚Üí {name1} {name2} {f} {.TNAT} {.TNAT} differ-TNAT isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differ-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differ-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(NUM x)} {.(NUM x)} (differ-NUM x) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differ-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(LAMBDA a)} {.(LAMBDA b)} (differ-LAMBDA a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} (differ-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differ-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} (differ-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  --differ-isValue‚Üí {name1} {name2} {f} {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (differ-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differ-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differ-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differ-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differ-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differ-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differ-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
--  differ-isValue‚Üí {name1} {name2} {f} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (differ-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(INL a)} {.(INL b)} (differ-INL a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(INR a)} {.(INR b)} (differ-INR a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differ-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) isv = tt
--  differ-isValue‚Üí {name1} {name2} {f} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differ-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.AX} {.AX} differ-AX isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.FREE} {.FREE} differ-FREE isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(MSEQ x)} {.(MSEQ x)} (differ-MSEQ x) isv = tt
  --differ-isValue‚Üí {name1} {name2} {f} {.(CS name)} {.(CS name)} (differ-CS name) isv = tt
  --differ-isValue‚Üí {name1} {name2} {f} {.(NAME name)} {.(NAME name)} (differ-NAME name) isv = tt
  --differ-isValue‚Üí {name1} {name2} {f} {.(FRESH a)} {.(FRESH b)} (differ-FRESH a b diff) ()
  differ-isValue‚Üí {name1} {name2} {f} {.(TSQUASH a)} {.(TSQUASH b)} (differ-TSQUASH a b diff) isv = tt
--  differ-isValue‚Üí {name1} {name2} {f} {.(TTRUNC a)} {.(TTRUNC b)} (differ-TTRUNC a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(NOWRITE a)} {.(NOWRITE b)} (differ-NOWRITE a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(NOREAD a)} {.(NOREAD b)} (differ-NOREAD a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(SUBSING a)} {.(SUBSING b)} (differ-SUBSING a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(PURE)} {.(PURE)} (differ-PURE) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(NOSEQ)} {.(NOSEQ)} (differ-NOSEQ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(TERM a)} {.(TERM b)} (differ-TERM a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(DUM a)} {.(DUM b)} (differ-DUM a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differ-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(UNIV x)} {.(UNIV x)} (differ-UNIV x) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(LIFT a)} {.(LIFT b)} (differ-LIFT a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(LOWER a)} {.(LOWER b)} (differ-LOWER a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(SHRINK a)} {.(SHRINK b)} (differ-SHRINK a b diff) isv = tt
  differ-isValue‚Üí {name1} {name2} {f} {.(upd name1 f)} {.(upd name2 f)} differ-upd isv = tt



sub-upd : (name : Name) (f : Term) (a : Term) (cf : # f)
          ‚Üí sub a (updBody name f) ‚â° LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))
sub-upd name f a cf
  rewrite #shiftUp 0 (ct f cf)
        | shiftDownUp a 0
        | #subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 a))) f cf
        | #shiftDown 2 (ct f cf) = refl


sub-SEQ-updGt : (u : Term) (name : Name) (f : Term) (cf : # f)
                ‚Üí sub u (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))
                   ‚â° LET (updGt name u) (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u))))
sub-SEQ-updGt u name f cf
  rewrite #shiftUp 0 (ct f cf)
        | shiftDownUp u 0
        | #subv 1 (shiftUp 0 (shiftUp 0 u)) f cf
        | #shiftDown 1 (ct f cf) = refl


getT‚äé : (n : ‚Ñï) (cs : Name) (w : ùïé¬∑) ‚Üí (Œ£ Term (Œª t ‚Üí getT n cs w ‚â° just t) ‚äé getT n cs w ‚â° nothing)
getT‚äé n cs w with getT n cs w
... | just t = inj‚ÇÅ (t , refl)
... | nothing = inj‚ÇÇ refl



steps-get0 : (k : ‚Ñï) (name : Name) (w w' : ùïé¬∑) (v : Term)
             ‚Üí isValue v
             ‚Üí steps k (get0 name , w) ‚â° (v , w')
             ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí k' < k √ó getT 0 name w ‚â° just u √ó steps k' (u , w) ‚â° (v , w')))
steps-get0 0 name w w' t isv comp rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
steps-get0 (suc k) name w w' t isv comp with getT‚äé 0 name w
... | inj‚ÇÅ (u , z) rewrite z = u , k , ‚â§-refl , refl , comp
... | inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



‚â°Term‚Üí‚â°steps : (k : ‚Ñï) {a b : Term} (w : ùïé¬∑) ‚Üí a ‚â° b ‚Üí steps k (a , w) ‚â° steps k (b , w)
‚â°Term‚Üí‚â°steps k {a} {b} w e rewrite e = refl

\end{code}

