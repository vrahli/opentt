\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod


module not_lpo_qtbool {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                      (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
                      (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
                      (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                      (F : Freeze {L} W C K P G N)
                      (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                      (CB : ChoiceBar W M C K P G X N V F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(V)(E)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)


{-- This version is similar to the one presented in not_lpo, but relies on QTBOOL instead of BOOL,
 -- which allows us to use references to prove it and not just FCS.
 --}

LPO : Term
LPO = PI NAT!‚ÜíQTBOOL! (SQUASH (UNION (SUM NAT! (ASSERT‚ÇÉ (APPLY (VAR 1) (VAR 0))))
                                     (PI NAT! (NEG (ASSERT‚ÇÉ (APPLY (VAR 1) (VAR 0)))))))


#LPO : CTerm
#LPO = ct LPO c
  where
    c : # LPO
    c = refl



#[0]LPO-left : CTerm0
#[0]LPO-left = #[0]SUM #[0]NAT! (#[1]ASSERT‚ÇÉ (#[1]APPLY #[1]VAR1 #[1]VAR0))


#[0]LPO-right : CTerm0
#[0]LPO-right = #[0]PI #[0]NAT! (#[1]NEG (#[1]ASSERT‚ÇÉ (#[1]APPLY #[1]VAR1 #[1]VAR0)))


#LPO-left : CTerm ‚Üí CTerm
#LPO-left = #SUM-ASSERT‚ÇÉ


#LPO-right : CTerm ‚Üí CTerm
#LPO-right = #PI-NEG-ASSERT‚ÇÉ


#LPO-PI : CTerm
#LPO-PI = #PI #NAT!‚ÜíQTBOOL! (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))


#LPO‚â°#PI : #LPO ‚â° #LPO-PI
#LPO‚â°#PI = CTerm‚â° refl



sub0-squash-union-LPO : (a : CTerm) ‚Üí sub0 a (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))
                                       ‚â° #SQUASH (#UNION (#LPO-left a) (#LPO-right a))
sub0-squash-union-LPO a =
  ‚â°sub0-#[0]SQUASH a (#[0]UNION #[0]LPO-left #[0]LPO-right) (#UNION (#LPO-left a) (#LPO-right a))
                   (CTerm‚â° (‚â°UNION (‚â°SUM refl (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY e refl))) (‚â°PI refl (‚â°NEG (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY e refl))))))
  where
    e : shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) ‚â° ‚åú a ‚åù
    e rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftDown 1 a = refl



isTypeLPO-PI : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #LPO-PI
isTypeLPO-PI w n =
  eqTypesPI‚Üê {w} {n}
              {#NAT!‚ÜíQTBOOL!} {#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)}
              {#NAT!‚ÜíQTBOOL!} {#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)}
              (Œª w' e ‚Üí isType-#NAT!‚ÜíQTBOOL! w' n)
              aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíQTBOOL! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)))
                                         (sub0 a‚ÇÇ (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))))
    aw w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-squash-union-LPO a‚ÇÅ | sub0-squash-union-LPO a‚ÇÇ = eqt
      where
        eqt1 : equalTypes n w' (#LPO-left a‚ÇÅ) (#LPO-left a‚ÇÇ)
        eqt1 = ‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ eqb

        eqt2 : equalTypes n w' (#LPO-right a‚ÇÅ) (#LPO-right a‚ÇÇ)
        eqt2 = ‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÉ eqb

        eqt : equalTypes n w' (#SQUASH (#UNION (#LPO-left a‚ÇÅ) (#LPO-right a‚ÇÅ))) (#SQUASH (#UNION (#LPO-left a‚ÇÇ) (#LPO-right a‚ÇÇ)))
        eqt = eqTypesSQUASH‚Üê (eqTypesUNION‚Üê eqt1 eqt2)



isTypeLPO : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #LPO
isTypeLPO w n rewrite #LPO‚â°#PI = isTypeLPO-PI w n


isTypeNegLPO : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#NEG #LPO)
isTypeNegLPO w n = eqTypesNEG‚Üê (isTypeLPO w n)



-- MOVE to props3
‚ÜíequalInType-CS-NAT!‚ÜíQTBOOL! : {n : ‚Ñï} {w : ùïé¬∑} {a b : Name}
                             ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí equalInType n w' #QTBOOL! (#APPLY (#CS a) (#NUM m)) (#APPLY (#CS b) (#NUM m)))
                             ‚Üí equalInType n w #NAT!‚ÜíQTBOOL! (#CS a) (#CS b)
‚ÜíequalInType-CS-NAT!‚ÜíQTBOOL! {n} {w} {a} {b} i rewrite #NAT!‚ÜíQTBOOL!‚â° = ‚ÜíequalInType-CS-NAT!‚ÜíT (eqTypesQTBOOL! {w} {n}) i



-- Assuming that our choices are QTBools
¬¨LPO : QTBool‚ÑÇ CB ‚Üí (w : ùïé¬∑) ‚Üí member w (#NEG #LPO) #lamAX
¬¨LPO bcb w = n , equalInType-NEG (isTypeLPO w n) aw1
  where
    n : ‚Ñï
    n = 1

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #LPO a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea =
      h (fun-equalInType-SQUASH-UNION (equalInType-#Œ£choice w2 name ‚ÑÇ‚ÇÅ¬∑ comp1 (0 , sat-‚ÑÇ‚ÇÅ 0))
                                      (eqTypesNEG‚Üê (equalInType-#Œ£choice w2 name ‚ÑÇ‚ÇÅ¬∑ comp1 (0 , sat-‚ÑÇ‚ÇÅ 0)))
                                      imp1
                                      imp2
                                      h1)
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíQTBOOL! f g
                             ‚Üí equalInType n w' (sub0 f (#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right))) (#APPLY F f) (#APPLY G g))
        aw2 = snd (snd (equalInType-PI‚Üí {n} {w1} {#NAT!‚ÜíQTBOOL!} {#[0]SQUASH (#[0]UNION #[0]LPO-left #[0]LPO-right)} ea))

        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíQTBOOL! f g
                             ‚Üí equalInType n w' (#SQUASH (#UNION (#LPO-left f) (#LPO-right f))) (#APPLY F f) (#APPLY G g))
        aw3 w' e f g ex = ‚â°CTerm‚ÜíequalInType (sub0-squash-union-LPO f) (aw2 w' e f g ex)

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        h : ¬¨ equalInType n w2 (sq-dec (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)) #AX #AX
        h = ¬¨-dec-Œ£choice w1 n

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #QTBOOL! (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #NAT!‚ÜíQTBOOL! f
        eqf1 = ‚ÜíequalInType-CS-NAT!‚ÜíQTBOOL! eqf2

        h1 : equalInType n w2 (#SQUASH (#UNION (#LPO-left f) (#LPO-right f))) (#APPLY F f) (#APPLY G f)
        h1 = aw3 w2 e2 f f eqf1

        imp1 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#LPO-left f) ‚Üí inhType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
        imp1 w3 e3 inh = #SUM-ASSERT‚ÇÉ‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh

        imp2 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#LPO-right f) ‚Üí inhType n w' (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)))
        imp2 w3 e3 inh = #PI-NEG-ASSERT‚ÇÉ‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh

\end{code}[hide]
