\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
--open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity4 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                   (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                   (X : ChoiceExt W C)
                   (N : NewChoice {L} W C K G)
                   (E : Axiom.Extensionality.Propositional.Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)



data updRel (name : Name) (f g : Term) : Term ‚Üí Term ‚Üí Set where
  updRel-VAR     : (x : Var) ‚Üí updRel name f g (VAR x) (VAR x)
  updRel-NAT     : updRel name f g NAT NAT
  updRel-QNAT    : updRel name f g QNAT QNAT
  updRel-TNAT    : updRel name f g TNAT TNAT
  updRel-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  updRel-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  updRel-NUM     : (x : ‚Ñï) ‚Üí updRel name f g (NUM x) (NUM x)
  updRel-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel name f g d‚ÇÅ d‚ÇÇ ‚Üí updRel name f g (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updRel-SUC     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (SUC a‚ÇÅ) (SUC a‚ÇÇ)
  updRel-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  updRel-LAMBDA  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (LAMBDA a‚ÇÅ) (LAMBDA a‚ÇÇ)
  updRel-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  updRel-FIX     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (FIX a‚ÇÅ) (FIX a‚ÇÇ)
  updRel-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  updRel-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  updRel-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  updRel-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  updRel-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  updRel-ISECT   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  updRel-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  updRel-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  updRel-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  updRel-INL     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (INL a‚ÇÅ) (INL a‚ÇÇ)
  updRel-INR     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (INR a‚ÇÅ) (INR a‚ÇÇ)
  updRel-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel name f g (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel name f g (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel-AX      : updRel name f g AX AX
  updRel-FREE    : updRel name f g FREE FREE
  --updRel-CS      : updRel name1 name2 f (CS name1) (CS name2)
  --updRel-CS      : updRel name1 name2 f (CS name1) (CS name2)
  --updRel-NAME    : updRel name1 name2 f (NAME name1) (NAME name2)
  --updRel-FRESH   : (a b : Term) ‚Üí updRel name1 name2 f a b ‚Üí updRel name1 name2 f (FRESH a) (FRESH b)
  updRel-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  updRel-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updRel name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updRel name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updRel name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel-TSQUASH : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (TSQUASH a‚ÇÅ) (TSQUASH a‚ÇÇ)
  updRel-TTRUNC  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (TTRUNC a‚ÇÅ) (TTRUNC a‚ÇÇ)
  updRel-TCONST  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (TCONST a‚ÇÅ) (TCONST a‚ÇÇ)
  updRel-SUBSING : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (SUBSING a‚ÇÅ) (SUBSING a‚ÇÇ)
  updRel-PURE    : updRel name f g PURE PURE
  updRel-DUM     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (DUM a‚ÇÅ) (DUM a‚ÇÇ)
  updRel-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  updRel-UNIV    : (x : ‚Ñï) ‚Üí updRel name f g (UNIV x) (UNIV x)
  updRel-LIFT    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (LIFT a‚ÇÅ) (LIFT a‚ÇÇ)
  updRel-LOWER   : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (LOWER a‚ÇÅ) (LOWER a‚ÇÇ)
  updRel-SHRINK  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (SHRINK a‚ÇÅ) (SHRINK a‚ÇÇ)
  updRel-upd     : updRel name f g (upd name f) (force g)



presUpdRel : (n : ‚Ñï) (name : Name) (f g : Term) (k : ‚Ñï) ‚Üí Set(lsuc L)
presUpdRel n name f g k =
  {a b v : Term} {w1 w2 w : ùïé¬∑}
  ‚Üí updRel name f g a b
  ‚Üí compatible¬∑ name w1 Res‚ä§
  ‚Üí ‚àÄùïé-get0-NUM w1 name
  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
  ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n name comp
  ‚Üí isValue v
  ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w) ‚â° (v' , w) √ó updRel name f g v v'))


stepsPresUpdRel : (n : ‚Ñï) (name : Name) (f g : Term) (b : Term) (w : ùïé¬∑) ‚Üí Set(lsuc L)
stepsPresUpdRel n name f g b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£ (steps k (b , w) ‚â° (v , w')) (Œª comp ‚Üí
    isValue v
    √ó isHighest‚Ñï {k} {w} {w'} {b} {v} n name comp
    √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel n name f g k')))))


updRel-NUM‚Çó‚Üí : {name : Name} {f g : Term} {n : ‚Ñï} {a : Term}
               ‚Üí updRel name f g (NUM n) a
               ‚Üí a ‚â° NUM n
updRel-NUM‚Çó‚Üí {name} {f} {g} {n} {.(NUM n)} (updRel-NUM .n) = refl


Œ£stepsUpdRel : (name : Name) (f g : Term) (x : Term) (w2 : ùïé¬∑) (b : Term)  (w : ùïé¬∑) ‚Üí Set(L)
Œ£stepsUpdRel name f g x w2 b w =
  Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ Term (Œª y1 ‚Üí Œ£ Term (Œª y2 ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí
    steps k1 (x , w2) ‚â° (y1 , w3)
    √ó steps k2 (b , w) ‚â° (y2 , w)
    √ó updRel name f g y1 y2)))))



isHighest‚Ñï-IFLT‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b c d v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (IFLT a b c d , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {IFLT a b c d} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h with is-NUM a
... | inj‚ÇÅ (i1 , p) rewrite p with is-NUM b
... |    inj‚ÇÅ (i2 , q) rewrite q with i1 <? i2
... |       yes r = 0 , NUM i1 , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |       no r = 0 , NUM i1 , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h | inj‚ÇÅ (i1 , p) | inj‚ÇÇ q with step‚äé b w
... |       inj‚ÇÅ (b' , w0 , z) rewrite z = 0 , NUM i1 , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n --ret (IFLT a b' c d) w'
... |       inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h | inj‚ÇÇ p with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {c} {d} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-IFLT‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b c d : Term} {w : ùïé¬∑}
                          ‚Üí stepsPresUpdRel n name f g (IFLT a b c d) w
                          ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-IFLT‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {c} {d} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv ish



isHighest‚Ñï-IFLT‚ÇÇ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {m : ‚Ñï} {b c d v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (IFLT (NUM m) b c d , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {IFLT (NUM m) b c d} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {0} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv h with is-NUM b
... | inj‚ÇÅ (m' , q) rewrite q with m <? m'
... |    yes r = 0 , NUM m' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |    no r = 0 , NUM m' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv h | inj‚ÇÇ q with step‚äé b w
... |    inj‚ÇÅ (b0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {b0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {k} {name} {f} {g} {m} {b0} {c} {d} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {b} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-IFLT‚ÇÇ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {m : ‚Ñï} {b c d : Term} {w : ùïé¬∑}
                          ‚Üí stepsPresUpdRel n name f g (IFLT (NUM m) b c d) w
                          ‚Üí stepsPresUpdRel n name f g b w
stepsPresUpdRel-IFLT‚ÇÇ‚Üí {n} {name} {f} {g} {m} {b} {c} {d} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {k} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ : {name : Name} {f g : Term} {m : ‚Ñï} {b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term} {w1 w : ùïé¬∑}
                       ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ
                       ‚Üí updRel name f g d‚ÇÅ d‚ÇÇ
                       ‚Üí Œ£stepsUpdRel name f g b‚ÇÅ w1 b‚ÇÇ w
                       ‚Üí Œ£stepsUpdRel name f g (IFLT (NUM m) b‚ÇÅ c‚ÇÅ d‚ÇÅ) w1 (IFLT (NUM m) b‚ÇÇ c‚ÇÇ d‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ {name} {f} {g} {m} {b‚ÇÅ} {b‚ÇÇ} {c‚ÇÅ} {c‚ÇÇ} {d‚ÇÅ} {d‚ÇÇ} {w1} {w} updc updd (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , IFLT (NUM m) y1 c‚ÇÅ d‚ÇÅ , IFLT (NUM m) y2 c‚ÇÇ d‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-IFLT _ _ _ _ _ _ _ _ (updRel-NUM m) r updc updd
  where
    comp1' : IFLT (NUM m) b‚ÇÅ c‚ÇÅ d‚ÇÅ ‚áì IFLT (NUM m) y1 c‚ÇÅ d‚ÇÅ from w1 to w3
    comp1' = IFLT-NUM-2nd‚áìsteps k1 m c‚ÇÅ d‚ÇÅ comp1

    comp2' : IFLT (NUM m) b‚ÇÇ c‚ÇÇ d‚ÇÇ ‚áì IFLT (NUM m) y2 c‚ÇÇ d‚ÇÇ from w to w
    comp2' = IFLT-NUM-2nd‚áìsteps k2 m c‚ÇÇ d‚ÇÇ comp2



‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term} {w1 w : ùïé¬∑}
                       ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                       ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ
                       ‚Üí updRel name f g d‚ÇÅ d‚ÇÇ
                       ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                       ‚Üí Œ£stepsUpdRel name f g (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) w1 (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {c‚ÇÅ} {c‚ÇÇ} {d‚ÇÅ} {d‚ÇÇ} {w1} {w} updb updc updd (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , IFLT y1 b‚ÇÅ c‚ÇÅ d‚ÇÅ , IFLT y2 b‚ÇÇ c‚ÇÇ d‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-IFLT _ _ _ _ _ _ _ _ r updb updc updd
  where
    comp1' : IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ ‚áì IFLT y1 b‚ÇÅ c‚ÇÅ d‚ÇÅ from w1 to w3
    comp1' = IFLT-NUM-1st‚áìsteps k1 b‚ÇÅ c‚ÇÅ d‚ÇÅ comp1

    comp2' : IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ ‚áì IFLT y2 b‚ÇÇ c‚ÇÇ d‚ÇÇ from w to w
    comp2' = IFLT-NUM-1st‚áìsteps k2 b‚ÇÇ c‚ÇÇ d‚ÇÇ comp2



updRel-CS‚Çó‚Üí : {name : Name} {f g : Term} {n : Name} {a : Term}
              ‚Üí updRel name f g (CS n) a
              ‚Üí ‚ä•
updRel-CS‚Çó‚Üí {name} {f} {g} {n} {a} ()



updRel-NAME‚Çó‚Üí : {name : Name} {f g : Term} {n : Name} {a : Term}
                ‚Üí updRel name f g (NAME n) a
                ‚Üí ‚ä•
updRel-NAME‚Çó‚Üí {name} {f} {g} {n} {a} ()



updRel-LAMBDA‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                  ‚Üí updRel name f g (LAMBDA t) a
                  ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó updRel name f g t u)
                     ‚äé (t ‚â° updBody name f √ó a ‚â° force g)
updRel-LAMBDA‚Çó‚Üí {name} {f} {g} {t} {.(LAMBDA a‚ÇÇ)} (updRel-LAMBDA .t a‚ÇÇ u) = inj‚ÇÅ (a‚ÇÇ , refl , u)
updRel-LAMBDA‚Çó‚Üí {name} {f} {g} {.(updBody name f)} {.(force g)} updRel-upd = inj‚ÇÇ (refl , refl)



updRel-PAIR‚Çó‚Üí : {name : Name} {f g : Term} {t‚ÇÅ t‚ÇÇ : Term} {a : Term}
                ‚Üí updRel name f g (PAIR t‚ÇÅ t‚ÇÇ) a
                ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° PAIR u‚ÇÅ u‚ÇÇ √ó updRel name f g t‚ÇÅ u‚ÇÅ √ó updRel name f g t‚ÇÇ u‚ÇÇ))
updRel-PAIR‚Çó‚Üí {name} {f} {g} {t‚ÇÅ} {t‚ÇÇ} {.(PAIR a‚ÇÅ a‚ÇÇ)} (updRel-PAIR .t‚ÇÅ a‚ÇÅ .t‚ÇÇ a‚ÇÇ u1 u2) = a‚ÇÅ , a‚ÇÇ , refl , u1 , u2



updRel-INL‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                ‚Üí updRel name f g (INL t) a
                ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INL u √ó updRel name f g t u)
updRel-INL‚Çó‚Üí {name} {f} {g} {t} {.(INL x)} (updRel-INL .t x u) = x , refl , u



updRel-INR‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                ‚Üí updRel name f g (INR t) a
                ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INR u √ó updRel name f g t u)
updRel-INR‚Çó‚Üí {name} {f} {g} {t} {.(INR x)} (updRel-INR .t x u) = x , refl , u



isHighest‚Ñï-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (APPLY a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY a b} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p = 0 , LAMBDA t , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , q) rewrite q with is-NUM b
... |       inj‚ÇÅ (j , r) rewrite r with getT j name' w
... |          just t = 0 , CS name' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          nothing = 0 , CS name' , w , refl , h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h | inj‚ÇÇ x | inj‚ÇÅ (name' , q) | inj‚ÇÇ r with step‚äé b w
... |          inj‚ÇÅ (b0 , w0 , z) rewrite z = 0 , CS name' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          inj‚ÇÇ z rewrite z = 0 , CS name' , w , refl , h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (APPLY a b) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-APPLY‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (APPLY a‚ÇÅ b‚ÇÅ) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , APPLY y1 b‚ÇÅ , APPLY y2 b‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-APPLY _ _ _ _ r updb
  where
    comp1' : APPLY a‚ÇÅ b‚ÇÅ ‚áì APPLY y1 b‚ÇÅ from w1 to w3
    comp1' = ‚Üísteps-APPLY b‚ÇÅ k1 comp1

    comp2' : APPLY a‚ÇÇ b‚ÇÇ ‚áì APPLY y2 b‚ÇÇ from w to w
    comp2' = ‚Üísteps-APPLY b‚ÇÇ k2 comp2




isHighest‚Ñï-LET‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (LET a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {LET a b} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-LET‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-LET‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h with isValue‚äé a
... | inj‚ÇÅ x = 0 , a , w , refl , fst h , x , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-LET‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-LET‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (LET a b) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-LET‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-LET‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-LET‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (LET a‚ÇÅ b‚ÇÅ) w1 (LET a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-LET‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , LET y1 b‚ÇÅ , LET y2 b‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-LET _ _ _ _ r updb
  where
    comp1' : LET a‚ÇÅ b‚ÇÅ ‚áì LET y1 b‚ÇÅ from w1 to w3
    comp1' = LET‚áìsteps k1 b‚ÇÅ comp1

    comp2' : LET a‚ÇÇ b‚ÇÇ ‚áì LET y2 b‚ÇÇ from w to w
    comp2' = LET‚áìsteps k2 b‚ÇÇ comp2




isHighest‚Ñï-SUC‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (SUC a , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {SUC a} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-SUC‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-SUC‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {v} {w} {w'} comp isv h with is-NUM a
... | inj‚ÇÅ (i , p) rewrite p = 0 , NUM i , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-SUC‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-SUC‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (SUC a) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-SUC‚ÇÅ‚Üí {n} {name} {f} {g} {a} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-SUC‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-SUC‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (SUC a‚ÇÅ) w1 (SUC a‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-SUC‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {w1} {w} (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , SUC y1 , SUC y2 , w3 , snd comp1' , snd comp2' ,
  updRel-SUC _ _ r
  where
    comp1' : SUC a‚ÇÅ ‚áì SUC y1 from w1 to w3
    comp1' = SUC‚áìsteps k1 comp1

    comp2' : SUC a‚ÇÇ ‚áì SUC y2 from w to w
    comp2' = SUC‚áìsteps k2 comp2


isHighest‚Ñï-FIX‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (FIX a , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {FIX a} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-FIX‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-FIX‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {v} {w} {w'} comp isv h with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p = 0 , LAMBDA t , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-FIX‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-FIX‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (FIX a) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-FIX‚ÇÅ‚Üí {n} {name} {f} {g} {a} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-FIX‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-FIX‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (FIX a‚ÇÅ) w1 (FIX a‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-FIX‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {w1} {w} (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , FIX y1 , FIX y2 , w3 , snd comp1' , snd comp2' ,
  updRel-FIX _ _ r
  where
    comp1' : FIX a‚ÇÅ ‚áì FIX y1 from w1 to w3
    comp1' = FIX‚áìsteps k1 comp1

    comp2' : FIX a‚ÇÇ ‚áì FIX y2 from w to w
    comp2' = FIX‚áìsteps k2 comp2



isHighest‚Ñï-SPREAD‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (SPREAD a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {SPREAD a b} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-SPREAD‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-SPREAD‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h with is-PAIR a
... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p = 0 , PAIR u‚ÇÅ u‚ÇÇ , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-SPREAD‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-SPREAD‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (SPREAD a b) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-SPREAD‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-SPREAD‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-SPREAD‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (SPREAD a‚ÇÅ b‚ÇÅ) w1 (SPREAD a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-SPREAD‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , SPREAD y1 b‚ÇÅ , SPREAD y2 b‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-SPREAD _ _ _ _ r updb
  where
    comp1' : SPREAD a‚ÇÅ b‚ÇÅ ‚áì SPREAD y1 b‚ÇÅ from w1 to w3
    comp1' = SPREAD‚áìsteps k1 b‚ÇÅ comp1

    comp2' : SPREAD a‚ÇÇ b‚ÇÇ ‚áì SPREAD y2 b‚ÇÇ from w to w
    comp2' = SPREAD‚áìsteps k2 b‚ÇÇ comp2



isHighest‚Ñï-CHOOSE‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (CHOOSE a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {CHOOSE a b} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-CHOOSE‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-CHOOSE‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h with is-NAME a
... | inj‚ÇÅ (name' , p) rewrite p = 0 , NAME name' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-CHOOSE‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-CHOOSE‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (CHOOSE a b) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-CHOOSE‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-CHOOSE‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-CHOOSE‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (CHOOSE a‚ÇÅ b‚ÇÅ) w1 (CHOOSE a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-CHOOSE‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , CHOOSE y1 b‚ÇÅ , CHOOSE y2 b‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-CHOOSE _ _ _ _ r updb
  where
    comp1' : CHOOSE a‚ÇÅ b‚ÇÅ ‚áì CHOOSE y1 b‚ÇÅ from w1 to w3
    comp1' = CHOOSE‚áìsteps k1 b‚ÇÅ comp1

    comp2' : CHOOSE a‚ÇÇ b‚ÇÇ ‚áì CHOOSE y2 b‚ÇÇ from w to w
    comp2' = CHOOSE‚áìsteps k2 b‚ÇÇ comp2



isHighest‚Ñï-DECIDE‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b c v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (DECIDE a b c , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {DECIDE a b c} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-DECIDE‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {c} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-DECIDE‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {v} {w} {w'} comp isv h with is-INL a
... | inj‚ÇÅ (x , p) rewrite p = 0 , INL x , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with is-INR a
... |    inj‚ÇÅ (y , p) rewrite p = 0 , INR y , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |    inj‚ÇÇ y with step‚äé a w
... |       inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-DECIDE‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {c} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |       inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-DECIDE‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b c : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (DECIDE a b c) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-DECIDE‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {c} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-DECIDE‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {c} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-DECIDE‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) w1 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-DECIDE‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {c‚ÇÅ} {c‚ÇÇ} {w1} {w} updb updc (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , DECIDE y1 b‚ÇÅ c‚ÇÅ , DECIDE y2 b‚ÇÇ c‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-DECIDE _ _ _ _ _ _ r updb updc
  where
    comp1' : DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ ‚áì DECIDE y1 b‚ÇÅ c‚ÇÅ from w1 to w3
    comp1' = DECIDE‚áìsteps k1 b‚ÇÅ c‚ÇÅ comp1

    comp2' : DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ ‚áì DECIDE y2 b‚ÇÇ c‚ÇÇ from w to w
    comp2' = DECIDE‚áìsteps k2 b‚ÇÇ c‚ÇÇ comp2



‚ÜíisHighest‚Ñï-val : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {a v : Term} {w1 w2 : ùïé¬∑}
                    ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
                    ‚Üí getT‚â§‚Ñï w1 n name
                    ‚Üí isValue a
                    ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n name comp
‚ÜíisHighest‚Ñï-val {n} {0} {name} {a} {v} {w1} {w2} comp g isv
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = g
‚ÜíisHighest‚Ñï-val {n} {suc k} {name} {a} {v} {w1} {w2} comp g isv with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z)
  rewrite z | stepVal a w1 isv | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  g , ‚ÜíisHighest‚Ñï-val {n} {k} {name} {a} {v} {w1} {w2} comp g isv
... | inj‚ÇÇ z rewrite z = g


isHighest‚Ñï-LET‚Üí : {n : ‚Ñï} {k1 k2 : ‚Ñï} {name : Name} {a b u v : Term} {w1 w2 w3 : ùïé¬∑}
                    ‚Üí (comp1 : steps k1 (a , w1) ‚â° (u , w2))
                    ‚Üí (comp2 : steps k2 (LET a b , w1) ‚â° (v , w3))
                    ‚Üí isValue v
                    ‚Üí isHighest‚Ñï {k2} {w1} {w3} {LET a b} {v} n name comp2
                    ‚Üí isHighest‚Ñï {k1} {w1} {w2} {a} {u} n name comp1
isHighest‚Ñï-LET‚Üí {n} {0} {k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  rewrite sym (pair-inj‚ÇÅ comp1) | sym (pair-inj‚ÇÇ comp1) =
  isHighest‚Ñï‚ÜígetT‚â§‚Ñï {k2} {w1} {w3} {LET a b} {v} n name comp2 h
isHighest‚Ñï-LET‚Üí {n} {suc k1} {0} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  rewrite sym (pair-inj‚ÇÅ comp2) | sym (pair-inj‚ÇÇ comp2) = ‚ä•-elim isv
isHighest‚Ñï-LET‚Üí {n} {suc k1} {suc k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ x rewrite stepVal a w1 x | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  fst h , ‚ÜíisHighest‚Ñï-val {n} {k1} {name} {a} {u} {w1} {w2} comp1 (fst h) x
... |    inj‚ÇÇ x rewrite z = fst h , isHighest‚Ñï-LET‚Üí {n} {k1} {k2} {name} {a'} {b} {u} {v} {w1'} {w2} {w3} comp1 comp2 isv (snd h)
isHighest‚Ñï-LET‚Üí {n} {suc k1} {suc k2} {name} {a} {b} {u} {v} {w1} {w2} {w3} comp1 comp2 isv h | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp1) | sym (pair-inj‚ÇÇ comp1) with isValue‚äé a
... | inj‚ÇÅ x = fst h
... | inj‚ÇÇ x rewrite z = h




updRel-shiftUp : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel name f g a b
                 ‚Üí updRel name f g (shiftUp n a) (shiftUp n b)
updRel-shiftUp n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel-VAR x) = updRel-VAR _
updRel-shiftUp n {name} {f} {g} cf cg {.NAT} {.NAT} updRel-NAT = updRel-NAT
updRel-shiftUp n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel-QNAT = updRel-QNAT
updRel-shiftUp n {name} {f} {g} cf cg {.TNAT} {.TNAT} updRel-TNAT = updRel-TNAT
updRel-shiftUp n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LT _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QLT _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel-NUM x) = updRel-NUM _
updRel-shiftUp n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ) (updRel-shiftUp n cf cg u‚ÇÇ) (updRel-shiftUp n cf cg u‚ÇÉ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel-SUC a‚ÇÅ a‚ÇÇ u) = updRel-SUC _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PI _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel-LAMBDA _ _ (updRel-shiftUp (suc n) cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-APPLY _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel-FIX a‚ÇÅ a‚ÇÇ u) = updRel-FIX _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LET _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SUM _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PAIR _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SPREAD _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc (suc n)) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SET _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-ISECT _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-TUNION _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-UNION _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QTUNION _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel-INL a‚ÇÅ a‚ÇÇ u) = updRel-INL _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel-INR a‚ÇÅ a‚ÇÇ u) = updRel-INR _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-DECIDE _ _ _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ) (updRel-shiftUp (suc n) cf cg u‚ÇÇ)
updRel-shiftUp n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-EQ _ _ _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ) (updRel-shiftUp n cf cg u‚ÇÇ)
updRel-shiftUp n {name} {f} {g} cf cg {.AX} {.AX} updRel-AX = updRel-AX
updRel-shiftUp n {name} {f} {g} cf cg {.FREE} {.FREE} updRel-FREE = updRel-FREE
updRel-shiftUp n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-CHOOSE _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel-TSQUASH _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel-TTRUNC _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel-TCONST a‚ÇÅ a‚ÇÇ u) = updRel-TCONST _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel-SUBSING _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(PURE)} {.(PURE)} (updRel-PURE) = updRel-PURE
updRel-shiftUp n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel-DUM a‚ÇÅ a‚ÇÇ u) = updRel-DUM _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-FFDEFS _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel-UNIV x) = updRel-UNIV x
updRel-shiftUp n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel-LIFT a‚ÇÅ a‚ÇÇ u) = updRel-LIFT _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel-LOWER a‚ÇÅ a‚ÇÇ u) = updRel-LOWER _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel-SHRINK _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel-upd
  rewrite #shiftUp (suc (suc n)) (ct g cg)
        | #shiftUp (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel-upd



updRel-shiftDown : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel name f g a b
                 ‚Üí updRel name f g (shiftDown n a) (shiftDown n b)
updRel-shiftDown n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel-VAR x) = updRel-VAR _
updRel-shiftDown n {name} {f} {g} cf cg {.NAT} {.NAT} updRel-NAT = updRel-NAT
updRel-shiftDown n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel-QNAT = updRel-QNAT
updRel-shiftDown n {name} {f} {g} cf cg {.TNAT} {.TNAT} updRel-TNAT = updRel-TNAT
updRel-shiftDown n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LT _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QLT _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel-NUM x) = updRel-NUM _
updRel-shiftDown n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ) (updRel-shiftDown n cf cg u‚ÇÇ) (updRel-shiftDown n cf cg u‚ÇÉ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel-SUC a‚ÇÅ a‚ÇÇ u) = updRel-SUC _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PI _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel-LAMBDA _ _ (updRel-shiftDown (suc n) cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-APPLY _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel-FIX a‚ÇÅ a‚ÇÇ u) = updRel-FIX _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LET _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SUM _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PAIR _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SPREAD _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc (suc n)) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SET _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updRel-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-ISECT _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-TUNION _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-UNION _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QTUNION _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel-INL a‚ÇÅ a‚ÇÇ u) = updRel-INL _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel-INR a‚ÇÅ a‚ÇÇ u) = updRel-INR _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-DECIDE _ _ _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ) (updRel-shiftDown (suc n) cf cg u‚ÇÇ)
updRel-shiftDown n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-EQ _ _ _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ) (updRel-shiftDown n cf cg u‚ÇÇ)
updRel-shiftDown n {name} {f} {g} cf cg {.AX} {.AX} updRel-AX = updRel-AX
updRel-shiftDown n {name} {f} {g} cf cg {.FREE} {.FREE} updRel-FREE = updRel-FREE
updRel-shiftDown n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-CHOOSE _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel-TSQUASH _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel-TTRUNC _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel-TCONST a‚ÇÅ a‚ÇÇ u) = updRel-TCONST _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel-SUBSING _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(PURE)} {.(PURE)} (updRel-PURE) = updRel-PURE
updRel-shiftDown n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel-DUM a‚ÇÅ a‚ÇÇ u) = updRel-DUM _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-FFDEFS _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel-UNIV x) = updRel-UNIV _
updRel-shiftDown n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel-LIFT a‚ÇÅ a‚ÇÇ u) = updRel-LIFT _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel-LOWER a‚ÇÅ a‚ÇÇ u) = updRel-LOWER _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel-SHRINK _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel-upd
  rewrite #shiftDown (suc (suc n)) (ct g cg)
        | #shiftDown (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel-upd
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
-- LAMBDA (LET (VAR 0) (APPLY g (VAR 0)))



updRel-subv : (v : Var) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
              ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ
              ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
              ‚Üí updRel name f g (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
updRel-subv v {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (updRel-VAR x) ub with x ‚âü v
... | yes p = ub
... | no p = updRel-VAR x
updRel-subv v {name} {f} {g} cf cg {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} updRel-NAT ub = updRel-NAT
updRel-subv v {name} {f} {g} cf cg {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} updRel-QNAT ub = updRel-QNAT
updRel-subv v {name} {f} {g} cf cg {.TNAT} {.TNAT} {b‚ÇÅ} {b‚ÇÇ} updRel-TNAT ub = updRel-TNAT
updRel-subv v {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-LT _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-QLT _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (updRel-NUM x) ub = updRel-NUM x
updRel-subv v {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub) (updRel-subv v cf cg ua‚ÇÇ ub) (updRel-subv v cf cg ua‚ÇÉ ub)
updRel-subv v {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SUC a‚ÇÅ a‚ÇÇ ua) ub = updRel-SUC _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-PI _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LAMBDA a‚ÇÅ a‚ÇÇ ua) ub = updRel-LAMBDA _ _ (updRel-subv (suc v) cf cg ua (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-APPLY _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-FIX a‚ÇÅ a‚ÇÇ ua) ub = updRel-FIX _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-LET _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-SUM _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-PAIR _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-SPREAD _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc (suc v)) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg (updRel-shiftUp 0 cf cg ub)))
updRel-subv v {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-SET _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(ISECT a‚ÇÅ b‚ÇÉ)} {.(ISECT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-ISECT _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-TUNION _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-UNION _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-QTUNION _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-INL a‚ÇÅ a‚ÇÇ ua) ub = updRel-INL _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-INR a‚ÇÅ a‚ÇÇ ua) ub = updRel-INR _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel-DECIDE _ _ _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub)) (updRel-subv (suc v) cf cg ua‚ÇÇ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel-EQ _ _ _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub) (updRel-subv v cf cg ua‚ÇÇ ub)
updRel-subv v {name} {f} {g} cf cg {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} updRel-AX ub = updRel-AX
updRel-subv v {name} {f} {g} cf cg {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} updRel-FREE ub = updRel-FREE
updRel-subv v {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-CHOOSE _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TSQUASH a‚ÇÅ a‚ÇÇ ua) ub = updRel-TSQUASH _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TTRUNC a‚ÇÅ a‚ÇÇ ua) ub = updRel-TTRUNC _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TCONST a‚ÇÅ a‚ÇÇ ua) ub = updRel-TCONST _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SUBSING a‚ÇÅ a‚ÇÇ ua) ub = updRel-SUBSING _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(PURE)} {.(PURE)} {b‚ÇÅ} {b‚ÇÇ} (updRel-PURE) ub = updRel-PURE
updRel-subv v {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-DUM a‚ÇÅ a‚ÇÇ ua) ub = updRel-DUM _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-FFDEFS _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (updRel-UNIV x) ub = updRel-UNIV x
updRel-subv v {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LIFT a‚ÇÅ a‚ÇÇ ua) ub = updRel-LIFT _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LOWER a‚ÇÅ a‚ÇÇ ua) ub = updRel-LOWER _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SHRINK a‚ÇÅ a‚ÇÇ ua) ub = updRel-SHRINK _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(upd name f)} {.(force g)} {b‚ÇÅ} {b‚ÇÇ} updRel-upd ub
  rewrite subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÅ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
        | subv# (suc (suc v)) (shiftUp 0 (shiftUp 0 b‚ÇÇ)) g cg
  = updRel-upd
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
-- LAMBDA (LET (VAR 0) (APPLY g (VAR 0)))



updRel-sub : {name : Name} {f g : Term} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ
             ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
             ‚Üí updRel name f g (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
updRel-sub {name} {f} {g} cf cg {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ua ub =
  updRel-shiftDown 0 cf cg (updRel-subv 0 cf cg ua (updRel-shiftUp 0 cf cg ub))



isHighest‚Ñï-updBody-NUM3‚Üí< : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí (comp : steps k (LET (setT name (NUM m)) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (setT name (NUM m)) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM3‚Üí< gc {n} {name} {f} {0} {m} {v} {w1} {w2} compat comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM3‚Üí< gc {n} {name} {f} {suc k} {m} {v} {w1} {w2} compat comp isv (g0 , ish) =
  getT‚â§‚Ñï-chooseT‚Üí gc {name} {w1} {n} {m} compat g1
  where
    ish' : isHighest‚Ñï {k} {chooseT name w1 (NUM m)} {w2} {LET AX (APPLY f (NUM m))} {v} n name comp
    ish' = ish

    g1 : getT‚â§‚Ñï (chooseT name w1 (NUM m)) n name
    g1 = isHighest‚Ñï‚ÜígetT‚â§‚Ñï {k} {chooseT name w1 (NUM m)} {w2} {LET AX (APPLY f (NUM m))} {v} n name comp ish'



isHighest‚Ñï-updBody-NUM2‚Üí< : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {j m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí j < n
                             ‚Üí (comp : steps k (LET (IFLT (NUM j) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (IFLT (NUM j) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM2‚Üí< gc {n} {name} {f} {0} {j} {m} {v} {w1} {w2} compat ltjn comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM2‚Üí< gc {n} {name} {f} {suc k} {j} {m} {v} {w1} {w2} compat ltjn comp isv ish with j <? m
... | yes x = isHighest‚Ñï-updBody-NUM3‚Üí< gc {n} {name} {f} {k} {m} {v} {w1} {w2} compat comp isv (snd ish)
... | no x = <-trans ≥ (‚âÆ‚áí‚â• x) ltjn


isHighest‚Ñï-updBody-NUM2b‚Üí< : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {j m : ‚Ñï} {u v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí j < n
                             ‚Üí u ‚â° NUM j
                             ‚Üí (comp : steps k (LET (IFLT u (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (IFLT u (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM2b‚Üí< gc {n} {name} {f} {k} {j} {m} {u} {v} {w1} {w2} compat ltjn equ comp isv ish rewrite equ =
  isHighest‚Ñï-updBody-NUM2‚Üí< gc {n} {name} {f} {k} {j} {m} {v} {w1} {w2} compat ltjn comp isv ish



isHighest‚Ñï-updBody-NUM1‚Üí< : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí (comp : steps k (LET (IFLT (get0 name) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (IFLT (get0 name) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {0} {m} {v} {w1} {w2} compat comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {suc k} {m} {v} {w1} {w2} compat comp isv ish with getT‚äé 0 name w1
... | inj‚ÇÅ (u , p) rewrite p =
  isHighest‚Ñï-updBody-NUM2b‚Üí< gc {n} {name} {f} {k} {j} {m} {u} {v} {w1} {w2} compat ltj equ comp isv (snd ish)
  where
    j : ‚Ñï
    j = fst (fst ish)

    gj : getT 0 name w1 ‚â° just (NUM j)
    gj = fst (snd (fst ish))

    equ : u ‚â° NUM j
    equ = just-inj (trans (sym p) gj)

    ltj : j < n
    ltj = snd (snd (fst ish))
... | inj‚ÇÇ p rewrite p | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv



isHighest‚Ñï-updBody-NUM‚Üí< : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí # f
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí (comp : steps k (LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM‚Üí< gc {n} {name} {f} {0} {m} {v} {w1} {w2} cf compat comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM‚Üí< gc {n} {name} {f} {suc k} {m} {v} {w1} {w2} cf compat comp isv ish
  rewrite #shiftUp 0 (ct f cf) | subv# 1 (NUM m) f cf | #shiftDown 1 (ct f cf) =
  isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {k} {m} {v} {w1} {w2} compat comp isv (snd ish)



isHighest‚Ñï-updBody‚Üí< : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f : Term} {k1 k2 : ‚Ñï} {a v : Term} {m : ‚Ñï} {w1 w2 w3 : ùïé¬∑}
                         ‚Üí # f
                         ‚Üí compatible¬∑ name w1 Res‚ä§
                         ‚Üí (comp1 : steps k1 (a , w1) ‚â° (NUM m , w2))
                         ‚Üí (comp2 : steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w3))
                         ‚Üí isValue v
                         ‚Üí isHighest‚Ñï {k2} {w1} {w3} {LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {v} n name comp2
                         ‚Üí m < n
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {0} {k2} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish
  rewrite pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 =
  isHighest‚Ñï-updBody-NUM‚Üí< gc {n} {name} {f} {k2} {m} {v} {w2} {w3} cf compat comp2 isv ish
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {suc k1} {0} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish
  rewrite pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2) = ‚ä•-elim isv
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {suc k1} {suc k2} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ x
  rewrite stepVal a w1 x
        | sym (pair-inj‚ÇÅ (just-inj z))
        | sym (pair-inj‚ÇÇ (just-inj z))
        | stepsVal a w1 k1 x
        | pair-inj‚ÇÅ comp1
        | pair-inj‚ÇÇ comp1
        | #shiftUp 0 (ct f cf)
        | subv# 1 (NUM m) f cf
        | #shiftDown 1 (ct f cf) = isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {k2} {m} {v} {w2} {w3} compat comp2 isv (snd ish)
... |    inj‚ÇÇ x rewrite z =
  isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {k1} {k2} {a'} {v} {m} {w1'} {w2} {w3} cf (‚äë-compatible¬∑ (step‚äë {w1} {w1'} {a} {a'} z) compat) comp1 comp2 isv (snd ish)
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {suc k1} {suc k2} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish | inj‚ÇÇ z
  rewrite z | pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 = ‚ä•-elim (¬¨just‚â°nothing z)



steps-trans+ : {n m : ‚Ñï} {a b c : Term} {w1 w2 w3 : ùïé¬∑}
              ‚Üí steps n (a , w1) ‚â° (b , w2)
              ‚Üí steps m (b , w2) ‚â° (c , w3)
              ‚Üí steps (n + m) (a , w1) ‚â° (c , w3)
steps-trans+ {n} {m} {a} {b} {c} {w1} {w2} {w3} comp1 comp2
  rewrite steps-+ n m a w1 | comp1 = comp2



‚ÜíAPPLY-force‚áìAPPLY-NUM : {m : ‚Ñï} {g a : Term} {w1 w2 : ùïé¬∑}
                          ‚Üí # g
                          ‚Üí a ‚áì NUM m from w1 to w2
                          ‚Üí APPLY (force g) a ‚áì APPLY g (NUM m) from w1 to w2
‚ÜíAPPLY-force‚áìAPPLY-NUM {m} {g} {a} {w1} {w2} cg comp =
  ‚áì-trans‚ÇÇ {w1} {w1} {w2} {APPLY (force g) a} {LET a (APPLY g (VAR 0))} {APPLY g (NUM m)}
           (1 , ‚Üí‚â°pair e1 refl)
           (‚áì-trans‚ÇÇ {w1} {w2} {w2} {LET a (APPLY g (VAR 0))} {LET (NUM m) (APPLY g (VAR 0))} {APPLY g (NUM m)}
                     (LET‚áì (APPLY g (VAR 0)) comp)
                     (1 , ‚Üí‚â°pair e2 refl))
  where
    e1 : sub a (LET (VAR 0) (APPLY g (VAR 0))) ‚â° LET a (APPLY g (VAR 0))
    e1 rewrite subNotIn a g cg
             | subv# 1 (shiftUp 0 (shiftUp 0 a)) g cg
             | #shiftDown 1 (ct g cg)
             | shiftDownUp a 0 = refl

    e2 : sub (NUM m) (APPLY g (VAR 0)) ‚â° APPLY g (NUM m)
    e2 rewrite subNotIn (NUM m) g cg = refl



Œ£steps-updRel-NUM‚Üí : {name : Name} {f g : Term} {m : ‚Ñï} {b : Term} {w1 : ùïé¬∑}
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w1) ‚â° (v' , w1) √ó updRel name f g (NUM m) v'))
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí steps k' (b , w1) ‚â° (NUM m , w1))
Œ£steps-updRel-NUM‚Üí {name} {f} {g} {m} {b} {w1} (k' , .(NUM m) , comp , updRel-NUM .m) = k' , comp



updRel‚Üí¬¨Names : {name : Name} {f g a b : Term}
                 ‚Üí ¬¨Names g
                 ‚Üí updRel name f g a b
                 ‚Üí ¬¨names b ‚â° true
updRel‚Üí¬¨Names {name} {f} {g} {.(VAR x)} {.(VAR x)} nng (updRel-VAR x) = refl
updRel‚Üí¬¨Names {name} {f} {g} {.NAT} {.NAT} nng updRel-NAT = refl
updRel‚Üí¬¨Names {name} {f} {g} {.QNAT} {.QNAT} nng updRel-QNAT = refl
updRel‚Üí¬¨Names {name} {f} {g} {.TNAT} {.TNAT} nng updRel-TNAT = refl
updRel‚Üí¬¨Names {name} {f} {g} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} nng (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} nng (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(NUM x)} {.(NUM x)} nng (updRel-NUM x) = refl
updRel‚Üí¬¨Names {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} nng (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = ‚Üí‚àß4‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ) (updRel‚Üí¬¨Names nng u‚ÇÇ) (updRel‚Üí¬¨Names nng u‚ÇÉ)
updRel‚Üí¬¨Names {name} {f} {g} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} nng (updRel-SUC a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} nng (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} nng (updRel-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} nng (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} nng (updRel-FIX a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} nng (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} nng (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} nng (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} nng (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} nng (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} nng (updRel-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} nng (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} nng (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} nng (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} nng (updRel-INL a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} nng (updRel-INR a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} nng (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = ‚Üí‚àß3‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ) (updRel‚Üí¬¨Names nng u‚ÇÇ)
updRel‚Üí¬¨Names {name} {f} {g} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} nng (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = ‚Üí‚àß3‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ) (updRel‚Üí¬¨Names nng u‚ÇÇ)
updRel‚Üí¬¨Names {name} {f} {g} {.AX} {.AX} nng updRel-AX = refl
updRel‚Üí¬¨Names {name} {f} {g} {.FREE} {.FREE} nng updRel-FREE = refl
updRel‚Üí¬¨Names {name} {f} {g} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} nng (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} nng (updRel-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} nng (updRel-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} nng (updRel-TCONST a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} nng (updRel-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(PURE)} {.(PURE)} nng (updRel-PURE) = refl
updRel‚Üí¬¨Names {name} {f} {g} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} nng (updRel-DUM a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} nng (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = ‚Üí‚àß‚â°true (updRel‚Üí¬¨Names nng u) (updRel‚Üí¬¨Names nng u‚ÇÅ)
updRel‚Üí¬¨Names {name} {f} {g} {.(UNIV x)} {.(UNIV x)} nng (updRel-UNIV x) = refl
updRel‚Üí¬¨Names {name} {f} {g} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} nng (updRel-LIFT a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} nng (updRel-LOWER a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} nng (updRel-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel‚Üí¬¨Names nng u
updRel‚Üí¬¨Names {name} {f} {g} {.(upd name f)} {.(force g)} nng updRel-upd rewrite nng = refl



¬¨Names-APPLY : {a b : Term} ‚Üí ¬¨Names a ‚Üí ¬¨Names b ‚Üí ¬¨Names (APPLY a b)
¬¨Names-APPLY {a} {b} nna nnb rewrite nna | nnb = refl



¬¨Names-force : {a : Term} ‚Üí ¬¨Names a ‚Üí ¬¨Names (force a)
¬¨Names-force {a} nna rewrite nna = refl



‚äëchooseT0if : {w : ùïé¬∑} {name : Name} {n m : ‚Ñï}
              ‚Üí w ‚äë¬∑ chooseT0if name w n m
‚äëchooseT0if {w} {name} {n} {m} with n <? m
... | yes x = choose‚äë¬∑ name w (T‚Üí‚ÑÇ¬∑ (NUM m))
... | no x = ‚äë-refl¬∑ w


steps-APPLY-val‚Üí : {k : ‚Ñï} {a b v : Term} {w1 w2 : ùïé¬∑}
                    ‚Üí isValue v
                    ‚Üí steps k (APPLY a b , w1) ‚â° (v , w2)
                    ‚Üí 0 < k
steps-APPLY-val‚Üí {0} {a} {b} {v} {w1} {w2} isv comp
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
steps-APPLY-val‚Üí {suc k} {a} {b} {v} {w1} {w2} isv comp = _‚â§_.s‚â§s _‚â§_.z‚â§n



‚ÜíŒ£stepsUpdRel-upd : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w1 w : ùïé¬∑}
                     ‚Üí # f
                     ‚Üí # g
                     ‚Üí ¬¨Names g
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí ‚àÄùïé-get0-NUM w1 name
                     ‚Üí updRel name f g a b
                     ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
                     ‚Üí stepsPresUpdRel n name f g (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
                     ‚Üí Œ£ (Œ£stepsUpdRel name f g (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) b) w)
                          (Œª x ‚Üí 0 < fst (snd x))
‚ÜíŒ£stepsUpdRel-upd gc {n} {name} {f} {g} {a} {b} {w1} {w} cf cg nng compat wgt0 u eqn (k , v , w2 , comp , isv , ish ,  ind) =
  (k2 + k3 , k5 + k6 , NUM i , NUM i , w1a , comp2b , compgd , updRel-NUM i) ,
  steps-APPLY-val‚Üí {k5 + k6} {force g} {b} {NUM i} {w} {w} tt compgd
  where
    c : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ‚Ñï (Œª m' ‚Üí
           k1 < k
           √ó k2 < k
           √ó getT 0 name w1' ‚â° just (NUM m')
           √ó ssteps k1 (a , w1) ‚â° just (NUM m , w1')
           √ó steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m))))))
    c = upd-decomp cf wgt0 comp isv
-- We need to know that m is less than n

    k1 : ‚Ñï
    k1 = fst c

    k2 : ‚Ñï
    k2 = fst (snd c)

    w1' : ùïé¬∑
    w1' = fst (snd (snd c))

    m : ‚Ñï
    m = fst (snd (snd (snd c)))

    m' : ‚Ñï
    m' = fst (snd (snd (snd (snd c))))

    ltk1 : k1 < k
    ltk1 = fst (snd (snd (snd (snd (snd c)))))

    ltk2 : k2 < k
    ltk2 = fst (snd (snd (snd (snd (snd (snd c))))))

    gt0 : getT 0 name w1' ‚â° just (NUM m')
    gt0 = fst (snd (snd (snd (snd (snd (snd (snd c)))))))

    comp1 : ssteps k1 (a , w1) ‚â° just (NUM m , w1')
    comp1 = fst (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    comp1b : steps k1 (a , w1) ‚â° (NUM m , w1')
    comp1b = ssteps‚Üísteps {k1} {a} {NUM m} {w1} {w1'} comp1

    comp2 : steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m)
    comp2 = snd (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    e1 : w1 ‚äë¬∑ w1'
    e1 = steps‚Üí‚äë k1 a (NUM m) comp1b

    e2 : w1 ‚äë¬∑ chooseT0if name w1' m' m
    e2 = ‚äë-trans¬∑ e1 (‚äëchooseT0if {w1'} {name} {m'} {m})

    ltm : m < n
    ltm = isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {k1} {k} {a} {v} {m} {w1} {w1'} {w2} cf compat comp1b comp isv ish

    q : strongMonEq w1 (APPLY f (NUM m)) (APPLY g (NUM m))
    q = eqn w1 (‚äë-refl¬∑ w1) m ltm

    i : ‚Ñï
    i = fst q

    c1 : Œ£ ùïé¬∑ (Œª w1a ‚Üí APPLY f (NUM m) ‚áì NUM i from chooseT0if name w1' m' m to w1a)
    c1 = ‚áì‚Üífrom-to (lower (fst (snd q) (chooseT0if name w1' m' m) e2))

    w1a : ùïé¬∑
    w1a = fst c1

    k3 : ‚Ñï
    k3 = fst (snd c1)

    c1b : steps k3 (APPLY f (NUM m) , chooseT0if name w1' m' m) ‚â° (NUM i , w1a)
    c1b = snd (snd c1)

    comp2b : steps (k2 + k3) (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (NUM i , w1a)
    comp2b = steps-trans+ {k2} {k3} {LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {APPLY f (NUM m)} {NUM i} {w1} {chooseT0if name w1' m' m} {w1a} comp2 c1b

    ish1 : isHighest‚Ñï {k1} {w1} {w1'} {a} {NUM m} n name comp1b
    ish1 = isHighest‚Ñï-LET‚Üí {n} {k1} {k} {name} {a} {SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))} {NUM m} {v} {w1} {w1'} {w2} comp1b comp isv ish

    indb : Œ£ ‚Ñï (Œª k' ‚Üí steps k' (b , w1) ‚â° (NUM m , w1))
    indb = Œ£steps-updRel-NUM‚Üí (ind k1 (<‚áí‚â§ ltk1) {a} {b} {NUM m} {w1} {w1'} {w1} u compat wgt0 eqn comp1b ish1 tt)

    k4 : ‚Ñï
    k4 = fst indb

    cb : steps k4 (b , w1) ‚â° (NUM m , w1)
    cb = snd indb

    compg : APPLY (force g) b ‚áì APPLY g (NUM m) from w1 to w1
    compg = ‚ÜíAPPLY-force‚áìAPPLY-NUM {m} {g} {b} {w1} {w1} cg (k4 , cb)

    k5 : ‚Ñï
    k5 = fst compg

    compgb : steps k5 (APPLY (force g) b , w1) ‚â° (APPLY g (NUM m) , w1)
    compgb = snd compg

    c2 : Œ£ ùïé¬∑ (Œª w1b ‚Üí APPLY g (NUM m) ‚áì NUM i from w1 to w1b)
    c2 = ‚áì‚Üífrom-to (lower (snd (snd q) w1 (‚äë-refl¬∑ _)))

    w1b : ùïé¬∑
    w1b = fst c2

    k6 : ‚Ñï
    k6 = fst (snd c2)

    c2b : steps k6 (APPLY g (NUM m) , w1) ‚â° (NUM i , w1b)
    c2b = snd (snd c2)

    compgc : steps (k5 + k6) (APPLY (force g) b , w1) ‚â° (NUM i , w1b)
    compgc = steps-trans+ {k5} {k6} {APPLY (force g) b} {APPLY g (NUM m)} {NUM i} {w1} {w1} {w1b} compgb c2b

    nnb : ¬¨Names b
    nnb = updRel‚Üí¬¨Names nng u

    compgd : steps (k5 + k6) (APPLY (force g) b , w) ‚â° (NUM i , w)
    compgd = fst (¬¨Names‚Üísteps (k5 + k6) w1 w1b w (APPLY (force g) b) (NUM i) (¬¨Names-APPLY {force g} {b} (¬¨Names-force {g} nng) nnb) compgc)

\end{code}
