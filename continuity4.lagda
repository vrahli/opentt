\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
--open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity4 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                   (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                   (X : ChoiceExt W C)
                   (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                   (F : Freeze {L} W C K P G N)
                   (E : Axiom.Extensionality.Propositional.Extensionality 0‚Ñì (lsuc(lsuc(L))))
                   (CB : ChoiceBar W M C K P G X N V F E) -- TODO - We won't need everything from there: use a different module
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)

{--
open import type_sys_props_nat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qnat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qlt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_free(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_pi(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_sum(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_set(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_eq(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_union(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_tsquash(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_ffdefs(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lift(W)(M)(C)(K)(P)(G)(E)
--}

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)



data updRel (name : Name) (f g : Term) : Term ‚Üí Term ‚Üí Set where
  updRel-VAR     : (x : Var) ‚Üí updRel name f g (VAR x) (VAR x)
  updRel-NAT     : updRel name f g NAT NAT
  updRel-QNAT    : updRel name f g QNAT QNAT
  updRel-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  updRel-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  updRel-NUM     : (x : ‚Ñï) ‚Üí updRel name f g (NUM x) (NUM x)
  updRel-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel name f g d‚ÇÅ d‚ÇÇ ‚Üí updRel name f g (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updRel-SUC     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (SUC a‚ÇÅ) (SUC a‚ÇÇ)
  updRel-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  updRel-LAMBDA  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (LAMBDA a‚ÇÅ) (LAMBDA a‚ÇÇ)
  updRel-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  updRel-FIX     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (FIX a‚ÇÅ) (FIX a‚ÇÇ)
  updRel-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  updRel-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  updRel-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  updRel-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  updRel-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  updRel-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  updRel-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  updRel-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  updRel-INL     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (INL a‚ÇÅ) (INL a‚ÇÇ)
  updRel-INR     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (INR a‚ÇÅ) (INR a‚ÇÇ)
  updRel-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel name f g (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ ‚Üí updRel name f g (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel-AX      : updRel name f g AX AX
  updRel-FREE    : updRel name f g FREE FREE
  --updRel-CS      : updRel name1 name2 f (CS name1) (CS name2)
  --updRel-CS      : updRel name1 name2 f (CS name1) (CS name2)
  --updRel-NAME    : updRel name1 name2 f (NAME name1) (NAME name2)
  --updRel-FRESH   : (a b : Term) ‚Üí updRel name1 name2 f a b ‚Üí updRel name1 name2 f (FRESH a) (FRESH b)
  updRel-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  updRel-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updRel name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updRel name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updRel name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updRel name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updRel-TSQUASH : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (TSQUASH a‚ÇÅ) (TSQUASH a‚ÇÇ)
  updRel-TTRUNC  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (TTRUNC a‚ÇÅ) (TTRUNC a‚ÇÇ)
  updRel-TCONST  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (TCONST a‚ÇÅ) (TCONST a‚ÇÇ)
  updRel-SUBSING : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (SUBSING a‚ÇÅ) (SUBSING a‚ÇÇ)
  updRel-DUM     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (DUM a‚ÇÅ) (DUM a‚ÇÇ)
  updRel-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ ‚Üí updRel name f g (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  updRel-UNIV    : (x : ‚Ñï) ‚Üí updRel name f g (UNIV x) (UNIV x)
  updRel-LIFT    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (LIFT a‚ÇÅ) (LIFT a‚ÇÇ)
  updRel-LOWER   : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (LOWER a‚ÇÅ) (LOWER a‚ÇÇ)
  updRel-SHRINK  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ ‚Üí updRel name f g (SHRINK a‚ÇÅ) (SHRINK a‚ÇÇ)
  updRel-upd     : updRel name f g (upd name f) (force g)



presUpdRel : (n : ‚Ñï) (name : Name) (f g : Term) (k : ‚Ñï) ‚Üí Set(lsuc L)
presUpdRel n name f g k =
  {a b v : Term} {w1 w2 w : ùïé¬∑}
  ‚Üí updRel name f g a b
  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
  ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
  ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n name comp
  ‚Üí isValue v
  ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w) ‚â° (v' , w) √ó updRel name f g v v'))


stepsPresUpdRel : (n : ‚Ñï) (name : Name) (f g : Term) (b : Term) (w : ùïé¬∑) ‚Üí Set(lsuc L)
stepsPresUpdRel n name f g b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£ (steps k (b , w) ‚â° (v , w')) (Œª comp ‚Üí
    isValue v
    √ó isHighest‚Ñï {k} {w} {w'} {b} {v} n name comp
    √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel n name f g k')))))


updRel-NUM‚Çó‚Üí : {name : Name} {f g : Term} {n : ‚Ñï} {a : Term}
               ‚Üí updRel name f g (NUM n) a
               ‚Üí a ‚â° NUM n
updRel-NUM‚Çó‚Üí {name} {f} {g} {n} {.(NUM n)} (updRel-NUM .n) = refl


Œ£stepsUpdRel : (name : Name) (f g : Term) (x : Term) (w2 : ùïé¬∑) (b : Term)  (w : ùïé¬∑) ‚Üí Set(L)
Œ£stepsUpdRel name f g x w2 b w =
  Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ Term (Œª y1 ‚Üí Œ£ Term (Œª y2 ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí
    steps k1 (x , w2) ‚â° (y1 , w3)
    √ó steps k2 (b , w) ‚â° (y2 , w)
    √ó updRel name f g y1 y2)))))



isHighest‚Ñï-IFLT‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b c d v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (IFLT a b c d , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {IFLT a b c d} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h with is-NUM a
... | inj‚ÇÅ (i1 , p) rewrite p with is-NUM b
... |    inj‚ÇÅ (i2 , q) rewrite q with i1 <? i2
... |       yes r = 0 , NUM i1 , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |       no r = 0 , NUM i1 , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h | inj‚ÇÅ (i1 , p) | inj‚ÇÇ q with step‚äé b w
... |       inj‚ÇÅ (b' , w0 , z) rewrite z = 0 , NUM i1 , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n --ret (IFLT a b' c d) w'
... |       inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv h | inj‚ÇÇ p with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {c} {d} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-IFLT‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b c d : Term} {w : ùïé¬∑}
                          ‚Üí stepsPresUpdRel n name f g (IFLT a b c d) w
                          ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-IFLT‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {c} {d} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {c} {d} {v} {w} {w'} comp isv ish



isHighest‚Ñï-IFLT‚ÇÇ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {m : ‚Ñï} {b c d v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (IFLT (NUM m) b c d , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {IFLT (NUM m) b c d} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {0} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv h with is-NUM b
... | inj‚ÇÅ (m' , q) rewrite q with m <? m'
... |    yes r = 0 , NUM m' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |    no r = 0 , NUM m' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {suc k} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv h | inj‚ÇÇ q with step‚äé b w
... |    inj‚ÇÅ (b0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {b0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {k} {name} {f} {g} {m} {b0} {c} {d} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {b} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-IFLT‚ÇÇ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {m : ‚Ñï} {b c d : Term} {w : ùïé¬∑}
                          ‚Üí stepsPresUpdRel n name f g (IFLT (NUM m) b c d) w
                          ‚Üí stepsPresUpdRel n name f g b w
stepsPresUpdRel-IFLT‚ÇÇ‚Üí {n} {name} {f} {g} {m} {b} {c} {d} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (b , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {b} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {k} {name} {f} {g} {m} {b} {c} {d} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ : {name : Name} {f g : Term} {m : ‚Ñï} {b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term} {w1 w : ùïé¬∑}
                       ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ
                       ‚Üí updRel name f g d‚ÇÅ d‚ÇÇ
                       ‚Üí Œ£stepsUpdRel name f g b‚ÇÅ w1 b‚ÇÇ w
                       ‚Üí Œ£stepsUpdRel name f g (IFLT (NUM m) b‚ÇÅ c‚ÇÅ d‚ÇÅ) w1 (IFLT (NUM m) b‚ÇÇ c‚ÇÇ d‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ {name} {f} {g} {m} {b‚ÇÅ} {b‚ÇÇ} {c‚ÇÅ} {c‚ÇÇ} {d‚ÇÅ} {d‚ÇÇ} {w1} {w} updc updd (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , IFLT (NUM m) y1 c‚ÇÅ d‚ÇÅ , IFLT (NUM m) y2 c‚ÇÇ d‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-IFLT _ _ _ _ _ _ _ _ (updRel-NUM m) r updc updd
  where
    comp1' : IFLT (NUM m) b‚ÇÅ c‚ÇÅ d‚ÇÅ ‚áì IFLT (NUM m) y1 c‚ÇÅ d‚ÇÅ from w1 to w3
    comp1' = IFLT-NUM-2nd‚áìsteps k1 m c‚ÇÅ d‚ÇÅ comp1

    comp2' : IFLT (NUM m) b‚ÇÇ c‚ÇÇ d‚ÇÇ ‚áì IFLT (NUM m) y2 c‚ÇÇ d‚ÇÇ from w to w
    comp2' = IFLT-NUM-2nd‚áìsteps k2 m c‚ÇÇ d‚ÇÇ comp2



‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term} {w1 w : ùïé¬∑}
                       ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                       ‚Üí updRel name f g c‚ÇÅ c‚ÇÇ
                       ‚Üí updRel name f g d‚ÇÅ d‚ÇÇ
                       ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                       ‚Üí Œ£stepsUpdRel name f g (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) w1 (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {c‚ÇÅ} {c‚ÇÇ} {d‚ÇÅ} {d‚ÇÇ} {w1} {w} updb updc updd (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , IFLT y1 b‚ÇÅ c‚ÇÅ d‚ÇÅ , IFLT y2 b‚ÇÇ c‚ÇÇ d‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-IFLT _ _ _ _ _ _ _ _ r updb updc updd
  where
    comp1' : IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ ‚áì IFLT y1 b‚ÇÅ c‚ÇÅ d‚ÇÅ from w1 to w3
    comp1' = IFLT-NUM-1st‚áìsteps k1 b‚ÇÅ c‚ÇÅ d‚ÇÅ comp1

    comp2' : IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ ‚áì IFLT y2 b‚ÇÇ c‚ÇÇ d‚ÇÇ from w to w
    comp2' = IFLT-NUM-1st‚áìsteps k2 b‚ÇÇ c‚ÇÇ d‚ÇÇ comp2



updRel-CS‚Çó‚Üí : {name : Name} {f g : Term} {n : Name} {a : Term}
              ‚Üí updRel name f g (CS n) a
              ‚Üí ‚ä•
updRel-CS‚Çó‚Üí {name} {f} {g} {n} {a} ()



updRel-NAME‚Çó‚Üí : {name : Name} {f g : Term} {n : Name} {a : Term}
                ‚Üí updRel name f g (NAME n) a
                ‚Üí ‚ä•
updRel-NAME‚Çó‚Üí {name} {f} {g} {n} {a} ()



updRel-LAMBDA‚Çó‚Üí : {name : Name} {f g : Term} {t : Term} {a : Term}
                  ‚Üí updRel name f g (LAMBDA t) a
                  ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó updRel name f g t u)
                     ‚äé (t ‚â° updBody name f √ó a ‚â° force g)
updRel-LAMBDA‚Çó‚Üí {name} {f} {g} {t} {.(LAMBDA a‚ÇÇ)} (updRel-LAMBDA .t a‚ÇÇ u) = inj‚ÇÅ (a‚ÇÇ , refl , u)
updRel-LAMBDA‚Çó‚Üí {name} {f} {g} {.(updBody name f)} {.(force g)} updRel-upd = inj‚ÇÇ (refl , refl)




isHighest‚Ñï-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (APPLY a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY a b} {v} n name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p = 0 , LAMBDA t , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , q) rewrite q with is-NUM b
... |       inj‚ÇÅ (j , r) rewrite r with getT j name' w
... |          just t = 0 , CS name' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          nothing = 0 , CS name' , w , refl , h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h | inj‚ÇÇ x | inj‚ÇÅ (name' , q) | inj‚ÇÇ r with step‚äé b w
... |          inj‚ÇÅ (b0 , w0 , z) rewrite z = 0 , CS name' , w , refl , fst h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          inj‚ÇÇ z rewrite z = 0 , CS name' , w , refl , h , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h)

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      fst (snd (snd (snd (snd (snd ind))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd ind))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel n name f g (APPLY a b) w
                           ‚Üí stepsPresUpdRel n name f g a w
stepsPresUpdRel-APPLY‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd hv))))) , fst (snd (snd (snd (snd hv)))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd hv))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish



‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ : {name : Name} {f g : Term} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w1 w : ùïé¬∑}
                        ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
                        ‚Üí Œ£stepsUpdRel name f g a‚ÇÅ w1 a‚ÇÇ w
                        ‚Üí Œ£stepsUpdRel name f g (APPLY a‚ÇÅ b‚ÇÅ) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} updb (k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , r) =
  fst comp1' , fst comp2' , APPLY y1 b‚ÇÅ , APPLY y2 b‚ÇÇ , w3 , snd comp1' , snd comp2' ,
  updRel-APPLY _ _ _ _ r updb
  where
    comp1' : APPLY a‚ÇÅ b‚ÇÅ ‚áì APPLY y1 b‚ÇÅ from w1 to w3
    comp1' = ‚Üísteps-APPLY b‚ÇÅ k1 comp1

    comp2' : APPLY a‚ÇÇ b‚ÇÇ ‚áì APPLY y2 b‚ÇÇ from w to w
    comp2' = ‚Üísteps-APPLY b‚ÇÇ k2 comp2



updRel-shiftUp : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel name f g a b
                 ‚Üí updRel name f g (shiftUp n a) (shiftUp n b)
updRel-shiftUp n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel-VAR x) = updRel-VAR _
updRel-shiftUp n {name} {f} {g} cf cg {.NAT} {.NAT} updRel-NAT = updRel-NAT
updRel-shiftUp n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel-QNAT = updRel-QNAT
updRel-shiftUp n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LT _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QLT _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel-NUM x) = updRel-NUM _
updRel-shiftUp n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ) (updRel-shiftUp n cf cg u‚ÇÇ) (updRel-shiftUp n cf cg u‚ÇÉ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel-SUC a‚ÇÅ a‚ÇÇ u) = updRel-SUC _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PI _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel-LAMBDA _ _ (updRel-shiftUp (suc n) cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-APPLY _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel-FIX a‚ÇÅ a‚ÇÇ u) = updRel-FIX _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LET _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SUM _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PAIR _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SPREAD _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc (suc n)) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SET _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-TUNION _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-UNION _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QTUNION _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel-INL a‚ÇÅ a‚ÇÇ u) = updRel-INL _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel-INR a‚ÇÅ a‚ÇÇ u) = updRel-INR _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-DECIDE _ _ _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp (suc n) cf cg u‚ÇÅ) (updRel-shiftUp (suc n) cf cg u‚ÇÇ)
updRel-shiftUp n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-EQ _ _ _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ) (updRel-shiftUp n cf cg u‚ÇÇ)
updRel-shiftUp n {name} {f} {g} cf cg {.AX} {.AX} updRel-AX = updRel-AX
updRel-shiftUp n {name} {f} {g} cf cg {.FREE} {.FREE} updRel-FREE = updRel-FREE
updRel-shiftUp n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-CHOOSE _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel-TSQUASH _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel-TTRUNC _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel-TCONST a‚ÇÅ a‚ÇÇ u) = updRel-TCONST _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel-SUBSING _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel-DUM a‚ÇÅ a‚ÇÇ u) = updRel-DUM _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-FFDEFS _ _ _ _ (updRel-shiftUp n cf cg u) (updRel-shiftUp n cf cg u‚ÇÅ)
updRel-shiftUp n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel-UNIV x) = updRel-UNIV x
updRel-shiftUp n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel-LIFT a‚ÇÅ a‚ÇÇ u) = updRel-LIFT _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel-LOWER a‚ÇÅ a‚ÇÇ u) = updRel-LOWER _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel-SHRINK _ _ (updRel-shiftUp n cf cg u)
updRel-shiftUp n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel-upd
  rewrite #shiftUp (suc (suc n)) (ct g cg)
        | #shiftUp (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel-upd



updRel-shiftDown : (n : ‚Ñï) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a b : Term}
                 ‚Üí updRel name f g a b
                 ‚Üí updRel name f g (shiftDown n a) (shiftDown n b)
updRel-shiftDown n {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} (updRel-VAR x) = updRel-VAR _
updRel-shiftDown n {name} {f} {g} cf cg {.NAT} {.NAT} updRel-NAT = updRel-NAT
updRel-shiftDown n {name} {f} {g} cf cg {.QNAT} {.QNAT} updRel-QNAT = updRel-QNAT
updRel-shiftDown n {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LT _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QLT _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} (updRel-NUM x) = updRel-NUM _
updRel-shiftDown n {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ) (updRel-shiftDown n cf cg u‚ÇÇ) (updRel-shiftDown n cf cg u‚ÇÉ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updRel-SUC a‚ÇÅ a‚ÇÇ u) = updRel-SUC _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PI _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updRel-LAMBDA a‚ÇÅ a‚ÇÇ u) = updRel-LAMBDA _ _ (updRel-shiftDown (suc n) cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-APPLY _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updRel-FIX a‚ÇÅ a‚ÇÇ u) = updRel-FIX _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-LET _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SUM _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-PAIR _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SPREAD _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc (suc n)) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-SET _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-TUNION _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-UNION _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-QTUNION _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updRel-INL a‚ÇÅ a‚ÇÇ u) = updRel-INL _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updRel-INR a‚ÇÅ a‚ÇÇ u) = updRel-INR _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-DECIDE _ _ _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown (suc n) cf cg u‚ÇÅ) (updRel-shiftDown (suc n) cf cg u‚ÇÇ)
updRel-shiftDown n {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updRel-EQ _ _ _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ) (updRel-shiftDown n cf cg u‚ÇÇ)
updRel-shiftDown n {name} {f} {g} cf cg {.AX} {.AX} updRel-AX = updRel-AX
updRel-shiftDown n {name} {f} {g} cf cg {.FREE} {.FREE} updRel-FREE = updRel-FREE
updRel-shiftDown n {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-CHOOSE _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updRel-TSQUASH a‚ÇÅ a‚ÇÇ u) = updRel-TSQUASH _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updRel-TTRUNC a‚ÇÅ a‚ÇÇ u) = updRel-TTRUNC _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} (updRel-TCONST a‚ÇÅ a‚ÇÇ u) = updRel-TCONST _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updRel-SUBSING a‚ÇÅ a‚ÇÇ u) = updRel-SUBSING _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updRel-DUM a‚ÇÅ a‚ÇÇ u) = updRel-DUM _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updRel-FFDEFS _ _ _ _ (updRel-shiftDown n cf cg u) (updRel-shiftDown n cf cg u‚ÇÅ)
updRel-shiftDown n {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} (updRel-UNIV x) = updRel-UNIV _
updRel-shiftDown n {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updRel-LIFT a‚ÇÅ a‚ÇÇ u) = updRel-LIFT _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updRel-LOWER a‚ÇÅ a‚ÇÇ u) = updRel-LOWER _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updRel-SHRINK a‚ÇÅ a‚ÇÇ u) = updRel-SHRINK _ _ (updRel-shiftDown n cf cg u)
updRel-shiftDown n {name} {f} {g} cf cg {.(upd name f)} {.(force g)} updRel-upd
  rewrite #shiftDown (suc (suc n)) (ct g cg)
        | #shiftDown (suc (suc (suc n))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updRel-upd
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
-- LAMBDA (LET (VAR 0) (APPLY g (VAR 0)))



updRel-subv : (v : Var) {name : Name} {f g : Term} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
              ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ
              ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
              ‚Üí updRel name f g (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
updRel-subv v {name} {f} {g} cf cg {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (updRel-VAR x) ub with x ‚âü v
... | yes p = ub
... | no p = updRel-VAR x
updRel-subv v {name} {f} {g} cf cg {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} updRel-NAT ub = updRel-NAT
updRel-subv v {name} {f} {g} cf cg {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} updRel-QNAT ub = updRel-QNAT
updRel-subv v {name} {f} {g} cf cg {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-LT _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-QLT _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (updRel-NUM x) ub = updRel-NUM x
updRel-subv v {name} {f} {g} cf cg {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub) (updRel-subv v cf cg ua‚ÇÇ ub) (updRel-subv v cf cg ua‚ÇÉ ub)
updRel-subv v {name} {f} {g} cf cg {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SUC a‚ÇÅ a‚ÇÇ ua) ub = updRel-SUC _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-PI _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LAMBDA a‚ÇÅ a‚ÇÇ ua) ub = updRel-LAMBDA _ _ (updRel-subv (suc v) cf cg ua (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-APPLY _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-FIX a‚ÇÅ a‚ÇÇ ua) ub = updRel-FIX _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-LET _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-SUM _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-PAIR _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-SPREAD _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc (suc v)) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg (updRel-shiftUp 0 cf cg ub)))
updRel-subv v {name} {f} {g} cf cg {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-SET _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-TUNION _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-UNION _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-QTUNION _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-INL a‚ÇÅ a‚ÇÇ ua) ub = updRel-INL _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-INR a‚ÇÅ a‚ÇÇ ua) ub = updRel-INR _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel-DECIDE _ _ _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv (suc v) cf cg ua‚ÇÅ (updRel-shiftUp 0 cf cg ub)) (updRel-subv (suc v) cf cg ua‚ÇÇ (updRel-shiftUp 0 cf cg ub))
updRel-subv v {name} {f} {g} cf cg {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updRel-EQ _ _ _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub) (updRel-subv v cf cg ua‚ÇÇ ub)
updRel-subv v {name} {f} {g} cf cg {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} updRel-AX ub = updRel-AX
updRel-subv v {name} {f} {g} cf cg {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} updRel-FREE ub = updRel-FREE
updRel-subv v {name} {f} {g} cf cg {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-CHOOSE _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TSQUASH a‚ÇÅ a‚ÇÇ ua) ub = updRel-TSQUASH _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TTRUNC a‚ÇÅ a‚ÇÇ ua) ub = updRel-TTRUNC _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-TCONST a‚ÇÅ a‚ÇÇ ua) ub = updRel-TCONST _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SUBSING a‚ÇÅ a‚ÇÇ ua) ub = updRel-SUBSING _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-DUM a‚ÇÅ a‚ÇÇ ua) ub = updRel-DUM _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updRel-FFDEFS _ _ _ _ (updRel-subv v cf cg ua ub) (updRel-subv v cf cg ua‚ÇÅ ub)
updRel-subv v {name} {f} {g} cf cg {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (updRel-UNIV x) ub = updRel-UNIV x
updRel-subv v {name} {f} {g} cf cg {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LIFT a‚ÇÅ a‚ÇÇ ua) ub = updRel-LIFT _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-LOWER a‚ÇÅ a‚ÇÇ ua) ub = updRel-LOWER _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updRel-SHRINK a‚ÇÅ a‚ÇÇ ua) ub = updRel-SHRINK _ _ (updRel-subv v cf cg ua ub)
updRel-subv v {name} {f} {g} cf cg {.(upd name f)} {.(force g)} {b‚ÇÅ} {b‚ÇÇ} updRel-upd ub
  rewrite subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b‚ÇÅ))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
        | subv# (suc (suc v)) (shiftUp 0 (shiftUp 0 b‚ÇÇ)) g cg
  = updRel-upd
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
-- LAMBDA (LET (VAR 0) (APPLY g (VAR 0)))



updRel-sub : {name : Name} {f g : Term} (cf : # f) (cg : # g) {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí updRel name f g a‚ÇÅ a‚ÇÇ
             ‚Üí updRel name f g b‚ÇÅ b‚ÇÇ
             ‚Üí updRel name f g (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
updRel-sub {name} {f} {g} cf cg {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ua ub =
  updRel-shiftDown 0 cf cg (updRel-subv 0 cf cg ua (updRel-shiftUp 0 cf cg ub))



isHighest‚Ñï-updBody-NUM3‚Üí< : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí (comp : steps k (LET (setT name (NUM m)) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (setT name (NUM m)) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM3‚Üí< gc {n} {name} {f} {0} {m} {v} {w1} {w2} compat comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM3‚Üí< gc {n} {name} {f} {suc k} {m} {v} {w1} {w2} compat comp isv (g0 , ish) =
  getT‚â§‚Ñï-chooseT‚Üí gc {name} {w1} {n} {m} compat g1
  where
    ish' : isHighest‚Ñï {k} {chooseT name w1 (NUM m)} {w2} {LET AX (APPLY f (NUM m))} {v} n name comp
    ish' = ish

    g1 : getT‚â§‚Ñï (chooseT name w1 (NUM m)) n name
    g1 = isHighest‚Ñï‚ÜígetT‚â§‚Ñï {k} {chooseT name w1 (NUM m)} {w2} {LET AX (APPLY f (NUM m))} {v} n name comp ish'



isHighest‚Ñï-updBody-NUM2‚Üí< : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {j m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí j < n
                             ‚Üí (comp : steps k (LET (IFLT (NUM j) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (IFLT (NUM j) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM2‚Üí< gc {n} {name} {f} {0} {j} {m} {v} {w1} {w2} compat ltjn comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM2‚Üí< gc {n} {name} {f} {suc k} {j} {m} {v} {w1} {w2} compat ltjn comp isv ish with j <? m
... | yes x = isHighest‚Ñï-updBody-NUM3‚Üí< gc {n} {name} {f} {k} {m} {v} {w1} {w2} compat comp isv (snd ish)
... | no x = <-trans ≥ (‚âÆ‚áí‚â• x) ltjn


isHighest‚Ñï-updBody-NUM2b‚Üí< : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {j m : ‚Ñï} {u v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí j < n
                             ‚Üí u ‚â° NUM j
                             ‚Üí (comp : steps k (LET (IFLT u (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (IFLT u (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM2b‚Üí< gc {n} {name} {f} {k} {j} {m} {u} {v} {w1} {w2} compat ltjn equ comp isv ish rewrite equ =
  isHighest‚Ñï-updBody-NUM2‚Üí< gc {n} {name} {f} {k} {j} {m} {v} {w1} {w2} compat ltjn comp isv ish



isHighest‚Ñï-updBody-NUM1‚Üí< : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí (comp : steps k (LET (IFLT (get0 name) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (IFLT (get0 name) (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {0} {m} {v} {w1} {w2} compat comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {suc k} {m} {v} {w1} {w2} compat comp isv ish with getT‚äé 0 name w1
... | inj‚ÇÅ (u , p) rewrite p =
  isHighest‚Ñï-updBody-NUM2b‚Üí< gc {n} {name} {f} {k} {j} {m} {u} {v} {w1} {w2} compat ltj equ comp isv (snd ish)
  where
    j : ‚Ñï
    j = fst (fst ish)

    gj : getT 0 name w1 ‚â° just (NUM j)
    gj = fst (snd (fst ish))

    equ : u ‚â° NUM j
    equ = just-inj (trans (sym p) gj)

    ltj : j < n
    ltj = snd (snd (fst ish))
... | inj‚ÇÇ p rewrite p | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv



isHighest‚Ñï-updBody-NUM‚Üí< : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f : Term} {k : ‚Ñï} {m : ‚Ñï} {v : Term} {w1 w2 : ùïé¬∑}
                             ‚Üí # f
                             ‚Üí compatible¬∑ name w1 Res‚ä§
                             ‚Üí (comp : steps k (LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w2))
                             ‚Üí isValue v
                             ‚Üí isHighest‚Ñï {k} {w1} {w2} {LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {v} n name comp
                             ‚Üí m < n
isHighest‚Ñï-updBody-NUM‚Üí< gc {n} {name} {f} {0} {m} {v} {w1} {w2} cf compat comp isv ish
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = ‚ä•-elim isv
isHighest‚Ñï-updBody-NUM‚Üí< gc {n} {name} {f} {suc k} {m} {v} {w1} {w2} cf compat comp isv ish
  rewrite #shiftUp 0 (ct f cf) | subv# 1 (NUM m) f cf | #shiftDown 1 (ct f cf) =
  isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {k} {m} {v} {w1} {w2} compat comp isv (snd ish)



isHighest‚Ñï-updBody‚Üí< : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f : Term} {k1 k2 : ‚Ñï} {a v : Term} {m : ‚Ñï} {w1 w2 w3 : ùïé¬∑}
                         ‚Üí # f
                         ‚Üí compatible¬∑ name w1 Res‚ä§
                         ‚Üí (comp1 : steps k1 (a , w1) ‚â° (NUM m , w2))
                         ‚Üí (comp2 : steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w3))
                         ‚Üí isValue v
                         ‚Üí isHighest‚Ñï {k2} {w1} {w3} {LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {v} n name comp2
                         ‚Üí m < n
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {0} {k2} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish
  rewrite pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 =
  isHighest‚Ñï-updBody-NUM‚Üí< gc {n} {name} {f} {k2} {m} {v} {w2} {w3} cf compat comp2 isv ish
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {suc k1} {0} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish
  rewrite pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2) = ‚ä•-elim isv
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {suc k1} {suc k2} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ x
  rewrite stepVal a w1 x
        | sym (pair-inj‚ÇÅ (just-inj z))
        | sym (pair-inj‚ÇÇ (just-inj z))
        | stepsVal a w1 k1 x
        | pair-inj‚ÇÅ comp1
        | pair-inj‚ÇÇ comp1
        | #shiftUp 0 (ct f cf)
        | subv# 1 (NUM m) f cf
        | #shiftDown 1 (ct f cf) = isHighest‚Ñï-updBody-NUM1‚Üí< gc {n} {name} {f} {k2} {m} {v} {w2} {w3} compat comp2 isv (snd ish)
... |    inj‚ÇÇ x rewrite z =
  isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {k1} {k2} {a'} {v} {m} {w1'} {w2} {w3} cf (‚äë-compatible¬∑ (step‚äë {w1} {w1'} {a} {a'} z) compat) comp1 comp2 isv (snd ish)
isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {suc k1} {suc k2} {a} {v} {m} {w1} {w2} {w3} cf compat comp1 comp2 isv ish | inj‚ÇÇ z
  rewrite z | pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 = ‚ä•-elim (¬¨just‚â°nothing z)



steps-trans+ : {n m : ‚Ñï} {a b c : Term} {w1 w2 w3 : ùïé¬∑}
              ‚Üí steps n (a , w1) ‚â° (b , w2)
              ‚Üí steps m (b , w2) ‚â° (c , w3)
              ‚Üí steps (n + m) (a , w1) ‚â° (c , w3)
steps-trans+ {n} {m} {a} {b} {c} {w1} {w2} {w3} comp1 comp2
  rewrite steps-+ n m a w1 | comp1 = comp2



‚ÜíAPPLY-force‚áìAPPLY-NUM : {m : ‚Ñï} {g a : Term} {w1 w2 : ùïé¬∑}
                          ‚Üí # g
                          ‚Üí a ‚áì NUM m from w1 to w2
                          ‚Üí APPLY (force g) a ‚áì APPLY g (NUM m) from w1 to w2
‚ÜíAPPLY-force‚áìAPPLY-NUM {m} {g} {a} {w1} {w2} cg comp =
  ‚áì-trans‚ÇÇ {w1} {w1} {w2} {APPLY (force g) a} {LET a (APPLY g (VAR 0))} {APPLY g (NUM m)}
           (1 , ‚Üí‚â°pair e1 refl)
           (‚áì-trans‚ÇÇ {w1} {w2} {w2} {LET a (APPLY g (VAR 0))} {LET (NUM m) (APPLY g (VAR 0))} {APPLY g (NUM m)}
                     (LET‚áì (APPLY g (VAR 0)) comp)
                     (1 , ‚Üí‚â°pair e2 refl))
  where
    e1 : sub a (LET (VAR 0) (APPLY g (VAR 0))) ‚â° LET a (APPLY g (VAR 0))
    e1 rewrite subNotIn a g cg
             | subv# 1 (shiftUp 0 (shiftUp 0 a)) g cg
             | #shiftDown 1 (ct g cg)
             | shiftDownUp a 0 = refl

    e2 : sub (NUM m) (APPLY g (VAR 0)) ‚â° APPLY g (NUM m)
    e2 rewrite subNotIn (NUM m) g cg = refl



Œ£steps-updRel-NUM‚Üí : {name : Name} {f g : Term} {m : ‚Ñï} {b : Term} {w1 : ùïé¬∑}
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w1) ‚â° (v' , w1) √ó updRel name f g (NUM m) v'))
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí steps k' (b , w1) ‚â° (NUM m , w1))
Œ£steps-updRel-NUM‚Üí {name} {f} {g} {m} {b} {w1} (k' , .(NUM m) , comp , updRel-NUM .m) = k' , comp


‚ÜíŒ£stepsUpdRel-upd : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w1 w : ùïé¬∑}
                     ‚Üí # f
                     ‚Üí ¬¨Names g
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí ‚àÄùïé-get0-NUM w1 name
                     ‚Üí updRel name f g a b
                     ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
                     ‚Üí stepsPresUpdRel n name f g (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
                     ‚Üí Œ£stepsUpdRel name f g (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) b) w
‚ÜíŒ£stepsUpdRel-upd gc {n} {name} {f} {g} {a} {b} {w1} {w} cf nng compat wgt0 u eqn (k , v , w2 , comp , isv , ish ,  ind) =
  k2 + k3 , {!!}
  where
    c : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ‚Ñï (Œª m' ‚Üí
           k1 < k
           √ó k2 < k
           √ó getT 0 name w1' ‚â° just (NUM m')
           √ó ssteps k1 (a , w1) ‚â° just (NUM m , w1')
           √ó steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m))))))
    c = upd-decomp cf wgt0 comp isv
-- We need to know that m is less than n

    k1 : ‚Ñï
    k1 = fst c

    k2 : ‚Ñï
    k2 = fst (snd c)

    w1' : ùïé¬∑
    w1' = fst (snd (snd c))

    m : ‚Ñï
    m = fst (snd (snd (snd c)))

    m' : ‚Ñï
    m' = fst (snd (snd (snd (snd c))))

    ltk1 : k1 < k
    ltk1 = fst (snd (snd (snd (snd (snd c)))))

    ltk2 : k2 < k
    ltk2 = fst (snd (snd (snd (snd (snd (snd c))))))

    gt0 : getT 0 name w1' ‚â° just (NUM m')
    gt0 = fst (snd (snd (snd (snd (snd (snd (snd c)))))))

    comp1 : ssteps k1 (a , w1) ‚â° just (NUM m , w1')
    comp1 = fst (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    comp1b : steps k1 (a , w1) ‚â° (NUM m , w1')
    comp1b = ssteps‚Üísteps {k1} {a} {NUM m} {w1} {w1'} comp1

    comp2 : steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m)
    comp2 = snd (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    e1 : w1 ‚äë¬∑ w1'
    e1 = steps‚Üí‚äë k1 a (NUM m) comp1b

    e2 : w1 ‚äë¬∑ chooseT0if name w1' m' m
    e2 = {!!}

    ltm : m < n -- use with eqn
    ltm = isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {k1} {k} {a} {v} {m} {w1} {w1'} {w2} cf compat comp1b comp isv ish

    q : strongMonEq w1 (APPLY f (NUM m)) (APPLY g (NUM m))
    q = eqn w1 (‚äë-refl¬∑ w1) m ltm

    i : ‚Ñï
    i = fst q

    c1 : Œ£ ùïé¬∑ (Œª w1a ‚Üí APPLY f (NUM m) ‚áì NUM i from chooseT0if name w1' m' m to w1a)
    c1 = ‚áì‚Üífrom-to (lower (fst (snd q) (chooseT0if name w1' m' m) e2))

    w1a : ùïé¬∑
    w1a = fst c1

    k3 : ‚Ñï
    k3 = fst (snd c1)

    c1b : steps k3 (APPLY f (NUM m) , chooseT0if name w1' m' m) ‚â° (NUM i , w1a)
    c1b = snd (snd c1)

    comp2b : steps (k2 + k3) (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (NUM i , w1a)
    comp2b = steps-trans+ {k2} {k3} {LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {APPLY f (NUM m)} {NUM i} {w1} {chooseT0if name w1' m' m} {w1a} comp2 c1b

    indb : Œ£ ‚Ñï (Œª k' ‚Üí steps k' (b , w1) ‚â° (NUM m , w1))
    indb = Œ£steps-updRel-NUM‚Üí (ind k1 {!!} {a} {b} {NUM m} {w1} {w1'} {w1} u {!!} comp1b {!!} tt)

    k4 : ‚Ñï
    k4 = fst indb

    cb : steps k4 (b , w1) ‚â° (NUM m , w1)
    cb = snd indb

    compg : APPLY (force g) b ‚áì APPLY g (NUM m) from w1 to w1
    compg = ‚ÜíAPPLY-force‚áìAPPLY-NUM {m} {g} {b} {w1} {w1} {!!} (k4 , cb)

    k5 : ‚Ñï
    k5 = fst compg

    compgb : steps k5 (APPLY (force g) b , w1) ‚â° (APPLY g (NUM m) , w1)
    compgb = snd compg

    c2 : Œ£ ùïé¬∑ (Œª w1b ‚Üí APPLY g (NUM m) ‚áì NUM i from w1 to w1b)
    c2 = ‚áì‚Üífrom-to (lower (snd (snd q) w1 (‚äë-refl¬∑ _)))

    w1b : ùïé¬∑
    w1b = fst c2

    k6 : ‚Ñï
    k6 = fst (snd c2)

    c2b : steps k6 (APPLY g (NUM m) , w1) ‚â° (NUM i , w1b)
    c2b = snd (snd c2)

    compgc : steps (k5 + k6) (APPLY (force g) b , w1) ‚â° (NUM i , w1b)
    compgc = steps-trans+ {k5} {k6} {APPLY (force g) b} {APPLY g (NUM m)} {NUM i} {w1} {w1} {w1b} compgb c2b

    compgd : steps (k5 + k6) (APPLY (force g) b , w) ‚â° (NUM i , w)
    compgd = {!!} -- use ¬¨Names‚Üísteps in terms4



step-updRel : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term}
              {a b x : Term} {w1 w2 w : ùïé¬∑}
              ‚Üí ¬¨Names f
              ‚Üí # f
              ‚Üí # g
              ‚Üí (k : ‚Ñï)
              ‚Üí step a w1 ‚â° just (x , w2)
              ‚Üí stepsPresUpdRel n name f g x w2
              ‚Üí updRel name f g a b
              ‚Üí getT‚â§‚Ñï w1 n name
              ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
              ‚Üí Œ£stepsUpdRel name f g x w2 b w
step-updRel gc {n} {name} {f} {g} {.NAT} {.NAT} {x} {w1} {w2} {w} nnf cf cg k comp ind updRel-NAT gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAT , NAT , w1 , refl , refl , updRel-NAT
step-updRel gc {n} {name} {f} {g} {.QNAT} {.QNAT} {x} {w1} {w2} {w} nnf cf cg k comp ind updRel-QNAT gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QNAT , QNAT , w1 , refl , refl , updRel-QNAT
step-updRel gc {n} {name} {f} {g} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-LT _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-QLT _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(NUM x‚ÇÅ)} {.(NUM x‚ÇÅ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-NUM x‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NUM x‚ÇÅ , NUM x‚ÇÅ , w1 , refl , refl , updRel-NUM _
step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn eqn with is-NUM a‚ÇÅ
... | inj‚ÇÅ (i1 , p) rewrite p | updRel-NUM‚Çó‚Üí r with is-NUM b‚ÇÅ
... |    inj‚ÇÅ (i2 , q) rewrite q | updRel-NUM‚Çó‚Üí r‚ÇÅ with i1 <? i2
... |       yes j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , refl , concl , r‚ÇÇ
  where
    concl : steps 1 (IFLT (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (c‚ÇÇ , w)
    concl with i1 <? i2
    ... | yes j' = refl
    ... | no j' = ‚ä•-elim (j' j)
... |       no j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , refl , concl , r‚ÇÉ
  where
    concl : steps 1 (IFLT (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (d‚ÇÇ , w)
    concl with i1 <? i2
    ... | yes j' = ‚ä•-elim (j j')
    ... | no j' = refl
step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn eqn | inj‚ÇÅ (i1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ r‚ÇÇ r‚ÇÉ ind'
  where
    ind' : Œ£stepsUpdRel name f g b‚ÇÅ' w1' b‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w1} {w1'} {w} nnf cf cg k z (stepsPresUpdRel-IFLT‚ÇÇ‚Üí ind) r‚ÇÅ gtn eqn
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn eqn | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ r‚ÇÅ r‚ÇÇ r‚ÇÉ ind'
  where
    ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf cf cg k z (stepsPresUpdRel-IFLT‚ÇÅ‚Üí ind) r gtn eqn
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-SUC a‚ÇÅ a‚ÇÇ r) gtn eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-PI _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-LAMBDA a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LAMBDA a‚ÇÅ , LAMBDA a‚ÇÇ , w1 , refl , refl , updRel-LAMBDA _ _ r
step-updRel gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn with is-LAM a‚ÇÅ
... | inj‚ÇÅ (t , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  concl d --ret (sub a t) w
  where
    d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
        ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
    d = updRel-LAMBDA‚Çó‚Üí r

    concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
            ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
            ‚Üí Œ£stepsUpdRel name f g (sub b‚ÇÅ t) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
    concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub b‚ÇÅ t , sub b‚ÇÇ u , w1 , refl , refl , updRel-sub cf cg ur r‚ÇÅ
    concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
      where
        ind' : stepsPresUpdRel n name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        ind' rewrite e1 | e2 | sub-upd name f b‚ÇÅ cf = ind

        c1 : Œ£stepsUpdRel name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) b‚ÇÇ) w
        c1 = {!!} -- ‚ÜíŒ£highestUpdCtxt-upd gc {name} {f} {b‚ÇÅ} {w1} {n} compat wgt0 cf nnf ctxt‚ÇÅ indb'

        c2 : Œ£stepsUpdRel name f g (sub b‚ÇÅ (updBody name f)) w1 (APPLY (force g) b‚ÇÇ) w
        c2 rewrite sub-upd name f b‚ÇÅ cf = c1
... | inj‚ÇÇ q with is-CS a‚ÇÅ
... |    inj‚ÇÅ (name' , p) rewrite p = ‚ä•-elim (updRel-CS‚Çó‚Üí r)
step-updRel gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn | inj‚ÇÇ q | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... | inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ r‚ÇÅ ind'
  where
    ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf cf cg k z (stepsPresUpdRel-APPLY‚ÇÅ‚Üí ind) r gtn eqn
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-FIX a‚ÇÅ a‚ÇÇ r) gtn eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SUM _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-PAIR _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SET _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-TUNION _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-UNION _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-QTUNION _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-INL a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INL a‚ÇÅ , INL a‚ÇÇ , w1 , refl , refl , updRel-INL _ _ r
step-updRel gc {n} {name} {f} {g} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-INR a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INR a‚ÇÅ , INR a‚ÇÇ , w1 , refl , refl , updRel-INR _ _ r
step-updRel gc {n} {name} {f} {g} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , refl , refl , {!updRel-EQ _ _ _ _ _ _ r r‚ÇÅ r‚ÇÇ!}
step-updRel gc {n} {name} {f} {g} {.AX} {.AX} {x} {w1} {w2} {w} nnf cf cg k comp ind updRel-AX gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , AX , AX , w1 , refl , refl , updRel-AX
step-updRel gc {n} {name} {f} {g} {.FREE} {.FREE} {x} {w1} {w2} {w} nnf cf cg k comp ind updRel-FREE gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FREE , FREE , w1 , refl , refl , updRel-FREE
step-updRel gc {n} {name} {f} {g} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-TSQUASH a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TSQUASH a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , refl , refl , updRel-TSQUASH _ _ r
step-updRel gc {n} {name} {f} {g} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-TTRUNC a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TTRUNC a‚ÇÅ , TTRUNC a‚ÇÇ , w1 , refl , refl , updRel-TTRUNC _ _ r
step-updRel gc {n} {name} {f} {g} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-TCONST a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TCONST a‚ÇÅ , TCONST a‚ÇÇ , w1 , refl , refl , updRel-TCONST _ _ r
step-updRel gc {n} {name} {f} {g} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-SUBSING a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUBSING a‚ÇÅ , SUBSING a‚ÇÇ , w1 , refl , refl , updRel-SUBSING _ _ r
step-updRel gc {n} {name} {f} {g} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-DUM a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , DUM a‚ÇÅ , DUM a‚ÇÇ , w1 , refl , refl , updRel-DUM _ _ r
step-updRel gc {n} {name} {f} {g} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-FFDEFS _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(UNIV x‚ÇÅ)} {.(UNIV x‚ÇÅ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-UNIV x‚ÇÅ) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNIV x‚ÇÅ , UNIV x‚ÇÅ , w1 , refl , refl , updRel-UNIV x‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-LIFT a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LIFT a‚ÇÅ , LIFT a‚ÇÇ , w1 , refl , refl , updRel-LIFT _ _ r
step-updRel gc {n} {name} {f} {g} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-LOWER a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LOWER a‚ÇÅ , LOWER a‚ÇÇ , w1 , refl , refl , updRel-LOWER _ _ r
step-updRel gc {n} {name} {f} {g} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {x} {w1} {w2} {w} nnf cf cg k comp ind (updRel-SHRINK a‚ÇÅ a‚ÇÇ r) gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SHRINK a‚ÇÅ , SHRINK a‚ÇÇ , w1 , refl , refl , updRel-SHRINK _ _ r
step-updRel gc {n} {name} {f} {g} {.(upd name f)} {.(force g)} {x} {w1} {w2} {w} nnf cf cg k comp ind updRel-upd gtn eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , upd name f , force g , w1 , refl , refl , updRel-upd
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
-- LAMBDA (LET (VAR 0) (APPLY g (VAR 0)))


steps-updRel-aux : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term}
                   ‚Üí ¬¨Names f
                   ‚Üí # f
                   ‚Üí (k : ‚Ñï)
                   ‚Üí (ind : (k' : ‚Ñï) ‚Üí k' < k ‚Üí presUpdRel n name f g k')
                   ‚Üí presUpdRel n name f g k
steps-updRel-aux gc {n} {name} {f} {g} nnf cf 0 ind {a} {b} {v} {w1} {w2} {w} r eqw comp ish isv
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = 0 , b , refl , r
steps-updRel-aux gc {n} {name} {f} {g} nnf cf (suc k) ind {a} {b} {v} {w1} {w2} {w} r eqw comp ish isv
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z = {!!}
  where
    ind0 : (k' : ‚Ñï) ‚Üí k' < suc k ‚Üí presUpdRel n name f g k'
    ind0 = ind

    ind1 : (k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel n name f g k'
    ind1 k' ltk = ind0 k' (_‚â§_.s‚â§s ltk)
... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) | stepVal a w1 isv =
  ‚ä•-elim (¬¨just‚â°nothing z)



steps-updRel : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term} {k : ‚Ñï}
               ‚Üí ¬¨Names f
               ‚Üí # f
               ‚Üí presUpdRel n name f g k
steps-updRel gc {n} {name} {f} {g} {k} nnf cf =
  <‚Ñïind _ (steps-updRel-aux gc {n} {name} {f} {g} nnf cf) k



‚â°suc‚Üí< : {a b : ‚Ñï} ‚Üí a ‚â° suc b ‚Üí b < a
‚â°suc‚Üí< {a} {b} e rewrite e = ‚â§-refl



-- define an 'external' version of #ŒΩtestM that follows the computation of (APPLY F f), and keeps
-- track of the highest number f is applied to, and prove that this 'external' version returns
-- the same value as the 'internal' one (i.e., #ŒΩtestM)
eqfg : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm}
      ‚Üí #¬¨Names F
      ‚Üí #¬¨Names f
      ‚Üí #¬¨Names g
      ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
      ‚Üí ‚ààType i w #BAIRE f
      ‚Üí ‚ààType i w #BAIRE g
      ‚Üí equalInType i w (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí n < ? ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
      ‚Üí equalInType i w #NAT (#APPLY F f) (#APPLY F g)
eqfg nc cn kb gc {i} {w} {F} {f} {g} nnF nnf nng ‚ààF ‚ààf ‚ààg eqb =
  equalInType-trans (equalInType-APPLY-force ‚ààF ‚ààf) (equalInType-trans eqf (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààg)))
  where
    neqt : NATeq w (#ŒΩtestM F f) (#ŒΩtestM F f)
    neqt = ŒΩtestM-NAT nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf

    tn : ‚Ñï
    tn = fst neqt

    x : NATeq w (#ŒΩtestM F f) (#NUM tn)
    x = tn , fst (snd neqt) , compAllRefl _ _

    cx : #ŒΩtestM F f #‚áõ #NUM tn at w
    cx = NATeq‚Üí‚áõ {w} {#ŒΩtestM F f} x

    eqb1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#NATn (#ŒΩtestM F f)) a‚ÇÅ a‚ÇÇ
                         ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqb1 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (‚â°BAIREn (#ŒΩtestM F f)) eqb)

    eqb2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª k ‚Üí a‚ÇÅ #‚áõ #NUM k at w'' √ó a‚ÇÇ #‚áõ #NUM k at w'' √ó k < tn))
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí NATeq w'' (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)))
    eqb2 w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-NAT‚Üí i w1 (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ) (eqb1 w1 e1 a‚ÇÅ a‚ÇÇ (‚ÜíequalInType-NATn (‚àÄùïé-mon e1 cx) eqa))

    eqb3 : ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < tn
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
    eqb3 w1 e1 k ltk = kb z w1 (‚äë-refl¬∑ _)
      where
        z : ‚ñ°¬∑ w1 (Œª w'' _ ‚Üí NATeq w'' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        z = eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí k , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , ltk))

    inn : ‚ààType i w #NAT (#APPLY F (#force f))
    inn = equalInType-refl (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààf))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force f)) ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force g)))
    aw w1 e1 (n , comp1 , comp2) = n , comp1 , ¬¨Names‚Üí‚áì‚Üí‚áõ w1 w1 ‚åú #APPLY F (#force g) ‚åù (NUM n) (#¬¨Names-APPLY {F} {#force g} nnF (#¬¨Names-force {g} nng)) compg
      where
        cxb : Œ£ ùïé¬∑ (Œª w2 ‚Üí ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2)
        cxb = ‚áì‚Üífrom-to (lower (cx w1 e1))

        w2 : ùïé¬∑
        w2 = fst cxb

        compt : ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2
        compt = snd cxb

        compu : Œ£ Name (Œª name ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                 APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) ‚áì v from (chooseT name (startNewChoiceT Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)) (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM j)
                 √ó tn ‚â° suc j)))
        compu = #ŒΩtestM‚áì‚Üí nc cn {w1} {w2} {‚åú F ‚åù} {‚åú f ‚åù} {tn} (CTerm.closed F) (CTerm.closed f) nnF nnf compt

        name : Name
        name = fst compu

        v : Term
        v = fst (snd compu)

        j : ‚Ñï
        j = fst (snd (snd compu))

        w1' : ùïé¬∑
        w1' = chooseT name (startNewChoiceT Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)) (NUM 0)

        k : ‚Ñï
        k = fst (fst (snd (snd (snd compu))))

        compa : steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1') ‚â° (v , w2)
        compa = snd (fst (snd (snd (snd compu))))

        isvv : isValue v
        isvv = fst (snd (snd (snd (snd compu))))

        g0 : getT 0 name w2 ‚â° just (NUM j)
        g0 = fst (snd (snd (snd (snd (snd compu)))))

        eqj : tn ‚â° suc j
        eqj = snd (snd (snd (snd (snd (snd compu)))))

        ish : isHighest‚Ñï {k} {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
        ish = steps-sat-isHighest‚Ñï
                gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f) {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
                compa isvv (updCtxt-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) (¬¨Names‚ÜíupdCtxt {name} {‚åú f ‚åù} {‚åú F ‚åù} nnF) updCtxt-upd)
                {!!}
                {!!}
                (j , g0 , ‚â°suc‚Üí< eqj)

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = {!!}

-- We need to prove something like this, where w1 and w1' differ only in name
-- (we should be able to prove that for any world w3 between w1' and w2 (Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w3 ‚â° just (NUM j) √ó j ‚â§ m0)) -- see steps-sat-isHighest‚Ñï being proved below
-- (and then define a 'differ' relation relating CTXT(upd name f)/CTXT(force f)/CTXT(force g))
--  ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2 -- These 3 hypotheses come from #ŒΩtestM‚áì‚Üí
--  ‚Üí getT 0 name w2 ‚â° just (NUM m0)
--  ‚Üí m0 ‚â§ m
--  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < m ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k))) -- from eqb2
--  ‚Üí APPLY F (force f) ‚áì NUM n at w1
--  ‚Üí APPLY F (force g) ‚áì NUM n at w1

    eqf : equalInType i w #NAT (#APPLY F (#force f)) (#APPLY F (#force g))
    eqf = ‚ÜíequalInType-NAT i w (#APPLY F (#force f)) (#APPLY F (#force g)) (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT‚Üí i w (#APPLY F (#force f)) (#APPLY F (#force f)) inn))





{--foo2 : {F f g : Term} {n m : ‚Ñï} {w1 w1' w2 : ùïé¬∑}
       ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2 -- These 2 hypotheses come from #ŒΩtestM‚áì‚Üí
       ‚Üí getT‚â§‚Ñï w2 m name
       ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < m ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k))) -- from eqb2
       ‚Üí APPLY F (force f) ‚áì NUM n at w1
       ‚Üí APPLY F (force g) ‚áì NUM n at w1
foo2 {F} {f} {g} {n} {m} {w1} {w1'} {w2} comp
--}



continuity : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
             (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
             ‚Üí #¬¨Names F
             ‚Üí #¬¨Names f
             ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
             ‚Üí ‚ààType i w #BAIRE f
             ‚Üí ‚ààType i w (#contBody F f) (#PAIR (#ŒΩtestM F f) #lam3AX)
continuity nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestM F f , #ŒΩtestM F f , #lam3AX , #lam3AX ,
      testM-NAT nc cn kb gc i w1 F f nnF nnf (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2
          where
            aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                           (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                                 (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
              equalInType-FUN
                (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
                (eqTypesFUN‚Üê
                  (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
                  (eqTypesEQ‚Üê eqTypesNAT
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
                aw4
              where
                aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                     ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                               (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
                aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
                  equalInType-FUN
                    (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w3 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    (eqTypesEQ‚Üê eqTypesNAT
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    aw5
                  where
                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                        ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) y‚ÇÅ y‚ÇÇ
                                        ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                    aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                      equalInType-EQ
                        eqTypesNAT
                        concl
                      where
                        hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ)
                        hyp = equalInType-EQ‚Üí ey

                        ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                        ff = equalInTypeFFDEFS‚Üí ex

                        aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ
                                              ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                              ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                          where
                            h3 : equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
                            h3 = equalInType-BAIREn-BAIRE-trans h2 h1 (testM-NAT nc cn kb gc i w5 F f nnF nnf (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                            cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                            cc = {!!}

-- ‚Üí #¬¨Names F
-- ‚Üí #¬¨Names f
-- ‚Üí #¬¨Names g
-- ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
-- ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)

                        concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

            aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                        (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                                                 (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql1 : equalInType i w1 (sub0 (#ŒΩtestM F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI F f (#ŒΩtestM F f))) eql2

    seq : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    seq = Mod.‚àÄùïé-‚ñ° M aw

    h0 : ‚ààType i w (#SUM #NAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestM F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesNAT) (equalTypes-contBodyPI i w F f ‚ààF ‚ààf) seq

\end{code}
