\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Data.List.Properties
open import calculus
-- get rid of worldInstance here and only use world
-- make it a parameter of computation
open import world

module worldDef {L : Level} (W : PossibleWorlds {L}) where

open PossibleWorlds

ùïé¬∑ : Set(L)
ùïé¬∑ = ùïé W

_‚äë¬∑_ : ùïé¬∑ ‚Üí ùïé¬∑ ‚Üí Set(L)
w1 ‚äë¬∑ w2 = _‚äë_ W w1 w2

‚äë-refl¬∑ : (a : ùïé¬∑) ‚Üí a ‚äë¬∑ a
‚äë-refl¬∑ = ‚äë-refl W

‚äë-trans¬∑ : {a b c : ùïé¬∑} ‚Üí a ‚äë¬∑ b ‚Üí b ‚äë¬∑ c ‚Üí a ‚äë¬∑ c
‚äë-trans¬∑ = ‚äë-trans W

wPred : ùïé¬∑ ‚Üí Set(lsuc(lsuc(L)))
wPred w = (w' : ùïé¬∑) (e : w ‚äë¬∑ w') ‚Üí Set(lsuc(L))

wPredDep : {w : ùïé¬∑} (f : wPred w) ‚Üí Set(lsuc(lsuc(L)))
wPredDep {w} f = (w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (x : f w' e') ‚Üí Set(lsuc(L))

wPredExtIrr : {w : ùïé¬∑} (f : wPred w) ‚Üí Set(lsuc(L))
wPredExtIrr {w} f = (w' : ùïé¬∑) (e1 e2 : w ‚äë¬∑ w') ‚Üí f w' e1 ‚Üí f w' e2

wPredDepExtIrr : {w : ùïé¬∑} {g : wPred w} (f : wPredDep g) ‚Üí Set(lsuc(L))
wPredDepExtIrr {w} {g} f = (w' : ùïé¬∑) (e1 e2 : w ‚äë¬∑ w') (x1 : g w' e1) (x2 : g w' e2) ‚Üí f w' e1 x1 ‚Üí f w' e2 x2

-- f holds in all extensions
‚àÄùïé : (w : ùïé¬∑) (f : wPred w) ‚Üí Set(lsuc(L))
‚àÄùïé w f = ‚àÄ (w' : ùïé¬∑) (e : w ‚äë¬∑ w') ‚Üí f w' e

-- f holds in one extensions
‚àÉùïé : (w : ùïé¬∑) (f : wPred w) ‚Üí Set(lsuc(L))
‚àÉùïé w f = Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ (w ‚äë¬∑ w') (Œª e ‚Üí f w' e))

‚àÉ‚àÄùïé : (w : ùïé¬∑) (f : wPred w) ‚Üí Set(lsuc(L))
‚àÉ‚àÄùïé w f = ‚àÉùïé w (Œª w1 e1 ‚Üí ‚àÄùïé w1 (Œª w2 e2 ‚Üí f w2 (‚äë-trans¬∑ e1 e2)))


‚ÜëwPred : {w1 : ùïé¬∑} (f : wPred w1) {w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) ‚Üí wPred w2
‚ÜëwPred {w1} f {w2} e w' e' = f w' (‚äë-trans¬∑ e e')


‚ÜëwPred' : {w1 : ùïé¬∑} (f : wPred w1) {w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) ‚Üí wPred w2
‚ÜëwPred' {w1} f {w2} e w' e' = (z : w1 ‚äë¬∑ w') ‚Üí f w' z


‚ÜëwPredDep : {w1 : ùïé¬∑} {f : wPred w1} (g : wPredDep f) {w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) ‚Üí wPredDep (‚ÜëwPred f e)
‚ÜëwPredDep {w1} {f} g {w2} e w' e' z = g w' (‚äë-trans¬∑ e e') z


‚ÜëwPredDep' : {w1 : ùïé¬∑} {f : wPred w1} (g : wPredDep f) {w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) ‚Üí wPredDep (‚ÜëwPred' f e)
‚ÜëwPredDep' {w1} {f} g {w2} e w' e' z = (x : w1 ‚äë¬∑ w') (y : f w' x) ‚Üí g w' x y


‚àÄùïé-mon : {w2 w1 : ùïé¬∑} {f :  wPred w1} (e : w1 ‚äë¬∑ w2)
           ‚Üí ‚àÄùïé w1 f
           ‚Üí ‚àÄùïé w2 (‚ÜëwPred f e)
‚àÄùïé-mon {w2} {w1} {f} e h w' e' = h w' (‚äë-trans¬∑ e e')


‚àÄùïé-mon' : {w2 w1 : ùïé¬∑} {f :  wPred w1} (e : w1 ‚äë¬∑ w2)
           ‚Üí ‚àÄùïé w1 f
           ‚Üí ‚àÄùïé w2 (‚ÜëwPred' f e)
‚àÄùïé-mon' {w2} {w1} {f} e h w' e' z = h w' z


_‚äè_ : ùïé¬∑ ‚Üí ùïé¬∑ ‚Üí Set(L)
w1 ‚äè w2 = w1 ‚äë¬∑ w2 √ó ¬¨ w1 ‚â° w2
\end{code}
