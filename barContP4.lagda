\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --lossy-unification #-}
--{-# OPTIONS --auto-inline #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
--open import choiceBar
open import encode


module barContP4 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                 (X : ChoiceExt W C)
                 (N : NewChoice {L} W C K G)
                 (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                 (EM : ExcludedMiddle (lsuc(L)))
                 (EC : Encode)
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
--open import terms4(W)(C)(K)(G)(X)(N)(EC)
--open import terms5(W)(C)(K)(G)(X)(N)(EC)
open import terms6(W)(C)(K)(G)(X)(N)(EC)
--open import terms7(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import encodeDef(EC)

--open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
--open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import list(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import continuity-conds(W)(C)(K)(G)(X)(N)(EC)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import barContP(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)
open import barContP2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)
open import barContP3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)(EC)



INIT : Term
INIT = ‚åú #INIT ‚åù


s2l : (s : ùïä) (n : ‚Ñï) ‚Üí Term
s2l s 0 = INIT
s2l s (suc n) = APPENDf (NUM n) (s2l s n) (NUM (s n))


s2l# : (s : ùïä) (n : ‚Ñï) ‚Üí # (s2l s n)
s2l# s 0 = refl
s2l# s (suc n) rewrite ‚Üí#shiftUp 0 {s2l s n} (s2l# s n) = refl


data updSeq (r : Name) (s : ùïä) (n : ‚Ñï) : Term ‚Üí Term ‚Üí Set where
  updSeq-VAR     : (x : Var) ‚Üí updSeq r s n (VAR x) (VAR x)
--  updSeq-NAT     : updSeq r s n NAT NAT
  updSeq-QNAT    : updSeq r s n QNAT QNAT
--  updSeq-TNAT    : updSeq r s n TNAT TNAT
  updSeq-LT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  updSeq-QLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  updSeq-NUM     : (x : ‚Ñï) ‚Üí updSeq r s n (NUM x) (NUM x)
  updSeq-IFLT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ ‚Üí updSeq r s n (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updSeq-IFEQ    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ ‚Üí updSeq r s n (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updSeq-SUC     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (SUC a‚ÇÅ) (SUC a‚ÇÇ)
  updSeq-PI      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  updSeq-LAMBDA  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (LAMBDA a‚ÇÅ) (LAMBDA a‚ÇÇ)
  updSeq-APPLY   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  updSeq-FIX     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (FIX a‚ÇÅ) (FIX a‚ÇÇ)
  updSeq-LET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  updSeq-WT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n (WT a‚ÇÅ b‚ÇÅ c‚ÇÅ) (WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updSeq-SUP     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (SUP a‚ÇÅ b‚ÇÅ) (SUP a‚ÇÇ b‚ÇÇ)
--  updSeq-DSUP    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (DSUP a‚ÇÅ b‚ÇÅ) (DSUP a‚ÇÇ b‚ÇÇ)
  updSeq-WREC    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (WREC a‚ÇÅ b‚ÇÅ) (WREC a‚ÇÇ b‚ÇÇ)
  updSeq-MT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n (MT a‚ÇÅ b‚ÇÅ c‚ÇÅ) (MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)
--  updSeq-MSUP    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (MSUP a‚ÇÅ b‚ÇÅ) (MSUP a‚ÇÇ b‚ÇÇ)
--  updSeq-DMSUP   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (DMSUP a‚ÇÅ b‚ÇÅ) (DMSUP a‚ÇÇ b‚ÇÇ)
  updSeq-SUM     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  updSeq-PAIR    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  updSeq-SPREAD  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  updSeq-SET     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  updSeq-ISECT   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  updSeq-TUNION  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  updSeq-UNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
--  updSeq-QTUNION : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (QTUNION a‚ÇÅ b‚ÇÅ) (QTUNION a‚ÇÇ b‚ÇÇ)
  updSeq-INL     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (INL a‚ÇÅ) (INL a‚ÇÇ)
  updSeq-INR     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (INR a‚ÇÅ) (INR a‚ÇÇ)
  updSeq-DECIDE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updSeq-EQ      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
--  updSeq-EQB     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ ‚Üí updSeq r s n (EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  updSeq-AX      : updSeq r s n AX AX
  updSeq-FREE    : updSeq r s n FREE FREE
  updSeq-MSEQ    : (x : ùïä) ‚Üí updSeq r s n (MSEQ x) (MSEQ x)
  updSeq-MAPP    : (x : ùïä) (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (MAPP x a‚ÇÅ) (MAPP x a‚ÇÇ)
  --updSeq-CS      : updSeq name1 name2 f (CS name1) (CS name2)
  --updSeq-CS      : updSeq name1 name2 f (CS name1) (CS name2)
  --updSeq-NAME    : updSeq name1 name2 f (NAME name1) (NAME name2)
  --updSeq-FRESH   : (a b : Term) ‚Üí updSeq name1 name2 f a b ‚Üí updSeq name1 name2 f (FRESH a) (FRESH b)
  updSeq-CHOOSE  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
--  updSeq-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updSeq name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updSeq name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updSeq name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updSeq name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
--  updSeq-TSQUASH : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (TSQUASH a‚ÇÅ) (TSQUASH a‚ÇÇ)
--  updSeq-TTRUNC  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (TTRUNC a‚ÇÅ) (TTRUNC a‚ÇÇ)
  updSeq-NOWRITE : updSeq r s n NOWRITE NOWRITE
  updSeq-NOREAD  : updSeq r s n NOREAD  NOREAD
  updSeq-SUBSING : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (SUBSING a‚ÇÅ) (SUBSING a‚ÇÇ)
  updSeq-PURE    : updSeq r s n PURE PURE
  updSeq-NOSEQ   : updSeq r s n NOSEQ NOSEQ
  updSeq-NOENC   : updSeq r s n NOENC NOENC
  updSeq-TERM    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (TERM a‚ÇÅ) (TERM a‚ÇÇ)
  updSeq-ENC     : (a : Term) ‚Üí updSeq r s n a a ‚Üí updSeq r s n (ENC a) (ENC a)
  updSeq-DUM     : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (DUM a‚ÇÅ) (DUM a‚ÇÇ)
  updSeq-FFDEFS  : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ ‚Üí updSeq r s n (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  updSeq-UNIV    : (x : ‚Ñï) ‚Üí updSeq r s n (UNIV x) (UNIV x)
  updSeq-LIFT    : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (LIFT a‚ÇÅ) (LIFT a‚ÇÇ)
  updSeq-LOWER   : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (LOWER a‚ÇÅ) (LOWER a‚ÇÇ)
  updSeq-SHRINK  : (a‚ÇÅ a‚ÇÇ : Term) ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ ‚Üí updSeq r s n (SHRINK a‚ÇÅ) (SHRINK a‚ÇÇ)
  updSeq-upd     : updSeq r s n (upd r (MSEQ s)) (upd r (s2l s n))
  updSeq-updr    : updSeq r s n (upd r (s2l s n)) (upd r (MSEQ s))


updSeq-NUM‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (k : ‚Ñï) (b : Term)
               ‚Üí updSeq r s n (NUM k) b
               ‚Üí b ‚â° NUM k
updSeq-NUM‚Üí r s n k .(NUM k) (updSeq-NUM .k) = refl


updSeq-MSEQ‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (sq : ùïä) (b : Term)
                ‚Üí updSeq r s n (MSEQ sq) b
                ‚Üí b ‚â° MSEQ sq
updSeq-MSEQ‚Üí r s n x .(MSEQ x) (updSeq-MSEQ .x) = refl


updSeq-CS‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (m : Name) (b : Term)
              ‚Üí updSeq r s n (CS m) b
              ‚Üí ‚ä•
updSeq-CS‚Üí r s n m b ()


updSeq-NAME‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (m : Name) (b : Term)
              ‚Üí updSeq r s n (NAME m) b
              ‚Üí ‚ä•
updSeq-NAME‚Üí r s n m b ()


updSeq-LAMBDA‚Üí : {r : Name} {s : ùïä} {n : ‚Ñï} {t : Term} {a : Term}
                  ‚Üí updSeq r s n (LAMBDA t) a
                  ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó updSeq r s n t u)
                     ‚äé (t ‚â° updBody r (MSEQ s) √ó a ‚â° upd r (s2l s n))
                     ‚äé (t ‚â° updBody r (s2l s n) √ó a ‚â° upd r (MSEQ s))
updSeq-LAMBDA‚Üí {r} {s} {n} {t} {.(LAMBDA a‚ÇÇ)} (updSeq-LAMBDA .t a‚ÇÇ u) = inj‚ÇÅ (a‚ÇÇ , refl , u)
updSeq-LAMBDA‚Üí {r} {s} {n} {.(updBody r (MSEQ s))} {.(upd r (s2l s n))} updSeq-upd = inj‚ÇÇ (inj‚ÇÅ (refl , refl))
updSeq-LAMBDA‚Üí {r} {s} {n} {.(updBody r (s2l s n))} {.(upd r (MSEQ s))} updSeq-updr = inj‚ÇÇ (inj‚ÇÇ (refl , refl))


updSeq-SUP‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (t u : Term) (b : Term)
                ‚Üí updSeq r s n (SUP t u) b
                ‚Üí Œ£ Term (Œª x ‚Üí Œ£ Term (Œª y ‚Üí b ‚â° SUP x y √ó updSeq r s n t x √ó updSeq r s n u y))
updSeq-SUP‚Üí r s n t u .(SUP a‚ÇÇ b‚ÇÇ) (updSeq-SUP .t a‚ÇÇ .u b‚ÇÇ h h‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , h , h‚ÇÅ


{--
updSeq-MSUP‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (t u : Term) (b : Term)
                ‚Üí updSeq r s n (MSUP t u) b
                ‚Üí Œ£ Term (Œª x ‚Üí Œ£ Term (Œª y ‚Üí b ‚â° MSUP x y √ó updSeq r s n t x √ó updSeq r s n u y))
updSeq-MSUP‚Üí r s n t u .(MSUP a‚ÇÇ b‚ÇÇ) (updSeq-MSUP .t a‚ÇÇ .u b‚ÇÇ h h‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , h , h‚ÇÅ
--}


updSeq-PAIR‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (t u : Term) (b : Term)
                ‚Üí updSeq r s n (PAIR t u) b
                ‚Üí Œ£ Term (Œª x ‚Üí Œ£ Term (Œª y ‚Üí b ‚â° PAIR x y √ó updSeq r s n t x √ó updSeq r s n u y))
updSeq-PAIR‚Üí r s n t u .(PAIR a‚ÇÇ b‚ÇÇ) (updSeq-PAIR .t a‚ÇÇ .u b‚ÇÇ h h‚ÇÅ) = a‚ÇÇ , b‚ÇÇ , refl , h , h‚ÇÅ


updSeq-INL‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (t : Term) (b : Term)
                ‚Üí updSeq r s n (INL t) b
                ‚Üí Œ£ Term (Œª x ‚Üí b ‚â° INL x √ó updSeq r s n t x)
updSeq-INL‚Üí r s n t .(INL a‚ÇÇ) (updSeq-INL .t a‚ÇÇ h) = a‚ÇÇ , refl , h


updSeq-INR‚Üí : (r : Name) (s : ùïä) (n : ‚Ñï) (t : Term) (b : Term)
                ‚Üí updSeq r s n (INR t) b
                ‚Üí Œ£ Term (Œª x ‚Üí b ‚â° INR x √ó updSeq r s n t x)
updSeq-INR‚Üí r s n t .(INR a‚ÇÇ) (updSeq-INR .t a‚ÇÇ h) = a‚ÇÇ , refl , h


abstract

  updSeq-shiftUp : (n : ‚Ñï) {r : Name} {s : ùïä} {k : ‚Ñï} {a b : Term}
                   ‚Üí updSeq r s k a b
                   ‚Üí updSeq r s k (shiftUp n a) (shiftUp n b)
  updSeq-shiftUp n {r} {s} {k} {.(VAR x)} {.(VAR x)} (updSeq-VAR x) = updSeq-VAR _
--  updSeq-shiftUp n {r} {s} {k} {.NAT} {.NAT} updSeq-NAT = updSeq-NAT
  updSeq-shiftUp n {r} {s} {k} {.QNAT} {.QNAT} updSeq-QNAT = updSeq-QNAT
--  updSeq-shiftUp n {r} {s} {k} {.TNAT} {.TNAT} updSeq-TNAT = updSeq-TNAT
  updSeq-shiftUp n {r} {s} {k} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updSeq-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-LT _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updSeq-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-QLT _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(NUM x)} {.(NUM x)} (updSeq-NUM x) = updSeq-NUM _
  updSeq-shiftUp n {r} {s} {k} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updSeq-IFLT _ _ _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ) (updSeq-shiftUp n u‚ÇÇ) (updSeq-shiftUp n u‚ÇÉ)
  updSeq-shiftUp n {r} {s} {k} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updSeq-IFEQ _ _ _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ) (updSeq-shiftUp n u‚ÇÇ) (updSeq-shiftUp n u‚ÇÉ)
  updSeq-shiftUp n {r} {s} {k} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updSeq-SUC a‚ÇÅ a‚ÇÇ u) = updSeq-SUC _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updSeq-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-PI _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updSeq-LAMBDA a‚ÇÅ a‚ÇÇ u) = updSeq-LAMBDA _ _ (updSeq-shiftUp (suc n) u)
  updSeq-shiftUp n {r} {s} {k} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updSeq-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-APPLY _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updSeq-FIX a‚ÇÅ a‚ÇÇ u) = updSeq-FIX _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updSeq-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-LET _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-WT _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ) (updSeq-shiftUp n u‚ÇÇ)
  updSeq-shiftUp n {r} {s} {k} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (updSeq-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SUP _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  --updSeq-shiftUp n {r} {s} {k} {.(DSUP a‚ÇÅ b‚ÇÅ)} {.(DSUP a‚ÇÇ b‚ÇÇ)} (updSeq-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-DSUP _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc (suc n)) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (updSeq-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-WREC _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc (suc (suc n))) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-MT _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ) (updSeq-shiftUp n u‚ÇÇ)
  --updSeq-shiftUp n {r} {s} {k} {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (updSeq-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-MSUP _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  --updSeq-shiftUp n {r} {s} {k} {.(DMSUP a‚ÇÅ b‚ÇÅ)} {.(DMSUP a‚ÇÇ b‚ÇÇ)} (updSeq-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-DMSUP _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc (suc n)) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updSeq-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SUM _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updSeq-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-PAIR _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updSeq-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SPREAD _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc (suc n)) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updSeq-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SET _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updSeq-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-ISECT _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updSeq-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-TUNION _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updSeq-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-UNION _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
--  updSeq-shiftUp n {r} {s} {k} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updSeq-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-QTUNION _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updSeq-INL a‚ÇÅ a‚ÇÇ u) = updSeq-INL _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updSeq-INR a‚ÇÅ a‚ÇÇ u) = updSeq-INR _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-DECIDE _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp (suc n) u‚ÇÅ) (updSeq-shiftUp (suc n) u‚ÇÇ)
  updSeq-shiftUp n {r} {s} {k} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-EQ _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ) (updSeq-shiftUp n u‚ÇÇ)
--  updSeq-shiftUp n {r} {s} {k} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updSeq-EQB _ _ _ _ _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ) (updSeq-shiftUp n u‚ÇÇ) (updSeq-shiftUp n u‚ÇÉ)
  updSeq-shiftUp n {r} {s} {k} {.AX} {.AX} updSeq-AX = updSeq-AX
  updSeq-shiftUp n {r} {s} {k} {.FREE} {.FREE} updSeq-FREE = updSeq-FREE
  updSeq-shiftUp n {r} {s} {k} {.(MSEQ x)} {.(MSEQ x)} (updSeq-MSEQ x) = updSeq-MSEQ x
  updSeq-shiftUp n {r} {s} {k} {.(MAPP x a‚ÇÅ)} {.(MAPP x a‚ÇÇ)} (updSeq-MAPP x a‚ÇÅ a‚ÇÇ u) = updSeq-MAPP _ _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updSeq-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-CHOOSE _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
--  updSeq-shiftUp n {r} {s} {k} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updSeq-TSQUASH a‚ÇÅ a‚ÇÇ u) = updSeq-TSQUASH _ _ (updSeq-shiftUp n u)
--  updSeq-shiftUp n {r} {s} {k} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updSeq-TTRUNC a‚ÇÅ a‚ÇÇ u) = updSeq-TTRUNC _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.NOWRITE} {.NOWRITE} updSeq-NOWRITE = updSeq-NOWRITE
  updSeq-shiftUp n {r} {s} {k} {.NOREAD}  {.NOREAD}  updSeq-NOREAD  = updSeq-NOREAD
  updSeq-shiftUp n {r} {s} {k} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updSeq-SUBSING a‚ÇÅ a‚ÇÇ u) = updSeq-SUBSING _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(PURE)} {.(PURE)} (updSeq-PURE) = updSeq-PURE
  updSeq-shiftUp n {r} {s} {k} {.(NOSEQ)} {.(NOSEQ)} (updSeq-NOSEQ) = updSeq-NOSEQ
  updSeq-shiftUp n {r} {s} {k} {.(NOENC)} {.(NOENC)} (updSeq-NOENC) = updSeq-NOENC
  updSeq-shiftUp n {r} {s} {k} {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} (updSeq-TERM a‚ÇÅ a‚ÇÇ u) = updSeq-TERM _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(ENC a)} {.(ENC a)} (updSeq-ENC a u) = updSeq-ENC _ u
  updSeq-shiftUp n {r} {s} {k} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updSeq-DUM a‚ÇÅ a‚ÇÇ u) = updSeq-DUM _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updSeq-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-FFDEFS _ _ _ _ (updSeq-shiftUp n u) (updSeq-shiftUp n u‚ÇÅ)
  updSeq-shiftUp n {r} {s} {k} {.(UNIV x)} {.(UNIV x)} (updSeq-UNIV x) = updSeq-UNIV x
  updSeq-shiftUp n {r} {s} {k} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updSeq-LIFT a‚ÇÅ a‚ÇÇ u) = updSeq-LIFT _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updSeq-LOWER a‚ÇÅ a‚ÇÇ u) = updSeq-LOWER _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updSeq-SHRINK a‚ÇÅ a‚ÇÇ u) = updSeq-SHRINK _ _ (updSeq-shiftUp n u)
  updSeq-shiftUp n {r} {s} {k} {.(upd r (MSEQ s))} {.(upd r (s2l s k))} updSeq-upd
    rewrite #shiftUp n (ct (upd r (MSEQ s)) (CTerm.closed (#upd r (#MSEQ s))))
          | #shiftUp n (ct (upd r (s2l s k)) (CTerm.closed (#upd r (ct (s2l s k) (s2l# s k))))) = updSeq-upd
  updSeq-shiftUp n {r} {s} {k} {.(upd r (s2l s k))} {.(upd r (MSEQ s))} updSeq-updr
    rewrite #shiftUp n (ct (upd r (MSEQ s)) (CTerm.closed (#upd r (#MSEQ s))))
          | #shiftUp n (ct (upd r (s2l s k)) (CTerm.closed (#upd r (ct (s2l s k) (s2l# s k))))) = updSeq-updr


abstract

  updSeq-shiftDown : (n : ‚Ñï) {r : Name} {s : ùïä} {k : ‚Ñï} {a b : Term}
                     ‚Üí updSeq r s k a b
                     ‚Üí updSeq r s k (shiftDown n a) (shiftDown n b)
  updSeq-shiftDown n {r} {s} {k} {.(VAR x)} {.(VAR x)} (updSeq-VAR x) = updSeq-VAR _
--  updSeq-shiftDown n {r} {s} {k} {.NAT} {.NAT} updSeq-NAT = updSeq-NAT
  updSeq-shiftDown n {r} {s} {k} {.QNAT} {.QNAT} updSeq-QNAT = updSeq-QNAT
--  updSeq-shiftDown n {r} {s} {k} {.TNAT} {.TNAT} updSeq-TNAT = updSeq-TNAT
  updSeq-shiftDown n {r} {s} {k} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updSeq-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-LT _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updSeq-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-QLT _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(NUM x)} {.(NUM x)} (updSeq-NUM x) = updSeq-NUM _
  updSeq-shiftDown n {r} {s} {k} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updSeq-IFLT _ _ _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ) (updSeq-shiftDown n u‚ÇÇ) (updSeq-shiftDown n u‚ÇÉ)
  updSeq-shiftDown n {r} {s} {k} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updSeq-IFEQ _ _ _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ) (updSeq-shiftDown n u‚ÇÇ) (updSeq-shiftDown n u‚ÇÉ)
  updSeq-shiftDown n {r} {s} {k} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} (updSeq-SUC a‚ÇÅ a‚ÇÇ u) = updSeq-SUC _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updSeq-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-PI _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updSeq-LAMBDA a‚ÇÅ a‚ÇÇ u) = updSeq-LAMBDA _ _ (updSeq-shiftDown (suc n) u)
  updSeq-shiftDown n {r} {s} {k} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (updSeq-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-APPLY _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} (updSeq-FIX a‚ÇÅ a‚ÇÇ u) = updSeq-FIX _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (updSeq-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-LET _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-WT _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ) (updSeq-shiftDown n u‚ÇÇ)
  updSeq-shiftDown n {r} {s} {k} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (updSeq-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SUP _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  --updSeq-shiftDown n {r} {s} {k} {.(DSUP a‚ÇÅ b‚ÇÅ)} {.(DSUP a‚ÇÇ b‚ÇÇ)} (updSeq-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-DSUP _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc (suc n)) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (updSeq-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-WREC _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc (suc (suc n))) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-MT _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ) (updSeq-shiftDown n u‚ÇÇ)
  --updSeq-shiftDown n {r} {s} {k} {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (updSeq-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-MSUP _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  --updSeq-shiftDown n {r} {s} {k} {.(DMSUP a‚ÇÅ b‚ÇÅ)} {.(DMSUP a‚ÇÇ b‚ÇÇ)} (updSeq-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-DMSUP _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc (suc n)) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updSeq-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SUM _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updSeq-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-PAIR _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (updSeq-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SPREAD _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc (suc n)) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updSeq-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-SET _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updSeq-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-ISECT _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updSeq-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-TUNION _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updSeq-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-UNION _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
--  updSeq-shiftDown n {r} {s} {k} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updSeq-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-QTUNION _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updSeq-INL a‚ÇÅ a‚ÇÇ u) = updSeq-INL _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updSeq-INR a‚ÇÅ a‚ÇÇ u) = updSeq-INR _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-DECIDE _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown (suc n) u‚ÇÅ) (updSeq-shiftDown (suc n) u‚ÇÇ)
  updSeq-shiftDown n {r} {s} {k} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) = updSeq-EQ _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ) (updSeq-shiftDown n u‚ÇÇ)
--  updSeq-shiftDown n {r} {s} {k} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) = updSeq-EQB _ _ _ _ _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ) (updSeq-shiftDown n u‚ÇÇ) (updSeq-shiftDown n u‚ÇÉ)
  updSeq-shiftDown n {r} {s} {k} {.AX} {.AX} updSeq-AX = updSeq-AX
  updSeq-shiftDown n {r} {s} {k} {.FREE} {.FREE} updSeq-FREE = updSeq-FREE
  updSeq-shiftDown n {r} {s} {k} {.(MSEQ x)} {.(MSEQ x)} (updSeq-MSEQ x) = updSeq-MSEQ x
  updSeq-shiftDown n {r} {s} {k} {.(MAPP x a‚ÇÅ)} {.(MAPP x a‚ÇÇ)} (updSeq-MAPP x a‚ÇÅ a‚ÇÇ u) = updSeq-MAPP _ _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (updSeq-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-CHOOSE _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
--  updSeq-shiftDown n {r} {s} {k} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updSeq-TSQUASH a‚ÇÅ a‚ÇÇ u) = updSeq-TSQUASH _ _ (updSeq-shiftDown n u)
--  updSeq-shiftDown n {r} {s} {k} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updSeq-TTRUNC a‚ÇÅ a‚ÇÇ u) = updSeq-TTRUNC _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.NOWRITE} {.NOWRITE} updSeq-NOWRITE = updSeq-NOWRITE
  updSeq-shiftDown n {r} {s} {k} {.NOREAD}  {.NOREAD}  updSeq-NOREAD  = updSeq-NOREAD
  updSeq-shiftDown n {r} {s} {k} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updSeq-SUBSING a‚ÇÅ a‚ÇÇ u) = updSeq-SUBSING _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(PURE)} {.(PURE)} (updSeq-PURE) = updSeq-PURE
  updSeq-shiftDown n {r} {s} {k} {.(NOSEQ)} {.(NOSEQ)} (updSeq-NOSEQ) = updSeq-NOSEQ
  updSeq-shiftDown n {r} {s} {k} {.(NOENC)} {.(NOENC)} (updSeq-NOENC) = updSeq-NOENC
  updSeq-shiftDown n {r} {s} {k} {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} (updSeq-TERM a‚ÇÅ a‚ÇÇ u) = updSeq-TERM _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(ENC a)} {.(ENC a)} (updSeq-ENC a u) = updSeq-ENC _ u
  updSeq-shiftDown n {r} {s} {k} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updSeq-DUM a‚ÇÅ a‚ÇÇ u) = updSeq-DUM _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updSeq-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) = updSeq-FFDEFS _ _ _ _ (updSeq-shiftDown n u) (updSeq-shiftDown n u‚ÇÅ)
  updSeq-shiftDown n {r} {s} {k} {.(UNIV x)} {.(UNIV x)} (updSeq-UNIV x) = updSeq-UNIV _
  updSeq-shiftDown n {r} {s} {k} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updSeq-LIFT a‚ÇÅ a‚ÇÇ u) = updSeq-LIFT _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updSeq-LOWER a‚ÇÅ a‚ÇÇ u) = updSeq-LOWER _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updSeq-SHRINK a‚ÇÅ a‚ÇÇ u) = updSeq-SHRINK _ _ (updSeq-shiftDown n u)
  updSeq-shiftDown n {r} {s} {k} {.(upd r (MSEQ s))} {.(upd r (s2l s k))} updSeq-upd
    rewrite #shiftDown n (ct (upd r (MSEQ s)) (CTerm.closed (#upd r (#MSEQ s))))
            | #shiftDown n (ct (upd r (s2l s k)) (CTerm.closed (#upd r (ct (s2l s k) (s2l# s k))))) = updSeq-upd
  updSeq-shiftDown n {r} {s} {k} {.(upd r (s2l s k))} {.(upd r (MSEQ s))} updSeq-updr
    rewrite #shiftDown n (ct (upd r (MSEQ s)) (CTerm.closed (#upd r (#MSEQ s))))
            | #shiftDown n (ct (upd r (s2l s k)) (CTerm.closed (#upd r (ct (s2l s k) (s2l# s k))))) = updSeq-updr


abstract

  updSeq-subv : (v : Var) {r : Name} {s : ùïä} {k : ‚Ñï} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
                ‚Üí updSeq r s k a‚ÇÅ a‚ÇÇ
                ‚Üí updSeq r s k b‚ÇÅ b‚ÇÇ
                ‚Üí updSeq r s k (subv v b‚ÇÅ a‚ÇÅ) (subv v b‚ÇÇ a‚ÇÇ)
  updSeq-subv v {r} {s} {k} {.(VAR x)} {.(VAR x)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-VAR x) ub with x ‚âü v
  ... | yes p = ub
  ... | no p = updSeq-VAR x
--  updSeq-subv v {r} {s} {k} {.NAT} {.NAT} {b‚ÇÅ} {b‚ÇÇ} updSeq-NAT ub = updSeq-NAT
  updSeq-subv v {r} {s} {k} {.QNAT} {.QNAT} {b‚ÇÅ} {b‚ÇÇ} updSeq-QNAT ub = updSeq-QNAT
--  updSeq-subv v {r} {s} {k} {.TNAT} {.TNAT} {b‚ÇÅ} {b‚ÇÇ} updSeq-TNAT ub = updSeq-TNAT
  updSeq-subv v {r} {s} {k} {.(LT a‚ÇÅ b‚ÇÉ)} {.(LT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-LT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-LT _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(QLT a‚ÇÅ b‚ÇÉ)} {.(QLT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-QLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-QLT _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(NUM x)} {.(NUM x)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-NUM x) ub = updSeq-NUM x
  updSeq-subv v {r} {s} {k} {.(IFLT a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updSeq-IFLT _ _ _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub) (updSeq-subv v ua‚ÇÇ ub) (updSeq-subv v ua‚ÇÉ ub)
  updSeq-subv v {r} {s} {k} {.(IFEQ a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updSeq-IFEQ _ _ _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub) (updSeq-subv v ua‚ÇÇ ub) (updSeq-subv v ua‚ÇÉ ub)
  updSeq-subv v {r} {s} {k} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SUC a‚ÇÅ a‚ÇÇ ua) ub = updSeq-SUC _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(PI a‚ÇÅ b‚ÇÉ)} {.(PI a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-PI a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-PI _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-LAMBDA a‚ÇÅ a‚ÇÇ ua) ub = updSeq-LAMBDA _ _ (updSeq-subv (suc v) ua (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(APPLY a‚ÇÅ b‚ÇÉ)} {.(APPLY a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-APPLY _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-FIX a‚ÇÅ a‚ÇÇ ua) ub = updSeq-FIX _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(LET a‚ÇÅ b‚ÇÉ)} {.(LET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-LET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-LET _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(WT a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-WT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updSeq-WT _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub)) (updSeq-subv v ua‚ÇÇ ub)
  updSeq-subv v {r} {s} {k} {.(SUP a‚ÇÅ b‚ÇÉ)} {.(SUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-SUP _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  --updSeq-subv v {r} {s} {k} {.(DSUP a‚ÇÅ b‚ÇÉ)} {.(DSUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-DSUP _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc (suc v)) ua‚ÇÅ (updSeq-shiftUp 0 (updSeq-shiftUp 0 ub)))
  updSeq-subv v {r} {s} {k} {.(WREC a‚ÇÅ b‚ÇÉ)} {.(WREC a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-WREC a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-WREC _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc (suc (suc v))) ua‚ÇÅ (updSeq-shiftUp 0 (updSeq-shiftUp 0 (updSeq-shiftUp 0 ub))))
  updSeq-subv v {r} {s} {k} {.(MT a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-MT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updSeq-MT _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub)) (updSeq-subv v ua‚ÇÇ ub)
  --updSeq-subv v {r} {s} {k} {.(MSUP a‚ÇÅ b‚ÇÉ)} {.(MSUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-MSUP _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  --updSeq-subv v {r} {s} {k} {.(DMSUP a‚ÇÅ b‚ÇÉ)} {.(DMSUP a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-DMSUP _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc (suc v)) ua‚ÇÅ (updSeq-shiftUp 0 (updSeq-shiftUp 0 ub)))
  updSeq-subv v {r} {s} {k} {.(SUM a‚ÇÅ b‚ÇÉ)} {.(SUM a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SUM a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-SUM _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(PAIR a‚ÇÅ b‚ÇÉ)} {.(PAIR a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-PAIR _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(SPREAD a‚ÇÅ b‚ÇÉ)} {.(SPREAD a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-SPREAD _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc (suc v)) ua‚ÇÅ (updSeq-shiftUp 0 (updSeq-shiftUp 0 ub)))
  updSeq-subv v {r} {s} {k} {.(SET a‚ÇÅ b‚ÇÉ)} {.(SET a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SET a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-SET _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(ISECT a‚ÇÅ b‚ÇÉ)} {.(ISECT a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-ISECT _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(TUNION a‚ÇÅ b‚ÇÉ)} {.(TUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-TUNION _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(UNION a‚ÇÅ b‚ÇÉ)} {.(UNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-UNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-UNION _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
--  updSeq-subv v {r} {s} {k} {.(QTUNION a‚ÇÅ b‚ÇÉ)} {.(QTUNION a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-QTUNION _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-INL a‚ÇÅ a‚ÇÇ ua) ub = updSeq-INL _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-INR a‚ÇÅ a‚ÇÇ ua) ub = updSeq-INR _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(DECIDE a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updSeq-DECIDE _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv (suc v) ua‚ÇÅ (updSeq-shiftUp 0 ub)) (updSeq-subv (suc v) ua‚ÇÇ (updSeq-shiftUp 0 ub))
  updSeq-subv v {r} {s} {k} {.(EQ a‚ÇÅ b‚ÇÉ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÑ c‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-EQ a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ) ub = updSeq-EQ _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub) (updSeq-subv v ua‚ÇÇ ub)
--  updSeq-subv v {r} {s} {k} {.(EQB a‚ÇÅ b‚ÇÉ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÑ c‚ÇÇ d‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-EQB a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ua ua‚ÇÅ ua‚ÇÇ ua‚ÇÉ) ub = updSeq-EQB _ _ _ _ _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub) (updSeq-subv v ua‚ÇÇ ub) (updSeq-subv v ua‚ÇÉ ub)
  updSeq-subv v {r} {s} {k} {.AX} {.AX} {b‚ÇÅ} {b‚ÇÇ} updSeq-AX ub = updSeq-AX
  updSeq-subv v {r} {s} {k} {.FREE} {.FREE} {b‚ÇÅ} {b‚ÇÇ} updSeq-FREE ub = updSeq-FREE
  updSeq-subv v {r} {s} {k} {.(MSEQ x)} {.(MSEQ x)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-MSEQ x) ub = updSeq-MSEQ x
  updSeq-subv v {r} {s} {k} {.(MAPP x a‚ÇÅ)} {.(MAPP x a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-MAPP x a‚ÇÅ a‚ÇÇ ua) ub = updSeq-MAPP _ _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(CHOOSE a‚ÇÅ b‚ÇÉ)} {.(CHOOSE a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-CHOOSE _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
--  updSeq-subv v {r} {s} {k} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-TSQUASH a‚ÇÅ a‚ÇÇ ua) ub = updSeq-TSQUASH _ _ (updSeq-subv v ua ub)
--  updSeq-subv v {r} {s} {k} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-TTRUNC a‚ÇÅ a‚ÇÇ ua) ub = updSeq-TTRUNC _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.NOWRITE} {.NOWRITE} {b‚ÇÅ} {b‚ÇÇ} updSeq-NOWRITE ub = updSeq-NOWRITE
  updSeq-subv v {r} {s} {k} {.NOREAD}  {.NOREAD}  {b‚ÇÅ} {b‚ÇÇ} updSeq-NOREAD  ub = updSeq-NOREAD
  updSeq-subv v {r} {s} {k} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SUBSING a‚ÇÅ a‚ÇÇ ua) ub = updSeq-SUBSING _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(PURE)} {.(PURE)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-PURE) ub = updSeq-PURE
  updSeq-subv v {r} {s} {k} {.(NOSEQ)} {.(NOSEQ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-NOSEQ) ub = updSeq-NOSEQ
  updSeq-subv v {r} {s} {k} {.(NOENC)} {.(NOENC)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-NOENC) ub = updSeq-NOENC
  updSeq-subv v {r} {s} {k} {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-TERM a‚ÇÅ a‚ÇÇ ua) ub = updSeq-TERM _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(ENC a)} {.(ENC a)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-ENC a ua) ub = updSeq-ENC _ ua
  updSeq-subv v {r} {s} {k} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-DUM a‚ÇÅ a‚ÇÇ ua) ub = updSeq-DUM _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(FFDEFS a‚ÇÅ b‚ÇÉ)} {.(FFDEFS a‚ÇÇ b‚ÇÑ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÉ b‚ÇÑ ua ua‚ÇÅ) ub = updSeq-FFDEFS _ _ _ _ (updSeq-subv v ua ub) (updSeq-subv v ua‚ÇÅ ub)
  updSeq-subv v {r} {s} {k} {.(UNIV x)} {.(UNIV x)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-UNIV x) ub = updSeq-UNIV x
  updSeq-subv v {r} {s} {k} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-LIFT a‚ÇÅ a‚ÇÇ ua) ub = updSeq-LIFT _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-LOWER a‚ÇÅ a‚ÇÇ ua) ub = updSeq-LOWER _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {b‚ÇÅ} {b‚ÇÇ} (updSeq-SHRINK a‚ÇÅ a‚ÇÇ ua) ub = updSeq-SHRINK _ _ (updSeq-subv v ua ub)
  updSeq-subv v {r} {s} {k} {.(upd r (MSEQ s))} {.(upd r (s2l s k))} {b‚ÇÅ} {b‚ÇÇ} updSeq-upd ub
    rewrite subv# v b‚ÇÅ (upd r (MSEQ s)) (CTerm.closed (#upd r (#MSEQ s)))
          | subv# v b‚ÇÇ (upd r (s2l s k)) (CTerm.closed (#upd r (ct (s2l s k) (s2l# s k))))
    = updSeq-upd
  updSeq-subv v {r} {s} {k} {.(upd r (s2l s k))} {.(upd r (MSEQ s))} {b‚ÇÅ} {b‚ÇÇ} updSeq-updr ub
    rewrite subv# v b‚ÇÇ (upd r (MSEQ s)) (CTerm.closed (#upd r (#MSEQ s)))
          | subv# v b‚ÇÅ (upd r (s2l s k)) (CTerm.closed (#upd r (ct (s2l s k) (s2l# s k))))
    = updSeq-updr


updSeq-sub : {r : Name} {s : ùïä} {n : ‚Ñï} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term}
             ‚Üí updSeq r s n a‚ÇÅ a‚ÇÇ
             ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
             ‚Üí updSeq r s n (sub b‚ÇÅ a‚ÇÅ) (sub b‚ÇÇ a‚ÇÇ)
updSeq-sub {r} {s} {n} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ua ub =
  updSeq-shiftDown 0 (updSeq-subv 0 ua (updSeq-shiftUp 0 ub))


updSeqStep : (w1 w2 : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (u x : Term) ‚Üí Set(L)
updSeqStep w1 w2 r s n u x =
  Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ Term (Œª y ‚Üí Œ£ Term (Œª z ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí
    steps k1 (x , w2) ‚â° (y , w3)
    √ó steps k2 (u , w1) ‚â° (z , w3)
    √ó updSeq r s n y z)))))


‚ÜíupdSeqStep-IFLT‚ÇÇ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (k : ‚Ñï) (b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term)
                     ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ
                     ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ
                     ‚Üí updSeqStep w1 w1' r s n b‚ÇÇ b‚ÇÅ
                     ‚Üí updSeqStep w1 w1' r s n (IFLT (NUM k) b‚ÇÇ c‚ÇÇ d‚ÇÇ) (IFLT (NUM k) b‚ÇÅ c‚ÇÅ d‚ÇÅ)
‚ÜíupdSeqStep-IFLT‚ÇÇ w1 w1' r s n k b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ uc ud (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  IFLT (NUM k) y c‚ÇÅ d‚ÇÅ , IFLT (NUM k) z c‚ÇÇ d‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-IFLT _ _ _ _ _ _ _ _ (updSeq-NUM k) u uc ud
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFLT (NUM k) b‚ÇÅ c‚ÇÅ d‚ÇÅ , w1') ‚â° (IFLT (NUM k) y c‚ÇÅ d‚ÇÅ , w3))
    comp1' = IFLT-steps‚ÇÇ {k1} {w1'} {w3} {k} {b‚ÇÅ} {y} {c‚ÇÅ} {d‚ÇÅ} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFLT (NUM k) b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1) ‚â° (IFLT (NUM k) z c‚ÇÇ d‚ÇÇ , w3))
    comp2' = IFLT-steps‚ÇÇ {k2} {w1} {w3} {k} {b‚ÇÇ} {z} {c‚ÇÇ} {d‚ÇÇ} comp2


‚ÜíupdSeqStep-IFLT‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term)
                     ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                     ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ
                     ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ
                     ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                     ‚Üí updSeqStep w1 w1' r s n (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)
‚ÜíupdSeqStep-IFLT‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ub uc ud (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  IFLT y b‚ÇÅ c‚ÇÅ d‚ÇÅ , IFLT z b‚ÇÇ c‚ÇÇ d‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-IFLT _ _ _ _ _ _ _ _ u ub uc ud
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ , w1') ‚â° (IFLT y b‚ÇÅ c‚ÇÅ d‚ÇÅ , w3))
    comp1' = IFLT-steps‚ÇÅ {k1} {w1'} {w3} {a‚ÇÅ} {y} {b‚ÇÅ} {c‚ÇÅ} {d‚ÇÅ} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1) ‚â° (IFLT z b‚ÇÇ c‚ÇÇ d‚ÇÇ , w3))
    comp2' = IFLT-steps‚ÇÅ {k2} {w1} {w3} {a‚ÇÇ} {z} {b‚ÇÇ} {c‚ÇÇ} {d‚ÇÇ} comp2


‚ÜíupdSeqStep-IFEQ‚ÇÇ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (k : ‚Ñï) (b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term)
                     ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ
                     ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ
                     ‚Üí updSeqStep w1 w1' r s n b‚ÇÇ b‚ÇÅ
                     ‚Üí updSeqStep w1 w1' r s n (IFEQ (NUM k) b‚ÇÇ c‚ÇÇ d‚ÇÇ) (IFEQ (NUM k) b‚ÇÅ c‚ÇÅ d‚ÇÅ)
‚ÜíupdSeqStep-IFEQ‚ÇÇ w1 w1' r s n k b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ uc ud (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  IFEQ (NUM k) y c‚ÇÅ d‚ÇÅ , IFEQ (NUM k) z c‚ÇÇ d‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-IFEQ _ _ _ _ _ _ _ _ (updSeq-NUM k) u uc ud
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFEQ (NUM k) b‚ÇÅ c‚ÇÅ d‚ÇÅ , w1') ‚â° (IFEQ (NUM k) y c‚ÇÅ d‚ÇÅ , w3))
    comp1' = IFEQ-steps‚ÇÇ {k1} {w1'} {w3} {k} {b‚ÇÅ} {y} {c‚ÇÅ} {d‚ÇÅ} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFEQ (NUM k) b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1) ‚â° (IFEQ (NUM k) z c‚ÇÇ d‚ÇÇ , w3))
    comp2' = IFEQ-steps‚ÇÇ {k2} {w1} {w3} {k} {b‚ÇÇ} {z} {c‚ÇÇ} {d‚ÇÇ} comp2


‚ÜíupdSeqStep-IFEQ‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term)
                     ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                     ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ
                     ‚Üí updSeq r s n d‚ÇÅ d‚ÇÇ
                     ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                     ‚Üí updSeqStep w1 w1' r s n (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)
‚ÜíupdSeqStep-IFEQ‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ub uc ud (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  IFEQ y b‚ÇÅ c‚ÇÅ d‚ÇÅ , IFEQ z b‚ÇÇ c‚ÇÇ d‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-IFEQ _ _ _ _ _ _ _ _ u ub uc ud
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ , w1') ‚â° (IFEQ y b‚ÇÅ c‚ÇÅ d‚ÇÅ , w3))
    comp1' = IFEQ-steps‚ÇÅ {k1} {w1'} {w3} {a‚ÇÅ} {y} {b‚ÇÅ} {c‚ÇÅ} {d‚ÇÅ} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1) ‚â° (IFEQ z b‚ÇÇ c‚ÇÇ d‚ÇÇ , w3))
    comp2' = IFEQ-steps‚ÇÅ {k2} {w1} {w3} {a‚ÇÇ} {z} {b‚ÇÇ} {c‚ÇÇ} {d‚ÇÇ} comp2


‚ÜíupdSeqStep-SUC‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ : Term)
                    ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                    ‚Üí updSeqStep w1 w1' r s n (SUC a‚ÇÇ) (SUC a‚ÇÅ)
‚ÜíupdSeqStep-SUC‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  SUC y , SUC z ,
  w3 , snd comp1' , snd comp2' , updSeq-SUC _ _ u
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (SUC a‚ÇÅ , w1') ‚â° (SUC y , w3))
    comp1' = SUC-steps‚ÇÅ {k1} {w1'} {w3} {a‚ÇÅ} {y} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (SUC a‚ÇÇ , w1) ‚â° (SUC z , w3))
    comp2' = SUC-steps‚ÇÅ {k2} {w1} {w3} {a‚ÇÇ} {z} comp2


‚ÜíupdSeqStep-FIX‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ : Term)
                    ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                    ‚Üí updSeqStep w1 w1' r s n (FIX a‚ÇÇ) (FIX a‚ÇÅ)
‚ÜíupdSeqStep-FIX‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  FIX y , FIX z ,
  w3 , snd comp1' , snd comp2' , updSeq-FIX _ _ u
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (FIX a‚ÇÅ , w1') ‚â° (FIX y , w3))
    comp1' = FIX‚áìsteps k1 {a‚ÇÅ} {y} {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (FIX a‚ÇÇ , w1) ‚â° (FIX z , w3))
    comp2' = FIX‚áìsteps k2 {a‚ÇÇ} {z} {w1} {w3} comp2


‚ÜíupdSeqStep-MAPP‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (x : ùïä) (a‚ÇÅ a‚ÇÇ : Term)
                    ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                    ‚Üí updSeqStep w1 w1' r s n (MAPP x a‚ÇÇ) (MAPP x a‚ÇÅ)
‚ÜíupdSeqStep-MAPP‚ÇÅ w1 w1' r s n x a‚ÇÅ a‚ÇÇ (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  MAPP x y , MAPP x z ,
  w3 , snd comp1' , snd comp2' , updSeq-MAPP x _ _ u
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (MAPP x a‚ÇÅ , w1') ‚â° (MAPP x y , w3))
    comp1' = ‚Üísteps-MAPP {w1'} {w3} {a‚ÇÅ} {y} x k1 comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (MAPP x a‚ÇÇ , w1) ‚â° (MAPP x z , w3))
    comp2' = ‚Üísteps-MAPP {w1} {w3} {a‚ÇÇ} {z} x k2 comp2


‚ÜíupdSeqStep-APPLY‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (APPLY a‚ÇÇ b‚ÇÇ) (APPLY a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-APPLY‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  APPLY y b‚ÇÅ , APPLY z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-APPLY _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (APPLY a‚ÇÅ b‚ÇÅ , w1') ‚â° (APPLY y b‚ÇÅ , w3))
    comp1' = ‚Üísteps-APPLY {w1'} {w3} {a‚ÇÅ} {y} b‚ÇÅ k1 comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (APPLY a‚ÇÇ b‚ÇÇ , w1) ‚â° (APPLY z b‚ÇÇ , w3))
    comp2' = ‚Üísteps-APPLY {w1} {w3} {a‚ÇÇ} {z} b‚ÇÇ k2 comp2


‚ÜíupdSeqStep-LET‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (LET a‚ÇÇ b‚ÇÇ) (LET a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-LET‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  LET y b‚ÇÅ , LET z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-LET _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (LET a‚ÇÅ b‚ÇÅ , w1') ‚â° (LET y b‚ÇÅ , w3))
    comp1' = LET‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (LET a‚ÇÇ b‚ÇÇ , w1) ‚â° (LET z b‚ÇÇ , w3))
    comp2' = LET‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ {w1} {w3} comp2


‚ÜíupdSeqStep-CHOOSE‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (CHOOSE a‚ÇÇ b‚ÇÇ) (CHOOSE a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-CHOOSE‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  CHOOSE y b‚ÇÅ , CHOOSE z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-CHOOSE _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (CHOOSE a‚ÇÅ b‚ÇÅ , w1') ‚â° (CHOOSE y b‚ÇÅ , w3))
    comp1' = CHOOSE‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (CHOOSE a‚ÇÇ b‚ÇÇ , w1) ‚â° (CHOOSE z b‚ÇÇ , w3))
    comp2' = CHOOSE‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ {w1} {w3} comp2


{--
‚ÜíupdSeqStep-DSUP‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (DSUP a‚ÇÇ b‚ÇÇ) (DSUP a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-DSUP‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  DSUP y b‚ÇÅ , DSUP z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-DSUP _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (DSUP a‚ÇÅ b‚ÇÅ , w1') ‚â° (DSUP y b‚ÇÅ , w3))
    comp1' = DSUP‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (DSUP a‚ÇÇ b‚ÇÇ , w1) ‚â° (DSUP z b‚ÇÇ , w3))
    comp2' = DSUP‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ {w1} {w3} comp2
--}


‚ÜíupdSeqStep-WREC‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (WREC a‚ÇÇ b‚ÇÇ) (WREC a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-WREC‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  WREC y b‚ÇÅ , WREC z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-WREC _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (WREC a‚ÇÅ b‚ÇÅ , w1') ‚â° (WREC y b‚ÇÅ , w3))
    comp1' = WREC‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (WREC a‚ÇÇ b‚ÇÇ , w1) ‚â° (WREC z b‚ÇÇ , w3))
    comp2' = WREC‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ {w1} {w3} comp2


{--
‚ÜíupdSeqStep-DMSUP‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (DMSUP a‚ÇÇ b‚ÇÇ) (DMSUP a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-DMSUP‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  DMSUP y b‚ÇÅ , DMSUP z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-DMSUP _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (DMSUP a‚ÇÅ b‚ÇÅ , w1') ‚â° (DMSUP y b‚ÇÅ , w3))
    comp1' = DMSUP‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (DMSUP a‚ÇÇ b‚ÇÇ , w1) ‚â° (DMSUP z b‚ÇÇ , w3))
    comp2' = DMSUP‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ {w1} {w3} comp2
--}


‚ÜíupdSeqStep-SPREAD‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (SPREAD a‚ÇÇ b‚ÇÇ) (SPREAD a‚ÇÅ b‚ÇÅ)
‚ÜíupdSeqStep-SPREAD‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ub (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  SPREAD y b‚ÇÅ , SPREAD z b‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-SPREAD _ _ _ _ u ub
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (SPREAD a‚ÇÅ b‚ÇÅ , w1') ‚â° (SPREAD y b‚ÇÅ , w3))
    comp1' = SPREAD‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (SPREAD a‚ÇÇ b‚ÇÇ , w1) ‚â° (SPREAD z b‚ÇÇ , w3))
    comp2' = SPREAD‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ {w1} {w3} comp2


‚ÜíupdSeqStep-DECIDE‚ÇÅ : (w1 w1' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term)
                      ‚Üí updSeq r s n b‚ÇÅ b‚ÇÇ
                      ‚Üí updSeq r s n c‚ÇÅ c‚ÇÇ
                      ‚Üí updSeqStep w1 w1' r s n a‚ÇÇ a‚ÇÅ
                      ‚Üí updSeqStep w1 w1' r s n (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)
‚ÜíupdSeqStep-DECIDE‚ÇÅ w1 w1' r s n a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ ub uc (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  fst comp1' , fst comp2' ,
  DECIDE y b‚ÇÅ c‚ÇÅ , DECIDE z b‚ÇÇ c‚ÇÇ ,
  w3 , snd comp1' , snd comp2' , updSeq-DECIDE _ _ _ _ _ _ u ub uc
  where
    comp1' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ , w1') ‚â° (DECIDE y b‚ÇÅ c‚ÇÅ , w3))
    comp1' = DECIDE‚áìsteps k1 {a‚ÇÅ} {y} b‚ÇÅ c‚ÇÅ {w1'} {w3} comp1

    comp2' : Œ£ ‚Ñï (Œª k0 ‚Üí steps k0 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1) ‚â° (DECIDE z b‚ÇÇ c‚ÇÇ , w3))
    comp2' = DECIDE‚áìsteps k2 {a‚ÇÇ} {z} b‚ÇÇ c‚ÇÇ {w1} {w3} comp2


updSeqSteps : (r : Name) (s : ùïä) (n : ‚Ñï) (k : ‚Ñï) ‚Üí Set(L)
updSeqSteps r s n k =
  {a b v : Term} {w1 w2 : ùïé¬∑}
  ‚Üí compatible¬∑ r w1 Res‚ä§
  ‚Üí updSeq r s n a b
  ‚Üí (comp : steps k (a , w1) ‚â° (v , w2))
  ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {v} n r comp
  ‚Üí isValue v
  ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (b , w1) ‚â° (v' , w2) √ó updSeq r s n v v'))


updSeqStepInd : (r : Name) (s : ùïä) (n : ‚Ñï) (b : Term) (w : ùïé¬∑) ‚Üí Set(L)
updSeqStepInd r s n b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£ (steps k (b , w) ‚â° (v , w')) (Œª comp ‚Üí
     isHighest‚Ñï {k} {w} {w'} {b} {v} n r comp
     √ó isValue v
     √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí updSeqSteps r s n k')))))


updSeqStepInd-IFLT‚ÇÇ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (k : ‚Ñï) (b c d : Term)
                        ‚Üí updSeqStepInd r s n (IFLT (NUM k) b c d) w
                        ‚Üí updSeqStepInd r s n b w
updSeqStepInd-IFLT‚ÇÇ‚Üí w r s n k b c d (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-IFLT‚ÇÇ‚Üí {n} {k1} {r} {k} {b} {c} {d} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-IFLT‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b c d : Term)
                        ‚Üí updSeqStepInd r s n (IFLT a b c d) w
                        ‚Üí updSeqStepInd r s n a w
updSeqStepInd-IFLT‚ÇÅ‚Üí w r s n a b c d (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-IFLT‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {c} {d} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-IFEQ‚ÇÇ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (k : ‚Ñï) (b c d : Term)
                        ‚Üí updSeqStepInd r s n (IFEQ (NUM k) b c d) w
                        ‚Üí updSeqStepInd r s n b w
updSeqStepInd-IFEQ‚ÇÇ‚Üí w r s n k b c d (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-IFEQ‚ÇÇ‚Üí {n} {k1} {r} {k} {b} {c} {d} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-IFEQ‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b c d : Term)
                        ‚Üí updSeqStepInd r s n (IFEQ a b c d) w
                        ‚Üí updSeqStepInd r s n a w
updSeqStepInd-IFEQ‚ÇÅ‚Üí w r s n a b c d (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-IFEQ‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {c} {d} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-SUC‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a : Term)
                        ‚Üí updSeqStepInd r s n (SUC a) w
                        ‚Üí updSeqStepInd r s n a w
updSeqStepInd-SUC‚ÇÅ‚Üí w r s n a (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-SUC‚ÇÅ‚Üí {n} {k1} {r} {a} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-APPLY‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (APPLY a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-APPLY‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-APPLY‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-LET‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (LET a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-LET‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-LET‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-CHOOSE‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (CHOOSE a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-CHOOSE‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-CHOOSE‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


{--
updSeqStepInd-DSUP‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (DSUP a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-DSUP‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-DSUP‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))
--}


updSeqStepInd-WREC‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (WREC a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-WREC‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-WREC‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


{--
updSeqStepInd-DMSUP‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (DMSUP a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-DMSUP‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-DMSUP‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))
--}


updSeqStepInd-SPREAD‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b : Term)
                         ‚Üí updSeqStepInd r s n (SPREAD a b) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-SPREAD‚ÇÅ‚Üí w r s n a b (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-SPREAD‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-DECIDE‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a b c : Term)
                         ‚Üí updSeqStepInd r s n (DECIDE a b c) w
                         ‚Üí updSeqStepInd r s n a w
updSeqStepInd-DECIDE‚ÇÅ‚Üí w r s n a b c (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-DECIDE‚ÇÅ‚Üí {n} {k1} {r} {a} {b} {c} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-FIX‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a : Term)
                        ‚Üí updSeqStepInd r s n (FIX a) w
                        ‚Üí updSeqStepInd r s n a w
updSeqStepInd-FIX‚ÇÅ‚Üí w r s n a (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-FIX‚ÇÅ‚Üí {n} {k1} {r} {a} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


updSeqStepInd-MAPP‚ÇÅ‚Üí : (w : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (x : ùïä) (a : Term)
                        ‚Üí updSeqStepInd r s n (MAPP x a) w
                        ‚Üí updSeqStepInd r s n a w
updSeqStepInd-MAPP‚ÇÅ‚Üí w r s n x a (k1 , v , w' , comp , ish , isv , ind)
  with isHighest‚Ñï-MAPP‚ÇÅ‚Üí {n} {k1} {r} {x} {a} {v} {w} {w'} comp isv ish
... | (k' , u , w'' , comp' , ish' , isv' , ltk) =
  k' , u , w'' , comp' , ish' , isv' , Œª k'' j ‚Üí ind k'' (‚â§-trans j (<‚áí‚â§ ltk))


<s‚Üí¬¨‚â°‚Üí< : {i n : ‚Ñï} ‚Üí i < suc n ‚Üí ¬¨ i ‚â° n ‚Üí i < n
<s‚Üí¬¨‚â°‚Üí< {i} {n} lts neq with i <? n
... | yes p = p
... | no p = ‚ä•-elim (neq (<s‚Üí¬¨<‚Üí‚â° lts p))


equalInType-BAIREn0 : (i : ‚Ñï) (w : ùïé¬∑) (f g : CTerm)
                      ‚Üí equalInType i w (#BAIREn (#NUM 0)) f g
equalInType-BAIREn0 i w f g =
  ‚â°CTerm‚ÜíequalInType
    (sym (#BAIREn‚â° (#NUM 0)))
    (equalInType-FUN
      (‚ÜíequalTypesNATn i w (#NUM 0) (#NUM 0) (NUM-equalInType-NAT i w 0))
      eqTypesNAT
      aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí  equalInType i w' (#NATn (#NUM 0)) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ eqa = ‚ä•-elim (lower {0‚Ñì} {lsuc(L)} (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw1 eqa1)))
      where
        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí a‚ÇÅ #‚áõ #NUM j at w' √ó a‚ÇÇ #‚áõ #NUM j at w' √ó j < 0)
                              ‚Üí Lift (lsuc L) ‚ä•)
        aw1 w2 e2 (j , c1 , c2 , x) = lift (1+n‚â¢0 {j} (n‚â§0‚áín‚â°0 {suc j} x))

        eqa1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí Œ£ ‚Ñï (Œª j ‚Üí a‚ÇÅ #‚áõ #NUM j at w' √ó a‚ÇÇ #‚áõ #NUM j at w' √ó j < 0))
        eqa1 = equalInType-NATn‚Üí {i} {w1} {0} {#NUM 0} {a‚ÇÅ} {a‚ÇÇ} (#‚áõ-refl w1 (#NUM 0)) eqa


#APPLY-seq2list‚áõ : (w : ùïé¬∑) (s : ùïä) (a : CTerm) (k n : ‚Ñï)
                    ‚Üí k < n
                    ‚Üí a #‚áõ #NUM k at w
                    ‚Üí #APPLY (seq2list s n) a #‚áõ #NUM (s k) at w
#APPLY-seq2list‚áõ w s a k 0 ltn comp = ‚ä•-elim (1+n‚â¢0 {k} (n‚â§0‚áín‚â°0 {suc k} ltn))
#APPLY-seq2list‚áõ w s a k (suc n) ltn comp =
  #‚áõ-trans
    {w} {#APPLY (seq2list s (suc n)) a} {#IFEQ a (#NUM n) (#NUM (s n)) (#APPLY (seq2list s n) a)} {#NUM (s k)}
    (APPLY-APPENDf‚áõ w (#NUM n) (seq2list s n) (#NUM (s n)) a)
    (#‚áõ-trans
       {w}
       {#IFEQ a (#NUM n) (#NUM (s n)) (#APPLY (seq2list s n) a)}
       {#IFEQ (#NUM k) (#NUM n) (#NUM (s n)) (#APPLY (seq2list s n) a)}
       {#NUM (s k)}
       (IFEQ‚áõ‚ÇÅ {w} {‚åú a ‚åù} {NUM k} {NUM n} {NUM (s n)} {‚åú #APPLY (seq2list s n) a ‚åù} comp)
       c1)
  where
    c1 : #IFEQ (#NUM k) (#NUM n) (#NUM (s n)) (#APPLY (seq2list s n) a)  #‚áõ #NUM (s k) at w
    c1 with k ‚âü n
    ... | yes p rewrite p = IFEQ‚áõ= {n} {n} {w} {NUM (s n)} {‚åú #APPLY (seq2list s n) a ‚åù} refl
    ... | no p =
      #‚áõ-trans
        {w}
        {#IFEQ (#NUM k) (#NUM n) (#NUM (s n)) (#APPLY (seq2list s n) a)}
        {#APPLY (seq2list s n) a}
        {#NUM (s k)}
        (IFEQ‚áõ¬¨= {n} {k} {w} {NUM (s n)} {‚åú #APPLY (seq2list s n) a ‚åù} p)
        (#APPLY-seq2list‚áõ w s a k n (<s‚Üí¬¨‚â°‚Üí< ltn p) comp)


equalInType-BAIREn-seq2list : (i : ‚Ñï) (w : ùïé¬∑) (s : ùïä) (n : ‚Ñï)
                              ‚Üí equalInType i w (#BAIREn (#NUM n)) (seq2list s n) (#MSEQ s)
equalInType-BAIREn-seq2list i w s n =
  ‚â°CTerm‚ÜíequalInType
    (sym (#BAIREn‚â° (#NUM n)))
    (equalInType-FUN
      (‚ÜíequalTypesNATn i w (#NUM n) (#NUM n) (NUM-equalInType-NAT i w n))
      eqTypesNAT
      aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#NATn (#NUM n)) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w' #NAT (#APPLY (seq2list s n) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚ÜíequalInType-NAT
        i w1 (#APPLY (seq2list s n) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
        (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NATn‚Üí {i} {w1} {n} {#NUM n} {a‚ÇÅ} {a‚ÇÇ} (#‚áõ-refl w1 (#NUM n)) eqa))
      where
        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí Œ£ ‚Ñï (Œª k ‚Üí a‚ÇÅ #‚áõ #NUM k at w' √ó a‚ÇÇ #‚áõ #NUM k at w' √ó k < n)
                              ‚Üí NATeq w' (#APPLY (seq2list s n) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
        aw1 w2 e2 (k , c1 , c2 , ltn) = s k , #APPLY-seq2list‚áõ w2 s a‚ÇÅ k n ltn c1 , APPLY-MSEQ‚áõ w2 s ‚åú a‚ÇÇ ‚åù k c2


abstract

  correctSeqN-inv0 : (i : ‚Ñï) (w : ùïé¬∑) (F : CTerm) (s : ùïä) (n : ‚Ñï)
                     ‚Üí correctSeqN w F 0 #INIT s (suc n)
                     ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                         #APPLY F (#upd (#loopName w F (#NUM n) (seq2list s n)) (seq2list s n)) #‚áì #NUM m from (#loopùïé0 w F (#NUM n) (seq2list s n)) to w'
                         √ó getT 0 (#loopName w F (#NUM n) (seq2list s n)) w' ‚â° just (NUM j)
                         √ó ¬¨ j < n)))
  correctSeqN-inv0 i w F s n cor
    with correctSeqN-inv i w F s 0 n cor
  ... | (m , w' , j , comp , gt0 , nlt) rewrite +0 n =
    m , w' , j , comp , gt0 , nlt


Œ£steps-updSeq-NUM‚Üí : (w w' : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (m : ‚Ñï) (b : Term)
                      ‚Üí Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí steps k (b , w) ‚â° (v , w') √ó updSeq r s n (NUM m) v))
                      ‚Üí Œ£ ‚Ñï (Œª k ‚Üí steps k (b , w) ‚â° (NUM m , w'))
Œ£steps-updSeq-NUM‚Üí w w' r s n m b (k , v , comp , u)
  rewrite updSeq-NUM‚Üí r s n m v u =
  k , comp


chooseT0if‚â°uùïé : (w : ùïé¬∑) (r : Name) (m m' : ‚Ñï)
                 ‚Üí getT 0 r w ‚â° just (NUM m')
                 ‚Üí chooseT0if r w m' m ‚â° uùïé r m w
chooseT0if‚â°uùïé w r m m' gt0 rewrite gt0 with m' <? m
... | yes p = refl
... | no p = refl


isHighest‚Ñï‚Üí<last : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} {m : ‚Ñï} (n : ‚Ñï) (name : Name) (comp : steps k (a , w1) ‚â° (b , w2))
                       ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
                       ‚Üí getT 0 name w2 ‚â° just (NUM m)
                       ‚Üí m < n
isHighest‚Ñï‚Üí<last {0} {w1} {w2} {a} {b} {m} n name comp h gt0
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) | gt0 with h
... | (j , e , q) rewrite sym (NUMinj (just-inj e)) = q
isHighest‚Ñï‚Üí<last {suc k} {w1} {w2} {a} {b} {m} n name comp h gt0 with step‚äé a w1
... | inj‚ÇÅ (a' , w' , z) rewrite z = isHighest‚Ñï‚Üí<last {k} {w'} {w2} {a'} {b} {m} n name comp (snd h) gt0
... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) | gt0 with h
... |    (j , e , q) rewrite sym (NUMinj (just-inj e)) = q


isHighest‚Ñï‚Üí<‚â°upd : (gc : get-choose-‚Ñï)
                    {k : ‚Ñï} {w1 w2 w : ùïé¬∑} {a b : Term} {m m' : ‚Ñï} (n : ‚Ñï) (name : Name)
                    (comp : steps k (a , w1) ‚â° (b , w2))
                    ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
                    ‚Üí getT 0 name w ‚â° just (NUM m')
                    ‚Üí compatible¬∑ name w Res‚ä§
                    ‚Üí w2 ‚â° chooseT0if name w m' m
                    ‚Üí m < n
isHighest‚Ñï‚Üí<‚â°upd gc {k} {w1} {w2} {w} {a} {b} {m} {m'} n name comp h gt0 compat e rewrite e with m' <? m
... | yes p = isHighest‚Ñï‚Üí<last {k} {w1} {chooseT name w (NUM m)} {a} {b} {m} n name comp h (gc name w m compat)
... | no p = <-trans ≥ (‚âÆ‚áí‚â• p) (isHighest‚Ñï‚Üí<last {k} {w1} {w} {a} {b} {m'} n name comp h gt0)


steps‚Üí‚â°ùïé : (w w‚ÇÅ w‚ÇÇ : ùïé¬∑) (a v‚ÇÅ v‚ÇÇ : Term) (n m : ‚Ñï)
             ‚Üí isValue v‚ÇÅ
             ‚Üí isValue v‚ÇÇ
             ‚Üí steps n (a , w) ‚â° (v‚ÇÅ , w‚ÇÅ)
             ‚Üí steps m (a , w) ‚â° (v‚ÇÇ , w‚ÇÇ)
             ‚Üí w‚ÇÅ ‚â° w‚ÇÇ
steps‚Üí‚â°ùïé w w‚ÇÅ w‚ÇÇ a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ with n ‚â§? m
... | yes p = steps-val-det-ùïé w w‚ÇÅ w‚ÇÇ a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ c‚ÇÅ c‚ÇÇ p
... | no p = sym (steps-val-det-ùïé w w‚ÇÇ w‚ÇÅ a v‚ÇÇ v‚ÇÅ m n isv‚ÇÇ c‚ÇÇ c‚ÇÅ (<‚áí‚â§ (‚â∞‚áí> p)))


steps‚Üí‚â° : (w w‚ÇÅ w‚ÇÇ : ùïé¬∑) (a v‚ÇÅ v‚ÇÇ : Term) (n m : ‚Ñï)
             ‚Üí isValue v‚ÇÅ
             ‚Üí isValue v‚ÇÇ
             ‚Üí steps n (a , w) ‚â° (v‚ÇÅ , w‚ÇÅ)
             ‚Üí steps m (a , w) ‚â° (v‚ÇÇ , w‚ÇÇ)
             ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
steps‚Üí‚â° w w‚ÇÅ w‚ÇÇ a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ with n ‚â§? m
... | yes p = steps-val-det w w‚ÇÅ w‚ÇÇ a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ c‚ÇÅ c‚ÇÇ p
... | no p = sym (steps-val-det w w‚ÇÇ w‚ÇÅ a v‚ÇÇ v‚ÇÅ m n isv‚ÇÇ c‚ÇÇ c‚ÇÅ (<‚áí‚â§ (‚â∞‚áí> p)))


s2l‚áì : (w : ùïé¬∑) (s : ùïä) (n m : ‚Ñï)
       ‚Üí m < n
       ‚Üí APPLY (s2l s n) (NUM m) ‚áì NUM (s m) from w to w
s2l‚áì w s 0 m ltn = ‚ä•-elim (1+n‚â¢0 {m} (n‚â§0‚áín‚â°0 {suc m} ltn))
s2l‚áì w s (suc n) m ltn =
  ‚áì-trans‚ÇÇ
    {w} {w} {w}
    {APPLY (APPENDf (NUM n) (s2l s n) (NUM (s n))) (NUM m)}
    {IFEQ (NUM m) (NUM n) (NUM (s n)) (APPLY (s2l s n) (NUM m))}
    {NUM (s m)}
    (APPLY-APPENDf‚áì w (#NUM n) (ct (s2l s n) (s2l# s n)) (#NUM (s n)) (#NUM m))
    c
  where
    c : IFEQ (NUM m) (NUM n) (NUM (s n)) (APPLY (s2l s n) (NUM m)) ‚áì NUM (s m) from w to w
    c with m ‚âü n
    ... | yes p rewrite p = IFEQ-NUM=‚áì {n} {n} refl (NUM (s n)) (APPLY (s2l s n) (NUM n)) w
    ... | no p =
      ‚áì-trans‚ÇÇ
        {w} {w} {w}
        {IFEQ (NUM m) (NUM n) (NUM (s n)) (APPLY (s2l s n) (NUM m))}
        {APPLY (s2l s n) (NUM m)} {NUM (s m)}
        (IFEQ-NUM¬¨=‚áì {m} {n} p (NUM (s n)) (APPLY (s2l s n) (NUM m)) w)
        (s2l‚áì w s n m (<s‚Üí¬¨‚â°‚Üí< ltn p))


‚â°ùïé‚Üí‚áìfrom-to : (w w1 w2 : ùïé¬∑) (a b : Term)
                ‚Üí w1 ‚â° w2
                ‚Üí a ‚áì b from w to w1
                ‚Üí a ‚áì b from w to w2
‚â°ùïé‚Üí‚áìfrom-to w w1 w2 a b e comp rewrite e = comp



updSeq‚ÜíisValue : {r : Name} {s : ùïä} {n : ‚Ñï} {a b : Term}
                  ‚Üí updSeq r s n a b
                  ‚Üí isValue a
                  ‚Üí isValue b
--updSeq‚ÜíisValue {r} {s} {n} {.NAT} {.NAT} updSeq-NAT isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.QNAT} {.QNAT} updSeq-QNAT isv = tt
--updSeq‚ÜíisValue {r} {s} {n} {.TNAT} {.TNAT} updSeq-TNAT isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (updSeq-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (updSeq-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(NUM x)} {.(NUM x)} (updSeq-NUM x) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (updSeq-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} (updSeq-LAMBDA a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (updSeq-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) isv = tt
--updSeq‚ÜíisValue {r} {s} {n} {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} (updSeq-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (updSeq-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (updSeq-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (updSeq-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (updSeq-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (updSeq-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (updSeq-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
--updSeq‚ÜíisValue {r} {s} {n} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} (updSeq-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} (updSeq-INL a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} (updSeq-INR a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (updSeq-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ u u‚ÇÅ u‚ÇÇ) isv = tt
--updSeq‚ÜíisValue {r} {s} {n} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (updSeq-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ u u‚ÇÅ u‚ÇÇ u‚ÇÉ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.AX} {.AX} updSeq-AX isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.FREE} {.FREE} updSeq-FREE isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(MSEQ x)} {.(MSEQ x)} (updSeq-MSEQ x) isv = tt
--updSeq‚ÜíisValue {r} {s} {n} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} (updSeq-TSQUASH a‚ÇÅ a‚ÇÇ u) isv = tt
--updSeq‚ÜíisValue {r} {s} {n} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} (updSeq-TTRUNC a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.NOWRITE} {.NOWRITE} updSeq-NOWRITE isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.NOREAD}  {.NOREAD}  updSeq-NOREAD  isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} (updSeq-SUBSING a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(PURE)} {.(PURE)} (updSeq-PURE) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(NOSEQ)} {.(NOSEQ)} (updSeq-NOSEQ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(NOENC)} {.(NOENC)} (updSeq-NOENC) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} (updSeq-TERM a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} (updSeq-DUM a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (updSeq-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ u u‚ÇÅ) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(UNIV x)} {.(UNIV x)} (updSeq-UNIV x) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} (updSeq-LIFT a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} (updSeq-LOWER a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} (updSeq-SHRINK a‚ÇÅ a‚ÇÇ u) isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(upd r (MSEQ s))} {.(upd r (s2l s n))} updSeq-upd isv = tt
updSeq‚ÜíisValue {r} {s} {n} {.(upd r (s2l s n))} {.(upd r (MSEQ s))} updSeq-updr isv = tt


‚â°sub-updSeqStepInd : (r : Name) (s : ùïä) (n : ‚Ñï) (b : Term) (t u : Term) (w : ùïé¬∑)
                     ‚Üí t ‚â° u
                     ‚Üí updSeqStepInd r s n (sub b t) w
                     ‚Üí updSeqStepInd r s n (sub b u) w
‚â°sub-updSeqStepInd r s n b t u w e h rewrite e = h


‚â°sub-FIX-updSeqStepInd : (r : Name) (s : ùïä) (n : ‚Ñï) (t u : Term) (w : ùïé¬∑)
                         ‚Üí t ‚â° u
                         ‚Üí updSeqStepInd r s n (sub (FIX (LAMBDA t)) t) w
                         ‚Üí updSeqStepInd r s n (sub (FIX (LAMBDA u)) u) w
‚â°sub-FIX-updSeqStepInd r s n t u w e h rewrite e = h


‚áì‚Çó‚ÜíupdSeqStep : (w1 w2 : ùïé¬∑) (r : Name) (s : ùïä) (n : ‚Ñï) (a a' b : Term)
                 ‚Üí a ‚áì a' from w1 to w1
                 ‚Üí updSeqStep w1 w2 r s n a' b
                 ‚Üí updSeqStep w1 w2 r s n a b
‚áì‚Çó‚ÜíupdSeqStep w1 w2 r s n a a' b comp (k1 , k2 , y , z , w3 , comp1 , comp2 , u) =
  k1 , fst comp + k2 , y , z , w3 , comp1 ,
  steps-trans+ {fst comp} {k2} {a} {a'} {z} {w1} {w1} {w3} (snd comp) comp2 ,
  u



updSeq-WRECr : {r : Name} {s : ùïä} {n : ‚Ñï} {r1 r2 f1 f2 : Term}
               ‚Üí updSeq r s n r1 r2
               ‚Üí updSeq r s n f1 f2
               ‚Üí updSeq r s n (WRECr r1 f1) (WRECr r2 f2)
updSeq-WRECr {r} {s} {n} {r1} {r2} {f1} {f2} dr df =
  updSeq-LAMBDA
    _ _
    (updSeq-WREC
      _ _ _ _
      (updSeq-APPLY _ _ _ _ (updSeq-shiftUp 0 df) (updSeq-VAR 0))
      (updSeq-shiftUp 3 dr))


updSeq-BOT : (r : Name) (s : ùïä) (n : ‚Ñï)
             ‚Üí updSeq r s n BOT BOT
updSeq-BOT r s n = updSeq-FIX ID ID (updSeq-LAMBDA (VAR 0) (VAR 0) (updSeq-VAR _))


updSeq-ENCr : {r : Name} {s : ùïä} {n : ‚Ñï} {a : Term}
               ‚Üí updSeq r s n a a
               ‚Üí updSeq r s n (ENCr a) (ENCr a)
updSeq-ENCr {r} {s} {n} {a} u =
  updSeq-IFEQ
    (APPLY a (NUM (encode¬∑ (ENC a)))) (APPLY a (NUM (encode¬∑ (ENC a)))) N0 N0 BOT BOT N0 N0
    (updSeq-APPLY a a (NUM (encode¬∑ (ENC a))) (NUM (encode¬∑ (ENC a))) u (updSeq-NUM _))
    (updSeq-NUM _)
    (updSeq-BOT r s n)
    (updSeq-NUM _)

\end{code}
