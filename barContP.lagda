\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --auto-inline #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
--open import choiceBar
open import encode


module barContP {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                (X : ChoiceExt W C)
                (N : NewChoice {L} W C K G)
                (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                (EM : ExcludedMiddle (lsuc(L)))
                (EC : Encode)
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms4(W)(C)(K)(G)(X)(N)(EC)
open import terms5(W)(C)(K)(G)(X)(N)(EC)
open import terms6(W)(C)(K)(G)(X)(N)(EC)
open import terms7(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (eqTypes-mon)
--open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import props_w(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import list(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import continuity-conds(W)(C)(K)(G)(X)(N)(EC)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)




-- inspired by: https://arxiv.org/pdf/1608.03814.pdf
-- bib to be clarified


-- This constrains all Res‚ä§ choices to be Booleans, and here just BTRUE or BFALSE
-- This will be satisfied by worldInstanceRef2, which is for example used by modInsanceKripkeRefBool
-- This uses Res‚ä§ as this is the restiction used by FRESH
cùîπ : Set(lsuc(L))
cùîπ = (name : Name) (w : ùïé¬∑)
      ‚Üí compatible¬∑ name w Res‚ä§ -- (Res‚Ñï nc)
      ‚Üí ‚àÄùïé w (Œª w' e ‚Üí Lift {0‚Ñì} (lsuc(L)) (getT 0 name w' ‚â° just BTRUE ‚äé getT 0 name w' ‚â° just BFALSE))


-- This constrains all Res‚ä§ choices to be ‚Ñïs and here just (NUM k) for some k
-- This uses Res‚ä§ as this is the restiction used by FRESH
c‚Ñï : Set(lsuc(L))
c‚Ñï = (name : Name) (w : ùïé¬∑)
      ‚Üí compatible¬∑ name w Res‚ä§ -- (Res‚Ñï nc)
      ‚Üí ‚àÄùïé w (Œª w' e ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª k ‚Üí getT 0 name w' ‚â° just (NUM k))))


FunBar : Term ‚Üí Term
FunBar T = FUN (FUN NAT T) NAT


#FunBar : CTerm ‚Üí CTerm
#FunBar T = #FUN (#FUN #NAT T) #NAT


IndBarB : Term
IndBarB = UNION‚ÇÄ! NAT UNIT


#UNIT : CTerm
#UNIT = ct UNIT refl


#IndBarB : CTerm
#IndBarB = #UNION‚ÇÄ! #NAT #UNIT


-- IndBarC uses NAT! because if DIGAMMAs are functions from NAT, then to prove that (loop ‚àà coW -- see coSemM)
-- we need to jump to the ùïés at wihch the NATs are actual numbers, and we don't have members of the coW at the
-- current ùïé
IndBarC : Term ‚Üí Term
IndBarC T = DECIDE (VAR 0) VOID (NOWRITEMOD T)


#IndBarC : CTerm ‚Üí CTerm0
#IndBarC T = #[0]DECIDE #[0]VAR #[1]VOID (#[1]shiftUp0 (#[0]shiftUp0 (#NOWRITEMOD T)))


IndBar : Term ‚Üí Term
IndBar T = WT‚ÇÄ IndBarB (IndBarC T)


#IndBar : CTerm ‚Üí CTerm
#IndBar T = #WT‚ÇÄ #IndBarB (#IndBarC T)


CoIndBar : Term ‚Üí Term
CoIndBar T = MT‚ÇÄ IndBarB (IndBarC T)


#CoIndBar : CTerm ‚Üí CTerm
#CoIndBar T = #MT‚ÇÄ #IndBarB (#IndBarC T)


ETA : Term ‚Üí Term
ETA n = SUP (INL n) AX


DIGAMMA : Term ‚Üí Term
DIGAMMA f = SUP (INR AX) f


barThesis : Term ‚Üí Term
barThesis T = FUN (FunBar T) (IndBar T)


-- Recursive call used in DIGAMMA
loopR : Term ‚Üí Term ‚Üí Term ‚Üí Term
loopR R k f =
  LAMBDA (LET (VAR 0)
              (LET (SUC (shiftUp 0 (shiftUp 0 k)))
                   (APPLY2 (shiftUp 0 (shiftUp 0 (shiftUp 0 R)))
                           (VAR 0)
                           (APPENDf (shiftUp 0 (shiftUp 0 (shiftUp 0 k))) (shiftUp 0 (shiftUp 0 (shiftUp 0 f))) (VAR 1)))))


loopII : Name ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
loopII r R k f i =
  IFLT (get0 r)
       k
       (ETA i)
       (DIGAMMA (loopR R k f))


-- loopA's body
loopI : Name ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
loopI r R k f i = IFLT i N0 BOT (loopII r R k f i) -- forces i to be a number


loopB : Name ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
loopB r a R k f = LET a (loopI r (shiftUp 0 R) (shiftUp 0 k) (shiftUp 0 f) (VAR 0))


-- ‚ü®k,f‚ü© is a list, so its 2nd component f is a function
loopA : Name ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
loopA r F R k f = loopB r (appUpd r F (shiftUp 0 (shiftUp 0 f))) R k f


-- this is similar to testM in continuity1.lagda
loopF : Name ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
loopF r F R k f =
  SEQ (set0 r) -- we start by assuming that we have enough information
      (loopA r F R k f)


ŒΩloopFB : Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
ŒΩloopFB F R k f = loopF 0 (shiftNameUp 0 F) (shiftNameUp 0 R) (shiftNameUp 0 k) (shiftNameUp 0 f)


ŒΩloopF : Term ‚Üí Term ‚Üí Term ‚Üí Term ‚Üí Term
ŒΩloopF F R k f = FRESH (ŒΩloopFB F R k f)


loopL : Term ‚Üí Term
loopL F =
  -- 0 & 1 are the argument (the list: length (1) + function (0)), and 2 is the recursive call
  LAMBDA (LAMBDA (LAMBDA (ŒΩloopF (shiftUp 0 (shiftUp 0 (shiftUp 0 F))) (VAR 2) (VAR 1) (VAR 0))))


loop : Term ‚Üí Term
loop bar = FIX (loopL bar)


#ETA : CTerm ‚Üí CTerm
#ETA n = #SUP (#INL n) #AX


#[0]ETA : CTerm0 ‚Üí CTerm0
#[0]ETA n = #[0]SUP (#[0]INL n) #[0]AX


#[2]ETA : CTerm2 ‚Üí CTerm2
#[2]ETA n = #[2]SUP (#[2]INL n) #[2]AX


#[3]ETA : CTerm3 ‚Üí CTerm3
#[3]ETA n = #[3]SUP (#[3]INL n) #[3]AX


#DIGAMMA : CTerm ‚Üí CTerm
#DIGAMMA f = #SUP (#INR #AX) f


#[0]DIGAMMA : CTerm0 ‚Üí CTerm0
#[0]DIGAMMA f = #[0]SUP (#[0]INR #[0]AX) f


#[2]DIGAMMA : CTerm2 ‚Üí CTerm2
#[2]DIGAMMA f = #[2]SUP (#[2]INR #[2]AX) f


#[3]DIGAMMA : CTerm3 ‚Üí CTerm3
#[3]DIGAMMA f = #[3]SUP (#[3]INR #[3]AX) f


#[0]loopRLLA : CTerm0 ‚Üí CTerm0 ‚Üí CTerm0 ‚Üí CTerm0 ‚Üí CTerm0
#[0]loopRLLA a R k f =
  #[0]APPLY2 R
             #[0]VAR
             (#[0]APPENDf k f a)


#loopRLL : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#loopRLL j a R k f =
  #LET j (#[0]loopRLLA (#[0]shiftUp0 a) (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f))


#[0]loopRLL : CTerm0 ‚Üí CTerm0 ‚Üí CTerm0 ‚Üí CTerm0
#[0]loopRLL R k f =
  #[0]LET (#[0]SUC k)
          (#[1]APPLY2 (#[1]shiftUp0 R)
                      #[1]VAR0
                      (#[1]APPENDf (#[1]shiftUp0 k) (#[1]shiftUp0 f) #[1]VAR1))


#loopRL : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#loopRL a R k f =
  #LET a (#[0]loopRLL (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f))


#[0]loopRL : CTerm0 ‚Üí CTerm0 ‚Üí CTerm0 ‚Üí CTerm0
#[0]loopRL R k f =
  #[0]LET #[0]VAR
          (#[1]LET (#[1]SUC (#[1]shiftUp0 k))
                   (#[2]APPLY2 (#[2]shiftUp0 (#[1]shiftUp0 R))
                               #[2]VAR0
                               (#[2]APPENDf (#[2]shiftUp0 (#[1]shiftUp0 k))
                                            (#[2]shiftUp0 (#[1]shiftUp0 f))
                                            #[2]VAR1)))


-- Recursive call used in DIGAMMA
#loopR : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#loopR R k f =
  #LAMBDA (#[0]loopRL (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f))


#loopII : Name ‚Üí  CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí ‚Ñï ‚Üí CTerm
#loopII r R k f i =
  #IFLT (#get0 r)
         k
         (#ETA (#NUM i))
         (#DIGAMMA (#loopR R k f))


-- This is loopA's body
#loopI : Name ‚Üí  CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí ‚Ñï ‚Üí CTerm
#loopI r R k f i = #IFLT (#NUM i) #N0 #BOT (#loopII r R k f i)


#loopA : Name ‚Üí  CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#loopA r bar R k f =
  #LET (#APPLY bar (#upd r (#shiftUp0 (#shiftUp0 f))))
       (#[0]IFLT #[0]VAR #[0]N0 #[0]BOT
                 (#[0]IFLT (#[0]get0 r)
                           (#[0]shiftUp0 k)
                           (#[0]ETA #[0]VAR)
                           (#[0]DIGAMMA (#[0]LAMBDA (#[1]LET #[1]VAR0
                                                             (#[2]LET (#[2]SUC (#[2]shiftUp0 (#[1]shiftUp0 (#[0]shiftUp0 k))))
                                                                      (#[3]APPLY2 (#[3]shiftUp0 (#[2]shiftUp0 (#[1]shiftUp0 (#[0]shiftUp0 R))))
                                                                                  #[3]VAR0
                                                                                  (#[3]APPENDf (#[3]shiftUp0 (#[2]shiftUp0 (#[1]shiftUp0 (#[0]shiftUp0 k))))
                                                                                               (#[3]shiftUp0 (#[2]shiftUp0 (#[1]shiftUp0 (#[0]shiftUp0 f))))
                                                                                               #[3]VAR1))))))))


#loopF : Name ‚Üí  CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#loopF r F R k f =
  #SEQ (#set0 r) (#loopA r F R k f)


#FRESH : CTerm ‚Üí CTerm
#FRESH a = ct (FRESH ‚åú a ‚åù) c
  where
    c : # FRESH ‚åú a ‚åù
    c = CTerm.closed a


#[2]FRESH : CTerm2 ‚Üí CTerm2
#[2]FRESH a = ct2 (FRESH ‚åú a ‚åù) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] FRESH ‚åú a ‚åù
    c = CTerm2.closed a


#ŒΩloopFB : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#ŒΩloopFB F R k f = #loopF 0 (#shiftNameUp 0 F) (#shiftNameUp 0 R) (#shiftNameUp 0 k) (#shiftNameUp 0 f)


#ŒΩloopF : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#ŒΩloopF F R k f = #FRESH (#ŒΩloopFB F R k f)


#[1]set0 : (name : Name) ‚Üí CTerm1
#[1]set0 name = ct1 (set0 name) c
  where
    c : #[ 0 ‚à∑ [ 1 ] ] set0 name
    c = refl


#[2]set0 : (name : Name) ‚Üí CTerm2
#[2]set0 name = ct2 (set0 name) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] set0 name
    c = refl


lowerVars-fvars-shiftUp‚â°0 : (t : Term) ‚Üí lowerVars (fvars (shiftUp 0 t)) ‚â° fvars t
lowerVars-fvars-shiftUp‚â°0 t rewrite fvars-shiftUp‚â° 0 t | loweVars-suc (fvars t) = refl


fvars-upd : (name : Name) (f : Term) ‚Üí fvars (upd name f) ‚â° lowerVars (lowerVars (fvars f))
fvars-upd name f
  rewrite lowerVars++ (fvars (shiftUp 0 f)) [ 1 ]
        | lowerVars-fvars-shiftUp‚â°0 f
        | lowerVars++ (fvars f) [ 0 ]
        | ++[] (lowerVars (fvars f)) = refl


#[1]upd : (name : Name) (f : CTerm3) ‚Üí CTerm1
#[1]upd name f = ct1 (upd name ‚åú f ‚åù) c
  where
    c : #[ 0 ‚à∑ [ 1 ] ] upd name ‚åú f ‚åù
    c rewrite fvars-upd name ‚åú f ‚åù =
      ‚äÜ‚Üí‚äÜ?
        {lowerVars (lowerVars (fvars ‚åú f ‚åù))}
        (lowerVars-fvars-[0,1,2]
          {lowerVars (fvars ‚åú f ‚åù)}
          (lowerVars-fvars-[0,1,2,3] {fvars ‚åú f ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú f ‚åù} (CTerm3.closed f))))


#[2]upd : (name : Name) (f : CTerm4) ‚Üí CTerm2
#[2]upd name f = ct2 (upd name ‚åú f ‚åù) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] upd name ‚åú f ‚åù
    c rewrite fvars-upd name ‚åú f ‚åù =
      ‚äÜ‚Üí‚äÜ?
        {lowerVars (lowerVars (fvars ‚åú f ‚åù))}
        (lowerVars-fvars-[0,1,2,3]
          {lowerVars (fvars ‚åú f ‚åù)}
          (lowerVars-fvars-[0,1,2,3,4] {fvars ‚åú f ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú f ‚åù} (CTerm4.closed f))))


#[2]shiftNameUp : ‚Ñï ‚Üí CTerm2 ‚Üí CTerm2
#[2]shiftNameUp n t = ct2 (shiftNameUp n ‚åú t ‚åù) c
  where
    c : #[ 0 ‚à∑ 1 ‚à∑ [ 2 ] ] shiftNameUp n (CTerm2.cTerm t)
    c rewrite fvars-shiftNameUp n (CTerm2.cTerm t) = CTerm2.closed t


#loop : CTerm ‚Üí CTerm
#loop bar =
  -- 0&1 are the argument (the list): 1 is the length and 0 the function
  -- and 2 is the recursive call
  #FIX (#LAMBDA (#[0]LAMBDA (#[1]LAMBDA (#[2]FRESH (#[2]SEQ (#[2]set0 r) F)))))
  where
    r : Name
    r = 0

    F : CTerm2
    F = #[2]LET (#[2]APPLY (#[2]shiftNameUp 0 (#[2]shiftUp0 (#[1]shiftUp0 (#[0]shiftUp0 bar)))) (#[2]upd r #[4]VAR2))
                (#[3]IFLT #[3]VAR0 #[3]N0 #[3]BOT
                (#[3]IFLT (#[3]get0 r)
                          #[3]VAR2
                          (#[3]ETA #[3]VAR0)
                          (#[3]DIGAMMA (#[3]LAMBDA (#[4]LET #[4]VAR0
                                                            (#[5]LET (#[5]SUC #[5]VAR4)
                                                                     (#[6]APPLY2 #[6]VAR6
                                                                                 #[6]VAR0
                                                                                 (#[6]APPENDf #[6]VAR5 #[6]VAR4 #[6]VAR1))))))))


-- sanity checking
‚åú#loopA‚åù‚â° : (r : Name) (F R k f : CTerm) ‚Üí ‚åú #loopA r F R k f ‚åù ‚â° loopA r ‚åú F ‚åù ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù
‚åú#loopA‚åù‚â° r F R k f = refl


-- sanity checking
‚åú#loopF‚åù‚â° : (r : Name) (F R k f : CTerm) ‚Üí ‚åú #loopF r F R k f ‚åù ‚â° loopF r ‚åú F ‚åù ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù
‚åú#loopF‚åù‚â° r F R k f = refl


-- sanity checking
‚åú#loopI‚åù‚â° : (r : Name) (R k f : CTerm) (i : ‚Ñï) ‚Üí ‚åú #loopI r R k f i ‚åù ‚â° loopI r ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù (NUM i)
‚åú#loopI‚åù‚â° r R k f i = refl


-- sanity checking
‚åú#loop‚åù‚â° : (F : CTerm) ‚Üí ‚åú #loop F ‚åù ‚â° loop ‚åú F ‚åù
‚åú#loop‚åù‚â° F = refl


-- sanity checking
‚åúAPPLY-loop‚åù‚â° : (F l : CTerm) ‚Üí ‚åú #APPLY (#loop F) l ‚åù ‚â° APPLY (loop ‚åú F ‚åù) ‚åú l ‚åù
‚åúAPPLY-loop‚åù‚â° F l = refl


-- sanity checking
‚åúAPPLY2-loop‚åù‚â° : (F k f : CTerm) ‚Üí ‚åú #APPLY2 (#loop F) k f ‚åù ‚â° APPLY2 (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù
‚åúAPPLY2-loop‚åù‚â° F k f = refl


-- sanity checking
‚åúloopF-loop‚åù‚â° : (r : Name) (F k f : CTerm) ‚Üí ‚åú #loopF r F (#loop F) k f ‚åù ‚â° loopF r ‚åú F ‚åù (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù
‚åúloopF-loop‚åù‚â° r F k f rewrite ‚åú#loop‚åù‚â° F = refl


tabI : Term ‚Üí Term
tabI bar = APPLY (loop bar) EMPTY


tab : Term
tab = LAMBDA (tabI (VAR 0))


-- A path is a function that provides the B's to follow in a member of a W(A,B) of M(A,B) type
-- An infinite path (only inj‚ÇÅ's) cannot be a path of a W type because eventually (sub a B) will be false
-- and '‚ààType i w (sub0 a B) b' will be false
path : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí CTerm ‚Üí CTerm0 ‚Üí Set(lsuc L)
path i w A B = (n : ‚Ñï) ‚Üí Œ£ CTerm (Œª a ‚Üí Œ£ CTerm (Œª b ‚Üí ‚ààType i w A a √ó ‚ààType i w (sub0 a B) b)) ‚äé ‚ä§


is-inj‚ÇÅ : {I J : Level} {A : Set(I)} {B : Set(J)} (u : A ‚äé B) ‚Üí Set
is-inj‚ÇÅ {I} {J} {A} {B} (inj‚ÇÅ x) = ‚ä§
is-inj‚ÇÅ {I} {J} {A} {B} (inj‚ÇÇ x) = ‚ä•

is-inj‚ÇÇ : {I J : Level} {A : Set(I)} {B : Set(J)} (u : A ‚äé B) ‚Üí Set
is-inj‚ÇÇ {I} {J} {A} {B} (inj‚ÇÅ x) = ‚ä•
is-inj‚ÇÇ {I} {J} {A} {B} (inj‚ÇÇ x) = ‚ä§


-- A path is infinite if it is made out of inj‚ÇÅ's
isInfPath : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (p : path i w A B) ‚Üí Set
isInfPath {i} {w} {A} {B} p = (n : ‚Ñï) ‚Üí is-inj‚ÇÅ (p n)


isFinPath : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (p : path i w A B) ‚Üí Set
isFinPath {i} {w} {A} {B} p = Œ£ ‚Ñï (Œª n ‚Üí is-inj‚ÇÇ (p n))


is-inj‚ÇÅ‚Üí¬¨is-inj‚ÇÇ : {I J : Level} {A : Set(I)} {B : Set(J)} (u : A ‚äé B)
                    ‚Üí is-inj‚ÇÅ u
                    ‚Üí ¬¨ is-inj‚ÇÇ u
is-inj‚ÇÅ‚Üí¬¨is-inj‚ÇÇ {I} {J} {A} {B} (inj‚ÇÅ x) i j = j
is-inj‚ÇÅ‚Üí¬¨is-inj‚ÇÇ {I} {J} {A} {B} (inj‚ÇÇ x) i j = i


¬¨is-inj‚ÇÅ‚Üíis-inj‚ÇÇ : {I J : Level} {A : Set(I)} {B : Set(J)} (u : A ‚äé B)
                    ‚Üí ¬¨ is-inj‚ÇÅ u
                    ‚Üí is-inj‚ÇÇ u
¬¨is-inj‚ÇÅ‚Üíis-inj‚ÇÇ {I} {J} {A} {B} (inj‚ÇÅ x) i = ‚ä•-elim (i tt)
¬¨is-inj‚ÇÅ‚Üíis-inj‚ÇÇ {I} {J} {A} {B} (inj‚ÇÇ x) i = tt


¬¨is-inj‚ÇÇ‚Üíis-inj‚ÇÅ : {I J : Level} {A : Set(I)} {B : Set(J)} (u : A ‚äé B)
                    ‚Üí ¬¨ is-inj‚ÇÇ u
                    ‚Üí is-inj‚ÇÅ u
¬¨is-inj‚ÇÇ‚Üíis-inj‚ÇÅ {I} {J} {A} {B} (inj‚ÇÅ x) i = tt
¬¨is-inj‚ÇÇ‚Üíis-inj‚ÇÅ {I} {J} {A} {B} (inj‚ÇÇ x) i = ‚ä•-elim (i tt)


isFinPath‚Üí¬¨isInfPath : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (p : path i w A B)
                        ‚Üí isFinPath {i} {w} {A} {B} p
                        ‚Üí ¬¨ isInfPath {i} {w} {A} {B} p
isFinPath‚Üí¬¨isInfPath {i} {w} {A} {B} p (n , fin) inf = is-inj‚ÇÅ‚Üí¬¨is-inj‚ÇÇ (p n) (inf n) fin


¬¨isFinPath‚ÜíisInfPath : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (p : path i w A B)
                        ‚Üí ¬¨ isFinPath {i} {w} {A} {B} p
                        ‚Üí isInfPath {i} {w} {A} {B} p
¬¨isFinPath‚ÜíisInfPath {i} {w} {A} {B} p fin n = ¬¨is-inj‚ÇÇ‚Üíis-inj‚ÇÅ (p n) (Œª x ‚Üí fin (n , x))


shiftPath : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (p : path i w A B) ‚Üí path i w A B
shiftPath {i} {w} {A} {B} p k = p (suc k)



-- Defines what it means for a path to be correct w.r.t. a W or M type -- up to n (with fuel)
correctPathN : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (t : CTerm) (p : path i w A B) (n : ‚Ñï) ‚Üí Set(lsuc L)
correctPathN {i} {w} {A} {B} t p 0 = Lift (lsuc L) ‚ä§
correctPathN {i} {w} {A} {B} t p (suc n) with p 0
... | inj‚ÇÅ (a , b , ia , ib) =
  Œ£ CTerm (Œª f ‚Üí
    t #‚áõ {--#‚áì--} #SUP a f at w  -- For W types
    √ó correctPathN {i} {w} {A} {B} (#APPLY f b) (shiftPath {i} {w} {A} {B} p) n)
... | inj‚ÇÇ _ = Lift (lsuc L) ‚ä§


-- A path is correct, if it is so for all ‚Ñïs
correctPath : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} (t : CTerm) (p : path i w A B) ‚Üí Set(lsuc L)
correctPath {i} {w} {A} {B} t p = (n : ‚Ñï) ‚Üí correctPathN {i} {w} {A} {B} t p n


record branch (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) (w : ùïé¬∑) (t1 t2 : CTerm) : Set(lsuc(L))
record branch eqa eqb w t1 t2 where
  coinductive
  field
    branchC : Œ£ CTerm (Œª a1 ‚Üí Œ£ CTerm (Œª f1 ‚Üí Œ£ CTerm (Œª b1 ‚Üí Œ£ CTerm (Œª a2 ‚Üí Œ£ CTerm (Œª f2 ‚Üí Œ£ CTerm (Œª b2 ‚Üí Œ£ (eqa a1 a2) (Œª e ‚Üí
               t1 {--#‚áì--} #‚áõ (#SUP a1 f1) at w
               √ó t2 {--#‚áì--} #‚áõ (#SUP a2 f2) at w
               √ó eqb a1 a2 e b1 b2
               √ó branch eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2))))))))


-- ¬¨ weq tells us which b's to follow
m2mb : (w : ùïé¬∑) (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) (t u : CTerm)
         ‚Üí meq‚ÇÄ eqa eqb w t u
         ‚Üí ¬¨ weq‚ÇÄ eqa eqb w t u
         ‚Üí branch eqa eqb w t u
branch.branchC (m2mb w eqa eqb t u m nw) with meq‚ÇÄ.meqC‚ÇÄ m
... | (a1 , f1 , a2 , f2 , e , c1 , c2 , q) =
  a1 , f1 , fst k , a2 , f2 , fst (snd k) , e , c1 , c2 , fst (snd (snd k)) ,
  m2mb w eqa eqb (#APPLY f1 (fst k)) (#APPLY f2 (fst (snd k))) (q (fst k) (fst (snd k)) (fst (snd (snd k)))) (snd (snd (snd k)))
  where
    nj : ¬¨ ((b1 b2 : CTerm) ‚Üí eqb a1 a2 e b1 b2 ‚Üí weq‚ÇÄ eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2))
    nj h = nw (weq‚ÇÄ.weqC‚ÇÄ a1 f1 a2 f2 e c1 c2 h)

    k : Œ£ CTerm (Œª b1 ‚Üí Œ£ CTerm (Œª b2 ‚Üí Œ£ (eqb a1 a2 e b1 b2) (Œª eb ‚Üí ¬¨ weq‚ÇÄ eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2))))
    k with EM {Œ£ CTerm (Œª b1 ‚Üí Œ£ CTerm (Œª b2 ‚Üí Œ£ (eqb a1 a2 e b1 b2) (Œª eb ‚Üí ¬¨ weq‚ÇÄ eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2))))}
    ... | yes p = p
    ... | no p = ‚ä•-elim (nj j)
      where
        j : (b1 b2 : CTerm) ‚Üí eqb a1 a2 e b1 b2 ‚Üí weq‚ÇÄ eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2)
        j b1 b2 eb with EM {weq‚ÇÄ eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2)}
        ... | yes pp = pp
        ... | no pp = ‚ä•-elim (p (b1 , b2 , eb , pp))



-- Build a path from branch
mb2path : (i : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (t u : CTerm)
          ‚Üí branch (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u
          ‚Üí path i w A B
mb2path i w A B t u m 0 with branch.branchC m
... | (a1 , f1 , b1 , a2 , f2 , b2 , ea , c1 , c2 , eb , q) = inj‚ÇÅ (a1 , b1 , equalInType-refl ea , equalInType-refl eb)
mb2path i w A B t u m (suc n) with branch.branchC m
... | (a1 , f1 , b1 , a2 , f2 , b2 , ea , c1 , c2 , eb , q) = mb2path i w A B (#APPLY f1 b1) (#APPLY f2 b2) q n


correctN-mb2path : (i : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (t u : CTerm)
                   (b : branch (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u)
                   (n : ‚Ñï)
                   ‚Üí correctPathN {i} {w} {A} {B} t (mb2path i w A B t u b) n
correctN-mb2path i w A B t u b 0 = lift tt
correctN-mb2path i w A B t u b (suc n) with branch.branchC b
... | (a1 , f1 , b1 , a2 , f2 , b2 , ea , c1 , c2 , eb , q) =
  f1 , c1 , correctN-mb2path i w A B (#APPLY f1 b1) (#APPLY f2 b2) q n


correct-mb2path : (i : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (t u : CTerm)
                  (b : branch (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u)
                  ‚Üí correctPath {i} {w} {A} {B} t (mb2path i w A B t u b)
correct-mb2path i w A B t u b n = correctN-mb2path i w A B t u b n


inf-mb2path : (i : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (t u : CTerm)
              (b : branch (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u)
              ‚Üí isInfPath {i} {w} {A} {B} (mb2path i w A B t u b)
inf-mb2path i w A B t u b 0 with branch.branchC b
... | (a1 , f1 , b1 , a2 , f2 , b2 , ea , c1 , c2 , eb , q) = tt
inf-mb2path i w A B t u b (suc n) with branch.branchC b
... | (a1 , f1 , b1 , a2 , f2 , b2 , ea , c1 , c2 , eb , q) with inf-mb2path i w A B (#APPLY f1 b1) (#APPLY f2 b2) q n
... |    k with mb2path i w A B (#APPLY f1 b1) (#APPLY f2 b2) q n
... |       inj‚ÇÅ x = tt
... |       inj‚ÇÇ x = k


{--
data compatMW (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) (w : ùïé¬∑) (t1 t2 : CTerm)
              : meq eqa eqb w t1 t2 ‚Üí weq eqa eqb w t1 t2 ‚Üí Set
data compatMW eqa eqb w t1 t2 where
  compMWC : (a1 f1 a2 f2 : CTerm) (ea : eqa a1 a2)
            (c1 : t1 #‚áõ (#SUP a1 f1) at w)
            (c2 : t2 #‚áõ (#SUP a2 f2) at w)
            (eb : (b1 b2 : CTerm) ‚Üí eqb a1 a2 ea b1 b2 ‚Üí weq eqa eqb w (#APPLY f1 b1) (#APPLY f2 b2))
            (m : meq eqa eqb w t1 t2) -- get rid of that + induction
            ‚Üí compatMW eqa eqb w t1 t2 m {--(meq.meqC (a1 , f1 , a2 , f2 , ? , c1 , c2 , ?))--} (weq.weqC a1 f1 a2 f2 ea c1 c2 eb)
--}


-- Classically, we can derive a weq from an meq as follows
m2wa : (i : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (t u : CTerm)
      ‚Üí ((p : path i w A B) ‚Üí correctPath {i} {w} {A} {B} t p ‚Üí isFinPath {i} {w} {A} {B} p)
      ‚Üí meq‚ÇÄ (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u
      ‚Üí weq‚ÇÄ (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u
m2wa i w A B t u cond h with EM {weq‚ÇÄ (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u}
... | yes p = p
... | no q = ‚ä•-elim (isFinPath‚Üí¬¨isInfPath {i} {w} {A} {B} p fin inf)
  where
    b : branch (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) w t u
    b = m2mb w (equalInType i w A) (Œª a b eqa ‚Üí equalInType i w (sub0 a B)) t u h q

    p : path i w A B
    p = mb2path i w A B t u b

    c : correctPath {i} {w} {A} {B} t p
    c = correctN-mb2path i w A B t u b

    inf : isInfPath {i} {w} {A} {B} p
    inf = inf-mb2path i w A B t u b

    fin : isFinPath {i} {w} {A} {B} p
    fin = cond p c


m2w : (kb : K‚ñ°) (i : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (t : CTerm)
      ‚Üí isType i w A
      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (p : path i w' A B) ‚Üí correctPath {i} {w'} {A} {B} t p ‚Üí isFinPath {i} {w'} {A} {B} p)
      ‚Üí ‚ààType i w (#MT‚ÇÄ A B) t
      ‚Üí ‚ààType i w (#WT‚ÇÄ A B) t
m2w kb i w A B t eqta eqtb cond h =
  ‚ÜíequalInType-W‚ÇÄ i w A B t t eqta eqtb (Mod.‚àÄùïé-‚ñ°Func M aw q)
  where
    q : ‚ñ°¬∑ w (Œª w' _ ‚Üí meq‚ÇÄ (equalInType i w' A) (Œª a b eqa ‚Üí equalInType i w' (sub0 a B)) w' t t)
    q = equalInType-M‚ÇÄ‚Üí kb i w A B t t h

    aw : ‚àÄùïé w (Œª w' e' ‚Üí meq‚ÇÄ (equalInType i w' A) (Œª a b eqa ‚Üí equalInType i w' (sub0 a B)) w' t t
                       ‚Üí weq‚ÇÄ (equalInType i w' A) (Œª a b eqa ‚Üí equalInType i w' (sub0 a B)) w' t t)
    aw w' e' z = m2wa i w' A B t t (cond w' e') z


{--‚ÜíequalInType-meq : (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) (w : ùïé¬∑) (t1 t2 : CTerm)
                    ‚Üí t1 #‚áì (#SUP a1 f1) at w
                    ‚Üí t2 #‚áì (#SUP a2 f2) at w
                    ‚Üí meq eqa eqb w t1 t2
--}


{--
sub-LAMBDA-LAMBDA-loopF‚â° : (r : Name) (F : Term) (cF : # F)
                           ‚Üí sub (loop F) (LAMBDA (LAMBDA (loopF r (shiftUp 0 (shiftUp 0 (shiftUp 0 F))) (VAR 2) (VAR 1) (VAR 0))))
                              ‚â° LAMBDA (LAMBDA (loopF r F (loop F) (VAR 1) (VAR 0)))
sub-LAMBDA-LAMBDA-loopF‚â° r F cF
  rewrite #subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 (loop F)))))
                  (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 F))))
                  (‚Üí#shiftUp 0 {shiftUp 0 (shiftUp 0 (shiftUp 0 F))} (‚Üí#shiftUp 0 {shiftUp 0 (shiftUp 0 F)} (‚Üí#shiftUp 0 {shiftUp 0 F} (‚Üí#shiftUp 0 {F} cF))))
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 7 (ct F cF)
        | #shiftUp 8 (ct F cF)
        | #shiftDown 3 (ct F cF)
        | #shiftDown 11 (ct F cF)
  = refl
--}


sub-LAMBDA-LAMBDA-ŒΩloopF‚â° : (F : Term) (cF : # F)
                           ‚Üí sub (loop F) (LAMBDA (LAMBDA (ŒΩloopF (shiftUp 0 (shiftUp 0 (shiftUp 0 F))) (VAR 2) (VAR 1) (VAR 0))))
                              ‚â° LAMBDA (LAMBDA (ŒΩloopF F (loop F) (VAR 1) (VAR 0)))
sub-LAMBDA-LAMBDA-ŒΩloopF‚â° F cF
  rewrite #subv 3 (shiftUp 0 (shiftNameUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 (loop F))))))
                  (shiftUp 0 (shiftNameUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 F)))))
                  (‚Üí#shiftUp 0 {shiftNameUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 F)))} (‚Üí#shiftNameUp 0 {shiftUp 0 (shiftUp 0 (shiftUp 0 F))} (‚Üí#shiftUp 0 {shiftUp 0 (shiftUp 0 F)} (‚Üí#shiftUp 0 {shiftUp 0 F} (‚Üí#shiftUp 0 {F} cF)))))
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 8 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftDown 3 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftDown 11 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
  = refl


{--
sub-LAMBDA-loopF‚â° : (r : Name) (F k : Term) (cF : # F) (ck : # k)
                    ‚Üí sub k (LAMBDA (loopF r F (loop F) (VAR 1) (VAR 0)))
                       ‚â° LAMBDA (loopF r F (loop F) k (VAR 0))
sub-LAMBDA-loopF‚â° r F k cF ck
  rewrite #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 4 (ct F cF)
        | #shiftUp 8 (ct F cF)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 1 (ct k ck)
        | #shiftUp 3 (ct k ck)
        | #shiftUp 4 (ct k ck)
        | #shiftUp 5 (ct k ck)
        | #subv 2 k F cF
        | #subv 2 (shiftUp 0 (shiftNameUp 0 k)) F cF
        | #subv 10 k F cF
        | #subv 10 (shiftUp 0 (shiftNameUp 0 k)) F cF
        | #shiftDown 2 (ct F cF)
        | #shiftDown 3 (ct k ck)
        | #shiftDown 5 (ct k ck)
        | #shiftDown 7 (ct k ck)
        | #shiftDown 10 (ct F cF)
  = refl
--}


sub-LAMBDA-ŒΩloopF‚â° : (F k : Term) (cF : # F) (ck : # k)
                    ‚Üí sub k (LAMBDA (ŒΩloopF F (loop F) (VAR 1) (VAR 0)))
                       ‚â° LAMBDA (ŒΩloopF F (loop F) k (VAR 0))
sub-LAMBDA-ŒΩloopF‚â° F k cF ck
  rewrite #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 1 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 3 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 5 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 (shiftNameUp 0 k)) (‚Üí#shiftNameUp 0 {shiftNameUp 0 k} (‚Üí#shiftNameUp 0 {k} ck)))
        | #shiftUp 0 (ct (shiftNameUp 0 (shiftNameUp 0 k)) (‚Üí#shiftNameUp 0 {shiftNameUp 0 k} (‚Üí#shiftNameUp 0 {k} ck)))
        | #shiftUp 0 (ct (shiftNameUp 0 (shiftNameUp 0 k)) (‚Üí#shiftNameUp 0 {shiftNameUp 0 k} (‚Üí#shiftNameUp 0 {k} ck)))
        | #shiftUp 0 (ct (shiftNameUp 0 (shiftNameUp 0 k)) (‚Üí#shiftNameUp 0 {shiftNameUp 0 k} (‚Üí#shiftNameUp 0 {k} ck)))
        | #shiftUp 0 (ct (shiftNameUp 0 (shiftNameUp 0 k)) (‚Üí#shiftNameUp 0 {shiftNameUp 0 k} (‚Üí#shiftNameUp 0 {k} ck)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 8 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #subv 2 (shiftNameUp 0 k) (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF)
        | #subv 10 (shiftNameUp 0 (shiftNameUp 0 k)) (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftDown 2 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftDown 3 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftDown 5 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftDown 7 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftDown 10 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
  = refl


sub-ŒΩloopF‚â° : (F k f : Term) (cF : # F) (ck : # k) (cf : # f)
             ‚Üí sub f (ŒΩloopF F (loop F) k (VAR 0))
                ‚â° ŒΩloopF F (loop F) k f
sub-ŒΩloopF‚â° F k f cF ck cf
  rewrite #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 3 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 5 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 1 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 3 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 5 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 8 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 0 (ct (shiftNameUp 0 (shiftNameUp 0 f)) (‚Üí#shiftNameUp 0 {shiftNameUp 0 f} (‚Üí#shiftNameUp 0 {f} cf)))
        | #subv 1 (shiftNameUp 0 f) (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF)
        | #subv 2 (shiftNameUp 0 f) (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck)
        | #subv 4 (shiftNameUp 0 f) (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck)
        | #subv 6 (shiftNameUp 0 f) (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck)
        | #subv 9 (shiftNameUp 0 (shiftNameUp 0 f)) (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftDown 1 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftDown 2 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftDown 4 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftDown 6 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftDown 4 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftDown 6 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftDown 9 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
  = refl


loopName+ : (w : ùïé¬∑) (F k f : Term) ‚Üí Name
loopName+ w F k f = newChoiceT+ w (ŒΩloopFB F (loop F) k f)


loopName : (w : ùïé¬∑) (F k f : Term) ‚Üí Name
loopName w F k f = newChoiceT w (ŒΩloopFB F (loop F) k f)


#loopName+ : (w : ùïé¬∑) (F k f : CTerm) ‚Üí Name
#loopName+ w F k f = newChoiceT+ w ‚åú #ŒΩloopFB F (#loop F) k f ‚åù


#loopName : (w : ùïé¬∑) (F k f : CTerm) ‚Üí Name
#loopName w F k f = newChoiceT w ‚åú #ŒΩloopFB F (#loop F) k f ‚åù


loopùïé : (w : ùïé¬∑) (F k f : Term) ‚Üí ùïé¬∑
loopùïé w F k f = startNewChoiceT Res‚ä§ w (ŒΩloopFB F (loop F) k f)


#loopùïé : (w : ùïé¬∑) (F k f : CTerm) ‚Üí ùïé¬∑
#loopùïé w F k f = startNewChoiceT Res‚ä§ w ‚åú #ŒΩloopFB F (#loop F) k f ‚åù


loopùïé0 : (w : ùïé¬∑) (F k f : Term) ‚Üí ùïé¬∑
loopùïé0 w F k f = chooseT (loopName w F k f) (loopùïé w F k f) N0


#loopùïé0 : (w : ùïé¬∑) (F k f : CTerm) ‚Üí ùïé¬∑
#loopùïé0 w F k f = chooseT (#loopName w F k f) (#loopùïé w F k f) N0


renn-ŒΩloopFB : (w : ùïé¬∑) (r : Name) (F k f : Term) (ck : # k) (cf : # f) (cF : # F)
               ‚Üí shiftNameDown 0 (renn 0 (suc r) (ŒΩloopFB F (loop F) k f))
                  ‚â° loopF r F (loop F) k f
renn-ŒΩloopFB w r F k f ck cf cF
  rewrite #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 3 (ct f cf)
        | #shiftUp 5 (ct f cf)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 1 (ct k ck)
        | #shiftUp 3 (ct k ck)
        | #shiftUp 5 (ct k ck)
        | #shiftUp 0 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 4 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 8 (ct (shiftNameUp 0 F) (‚Üí#shiftNameUp 0 {F} cF))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 3 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 5 (ct (shiftNameUp 0 f) (‚Üí#shiftNameUp 0 {f} cf))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 0 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 1 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 3 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 5 (ct (shiftNameUp 0 k) (‚Üí#shiftNameUp 0 {k} ck))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 4 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | #shiftUp 8 (ct (shiftNameUp 1 (shiftNameUp 0 F)) (‚Üí#shiftNameUp 1 {shiftNameUp 0 F} (‚Üí#shiftNameUp 0 {F} cF)))
        | renn-shiftNameUp 0 (suc r) F
        | renn-shiftNameUp 0 (suc r) f
        | renn-shiftNameUp 0 (suc r) k
        | renn-shiftNameUp 1 (suc (suc r)) (shiftNameUp 0 F)
        | shiftNameDownUp 0 F
        | shiftNameDownUp 0 f
        | shiftNameDownUp 0 k
        | shiftNameDownUp 1 (shiftNameUp 0 F)
  = refl


APPLY-loop‚áì! : (F k f : Term) (w : ùïé¬∑) (cF : # F) (ck : # k) (cf : # f)
                ‚Üí APPLY2 (loop F) k f ‚áì loopF (loopName w F k f) F (loop F) k f from w to loopùïé w F k f
APPLY-loop‚áì! F k f w cF ck cf =
  step-‚áì-from-to-trans
    {w} {w} {loopùïé w F k f}
    {APPLY2 (loop F) k f}
    {APPLY2 (LAMBDA (LAMBDA (ŒΩloopF F (loop F) (VAR 1) (VAR 0)))) k f}
    {loopF r F (loop F) k f}
    c1
    (step-‚áì-from-to-trans
       {w} {w} {loopùïé w F k f}
       {APPLY2 (LAMBDA (LAMBDA (ŒΩloopF F (loop F) (VAR 1) (VAR 0)))) k f}
       {APPLY (LAMBDA (ŒΩloopF F (loop F) k (VAR 0))) f}
       {loopF r F (loop F) k f}
       c2
       (step-‚áì-from-to-trans
          {w} {w} {loopùïé w F k f}
          {APPLY (LAMBDA (ŒΩloopF F (loop F) k (VAR 0))) f}
          {ŒΩloopF F (loop F) k f}
          {loopF r F (loop F) k f}
          c3
          (step‚Üí‚áì c4)))
  where
    r+ : Name
    r+ = loopName+ w F k f

    r : Name
    r = loopName w F k f

    c1 : ret (APPLY2 (sub (loop F) (LAMBDA (LAMBDA (ŒΩloopF (shiftUp 0 (shiftUp 0 (shiftUp 0 F))) (VAR 2) (VAR 1) (VAR 0))))) k f) w
         ‚â° just (APPLY2 (LAMBDA (LAMBDA (ŒΩloopF F (loop F) (VAR 1) (VAR 0)))) k f , w)
    c1 rewrite sub-LAMBDA-LAMBDA-ŒΩloopF‚â° F cF = refl

    c2 : ret (APPLY (sub k (LAMBDA (ŒΩloopF F (loop F) (VAR 1) (VAR 0)))) f) w
         ‚â° just (APPLY (LAMBDA (ŒΩloopF F (loop F) k (VAR 0))) f , w)
    c2 rewrite sub-LAMBDA-ŒΩloopF‚â° F k cF ck = refl

    c3 : ret (sub f (ŒΩloopF F (loop F) k (VAR 0))) w
         ‚â° just (ŒΩloopF F (loop F) k f , w)
    c3 rewrite sub-ŒΩloopF‚â° F k f cF ck cf = refl

    c4 : ret (shiftNameDown 0 (renn 0 r+ (ŒΩloopFB F (loop F) k f))) (loopùïé w F k f)
         ‚â° just (loopF r F (loop F) k f , loopùïé w F k f)
    c4 = ‚â°just (‚â°pair (renn-ŒΩloopFB w r F k f ck cf cF) refl)


#APPLY-#loop#‚áì1 : (F k f : CTerm) (w : ùïé¬∑)
                   ‚Üí #APPLY2 (#loop F) k f #‚áì #loopF (#loopName w F k f) F (#loop F) k f from w to #loopùïé w F k f
#APPLY-#loop#‚áì1 F k f w =
  APPLY-loop‚áì! ‚åú F ‚åù ‚åú k ‚åù ‚åú f ‚åù w (CTerm.closed F) (CTerm.closed k) (CTerm.closed f)


#loopF#‚áì#loopA : (r : Name) (F R k f : CTerm) (w : ùïé¬∑)
                 ‚Üí #loopF r F R k f #‚áì #loopA r F R k f from w to chooseT r w N0
#loopF#‚áì#loopA r F R k f w =
  step-‚áì-from-to-trans
    {w} {chooseT r w N0} {chooseT r w N0}
    {loopF r ‚åú F ‚åù ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù}
    {SEQ AX (loopA r ‚åú F ‚åù ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù)}
    {loopA r ‚åú F ‚åù ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù}
    refl
    (SEQ-AX‚áì‚ÇÅfrom-to {chooseT r w N0} {loopA r ‚åú F ‚åù ‚åú R ‚åù ‚åú k ‚åù ‚åú f ‚åù}
                     (CTerm.closed (#loopA r F R k f)))


#APPLY-#loop#‚áì2 : (F k f : CTerm) (w : ùïé¬∑)
                  ‚Üí #APPLY2 (#loop F) k f #‚áì #loopA (#loopName w F k f) F (#loop F) k f from w to (#loopùïé0 w F k f)
#APPLY-#loop#‚áì2 F k f w =
  ‚áì-trans‚ÇÇ {w} {#loopùïé w F k f} {#loopùïé0 w F k f}
           {APPLY2 (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù}
           {loopF r ‚åú F ‚åù (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù}
           {loopA r ‚åú F ‚åù (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù}
           (#APPLY-#loop#‚áì1 F k f w)
           (#loopF#‚áì#loopA r F (#loop F) k f (#loopùïé w F k f))
  where
    r : Name
    r = #loopName w F k f


{--
sub-genericI : (r : Name) (i a b : Term) (ci : # i) (ca : # a) (cb : # b)
               ‚Üí sub i (genericI r a b (VAR 0)) ‚â° genericI r a b i
sub-genericI r i a b ci ca cb
  rewrite #shiftUp 0 (ct i ci)
        | #shiftDown 0 (ct i ci)
        | #subv 0 i a ca
        | #shiftDown 0 (ct a ca)
        | #shiftUp 0 (ct i ci)
        | #shiftDown 1 (ct i ci)
        | #shiftUp 0 (ct b cb)
        | #subv 1 i b cb
        | #shiftDown 1 (ct b cb) =
  ‚â°LET (‚â°IFLT refl refl refl refl) (‚â°APPLY refl refl)
--}


{--
#APPLY-#generic‚áì : (r : Name) (l i : CTerm) (w : ùïé¬∑)
                   ‚Üí #APPLY (#generic r l) i #‚áì #genericI r (#FST l) (#SND l) i from w to w
#APPLY-#generic‚áì r l i w =
  step-‚áì-from-to-trans
    {w} {w} {w}
    {APPLY (generic r ‚åú l ‚åù) ‚åú i ‚åù}
    {genericI r (FST ‚åú l ‚åù) (SND ‚åú l ‚åù) ‚åú i ‚åù}
    {genericI r (FST ‚åú l ‚åù) (SND ‚åú l ‚åù) ‚åú i ‚åù}
    c
    (0 , refl)
  where
    c : ret (sub ‚åú i ‚åù (genericI r (FST (shiftUp 0 ‚åú l ‚åù)) (SND (shiftUp 0 ‚åú l ‚åù)) (VAR 0))) w
        ‚â° just (genericI r (FST ‚åú l ‚åù) (SND ‚åú l ‚åù) ‚åú i ‚åù , w)
    c rewrite sub-genericI r ‚åú i ‚åù (FST (shiftUp 0 ‚åú l ‚åù)) (SND (shiftUp 0 ‚åú l ‚åù)) (CTerm.closed i) (#FST-shiftUp l) (#SND-shiftUp l)
            | #shiftUp 0 l
            | #shiftUp 0 l = refl
--}


ùïé< : (r : Name) (n : ‚Ñï) (w w1 w2 : ùïé¬∑) ‚Üí ùïé¬∑
ùïé< r n w w1 w2 with getT 0 r w
... | just u with is-NUM u
... |    inj‚ÇÅ (m , q) with m <? n
... |       yes p = w2
... |       no p = w1
ùïé< r n w w1 w2 | just u | inj‚ÇÇ q = w1
ùïé< r n w w1 w2 | nothing = w1


uùïé : (r : Name) (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ùïé¬∑
uùïé r n w = ùïé< r n w w (chooseT r w (NUM n))


{--
IFLT‚áìùïé< : {w w1 w2 : ùïé¬∑} {a b c : Term} {n : ‚Ñï}
           ‚Üí a ‚áì c from w to w1
           ‚Üí b ‚áì c from w to w2
           ‚Üí IFLT (NUM n) (NUM m) a b ‚áì c from w to ùïé< n m w w1 w2
IFLT‚áìùïé< {w} {w1} {w2} {a} {b} {c} {n} {m} c1 c2 with n <? m
... | yes p = step-‚áì-from-to-trans {w} {w} {w1} {IFLT (NUM n) (NUM m) a b} {a} {c} comp c1
  where
    comp : step (IFLT (NUM n) (NUM m) a b) w ‚â° just (a , w)
    comp with n <? m
    ... | yes q = refl
    ... | no q = ‚ä•-elim (q p)
... | no p = step-‚áì-from-to-trans {w} {w} {w2} {IFLT (NUM n) (NUM m) a b} {b} {c} comp c2
  where
    comp : step (IFLT (NUM n) (NUM m) a b) w ‚â° just (b , w)
    comp with n <? m
    ... | yes q = ‚ä•-elim (p q)
    ... | no q = refl


IFLT-NUM-AX-CHOOSE‚áì : (r : Name) (n m : ‚Ñï) (w : ùïé¬∑)
                      ‚Üí IFLT (NUM n) (NUM m) AX (set‚ä• r) ‚áì AX from w to uùïé r n m w
IFLT-NUM-AX-CHOOSE‚áì r n m w =
  IFLT‚áìùïé<
    {w} {w} {chooseT r w BFALSE} {AX} {set‚ä• r} {AX} {n} {m}
    (‚áì!-refl AX w)
    (1 , refl)
--}


updBodyL : (name : Name) (a f : Term) ‚Üí Term
updBodyL name a f = LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))


APPLY-upd‚áì : (r : Name) (w : ùïé¬∑) (f i : Term) (cf : # f)
             ‚Üí APPLY (upd r f) i ‚áì updBodyL r i f from w to w
APPLY-upd‚áì r w f i cf = 1 , ‚â°pair c refl
  where
    c : sub i (updBodyL r (VAR 0) f) ‚â° updBodyL r i f
    c rewrite #shiftUp 0 (ct f cf)
            | #subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 i))) f cf
            | #shiftDown 2 (ct f cf)
            | shiftDownUp i 0 = refl


updBody-LET‚áì : (r : Name) (w : ùïé¬∑) (f : Term) (n : ‚Ñï) (cf : # f)
               ‚Üí updBodyL r (NUM n) f ‚áì SEQ (updGt r (NUM n)) (APPLY f (NUM n)) from w to w
updBody-LET‚áì r w f n cf = 1 , ‚â°pair c refl
  where
    c : sub (NUM n) (SEQ (updGt r (VAR 0)) (APPLY f (VAR 0))) ‚â° SEQ (updGt r (NUM n)) (APPLY f (NUM n))
    c rewrite #shiftUp 0 (ct f cf)
            | #subv 1 (NUM n) f cf
            | #shiftDown 1 (ct f cf) = refl


SEQ-updtGt-step : (r : Name) (w : ùïé¬∑) (n m : ‚Ñï) (t : Term)
                  ‚Üí getT 0 r w ‚â° just (NUM m)
                  ‚Üí compatible¬∑ r w Res‚ä§
                  ‚Üí Œ£ ‚Ñï (Œª k ‚Üí steps (suc (suc k)) (SEQ (updGt r (NUM n)) t , w) ‚â° (SEQ AX t , uùïé r n w))
SEQ-updtGt-step r w n m t gt0 compat with getT 0 r w
... | just u with is-NUM u
... |    inj‚ÇÅ (m , q) with m <? n
... |       yes p = 1 , refl
... |       no p = 0 , refl
SEQ-updtGt-step r w n m t gt0 compat | just u | inj‚ÇÇ q = ‚ä•-elim (q m (just-inj gt0))
SEQ-updtGt-step r w n m t gt0 compat | nothing = ‚ä•-elim (¬¨just‚â°nothing (sym gt0))


SEQ-updtGt‚áì‚ÇÅ : (cn : c‚Ñï) (r : Name) (w : ùïé¬∑) (n : ‚Ñï) (t : Term)
               ‚Üí compatible¬∑ r w Res‚ä§
               ‚Üí SEQ (updGt r (NUM n)) t ‚áì SEQ AX t from w to uùïé r n w
SEQ-updtGt‚áì‚ÇÅ cn r w n t compat = suc (suc (fst c)) , snd c
  where
    g : Œ£ ‚Ñï (Œª m ‚Üí getT 0 r w ‚â° just (NUM m))
    g = lower (cn r w compat w (‚äë-refl¬∑ w))

    c : Œ£ ‚Ñï (Œª k ‚Üí steps (suc (suc k)) (SEQ (updGt r (NUM n)) t , w) ‚â° (SEQ AX t , uùïé r n w))
    c = SEQ-updtGt-step r w n (fst g) t (snd g) compat


SEQ-updtGt‚áì : (cn : c‚Ñï) (r : Name) (w : ùïé¬∑) (n : ‚Ñï) (t : Term) (clt : # t)
               ‚Üí compatible¬∑ r w Res‚ä§
               ‚Üí SEQ (updGt r (NUM n)) t ‚áì t from w to uùïé r n w
SEQ-updtGt‚áì cn r w n t clt compat =
  ‚áì-trans‚ÇÇ
    {w} {uùïé r n w} {uùïé r n w}
    {SEQ (updGt r (NUM n)) t} {SEQ AX t} {t}
    (SEQ-updtGt‚áì‚ÇÅ cn r w n t compat)
    (SEQ-AX‚áì‚ÇÅfrom-to {uùïé r n w} {t} clt)


updBodyL‚áìAPPLY : (cn : c‚Ñï) (r : Name) (i f : Term) (w w' : ùïé¬∑) (n : ‚Ñï) (cf : # f)
                 ‚Üí compatible¬∑ r w Res‚ä§
                 ‚Üí i ‚áì NUM n from w to w'
                 ‚Üí updBodyL r i f ‚áì APPLY f (NUM n) from w to uùïé r n w'
updBodyL‚áìAPPLY cn r i f w w' n cf compat ci =
  ‚áì-trans‚ÇÇ
    {w} {w'} {uùïé r n w'}
    {updBodyL r i f}
    {updBodyL r (NUM n) f}
    {APPLY f (NUM n)}
    (LET‚áì‚ÇÅ {w} {w'} {i} {NUM n} {SEQ (updGt r (VAR 0)) (APPLY f (VAR 0))} ci)
    (‚áì-trans‚ÇÇ
      {w'} {w'} {uùïé r n w'}
      {updBodyL r (NUM n) f}
      {SEQ (updGt r (NUM n)) (APPLY f (NUM n))}
      {APPLY f (NUM n)}
      (updBody-LET‚áì r w' f n cf)
      (SEQ-updtGt‚áì cn r w' n (APPLY f (NUM n)) (CTerm.closed (#APPLY (ct f cf) (#NUM n))) (‚äë-compatible¬∑ e1 compat)))
  where
    e1 : w ‚äë¬∑ w'
    e1 = ‚áìfrom-to‚Üí‚äë {w} {w'} {i} {NUM n} ci


APPLY-upd‚áì2 : (cn : c‚Ñï) (r : Name) (i f : Term) (w w' : ùïé¬∑) (n : ‚Ñï) (cf : # f)
               ‚Üí compatible¬∑ r w Res‚ä§
               ‚Üí i ‚áì NUM n from w to w'
               ‚Üí APPLY (upd r f) i ‚áì APPLY f (NUM n) from w to uùïé r n w'
APPLY-upd‚áì2 cn r i f w w' n cf compat ci =
  ‚áì-trans‚ÇÇ
    {w} {w} {uùïé r n w'}
    {APPLY (upd r f) i}
    {LET i (SEQ (updGt r (VAR 0)) (APPLY f (VAR 0)))}
    {APPLY f (NUM n)}
    (APPLY-upd‚áì r w f i cf)
    (updBodyL‚áìAPPLY cn r i f w w' n cf compat ci)


#APPLY-#upd‚áì2 : (cn : c‚Ñï) (r : Name) (i f : CTerm) (w : ùïé¬∑) (n : ‚Ñï)
                ‚Üí compatible¬∑ r w Res‚ä§
                ‚Üí i #‚áõ #NUM n at w
                ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #APPLY (#upd r f) i #‚áì #APPLY f (#NUM n) from w to uùïé r n w')
#APPLY-#upd‚áì2 cn r i f w n compat ci =
  fst ci' , APPLY-upd‚áì2 cn r ‚åú i ‚åù ‚åú f ‚åù w (fst ci') n (CTerm.closed f) compat (snd ci')
  where
    ci' : Œ£ ùïé¬∑ (Œª w' ‚Üí ‚åú i ‚åù ‚áì NUM n from w to w')
    ci' = ‚áì‚Üífrom-to (lower (ci w (‚äë-refl¬∑ w)))


#APPLY-#upd‚áõ : (cn : c‚Ñï) (r : Name) (i f : CTerm) (w : ùïé¬∑) (n : ‚Ñï)
                ‚Üí compatible¬∑ r w Res‚ä§
                ‚Üí i #‚áõ #NUM n at w
                ‚Üí #APPLY (#upd r f) i #‚áõ #APPLY f (#NUM n) at w
#APPLY-#upd‚áõ cn r i f w n compat ci w1 e1 =
  lift (‚áì-from-to‚Üí‚áì {w1} {uùïé r n (fst c)} (snd c))
  where
    c : Œ£ ùïé¬∑ (Œª w' ‚Üí #APPLY (#upd r f) i #‚áì #APPLY f (#NUM n) from w1 to uùïé r n w')
    c = #APPLY-#upd‚áì2 cn r i f w1 n (‚äë-compatible¬∑ e1 compat) (‚àÄùïé-mon e1 ci)


{--
equalInType i w2 #NAT (#APPLY g1 i) (#APPLY g2 i)
a1 #‚áõ #APPLY f1 i at w
f1 #‚áõ g1 at w
equalInType i w2 #NAT a1 a2
--}


type-preserves-#‚áõ : (T : CTerm) ‚Üí Set(lsuc(L))
type-preserves-#‚áõ T =
  (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
  ‚Üí a‚ÇÅ #‚áõ a‚ÇÇ at w
  ‚Üí b‚ÇÅ #‚áõ b‚ÇÇ at w
  ‚Üí equalInType i w T a‚ÇÇ b‚ÇÇ
  ‚Üí equalInType i w T a‚ÇÅ b‚ÇÅ


upd‚ààBAIRE : (cn : c‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (r : Name) (T f : CTerm)
             ‚Üí compatible¬∑ r w Res‚ä§
             ‚Üí type-preserves-#‚áõ T
             ‚Üí isType i w T
             ‚Üí ‚ààType i w (#FUN #NAT T) f
             ‚Üí ‚ààType i w (#FUN #NAT T) (#upd r f)
upd‚ààBAIRE cn i w r T f compat pres tyT f‚àà =
  equalInType-FUN eqTypesNAT tyT aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' T (#APPLY (#upd r f) a‚ÇÅ) (#APPLY (#upd r f) a‚ÇÇ))
    aw1 w1 e1 a‚ÇÅ a‚ÇÇ ea = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw p2)
      where
        p2 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí NATeq w' a‚ÇÅ a‚ÇÇ)
        p2 = equalInType-NAT‚Üí i w1 a‚ÇÅ a‚ÇÇ ea

        aw : ‚àÄùïé w1 (Œª w' e' ‚Üí NATeq w' a‚ÇÅ a‚ÇÇ ‚Üí equalInType i w' T (#APPLY (#upd r f) a‚ÇÅ) (#APPLY (#upd r f) a‚ÇÇ))
        aw w2 e2 (k , c1 , c2) =
          pres i w2 (#APPLY (#upd r f) a‚ÇÅ) (#APPLY f (#NUM k)) (#APPLY (#upd r f) a‚ÇÇ) (#APPLY f (#NUM k))
               (#APPLY-#upd‚áõ cn r a‚ÇÅ f w2 k (‚äë-compatible¬∑ (‚äë-trans¬∑ e1 e2) compat) c1)
               (#APPLY-#upd‚áõ cn r a‚ÇÇ f w2 k (‚äë-compatible¬∑ (‚äë-trans¬∑ e1 e2) compat) c2)
               (equalInType-FUN‚Üí f‚àà w2 (‚äë-trans¬∑ e1 e2) (#NUM k) (#NUM k) (NUM-equalInType-NAT i w2 k))


APPLY-upd‚ààNAT : (cn : c‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (r : Name) (T F f : CTerm)
                 ‚Üí compatible¬∑ r w Res‚ä§
                 ‚Üí type-preserves-#‚áõ T
                 ‚Üí isType i w T
                 ‚Üí ‚ààType i w (#FunBar T) F
                 ‚Üí ‚ààType i w (#NAT‚ÜíT T) f
                 ‚Üí ‚ààType i w #NAT (#APPLY F (#upd r f))
APPLY-upd‚ààNAT cn i w r T F f compat pres tyT F‚àà f‚àà =
  F‚àà' w (‚äë-refl¬∑ w) (#upd r f) (#upd r f) (upd‚ààBAIRE cn i w r T f compat pres tyT f‚àà)
  where
    F‚àà' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#FUN #NAT T) a‚ÇÅ a‚ÇÇ ‚Üí equalInType i w' #NAT (#APPLY F a‚ÇÅ) (#APPLY F a‚ÇÇ))
    F‚àà' = equalInType-FUN‚Üí F‚àà


INL‚ààIndBarB : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí ‚ààType i w #IndBarB (#INL (#NUM k))
INL‚ààIndBarB i w k =
  ‚ÜíequalInType-UNION‚ÇÄ!
    eqTypesNAT
    (eqTypesTRUE {w} {i})
    (Mod.‚àÄùïé-‚ñ° M (Œª w' e ‚Üí #NUM k , #NUM k , inj‚ÇÅ (#‚áõ!-refl {w'} {#INL (#NUM k)} ,
                                                    #‚áõ!-refl {w'} {#INL (#NUM k)} ,
                                                    NUM-equalInType-NAT i w' k)))


-- MOVE to terms3
‚â°NOWRITEMOD : {a b : Term} ‚Üí a ‚â° b ‚Üí NOWRITEMOD a ‚â° NOWRITEMOD b
‚â°NOWRITEMOD {a} {b} e rewrite e = refl


‚â°NOREADMOD : {a b : Term} ‚Üí a ‚â° b ‚Üí NOREADMOD a ‚â° NOREADMOD b
‚â°NOREADMOD {a} {b} e rewrite e = refl


INR‚ààIndBarB : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType i w #IndBarB (#INR #AX)
INR‚ààIndBarB i w =
  ‚ÜíequalInType-UNION‚ÇÄ!
    eqTypesNAT
    (eqTypesTRUE {w} {i})
    (Mod.‚àÄùïé-‚ñ° M (Œª w' e ‚Üí #AX , #AX , inj‚ÇÇ (#‚áõ!-refl {w'} {#INR #AX} ,
                                            #‚áõ!-refl {w'} {#INR #AX} ,
                                            ‚ÜíequalInType-TRUE i {w'} {#AX} {#AX})))


sub0-IndBarC‚â° : (T a : CTerm) ‚Üí sub0 a (#IndBarC T) ‚â° #DECIDE a #[0]VOID (#[0]shiftUp0 (#NOWRITEMOD T))
sub0-IndBarC‚â° T a = CTerm‚â° (‚â°DECIDE x refl (‚â°NOWRITEMOD y))
  where
    x : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    x rewrite #shiftUp 0 a | #shiftDown 0 a = refl

    y : shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)) (shiftUp 0 (shiftUp 0 ‚åú T ‚åù))) ‚â° shiftUp 0 ‚åú T ‚åù
    y rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 T | #shiftUp 0 T
            | #subv 1 ‚åú a ‚åù ‚åú T ‚åù (CTerm.closed T) | #shiftDown 1 T = refl


#DECIDE-INL-VOID‚áì : (w : ùïé¬∑) (a : CTerm) (b : CTerm0) ‚Üí #DECIDE (#INL a) #[0]VOID b #‚áì #VOID from w to w
#DECIDE-INL-VOID‚áì w a b = 1 , refl


#DECIDE-INL-VOID‚áõ : (w : ùïé¬∑) (a : CTerm) (b : CTerm0) ‚Üí #DECIDE (#INL a) #[0]VOID b #‚áõ! #VOID at w
#DECIDE-INL-VOID‚áõ w a b w1 e1 = lift (#DECIDE-INL-VOID‚áì w1 a b)


#DECIDE‚áõINL-VOID‚áõ : (w : ùïé¬∑) (x a : CTerm) (b : CTerm0)
                     ‚Üí x #‚áõ #INL a at w
                     ‚Üí #DECIDE x #[0]VOID b #‚áõ #VOID at w
#DECIDE‚áõINL-VOID‚áõ w x a b comp =
  #‚áõ-trans
    {w} {#DECIDE x #[0]VOID b} {#DECIDE (#INL a) #[0]VOID b} {#VOID}
    (DECIDE‚áõ‚ÇÅ {w} {‚åú x ‚åù} {‚åú #INL a ‚åù} {‚åú #[0]VOID ‚åù} {‚åú b ‚åù} comp)
    (#‚áõ!-#‚áõ {w} {#DECIDE (#INL a) #[0]VOID b} {#VOID} (#DECIDE-INL-VOID‚áõ w a b))


#DECIDE‚áõINL-VOID‚áõ! : (w : ùïé¬∑) (x a : CTerm) (b : CTerm0)
                       ‚Üí x #‚áõ! #INL a at w
                       ‚Üí #DECIDE x #[0]VOID b #‚áõ! #VOID at w
#DECIDE‚áõINL-VOID‚áõ! w x a b comp =
  #‚áõ!-trans
    {w} {#DECIDE x #[0]VOID b} {#DECIDE (#INL a) #[0]VOID b} {#VOID}
    (DECIDE‚áõ!‚ÇÅ {w} {‚åú x ‚åù} {‚åú #INL a ‚åù} {‚åú #[0]VOID ‚åù} {‚åú b ‚åù} comp)
    (#DECIDE-INL-VOID‚áõ w a b)


#DECIDE-INR‚áì : (w : ùïé¬∑) (T a : CTerm) (b : CTerm0) ‚Üí #DECIDE (#INR a) b (#[0]shiftUp0 (#NOWRITEMOD T)) #‚áì #NOWRITEMOD T from w to w
#DECIDE-INR‚áì w T a b = 1 , ‚â°pair c refl
  where
    c : sub ‚åú a ‚åù (NOWRITEMOD (shiftUp 0 ‚åú T ‚åù)) ‚â° NOWRITEMOD ‚åú T ‚åù
    c rewrite #shiftUp 0 T
            | #shiftUp 0 a
            | #subv 0 ‚åú a ‚åù ‚åú T ‚åù (CTerm.closed T)
            | #shiftDown 0 T = refl


#DECIDE-INR‚áõ : (w : ùïé¬∑) (T a : CTerm) (b : CTerm0) ‚Üí #DECIDE (#INR a) b (#[0]shiftUp0 (#NOWRITEMOD T)) #‚áõ! #NOWRITEMOD T at w
#DECIDE-INR‚áõ w T a b w1 e1 = lift (#DECIDE-INR‚áì w1 T a b)


#DECIDE‚áõINR‚áõ : (w : ùïé¬∑) (T x a : CTerm) (b : CTerm0)
                     ‚Üí x #‚áõ #INR a at w
                     ‚Üí #DECIDE x b (#[0]shiftUp0 (#NOWRITEMOD T)) #‚áõ #NOWRITEMOD T at w
#DECIDE‚áõINR‚áõ w T x a b comp =
  #‚áõ-trans
    {w} {#DECIDE x b (#[0]shiftUp0 (#NOWRITEMOD T))} {#DECIDE (#INR a) b (#[0]shiftUp0 (#NOWRITEMOD T))} {#NOWRITEMOD T}
    (DECIDE‚áõ‚ÇÅ {w} {‚åú x ‚åù} {‚åú #INR a ‚åù} {‚åú b ‚åù} {‚åú #[0]shiftUp0 (#NOWRITEMOD T) ‚åù} comp)
    (#‚áõ!-#‚áõ {w} {#DECIDE (#INR a) b (#[0]shiftUp0 (#NOWRITEMOD T))} {#NOWRITEMOD T} (#DECIDE-INR‚áõ w T a b))


#DECIDE‚áõINR‚áõ! : (w : ùïé¬∑) (T x a : CTerm) (b : CTerm0)
                      ‚Üí x #‚áõ! #INR a at w
                      ‚Üí #DECIDE x b (#[0]shiftUp0 (#NOWRITEMOD T)) #‚áõ! #NOWRITEMOD T at w
#DECIDE‚áõINR‚áõ! w T x a b comp =
  #‚áõ!-trans
    {w} {#DECIDE x b (#[0]shiftUp0 (#NOWRITEMOD T))} {#DECIDE (#INR a) b (#[0]shiftUp0 (#NOWRITEMOD T))} {#NOWRITEMOD T}
    (DECIDE‚áõ!‚ÇÅ {w} {‚åú x ‚åù} {‚åú #INR a ‚åù} {‚åú b ‚åù} {‚åú #[0]shiftUp0 (#NOWRITEMOD T) ‚åù} comp)
    (#DECIDE-INR‚áõ w T a b)


equalInType-#‚áõ : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                  ‚Üí T #‚áõ! U at w
                  ‚Üí equalInType i w T a b
                  ‚Üí equalInType i w U a b
equalInType-#‚áõ {i} {w} {T} {U} {a} {b} comp e =
  TSext-equalTypes-equalInType
    i w T U a b
    (equalTypes-#‚áõ-left-right {i} {w} {T} {T} {U} {T} (#‚áõ!-refl {w} {T}) comp (fst e)) e


equalInType-DECIDE-INL-VOID‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b1 b2 : CTerm) (b : CTerm0)
                                ‚Üí equalInType i w (#DECIDE (#INL a) #[0]VOID b) b1 b2
                                ‚Üí ‚ä•
equalInType-DECIDE-INL-VOID‚Üí i w a b1 b2 b e =
  ¬¨equalInType-FALSE {w} {i} {b1} {b2} (equalInType-#‚áõ (#DECIDE-INL-VOID‚áõ w a b) e)


equalInType-DECIDE-INR‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (T a b1 b2 : CTerm) (b : CTerm0)
                                ‚Üí equalInType i w (#DECIDE (#INR a) b (#[0]shiftUp0 (#NOWRITEMOD T))) b1 b2
                                ‚Üí equalInType i w (#NOWRITEMOD T) b1 b2
equalInType-DECIDE-INR‚Üí i w T a b1 b2 b e =
  equalInType-#‚áõ (#DECIDE-INR‚áõ w T a b) e


INL‚Üí!‚ààType-IndBarC : (i : ‚Ñï) (w : ùïé¬∑) (T x a b : CTerm)
                     ‚Üí x #‚áõ! #INL a at w
                     ‚Üí ¬¨ ‚ààType i w (sub0 x (#IndBarC T)) b
INL‚Üí!‚ààType-IndBarC i w T x a b comp j rewrite sub0-IndBarC‚â° T x =
  ¬¨equalInType-FALSE j1
  where
    j1 : ‚ààType i w #VOID b
    j1 = equalInType-#‚áõ (#DECIDE‚áõINL-VOID‚áõ! w x a (#[0]shiftUp0 (#NOWRITEMOD T)) comp) j


type-#‚áõ!-NUM : (P : ‚Ñï ‚Üí Set) (T : CTerm) ‚Üí Set(lsuc(L))
type-#‚áõ!-NUM P T =
  {i : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
  ‚Üí equalInType i w (#NOWRITEMOD T) a b
  ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ ‚Ñï (Œª n ‚Üí a #‚áõ! #NUM n at w' √ó b #‚áõ! #NUM n at w' √ó P n))


-- TODO: assume that T computes numbers within a certain range (i.e., using a predicate on numbers)
INR‚Üí!‚ààType-IndBarC : (i : ‚Ñï) (w : ùïé¬∑) (P : ‚Ñï ‚Üí Set) (T x a b : CTerm)
                     ‚Üí type-#‚áõ!-NUM P T
                     ‚Üí x #‚áõ! #INR a at w
                     ‚Üí ‚ààType i w (sub0 x (#IndBarC T)) b
                     ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ ‚Ñï (Œª n ‚Üí b #‚áõ! #NUM n at w' √ó P n))
INR‚Üí!‚ààType-IndBarC i w P T x a b tyn comp j rewrite sub0-IndBarC‚â° T x =
  Mod.‚àÄùïé-‚ñ°Func M aw (tyn j1)
  where
    j1 : ‚ààType i w (#NOWRITEMOD T) b
    j1 = equalInType-#‚áõ (#DECIDE‚áõINR‚áõ! w T x a #[0]VOID comp) j

    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ ‚Ñï (Œª n ‚Üí b #‚áõ! #NUM n at w' √ó b #‚áõ! #NUM n at w' √ó P n)
                        ‚Üí Œ£ ‚Ñï (Œª n ‚Üí b #‚áõ! #NUM n at w' √ó P n))
    aw w1 e1 (n , c1 , c2 , pn) = n , c1 , pn


‚ààType-IndBarB-IndBarC‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (P : ‚Ñï ‚Üí Set) (T b c : CTerm)
                           ‚Üí type-#‚áõ!-NUM P T
                           ‚Üí ‚ààType i w #IndBarB b
                           ‚Üí ‚ààType i w (sub0 b (#IndBarC T)) c
                           ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí b #‚áõ! #INR t at w') √ó Œ£ ‚Ñï (Œª n ‚Üí c #‚áõ! #NUM n at w' √ó P n))
‚ààType-IndBarB-IndBarC‚Üí i w P T b c tyn b‚àà c‚àà =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-UNION‚ÇÄ!‚Üí b‚àà))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNION‚ÇÄ!eq (equalInType i w' #NAT) (equalInType i w' #UNIT) w' b b
                        ‚Üí Mod.‚ñ° M w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª t ‚Üí b #‚áõ! #INR t at w'') √ó Œ£ ‚Ñï (Œª n ‚Üí c #‚áõ! #NUM n at w'' √ó P n)) e'))
    aw w1 e1 (x , y , inj‚ÇÅ (c1 , c2 , eqi)) = ‚ä•-elim (INL‚Üí!‚ààType-IndBarC i w1 T b x c c1 (equalInType-mon c‚àà w1 e1))
    aw w1 e1 (x , y , inj‚ÇÇ (c1 , c2 , eqi)) =
      Mod.‚àÄùïé-‚ñ°Func
        M
        (Œª w2 e2 (n , cn , pn) z ‚Üí (x , ‚àÄùïé-mon e2 c1) , (n , cn , pn))
        (INR‚Üí!‚ààType-IndBarC i w1 P T b x c tyn c1 (equalInType-mon c‚àà w1 e1))


sub-loopI‚â° : (r : Name) (R k f i : Term) (cR : # R) (ck : # k) (cf : # f)
             ‚Üí sub i (loopI r R k f (VAR 0))
                ‚â° loopI r R k f i
sub-loopI‚â° r R k f i cR ck cf
  rewrite #shiftUp 0 (ct R cR)
        | #shiftUp 0 (ct R cR)
        | #shiftUp 0 (ct R cR)
        | #shiftUp 2 (ct R cR)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 0 (ct k ck)
        | #shiftUp 2 (ct k ck)
        | #shiftUp 3 (ct k ck)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 0 (ct f cf)
        | #subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 i)))) R cR
        | #subv 4 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 i))))) k ck
        | #subv 4 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 i))))) f cf
        | #shiftDown 3 (ct R cR)
        | #shiftDown 3 (ct k ck)
        | #shiftDown 4 (ct k ck)
        | #shiftDown 4 (ct f cf)
        | #subv 2 i R cR
        | #subv 0 (shiftUp 0 i) k ck
        | #subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 i))) k ck
        | #shiftDown 0 (ct k ck)
        | #shiftDown 2 (ct k ck)
        | #shiftDown 2 (ct R cR)
        | shiftDownUp i 0
  = refl



loopB‚áìloopI : (w : ùïé¬∑) (r : Name) (i : ‚Ñï) (R k f : Term) (cR : # R) (ck : # k) (cf : # f)
              ‚Üí loopB r (NUM i) R k f ‚áì loopI r R k f (NUM i) from w to w
loopB‚áìloopI w r i R k f cR ck cf = 1 , ‚â°pair c refl
  where
    c : sub (NUM i) (loopI r (shiftUp 0 R) (shiftUp 0 k) (shiftUp 0 f) (VAR 0)) ‚â° loopI r R k f (NUM i)
    c rewrite #shiftUp 0 (ct R cR)
            | #shiftUp 0 (ct k ck)
            | sub-loopI‚â° r R k f (NUM i) cR ck cf
            | #shiftUp 0 (ct k ck)
            | #shiftUp 0 (ct k ck)
            | #shiftUp 0 (ct k ck)
            | #shiftUp 0 (ct k ck)
            | #shiftUp 2 (ct k ck)
            | #shiftUp 3 (ct k ck)
            | #shiftUp 0 (ct R cR)
            | #shiftUp 0 (ct R cR)
            | #shiftUp 0 (ct R cR)
            | #shiftUp 2 (ct R cR)
            | #shiftUp 0 (ct f cf)
            | #shiftUp 0 (ct f cf)
            | #shiftUp 0 (ct f cf)
            | #shiftUp 0 (ct f cf)
            | #shiftUp 0 (ct f cf)
            | #subv 0 (NUM i) k ck
            | #subv 2 (NUM i) k ck
            | #subv 4 (NUM i) k ck
            | #subv 4 (NUM i) f cf
            | #subv 3 (NUM i) R cR
            | #shiftDown 0 (ct k ck)
            | #shiftDown 2 (ct k ck)
            | #shiftDown 4 (ct k ck)
            | #shiftDown 4 (ct f cf)
            | #shiftDown 3 (ct R cR) = refl


shiftUp00 : (l : CTerm) ‚Üí shiftUp 0 (shiftUp 0 ‚åú l ‚åù) ‚â° ‚åú l ‚åù
shiftUp00 l rewrite #shiftUp 0 l | #shiftUp 0 l = refl


#loopA#‚áì#loopI : (r : Name) (F k f : CTerm) (i : ‚Ñï) (w w' : ùïé¬∑)
                 ‚Üí #APPLY F (#upd r f) #‚áì #NUM i from w to w'
                 ‚Üí #loopA r F (#loop F) k f #‚áì #loopI r (#loop F) k f i from w to w'
#loopA#‚áì#loopI r F k f i w w' c =
  ‚áì-trans‚ÇÇ
    {w} {w'} {w'} c2
    (loopB‚áìloopI
      w' r i (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù
      (CTerm.closed (#loop F)) (CTerm.closed k) (CTerm.closed f))
  where
    c0 : appUpd r ‚åú F ‚åù (shiftUp 0 (shiftUp 0 ‚åú f ‚åù)) ‚áì NUM i from w to w'
    c0 rewrite shiftUp00 f = c

    c2 : loopA r ‚åú F ‚åù (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù ‚áì loopB r (NUM i) (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù from w to w'
    c2 = LET‚áì‚ÇÅ {w} {w'} {appUpd r ‚åú F ‚åù (shiftUp 0 (shiftUp 0 ‚åú f ‚åù))} {NUM i} c0


#APPLY-#loop#‚áì3 : (F k f : CTerm) (i : ‚Ñï) (w w' : ùïé¬∑)
                  ‚Üí #APPLY F (#upd (#loopName w F k f) f) #‚áì #NUM i from #loopùïé0 w F k f to w'
                  ‚Üí #APPLY2 (#loop F) k f #‚áì #loopI (#loopName w F k f) (#loop F) k f i from w to w'
#APPLY-#loop#‚áì3 F k f i w w' c =
  ‚áì-trans‚ÇÇ
    {w} {#loopùïé0 w F k f} {w'}
    {APPLY2 (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù}
    {loopA r ‚åú F ‚åù (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù}
    {loopI r (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù (NUM i)}
    (#APPLY-#loop#‚áì2 F k f w)
    (#loopA#‚áì#loopI r F k f i (#loopùïé0 w F k f) w' c)
  where
    r : Name
    r = #loopName w F k f


#loopI‚áì#loopII : (w : ùïé¬∑) (r : Name ) (R k f : CTerm) (i : ‚Ñï)
                 ‚Üí #loopI r R k f i #‚áì #loopII r R k f i from w to w
#loopI‚áì#loopII w r R k f i = 1 , refl


#APPLY-#loop#‚áì4‚ÇÅ : (r : Name) (F k f : CTerm) (i : ‚Ñï) (w : ùïé¬∑) (m n : ‚Ñï)
                   ‚Üí getT 0 r w ‚â° just (NUM m)
                   ‚Üí k #‚áõ #NUM n at w
                   ‚Üí m < n
                   ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #loopI r (#loop F) k f i #‚áì #ETA (#NUM i) from w to w')
#APPLY-#loop#‚áì4‚ÇÅ r F k f i w m n g ck mn =
  fst c1 ,
  ‚áì-trans‚ÇÇ
    {w} {proj‚ÇÅ c1} {proj‚ÇÅ c1} c3
    (step‚Üí‚áì (IFLT-NUM‚áì< m n (fst c1) (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) mn))
  where
    c1 : Œ£ ùïé¬∑ (Œª w' ‚Üí k #‚áì #NUM n from w to w')
    c1 = #‚áì‚Üífrom-to {w} {k} {#NUM n} (lower (ck w (‚äë-refl¬∑ w)))

    c0 : steps 1 (get0 r , w) ‚â° (NUM m , w)
    c0 rewrite g = refl

    c2 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) k (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to w
    c2 = ‚áì-trans‚ÇÇ
           {w} {w} {w} (#loopI‚áì#loopII w r (#loop F) k f i)
           (IFLT-NUM-1st‚áì {get0 r} {NUM m} ‚åú k ‚åù (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) (1 , c0))

    c3 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) (#NUM n) (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to fst c1
    c3 = ‚áì-trans‚ÇÇ {w} {w} {fst c1} c2 (IFLT-NUM-2nd‚áì m {‚åú k ‚åù} {NUM n} (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) (snd c1))


#APPLY-#loop#‚áì4‚ÇÇ : (r : Name) (F k f : CTerm) (i : ‚Ñï) (w : ùïé¬∑) (m n : ‚Ñï)
                   ‚Üí getT 0 r w ‚â° just (NUM m)
                   ‚Üí k #‚áõ! #NUM n at w
                   ‚Üí m < n
                   ‚Üí #loopI r (#loop F) k f i #‚áì #ETA (#NUM i) from w to w
#APPLY-#loop#‚áì4‚ÇÇ r F k f i w m n g ck mn =
  ‚áì-trans‚ÇÇ
    {w} {w} {w} c3
    (step‚Üí‚áì (IFLT-NUM‚áì< m n w (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) mn))
  where
    c1 : k #‚áì #NUM n from w to w
    c1 = lower (ck w (‚äë-refl¬∑ w))

    c0 : steps 1 (get0 r , w) ‚â° (NUM m , w)
    c0 rewrite g = refl

    c2 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) k (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to w
    c2 = ‚áì-trans‚ÇÇ
           {w} {w} {w} (#loopI‚áì#loopII w r (#loop F) k f i)
           (IFLT-NUM-1st‚áì {get0 r} {NUM m} ‚åú k ‚åù (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) (1 , c0))

    c3 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) (#NUM n) (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to w
    c3 = ‚áì-trans‚ÇÇ {w} {w} {w} c2 (IFLT-NUM-2nd‚áì m {‚åú k ‚åù} {NUM n} (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) c1)


#APPLY-#loop#‚áì5‚ÇÅ : (r : Name) (F k f : CTerm) (i : ‚Ñï) (w : ùïé¬∑) (m n : ‚Ñï)
                   ‚Üí getT 0 r w ‚â° just (NUM m)
                   ‚Üí k #‚áõ #NUM n at w
                   ‚Üí ¬¨ m < n
                   ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #loopI r (#loop F) k f i #‚áì #DIGAMMA (#loopR (#loop F) k f) from w to w')
#APPLY-#loop#‚áì5‚ÇÅ r F k f i w m n g ck mn =
  fst c1 ,
  ‚áì-trans‚ÇÇ
    {w} {proj‚ÇÅ c1} {proj‚ÇÅ c1} c3
    (step‚Üí‚áì (IFLT-NUM‚áì¬¨< m n (fst c1) (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) mn))
  where
    c1 : Œ£ ùïé¬∑ (Œª w' ‚Üí k #‚áì #NUM n from w to w')
    c1 = #‚áì‚Üífrom-to {w} {k} {#NUM n} (lower (ck w (‚äë-refl¬∑ w)))

    c0 : steps 1 (get0 r , w) ‚â° (NUM m , w)
    c0 rewrite g = refl

    c2 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) k (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to w
    c2 = ‚áì-trans‚ÇÇ {w} {w} {w} (#loopI‚áì#loopII w r (#loop F) k f i)
           (IFLT-NUM-1st‚áì {get0 r} {NUM m} ‚åú k ‚åù (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) (1 , c0))

    c3 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) (#NUM n) (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to fst c1
    c3 = ‚áì-trans‚ÇÇ {w} {w} {fst c1} c2 (IFLT-NUM-2nd‚áì m {‚åú k ‚åù} {NUM n} (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) (snd c1))


#APPLY-#loop#‚áì5‚ÇÇ : (r : Name) (F k f : CTerm) (i : ‚Ñï) (w : ùïé¬∑) (m n : ‚Ñï)
                   ‚Üí getT 0 r w ‚â° just (NUM m)
                   ‚Üí k #‚áõ! #NUM n at w
                   ‚Üí ¬¨ m < n
                   ‚Üí #loopI r (#loop F) k f i #‚áì #DIGAMMA (#loopR (#loop F) k f) from w to w
#APPLY-#loop#‚áì5‚ÇÇ r F k f i w m n g ck mn =
  ‚áì-trans‚ÇÇ
    {w} {w} {w} c3
    (step‚Üí‚áì (IFLT-NUM‚áì¬¨< m n w (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) mn))
  where
    c1 : k #‚áì #NUM n from w to w
    c1 = lower (ck w (‚äë-refl¬∑ w))

    c0 : steps 1 (get0 r , w) ‚â° (NUM m , w)
    c0 rewrite g = refl

    c2 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) k (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to w
    c2 = ‚áì-trans‚ÇÇ {w} {w} {w} (#loopI‚áì#loopII w r (#loop F) k f i)
           (IFLT-NUM-1st‚áì {get0 r} {NUM m} ‚åú k ‚åù (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) (1 , c0))

    c3 : #loopI r (#loop F) k f i #‚áì #IFLT (#NUM m) (#NUM n) (#ETA (#NUM i)) (#DIGAMMA (#loopR (#loop F) k f)) from w to w
    c3 = ‚áì-trans‚ÇÇ {w} {w} {w} c2 (IFLT-NUM-2nd‚áì m {‚åú k ‚åù} {NUM n} (ETA (NUM i)) (DIGAMMA (loopR (loop ‚åú F ‚åù) ‚åú k ‚åù ‚åú f ‚åù)) c1)


<‚äé¬¨ : (a b : ‚Ñï) ‚Üí a < b ‚äé ¬¨ a < b
<‚äé¬¨ a b with a <? b
... | yes y = inj‚ÇÅ y
... | no y = inj‚ÇÇ y


-- MOVE to computation
--#‚áì-trans‚ÇÅ : {w w' : ùïé¬∑} {a b c : CTerm} ‚Üí a #‚áì b from w to w' ‚Üí b #‚áì c at w' ‚Üí a #‚áì c at w
--#‚áì-trans‚ÇÅ {w} {w'} {a} {b} {c} c‚ÇÅ c‚ÇÇ = ‚áì-trans‚ÇÅ {w} {w'} {‚åú a ‚åù} {‚åú b ‚åù} {‚åú c ‚åù} c‚ÇÅ c‚ÇÇ


-- MOVE to computation
#‚áì-trans‚ÇÇ : {w w' w'' : ùïé¬∑} {a b c : CTerm} ‚Üí a #‚áì b from w to w' ‚Üí b #‚áì c from w' to w'' ‚Üí a #‚áì c from w to w''
#‚áì-trans‚ÇÇ {w} {w'} {w''} {a} {b} {c} c‚ÇÅ c‚ÇÇ = ‚áì-trans‚ÇÇ {w} {w'} {w''} {‚åú a ‚åù} {‚åú b ‚åù} {‚åú c ‚åù} c‚ÇÅ c‚ÇÇ


abstract

  #APPLY-#loop#‚áì4 : (cn : c‚Ñï) (F k f : CTerm) (i n : ‚Ñï) (w w' : ùïé¬∑)
--                    ‚Üí compatible¬∑ r w Res‚ä§
                    ‚Üí k #‚áõ! #NUM n at w
                    ‚Üí #APPLY F (#upd (#loopName w F k f) f) #‚áì #NUM i from #loopùïé0 w F k f to w'
                    ‚Üí #APPLY2 (#loop F) k f #‚áì #ETA (#NUM i) from w to w'
                       ‚äé #APPLY2 (#loop F) k f #‚áì #DIGAMMA (#loopR (#loop F) k f) from w to w'
  #APPLY-#loop#‚áì4 cn F k f i n w w' compk c = d2 (<‚äé¬¨ m n)
    where
      r : Name
      r = #loopName w F k f

      c1 : #APPLY2 (#loop F) k f #‚áì #loopI r (#loop F) k f i from w to w'
      c1 = #APPLY-#loop#‚áì3 F k f i w w' c

      w0 : ùïé¬∑
      w0 = #loopùïé w F k f

      e0 : w0 ‚äë¬∑ w'
      e0 = ‚äë-trans¬∑ (choose‚äë¬∑ r w0 (T‚Üí‚ÑÇ¬∑ N0)) (#‚áìfrom-to‚Üí‚äë {#loopùïé0 w F k f} {w'} {#APPLY F (#upd (#loopName w F k f) f)} {#NUM i} c)

      compat : compatible¬∑ r w0 Res‚ä§
      compat = startChoiceCompatible¬∑ Res‚ä§ w r (¬¨newChoiceT‚ààdomùïé w ‚åú #ŒΩloopFB F (#loop F) k f ‚åù)

      e1 : w ‚äë¬∑ w'
      e1 = #‚áìfrom-to‚Üí‚äë {w} {w'} {#APPLY2 (#loop F) k f} {#loopI r (#loop F) k f i} c1

      d1 : Œ£ ‚Ñï (Œª j ‚Üí getT 0 r w' ‚â° just (NUM j))
      d1 = lower (cn r w0 compat w' e0)

      m : ‚Ñï
      m = fst d1

      d2 : (m < n ‚äé ¬¨ m < n)
           ‚Üí #APPLY2 (#loop F) k f #‚áì #ETA (#NUM i) from w to w'
              ‚äé #APPLY2 (#loop F) k f #‚áì #DIGAMMA (#loopR (#loop F) k f) from w to w'
      d2 (inj‚ÇÅ x) =
        inj‚ÇÅ (#‚áì-trans‚ÇÇ
                {w} {w'} {w'} {#APPLY2 (#loop F) k f} {#loopI r (#loop F) k f i} {#ETA (#NUM i)}
                c1
                (#APPLY-#loop#‚áì4‚ÇÇ r F k f i w' m n (snd d1) (‚àÄùïé-mon e1 compk) x))
      d2 (inj‚ÇÇ x) =
        inj‚ÇÇ (#‚áì-trans‚ÇÇ
                {w} {w'} {w'} {#APPLY2 (#loop F) k f} {#loopI r (#loop F) k f i} {#DIGAMMA (#loopR (#loop F) k f)}
                c1
                (#APPLY-#loop#‚áì5‚ÇÇ r F k f i w' m n (snd d1) (‚àÄùïé-mon e1 compk) x))


differ‚áìAPPLY-upd : (cn : comp‚Üí‚àÄ‚Ñï) (gc0 : get-choose-‚Ñï) (F f : Term) (cf : # f)
                   (nnf : ¬¨Names f) (nnF : ¬¨Names F) (r r' : Name)
                   (w1 w2 w1' : ùïé¬∑) (i : ‚Ñï)
                   ‚Üí compatible¬∑ r w1 Res‚ä§
                   ‚Üí compatible¬∑ r' w1' Res‚ä§
                   ‚Üí APPLY F (upd r f) ‚áì NUM i from (chooseT r w1 N0) to w2
                   ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY F (upd r' f) ‚áì NUM i from (chooseT r' w1' N0) to w2' √ó getT 0 r w2 ‚â° getT 0 r' w2')
differ‚áìAPPLY-upd cn gc0 F f cf nnf nnF r r' w1 w2 w1' i compat1 compat2 comp
  with differ‚áìfrom-to
         gc0 f cf nnf r r' (chooseT r w1 N0) w2 (chooseT r' w1' N0) (APPLY F (upd r f)) (APPLY F (upd r' f)) (NUM i) tt
         (‚Üícompatible-chooseT r r w1 N0 Res‚ä§ compat1)
         (‚Üícompatible-chooseT r' r' w1' N0 Res‚ä§ compat2)
         (cn r w1 0 compat1)
         (differ-APPLY F F (upd r f) (upd r' f) (differ-refl r r' f F nnF) differ-upd)
         (trans (gc0 r w1 0 compat1) (sym (gc0 r' w1' 0 compat2))) comp
... | w2' , .(NUM i) , comp' , differ-NUM .i , gt' = w2' , comp' , gt'


abstract

  #APPLY-#loop#‚áì5 : (kb : K‚ñ°) (can : comp‚Üí‚àÄ‚Ñï) (gc0 : get-choose-‚Ñï) (cn : c‚Ñï) (u : ‚Ñï)
                    (T F k f : CTerm) (n : ‚Ñï) (w : ùïé¬∑)
                    ‚Üí (nnf : #¬¨Names f) (nnF : #¬¨Names F)
                    ‚Üí type-preserves-#‚áõ T
                    ‚Üí isType u w T
                    ‚Üí k #‚áõ! #NUM n at w
                    ‚Üí ‚ààType u w (#FunBar T) F
                    ‚Üí ‚ààType u w (#FUN #NAT T) f
                    --‚Üí #APPLY F (#upd (#loopName w F k f) f) #‚áõ #NUM i at w
                    ‚Üí Œ£ ‚Ñï (Œª i ‚Üí #APPLY2 (#loop F) k f #‚áõ #ETA (#NUM i) at w)
                       ‚äé #APPLY2 (#loop F) k f #‚áõ #DIGAMMA (#loopR (#loop F) k f) at w
  #APPLY-#loop#‚áì5 kb can gc0 cn u T F k f n w nnf nnF prest tyt compk F‚àà f‚àà {--c--} = d2 (<‚äé¬¨ m n)
    where
      r : Name
      r = #loopName w F k f

      c1 : #APPLY2 (#loop F) k f #‚áì #loopF r F (#loop F) k f from w to #loopùïé w F k f
      c1 = #APPLY-#loop#‚áì1 F k f w

      w0 : ùïé¬∑
      w0 = #loopùïé0 w F k f

      e0 : w ‚äë¬∑ w0
      e0 = ‚äë-trans¬∑ (#‚áìfrom-to‚Üí‚äë {w} {#loopùïé w F k f} {#APPLY2 (#loop F) k f} {#loopF r F (#loop F) k f} c1) (choose‚äë¬∑ r (#loopùïé w F k f) (T‚Üí‚ÑÇ¬∑ N0))

      compat : compatible¬∑ r (#loopùïé w F k f) Res‚ä§
      compat = startChoiceCompatible¬∑ Res‚ä§ w r (¬¨newChoiceT‚ààdomùïé w ‚åú #ŒΩloopFB F (#loop F) k f ‚åù)

      compat0 : compatible¬∑ r w0 Res‚ä§
      compat0 = ‚äë-compatible¬∑ (choose‚äë¬∑ r (#loopùïé w F k f) (T‚Üí‚ÑÇ¬∑ N0)) compat

      c2 : #loopF r F (#loop F) k f #‚áì #loopA r F (#loop F) k f from (#loopùïé w F k f) to w0
      c2 = #loopF#‚áì#loopA r F (#loop F) k f (#loopùïé w F k f)

      F‚àà1 : ‚ààType u w0 #NAT (#APPLY F (#upd r f))
      F‚àà1 = equalInType-FUN‚Üí
               F‚àà w0 e0 (#upd r f) (#upd r f)
               (upd‚ààBAIRE cn u w0 r T f compat0 prest (eqTypes-mon (uni u) tyt w0 e0) (equalInType-mon f‚àà w0 e0))

      F‚àà2 : NATmem w0 (#APPLY F (#upd r f))
      F‚àà2 = kb (equalInType-NAT‚Üí u w0 (#APPLY F (#upd r f)) (#APPLY F (#upd r f)) F‚àà1) w0 (‚äë-refl¬∑ w0)

      i : ‚Ñï
      i = fst F‚àà2

      c' : Œ£ ùïé¬∑ (Œª w' ‚Üí #APPLY F (#upd r f) #‚áì #NUM i from w0 to w')
      c' = ‚áì‚Üífrom-to (lower (fst (snd F‚àà2) w0 (‚äë-refl¬∑ w0))) --‚áì‚Üífrom-to (lower (c (chooseT r w N0) (choose‚äë¬∑ r w (T‚Üí‚ÑÇ¬∑ N0))))

      w' : ùïé¬∑
      w' = fst c'

      c'' : #APPLY F (#upd r f) #‚áì #NUM i from w0 to w'
      c'' = snd c'

      e' : w0 ‚äë¬∑ w'
      e' = #‚áìfrom-to‚Üí‚äë {w0} {w'} {#APPLY F (#upd r f)} {#NUM i} c''

      c3 : #loopA r F (#loop F) k f #‚áì #loopI r (#loop F) k f i from w0 to w'
      c3 = #loopA#‚áì#loopI r F k f i w0 w' c''

      d1 : Œ£ ‚Ñï (Œª j ‚Üí getT 0 r w' ‚â° just (NUM j))
      d1 = lower (cn r w0 compat0 w' e')

      m : ‚Ñï
      m = fst d1

      d2 : (m < n ‚äé ¬¨ m < n)
           ‚Üí Œ£ ‚Ñï (Œª i ‚Üí #APPLY2 (#loop F) k f #‚áõ #ETA (#NUM i) at w)
              ‚äé #APPLY2 (#loop F) k f #‚áõ #DIGAMMA (#loopR (#loop F) k f) at w
      d2 (inj‚ÇÅ x) = inj‚ÇÅ (i , concl ) {--#‚áõ-trans {w} {#APPLY2 (#loop F) k f} {#loopF r F (#loop F) k f} {#ETA (#NUM i)}
                                    {!!} --(#‚áõ!‚Üí#‚áõ {w} {#APPLY2 (#loop F) k f} {#loopF r F (#loop F) k f} c1)
                                    concl)--}
        where
          concl : #APPLY2 (#loop F) k f #‚áõ #ETA (#NUM i) at w
-- #loopF r F (#loop F) k f #‚áõ #ETA (#NUM i) at w
          concl w1 e1 = lift (#‚áì-trans‚ÇÅ {w1} {#loopùïé w1 F k f} {#APPLY2 (#loop F) k f}
                                        {#loopF (#loopName w1 F k f) F (#loop F) k f}
                                        {#ETA (#NUM i)}
                                        (#APPLY-#loop#‚áì1 F k f w1)
                                        (#‚áì-trans‚ÇÅ {#loopùïé w1 F k f} {#loopùïé0 w1 F k f}
                                                   {#loopF r' F (#loop F) k f}
                                                   {#loopA r' F (#loop F) k f}
                                                   {#ETA (#NUM i)}
                                                   c2'
                                                   (#‚áì-trans‚ÇÅ {w0'} {w''} {#loopA r' F (#loop F) k f}
                                                              {#loopI r' (#loop F) k f i}
                                                              {#ETA (#NUM i)}
                                                              c3'
                                                              (#‚áìfrom-to‚Üí#‚áì {w''} {w''} {#loopI r' (#loop F) k f i}
                                                                             {#ETA (#NUM i)}
                                                                             (#APPLY-#loop#‚áì4‚ÇÇ r' F k f i w'' m n (trans (sym gt') (snd d1)) (‚àÄùïé-mon (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e0' e'')) compk) x)))))
            where
              r' : Name
              r' = #loopName w1 F k f

              w0' : ùïé¬∑
              w0' = #loopùïé0 w1 F k f

              e0' : w1 ‚äë¬∑ w0'
              e0' = ‚äë-trans¬∑ (#‚áìfrom-to‚Üí‚äë {w1} {#loopùïé w1 F k f} {#APPLY2 (#loop F) k f} {#loopF r' F (#loop F) k f} (#APPLY-#loop#‚áì1 F k f w1)) (choose‚äë¬∑ r' (#loopùïé w1 F k f) (T‚Üí‚ÑÇ¬∑ N0))

              compat' : compatible¬∑ r' (#loopùïé w1 F k f) Res‚ä§
              compat' = startChoiceCompatible¬∑ Res‚ä§ w1 r' (¬¨newChoiceT‚ààdomùïé w1 ‚åú #ŒΩloopFB F (#loop F) k f ‚åù)

              c2' : #loopF r' F (#loop F) k f #‚áì #loopA r' F (#loop F) k f from (#loopùïé w1 F k f) to w0'
              c2' = #loopF#‚áì#loopA r' F (#loop F) k f (#loopùïé w1 F k f)

              cx : Œ£ ùïé¬∑ (Œª w2' ‚Üí #APPLY F (#upd r' f) #‚áì #NUM i from w0' to w2' √ó getT 0 r w' ‚â° getT 0 r' w2')
              cx = differ‚áìAPPLY-upd can gc0 ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed f) nnf nnF r r' (#loopùïé w F k f) w' (#loopùïé w1 F k f) i compat compat' c''

              w'' : ùïé¬∑
              w'' = fst cx

              cx' : #APPLY F (#upd r' f) #‚áì #NUM i from w0' to w''
              cx' = fst (snd cx)

              gt' : getT 0 r w' ‚â° getT 0 r' w''
              gt' = snd (snd cx)

              c3' : #loopA r' F (#loop F) k f #‚áì #loopI r' (#loop F) k f i from w0' to w''
              c3' = #loopA#‚áì#loopI r' F k f i w0' w'' cx'

              e'' : w0' ‚äë¬∑ w''
              e'' = #‚áìfrom-to‚Üí‚äë {w0'} {w''} {#APPLY F (#upd r' f)} {#NUM i} cx'

      d2 (inj‚ÇÇ x) = inj‚ÇÇ concl
        where
          concl : #APPLY2 (#loop F) k f #‚áõ #DIGAMMA (#loopR (#loop F) k f) at w
          concl w1 e1 = lift (#‚áì-trans‚ÇÅ {w1} {#loopùïé w1 F k f} {#APPLY2 (#loop F) k f}
                                        {#loopF (#loopName w1 F k f) F (#loop F) k f}
                                        {#DIGAMMA (#loopR (#loop F) k f)}
                                        (#APPLY-#loop#‚áì1 F k f w1)
                                        (#‚áì-trans‚ÇÅ {#loopùïé w1 F k f} {#loopùïé0 w1 F k f}
                                                   {#loopF r' F (#loop F) k f}
                                                   {#loopA r' F (#loop F) k f}
                                                   {#DIGAMMA (#loopR (#loop F) k f)}
                                                   c2'
                                                   (#‚áì-trans‚ÇÅ {w0'} {w''} {#loopA r' F (#loop F) k f}
                                                              {#loopI r' (#loop F) k f i}
                                                              {#DIGAMMA (#loopR (#loop F) k f)}
                                                              c3'
                                                              (#‚áìfrom-to‚Üí#‚áì {w''} {w''} {#loopI r' (#loop F) k f i}
                                                                             {#DIGAMMA (#loopR (#loop F) k f)}
                                                                             (#APPLY-#loop#‚áì5‚ÇÇ r' F k f i w'' m n (trans (sym gt') (snd d1)) (‚àÄùïé-mon (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e0' e'')) compk) x)))))
            where
              r' : Name
              r' = #loopName w1 F k f

              w0' : ùïé¬∑
              w0' = #loopùïé0 w1 F k f

              e0' : w1 ‚äë¬∑ w0'
              e0' = ‚äë-trans¬∑ (#‚áìfrom-to‚Üí‚äë {w1} {#loopùïé w1 F k f} {#APPLY2 (#loop F) k f} {#loopF r' F (#loop F) k f} (#APPLY-#loop#‚áì1 F k f w1)) (choose‚äë¬∑ r' (#loopùïé w1 F k f) (T‚Üí‚ÑÇ¬∑ N0))

              compat' : compatible¬∑ r' (#loopùïé w1 F k f) Res‚ä§
              compat' = startChoiceCompatible¬∑ Res‚ä§ w1 r' (¬¨newChoiceT‚ààdomùïé w1 ‚åú #ŒΩloopFB F (#loop F) k f ‚åù)

              c2' : #loopF r' F (#loop F) k f #‚áì #loopA r' F (#loop F) k f from (#loopùïé w1 F k f) to w0'
              c2' = #loopF#‚áì#loopA r' F (#loop F) k f (#loopùïé w1 F k f)

              cx : Œ£ ùïé¬∑ (Œª w2' ‚Üí #APPLY F (#upd r' f) #‚áì #NUM i from w0' to w2' √ó getT 0 r w' ‚â° getT 0 r' w2')
              cx = differ‚áìAPPLY-upd can gc0 ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed f) nnf nnF r r' (#loopùïé w F k f) w' (#loopùïé w1 F k f) i compat compat' c''

              w'' : ùïé¬∑
              w'' = fst cx

              cx' : #APPLY F (#upd r' f) #‚áì #NUM i from w0' to w''
              cx' = fst (snd cx)

              gt' : getT 0 r w' ‚â° getT 0 r' w''
              gt' = snd (snd cx)

              c3' : #loopA r' F (#loop F) k f #‚áì #loopI r' (#loop F) k f i from w0' to w''
              c3' = #loopA#‚áì#loopI r' F k f i w0' w'' cx'

              e'' : w0' ‚äë¬∑ w''
              e'' = #‚áìfrom-to‚Üí‚äë {w0'} {w''} {#APPLY F (#upd r' f)} {#NUM i} cx'


APPLY-loopR-‚áì : (w1 w2 w3 : ùïé¬∑) (R k f b : CTerm) (m n : ‚Ñï)
                ‚Üí b #‚áì #NUM m from w1 to w2
                ‚Üí k #‚áì #NUM n from w2 to w3
                ‚Üí #APPLY (#loopR R k f) b #‚áì #APPLY2 R (#NUM (suc n)) (#APPENDf k f (#NUM m)) from w1 to w3
APPLY-loopR-‚áì w1 w2 w3 R k f b m n compb compk =
  ‚áì-trans‚ÇÇ
    {w1} {w1} {w3}
    {‚åú #APPLY (#loopR R k f) b ‚åù}
    {‚åú #loopRL b R k f ‚åù}
    {‚åú #APPLY2 R (#NUM (suc n)) (#APPENDf k f (#NUM m)) ‚åù}
    (1 , ‚â°pair c1 refl)
    (‚áì-trans‚ÇÇ
       {w1} {w2} {w3}
       {‚åú #loopRL b R k f ‚åù}
       {‚åú #loopRL (#NUM m) R k f ‚åù}
       {‚åú #APPLY2 R (#NUM (suc n)) (#APPENDf k f (#NUM m)) ‚åù}
       (LET‚áì {‚åú b ‚åù} {NUM m} ‚åú #[0]loopRLL (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f) ‚åù compb)
       (‚áì-trans‚ÇÇ
          {w2} {w2} {w3}
          {‚åú #loopRL (#NUM m) R k f ‚åù}
          {‚åú #loopRLL (#SUC k) (#NUM m) R k f ‚åù}
          {‚åú #APPLY2 R (#NUM (suc n)) (#APPENDf k f (#NUM m)) ‚åù}
          (1 , ‚â°pair c2 refl)
          (‚áì-trans‚ÇÇ
             {w2} {w3} {w3}
             {‚åú #loopRLL (#SUC k) (#NUM m) R k f ‚åù}
             {‚åú #loopRLL (#NUM (suc n)) (#NUM m) R k f ‚åù}
             {‚åú #APPLY2 R (#NUM (suc n)) (#APPENDf k f (#NUM m)) ‚åù}
             (LET‚áì {‚åú #SUC k ‚åù} {NUM (suc n)} ‚åú #[0]loopRLLA (#[0]shiftUp0 (#NUM m)) (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f) ‚åù (‚áìNUM‚ÜíSUC‚áìNUM {‚åú k ‚åù} {n} {w2} {w3} compk))
             (1 , ‚â°pair c3 refl))))
-- #loopRL a R l
--APPLY‚áì {w1} {w2}
  where
    c1 : sub ‚åú b ‚åù ‚åú #[0]loopRL (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f) ‚åù
         ‚â° ‚åú #loopRL b R k f ‚åù
    c1 rewrite #shiftUp 0 b
             | #shiftUp 0 b
             | #shiftUp 0 b
             | #shiftUp 0 b
             | #shiftUp 0 R
             | #shiftUp 0 R
             | #shiftUp 0 R
             | #subv 2 ‚åú b ‚åù ‚åú R ‚åù (CTerm.closed R)
             | #shiftDown 2 R
             | #shiftUp 0 k
             | #shiftUp 0 k
             | #shiftUp 0 k
             | #shiftUp 0 k
             | #shiftUp 0 f
             | #shiftUp 0 f
             | #shiftUp 0 f
             | #shiftUp 0 f
             | #subv 1 ‚åú b ‚åù ‚åú k ‚åù (CTerm.closed k)
             | #subv 3 ‚åú b ‚åù ‚åú k ‚åù (CTerm.closed k)
             | #subv 3 ‚åú b ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 3 k
             | #shiftDown 1 k
             | #shiftDown 3 f
             | #shiftDown 0 b = refl

    c2 : sub (NUM m) ‚åú #[0]loopRLL (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f) ‚åù
         ‚â° ‚åú #loopRLL (#SUC k) (#NUM m) R k f ‚åù
    c2 rewrite #shiftUp 0 R
             | #shiftUp 0 R
             | #shiftUp 0 k
             | #shiftUp 0 k
             | #shiftUp 0 k
             | #shiftUp 0 f
             | #shiftUp 0 f
             | #shiftUp 0 f
             | #subv 1 (NUM m) ‚åú R ‚åù (CTerm.closed R)
             | #subv 0 (NUM m) ‚åú k ‚åù (CTerm.closed k)
             | #subv 2 (NUM m) ‚åú k ‚åù (CTerm.closed k)
             | #subv 2 (NUM m) ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 1 R
             | #shiftDown 0 k
             | #shiftDown 2 k
             | #shiftDown 2 f = refl

    c3 : sub (NUM (suc n)) ‚åú #[0]loopRLLA (#[0]shiftUp0 (#NUM m)) (#[0]shiftUp0 R) (#[0]shiftUp0 k) (#[0]shiftUp0 f) ‚åù
         ‚â° ‚åú #APPLY2 R (#NUM (suc n)) (#APPENDf k f (#NUM m)) ‚åù
    c3 rewrite #shiftUp 0 R
             | #shiftUp 0 k
             | #shiftUp 0 k
             | #shiftUp 0 f
             | #shiftUp 0 f
             | #subv 0 (NUM (suc n)) ‚åú R ‚åù (CTerm.closed R)
             | #subv 1 (NUM (suc n)) ‚åú k ‚åù (CTerm.closed k)
             | #subv 1 (NUM (suc n)) ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 0 R
             | #shiftDown 1 k
             | #shiftDown 1 f = refl


{--
APPLY-loopR-‚áõ : (w : ùïé¬∑) (R l b : CTerm) (k : ‚Ñï)
                 ‚Üí b #‚áõ #NUM k at w
                 ‚Üí #APPLY (#loopR R l) b #‚áõ! #APPLY R (#APPEND l b) at w
APPLY-loopR-‚áõ w R l b k comp w1 e1 = {!!} --lift (APPLY-loopR-‚áì w1 R l b)
--}


{--
upd-SND‚ààBAIRE : (cn : c‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (r : Name) (f : CTerm)
                 ‚Üí compatible¬∑ r w Res‚ä§
                 ‚Üí ‚ààType i w (#LIST #NAT) l
                 ‚Üí ‚ààType i w #BAIRE (#upd r (#SND l))
upd-SND‚ààBAIRE cn i w r l compat l‚àà =
  upd‚ààBAIRE cn i w r (#SND l) compat (‚ààLIST‚ÜíSND i w l l‚àà)
--}

\end{code}
