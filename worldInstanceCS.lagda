\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; subst)
--open import Relation.Binary.PropositionalEquality hiding ([_] ; Extensionality) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
--open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
--open import Agda.Builtin.String
--open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Data.List.Properties
--open import Function.Inverse using (Inverse)
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms


module worldInstanceCS (E : Extensionality 0‚Ñì 0‚Ñì)  where
\end{code}



This provides an instance of world and choice for choice sequences


\begin{code}
open import choice

choiceCS : Choice
choiceCS = mkChoice ‚Ñï (Œª x ‚Üí #NUM x) (Œª c ‚Üí refl) Œª c ‚Üí refl --(Œª {a} {b} x ‚Üí x)

open import choiceDef{1‚Ñì}(choiceCS)



record cs : Set‚ÇÅ where
  constructor mkcs
  field
    name    : Name
    choices : List ‚ÑÇ¬∑
    res     : Res{0‚Ñì}


data entry : Set‚ÇÅ where
  start  : (name : Name) (res : Res) ‚Üí entry
  choice : (name : Name) (t : ‚ÑÇ¬∑) ‚Üí entry


-- Worlds - entries are added at the end of the list
world : Set‚ÇÅ
world = List entry


getChoices : Name ‚Üí world ‚Üí List ‚ÑÇ¬∑
getChoices name [] = []
getChoices name (start _ _ ‚à∑ w) = getChoices name w
getChoices name (choice n t ‚à∑ w) with name ‚âü n
... | yes p = t ‚à∑ getChoices name w
... | no p = getChoices name w



-- ‚ü®_‚ü©_‚âΩ_ guarantees that there is only one 'start' for each choice sequence
getCs : Name ‚Üí world ‚Üí Maybe cs
getCs name [] = nothing
getCs name (start n r ‚à∑ w) with name ‚âü n
... | yes p = just (mkcs name (getChoices name w) r)
... | no p = getCs name w
getCs name (choice n t ‚à∑ w) = getCs name w


wdom : world ‚Üí List Name
wdom [] = []
wdom (start name _ ‚à∑ w) = name ‚à∑ wdom w
wdom (choice _ _ ‚à∑ w) = wdom w


wnames : world ‚Üí List Name
wnames [] = []
wnames (start _ _ ‚à∑ w) = wnames w
wnames (choice _ t ‚à∑ w) = names ‚åú #NUM t ‚åù ++ wnames w


remNRes : {L : Level} (n : Name) (l : List (NRes{L})) ‚Üí List (NRes{L})
remNRes {L} n [] = []
remNRes {L} n (r ‚à∑ l) with n ‚âü NRes.name r
... | yes p = remNRes n l
... | no p = r ‚à∑ remNRes n l


wrdom : world ‚Üí List NRes
wrdom [] = []
wrdom (start name r ‚à∑ w) = mkNRes name r ‚à∑ remNRes name (wrdom w)
wrdom (choice _ _ ‚à∑ w) = wrdom w


‚ààworld : cs ‚Üí world ‚Üí Set‚ÇÅ
‚ààworld e w = getCs (cs.name e) w ‚â° just e


newcs : world ‚Üí Name ‚Üí Res ‚Üí world
newcs w name r = w ‚à∑ ≥ start name r


extcs : world ‚Üí Name ‚Üí ‚ÑÇ¬∑ ‚Üí world
extcs w name t = w ‚à∑ ≥ choice name t


-- w2 extends w1
data _‚âΩ_ : (w2 : world) (w1 : world) ‚Üí Set‚ÇÅ where
  extRefl : (w : world) ‚Üí w ‚âΩ w
  extTrans : {w1 w2 w3 : world} ‚Üí w3 ‚âΩ w2 ‚Üí w2 ‚âΩ w1 ‚Üí w3 ‚âΩ w1
  extChoice :
    (w : world) (name : Name) (l : List ‚ÑÇ¬∑) (t : ‚ÑÇ¬∑) (res : Res)
    ‚Üí ‚ààworld (mkcs name l res) w
    ‚Üí ¬∑·µ£ res (length l) t
    ‚Üí (extcs w name t) ‚âΩ w
  extEntry :
    (w : world) (name : Name) (res : Res)
    ‚Üí ¬¨ (name ‚àà wdom w) -- 'name' is not in 'w' so that we don't shadow an entry
    ‚Üí (newcs w name res) ‚âΩ w



open import world

-- An instance of PossibleWorlds
PossibleWorldsCS : PossibleWorlds
PossibleWorldsCS = mkPossibleWorlds world (Œª w1 w2 ‚Üí w2 ‚âΩ w1) extRefl (Œª {w1 w2 w3} e1 e2 ‚Üí extTrans e2 e1)

open import worldDef(PossibleWorldsCS)



getChoices++ : (name : Name) (w w' : world)
               ‚Üí getChoices name (w ++ w') ‚â° getChoices name w ++ getChoices name w'
getChoices++ name [] w' = refl
getChoices++ name (start name‚ÇÅ res ‚à∑ w) w' = getChoices++ name w w'
getChoices++ name (choice name‚ÇÅ t ‚à∑ w) w' with name ‚âü name‚ÇÅ
... | yes p rewrite getChoices++ name w w' = refl
... | no p = getChoices++ name w w'


getCs‚äé : (name : Name) (w : world) ‚Üí (Œ£ cs (Œª e ‚Üí getCs name w ‚â° just e)) ‚äé getCs name w ‚â° nothing
getCs‚äé name w with getCs name w
... | just u = inj‚ÇÅ (u , refl)
... | nothing = inj‚ÇÇ refl


mkcs-inj1 : {n1 n2 : Name} {l1 l2 : List ‚ÑÇ¬∑} {r1 r2 : Res} ‚Üí mkcs n1 l1 r1 ‚â° mkcs n2 l2 r2 ‚Üí n1 ‚â° n2
mkcs-inj1 refl =  refl


mkcs-inj2 : {n1 n2 : Name} {l1 l2 : List ‚ÑÇ¬∑} {r1 r2 : Res} ‚Üí mkcs n1 l1 r1 ‚â° mkcs n2 l2 r2 ‚Üí l1 ‚â° l2
mkcs-inj2 refl =  refl


mkcs-inj3 : {n1 n2 : Name} {l1 l2 : List ‚ÑÇ¬∑} {r1 r2 : Res} ‚Üí mkcs n1 l1 r1 ‚â° mkcs n2 l2 r2 ‚Üí r1 ‚â° r2
mkcs-inj3 refl =  refl


getCs-same-name : (name : Name) (w : world) (e : cs)
                  ‚Üí getCs name w ‚â° just e
                  ‚Üí cs.name e ‚â° name
getCs-same-name name (start name‚ÇÅ res ‚à∑ w) (mkcs n l r) h with name ‚âü name‚ÇÅ
... | yes p = sym (mkcs-inj1 (just-inj h))
... | no p = getCs-same-name name w (mkcs n l r) h
getCs-same-name name (choice name‚ÇÅ t ‚à∑ w) e h = getCs-same-name name w e h




getCs++ : (name : Name) (w w' : world) (l : List ‚ÑÇ¬∑) (r : Res)
          ‚Üí getCs name w ‚â° just (mkcs name l r)
          ‚Üí getCs name (w ++ w') ‚â° just (mkcs name (l ++ getChoices name w') r)
getCs++ name (start name‚ÇÅ res ‚à∑ w) w' l r e with name ‚âü name‚ÇÅ
... | yes p rewrite getChoices++ name w w' | mkcs-inj2 (just-inj e) | mkcs-inj3 (just-inj e) = refl
... | no p = getCs++ name w w' l r e
getCs++ name (choice name‚ÇÅ t ‚à∑ w) w' l r e = getCs++ name w w' l r e


getCs++-same-choice : (name : Name) (w : world) (l : List ‚ÑÇ¬∑) (r : Res) (t : ‚ÑÇ¬∑)
                      ‚Üí getCs name w ‚â° just (mkcs name l r)
                      ‚Üí getCs name (w ++ [ choice name t ]) ‚â° just (mkcs name (l ++ [ t ]) r)
getCs++-same-choice name w l r t e rewrite getCs++ name w [ choice name t ] l r e with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)


getCs++-diff-choice : (name name‚ÇÅ : Name) (w : world) (l : List ‚ÑÇ¬∑) (r : Res) (t : ‚ÑÇ¬∑)
                      ‚Üí ¬¨ name ‚â° name‚ÇÅ
                      ‚Üí getCs name w ‚â° just (mkcs name l r)
                      ‚Üí getCs name (w ++ [ choice name‚ÇÅ t ]) ‚â° just (mkcs name l r)
getCs++-diff-choice name name‚ÇÅ w l r t d e rewrite getCs++ name w [ choice name‚ÇÅ t ] l r e with name ‚âü name‚ÇÅ
... | yes p = ‚ä•-elim (d p)
... | no p rewrite ++[] l = refl



resSatCs : (n : ‚Ñï) (l : List ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí Set
resSatCs n [] r = ‚ä§
resSatCs n (t ‚à∑ l) r = ¬∑·µ£ r n t √ó resSatCs (suc n) l r


pres-resSatCs : (l l' : List ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí Set
pres-resSatCs l l' r = resSatCs 0 l r ‚Üí resSatCs 0 (l ++ l') r


pres-resSatCs-[] : (l : List ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí pres-resSatCs l [] r
pres-resSatCs-[] l r x rewrite ++[] l = x


‚ÜíresSatCs++ : (n : ‚Ñï) (l1 l2 : List ‚ÑÇ¬∑) (r : Res{0‚Ñì})
               ‚Üí resSatCs n l1 r
               ‚Üí resSatCs (n + length l1) l2 r
               ‚Üí resSatCs n (l1 ++ l2) r
‚ÜíresSatCs++ n [] l2 r sat1 sat2 rewrite +-identity ≥ n = sat2
‚ÜíresSatCs++ n (x ‚à∑ l1) l2 r (cond , sat1) sat2 rewrite +-suc n (length l1) =
  cond , ‚ÜíresSatCs++ (suc n) l1 l2 r sat1 sat2


pres-resSatCs-‚à∑ ≥ : (l : List ‚ÑÇ¬∑) (t : ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí ¬∑·µ£ r (length l) t ‚Üí pres-resSatCs l [ t ] r
pres-resSatCs-‚à∑ ≥ l t r c x = ‚ÜíresSatCs++ 0 l [ t ] r x (c , tt)



‚Üípres-resSatCs++ : {l l1 l2 : List ‚ÑÇ¬∑} {r : Res{0‚Ñì}}
                    ‚Üí pres-resSatCs l l1 r
                    ‚Üí pres-resSatCs (l ++ l1) l2 r
                    ‚Üí pres-resSatCs l (l1 ++ l2) r
‚Üípres-resSatCs++ {l} {l1} {l2} {r} s1 s2 s rewrite sym (++-assoc l l1 l2) = s2 (s1 s)



‚âΩ-pres-getCs : {w1 w2 : world} {name : Name} {l : List ‚ÑÇ¬∑} {r : Res}
                 ‚Üí w2 ‚âΩ w1
                 ‚Üí getCs name w1 ‚â° just (mkcs name l r)
                 ‚Üí Œ£ (List ‚ÑÇ¬∑) (Œª l' ‚Üí getCs name w2 ‚â° just (mkcs name (l ++ l') r) √ó pres-resSatCs l l' r)
‚âΩ-pres-getCs {w1} {.w1} {name} {l} {r} (extRefl .w1) i =
  [] , subst (Œª x ‚Üí getCs name w1 ‚â° just (mkcs name x r)) (sym (++[] l)) i , pres-resSatCs-[] l r
‚âΩ-pres-getCs {w1} {w2} {name} {l} {r} (extTrans ext ext‚ÇÅ) i =
  let (l1 , i1 , s1) = ‚âΩ-pres-getCs ext‚ÇÅ i in
  let (l2 , i2 , s2) = ‚âΩ-pres-getCs ext i1 in
  l1 ++ l2 , subst (Œª x ‚Üí getCs name w2 ‚â° just (mkcs name x r)) (++-assoc l l1 l2) i2 , ‚Üípres-resSatCs++ s1 s2
‚âΩ-pres-getCs {w1} {.(w1 ++ choice name‚ÇÅ t ‚à∑ [])} {name} {l} {r} (extChoice .w1 name‚ÇÅ l‚ÇÅ t res x x‚ÇÅ) i with name ‚âü name‚ÇÅ
... | yes p rewrite p | i | sym (mkcs-inj2 (just-inj x)) | sym (mkcs-inj3 (just-inj x)) =
  [ t ] , getCs++-same-choice name‚ÇÅ w1 l r t i , pres-resSatCs-‚à∑ ≥ l t r x‚ÇÅ
... | no p rewrite getCs++-diff-choice name name‚ÇÅ w1 l r t p i =
  [] , subst (Œª x ‚Üí just (mkcs name l r) ‚â° just (mkcs name x r)) (sym (++[] l)) refl , pres-resSatCs-[] l r
‚âΩ-pres-getCs {w1} {.(w1 ++ start name‚ÇÅ res ‚à∑ [])} {name} {l} {r} (extEntry .w1 name‚ÇÅ res x) i rewrite getCs++ name w1 [ start name‚ÇÅ res ] l r i =
  [] , refl , pres-resSatCs-[] l r


wdom++ : (w‚ÇÅ w‚ÇÇ : ùïé¬∑) ‚Üí wdom (w‚ÇÅ ++ w‚ÇÇ) ‚â° wdom w‚ÇÅ ++ wdom w‚ÇÇ
wdom++ [] w‚ÇÇ = refl
wdom++ (start name res ‚à∑ w‚ÇÅ) w‚ÇÇ rewrite wdom++ w‚ÇÅ w‚ÇÇ = refl
wdom++ (choice name t ‚à∑ w‚ÇÅ) w‚ÇÇ rewrite wdom++ w‚ÇÅ w‚ÇÇ = refl


wdomAddChoice : (w : ùïé¬∑) (name : Name) (t : ‚ÑÇ¬∑) ‚Üí wdom (w ‚à∑ ≥ choice name t) ‚â° wdom w
wdomAddChoice w name t rewrite wdom++ w [ choice name t ] rewrite ++[] (wdom w) = refl


wdomAddStart : (w : ùïé¬∑) (name : Name) (r : Res) ‚Üí wdom (w ‚à∑ ≥ start name r) ‚â° wdom w ‚à∑ ≥ name
wdomAddStart w name r rewrite wdom++ w [ start name r ] = refl


extwPreservesNorepeats : (w1 w2 : ùïé¬∑) ‚Üí w2 ‚âΩ w1 ‚Üí norepeats (wdom w1) ‚Üí norepeats (wdom w2)
extwPreservesNorepeats w1 .w1 (extRefl .w1) norep = norep
extwPreservesNorepeats w1 w2 (extTrans e e‚ÇÅ) norep = extwPreservesNorepeats _ _ e (extwPreservesNorepeats _ _ e‚ÇÅ norep)
extwPreservesNorepeats w1 .(w1 ++ choice name t ‚à∑ []) (extChoice .w1 name l t res x x‚ÇÅ) norep rewrite wdomAddChoice w1 name t = norep
extwPreservesNorepeats w1 .(w1 ++ start name res ‚à∑ []) (extEntry .w1 name res x) norep rewrite wdomAddStart w1 name res =
  norepeats‚à∑ ≥ _ _ norep x



‚âΩ-pres-‚ààworld : {w1 w2 : ùïé¬∑} {name : Name} {l : List ‚ÑÇ¬∑} {r : Res}
                  ‚Üí w2 ‚âΩ w1
                  ‚Üí ‚ààworld (mkcs name l r) w1
                  ‚Üí Œ£ (List ‚ÑÇ¬∑) (Œª l' ‚Üí ‚ààworld (mkcs name (l ++ l') r) w2 √ó pres-resSatCs l l' r)
‚âΩ-pres-‚ààworld {w1} {w2} {name} {l} {r} e i = ‚âΩ-pres-getCs e i


‚ààworld-extcs : (w : ùïé¬∑) (name : Name) (l : List ‚ÑÇ¬∑) (r : Res) (t : ‚ÑÇ¬∑)
               ‚Üí ‚ààworld (mkcs name l r) w
               ‚Üí ‚ààworld (mkcs name (l ‚à∑ ≥ t) r) (extcs w name t)
‚ààworld-extcs w name l r t i rewrite getCs++ name w [ choice name t ] l r i with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)


getCs++‚àâ : (name : Name) (w w' : ùïé¬∑)
          ‚Üí getCs name w ‚â° nothing
          ‚Üí getCs name (w ++ w') ‚â° getCs name w'
getCs++‚àâ name [] w' h = refl
getCs++‚àâ name (start name‚ÇÅ res ‚à∑ w) w' h with name ‚âü name‚ÇÅ
getCs++‚àâ name (start name‚ÇÅ res ‚à∑ w) w' () | yes p
... | no p = getCs++‚àâ name w w' h
getCs++‚àâ name (choice name‚ÇÅ t ‚à∑ w) w' h = getCs++‚àâ name w w' h


‚àâ-getCs-nothing : (w : ùïé¬∑) (name : Name) ‚Üí ¬¨ (name ‚àà (wdom w)) ‚Üí getCs name w ‚â° nothing
‚àâ-getCs-nothing [] name i = refl
‚àâ-getCs-nothing (start name‚ÇÅ res ‚à∑ w) name i with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (i (here refl))
... | no p = ‚àâ-getCs-nothing w name Œª j ‚Üí i (there j)
‚àâ-getCs-nothing (choice name‚ÇÅ t ‚à∑ w) name i = ‚àâ-getCs-nothing w name i


‚ààworld-newcs : (w : ùïé¬∑) (name : Name) (r : Res)
               ‚Üí ¬¨ (name ‚àà (wdom w))
               ‚Üí ‚ààworld (mkcs name [] r) (newcs w name r)
‚ààworld-newcs w name r ni rewrite getCs++‚àâ name w [ start name r ] (‚àâ-getCs-nothing w name ni) with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)




preCompatibleCs : (c : Name) (w : ùïé¬∑) (r : Res{0‚Ñì}) ‚Üí Set‚ÇÅ
preCompatibleCs c w r = Œ£ (List ‚ÑÇ¬∑) (Œª l ‚Üí ‚ààworld (mkcs c l r) w)


-- This is the same as 'preCompatibleCs' & enforces satisfiability too
compatibleCs : (c : Name) (w : ùïé¬∑) (r : Res{0‚Ñì}) ‚Üí Set‚ÇÅ
compatibleCs c w r = Œ£ (List ‚ÑÇ¬∑) (Œª l ‚Üí ‚ààworld (mkcs c l r) w √ó resSatCs 0 l r)



‚äë-compatibleCs : {c : Name} {w1 w2 : ùïé¬∑} {r : Res{0‚Ñì}} ‚Üí w1 ‚äë¬∑ w2 ‚Üí compatibleCs c w1 r ‚Üí compatibleCs c w2 r
‚äë-compatibleCs {c} {w1} {w2} {r} e (l , comp , sat) =
  l ++ (fst (‚âΩ-pres-‚ààworld e comp)) ,
  fst (snd (‚âΩ-pres-‚ààworld e comp)) ,
  snd (snd (‚âΩ-pres-‚ààworld e comp)) sat


compatibleRes-refl : (r : Res{0‚Ñì}) ‚Üí compatibleRes r r
compatibleRes-refl r n t = (Œª x ‚Üí x) , Œª x ‚Üí x



open import compatible(PossibleWorldsCS)(choiceCS)

compatibleCS : Compatible
compatibleCS = mkCompatible compatibleCs ‚äë-compatibleCs

open import compatibleDef(PossibleWorldsCS)(choiceCS)(compatibleCS)




progressCs : (c : Name) (w1 w2 : ùïé¬∑) ‚Üí Set‚ÇÅ
progressCs c w1 w2 =
  (l : List ‚ÑÇ¬∑) (r : Res)
  ‚Üí ‚ààworld (mkcs c l r) w1
  ‚Üí Œ£ (List ‚ÑÇ¬∑) (Œª l' ‚Üí ‚ààworld (mkcs c (l ++ l') r) w2 √ó 0 < length l')



freezeCs : (c : Name) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) ‚Üí ùïé¬∑
freezeCs c w t = extcs w c t



¬¨‚â°freezeCs : (c : Name) (w : world) (t : ‚ÑÇ¬∑) ‚Üí ¬¨ w ‚â° freezeCs c w t
¬¨‚â°freezeCs c [] t ()
¬¨‚â°freezeCs c (x ‚à∑ w) t e = ¬¨‚â°freezeCs c w t (snd (‚à∑-injective e))


freezeCsProgress : (c : Name) {w1 w2 : ùïé¬∑} (t : ‚ÑÇ¬∑) ‚Üí w1 ‚äë¬∑ w2 ‚Üí progressCs c w1 (freezeCs c w2 t)
freezeCsProgress c {w1} {w2} t e l r i =
  fst (‚âΩ-pres-‚ààworld e i) ‚à∑ ≥ t ,
  j ,
  k
  where
    j : ‚ààworld (mkcs c (l ++ fst (‚âΩ-pres-‚ààworld e i) ‚à∑ ≥ t) r) (freezeCs c w2 t)
    j rewrite sym (++-assoc l (fst (‚âΩ-pres-‚ààworld e i)) [ t ]) =
      ‚ààworld-extcs w2 c (l ++ (fst (‚âΩ-pres-‚ààworld e i))) r t (fst (snd (‚âΩ-pres-‚ààworld e i)))

    k : 0 < length (fst (‚âΩ-pres-‚ààworld e i) ‚à∑ ≥ t)
    k = suc‚â§len‚à∑ ≥ (fst (‚âΩ-pres-‚ààworld e i)) t 0 _‚â§_.z‚â§n --


freezeDef : NRes{0‚Ñì} ‚Üí ùïé¬∑ ‚Üí ùïé¬∑
freezeDef r w = freezeCs (NRes.name r) w (Res.def (NRes.res r))


freezeList : List (NRes{0‚Ñì}) ‚Üí ùïé¬∑ ‚Üí ùïé¬∑
freezeList [] w = w
freezeList (r ‚à∑ l) w = freezeDef r (freezeList l w)


freezeSeq : List NRes ‚Üí ùïé¬∑ ‚Üí ‚Ñï ‚Üí ùïé¬∑
freezeSeq l w 0 = w
freezeSeq l w (suc n) = freezeList l (freezeSeq l w n)


ùïé‚Üíseq : ùïé¬∑ ‚Üí ‚Ñï ‚Üí ùïé¬∑
ùïé‚Üíseq w = freezeSeq (wrdom w) w


‚äëùïé‚Üíseq0 : (w : ùïé¬∑) ‚Üí w ‚äë¬∑ ùïé‚Üíseq w 0
‚äëùïé‚Üíseq0 w = ‚äë-refl¬∑ w


compatibleNRes : (r : NRes) (w : ùïé¬∑) ‚Üí Set‚ÇÅ
compatibleNRes r w = preCompatibleCs (NRes.name r) w (NRes.res r)


‚äë‚ÜícompatibleNRes : {r : NRes} {w1 w2 : ùïé¬∑} ‚Üí w1 ‚äë¬∑ w2 ‚Üí compatibleNRes r w1 ‚Üí compatibleNRes r w2
‚äë‚ÜícompatibleNRes {r} {w1} {w2} e (l , comp) =
  l ++ fst (‚âΩ-pres-‚ààworld e comp) ,
  fst (snd (‚âΩ-pres-‚ààworld e comp))


compatibleListNRes : (l : List NRes) (w : ùïé¬∑) ‚Üí Set‚ÇÅ
compatibleListNRes l w = (r : NRes) ‚Üí r ‚àà l ‚Üí compatibleNRes r w


‚äë‚ÜícompatibleListNRes : {k : List NRes} {w1 w2 : ùïé¬∑} ‚Üí w1 ‚äë¬∑ w2 ‚Üí compatibleListNRes k w1 ‚Üí compatibleListNRes k w2
‚äë‚ÜícompatibleListNRes {k} {w1} {w2} e comp r i = ‚äë‚ÜícompatibleNRes e (comp r i)



getCs‚Üí‚ààworld : {c : Name} {r : Res} {w : ùïé¬∑} {l : List ‚ÑÇ¬∑} ‚Üí getCs c w ‚â° just (mkcs c l r) ‚Üí ‚ààworld (mkcs c l r) w
getCs‚Üí‚ààworld {c} {r} {w} {l} h rewrite h = refl


getCs‚Üí‚ààworld' : {c c' : Name} {r : Res} {w : ùïé¬∑} {l : List ‚ÑÇ¬∑} ‚Üí getCs c w ‚â° just (mkcs c' l r) ‚Üí ‚ààworld (mkcs c l r) w
getCs‚Üí‚ààworld' {c} {c'} {r} {start name res ‚à∑ w} {l} h with c ‚âü name
... | yes p rewrite h | mkcs-inj1 (just-inj h) = refl
... | no p = getCs‚Üí‚ààworld' {c} {c'} {r} {w} h
getCs‚Üí‚ààworld' {c} {c'} {r} {choice name t ‚à∑ w} {l} h = getCs‚Üí‚ààworld' {c} {c'} {r} {w} h



preFreezeCs‚äë : (c : Name) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) {r : Res} ‚Üí preCompatibleCs c w r ‚Üí ‚ãÜ·µ£ r t ‚Üí w ‚äë¬∑ freezeCs c w t
preFreezeCs‚äë c w t {r} (l , comp) rt with getCs‚äé c w
... | inj‚ÇÅ (u , p) rewrite p | just-inj comp =
  extChoice w c l t r (getCs‚Üí‚ààworld {c} {r} {w} p) (rt (length l)) --, ¬¨‚â°freezeCs c w t
... | inj‚ÇÇ p rewrite p = ‚ä•-elim (¬¨just‚â°nothing (sym comp))



‚äëfreezeDef : (r : NRes) (w : ùïé¬∑) ‚Üí compatibleNRes r w ‚Üí w ‚äë¬∑ freezeDef r w
‚äëfreezeDef r w comp = preFreezeCs‚äë (NRes.name r) w (Res.def (NRes.res r)) comp (Res.sat (NRes.res r))


‚äëfreezeList : (w : ùïé¬∑) (l : List NRes) ‚Üí compatibleListNRes l w ‚Üí w ‚äë¬∑ freezeList l w
‚äëfreezeList w [] comp = ‚äë-refl¬∑ w
‚äëfreezeList w (x ‚à∑ l) comp = ‚äë-trans¬∑ (‚äëfreezeList w l comp1) (‚äëfreezeDef x (freezeList l w) comp2)
  where
    comp0 : compatibleNRes x w
    comp0 = comp x (here refl)

    comp1 : compatibleListNRes l w
    comp1 r i = comp r (there i)

    comp2 : compatibleNRes x (freezeList l w)
    comp2 = ‚äë‚ÜícompatibleNRes (‚äëfreezeList w l comp1) comp0


‚äëfreezeSeq : {l : List NRes} {w : ùïé¬∑} (n : ‚Ñï) ‚Üí compatibleListNRes l w ‚Üí w ‚äë¬∑ freezeSeq l w n
‚äëfreezeSeq {l} {w} 0 comp = ‚äë-refl¬∑ w
‚äëfreezeSeq {l} {w} (suc n) comp =
  ‚äë-trans¬∑ (‚äëfreezeSeq n comp)
           (‚äëfreezeList (freezeSeq l w n) l (‚äë‚ÜícompatibleListNRes (‚äëfreezeSeq n comp) comp))


¬¨‚ààremNRes : {L : Level} {r : NRes{L}} {l : List (NRes{L})}
              ‚Üí ¬¨ r ‚àà (remNRes (NRes.name r) l)
¬¨‚ààremNRes {L} {r} {x ‚à∑ l} i with NRes.name r ‚âü NRes.name x
... | yes p = ¬¨‚ààremNRes {L} {r} {l} i
¬¨‚ààremNRes {L} {r} {x ‚à∑ l} (here px) | no p rewrite px = ‚ä•-elim (p refl)
¬¨‚ààremNRes {L} {r} {x ‚à∑ l} (there i) | no p = ¬¨‚ààremNRes {L} {r} {l} i


‚àà‚à∑remNRes‚Üí : {L : Level} {r : NRes{L}} {res : Res{L}} {l : List (NRes{L})}
              ‚Üí r ‚àà (mkNRes (NRes.name r) res ‚à∑ remNRes (NRes.name r) l)
              ‚Üí res ‚â° NRes.res r
‚àà‚à∑remNRes‚Üí {L} {r} {res} {l} (here px) rewrite px = refl
‚àà‚à∑remNRes‚Üí {L} {r} {res} {l} (there i) = ‚ä•-elim (¬¨‚ààremNRes {L} {r} {l} i)



‚ààremNRes‚Üí : {L : Level} (name : Name) {r : NRes{L}} {l : List (NRes{L})} ‚Üí r ‚àà remNRes name l ‚Üí r ‚àà l
‚ààremNRes‚Üí {L} name {r} {x ‚à∑ l} i with name ‚âü NRes.name x
... | yes p rewrite p = there (‚ààremNRes‚Üí (NRes.name x) i)
‚ààremNRes‚Üí {L} name {r} {x ‚à∑ l} (here px) | no p rewrite px = here refl
‚ààremNRes‚Üí {L} name {r} {x ‚à∑ l} (there i) | no p = there (‚ààremNRes‚Üí name i)


‚ààwdom‚Üí‚ààworld : {r : NRes} {w : ùïé¬∑} ‚Üí r ‚àà wrdom w ‚Üí Œ£ (List ‚ÑÇ¬∑) (Œª l ‚Üí ‚ààworld (mkcs (NRes.name r) l (NRes.res r)) w)
‚ààwdom‚Üí‚ààworld {r} {start name res ‚à∑ w} i with NRes.name r ‚âü name
... | yes p rewrite (sym p) = getChoices (NRes.name r) w , j
  where
    j : just (mkcs (NRes.name r) (getChoices (NRes.name r) w) res)
        ‚â° just (mkcs (NRes.name r) (getChoices (NRes.name r) w) (NRes.res r))
    j rewrite ‚àà‚à∑remNRes‚Üí {0‚Ñì} {r} {res} {wrdom w} i = refl
‚ààwdom‚Üí‚ààworld {r} {start name res ‚à∑ w} (here px) | no p = ‚ààwdom‚Üí‚ààworld {r} {w} (‚ä•-elim (p e))
  where
    e : NRes.name r ‚â° name
    e rewrite px = refl
‚ààwdom‚Üí‚ààworld {r} {start name res ‚à∑ w} (there i) | no p = ‚ààwdom‚Üí‚ààworld {r} {w} (‚ààremNRes‚Üí name i)
‚ààwdom‚Üí‚ààworld {r} {choice name t ‚à∑ w} i =
  fst (‚ààwdom‚Üí‚ààworld {r} {w} i) , j
  where
    j : ‚ààworld (mkcs (NRes.name r) (proj‚ÇÅ (‚ààwdom‚Üí‚ààworld {r} {w} i)) (NRes.res r)) (choice name t ‚à∑ w)
    j rewrite getCs++‚àâ (NRes.name r) [ choice name t ] w refl = snd (‚ààwdom‚Üí‚ààworld {r} {w} i)


compatibleListNRes-wrdom : (w : ùïé¬∑) ‚Üí compatibleListNRes (wrdom w) w
compatibleListNRes-wrdom w r i = ‚ààwdom‚Üí‚ààworld {r} {w} i


‚äëùïé‚ÜíseqS : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ùïé‚Üíseq w n ‚äë¬∑ ùïé‚Üíseq w (suc n)
‚äëùïé‚ÜíseqS w n = ‚äëfreezeList (ùïé‚Üíseq w n)
                            (wrdom w)
                            (‚äë‚ÜícompatibleListNRes (‚äëfreezeSeq n (compatibleListNRes-wrdom w)) (compatibleListNRes-wrdom w))


ùïé‚ÜícsChain : (w : ùïé¬∑) ‚Üí chain w
ùïé‚ÜícsChain w =
  mkChain
    (ùïé‚Üíseq w)
    (‚äëùïé‚Üíseq0 w)
    (‚äëùïé‚ÜíseqS w)


NRes-nodup : {L : Level} (l : List (NRes{L})) ‚Üí Set
NRes-nodup {L} [] = ‚ä§
NRes-nodup {L} (r ‚à∑ l) = ¬¨ (NRes.name r ‚àà Data.List.map NRes.name l) √ó NRes-nodup l


¬¨‚â°‚Üí‚ààmap-remNRes : {L : Level} {name : Name} {x : NRes{L}} {l : List (NRes{L})}
                   ‚Üí ¬¨ name ‚â° NRes.name x
                   ‚Üí NRes.name x ‚àà Data.List.map NRes.name l
                   ‚Üí NRes.name x ‚àà Data.List.map NRes.name (remNRes name l)
¬¨‚â°‚Üí‚ààmap-remNRes {L} {name} {x} {x‚ÇÅ ‚à∑ l} d (here px) with name ‚âü NRes.name x‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (d (sym px))
... | no p = here px
¬¨‚â°‚Üí‚ààmap-remNRes {L} {name} {x} {x‚ÇÅ ‚à∑ l} d (there i) with name ‚âü NRes.name x‚ÇÅ
... | yes p rewrite p = ¬¨‚â°‚Üí‚ààmap-remNRes {L} {NRes.name x‚ÇÅ} {x} d i
... | no p = there (¬¨‚â°‚Üí‚ààmap-remNRes {L} {name} {x} d i)


‚ààmap-remNRes‚Üí : {L : Level} {name x : Name} {l : List (NRes{L})}
                 ‚Üí x ‚àà Data.List.map NRes.name (remNRes name l)
                 ‚Üí x ‚àà Data.List.map NRes.name l
‚ààmap-remNRes‚Üí {L} {name} {x} {x‚ÇÅ ‚à∑ l} i with name ‚âü NRes.name x‚ÇÅ
... | yes p = there (‚ààmap-remNRes‚Üí i)
‚ààmap-remNRes‚Üí {L} {name} {x} {x‚ÇÅ ‚à∑ l} (here px) | no p = here px
‚ààmap-remNRes‚Üí {L} {name} {x} {x‚ÇÅ ‚à∑ l} (there i) | no p = there (‚ààmap-remNRes‚Üí i)



‚ÜíNRes-nodup-remNRes : {L : Level} (name : Name) (l : List (NRes{L})) ‚Üí NRes-nodup l ‚Üí NRes-nodup (remNRes name l)
‚ÜíNRes-nodup-remNRes {L} name [] nd = nd
‚ÜíNRes-nodup-remNRes {L} name (x ‚à∑ l) (d , nd) with name ‚âü NRes.name x
... | yes p rewrite p = ‚ÜíNRes-nodup-remNRes (NRes.name x) l nd
... | no p = (Œª i ‚Üí d (‚ààmap-remNRes‚Üí i)) , ‚ÜíNRes-nodup-remNRes name l nd


¬¨‚ààmap-remNRes : {L : Level} (name : Name) (l : List (NRes{L})) ‚Üí ¬¨ name ‚àà Data.List.map NRes.name (remNRes name l)
¬¨‚ààmap-remNRes {L} name (x ‚à∑ l) i with name ‚âü NRes.name x
... | yes p = ¬¨‚ààmap-remNRes name l i
¬¨‚ààmap-remNRes {L} name (x ‚à∑ l) (here px) | no p = p px
¬¨‚ààmap-remNRes {L} name (x ‚à∑ l) (there i) | no p = ¬¨‚ààmap-remNRes name l i


NRes-nodup-wdom : (w : ùïé¬∑) ‚Üí NRes-nodup (wrdom w)
NRes-nodup-wdom [] = tt
NRes-nodup-wdom (start name res ‚à∑ w) = ¬¨‚ààmap-remNRes name (wrdom w) , ‚ÜíNRes-nodup-remNRes name (wrdom w) (NRes-nodup-wdom w)
NRes-nodup-wdom (choice name t ‚à∑ w) = NRes-nodup-wdom w


¬¨‚â°‚Üí‚â°getCs-extcs : (c name : Name) (w : ùïé¬∑) (t : ‚ÑÇ¬∑)
                   ‚Üí ¬¨ c ‚â° name
                   ‚Üí getCs c (extcs w name t) ‚â° getCs c w
¬¨‚â°‚Üí‚â°getCs-extcs c name [] t d = refl
¬¨‚â°‚Üí‚â°getCs-extcs c name (start name‚ÇÅ res ‚à∑ w) t d with c ‚âü name‚ÇÅ
... | yes p rewrite p | getChoices++ name‚ÇÅ w [ choice name t ] with name‚ÇÅ ‚âü name
...                                                               | yes q = ‚ä•-elim (d q)
...                                                               | no q rewrite ++[] (getChoices name‚ÇÅ w) = refl
¬¨‚â°‚Üí‚â°getCs-extcs c name (start name‚ÇÅ res ‚à∑ w) t d | no p = ¬¨‚â°‚Üí‚â°getCs-extcs c name w t d
¬¨‚â°‚Üí‚â°getCs-extcs c name (choice name‚ÇÅ t‚ÇÅ ‚à∑ w) t d = ¬¨‚â°‚Üí‚â°getCs-extcs c name w t d


¬¨‚àà‚ÜígetCs-freezeList : {c : Name} {k : List NRes} {w : ùïé¬∑} {e : cs}
                       ‚Üí ¬¨ c ‚àà Data.List.map NRes.name k
                       ‚Üí getCs c w ‚â° just e
                       ‚Üí getCs c (freezeList k w) ‚â° just e
¬¨‚àà‚ÜígetCs-freezeList {c} {[]} {w} {e} ni z = z
¬¨‚àà‚ÜígetCs-freezeList {c} {x ‚à∑ k} {w} {e} ni z
  rewrite ¬¨‚â°‚Üí‚â°getCs-extcs c (NRes.name x) (freezeList k w) (Res.def (NRes.res x)) (Œª x ‚Üí ni (here x)) =
  ¬¨‚àà‚ÜígetCs-freezeList (Œª x ‚Üí ni (there x)) z


getCs-freezeList‚â°-aux : {L : Level} {c name : Name} {k : List (NRes{L})} {r : Res{L}}
                        ‚Üí c ‚â° name
                        ‚Üí mkNRes c r ‚àà k
                        ‚Üí name ‚àà Data.List.map NRes.name k
getCs-freezeList‚â°-aux {L} {c} {name} {x ‚à∑ k} {r} e (here px) rewrite e | sym px = here refl
getCs-freezeList‚â°-aux {L} {c} {name} {x ‚à∑ k} {r} e (there i) = there (getCs-freezeList‚â°-aux e i)


getCs-freezeList‚â° : {c : Name} {r : Res} {k : List NRes} {w : ùïé¬∑} {l : List ‚ÑÇ¬∑}
                    ‚Üí NRes-nodup k
                    ‚Üí mkNRes c r ‚àà k
                    ‚Üí getCs c w ‚â° just (mkcs c l r)
                    ‚Üí getCs c (freezeList k w) ‚â° just (mkcs c (l ‚à∑ ≥ Res.def r) r)
getCs-freezeList‚â° {c} {r} {x ‚à∑ k} {w} {l} (d , nd) (here px) e rewrite sym px = z2
  where
    z1 : getCs c (freezeList k w) ‚â° just (mkcs c l r)
    z1 = ¬¨‚àà‚ÜígetCs-freezeList d e

    z2 : getCs c (freezeList k w ++ choice c (Res.def r) ‚à∑ []) ‚â° just (mkcs c (l ++ Res.def r ‚à∑ []) r)
    z2 rewrite getCs++ c (freezeList k w) [ choice c (Res.def r) ] l r z1 with c ‚âü c
    ... | yes p = refl
    ... | no p = ‚ä•-elim (p refl)

getCs-freezeList‚â° {c} {r} {x ‚à∑ k} {w} {l} (d , nd) (there i) e
  rewrite ¬¨‚â°‚Üí‚â°getCs-extcs c (NRes.name x) (freezeList k w) (Res.def (NRes.res x)) (Œª x ‚Üí d (getCs-freezeList‚â°-aux x i)) =
  getCs-freezeList‚â° nd i e



‚Üí‚ààremNRes : {L : Level} (name : Name) {r : NRes{L}} {l : List (NRes{L})} ‚Üí ¬¨ NRes.name r ‚â° name  ‚Üí r ‚àà l ‚Üí r ‚àà remNRes name l
‚Üí‚ààremNRes {L} name {r} {x ‚à∑ l} d (here px) with name ‚âü NRes.name x
... | yes p rewrite px | p = ‚ä•-elim (d refl)
... | no p rewrite px = here refl
‚Üí‚ààremNRes {L} name {r} {x ‚à∑ l} d (there i) with name ‚âü NRes.name x
... | yes p rewrite p = ‚Üí‚ààremNRes (NRes.name x) d i
... | no p = there (‚Üí‚ààremNRes name d i)



getCs‚ÜímkNRes‚ààwrdom : {c : Name} {w : ùïé¬∑} {l : List ‚ÑÇ¬∑} {r : Res}
                      ‚Üí getCs c w ‚â° just (mkcs c l r)
                      ‚Üí mkNRes c r ‚àà wrdom w
getCs‚ÜímkNRes‚ààwrdom {c} {start name res ‚à∑ w} {l} {r} e with c ‚âü name
... | yes p rewrite p | mkcs-inj1 (just-inj e) | mkcs-inj3 (just-inj e) = here refl
... | no p = there (‚Üí‚ààremNRes name p (getCs‚ÜímkNRes‚ààwrdom {c} {w} e))
getCs‚ÜímkNRes‚ààwrdom {c} {choice name t ‚à∑ w} {l} {r} e = getCs‚ÜímkNRes‚ààwrdom {c} {w} e



wrdom-freezeDef : (w : ùïé¬∑) (x : NRes) ‚Üí wrdom (freezeDef x w) ‚â° wrdom w
wrdom-freezeDef [] x = refl
wrdom-freezeDef (start name res ‚à∑ w) x rewrite wrdom-freezeDef w x = refl
wrdom-freezeDef (choice name t ‚à∑ w) x = wrdom-freezeDef w x


wrdom-freezeList : (w : ùïé¬∑) (l : List NRes) ‚Üí wrdom (freezeList l w) ‚â° wrdom w
wrdom-freezeList w [] = refl
wrdom-freezeList w (x ‚à∑ l) rewrite wrdom-freezeDef (freezeList l w) x = wrdom-freezeList w l


wrdom-freezeSeq : (w : ùïé¬∑) (l : List NRes) (n : ‚Ñï) ‚Üí wrdom (freezeSeq l w n) ‚â° wrdom w
wrdom-freezeSeq w l 0 = refl
wrdom-freezeSeq w l (suc n) rewrite wrdom-freezeList (freezeSeq l w n) l = wrdom-freezeSeq w l n


‚ààwrdom-freezeSeq‚Üí : (r : NRes) (l : List NRes) (w : ùïé¬∑) (n : ‚Ñï)
                     ‚Üí r ‚àà wrdom (freezeSeq l w n)
                     ‚Üí r ‚àà wrdom w
‚ààwrdom-freezeSeq‚Üí r l w n i rewrite wrdom-freezeSeq w l n  = i


csChainProgress : (w : ùïé¬∑) (x : Name) (n : ‚Ñï) {r : Res{0‚Ñì}}
                  ‚Üí compatibleCs x (chain.seq (ùïé‚ÜícsChain w) n) r
                  ‚Üí Œ£ ‚Ñï (Œª m ‚Üí n < m √ó progressCs x (chain.seq (ùïé‚ÜícsChain w) n) (chain.seq (ùïé‚ÜícsChain w) m))
csChainProgress w x n {r} (l , comp , sat) = suc n , n<1+n n , p
  where
    p : progressCs x (chain.seq (ùïé‚ÜícsChain w) n) (chain.seq (ùïé‚ÜícsChain w) (suc n))
    p l' r' i rewrite comp rewrite sym (mkcs-inj2 (just-inj i)) | sym (mkcs-inj3 (just-inj i)) = [ Res.def r ] , e , ‚â§-refl
      where
        i1 : mkNRes x r ‚àà wrdom (freezeSeq (wrdom w) w n)
        i1 = getCs‚ÜímkNRes‚ààwrdom {x} {freezeSeq (wrdom w) w n} comp

        i2 : mkNRes x r ‚àà wrdom w
        i2 = ‚ààwrdom-freezeSeq‚Üí (mkNRes x r) (wrdom w) w n i1

        e : getCs x (freezeList (wrdom w) (freezeSeq (wrdom w) w n)) ‚â° just (mkcs x (l ‚à∑ ≥ Res.def r) r)
        e = getCs-freezeList‚â° {x} {r} {wrdom w} {freezeSeq (wrdom w) w n} {l} (NRes-nodup-wdom w) i2 comp



open import progress(PossibleWorldsCS)(choiceCS)(compatibleCS)

progressCS : Progress
progressCS =
  mkProgress
    progressCs
    ùïé‚ÜícsChain
    csChainProgress

open import progressDef(PossibleWorldsCS)(choiceCS)(compatibleCS)(progressCS)



-- ####### choice instance

-- We now define an instance of CsChoice
-- similar to lookup
getCsChoice : (n : ‚Ñï) (name : Name) (w : world) ‚Üí Maybe ‚ÑÇ¬∑
getCsChoice n name w with getCs name w
... | just (mkcs _ l _) = select n l
... | nothing = nothing



resSatCs-select‚Üí¬∑·µ£ : (i : ‚Ñï) {n : ‚Ñï} {r : Res} (l : List ‚ÑÇ¬∑) {t : ‚ÑÇ¬∑}
                     ‚Üí resSatCs i l r
                     ‚Üí select n l ‚â° just t
                     ‚Üí ¬∑·µ£ r (i + n) t
resSatCs-select‚Üí¬∑·µ£ i {0} {r} (x ‚à∑ l) {t} (sat‚ÇÅ , sat‚ÇÇ) sel rewrite +-comm i 0 | just-inj sel = sat‚ÇÅ
resSatCs-select‚Üí¬∑·µ£ i {suc n} {r} (x ‚à∑ l) {t} (sat‚ÇÅ , sat‚ÇÇ) sel rewrite +-suc i n = resSatCs-select‚Üí¬∑·µ£ (suc i) l sat‚ÇÇ sel


getCsChoiceCompatible : (c : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) (n : ‚Ñï) (t : ‚ÑÇ¬∑)
                        ‚Üí compatibleCs c w r ‚Üí getCsChoice n c w ‚â° just t ‚Üí ¬∑·µ£ r n t
getCsChoiceCompatible c r w n t (l , comp , sat) g rewrite comp = resSatCs-select‚Üí¬∑·µ£ 0 l sat g



-- We're really only generating numbers as choices here
T‚Üí‚ÑÇcs : Term ‚Üí ‚ÑÇ¬∑
T‚Üí‚ÑÇcs (NUM n) = n
T‚Üí‚ÑÇcs _ = 0


-- only extend if cs's restriction was decidable
chooseCS : (cs : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑) ‚Üí ùïé¬∑
chooseCS n w c with getCs‚äé n w
... | inj‚ÇÅ (mkcs name l r , e) with Res.dec r
... |    (true , D) with D (length l) c
... |       inj‚ÇÅ y = extcs w n c
... |       inj‚ÇÇ y = w
chooseCS n w c | inj‚ÇÅ (mkcs name l r , e) | (false , _) = w
chooseCS n w c | inj‚ÇÇ _ = w


chooseCS‚äë : (cs : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑) ‚Üí w ‚äë¬∑ chooseCS cs w c
chooseCS‚äë n w c with getCs‚äé n w
... | inj‚ÇÅ (mkcs name l r , e) with Res.dec r
... |    (true , D) with D (length l) c
... |       inj‚ÇÅ y = extChoice w n l c r (getCs‚Üí‚ààworld' {n} {name} {r} {w} e) y
... |       inj‚ÇÇ y = ‚äë-refl¬∑ _
chooseCS‚äë n w c | inj‚ÇÅ (mkcs name l r , e) | (false , _) = ‚äë-refl¬∑ _
chooseCS‚äë n w c | inj‚ÇÇ _ = ‚äë-refl¬∑ _


is‚ÑÇ‚ÇÄcs : ‚ÑÇ¬∑ ‚Üí Bool
is‚ÑÇ‚ÇÄcs 0 = true
is‚ÑÇ‚ÇÄcs _ = false


open import getChoice(PossibleWorldsCS)(choiceCS)(compatibleCS)

getChoiceCS : GetChoice
getChoiceCS = mkGetChoice getCsChoice T‚Üí‚ÑÇcs chooseCS chooseCS‚äë
-- wdom
-- getCsChoiceCompatible

open import getChoiceDef(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)



dec‚ÑÇ‚ÇÄcs : (c : ‚ÑÇ¬∑) ‚Üí c ‚â° 0 ‚äé ¬¨ c ‚â° 0
dec‚ÑÇ‚ÇÄcs 0 = inj‚ÇÅ refl
dec‚ÑÇ‚ÇÄcs (suc n) = inj‚ÇÇ Œª ()


dec‚ÑÇ‚ÇÅcs : (c : ‚ÑÇ¬∑) ‚Üí c ‚â° 1 ‚äé ¬¨ c ‚â° 1
dec‚ÑÇ‚ÇÅcs 0 = inj‚ÇÇ Œª ()
dec‚ÑÇ‚ÇÅcs 1 = inj‚ÇÅ refl
dec‚ÑÇ‚ÇÅcs (suc (suc n)) = inj‚ÇÇ Œª ()


open import choiceExt{1‚Ñì}(PossibleWorldsCS)(choiceCS)

choiceExtCS : ChoiceExt
choiceExtCS = mkChoiceExt 0 1 dec‚ÑÇ‚ÇÄcs dec‚ÑÇ‚ÇÅcs

open import choiceExtDef(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)(choiceExtCS)




newCsChoice : (w : ùïé¬∑) ‚Üí Name
newCsChoice w = fst (freshName (wdom w))


startCsChoice : (cs : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
startCsChoice cs r w = newcs w cs r


startNewCsChoice : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
startNewCsChoice r w = startCsChoice (newCsChoice w) r w


getCs-newcs : (w : ùïé¬∑) (name : Name) (r : Res)
              ‚Üí ¬¨ (name ‚àà wdom w)
              ‚Üí getCs name (newcs w name r) ‚â° just (mkcs name [] r)
getCs-newcs [] name r ni with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)
getCs-newcs (start name‚ÇÅ res ‚à∑ w) name r ni with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = getCs-newcs w name r (Œª x ‚Üí ni (there x))
getCs-newcs (choice name‚ÇÅ t ‚à∑ w) name r ni = getCs-newcs w name r ni


getCsChoice-startCsChoice-nothing : (n : ‚Ñï) (r : Res) (w : ùïé¬∑) (name : Name)
                                    ‚Üí ¬¨ (name ‚àà wdom w)
                                    ‚Üí getCsChoice n name (startCsChoice name r w) ‚â° nothing
getCsChoice-startCsChoice-nothing n r w name ni rewrite getCs-newcs w name r ni = refl


getCsChoice-startCsChoice : (n : ‚Ñï) (r : Res) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) (name : Name)
                            ‚Üí ¬¨ name ‚àà wdom w
                            ‚Üí getCsChoice n name (startCsChoice name r w) ‚â° just t ‚Üí t ‚â° Res.def r
getCsChoice-startCsChoice n r w t name ni e rewrite getCsChoice-startCsChoice-nothing n r w name ni
  = ‚ä•-elim (¬¨just‚â°nothing (sym e))


¬¨‚â°startNewCsChoice : (name : Name) (r : Res) (w : world) ‚Üí ¬¨ w ‚â° startCsChoice name r w
¬¨‚â°startNewCsChoice name r (x ‚à∑ w) e = ¬¨‚â°startNewCsChoice name r w (snd (‚à∑-injective e))


startCsChoice‚äè : (r : Res) (w : ùïé¬∑) (name : Name) ‚Üí ¬¨ name ‚àà wdom w ‚Üí w ‚äë¬∑ startCsChoice name r w
startCsChoice‚äè r w name ni = extEntry w name r ni


startCsChoiceCompatible : (r : Res{0‚Ñì}) (w : ùïé¬∑) (name : Name) ‚Üí ¬¨ name ‚àà wdom w ‚Üí compatibleCs name (startCsChoice name r w) r
startCsChoiceCompatible r w name ni rewrite getCs-newcs w name r ni =
  [] , refl , tt



open import newChoice(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)

newChoiceCS : NewChoice
newChoiceCS =
  mkNewChoice
    wdom --newCsChoice
    wnames
    startCsChoice
    getCsChoice-startCsChoice
    startCsChoice‚äè
    startCsChoiceCompatible

open import newChoiceDef(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)(newChoiceCS)


open import encoding3(E)


open import computation(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)(choiceExtCS)(newChoiceCS)(enc)


#‚â†01 : (w : ùïé¬∑) ‚Üí ¬¨ ‚àºC! w (#NUM 0) (#NUM 1)
#‚â†01 w h = x (#compVal (‚àºC!‚Üí#‚áì {w} {#NUM 0} {#NUM 1} tt h) tt)
  where
    x : #NUM 0 ‚â° #NUM 1 ‚Üí ‚ä•
    x ()


‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 : T‚Üí‚ÑÇ¬∑ ‚åú C‚ÑÇ‚ÇÄ ‚åù ‚â° ‚ÑÇ‚ÇÄ¬∑
‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 = refl


‚ÑÇ‚ÜíT‚Üí‚ÑÇ1 : T‚Üí‚ÑÇ¬∑ ‚åú C‚ÑÇ‚ÇÅ ‚åù ‚â° ‚ÑÇ‚ÇÅ¬∑
‚ÑÇ‚ÜíT‚Üí‚ÑÇ1 = refl


open import choiceVal{1‚Ñì}(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)(choiceExtCS)(newChoiceCS)(enc)

choiceValCS : ChoiceVal
choiceValCS = mkChoiceVal #‚â†01 tt tt ‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 ‚ÑÇ‚ÜíT‚Üí‚ÑÇ1

open import choiceValDef(PossibleWorldsCS)(choiceCS)(compatibleCS)(getChoiceCS)(choiceExtCS)(newChoiceCS)(enc)(choiceValCS)


getRes : Name ‚Üí world ‚Üí Res
getRes name [] = Res‚ä§
getRes name (start n r ‚à∑ w) with name ‚âü n
... | yes p = r
... | no p = getRes name w
getRes name (choice _ _ ‚à∑ w) = getRes name w


{--
data ‚â∫cs (c : Name) : cs ‚Üí cs ‚Üí Set‚ÇÅ where
  ‚â∫CS : (l l' : List ‚ÑÇ¬∑) (r : Res)
        ‚Üí 0 < length l'
        ‚Üí ‚â∫cs c (mkcs c l r) (mkcs c (l ++ l') r)
--}



getRes-newcs : (c : Name) (r : Res) (w : ùïé¬∑)
               ‚Üí ¬¨ (c ‚àà wdom w)
               ‚Üí getRes c (newcs w c r) ‚â° r
getRes-newcs c r [] ni with c ‚âü c
... | yes p = refl
... | no p = ‚ä•-elim (p refl)
getRes-newcs c r (start name res ‚à∑ w) ni with c ‚âü name
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = getRes-newcs c r w Œª x ‚Üí ni (there x)
getRes-newcs c r (choice name t ‚à∑ w) ni = getRes-newcs c r w ni



{--
getChoices-newcs : (c : Name) (r : Res) (w : ùïé¬∑)
                   ‚Üí ¬¨ (c ‚àà wdom w)
                   ‚Üí getChoices c (newcs w c r) ‚â° []
getChoices-newcs c r [] ni with c ‚âü c
... | yes p = refl
... | no p = ‚ä•-elim (p refl)
getChoices-newcs c r (start name res ‚à∑ w) ni = getChoices-newcs c r w (Œª x ‚Üí ni (there x))
getChoices-newcs c r (choice name t ‚à∑ w) ni with c ‚âü name
... | yes p rewrite p = {!!}
... | no p = getChoices-newcs c r w ni
--}



freezableCs : (c : Name) (w : ùïé¬∑) ‚Üí Set
freezableCs c w = ‚ä§


freezableStartCs : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí freezableCs (newCsChoice w) (startNewCsChoice r w)
freezableStartCs r w = tt


freezeCs‚äë : (c : Name) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) {r : Res} ‚Üí compatibleCs c w r ‚Üí ‚ãÜ·µ£ r t ‚Üí w ‚äë¬∑ freezeCs c w t
freezeCs‚äë c w t {r} (l , comp , sat) rt = preFreezeCs‚äë c w t (l , comp) rt



getChoiceŒ£ : (k : ‚Ñï) (name : Name) (w : world) (t : ‚ÑÇ¬∑)
             ‚Üí getCsChoice k name w ‚â° just t
             ‚Üí Œ£ (List ‚ÑÇ¬∑) (Œª l ‚Üí Œ£ Res (Œª r ‚Üí getCs name w ‚â° just (mkcs name l r) √ó select k l ‚â° just t))
getChoiceŒ£ k name w t gc with getCs‚äé name w
... | inj‚ÇÅ (mkcs n l r , p) rewrite p | getCs-same-name name w (mkcs n l r) p = (l , r , refl , gc)
getChoiceŒ£ k name w t gc | inj‚ÇÇ p rewrite p = ‚ä•-elim (¬¨just‚â°nothing (sym gc))



‚âΩ-pres-getChoice : {w1 w2 : world} {k : ‚Ñï} {name : Name} {t : ‚ÑÇ¬∑}
                   ‚Üí w2 ‚âΩ w1
                   ‚Üí getCsChoice k name w1 ‚â° just t
                   ‚Üí getCsChoice k name w2 ‚â° just t
‚âΩ-pres-getChoice {w1} {w2} {k} {name} {t} ext gc = gc3
  where
    h : Œ£ (List ‚ÑÇ¬∑) (Œª l ‚Üí Œ£ Res (Œª r ‚Üí getCs name w1 ‚â° just (mkcs name l r) √ó select k l ‚â° just t))
    h = getChoiceŒ£ k name w1 t gc

    l : List ‚ÑÇ¬∑
    l = proj‚ÇÅ h

    r : Res
    r = proj‚ÇÅ (proj‚ÇÇ h)

    gc1 : getCs name w1 ‚â° just (mkcs name l r)
    gc1 = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ h))

    sel : select k l ‚â° just t
    sel = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ h))

    q : Œ£ (List ‚ÑÇ¬∑) (Œª l' ‚Üí getCs name w2 ‚â° just (mkcs name (l ++ l') r) √ó pres-resSatCs l l' r)
    q = ‚âΩ-pres-getCs ext gc1

    l' : List ‚ÑÇ¬∑
    l' = fst q

    gc2 : getCs name w2 ‚â° just (mkcs name (l ++ l') r)
    gc2 = fst (snd q)

    gc3 : getCsChoice k name w2 ‚â° just t
    gc3 rewrite gc2 = select++-just {0‚Ñì} {‚ÑÇ¬∑} {k} {l} {l'} sel



getFreezeCsAux : (c : Name) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) {r : Res{0‚Ñì}}
              ‚Üí compatibleCs c w r
              ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freezeCs c w t) (Œª w' _ ‚Üí Lift 2‚Ñì (getCsChoice n c w' ‚â° just t)))
getFreezeCsAux c w t {r} (l , comp , sat) =
  length l , aw
  where
    aw : ‚àÄùïé (freezeCs c w t) (Œª w' _ ‚Üí Lift 2‚Ñì (getCsChoice (length l) c w' ‚â° just t))
    aw w1 e1 = lift (‚âΩ-pres-getChoice e1 g)
      where
        g : getCsChoice (length l) c (freezeCs c w t) ‚â° just t
        g rewrite getCs++-same-choice c w l r t comp | select-last l t = refl



-- We could make use of Rfrz? as we did in worldInstanceRef
getFreezeCs : (c : Name) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) {r : Res{0‚Ñì}}
              ‚Üí compatibleCs c w r
              ‚Üí Rfrz? r
              ‚Üí freezableCs c w
              ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freezeCs c w t) (Œª w' _ ‚Üí Lift 2‚Ñì (getCsChoice n c w' ‚â° just t)))
getFreezeCs c w t {r} compat frz fb = getFreezeCsAux c w t {r} compat


open import freeze(PossibleWorldsCS)(choiceCS)(compatibleCS)(progressCS)(getChoiceCS)(newChoiceCS)

freezeCS : Freeze
freezeCS =
  mkFreeze
--    compatibleCs
--    ‚äë-compatibleCs
--    startCsChoiceCompatible
--    getCsChoiceCompatible
    freezeCs
    freezableCs
    freezeCs‚äë
    getFreezeCs
    freezableStartCs
    --freezeCsProgress

open import freezeDef(PossibleWorldsCS)(choiceCS)(compatibleCS)(progressCS)(getChoiceCS)(newChoiceCS)(freezeCS)


getChoice-extcs-last : (w : ùïé¬∑) (k : ‚Ñï) (name : Name) (l : List ‚ÑÇ¬∑) (r : Res) (t : ‚ÑÇ¬∑)
                       ‚Üí k ‚â° length l
                       ‚Üí getCs name w ‚â° just (mkcs name l r)
                       ‚Üí getChoice¬∑ k name (extcs w name t) ‚â° just t
getChoice-extcs-last w k name l r t e h rewrite e | getCs++ name w [ choice name t ] l r h with name ‚âü name
... | yes p = select-last l t
... | no p = ‚ä•-elim (p refl)


‚âΩ-Œ£getChoice : (w1 w2 : ùïé¬∑) (name : Name) (l1 l2 : List ‚ÑÇ¬∑) (r : Res) (k : ‚Ñï)
               ‚Üí ‚ààworld (mkcs name l1 r) w1
               ‚Üí ‚ààworld (mkcs name l2 r) w2
               ‚Üí length l1 ‚â§ k
               ‚Üí k < length l2
               ‚Üí w2 ‚âΩ w1
               ‚Üí Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí Œ£ world (Œª w ‚Üí Œ£ (List ‚ÑÇ¬∑) (Œª l ‚Üí
                     getChoice¬∑ k name (extcs w name t) ‚â° just t
                   √ó ‚ààworld (mkcs name l r) w
                   √ó k ‚â° length l
                   √ó w2 ‚âΩ (extcs w name t)
                   √ó w ‚âΩ w1
                   √ó ¬∑·µ£ r k t)))
‚âΩ-Œ£getChoice w1 .w1 name l1 l2 r k i1 i2 len1 len2 (extRefl .w1)
  rewrite i1 | sym (mkcs-inj2 (just-inj i2)) = ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
‚âΩ-Œ£getChoice w1 w2 name l1 l2 r k i1 i2 len1 len2 (extTrans {w1} {w3} {w2} ext ext‚ÇÅ) with ‚âΩ-pres-‚ààworld ext‚ÇÅ i1
... | (l , iw , pres) with k <? length (l1 ++ l)
...            | yes p =
  let (t , w , l0 , h1 , h2 , h3 , h4 , h5 , h6) = ‚âΩ-Œ£getChoice w1 w3 name l1 (l1 ++ l) r k i1 iw len1 p ext‚ÇÅ in
  (t , w , l0 , h1 , h2 , h3 , extTrans ext h4 , h5 , h6)
...            | no p =
  let (t , w , l0 , h1 , h2 , h3 , h4 , h5 , h6) = ‚âΩ-Œ£getChoice w3 w2 name (l1 ++ l) l2 r k iw i2 (‚âÆ‚áí‚â• p) len2 ext in
  (t , w , l0 , h1 , h2 , h3 , h4 , extTrans h5 ext‚ÇÅ , h6)
‚âΩ-Œ£getChoice w1 .(w1 ++ choice name‚ÇÅ t ‚à∑ []) name l1 l2 r k i1 i2 len1 len2 (extChoice .w1 name‚ÇÅ l t res x x‚ÇÅ) with name ‚âü name‚ÇÅ
... | yes p rewrite p | x | sym (mkcs-inj2 (just-inj i1))
                    | sym (mkcs-inj3 (just-inj i1))
                    | getCs++ name‚ÇÅ w1 [ choice name‚ÇÅ t ] l res x
                    | sym (mkcs-inj2 (just-inj i2))
            with name‚ÇÅ ‚âü name‚ÇÅ
...         | yes q rewrite length-++ l {[ t ]} | +-comm (length l) 1 =
              let len : k ‚â° length l
                  len = ‚â§-s‚â§s-‚â° _ _ len1 len2 in
                  (t , w1 , l , getChoice-extcs-last w1 k name‚ÇÅ l res t len x ,
                    x , len , extRefl (extcs w1 name‚ÇÅ t) , extRefl w1 , subst (Œª x ‚Üí ¬∑·µ£ res x t) (sym len) x‚ÇÅ)
...         | no q rewrite ++[] l = ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
‚âΩ-Œ£getChoice w1 .(w1 ++ choice name‚ÇÅ t ‚à∑ []) name l1 l2 r k i1 i2 len1 len2 (extChoice .w1 name‚ÇÅ l t res x x‚ÇÅ)
    | no p rewrite getCs++ name w1 [ choice name‚ÇÅ t ] l1 r i1
           with name ‚âü name‚ÇÅ
...        | yes q = ‚ä•-elim (p q)
...        | no q rewrite ++[] l1 | sym (mkcs-inj2 (just-inj i2)) = ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
‚âΩ-Œ£getChoice w1 .(w1 ++ start name‚ÇÅ res ‚à∑ []) name l1 l2 r k i1 i2 len1 len2 (extEntry .w1 name‚ÇÅ res x) with name ‚âü name‚ÇÅ
... | yes p rewrite p | getCs++ name‚ÇÅ w1 [ start name‚ÇÅ res ] l1 r i1 | ++[] l1 | sym (mkcs-inj2 (just-inj i2)) =
  ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
... | no p rewrite getCs++ name w1 [ start name‚ÇÅ res ] l1 r i1 | ++[] l1 | sym (mkcs-inj2 (just-inj i2)) =
  ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
\end{code}
