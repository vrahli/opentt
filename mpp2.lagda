\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode
open import MarkovPrinciple


module mpp2 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
            (C : Choice)
            (K : Compatible W C)
            (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
            (N : NewChoice {L} W C K G)
            (MP : MarkovPrinciple (lsuc(L)))
            (EM : ExcludedMiddle (lsuc(L))) -- only to use mpp.lagda, but shouldn't be needed
            (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
  using (‚â°EQ ; ‚â°APPLY ; ‚â°NATREC)
open import terms4(W)(C)(K)(G)(X)(N)(EC)
  using (¬¨Names‚Üí‚áì)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚àÄùïé-‚ñ°Func2 ; ‚àÄùïé-‚ñ°Func3)
open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#‚áõ-mon)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypesFUN‚Üê ; equalInType-refl ; equalInType-mon ; equalInType-FUN‚Üí ; ‚â°CTerm‚ÜíequalInType ; NUM-equalInType-NAT! ;
         equalInType-NAT!‚Üí ; equalInType-SUM ; isTypeNAT! ; equalInType-FUN ; equalInType-local ; equalInType-PI ;
         eqTypesNEG‚Üê ; ‚Üí‚â°equalTypes ; ‚Üí‚â°equalInType ; equalInType-sym ; equalInType-PI‚Üí ; equalInType-SUM‚Üí ; equalInType-NEG ;
         equalInType-SQUASH‚Üí ; equalInType-EQ‚Üí ; equalInType-EQ ; ‚â°CTerm‚ÜíeqTypes)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (isTypeBOOL ; isTypeBOOL! ; sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-NEG-ASSERT‚ÇÇ-APPLY ;
         equalInType-trans ; equalInType-BOOL‚Üí ; ‚ÜíequalInType-BOOL ; equalInType-NEG‚Üí¬¨inh ; ‚ÜíequalInType-SQUASH ;
         ‚ÜíequalInType-BOOL! ; sub0-ASSERT‚ÇÉ-APPLY ; inhType-mon ; equalInType-BOOL!‚Üí ; equalInType-BOOL‚ÇÄ!‚Üí ;
         equalInType-#‚áõ-LR ; equalTypes‚ÜíequalInType ; ‚ÜíequalInType-BOOL‚ÇÄ! ; isTypeBOOL‚ÇÄ!‚Üí)
open import props4(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalInType-NAT!)
open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#‚áõ‚Çö-left-right-rev ; SUMeq! ; equalInType-SUM! ; equalInType-SUM!‚Üí)
open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ ; #SUM-ASSERT‚ÇÖ ; #ASSERT‚ÇÑ ; #[0]ASSERT‚ÇÑ ; sub0-ASSERT‚ÇÑ-APPLY ; ‚â°ASSERT‚ÇÑ ;
         equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ ; #ASSERT‚ÇÑ‚â°)
open import pure(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-TPURE‚Üí ; #¬¨Names-APPLY ; ¬¨Names‚Üí‚áõ! ; equalInType-TPURE‚Üí‚Çó ; equalInType-TPURE‚Üí·µ£ ; #‚áõ!nv ; #‚áõv ;
         ‚Üí#‚áõ!-APPLY ; APPLY#‚áõ‚Üí#‚áõ!nv ; #‚áõ!-pres-#‚áõ!nv ; #‚áõ!‚Üí‚ààType ; #‚áõ!‚ÜíequalInType)
open import pure2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (Œ†pure‚Üí‚ÇÇ ; #[0]MP-left2-qt‚ÇÑ ; #[0]MP-right2-qt‚ÇÑ ; mpEvalEx)

open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#[0]MP-left ; #[0]MP-right ; #[0]MP-left3 ; #[0]MP-left2 ; #[0]MP-right2 ; #[0]MP-left-qt ; #[0]MP-right-qt ;
         #[0]MP-left-qt‚ÇÇ ; #[0]MP-right-qt‚ÇÇ ; #[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ; sub0-fun-mp ; ‚ÜíequalTypes-#MP-left ;
         ‚ÜíequalTypes-#MP-right ; #MP-left ; #MP-right ; sub0-fun-mp‚ÇÑ ; ‚ÜíequalTypes-#MP-left-qt ; ‚ÜíequalTypes-#MP-right-qt ;
         #MP-left-qt ; #MP-right-qt ; sub0-fun-mp‚ÇÇ ; ‚ÜíequalTypes-#MP-left3 ; ‚Üí‚ààType-FUN ;
         #MP-left3 ; ‚Üí‚ààType-PI ; sub0-fun-mp‚ÇÉ ; ‚ÜíequalTypes-#MP-left2 ;
         ‚ÜíequalTypes-#MP-right2 ; #MP-left2 ; #MP-right2 ; sub0-fun-mp‚ÇÜ ; ‚ÜíequalTypes-#MP-left-qt‚ÇÉ ;
         ‚ÜíequalTypes-#MP-right-qt‚ÇÉ ; #MP-left-qt‚ÇÉ ; #MP-right-qt‚ÇÉ ; #[0]MP-right2-qt‚ÇÉ ;
         #MP-right2-qt‚ÇÉ ; isType-MP-right-qt‚ÇÉ-body ; #MP-left2-qt‚ÇÉ ;
         #[0]MP-left2-qt‚ÇÉ ; sub0-fun-mp-qt‚ÇÉ)
open import mp_props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ ; equalInType-#MP-left-qt‚ÇÉ‚Üí ; ‚ÜíequalTypes-#MP-left2-qt‚ÇÉ ; ‚ÜíequalInType-#MP-left-qt‚ÇÉ)
-- ;
--         #MP-left2‚Üí#MP-left ; #MP-left3‚Üí#MP-left2 ; equalInType-#MP-left-qt‚Üí ; #MP-left2‚Üí#MP-left3)
-- MOVE all these usings to a separate file so that we don't have to rely on ExcludedMiddle
open import mpp(W)(M)(C)(K)(G)(X)(N)(EM)(EC)
  using (#MPp‚ÇÜ ; ‚ÜíinhType-ASSERT‚ÇÑ-APPLY ; #¬¨Names‚ÜíinhType-ASSERT‚ÇÑ ; strongBool!-BTRUE‚Üí ; equalInType-ASSERT‚ÇÑ‚Üí ;
         isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! ; #lamInfSearchP ; #lamInfSearchPP ; #APPLY-#lamInfSearchP-#‚áõ! ;
         #APPLY-#lamInfSearchPP#‚áõ!)
open import mp_search(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#infSearchP ; #‚áõ!same‚Ñï-mon ; #infSearch ; #infSearchF ; #infSearchI ; #infSearch‚áõ‚ÇÅ ; #infSearch‚áõ‚ÇÇ ; #infSearch‚áõ‚ÇÉ ;
         #¬¨Names‚Üí‚áõ! ; #¬¨Names-#infSearch ; #‚áõ!-mon)


#‚áõ!-pres-equalTypes-mp-qt3-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                               ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                               ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                               ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                               ‚Üí equalTypes i w (#FUN (#MP-left-qt‚ÇÉ b‚ÇÅ) (#MP-right-qt‚ÇÉ b‚ÇÅ)) (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ))
#‚áõ!-pres-equalTypes-mp-qt3-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ =
  eqTypesFUN‚Üê {w} {i} {#MP-left-qt‚ÇÉ b‚ÇÅ} {#MP-right-qt‚ÇÉ b‚ÇÅ} {#MP-left-qt‚ÇÉ a‚ÇÅ} {#MP-right-qt‚ÇÉ a‚ÇÅ}
    (‚ÜíequalTypes-#MP-left-qt‚ÇÉ
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))
    (‚ÜíequalTypes-#MP-right-qt‚ÇÉ
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))


#‚áõ!-pres-equalInType-mp-qt3-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                                ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                                ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                                ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                                ‚Üí equalInType i w (#FUN (#MP-left-qt‚ÇÉ b‚ÇÅ) (#MP-right-qt‚ÇÉ b‚ÇÅ)) (#APPLY #lam2AX b‚ÇÅ) (#APPLY #lam2AX b‚ÇÇ)
                                ‚Üí equalInType i w (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ)
#‚áõ!-pres-equalInType-mp-qt3-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ b‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev
    {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
    (Œª w1 e1 ‚Üí lift (1 , refl))
    (Œª w1 e1 ‚Üí lift (1 , refl))
    (equalTypes‚ÜíequalInType
      (#‚áõ!-pres-equalTypes-mp-qt3-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ)
      (equalInType-#‚áõ-LR {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
        (Œª w1 e1 ‚Üí lift (1 , refl))
        (Œª w1 e1 ‚Üí lift (1 , refl))
        b‚àà))


-- This version is the same as MPp‚ÇÜ in mpp.lagda but the proof uses MP instead of LEM
MPp‚ÇÜ-inh‚ÇÇ : (exb : ‚àÉ‚ñ°) (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÜ #lam2AX
MPp‚ÇÜ-inh‚ÇÇ exb n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! w' n)
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÜ a‚ÇÅ))
        (equalInType-local (‚àÄùïé-‚ñ°Func2 awp (equalInType-TPURE‚Üí‚Çó eqa) (equalInType-TPURE‚Üí·µ£ eqa)))
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!‚Çô a‚ÇÅ w'
                           ‚Üí #‚áõ!‚Çô a‚ÇÇ w'
                           ‚Üí equalInType n w' (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
      awp w1' e1' (x‚ÇÅ , comp‚ÇÅ , nnx‚ÇÅ , nex‚ÇÅ) (x‚ÇÇ , comp‚ÇÇ , nnx‚ÇÇ , nex‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp-qt3-fun n w1' a‚ÇÅ a‚ÇÇ x‚ÇÅ x‚ÇÇ
          (equalInType-mon (equalInType-TPURE‚Üí eqa) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             aw3)
        where
        eqx : equalInType n w1' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) x‚ÇÅ x‚ÇÇ
        eqx = equalInType-#‚áõ-LR comp‚ÇÅ comp‚ÇÇ (equalInType-mon eqa w1' e1')

        aw3 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt‚ÇÉ x‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right-qt‚ÇÉ x‚ÇÅ) (#APPLY (#APPLY #lam2AX x‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX x‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí inhType n w' (#SUM-ASSERT‚ÇÖ x‚ÇÅ))
            aw4 w3 e3 = cc1 cc2
              where
                cc4 : (k : ‚Ñï) ‚Üí Dec (inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))
                cc4 k = cc5 eqa3
                  where
                    eqa1 : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) (#APPLY x‚ÇÇ (#NUM k)))
                    eqa1 = equalInType-BOOL‚ÇÄ!‚Üí
                             n w3 (#APPLY x‚ÇÅ (#NUM k)) (#APPLY x‚ÇÇ (#NUM k))
                             (equalInType-FUN‚Üí
                               (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-TPURE‚Üí eqx)) w3 (‚äë-trans¬∑ e2 e3)
                               (#NUM k) (#NUM k) (NUM-equalInType-NAT! n w3 k))

                    eqa2 : ‚àÉùïé w3 (Œª w' _ ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) (#APPLY x‚ÇÇ (#NUM k)))
                    eqa2 = exb eqa1

                    w4 : ùïé¬∑
                    w4 = fst eqa2

                    e4 : w3 ‚äë¬∑ w4
                    e4 = fst (snd eqa2)

                    eqa3 : #strongBool! w4 (#APPLY x‚ÇÅ (#NUM k)) (#APPLY x‚ÇÇ (#NUM k))
                    eqa3 = snd (snd eqa2)

                    cc5 : #strongBool! w4 (#APPLY x‚ÇÅ (#NUM k)) (#APPLY x‚ÇÇ (#NUM k))
                          ‚Üí Dec (inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))
                    cc5 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) =
                      yes (#¬¨Names‚ÜíinhType-ASSERT‚ÇÑ n w4 w3
                             (#APPLY x‚ÇÅ (#NUM k))
                             (#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} nnx‚ÇÅ refl)
                             (x , c‚ÇÅ))
                    cc5 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) =
                      no cc6
                      where
                        cc6 : ¬¨ inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))
                        cc6 (t , t‚àà) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M awt t‚àà'))
                          where
                            t‚àà' : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE)
                            t‚àà' = equalInType-BOOL‚ÇÄ!‚Üí n w3 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE (equalInType-ASSERT‚ÇÑ‚Üí n w3 (#APPLY x‚ÇÅ (#NUM k)) t t t‚àà)

                            awt : ‚àÄùïé w3 (Œª w' e' ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                            awt w5 e5 h with strongBool!-BTRUE‚Üí w5 (#APPLY x‚ÇÅ (#NUM k)) h
                            ... | (x1 , d‚ÇÅ) = lift (INL¬¨‚â°INR {‚åú x1 ‚åù} {‚åú x ‚åù} (‚áõ!-val-det {w4} {‚åú #APPLY x‚ÇÅ (#NUM k) ‚åù} {‚åú #INL x1 ‚åù} {‚åú #INR x ‚åù} tt tt d‚ÇÇ c‚ÇÅ))
                              where
                                d‚ÇÇ : #APPLY x‚ÇÅ (#NUM k) #‚áõ! #INL x1 at w4
                                d‚ÇÇ = ¬¨Names‚Üí‚áõ! w5 w4 ‚åú #APPLY x‚ÇÅ (#NUM k) ‚åù ‚åú #INL x1 ‚åù
                                       (#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} nnx‚ÇÅ refl)
                                       d‚ÇÅ

                cc3 : ¬¨ ¬¨ Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))
                cc3 p = ‚ä•-elim (equalInType-#MP-left-qt‚ÇÉ‚Üí
                                       n w2 x‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqx)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-BOOL‚ÇÄ!‚Üí n w5 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE (equalInType-ASSERT‚ÇÑ‚Üí n w5 (#APPLY x‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh')))) --lift (p (k , {!!}))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÑ-APPLY n w5 x‚ÇÅ n‚ÇÅ k
                                      (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqx)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))
                                      k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨Names‚ÜíinhType-ASSERT‚ÇÑ
                                                            n w6 w3 (#APPLY x‚ÇÅ (#NUM k))
                                                            (#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} nnx‚ÇÅ refl)
                                                            (strongBool!-BTRUE‚Üí w6 (#APPLY x‚ÇÅ (#NUM k)) wbe)))

                cc2 : Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))
                cc2 = MP cc4 cc3

                cc1 : Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))
                      ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t)
                cc1 (k , t , p) = #PAIR (#NUM k) t , equalInType-SUM! {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)} (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType n w' #NAT!)
                                                  (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                  w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY (#NUM k) x‚ÇÅ)) (equalInType-mon p w4 e4)

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÑ-APPLY a x‚ÇÅ | sub0-ASSERT‚ÇÑ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL‚ÇÄ! (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí
                              (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-refl (equalInType-TPURE‚Üí eqx)))
                              w4
                              (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4)
                              a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ a)) (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ b))
                        aw5' = equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ eb




equalInType-BOOL‚ÇÄ!‚Üí#‚áõv‚Çó : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                        ‚Üí equalInType i w #BOOL‚ÇÄ! a b
                        ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõv a w')
equalInType-BOOL‚ÇÄ!‚Üí#‚áõv‚Çó i w a b a‚àà =
  Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-BOOL‚ÇÄ!‚Üí i w a b a‚àà)
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool! w' a b
                     ‚Üí #‚áõv a w')
  aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = #INL x , #‚áõ!‚Üí#‚áõ {w1} {a} {#INL x} c‚ÇÅ , tt
  aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = #INR x , #‚áõ!‚Üí#‚áõ {w1} {a} {#INR x} c‚ÇÅ , tt


equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!‚Çó : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
                               ‚Üí equalInType i w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) F G
                               ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!nv F w')
equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!‚Çó i w F G F‚àà =
  ‚àÄùïé-‚ñ°Func2 aw h2 h3
  where
  h1 : equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! F G
  h1 = equalInType-TPURE‚Üí F‚àà

  h2 : ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõv (#APPLY F #N0) w')
  h2 = equalInType-BOOL‚ÇÄ!‚Üí#‚áõv‚Çó i w (#APPLY F #N0) (#APPLY G #N0)
         (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° h1) w (‚äë-refl¬∑ w) #N0 #N0
           (NUM-equalInType-NAT! i w 0))

  h3 : ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!‚Çô F w')
  h3 = equalInType-TPURE‚Üí‚Çó F‚àà

  aw  : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõv (#APPLY F #N0) w' ‚Üí #‚áõ!‚Çô F w' ‚Üí #‚áõ!nv F w')
  aw w1 e1 (v , c , isv) (K , d , nn , ne) =
    #‚áõ!-pres-#‚áõ!nv {w1} {F} {K} d c2
    where
    c1 : #APPLY K #N0 #‚áõ v at w1
    c1 = val-#‚áõ‚Üí {w1} {#APPLY F #N0} {#APPLY K #N0} {v} isv (‚Üí#‚áõ!-APPLY {w1} {F} {K} {#N0} d) c

    c2 : #‚áõ!nv K w1
    c2 = APPLY#‚áõ‚Üí#‚áõ!nv {w1} {K} {#N0} {v} isv nn ne c1


equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!·µ£ : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
                              ‚Üí equalInType i w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) F G
                              ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!nv G w')
equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!·µ£ i w F G F‚àà =
  equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!‚Çó i w G F (equalInType-sym F‚àà)


#‚áõ!-pres-equalTypes-mp2-qt‚ÇÉ-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                                ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                                ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                                ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                                ‚Üí equalTypes i w (#FUN (#MP-left2-qt‚ÇÉ b‚ÇÅ) (#MP-right2-qt‚ÇÉ b‚ÇÅ)) (#FUN (#MP-left2-qt‚ÇÉ a‚ÇÅ) (#MP-right2-qt‚ÇÉ a‚ÇÅ))
#‚áõ!-pres-equalTypes-mp2-qt‚ÇÉ-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ =
  eqTypesFUN‚Üê {w} {i} {#MP-left2-qt‚ÇÉ b‚ÇÅ} {#MP-right2-qt‚ÇÉ b‚ÇÅ} {#MP-left2-qt‚ÇÉ a‚ÇÅ} {#MP-right2-qt‚ÇÉ a‚ÇÅ}
    (‚ÜíequalTypes-#MP-left2-qt‚ÇÉ
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))
    (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))


#‚áõ!-pres-equalInType-mp2-qt‚ÇÉ-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                                 ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                                 ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                                 ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                                 ‚Üí #isValue b‚ÇÅ
                                 ‚Üí #isValue b‚ÇÇ
                                 ‚Üí equalInType i w (#FUN (#MP-left2-qt‚ÇÉ b‚ÇÅ) (#MP-right2-qt‚ÇÉ b‚ÇÅ)) (#lamInfSearchPP b‚ÇÅ) (#lamInfSearchPP b‚ÇÇ)
                                 ‚Üí equalInType i w (#FUN (#MP-left2-qt‚ÇÉ a‚ÇÅ) (#MP-right2-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lamInfSearchP a‚ÇÅ) (#APPLY #lamInfSearchP a‚ÇÇ)
#‚áõ!-pres-equalInType-mp2-qt‚ÇÉ-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ isv‚ÇÅ isv‚ÇÇ b‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev
    {i} {_} {_} {_} {#lamInfSearchPP b‚ÇÅ} {_} {#lamInfSearchPP b‚ÇÇ}
    (#APPLY-#lamInfSearchP-#‚áõ! w a‚ÇÅ b‚ÇÅ c‚ÇÅ isv‚ÇÅ)
    (#APPLY-#lamInfSearchP-#‚áõ! w a‚ÇÇ b‚ÇÇ c‚ÇÇ isv‚ÇÇ)
    (equalTypes‚ÜíequalInType (#‚áõ!-pres-equalTypes-mp2-qt‚ÇÉ-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ) b‚àà)


equalInType-#MP-left2-qt‚ÇÉ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                           ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                           ‚Üí equalInType i w (#MP-left2-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                          ‚Üí ‚ä•)
                                          ‚Üí ‚ä•)
equalInType-#MP-left2-qt‚ÇÉ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 h =
  equalInType-NEG‚Üí¬¨inh a‚àà w1 e1 (t , h1)
  where
    t : CTerm
    t = #AX

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (p‚ÇÅ p‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#SUM-ASSERT‚ÇÖ f) p‚ÇÅ p‚ÇÇ)
    h2 w2 e2 p‚ÇÅ p‚ÇÇ p‚àà = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw h3))
      where
        aw : ‚àÄùïé w2 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
        aw w3 e3 (n‚ÇÅ , n‚ÇÇ , q‚ÇÅ , q‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , q‚àà) =
          lift (h w3 (‚äë-trans¬∑ e2 e3) (n‚ÇÅ , n‚ÇÇ , n‚àà , q‚ÇÅ , ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f) (equalInType-refl q‚àà)))

        h3 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))) w' p‚ÇÅ p‚ÇÇ)
        h3 = equalInType-SUM!‚Üí {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR)} p‚àà

    h1 : ‚ààType i w1 (#NEG (#SUM-ASSERT‚ÇÖ f)) t
    h1 = equalInType-NEG
           (‚ÜíequalTypes-#SUM-ASSERT‚ÇÖ (equalInType-mon f‚àà w1 e1))
           h2


#MP-left2-qt‚ÇÉ‚Üí#MP-left-qt‚ÇÉ : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                           ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                           ‚Üí equalInType i w (#MP-left2-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
                           ‚Üí equalInType i w (#MP-left-qt‚ÇÉ f) a‚ÇÅ a‚ÇÇ
#MP-left2-qt‚ÇÉ‚Üí#MP-left-qt‚ÇÉ i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-#MP-left-qt‚ÇÉ i w f a‚ÇÅ a‚ÇÇ f‚àà (equalInType-#MP-left2-qt‚ÇÉ‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà)


eqInType-‚áõ-BOOL‚ÇÄ! : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #BOOL‚ÇÄ! #BOOL‚ÇÄ!)
                   ‚Üí equalTerms u w eqt a b
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #strongBool! w' a b)
eqInType-‚áõ-BOOL‚ÇÄ! u w a b eqt h =
  equalInType-BOOL‚ÇÄ!‚Üí u w a b (eqt , h)


‚àà#BOOL‚ÇÄ!‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
            ‚Üí equalInType i w #BOOL‚ÇÄ! a b
            ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongBool! w' a b)
‚àà#BOOL‚ÇÄ!‚Üí u w a b b‚àà = eqInType-‚áõ-BOOL‚ÇÄ! u w a b (fst b‚àà) (snd b‚àà)


‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                 ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ
                                ‚Üí ‚ñ°¬∑ w' (Œª w' e ‚Üí #strongBool! w' (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ)))
‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 n‚ÇÅ n‚ÇÇ n‚àà =
  ‚àà#BOOL‚ÇÄ!‚Üí
    i w1 (#APPLY f‚ÇÅ n‚ÇÅ) (#APPLY f‚ÇÇ n‚ÇÇ)
    (equalInType-FUN‚Üí
       (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° f‚àà) w1 e1 n‚ÇÅ n‚ÇÇ
       (‚ÜíequalInType-NAT! i w1 n‚ÇÅ n‚ÇÇ (Mod.‚àÄùïé-‚ñ° M Œª w2 e2 ‚Üí #‚áõ!same‚Ñï-mon e2 {n‚ÇÅ} {n‚ÇÇ} n‚àà)))


‚àà#ASSERT‚ÇÑ‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
           ‚Üí equalInType i w (#ASSERT‚ÇÑ t) a b
           ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u ‚Üí t #‚áõ! #INL u at w'))
‚àà#ASSERT‚ÇÑ‚Üí i w t a b a‚àà =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÑ‚â° t) a‚àà)))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType i w' #BOOL‚ÇÄ!) w' a b
                         ‚Üí Mod.‚ñ° M w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª u ‚Üí t #‚áõ! #INL u at w'')) e'))
    aw1 w1 e1 h = Mod.‚àÄùïé-‚ñ°Func M aw2 (‚àà#BOOL‚ÇÄ!‚Üí i w1 t #BTRUE h)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí #strongBool! w' t #BTRUE
                             ‚Üí ‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª u ‚Üí t #‚áõ! #INL u at w'')) e1 w' e')
        aw2 w2 e2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) z = x , c‚ÇÅ
        aw2 w2 e2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) z = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ!‚Üí‚â° {#BTRUE} {#INR y} {w2} c‚ÇÇ tt)))


‚àà#ASSERT‚ÇÑ‚Üí3 : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ k a b : CTerm) (n : ‚Ñï)
            ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
            ‚Üí equalInType i w (#ASSERT‚ÇÑ (#APPLY f‚ÇÅ k)) a b
            ‚Üí k #‚áõ! #NUM n at w
            ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí
                   #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w' √ó  #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w')))
‚àà#ASSERT‚ÇÑ‚Üí3 i w f‚ÇÅ f‚ÇÇ k a b n f‚àà a‚àà ck =
  ‚àÄùïé-‚ñ°Func3 aw h1 h2 h3
  where
    h1 : ‚ñ°¬∑ w (Œª w' e ‚Üí #strongBool! w' (#APPLY f‚ÇÅ k) (#APPLY f‚ÇÇ (#NUM n)))
    h1 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) k (#NUM n) (n , ck , #‚áõ!-refl {w} {#NUM n})

    h2 : ‚ñ°¬∑ w (Œª w' e ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM n)) (#APPLY f‚ÇÇ (#NUM n)))
    h2 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (n , #‚áõ!-refl {w} {#NUM n} , #‚áõ!-refl {w} {#NUM n})

    h3 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª u ‚Üí #APPLY f‚ÇÅ k #‚áõ! #INL u at w'))
    h3 = ‚àà#ASSERT‚ÇÑ‚Üí i w (#APPLY f‚ÇÅ k) a b a‚àà

    aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool! w' (#APPLY f‚ÇÅ k) (#APPLY f‚ÇÇ (#NUM n))
                       ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM n)) (#APPLY f‚ÇÇ (#NUM n))
                       ‚Üí (Œ£ CTerm (Œª u ‚Üí #APPLY f‚ÇÅ k #‚áõ! #INL u at w'))
                       ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí
                           #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w' √ó #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w')))
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ)) (u , d) = y‚ÇÅ , y‚ÇÇ , d‚ÇÅ , d‚ÇÇ
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ!-val-det {w1} {#APPLY f‚ÇÇ (#NUM n)} {#INL x‚ÇÇ} {#INR y‚ÇÇ} tt tt c‚ÇÇ d‚ÇÇ)))
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ!-val-det {w1} {#APPLY f‚ÇÇ (#NUM n)} {#INL y‚ÇÇ} {#INR x‚ÇÇ} tt tt d‚ÇÇ c‚ÇÇ)))
    aw w1 e1 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) (y‚ÇÅ , y‚ÇÇ , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ)) (u , d) = ‚ä•-elim (INLneqINR (‚â°CTerm (#‚áõ!-val-det {w1} {#APPLY f‚ÇÅ k} {#INL u} {#INR x‚ÇÅ} tt tt d c‚ÇÅ)))


‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚â§‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm) (n : ‚Ñï)
                   ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚â§‚Üí i w f‚ÇÅ f‚ÇÇ 0 f‚àà = Mod.‚àÄùïé-‚ñ°Func M aw c
  where
    c : ‚ñ°¬∑ w (Œª w' e ‚Üí #strongBool! w' (#APPLY f‚ÇÅ #N0) (#APPLY f‚ÇÇ #N0))
    c = ‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) #N0 #N0 (#‚áõ!same‚Ñï-NUM w 0)

    aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool! w' (#APPLY f‚ÇÅ #N0) (#APPLY f‚ÇÇ #N0)
                       ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ 0 ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
    aw w1 e1 h .‚Ñï.zero _‚â§_.z‚â§n = h
‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚â§‚Üí i w f‚ÇÅ f‚ÇÇ (suc n) f‚àà = ‚àÄùïé-‚ñ°Func2 aw c ind
  where
    ind : ‚ñ°¬∑ w (Œª w' e ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
    ind = ‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚â§‚Üí i w f‚ÇÅ f‚ÇÇ n f‚àà

    c : ‚ñ°¬∑ w (Œª w' e ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM (suc n))) (#APPLY f‚ÇÇ (#NUM (suc n))))
    c = ‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚Üí i w f‚ÇÅ f‚ÇÇ f‚àà w (‚äë-refl¬∑ w) (#NUM (suc n)) (#NUM (suc n)) (#‚áõ!same‚Ñï-NUM w (suc n))

    aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM (suc n))) (#APPLY f‚ÇÇ (#NUM (suc n)))
                       ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                       ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ suc n ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
    aw w1 e1 h1 h2 m len with ‚â§suc‚Üí‚äé len
    ... | inj‚ÇÅ p rewrite p = h1
    ... | inj‚ÇÇ p = h2 m p


-- by induction on j
mpSearch3‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ : CTerm) (n k j : ‚Ñï)
            ‚Üí k + j ‚â° n
            ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
            ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w
            ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w
            ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
                √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM m at w
                √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM m at w
                √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ! #INL u‚ÇÅ at w
                √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ! #INL u‚ÇÇ at w)))
mpSearch3‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n k 0 eqn hn ha‚ÇÅ ha‚ÇÇ rewrite +0 k | eqn =
  n , u‚ÇÅ , u‚ÇÇ , ‚â§-refl ,
  #‚áõ-trans
    {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM n)} {#infSearchI f‚ÇÅ (#infSearchF f‚ÇÅ) (#NUM n)} {#NUM n}
    (#infSearch‚áõ‚ÇÅ w f‚ÇÅ n)
    (#infSearch‚áõ‚ÇÇ w f‚ÇÅ u‚ÇÅ (#infSearchF f‚ÇÅ) n (#‚áõ!‚Üí#‚áõ {w} {#APPLY f‚ÇÅ (#NUM n)} {#INL u‚ÇÅ} ha‚ÇÅ)) ,
  #‚áõ-trans
    {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM n)} {#infSearchI f‚ÇÇ (#infSearchF f‚ÇÇ) (#NUM n)} {#NUM n}
    (#infSearch‚áõ‚ÇÅ w f‚ÇÇ n)
    (#infSearch‚áõ‚ÇÇ w f‚ÇÇ u‚ÇÇ (#infSearchF f‚ÇÇ) n (#‚áõ!‚Üí#‚áõ {w} {#APPLY f‚ÇÇ (#NUM n)} {#INL u‚ÇÇ} ha‚ÇÇ)) ,
  ha‚ÇÅ ,
  ha‚ÇÇ
mpSearch3‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n k (suc j) eqn hn ha‚ÇÅ ha‚ÇÇ with hn k (+‚â°‚Üí‚â§ k (suc j) n eqn)
... | a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ) = concl
  where
    comp‚ÇÅ : #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM k at w
    comp‚ÇÅ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM k)} {#infSearchI f‚ÇÅ (#infSearchF f‚ÇÅ) (#NUM k)} {#NUM k}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÅ k)
             (#infSearch‚áõ‚ÇÇ w f‚ÇÅ a‚ÇÅ (#infSearchF f‚ÇÅ) k (#‚áõ!‚Üí#‚áõ {w} {#APPLY f‚ÇÅ (#NUM k)} {#INL a‚ÇÅ} c‚ÇÅ))

    comp‚ÇÇ : #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM k at w
    comp‚ÇÇ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM k)} {#infSearchI f‚ÇÇ (#infSearchF f‚ÇÇ) (#NUM k)} {#NUM k}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÇ k)
             (#infSearch‚áõ‚ÇÇ w f‚ÇÇ a‚ÇÇ (#infSearchF f‚ÇÇ) k (#‚áõ!‚Üí#‚áõ {w} {#APPLY f‚ÇÇ (#NUM k)} {#INL a‚ÇÇ} c‚ÇÇ))

    concl : Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
              √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ! #INL u‚ÇÅ at w
              √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ! #INL u‚ÇÇ at w)))
    concl = k , a‚ÇÅ , a‚ÇÇ , +‚â°‚Üí‚â§ k (suc j) n eqn , comp‚ÇÅ , comp‚ÇÇ , c‚ÇÅ , c‚ÇÇ
... | a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ) = concl
  where
    comp‚ÇÅ : #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k)) at w
    comp‚ÇÅ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM k)} {#infSearchI f‚ÇÅ (#infSearchF f‚ÇÅ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k))}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÅ k)
             (#infSearch‚áõ‚ÇÉ w f‚ÇÅ a‚ÇÅ (#infSearchF f‚ÇÅ) k (#‚áõ!‚Üí#‚áõ {w} {#APPLY f‚ÇÅ (#NUM k)} {#INR a‚ÇÅ} c‚ÇÅ))

    comp‚ÇÇ : #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k)) at w
    comp‚ÇÇ = #‚áõ-trans
             {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM k)} {#infSearchI f‚ÇÇ (#infSearchF f‚ÇÇ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k))}
             (#infSearch‚áõ‚ÇÅ w f‚ÇÇ k)
             (#infSearch‚áõ‚ÇÉ w f‚ÇÇ a‚ÇÇ (#infSearchF f‚ÇÇ) k (#‚áõ!‚Üí#‚áõ {w} {#APPLY f‚ÇÇ (#NUM k)} {#INR a‚ÇÇ} c‚ÇÇ))

    ind : Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
            √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k)) #‚áõ #NUM m at w
            √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k)) #‚áõ #NUM m at w
            √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ! #INL u‚ÇÅ at w
            √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ! #INL u‚ÇÇ at w)))
    ind = mpSearch3‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n (suc k) j (trans (sym (+-suc k j)) eqn) hn ha‚ÇÅ ha‚ÇÇ

    concl : Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
              √ó #APPLY (#infSearchF f‚ÇÅ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY (#infSearchF f‚ÇÇ) (#NUM k) #‚áõ #NUM m at w
              √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ! #INL u‚ÇÅ at w
              √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ! #INL u‚ÇÇ at w)))
    concl = fst ind , fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
            #‚áõ-trans {w} {#APPLY (#infSearchF f‚ÇÅ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÅ) (#NUM (suc k))} {#NUM (fst ind)} comp‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
            #‚áõ-trans {w} {#APPLY (#infSearchF f‚ÇÇ) (#NUM k)} {#APPLY (#infSearchF f‚ÇÇ) (#NUM (suc k))} {#NUM (fst ind)} comp‚ÇÇ (fst (snd (snd (snd (snd (snd ind)))))) ,
            fst (snd (snd (snd (snd (snd (snd ind)))))) ,
            snd (snd (snd (snd (snd (snd (snd ind))))))


mpSearch2‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ : CTerm) (n : ‚Ñï)
            ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
            ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w
            ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w
            ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
                  √ó #infSearch f‚ÇÅ #‚áõ #NUM m at w
                  √ó #infSearch f‚ÇÇ #‚áõ #NUM m at w
                  √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ! #INL u‚ÇÅ at w
                  √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ! #INL u‚ÇÇ at w)))
mpSearch2‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n hn ha‚ÇÅ ha‚ÇÇ = mpSearch3‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n 0 n refl hn ha‚ÇÅ ha‚ÇÇ


mpSearch2¬¨Names‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ : CTerm) (n : ‚Ñï)
                  ‚Üí #¬¨Names f‚ÇÅ
                  ‚Üí #¬¨Names f‚ÇÇ
                  ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                  ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w
                  ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w
                  ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí m ‚â§ n
                      √ó #infSearch f‚ÇÅ #‚áõ! #NUM m at w
                      √ó #infSearch f‚ÇÇ #‚áõ! #NUM m at w
                      √ó #APPLY f‚ÇÅ (#NUM m) #‚áõ! #INL u‚ÇÅ at w
                      √ó #APPLY f‚ÇÇ (#NUM m) #‚áõ! #INL u‚ÇÇ at w)))
mpSearch2¬¨Names‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n nnf‚ÇÅ nnf‚ÇÇ hn ha‚ÇÅ ha‚ÇÇ with mpSearch2‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n hn ha‚ÇÅ ha‚ÇÇ
... | m , v‚ÇÅ , v‚ÇÇ , len , c‚ÇÅ , c‚ÇÇ , d‚ÇÅ , d‚ÇÇ = m , v‚ÇÅ , v‚ÇÇ , len , concl‚ÇÅ , concl‚ÇÇ , d‚ÇÅ , d‚ÇÇ
  where
    concl‚ÇÅ : #infSearch f‚ÇÅ #‚áõ! #NUM m at w
    concl‚ÇÅ = #¬¨Names‚Üí‚áõ! w (#infSearch f‚ÇÅ) (#NUM m) (#¬¨Names-#infSearch {f‚ÇÅ} nnf‚ÇÅ) c‚ÇÅ

    concl‚ÇÇ : #infSearch f‚ÇÇ #‚áõ! #NUM m at w
    concl‚ÇÇ = #¬¨Names‚Üí‚áõ! w (#infSearch f‚ÇÇ) (#NUM m) (#¬¨Names-#infSearch {f‚ÇÇ} nnf‚ÇÇ) c‚ÇÇ


‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚ÜíequalInType-#ASSERT‚ÇÑ : (i : ‚Ñï) (w : ùïé¬∑) (f t u : CTerm) (m : ‚Ñï)
                                     ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                                     ‚Üí t #‚áõ! #NUM m at w
                                     ‚Üí #APPLY f (#NUM m) #‚áõ! #INL u at w
                                     ‚Üí ‚ààType i w (#ASSERT‚ÇÑ (#APPLY f t)) #AX
‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚ÜíequalInType-#ASSERT‚ÇÑ i w f t u m f‚àà cm cl =
  ‚â°CTerm‚ÜíequalInType
    (sym (#ASSERT‚ÇÑ‚â° (#APPLY f t)))
    (equalInType-EQ
      (isTypeBOOL‚ÇÄ!‚Üí i w)
      (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí equalInType i w' #BOOL‚ÇÄ! (#APPLY f t) #BTRUE)
    aw w1 e1 =
      equalInType-trans eqb (‚ÜíequalInType-BOOL‚ÇÄ! i w1 (#APPLY f (#NUM m)) (#BTRUE) (Mod.‚àÄùïé-‚ñ° M aw1))
      where
        aw1 : ‚àÄùïé w1 (Œª w' _ ‚Üí #strongBool! w' (#APPLY f (#NUM m)) #BTRUE)
        aw1 w2 e2 = u , #AX , inj‚ÇÅ (‚àÄùïé-mon (‚äë-trans¬∑ e1 e2) cl , #‚áõ!-refl {w2} {#BTRUE})

        eqn : equalInType i w1 #NAT! t (#NUM m)
        eqn = ‚ÜíequalInType-NAT!
                i w1 t (#NUM m)
                (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí m , ‚àÄùïé-mon (‚äë-trans¬∑ e1 e2) cm , #‚áõ!-refl {w2} {#NUM m}))

        eqb : equalInType i w1 #BOOL‚ÇÄ! (#APPLY f t) (#APPLY f (#NUM m))
        eqb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° f‚àà) w1 e1 t (#NUM m) eqn


mpSearch1‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ t‚ÇÅ t‚ÇÇ : CTerm) (n : ‚Ñï)
            ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
            ‚Üí #¬¨Names f‚ÇÅ
            ‚Üí #¬¨Names f‚ÇÇ
            ‚Üí t‚ÇÅ #‚áõ! #infSearchP f‚ÇÅ at w
            ‚Üí t‚ÇÇ #‚áõ! #infSearchP f‚ÇÇ at w
            ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
            ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w
            ‚Üí #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w
            ‚Üí SUMeq! (equalInType i w #NAT!) (Œª a b ea ‚Üí equalInType i w (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w t‚ÇÅ t‚ÇÇ
mpSearch1‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ t‚ÇÅ t‚ÇÇ n f‚àà nnf‚ÇÅ nnf‚ÇÇ ct‚ÇÅ ct‚ÇÇ hn ha‚ÇÅ ha‚ÇÇ with mpSearch2¬¨Names‚ÇÇ i w f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ n nnf‚ÇÅ nnf‚ÇÇ hn ha‚ÇÅ ha‚ÇÇ
... | m , v‚ÇÅ , v‚ÇÇ , len , c‚ÇÅ , c‚ÇÇ , d‚ÇÅ , d‚ÇÇ =
  #infSearch f‚ÇÅ , #infSearch f‚ÇÇ , #AX , #AX ,
  -- How can we prove that it lives in #NAT! if f is not pure? Could we use #NAT for the impure version of MP? Negation is fine though
  ‚ÜíequalInType-NAT! i w (#infSearch f‚ÇÅ) (#infSearch f‚ÇÇ) (Mod.‚àÄùïé-‚ñ° M p1) ,
  ct‚ÇÅ , --lower (ct‚ÇÅ w (‚äë-refl¬∑ w)) , --ct‚ÇÅ ,
  ct‚ÇÇ , --lower (ct‚ÇÇ w (‚äë-refl¬∑ w)) , --ct‚ÇÇ ,
  p2
-- For this we need to prove that (#infSearch f) computes to a number m ‚â§ n such that (#APPLY f (#NUM m)) computes to #INL
-- If f is not pure this might only be at a higher world, but if f is pure we can bring back the computation to the current world
-- ...so assume #¬¨Names f for this
  where
    p1 : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#infSearch f‚ÇÅ) (#infSearch f‚ÇÇ))
    p1 w1 e1 = m , ‚àÄùïé-mon e1 c‚ÇÅ , ‚àÄùïé-mon e1 c‚ÇÇ

    p2 : ‚ààType i w (sub0 (#infSearch f‚ÇÅ) (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR))) #AX
    p2 = ‚â°CTerm‚ÜíequalInType
           (sym (sub0-ASSERT‚ÇÑ-APPLY (#infSearch f‚ÇÅ) f‚ÇÅ))
           (‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚ÜíequalInType-#ASSERT‚ÇÑ i w f‚ÇÅ (#infSearch f‚ÇÅ) v‚ÇÅ m (equalInType-refl f‚àà) c‚ÇÅ d‚ÇÅ)


-- A variant of mpSearch that uses #NAT!‚ÜíBOOL‚ÇÄ! and corresponding MP-right versions
mpSearch‚ÇÇ : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ t‚ÇÅ t‚ÇÇ : CTerm)
           ‚Üí #¬¨Names f‚ÇÅ
           ‚Üí #¬¨Names f‚ÇÇ
           ‚Üí t‚ÇÅ #‚áõ! #infSearchP f‚ÇÅ at w
           ‚Üí t‚ÇÇ #‚áõ! #infSearchP f‚ÇÇ at w
           ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! f‚ÇÅ f‚ÇÇ
           ‚Üí equalInType i w (#MP-right-qt‚ÇÉ f‚ÇÅ) a‚ÇÅ a‚ÇÇ
           ‚Üí equalInType i w (#MP-right2-qt‚ÇÉ f‚ÇÅ) t‚ÇÅ t‚ÇÇ
mpSearch‚ÇÇ i w f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ t‚ÇÅ t‚ÇÇ nnf‚ÇÅ nnf‚ÇÇ ct‚ÇÅ ct‚ÇÇ f‚àà a‚àà =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 h1)
  where
    h1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí inhType i w' (#MP-right2-qt‚ÇÉ f‚ÇÅ))
    h1 = equalInType-SQUASH‚Üí a‚àà

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType i w' (#MP-right2-qt‚ÇÉ f‚ÇÅ)
                        ‚Üí equalInType i w' (#MP-right2-qt‚ÇÉ f‚ÇÅ) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 (t , t‚àà) =
      equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw2 p‚àà)
      where
        p‚àà : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' t t)
        p‚àà = equalInType-SUM!‚Üí {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)} t‚àà

        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' t t
                             ‚Üí equalInType i w' (#MP-right2-qt‚ÇÉ f‚ÇÅ) t‚ÇÅ t‚ÇÇ)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , x‚ÇÅ , x‚ÇÇ , n‚àà , c‚ÇÅ , c‚ÇÇ , x‚àà) =
          equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw3 (equalInType-NAT!‚Üí i w2 n‚ÇÅ n‚ÇÇ n‚àà))
          where
            aw3 : ‚àÄùïé w2 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ
                                 ‚Üí equalInType i w' (#MP-right2-qt‚ÇÉ f‚ÇÅ) t‚ÇÅ t‚ÇÇ)
            aw3 w3 e3 (n , d‚ÇÅ , d‚ÇÇ) =
              equalInType-SUM!
                {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)}
                (Œª w' _ ‚Üí isTypeNAT!)
                (isType-MP-right-qt‚ÇÉ-body i w3 f‚ÇÅ f‚ÇÅ (equalInType-refl (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                (‚àÄùïé-‚ñ°Func2 aw4 h2 y‚àà)
              where
                y‚àà : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí
                                     #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w' √ó #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w')))
                y‚àà = ‚àà#ASSERT‚ÇÑ‚Üí3 i w3 f‚ÇÅ f‚ÇÇ n‚ÇÅ x‚ÇÅ x‚ÇÇ n (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f‚ÇÅ) (equalInType-mon x‚àà w3 e3)) d‚ÇÅ

                h2 : ‚ñ°¬∑ w3 (Œª w' e ‚Üí (m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                h2 = ‚àà#NAT!‚ÜíBOOL‚ÇÄ!‚â§‚Üí i w3 f‚ÇÅ f‚ÇÇ n (equalInType-mon f‚àà w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))

                aw4 : ‚àÄùïé w3 (Œª w' e' ‚Üí ((m : ‚Ñï) ‚Üí m ‚â§ n ‚Üí #strongBool! w' (#APPLY f‚ÇÅ (#NUM m)) (#APPLY f‚ÇÇ (#NUM m)))
                                      ‚Üí (Œ£ CTerm (Œª u‚ÇÅ ‚Üí Œ£ CTerm (Œª u‚ÇÇ ‚Üí #APPLY f‚ÇÅ (#NUM n) #‚áõ! #INL u‚ÇÅ at w' √ó #APPLY f‚ÇÇ (#NUM n) #‚áõ! #INL u‚ÇÇ at w')))
                                      ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' t‚ÇÅ t‚ÇÇ)
                aw4 w4 e4 hn (u‚ÇÅ , u‚ÇÇ , ha‚ÇÅ , ha‚ÇÇ) =
                  mpSearch1‚ÇÇ
                    i w4 f‚ÇÅ f‚ÇÇ u‚ÇÅ u‚ÇÇ t‚ÇÅ t‚ÇÇ n
                    (equalInType-mon f‚àà w4 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4))))
                    nnf‚ÇÅ nnf‚ÇÇ
                    (#‚áõ!-mon {t‚ÇÅ} {#infSearchP f‚ÇÅ} (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4))) ct‚ÇÅ)
                    (#‚áõ!-mon {t‚ÇÇ} {#infSearchP f‚ÇÇ} (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 e4))) ct‚ÇÇ)
                    hn ha‚ÇÅ ha‚ÇÇ


#MPp‚Çá : CTerm
#MPp‚Çá = #PI (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) (#[0]FUN #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ)


-- This is similar to MPp‚ÇÜ-inh‚ÇÇ but proved here for non-truncated sums
MPp‚Çá-inh : (exb : ‚àÉ‚ñ°) (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚Çá #lamInfSearchP
MPp‚Çá-inh exb n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ}
    (Œª w1 e1 ‚Üí isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! w1 n)
    p2
    p3
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) f‚ÇÅ f‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp-qt‚ÇÉ f‚ÇÅ))
        (sym (sub0-fun-mp-qt‚ÇÉ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left2-qt‚ÇÉ (equalInType-TPURE‚Üí f‚àà))
                     (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ (equalInType-TPURE‚Üí f‚àà)))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) f‚ÇÅ f‚ÇÇ
                      ‚Üí equalInType n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left2-qt‚ÇÉ #[0]MP-right2-qt‚ÇÉ)) (#APPLY #lamInfSearchP f‚ÇÅ) (#APPLY #lamInfSearchP f‚ÇÇ))
    p3 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp-qt‚ÇÉ f‚ÇÅ))
        (equalInType-local
          (‚àÄùïé-‚ñ°Func2 awp
            (equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!‚Çó n w1 f‚ÇÅ f‚ÇÇ f‚àà)
            (equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ!·µ£ n w1 f‚ÇÅ f‚ÇÇ f‚àà)))
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!nv f‚ÇÅ w'
                           ‚Üí #‚áõ!nv f‚ÇÇ w'
                           ‚Üí equalInType n w' (#FUN (#MP-left2-qt‚ÇÉ f‚ÇÅ) (#MP-right2-qt‚ÇÉ f‚ÇÅ)) (#APPLY #lamInfSearchP f‚ÇÅ) (#APPLY #lamInfSearchP f‚ÇÇ))
      awp w1' e1' (g‚ÇÅ , comp‚ÇÅ , nng‚ÇÅ , neg‚ÇÅ , isvg‚ÇÅ) (g‚ÇÇ , comp‚ÇÇ , nng‚ÇÇ , neg‚ÇÇ , isvg‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp2-qt‚ÇÉ-fun n w1' f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ
          (equalInType-mon (equalInType-TPURE‚Üí f‚àà) w1' e1')
          comp‚ÇÅ comp‚ÇÇ isvg‚ÇÅ isvg‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left2-qt‚ÇÉ
              (#‚áõ!‚Üí‚ààType {n} {w1'} {#NAT!‚ÜíBOOL‚ÇÄ!} {f‚ÇÅ} {g‚ÇÅ}
               (equalInType-TPURE‚Üí (equalInType-refl (equalInType-mon f‚àà w1' e1')))
               comp‚ÇÅ))
             (‚ÜíequalTypes-#MP-right2-qt‚ÇÉ
              (#‚áõ!‚Üí‚ààType {n} {w1'} {#NAT!‚ÜíBOOL‚ÇÄ!} {f‚ÇÅ} {g‚ÇÅ}
               (equalInType-TPURE‚Üí (equalInType-refl (equalInType-mon f‚àà w1' e1')))
               comp‚ÇÅ))
             p4)
        where
        -- we use here MPp‚ÇÜ-inh‚ÇÇ
        p5 : equalInType n w1' (#FUN (#MP-left-qt‚ÇÉ g‚ÇÅ) (#MP-right-qt‚ÇÉ g‚ÇÅ)) (#APPLY #lam2AX g‚ÇÅ) (#APPLY #lam2AX g‚ÇÇ)
        p5 = ‚Üí‚â°equalInType
               (sub0-fun-mp‚ÇÜ g‚ÇÅ)
               (snd (snd (equalInType-PI‚Üí {n} {w} {#TPURE #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
                                          (MPp‚ÇÜ-inh‚ÇÇ exb n w))) w1' (‚äë-trans¬∑ e1 e1') g‚ÇÅ g‚ÇÇ
                                          (#‚áõ!‚ÜíequalInType (equalInType-mon f‚àà w1' e1') comp‚ÇÅ comp‚ÇÇ))

        p4 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#MP-left2-qt‚ÇÉ g‚ÇÅ) a‚ÇÅ a‚ÇÇ
                            ‚Üí equalInType n w' (#MP-right2-qt‚ÇÉ g‚ÇÅ)
                                          (#APPLY (#lamInfSearchPP g‚ÇÅ) a‚ÇÅ)
                                          (#APPLY (#lamInfSearchPP g‚ÇÇ) a‚ÇÇ))
        p4 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà =
          mpSearch‚ÇÇ n w2 g‚ÇÅ g‚ÇÇ (#APPLY (#APPLY #lam2AX g‚ÇÅ) a‚ÇÅ)
            (#APPLY (#APPLY #lam2AX g‚ÇÇ) a‚ÇÇ) (#APPLY (#lamInfSearchPP g‚ÇÅ) a‚ÇÅ)
            (#APPLY (#lamInfSearchPP g‚ÇÇ) a‚ÇÇ) nng‚ÇÅ nng‚ÇÇ
            (#APPLY-#lamInfSearchPP#‚áõ! w2 g‚ÇÅ a‚ÇÅ)
            (#APPLY-#lamInfSearchPP#‚áõ! w2 g‚ÇÇ a‚ÇÇ)
            (#‚áõ!‚ÜíequalInType
             (equalInType-mon (equalInType-TPURE‚Üí f‚àà) w2 (‚äë-trans¬∑ e1' e2))
             (‚àÄùïé-mon e2 comp‚ÇÅ) (‚àÄùïé-mon e2 comp‚ÇÇ))
            p6
          where
            p6 : equalInType n w2 (#MP-right-qt‚ÇÉ g‚ÇÅ) (#APPLY (#APPLY #lam2AX g‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lam2AX g‚ÇÇ) a‚ÇÇ)
            p6 = equalInType-FUN‚Üí
                   p5 w2 e2 a‚ÇÅ a‚ÇÇ
                   (#MP-left2-qt‚ÇÉ‚Üí#MP-left-qt‚ÇÉ n w2 g‚ÇÅ a‚ÇÅ a‚ÇÇ
                     (equalInType-mon
                       (equalInType-TPURE‚Üí
                         (equalInType-refl {_} {_} {_} {g‚ÇÅ} {g‚ÇÇ}
                           (#‚áõ!‚ÜíequalInType (equalInType-mon f‚àà w1' e1') comp‚ÇÅ comp‚ÇÇ)))
                       w2 e2) a‚àà)


-- This combines MPp‚Çá-inh and Œ†pure‚Üí‚ÇÇ
MPp‚Çá-inh‚ÇÇ : (exb : ‚àÉ‚ñ°) (i : ‚Ñï) (w : ùïé¬∑) (eval : CTerm)
          ‚Üí #¬¨Names eval
          ‚Üí #¬¨Enc eval
          ‚Üí ‚ààType i w (#FUN #NAT! #NAT!‚ÜíBOOL‚ÇÄ!) eval
          ‚Üí ‚ààType i w (#PI #NAT! (#[0]FUN (#[0]MP-left2-qt‚ÇÑ eval) (#[0]MP-right2-qt‚ÇÑ eval))) (mpEvalEx eval #lamInfSearchP)
MPp‚Çá-inh‚ÇÇ exb i w eval nnf nef eval‚àà =
  Œ†pure‚Üí‚ÇÇ i w eval #lamInfSearchP nnf nef eval‚àà (MPp‚Çá-inh exb i w)

\end{code}
