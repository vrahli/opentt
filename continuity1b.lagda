\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity1b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)
open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)



#‚áìsame‚Ñï : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set
#‚áìsame‚Ñï w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí t1 #‚áì (#NUM n) at w √ó t2 #‚áì (#NUM n) at w)


testMup : (name : Name) (F f : Term) ‚Üí Term
testMup name F f = testM name (shiftNameUp 0 F) (shiftNameUp 0 f)


ŒΩtestMup : (F f : Term) ‚Üí Term
ŒΩtestMup F f = ŒΩtestM (shiftNameUp 0 F) (shiftNameUp 0 f)


#ŒΩtestMup : (F f : CTerm) ‚Üí CTerm
#ŒΩtestMup F f = #ŒΩtestM (#shiftNameUp 0 F) (#shiftNameUp 0 f)



ŒΩtestM-QNAT-shift : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                    ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                    ‚Üí ‚ààType i w #BAIRE f
                    ‚Üí #‚áìsame‚Ñï w (#ŒΩtestMup F f) (#ŒΩtestMup F f)
ŒΩtestM-QNAT-shift cn kb gc i w F f ‚ààF ‚ààf =
  suc k , ack , ack
  where
    tM : Term
    tM = testMup 0 ‚åú F ‚åù ‚åú f ‚åù

    name : Name
    name = newChoiceT w tM

    w1 : ùïé¬∑
    w1 = startNewChoiceT Res‚ä§ w tM

    e1 : w ‚äë¬∑ w1
    e1 = startNewChoiceT‚äè Res‚ä§ w tM

    comp1 : compatible¬∑ name w1 Res‚ä§
    comp1 = startChoiceCompatible¬∑ Res‚ä§ w name (¬¨newChoiceT‚ààdomùïé w tM)

    s1 : ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù ‚áì testM name ‚åú F ‚åù ‚åú f ‚åù from w to w1
    s1 = 1 , ‚â°pair (shiftNameDown-renn-shiftNameUp name ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f)) refl

    w2 : ùïé¬∑
    w2 = chooseT name w1 (NUM 0)

    cs : set0 name ‚áì AX from w1 to w2
    cs = 1 , refl

    e2 : w1 ‚äë¬∑ w2
    e2 = ‚áìfrom-to‚Üí‚äë {w1} {w2} cs

    -- we prove that in w2 name's value is 0
    gc0 : getT 0 name w2 ‚â° just (NUM 0)
    gc0 = gc name w1 0 comp1

    g0 : ‚àÄùïé w2 (Œª w' e ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w' ‚â° just (NUM j))))
    g0 = cn name w1 0 comp1

    eqa : ‚ààType i w2 #NAT (#APPLY F (#upd name f))
    eqa = equalInType-FUN‚Üí
            (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) w2 (‚äë-refl¬∑ _) (#upd name f) (#upd name f)
            (upd‚àà i w2 name f g0 (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))

    eqn : NATeq w2 (#APPLY F (#upd name f)) (#APPLY F (#upd name f))
    eqn = kb (equalInType-NAT‚Üí i w2 (#APPLY F (#upd name f)) (#APPLY F (#upd name f)) eqa) w2 (‚äë-refl¬∑ _)

    cak : Œ£ ‚Ñï (Œª k ‚Üí appUpd name ‚åú F ‚åù ‚åú f ‚åù ‚áõ NUM k at w2)
    cak = fst eqn , fst (snd eqn)

    m : ‚Ñï
    m = fst cak

    ca : Œ£ ùïé¬∑ (Œª w' ‚Üí appUpd name ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM m from w2 to w')
    ca = ‚áõ‚Üí‚áìfrom-to (snd cak)

    w3 : ùïé¬∑
    w3 = fst ca

    e3 : w2 ‚äë¬∑ w3
    e3 = ‚áìfrom-to‚Üí‚äë {w2} {w3} (snd ca)

    gt0 : Œ£ ‚Ñï (Œª k ‚Üí getT 0 name w3 ‚â° just (NUM k))
    gt0 = lower (g0 w3 e3)

    k : ‚Ñï
    k = fst gt0

    gk : get0 name ‚áì NUM k from w3 to w3
    gk = 1 , step-APPLY-CS (NUM k) w3 0 name (snd gt0)

    pbk : probeM name ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (suc k) from w2 to w3
    pbk = ‚áì-trans‚ÇÇ (SEQ‚áì‚ÇÅ (snd ca)) (‚áì-trans‚ÇÇ (SEQ-val‚áì w3 (NUM m) (SUC (get0 name)) tt) (‚áìNUM‚ÜíSUC‚áìNUM gk))

    ack : ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (suc k) at w
    ack = ‚áì-from-to‚Üí‚áì {w} {w3} {ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù} {NUM (suc k)}
                       (‚áì-trans‚ÇÇ {w} {w1} {w3} {ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù} {testM name ‚åú F ‚åù ‚åú f ‚åù} {NUM (suc k)}
                                 s1 (‚áì-trans‚ÇÇ {w1} {w2} {w3} {testM name ‚åú F ‚åù ‚åú f ‚åù} {SEQ AX (probeM name ‚åú F ‚åù ‚åú f ‚åù)} {NUM (suc k)}
                                              (SEQ‚áì‚ÇÅ {w1} {w2} {set0 name} {AX} {probeM name ‚åú F ‚åù ‚åú f ‚åù} cs)
                                              (‚áì-trans‚ÇÇ (SEQ-val‚áì w2 AX (probeM name ‚åú F ‚åù ‚åú f ‚åù) tt) pbk)))



testM-QNAT : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
              (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
              ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
              ‚Üí ‚ààType i w #BAIRE f
              ‚Üí ‚ààType i w #QNAT (#ŒΩtestMup F f)
testM-QNAT cn kb gc i w F f ‚ààF ‚ààf =
  ‚ÜíequalInType-QNAT i w (#ŒΩtestMup F f) (#ŒΩtestMup F f) (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #weakMonEq w' (#ŒΩtestMup F f) (#ŒΩtestMup F f))
    aw w1 e1 w2 e2 = lift (ŒΩtestM-QNAT-shift cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))



QNATn : Term ‚Üí Term
QNATn n = SET NAT (QLT (VAR 0) (shiftUp 0 n))


QBAIREn : Term ‚Üí Term
QBAIREn n = FUN (QNATn n) NAT


contQBody : (F f : Term) ‚Üí Term
contQBody F f =
  SUM QNAT
      (PI BAIRE
          (FUN (FFDEFS BAIRE (VAR 0))
               (FUN (EQ f (VAR 0) (QBAIREn (VAR 1)))
                    (EQ (APPLY F f) (APPLY F (VAR 0)) NAT))))



#contQBody : (F f : CTerm) ‚Üí CTerm
#contQBody F f = ct (contQBody ‚åú F ‚åù ‚åú f ‚åù) c
  where
    c : # contBody ‚åú F ‚åù ‚åú f ‚åù
    c rewrite CTerm.closed f
            | #shiftUp 0 f
            | #shiftUp 0 F
            | CTerm.closed F
            | CTerm.closed f
            | #shiftUp 1 f
            | #shiftUp 1 F
            | CTerm.closed F
            | CTerm.closed f = refl



#[1]QBAIREn : CTerm1 ‚Üí CTerm1
#[1]QBAIREn n = ct1 (QBAIREn ‚åú n ‚åù) c
  where
    c : #[ 0 ‚à∑ [ 1 ] ] QBAIREn ‚åú n ‚åù
    c rewrite fvars-FUN0 (QNATn ‚åú n ‚åù) NAT | ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù))) =
      ‚äÜ‚Üí‚äÜ? {lowerVars (fvars (shiftUp 0 ‚åú n ‚åù))} {0 ‚à∑ [ 1 ]}
           (lowerVars-fvars-[0,1,2] {fvars (shiftUp 0 ‚åú n ‚åù)} (‚Üífvars-shiftUp‚äÜ-[0,1,2] {‚åú n ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú n ‚åù} {0 ‚à∑ [ 1 ]} (CTerm1.closed n))))



#[0]QBAIREn : CTerm0 ‚Üí CTerm0
#[0]QBAIREn n = ct0 (QBAIREn ‚åú n ‚åù) c
  where
    c : #[ [ 0 ] ] QBAIREn ‚åú n ‚åù
    c rewrite fvars-FUN0 (QNATn ‚åú n ‚åù) NAT
            | ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù)))
            | lowerVars-fvars-CTerm0‚â°[] n =
      ‚äÜ‚Üí‚äÜ? {lowerVars (fvars (shiftUp 0 ‚åú n ‚åù))} {[ 0 ]}
            (lowerVars-fvars-[0,1] {fvars (shiftUp 0 ‚åú n ‚åù)}
                                   (‚Üífvars-shiftUp‚äÜ-[0,1] {‚åú n ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú n ‚åù} {[ 0 ]} (CTerm0.closed n))))


#QBAIREn : CTerm ‚Üí CTerm
#QBAIREn n = ct (QBAIREn ‚åú n ‚åù) c
  where
    c : # QBAIREn ‚åú n ‚åù
    c rewrite fvars-FUN0 (QNATn ‚åú n ‚åù) NAT
            | ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù)))
            | #shiftUp 0 n
      = lowerVars-fvars-CTerm‚â°[] n



#contQBody‚â° : (F f : CTerm)
            ‚Üí #contQBody F f
               ‚â° #SUM #QNAT
                      (#[0]PI #[0]BAIRE
                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))
#contQBody‚â° F f = CTerm‚â° refl



#QNATn : CTerm ‚Üí CTerm
#QNATn n = ct (QNATn ‚åú n ‚åù) c
  where
    c : # QNATn ‚åú n ‚åù
    c rewrite ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù)))
            | #shiftUp 0 n
      = lowerVars-fvars-CTerm‚â°[] n


‚â°QBAIREn : (n : CTerm) ‚Üí #QBAIREn n ‚â° #FUN (#QNATn n) #NAT
‚â°QBAIREn n = CTerm‚â° refl


‚ÜíequalTypesQLT : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm}
                 ‚Üí equalInType i w #QNAT a‚ÇÅ a‚ÇÇ
                 ‚Üí equalInType i w #QNAT b‚ÇÅ b‚ÇÇ
                 ‚Üí equalTypes i w (#QLT a‚ÇÅ b‚ÇÅ) (#QLT a‚ÇÇ b‚ÇÇ)
‚ÜíequalTypesQLT {i} {w} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ea eb =
  eqTypes-local (‚àÄùïé-‚ñ°Func2 aw ea1 eb1)
  where
    ea1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' a‚ÇÅ a‚ÇÇ)
    ea1 = equalInType-QNAT‚Üí i w a‚ÇÅ a‚ÇÇ ea

    eb1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' b‚ÇÅ b‚ÇÇ)
    eb1 = equalInType-QNAT‚Üí i w b‚ÇÅ b‚ÇÇ eb

    aw : ‚àÄùïé w (Œª w' e' ‚Üí #weakMonEq w' a‚ÇÅ a‚ÇÇ ‚Üí #weakMonEq w' b‚ÇÅ b‚ÇÇ ‚Üí equalTypes i w' (#QLT a‚ÇÅ b‚ÇÅ) (#QLT a‚ÇÇ b‚ÇÇ))
    aw  w1 e1 ha hb =
      EQTQLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ (#compAllRefl (#QLT a‚ÇÅ b‚ÇÅ) w1) (#compAllRefl (#QLT a‚ÇÇ b‚ÇÇ) w1) ha hb



-- MOVE to terms
#[0]QLT : CTerm0 ‚Üí CTerm0 ‚Üí CTerm0
#[0]QLT a b = ct0 (QLT ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : #[ [ 0 ] ] QLT ‚åú a ‚åù ‚åú b ‚åù
    c = ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ fvars ‚åú b ‚åù} {[ 0 ]}
              (‚äÜ++ {Var} {fvars ‚åú a ‚åù} {fvars ‚åú b ‚åù} (‚äÜ?‚Üí‚äÜ (CTerm0.closed a)) (‚äÜ?‚Üí‚äÜ (CTerm0.closed b)))


sub0-QNATn-body : (a n : CTerm) ‚Üí sub0 a (#[0]QLT #[0]VAR ‚åû n ‚åü) ‚â° #QLT a n
sub0-QNATn-body a n rewrite CTerm‚ÜíCTerm0‚ÜíTerm n = CTerm‚â° e
  where
    e : QLT (shiftDown 0 (shiftUp 0 ‚åú a ‚åù)) (shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú n ‚åù))
        ‚â° QLT (CTerm.cTerm a) ‚åú n ‚åù
    e rewrite #shiftUp 0 a
            | #subv 0 ‚åú a ‚åù ‚åú n ‚åù (CTerm.closed n)
            | #shiftDown 0 n | #shiftDown 0 a = refl


‚â°QNATn : (n : CTerm) ‚Üí #QNATn n ‚â° #SET #NAT (#[0]QLT #[0]VAR ‚åû n ‚åü)
‚â°QNATn n rewrite CTerm‚ÜíCTerm0‚ÜíTerm n = CTerm‚â° (‚â°SET refl e)
  where
    e : QLT (VAR 0) (shiftUp 0 ‚åú n ‚åù) ‚â° QLT (VAR 0) ‚åú n ‚åù
    e rewrite #shiftUp 0 n = refl


‚ààNAT‚Üí‚ààQNAT : {i : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
              ‚Üí equalInType i w #NAT a b
              ‚Üí equalInType i w #QNAT a b
‚ààNAT‚Üí‚ààQNAT {i} {w} {a} {b} ea =
  ‚ÜíequalInType-QNAT i w a b (Mod.‚àÄùïé-‚ñ°Func M aw ea2)
  where
    ea2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí NATeq w' a b)
    ea2 = equalInType-NAT‚Üí i w a b ea

    aw : ‚àÄùïé w (Œª w' e' ‚Üí NATeq w' a b ‚Üí #weakMonEq w' a b)
    aw w1 e1 (k , c‚ÇÅ , c‚ÇÇ) w2 e2 = lift (k , lower (c‚ÇÅ w2 e2) , lower (c‚ÇÇ w2 e2))


‚ÜíequalTypesQNATn : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ : CTerm)
                   ‚Üí equalInType i w #QNAT a‚ÇÅ a‚ÇÇ
                   ‚Üí equalTypes i w (#QNATn a‚ÇÅ) (#QNATn a‚ÇÇ)
‚ÜíequalTypesQNATn i w a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes
    (sym (‚â°QNATn a‚ÇÅ))
    (sym (‚â°QNATn a‚ÇÇ))
    (eqTypesSET‚Üê (Œª w' e' ‚Üí eqTypesNAT) aw1)
  where
    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT b‚ÇÅ b‚ÇÇ
                       ‚Üí equalTypes i w' (#QLT b‚ÇÅ a‚ÇÅ) (#QLT b‚ÇÇ a‚ÇÇ))
    aw2 w1 e1 b‚ÇÅ b‚ÇÇ eb = ‚ÜíequalTypesQLT (‚ààNAT‚Üí‚ààQNAT eb) (equalInType-mon ea w1 e1)

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT b‚ÇÅ b‚ÇÇ
                       ‚Üí equalTypes i w' (sub0 b‚ÇÅ (#[0]QLT #[0]VAR ‚åû a‚ÇÅ ‚åü)) (sub0 b‚ÇÇ (#[0]QLT #[0]VAR ‚åû a‚ÇÇ ‚åü)))
    aw1 w1 e1 b‚ÇÅ b‚ÇÇ eb = ‚â°CTerm‚ÜíeqTypes (sym (sub0-QNATn-body b‚ÇÅ a‚ÇÅ)) (sym (sub0-QNATn-body b‚ÇÇ a‚ÇÇ)) (aw2 w1 e1 b‚ÇÅ b‚ÇÇ eb)


‚ÜíequalTypesQBAIREn : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ : CTerm)
                     ‚Üí equalInType i w #QNAT a‚ÇÅ a‚ÇÇ
                     ‚Üí equalTypes i w (#QBAIREn a‚ÇÅ) (#QBAIREn a‚ÇÇ)
‚ÜíequalTypesQBAIREn i w a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes
    (sym (‚â°QBAIREn a‚ÇÅ))
    (sym (‚â°QBAIREn a‚ÇÇ))
    (eqTypesFUN‚Üê (‚ÜíequalTypesQNATn i w a‚ÇÅ a‚ÇÇ ea) eqTypesNAT)


‚ààQNATn‚Üí‚ààNAT : {i : ‚Ñï} {w : ùïé¬∑} {a b n : CTerm}
              ‚Üí equalInType i w #QNAT n n
              ‚Üí equalInType i w (#QNATn n) a b
              ‚Üí equalInType i w #NAT a b
‚ààQNATn‚Üí‚ààNAT {i} {w} {a} {b} {n} en ea =
  ‚ÜíequalInType-NAT i w a b (Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 eb2))
  where
    eb1 : equalInType i w (#SET #NAT (#[0]QLT #[0]VAR ‚åû n ‚åü)) a b
    eb1 = ‚â°CTerm‚ÜíequalInType (‚â°QNATn n) ea

    eb2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí SETeq (equalInType i w' #NAT) (Œª x y ea ‚Üí equalInType i w' (sub0 x (#[0]QLT #[0]VAR ‚åû n ‚åü))) a b)
    eb2 = equalInType-SET‚Üí eb1

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (equalInType i w' #NAT) (Œª x y ea‚ÇÅ ‚Üí equalInType i w' (sub0 x (#[0]QLT #[0]VAR (CTerm‚ÜíCTerm0 n)))) a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí NATeq w'' a b) e'))
    aw1 w1 e1 (x , ex , ey) = Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 s z ‚Üí s) (equalInType-NAT‚Üí i w1 a b ex)


‚ààBAIRE‚Üí‚ààQBAIREn : {i : ‚Ñï} {w : ùïé¬∑} {f g n : CTerm}
                  ‚Üí equalInType i w #QNAT n n
                  ‚Üí equalInType i w #BAIRE f g
                  ‚Üí equalInType i w (#QBAIREn n) f g
‚ààBAIRE‚Üí‚ààQBAIREn {i} {w} {f} {g} {n} en ef =
  ‚â°CTerm‚ÜíequalInType
    (sym (‚â°QBAIREn n))
    (equalInType-FUN (‚ÜíequalTypesQNATn i w n n en)
                     eqTypesNAT
                     aw)
  where
    ef1 : equalInType i w (#FUN #NAT #NAT) f g
    ef1 = ‚â°CTerm‚ÜíequalInType #BAIRE‚â° ef

    ef2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    ef2 = equalInType-FUN‚Üí ef1

    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#QNATn n) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = ef2 w1 e1 a‚ÇÅ a‚ÇÇ (‚ààQNATn‚Üí‚ààNAT (equalInType-mon en w1 e1) ea)



sub0-contQBodyPI : (F f a : CTerm)
                  ‚Üí sub0 a (#[0]PI #[0]BAIRE
                                    (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                             (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                      (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))
                    ‚â° #PI #BAIRE
                          (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                   (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû a ‚åü))
                                            (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT)))
sub0-contQBodyPI F f a
  rewrite CTerm‚ÜíCTerm1‚ÜíTerm f
    = CTerm‚â° (‚â°PI refl (‚â°PI refl (‚â°PI e1 e2)))
  where
    e1 : EQ (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) (shiftUp 0 ‚åú f ‚åù)))
            (VAR 1)
            (PI (SET NAT (QLT (VAR 0) (shiftDown 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))))))) NAT)
         ‚â° EQ (shiftUp 0 ‚åú f ‚åù) (VAR 1) (PI (SET NAT (QLT (VAR 0) (shiftUp 1 (shiftUp 0 ‚åú a ‚åù)))) NAT)
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftUp 0 f
             | #subv 2 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 2 a | #shiftDown 3 a | #shiftDown 2 f | #shiftDown 1 f = refl

    e2 : EQ (APPLY (shiftDown 3 (subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (shiftDown 3 (subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù)))))
            (APPLY (shiftDown 3 (subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (VAR 2))
            NAT
         ‚â° EQ (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù))) (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (VAR 2)) NAT
    e2 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 F | #shiftUp 0 f
             | #shiftUp 1 F | #shiftUp 1 f
             | #subv 3 ‚åú a ‚åù ‚åú F ‚åù (CTerm.closed F)
             | #subv 3 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 3 F | #shiftDown 3 f = refl



sub0-contQBodyPI-PI : (F f a g : CTerm)
                    ‚Üí sub0 g (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                       (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû a ‚åü))
                                                (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT)))
                       ‚â° #FUN (#FFDEFS #BAIRE g) (#FUN (#EQ f g (#QBAIREn a)) (#EQ (#APPLY F f) (#APPLY F g) #NAT))
sub0-contQBodyPI-PI F f a g
  rewrite CTerm‚ÜíCTerm1‚ÜíTerm f =
  CTerm‚â° (‚â°PI e0 (‚â°PI e1 e2))
  where
    e0 : FFDEFS BAIRE (shiftDown 0 (shiftUp 0 ‚åú g ‚åù))
         ‚â° FFDEFS BAIRE ‚åú g ‚åù
    e0 rewrite #shiftUp 0 g | #shiftDown 0 g = refl

    e1 : EQ (shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)))
            (shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù)))
            (PI (SET NAT (QLT (VAR 0) (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú a ‚åù)))))) NAT)
         ‚â° EQ (shiftUp 0 ‚åú f ‚åù) (shiftUp 0 ‚åú g ‚åù) (PI (SET NAT (QLT (VAR 0) (shiftUp 1 (shiftUp 0 ‚åú a ‚åù)))) NAT)
    e1 rewrite #shiftUp 0 g | #shiftUp 0 g | #shiftUp 0 g | #shiftUp 0 a | #shiftUp 1 a | #shiftUp 0 f
             | #subv 1 ‚åú g ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #subv 2 ‚åú g ‚åù ‚åú a ‚åù (CTerm.closed a)
             | #shiftDown 1 f | #shiftDown 2 a | #shiftDown 1 g = refl --refl

    e2 : EQ (APPLY (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù)))))
            (APPLY (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù)))))
            NAT
         ‚â° EQ (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù))) (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (shiftUp 1 (shiftUp 0 ‚åú g ‚åù))) NAT
    e2 rewrite #shiftUp 0 g | #shiftUp 0 g | #shiftUp 0 F | #shiftUp 0 f | #shiftUp 0 g
             | #shiftUp 1 F | #shiftUp 1 f | #shiftUp 1 g
             | #subv 2 ‚åú g ‚åù ‚åú F ‚åù (CTerm.closed F)
             | #subv 2 ‚åú g ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 2 F | #shiftDown 2 f | #shiftDown 2 g = refl



equalTypes-contQBodyPI : (i : ‚Ñï) (w : ùïé¬∑) (F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ : CTerm)
                        ‚Üí equalInType i w #BAIRE‚ÜíNAT F‚ÇÅ F‚ÇÇ
                        ‚Üí equalInType i w #BAIRE f‚ÇÅ f‚ÇÇ
                        ‚Üí ‚àÄùïé w (Œª w' e ‚Üí
                             (a‚ÇÅ a‚ÇÇ : CTerm)
                             ‚Üí equalInType i w' #QNAT a‚ÇÅ a‚ÇÇ
                             ‚Üí equalTypes i w'
                                 (sub0 a‚ÇÅ (#[0]PI #[0]BAIRE
                                          (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                   (#[1]FUN (#[1]EQ ‚åû f‚ÇÅ ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                            (#[1]EQ (#[1]APPLY ‚åû F‚ÇÅ ‚åü ‚åû f‚ÇÅ ‚åü) (#[1]APPLY ‚åû F‚ÇÅ ‚åü #[1]VAR0) #[1]NAT)))))
                                 (sub0 a‚ÇÇ (#[0]PI #[0]BAIRE
                                          (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                   (#[1]FUN (#[1]EQ ‚åû f‚ÇÇ ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                            (#[1]EQ (#[1]APPLY ‚åû F‚ÇÇ ‚åü ‚åû f‚ÇÇ ‚åü) (#[1]APPLY ‚åû F‚ÇÇ ‚åü #[1]VAR0) #[1]NAT))))))
equalTypes-contQBodyPI i w F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ààF ‚ààf w1 e1 a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes (sym (sub0-contQBodyPI F‚ÇÅ f‚ÇÅ a‚ÇÅ)) (sym (sub0-contQBodyPI F‚ÇÇ f‚ÇÇ a‚ÇÇ)) ea1
  where
    ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                         ‚Üí equalTypes i w2
                               (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f‚ÇÅ g‚ÇÅ (#QBAIREn a‚ÇÅ)) (#EQ (#APPLY F‚ÇÅ f‚ÇÅ) (#APPLY F‚ÇÅ g‚ÇÅ) #NAT)))
                               (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f‚ÇÇ g‚ÇÇ (#QBAIREn a‚ÇÇ)) (#EQ (#APPLY F‚ÇÇ f‚ÇÇ) (#APPLY F‚ÇÇ g‚ÇÇ) #NAT))))
    ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
      eqTypesFUN‚Üê
        (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
        (eqTypesFUN‚Üê
          (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 a‚ÇÅ a‚ÇÇ (equalInType-mon ea w2 e2))
                      (‚ààBAIRE‚Üí‚ààQBAIREn (equalInType-refl (equalInType-mon ea w2 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                      (‚ààBAIRE‚Üí‚ààQBAIREn (equalInType-refl (equalInType-mon ea w2 e2)) eg))
          (eqTypesEQ‚Üê eqTypesNAT
                      (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                      (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

    ea1 : equalTypes i w1
            (#PI #BAIRE
                 (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                          (#[0]FUN (#[0]EQ ‚åû f‚ÇÅ ‚åü #[0]VAR (#[0]QBAIREn ‚åû a‚ÇÅ ‚åü))
                                   (#[0]EQ (#[0]APPLY ‚åû F‚ÇÅ ‚åü ‚åû f‚ÇÅ ‚åü) (#[0]APPLY ‚åû F‚ÇÅ ‚åü #[0]VAR) #[0]NAT))))
            (#PI #BAIRE
                 (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                          (#[0]FUN (#[0]EQ ‚åû f‚ÇÇ ‚åü #[0]VAR (#[0]QBAIREn ‚åû a‚ÇÇ ‚åü))
                                   (#[0]EQ (#[0]APPLY ‚åû F‚ÇÇ ‚åü ‚åû f‚ÇÇ ‚åü) (#[0]APPLY ‚åû F‚ÇÇ ‚åü #[0]VAR) #[0]NAT))))
    ea1 = eqTypesPI‚Üê (Œª w' _ ‚Üí eqTypesBAIRE)
                      (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí
                        ‚â°CTerm‚ÜíeqTypes
                          (sym (sub0-contQBodyPI-PI F‚ÇÅ f‚ÇÅ a‚ÇÅ g‚ÇÅ))
                          (sym (sub0-contQBodyPI-PI F‚ÇÇ f‚ÇÇ a‚ÇÇ g‚ÇÇ))
                          (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))




equalTypes-contQBody : (i : ‚Ñï) (w : ùïé¬∑) (F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ : CTerm)
                      ‚Üí equalInType i w #BAIRE‚ÜíNAT F‚ÇÅ F‚ÇÇ
                      ‚Üí equalInType i w #BAIRE f‚ÇÅ f‚ÇÇ
                      ‚Üí equalTypes i w (#contQBody F‚ÇÅ f‚ÇÅ) (#contQBody F‚ÇÇ f‚ÇÇ)
equalTypes-contQBody i w F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíeqTypes
    (sym (#contQBody‚â° F‚ÇÅ f‚ÇÅ))
    (sym (#contQBody‚â° F‚ÇÇ f‚ÇÇ))
    (eqTypesSUM‚Üê
      (Œª w' e' ‚Üí eqTypesQNAT)
      (equalTypes-contQBodyPI i w F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ààF ‚ààf))



equalInType-QBAIREn-BAIRE-trans : {i : ‚Ñï} {w : ùïé¬∑} {a b c n : CTerm}
                                 ‚Üí equalInType i w #BAIRE b c
                                 ‚Üí equalInType i w (#QBAIREn n) a b
                                 ‚Üí equalInType i w #QNAT n n
                                 ‚Üí equalInType i w (#QBAIREn n) a c
equalInType-QBAIREn-BAIRE-trans {i} {w} {a} {b} {c} {n} h1 h2 h3 =
  equalInType-trans h2 h4
  where
    h4 : equalInType i w (#QBAIREn n) b c
    h4 = ‚ààBAIRE‚Üí‚ààQBAIREn h3 h1



continuityQBody : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
                  (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                  ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                  ‚Üí ‚ààType i w #BAIRE f
                  ‚Üí ‚ààType i w (#contQBody F f) (#PAIR (#ŒΩtestMup F f) #lam3AX)
continuityQBody cn kb gc i w F f ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contQBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #QNAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestMup F f) #lam3AX)
                                (#PAIR (#ŒΩtestMup F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestMup F f , #ŒΩtestMup F f , #lam3AX , #lam3AX ,
      testM-QNAT cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestMup F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestMup F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#QBAIREn (#ŒΩtestMup F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                              ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                        (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f)))
                                                              (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                             (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
        aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          equalInType-FUN
            (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                           (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                           (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
              (eqTypesEQ‚Üê eqTypesNAT
                           (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                           (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
            aw4
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                 ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                 ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f)))
                                                           (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                     (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                     (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
            aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
              equalInType-FUN
                (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w3 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                             (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                             (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                (eqTypesEQ‚Üê eqTypesNAT
                             (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                             (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                aw5
              where
                aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f))) y‚ÇÅ y‚ÇÇ
                                     ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                         (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                         (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                  equalInType-EQ
                    eqTypesNAT
                    concl
                  where
                    hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#QBAIREn (#ŒΩtestMup F f)) f g‚ÇÅ)
                    hyp = equalInType-EQ‚Üí ey

                    ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                    ff = equalInTypeFFDEFS‚Üí ex

                    aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#QBAIREn (#ŒΩtestMup F f)) f g‚ÇÅ
                                          ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                          ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                    aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                      where
                        h3 : equalInType i w5 (#QBAIREn (#ŒΩtestMup F f)) f g
                        h3 = equalInType-QBAIREn-BAIRE-trans h2 h1 (testM-QNAT cn kb gc i w5 F f (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                        cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                        cc = {!!} {--eqfg cn kb gc {i} {w5} {F} {f} {g} nnF nnf nng
                                  (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))))
                                  (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))))
                                  (equalInType-refl (equalInType-sym h2))
                                  h3--}

                    concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                    concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

        aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                              ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                    (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû #ŒΩtestMup F f ‚åü))
                                                                             (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                             (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
        aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          ‚â°CTerm‚ÜíequalInType (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû #ŒΩtestMup F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÅ)) (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2

        eql1 : equalInType i w1 (sub0 (#ŒΩtestMup F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contQBodyPI F f (#ŒΩtestMup F f))) eql2


    h0 : ‚ààType i w (#SUM #QNAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestMup F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesQNAT) (equalTypes-contQBodyPI i w F F f f ‚ààF ‚ààf) (Mod.‚àÄùïé-‚ñ° M aw)

\end{code}
