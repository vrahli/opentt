\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity1b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)
open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)



#‚áìsame‚Ñï : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set
#‚áìsame‚Ñï w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí t1 #‚áì (#NUM n) at w √ó t2 #‚áì (#NUM n) at w)


testMup : (name : Name) (F f : Term) ‚Üí Term
testMup name F f = testM name (shiftNameUp 0 F) (shiftNameUp 0 f)


#testMup : (name : Name) (F f : CTerm) ‚Üí CTerm
#testMup name F f = #testM name (#shiftNameUp 0 F) (#shiftNameUp 0 f)


ŒΩtestMup : (F f : Term) ‚Üí Term
ŒΩtestMup F f = ŒΩtestM (shiftNameUp 0 F) (shiftNameUp 0 f)


#ŒΩtestMup : (F f : CTerm) ‚Üí CTerm
#ŒΩtestMup F f = #ŒΩtestM (#shiftNameUp 0 F) (#shiftNameUp 0 f)


testML : (name : Name) (F f : Term) ‚Üí Term
testML name F f = SEQ (LOAD F) (testM name F f)


testMLup : (name : Name) (F f : Term) ‚Üí Term
testMLup name F f = SEQ (LOAD F) (testMup name F f)


ŒΩtestML : (F f : Term) ‚Üí Term
ŒΩtestML F f = FRESH (testML 0 F f)


ŒΩtestMLup : (F f : Term) ‚Üí Term
ŒΩtestMLup F f = FRESH (testMLup 0 F f)


#LOAD : CTerm ‚Üí CTerm
#LOAD a = ct (LOAD ‚åú a ‚åù) c
  where
    c : # LOAD ‚åú a ‚åù
    c rewrite CTerm.closed a = refl


#testML : (name : Name) (F f : CTerm) ‚Üí CTerm
#testML name F f = ct (testML name ‚åú F ‚åù ‚åú f ‚åù) c
  where
    c : # testML name ‚åú F ‚åù ‚åú f ‚åù
    c rewrite fvars-SEQ0 (LOAD ‚åú F ‚åù) (testM name ‚åú F ‚åù ‚åú f ‚åù)
            | CTerm.closed (#testM name F f)
            | CTerm.closed F = refl --refl


#testMLup : (name : Name) (F f : CTerm) ‚Üí CTerm
#testMLup name F f = ct (testMLup name ‚åú F ‚åù ‚åú f ‚åù) c
  where
    c : # testMLup name ‚åú F ‚åù ‚åú f ‚åù
    c rewrite fvars-SEQ0 (LOAD ‚åú F ‚åù) (testMup name ‚åú F ‚åù ‚åú f ‚åù)
            | CTerm.closed (#testMup name F f)
            | CTerm.closed F = refl --refl


#ŒΩtestML : (F f : CTerm) ‚Üí CTerm
#ŒΩtestML F f = ct (ŒΩtestML ‚åú F ‚åù ‚åú f ‚åù) c
  where
    c : # ŒΩtestML ‚åú F ‚åù ‚åú f ‚åù
    c = CTerm.closed (#testML 0 F f)


#ŒΩtestMLup : (F f : CTerm) ‚Üí CTerm
#ŒΩtestMLup F f = ct (ŒΩtestMLup ‚åú F ‚åù ‚åú f ‚åù) c
  where
    c : # ŒΩtestMLup ‚åú F ‚åù ‚åú f ‚åù
    c = CTerm.closed (#testMLup 0 F f)


testM-QNAT-shift : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm) (name : Name)
                    ‚Üí compatible¬∑ name w Res‚ä§
                    ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                    ‚Üí ‚ààType i w #BAIRE f
                    ‚Üí #‚áìsame‚Ñï w (#testM name F f) (#testM name F f)
testM-QNAT-shift cn kb gc i w1 F f name comp1 ‚ààF ‚ààf =
  suc k , ack , ack
  where
    w2 : ùïé¬∑
    w2 = chooseT name w1 (NUM 0)

    cs : set0 name ‚áì AX from w1 to w2
    cs = 1 , refl

    e2 : w1 ‚äë¬∑ w2
    e2 = ‚áìfrom-to‚Üí‚äë {w1} {w2} cs

    -- we prove that in w2 name's value is 0
    gc0 : getT 0 name w2 ‚â° just (NUM 0)
    gc0 = gc name w1 0 comp1

    g0 : ‚àÄùïé w2 (Œª w' e ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w' ‚â° just (NUM j))))
    g0 = cn name w1 0 comp1

    eqa : ‚ààType i w2 #NAT (#APPLY F (#upd name f))
    eqa = equalInType-FUN‚Üí
            (equalInType-mon ‚ààF w2 e2) w2 (‚äë-refl¬∑ _) (#upd name f) (#upd name f)
            (upd‚àà i w2 name f g0 (equalInType-mon ‚ààf w2 e2))

    eqn : NATeq w2 (#APPLY F (#upd name f)) (#APPLY F (#upd name f))
    eqn = kb (equalInType-NAT‚Üí i w2 (#APPLY F (#upd name f)) (#APPLY F (#upd name f)) eqa) w2 (‚äë-refl¬∑ _)

    cak : Œ£ ‚Ñï (Œª k ‚Üí appUpd name ‚åú F ‚åù ‚åú f ‚åù ‚áõ NUM k at w2)
    cak = fst eqn , fst (snd eqn)

    m : ‚Ñï
    m = fst cak

    ca : Œ£ ùïé¬∑ (Œª w' ‚Üí appUpd name ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM m from w2 to w')
    ca = ‚áõ‚Üí‚áìfrom-to (snd cak)

    w3 : ùïé¬∑
    w3 = fst ca

    e3 : w2 ‚äë¬∑ w3
    e3 = ‚áìfrom-to‚Üí‚äë {w2} {w3} (snd ca)

    gt0 : Œ£ ‚Ñï (Œª k ‚Üí getT 0 name w3 ‚â° just (NUM k))
    gt0 = lower (g0 w3 e3)

    k : ‚Ñï
    k = fst gt0

    gk : get0 name ‚áì NUM k from w3 to w3
    gk = 1 , step-APPLY-CS (NUM k) w3 0 name (snd gt0)

    pbk : probeM name ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (suc k) from w2 to w3
    pbk = ‚áì-trans‚ÇÇ (SEQ‚áì‚ÇÅ (snd ca)) (‚áì-trans‚ÇÇ (SEQ-val‚áì w3 (NUM m) (SUC (get0 name)) tt) (‚áìNUM‚ÜíSUC‚áìNUM gk))

    ack : testM name ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (suc k) at w1
    ack = ‚áì-from-to‚Üí‚áì {w1} {w3} {testM name ‚åú F ‚åù ‚åú f ‚åù} {NUM (suc k)}
                       (‚áì-trans‚ÇÇ {w1} {w2} {w3} {testM name ‚åú F ‚åù ‚åú f ‚åù} {SEQ AX (probeM name ‚åú F ‚åù ‚åú f ‚åù)} {NUM (suc k)}
                                 (SEQ‚áì‚ÇÅ {w1} {w2} {set0 name} {AX} {probeM name ‚åú F ‚åù ‚åú f ‚åù} cs)
                                 (‚áì-trans‚ÇÇ (SEQ-val‚áì w2 AX (probeM name ‚åú F ‚åù ‚åú f ‚åù) tt) pbk))



ŒΩtestM-QNAT-shift : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                    ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                    ‚Üí ‚ààType i w #BAIRE f
                    ‚Üí #‚áìsame‚Ñï w (#ŒΩtestMup F f) (#ŒΩtestMup F f)
ŒΩtestM-QNAT-shift cn kb gc i w F f ‚ààF ‚ààf =
  fst smn , ack , ack
  where
    tM : Term
    tM = testMup 0 ‚åú F ‚åù ‚åú f ‚åù

    name : Name
    name = newChoiceT w tM

    w1 : ùïé¬∑
    w1 = startNewChoiceT Res‚ä§ w tM

    e1 : w ‚äë¬∑ w1
    e1 = startNewChoiceT‚äè Res‚ä§ w tM

    comp1 : compatible¬∑ name w1 Res‚ä§
    comp1 = startChoiceCompatible¬∑ Res‚ä§ w name (¬¨newChoiceT‚ààdomùïé w tM)

    s1 : ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù ‚áì testM name ‚åú F ‚åù ‚åú f ‚åù from w to w1
    s1 = 1 , ‚â°pair (shiftNameDown-renn-shiftNameUp name ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f)) refl

    smn : #‚áìsame‚Ñï w1 (#testM name F f) (#testM name F f)
    smn = testM-QNAT-shift cn kb gc i w1 F f name comp1 (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

    ack : ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (fst smn) at w
    ack = ‚áì-trans‚ÇÅ {w} {w1} {ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù} {testM name ‚åú F ‚åù ‚åú f ‚åù} {NUM (proj‚ÇÅ smn)} s1 (fst (snd smn))



‚â°SEQ : {a b c d : Term} ‚Üí a ‚â° b ‚Üí c ‚â° d ‚Üí SEQ a c ‚â° SEQ b d
‚â°SEQ {a} {b} {c} {d} e f rewrite e | f = refl



shiftNameDown-renn-shiftNameUp-LOAD :
  (name : Name) (F f : Term)
  ‚Üí # F
  ‚Üí # f
  ‚Üí shiftNameDown 0 (renn 0 (suc name) (testMLup 0 F f))
     ‚â° testML name F f
shiftNameDown-renn-shiftNameUp-LOAD name F f cF cf
  rewrite shiftUp-shiftNameUp 0 0 F
        | shiftUp-shiftNameUp 0 0 f
        | #shiftUp 0 (ct F cF)
        | #shiftUp 0 (ct f cf)
        | shiftUp-shiftNameUp 3 0 f
        | #shiftUp 3 (ct f cf)
        | renn-shiftNameUp 0 (suc name) F
        | renn-shiftNameUp 0 (suc name) f
        | shiftNameDownUp 0 F
        | shiftNameDownUp 0 f
        | shiftUp-shiftNameUp 1 0 F
        | shiftUp-shiftNameUp 4 0 f
        | #shiftUp 1 (ct F cF)
        | #shiftUp 4 (ct f cf)
        | renn-shiftNameUp 0 (suc name) F
        | renn-shiftNameUp 0 (suc name) f
        | shiftNameDownUp 0 F
        | shiftNameDownUp 0 f = refl


testML-QNAT-shift : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm) (name : Name)
                    ‚Üí compatible¬∑ name w Res‚ä§
                    ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                    ‚Üí ‚ààType i w #BAIRE f
                    ‚Üí #‚áìsame‚Ñï w (#testML name F f) (#testML name F f)
testML-QNAT-shift cn kb gc i w F f name compat ‚ààF ‚ààf =
  fst smn , ack , ack
  where
    w1 : ùïé¬∑
    w1 = startNewChoices Res‚ä§ w ‚åú F ‚åù

    e1 : w ‚äë¬∑ w1
    e1 = startNewChoices‚äë Res‚ä§ w ‚åú F ‚åù

    s1 : testML name ‚åú F ‚åù ‚åú f ‚åù ‚áì SEQ AX (testM name ‚åú F ‚åù ‚åú f ‚åù) from w to w1
    s1 = 1 , refl

    smn : #‚áìsame‚Ñï w1 (#testM name F f) (#testM name F f)
    smn = testM-QNAT-shift cn kb gc i w1 F f name (‚äë-compatible¬∑ e1 compat) (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

    ack : testML name ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (fst smn) at w
    ack = ‚áì-trans‚ÇÅ {w} {w1} {testML name ‚åú F ‚åù ‚åú f ‚åù} {SEQ AX (testM name ‚åú F ‚åù ‚åú f ‚åù)} {NUM (proj‚ÇÅ smn)}
                   s1
                   (‚áì-trans‚ÇÅ {w1} {w1} {SEQ AX (testM name ‚åú F ‚åù ‚åú f ‚åù)} {testM name ‚åú F ‚åù ‚åú f ‚åù} {NUM (proj‚ÇÅ smn)}
                             (SEQ-AX‚áì‚ÇÅfrom-to {w1} {testM name ‚åú F ‚åù ‚åú f ‚åù} (CTerm.closed (#testM name F f)))
                             (fst (snd smn)))



ŒΩtestMLup-QNAT-shift : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                    ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                    ‚Üí ‚ààType i w #BAIRE f
                    ‚Üí #‚áìsame‚Ñï w (#ŒΩtestMLup F f) (#ŒΩtestMLup F f)
ŒΩtestMLup-QNAT-shift cn kb gc i w F f ‚ààF ‚ààf =
  fst smn , ack , ack
  where
    tM : Term
    tM = testMLup 0 ‚åú F ‚åù ‚åú f ‚åù

    name : Name
    name = newChoiceT w tM

    w1 : ùïé¬∑
    w1 = startNewChoiceT Res‚ä§ w tM

    e1 : w ‚äë¬∑ w1
    e1 = startNewChoiceT‚äè Res‚ä§ w tM

    comp1 : compatible¬∑ name w1 Res‚ä§
    comp1 = startChoiceCompatible¬∑ Res‚ä§ w name (¬¨newChoiceT‚ààdomùïé w tM)

    s1 : ŒΩtestMLup ‚åú F ‚åù ‚åú f ‚åù ‚áì testML name ‚åú F ‚åù ‚åú f ‚åù from w to w1
    s1 = 1 , ‚â°pair (shiftNameDown-renn-shiftNameUp-LOAD name ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f)) refl

    smn : #‚áìsame‚Ñï w1 (#testML name F f) (#testML name F f)
    smn = testML-QNAT-shift cn kb gc i w1 F f name comp1 (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

    ack : ŒΩtestMLup ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM (fst smn) at w
    ack = ‚áì-trans‚ÇÅ {w} {w1} {ŒΩtestMLup ‚åú F ‚åù ‚åú f ‚åù} {testML name ‚åú F ‚åù ‚åú f ‚åù} {NUM (proj‚ÇÅ smn)} s1 (fst (snd smn))



testM-QNAT : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
              (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
              ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
              ‚Üí ‚ààType i w #BAIRE f
              ‚Üí ‚ààType i w #QNAT (#ŒΩtestMup F f)
testM-QNAT cn kb gc i w F f ‚ààF ‚ààf =
  ‚ÜíequalInType-QNAT i w (#ŒΩtestMup F f) (#ŒΩtestMup F f) (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #weakMonEq w' (#ŒΩtestMup F f) (#ŒΩtestMup F f))
    aw w1 e1 w2 e2 = lift (ŒΩtestM-QNAT-shift cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))



QNATn : Term ‚Üí Term
QNATn n = SET NAT (QLT (VAR 0) (shiftUp 0 n))


QBAIREn : Term ‚Üí Term
QBAIREn n = FUN (QNATn n) NAT


contQBody : (F f : Term) ‚Üí Term
contQBody F f =
  SUM QNAT
      (PI BAIRE
          (FUN (FFDEFS BAIRE (VAR 0))
               (FUN (EQ f (VAR 0) (QBAIREn (VAR 1)))
                    (EQ (APPLY F f) (APPLY F (VAR 0)) NAT))))



#contQBody : (F f : CTerm) ‚Üí CTerm
#contQBody F f = ct (contQBody ‚åú F ‚åù ‚åú f ‚åù) c
  where
    c : # contBody ‚åú F ‚åù ‚åú f ‚åù
    c rewrite CTerm.closed f
            | #shiftUp 0 f
            | #shiftUp 0 F
            | CTerm.closed F
            | CTerm.closed f
            | #shiftUp 1 f
            | #shiftUp 1 F
            | CTerm.closed F
            | CTerm.closed f = refl



#[1]QBAIREn : CTerm1 ‚Üí CTerm1
#[1]QBAIREn n = ct1 (QBAIREn ‚åú n ‚åù) c
  where
    c : #[ 0 ‚à∑ [ 1 ] ] QBAIREn ‚åú n ‚åù
    c rewrite fvars-FUN0 (QNATn ‚åú n ‚åù) NAT | ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù))) =
      ‚äÜ‚Üí‚äÜ? {lowerVars (fvars (shiftUp 0 ‚åú n ‚åù))} {0 ‚à∑ [ 1 ]}
           (lowerVars-fvars-[0,1,2] {fvars (shiftUp 0 ‚åú n ‚åù)} (‚Üífvars-shiftUp‚äÜ-[0,1,2] {‚åú n ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú n ‚åù} {0 ‚à∑ [ 1 ]} (CTerm1.closed n))))



#[0]QBAIREn : CTerm0 ‚Üí CTerm0
#[0]QBAIREn n = ct0 (QBAIREn ‚åú n ‚åù) c
  where
    c : #[ [ 0 ] ] QBAIREn ‚åú n ‚åù
    c rewrite fvars-FUN0 (QNATn ‚åú n ‚åù) NAT
            | ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù)))
            | lowerVars-fvars-CTerm0‚â°[] n =
      ‚äÜ‚Üí‚äÜ? {lowerVars (fvars (shiftUp 0 ‚åú n ‚åù))} {[ 0 ]}
            (lowerVars-fvars-[0,1] {fvars (shiftUp 0 ‚åú n ‚åù)}
                                   (‚Üífvars-shiftUp‚äÜ-[0,1] {‚åú n ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú n ‚åù} {[ 0 ]} (CTerm0.closed n))))


#QBAIREn : CTerm ‚Üí CTerm
#QBAIREn n = ct (QBAIREn ‚åú n ‚åù) c
  where
    c : # QBAIREn ‚åú n ‚åù
    c rewrite fvars-FUN0 (QNATn ‚åú n ‚åù) NAT
            | ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù)))
            | #shiftUp 0 n
      = lowerVars-fvars-CTerm‚â°[] n



#contQBody‚â° : (F f : CTerm)
            ‚Üí #contQBody F f
               ‚â° #SUM #QNAT
                      (#[0]PI #[0]BAIRE
                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))
#contQBody‚â° F f = CTerm‚â° refl



#QNATn : CTerm ‚Üí CTerm
#QNATn n = ct (QNATn ‚åú n ‚åù) c
  where
    c : # QNATn ‚åú n ‚åù
    c rewrite ++[] (lowerVars (fvars (shiftUp 0 ‚åú n ‚åù)))
            | #shiftUp 0 n
      = lowerVars-fvars-CTerm‚â°[] n


‚â°QBAIREn : (n : CTerm) ‚Üí #QBAIREn n ‚â° #FUN (#QNATn n) #NAT
‚â°QBAIREn n = CTerm‚â° refl


‚ÜíequalTypesQLT : {i : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm}
                 ‚Üí equalInType i w #QNAT a‚ÇÅ a‚ÇÇ
                 ‚Üí equalInType i w #QNAT b‚ÇÅ b‚ÇÇ
                 ‚Üí equalTypes i w (#QLT a‚ÇÅ b‚ÇÅ) (#QLT a‚ÇÇ b‚ÇÇ)
‚ÜíequalTypesQLT {i} {w} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} ea eb =
  eqTypes-local (‚àÄùïé-‚ñ°Func2 aw ea1 eb1)
  where
    ea1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' a‚ÇÅ a‚ÇÇ)
    ea1 = equalInType-QNAT‚Üí i w a‚ÇÅ a‚ÇÇ ea

    eb1 : ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' b‚ÇÅ b‚ÇÇ)
    eb1 = equalInType-QNAT‚Üí i w b‚ÇÅ b‚ÇÇ eb

    aw : ‚àÄùïé w (Œª w' e' ‚Üí #weakMonEq w' a‚ÇÅ a‚ÇÇ ‚Üí #weakMonEq w' b‚ÇÅ b‚ÇÇ ‚Üí equalTypes i w' (#QLT a‚ÇÅ b‚ÇÅ) (#QLT a‚ÇÇ b‚ÇÇ))
    aw  w1 e1 ha hb =
      EQTQLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ (#compAllRefl (#QLT a‚ÇÅ b‚ÇÅ) w1) (#compAllRefl (#QLT a‚ÇÇ b‚ÇÇ) w1) ha hb



-- MOVE to terms
#[0]QLT : CTerm0 ‚Üí CTerm0 ‚Üí CTerm0
#[0]QLT a b = ct0 (QLT ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : #[ [ 0 ] ] QLT ‚åú a ‚åù ‚åú b ‚åù
    c = ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ fvars ‚åú b ‚åù} {[ 0 ]}
              (‚äÜ++ {Var} {fvars ‚åú a ‚åù} {fvars ‚åú b ‚åù} (‚äÜ?‚Üí‚äÜ (CTerm0.closed a)) (‚äÜ?‚Üí‚äÜ (CTerm0.closed b)))


sub0-QNATn-body : (a n : CTerm) ‚Üí sub0 a (#[0]QLT #[0]VAR ‚åû n ‚åü) ‚â° #QLT a n
sub0-QNATn-body a n rewrite CTerm‚ÜíCTerm0‚ÜíTerm n = CTerm‚â° e
  where
    e : QLT (shiftDown 0 (shiftUp 0 ‚åú a ‚åù)) (shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú n ‚åù))
        ‚â° QLT (CTerm.cTerm a) ‚åú n ‚åù
    e rewrite #shiftUp 0 a
            | #subv 0 ‚åú a ‚åù ‚åú n ‚åù (CTerm.closed n)
            | #shiftDown 0 n | #shiftDown 0 a = refl


‚â°QNATn : (n : CTerm) ‚Üí #QNATn n ‚â° #SET #NAT (#[0]QLT #[0]VAR ‚åû n ‚åü)
‚â°QNATn n rewrite CTerm‚ÜíCTerm0‚ÜíTerm n = CTerm‚â° (‚â°SET refl e)
  where
    e : QLT (VAR 0) (shiftUp 0 ‚åú n ‚åù) ‚â° QLT (VAR 0) ‚åú n ‚åù
    e rewrite #shiftUp 0 n = refl


‚ààNAT‚Üí‚ààQNAT : {i : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
              ‚Üí equalInType i w #NAT a b
              ‚Üí equalInType i w #QNAT a b
‚ààNAT‚Üí‚ààQNAT {i} {w} {a} {b} ea =
  ‚ÜíequalInType-QNAT i w a b (Mod.‚àÄùïé-‚ñ°Func M aw ea2)
  where
    ea2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí NATeq w' a b)
    ea2 = equalInType-NAT‚Üí i w a b ea

    aw : ‚àÄùïé w (Œª w' e' ‚Üí NATeq w' a b ‚Üí #weakMonEq w' a b)
    aw w1 e1 (k , c‚ÇÅ , c‚ÇÇ) w2 e2 = lift (k , lower (c‚ÇÅ w2 e2) , lower (c‚ÇÇ w2 e2))


‚ÜíequalTypesQNATn : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ : CTerm)
                   ‚Üí equalInType i w #QNAT a‚ÇÅ a‚ÇÇ
                   ‚Üí equalTypes i w (#QNATn a‚ÇÅ) (#QNATn a‚ÇÇ)
‚ÜíequalTypesQNATn i w a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes
    (sym (‚â°QNATn a‚ÇÅ))
    (sym (‚â°QNATn a‚ÇÇ))
    (eqTypesSET‚Üê (Œª w' e' ‚Üí eqTypesNAT) aw1)
  where
    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT b‚ÇÅ b‚ÇÇ
                       ‚Üí equalTypes i w' (#QLT b‚ÇÅ a‚ÇÅ) (#QLT b‚ÇÇ a‚ÇÇ))
    aw2 w1 e1 b‚ÇÅ b‚ÇÇ eb = ‚ÜíequalTypesQLT (‚ààNAT‚Üí‚ààQNAT eb) (equalInType-mon ea w1 e1)

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT b‚ÇÅ b‚ÇÇ
                       ‚Üí equalTypes i w' (sub0 b‚ÇÅ (#[0]QLT #[0]VAR ‚åû a‚ÇÅ ‚åü)) (sub0 b‚ÇÇ (#[0]QLT #[0]VAR ‚åû a‚ÇÇ ‚åü)))
    aw1 w1 e1 b‚ÇÅ b‚ÇÇ eb = ‚â°CTerm‚ÜíeqTypes (sym (sub0-QNATn-body b‚ÇÅ a‚ÇÅ)) (sym (sub0-QNATn-body b‚ÇÇ a‚ÇÇ)) (aw2 w1 e1 b‚ÇÅ b‚ÇÇ eb)


‚ÜíequalTypesQBAIREn : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ : CTerm)
                     ‚Üí equalInType i w #QNAT a‚ÇÅ a‚ÇÇ
                     ‚Üí equalTypes i w (#QBAIREn a‚ÇÅ) (#QBAIREn a‚ÇÇ)
‚ÜíequalTypesQBAIREn i w a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes
    (sym (‚â°QBAIREn a‚ÇÅ))
    (sym (‚â°QBAIREn a‚ÇÇ))
    (eqTypesFUN‚Üê (‚ÜíequalTypesQNATn i w a‚ÇÅ a‚ÇÇ ea) eqTypesNAT)


‚ààQNATn‚Üí‚ààNAT : {i : ‚Ñï} {w : ùïé¬∑} {a b n : CTerm}
              ‚Üí equalInType i w #QNAT n n
              ‚Üí equalInType i w (#QNATn n) a b
              ‚Üí equalInType i w #NAT a b
‚ààQNATn‚Üí‚ààNAT {i} {w} {a} {b} {n} en ea =
  ‚ÜíequalInType-NAT i w a b (Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 eb2))
  where
    eb1 : equalInType i w (#SET #NAT (#[0]QLT #[0]VAR ‚åû n ‚åü)) a b
    eb1 = ‚â°CTerm‚ÜíequalInType (‚â°QNATn n) ea

    eb2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí SETeq (equalInType i w' #NAT) (Œª x y ea ‚Üí equalInType i w' (sub0 x (#[0]QLT #[0]VAR ‚åû n ‚åü))) a b)
    eb2 = equalInType-SET‚Üí eb1

    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (equalInType i w' #NAT) (Œª x y ea‚ÇÅ ‚Üí equalInType i w' (sub0 x (#[0]QLT #[0]VAR (CTerm‚ÜíCTerm0 n)))) a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí NATeq w'' a b) e'))
    aw1 w1 e1 (x , ex , ey) = Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 s z ‚Üí s) (equalInType-NAT‚Üí i w1 a b ex)


‚ààBAIRE‚Üí‚ààQBAIREn : {i : ‚Ñï} {w : ùïé¬∑} {f g n : CTerm}
                  ‚Üí equalInType i w #QNAT n n
                  ‚Üí equalInType i w #BAIRE f g
                  ‚Üí equalInType i w (#QBAIREn n) f g
‚ààBAIRE‚Üí‚ààQBAIREn {i} {w} {f} {g} {n} en ef =
  ‚â°CTerm‚ÜíequalInType
    (sym (‚â°QBAIREn n))
    (equalInType-FUN (‚ÜíequalTypesQNATn i w n n en)
                     eqTypesNAT
                     aw)
  where
    ef1 : equalInType i w (#FUN #NAT #NAT) f g
    ef1 = ‚â°CTerm‚ÜíequalInType #BAIRE‚â° ef

    ef2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    ef2 = equalInType-FUN‚Üí ef1

    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#QNATn n) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = ef2 w1 e1 a‚ÇÅ a‚ÇÇ (‚ààQNATn‚Üí‚ààNAT (equalInType-mon en w1 e1) ea)



sub0-contQBodyPI : (F f a : CTerm)
                  ‚Üí sub0 a (#[0]PI #[0]BAIRE
                                    (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                             (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                      (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))
                    ‚â° #PI #BAIRE
                          (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                   (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû a ‚åü))
                                            (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT)))
sub0-contQBodyPI F f a
  rewrite CTerm‚ÜíCTerm1‚ÜíTerm f
    = CTerm‚â° (‚â°PI refl (‚â°PI refl (‚â°PI e1 e2)))
  where
    e1 : EQ (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))) (shiftUp 0 ‚åú f ‚åù)))
            (VAR 1)
            (PI (SET NAT (QLT (VAR 0) (shiftDown 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù))))))) NAT)
         ‚â° EQ (shiftUp 0 ‚åú f ‚åù) (VAR 1) (PI (SET NAT (QLT (VAR 0) (shiftUp 1 (shiftUp 0 ‚åú a ‚åù)))) NAT)
    e1 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 1 a | #shiftUp 0 f
             | #subv 2 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 2 a | #shiftDown 3 a | #shiftDown 2 f | #shiftDown 1 f = refl

    e2 : EQ (APPLY (shiftDown 3 (subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (shiftDown 3 (subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù)))))
            (APPLY (shiftDown 3 (subv 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú a ‚åù)))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (VAR 2))
            NAT
         ‚â° EQ (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù))) (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (VAR 2)) NAT
    e2 rewrite #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 F | #shiftUp 0 f
             | #shiftUp 1 F | #shiftUp 1 f
             | #subv 3 ‚åú a ‚åù ‚åú F ‚åù (CTerm.closed F)
             | #subv 3 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 3 F | #shiftDown 3 f = refl



sub0-contQBodyPI-PI : (F f a g : CTerm)
                    ‚Üí sub0 g (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                       (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû a ‚åü))
                                                (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT)))
                       ‚â° #FUN (#FFDEFS #BAIRE g) (#FUN (#EQ f g (#QBAIREn a)) (#EQ (#APPLY F f) (#APPLY F g) #NAT))
sub0-contQBodyPI-PI F f a g
  rewrite CTerm‚ÜíCTerm1‚ÜíTerm f =
  CTerm‚â° (‚â°PI e0 (‚â°PI e1 e2))
  where
    e0 : FFDEFS BAIRE (shiftDown 0 (shiftUp 0 ‚åú g ‚åù))
         ‚â° FFDEFS BAIRE ‚åú g ‚åù
    e0 rewrite #shiftUp 0 g | #shiftDown 0 g = refl

    e1 : EQ (shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)))
            (shiftDown 1 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù)))
            (PI (SET NAT (QLT (VAR 0) (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú a ‚åù)))))) NAT)
         ‚â° EQ (shiftUp 0 ‚åú f ‚åù) (shiftUp 0 ‚åú g ‚åù) (PI (SET NAT (QLT (VAR 0) (shiftUp 1 (shiftUp 0 ‚åú a ‚åù)))) NAT)
    e1 rewrite #shiftUp 0 g | #shiftUp 0 g | #shiftUp 0 g | #shiftUp 0 a | #shiftUp 1 a | #shiftUp 0 f
             | #subv 1 ‚åú g ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #subv 2 ‚åú g ‚åù ‚åú a ‚åù (CTerm.closed a)
             | #shiftDown 1 f | #shiftDown 2 a | #shiftDown 1 g = refl --refl

    e2 : EQ (APPLY (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù)))))
            (APPLY (shiftDown 2 (subv 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù))) (shiftUp 1 (shiftUp 0 ‚åú F ‚åù))))
                   (shiftDown 2 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú g ‚åù)))))
            NAT
         ‚â° EQ (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (shiftUp 1 (shiftUp 0 ‚åú f ‚åù))) (APPLY (shiftUp 1 (shiftUp 0 ‚åú F ‚åù)) (shiftUp 1 (shiftUp 0 ‚åú g ‚åù))) NAT
    e2 rewrite #shiftUp 0 g | #shiftUp 0 g | #shiftUp 0 F | #shiftUp 0 f | #shiftUp 0 g
             | #shiftUp 1 F | #shiftUp 1 f | #shiftUp 1 g
             | #subv 2 ‚åú g ‚åù ‚åú F ‚åù (CTerm.closed F)
             | #subv 2 ‚åú g ‚åù ‚åú f ‚åù (CTerm.closed f)
             | #shiftDown 2 F | #shiftDown 2 f | #shiftDown 2 g = refl



equalTypes-contQBodyPI : (i : ‚Ñï) (w : ùïé¬∑) (F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ : CTerm)
                        ‚Üí equalInType i w #BAIRE‚ÜíNAT F‚ÇÅ F‚ÇÇ
                        ‚Üí equalInType i w #BAIRE f‚ÇÅ f‚ÇÇ
                        ‚Üí ‚àÄùïé w (Œª w' e ‚Üí
                             (a‚ÇÅ a‚ÇÇ : CTerm)
                             ‚Üí equalInType i w' #QNAT a‚ÇÅ a‚ÇÇ
                             ‚Üí equalTypes i w'
                                 (sub0 a‚ÇÅ (#[0]PI #[0]BAIRE
                                          (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                   (#[1]FUN (#[1]EQ ‚åû f‚ÇÅ ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                            (#[1]EQ (#[1]APPLY ‚åû F‚ÇÅ ‚åü ‚åû f‚ÇÅ ‚åü) (#[1]APPLY ‚åû F‚ÇÅ ‚åü #[1]VAR0) #[1]NAT)))))
                                 (sub0 a‚ÇÇ (#[0]PI #[0]BAIRE
                                          (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                   (#[1]FUN (#[1]EQ ‚åû f‚ÇÇ ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                            (#[1]EQ (#[1]APPLY ‚åû F‚ÇÇ ‚åü ‚åû f‚ÇÇ ‚åü) (#[1]APPLY ‚åû F‚ÇÇ ‚åü #[1]VAR0) #[1]NAT))))))
equalTypes-contQBodyPI i w F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ààF ‚ààf w1 e1 a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes (sym (sub0-contQBodyPI F‚ÇÅ f‚ÇÅ a‚ÇÅ)) (sym (sub0-contQBodyPI F‚ÇÇ f‚ÇÇ a‚ÇÇ)) ea1
  where
    ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                         ‚Üí equalTypes i w2
                               (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f‚ÇÅ g‚ÇÅ (#QBAIREn a‚ÇÅ)) (#EQ (#APPLY F‚ÇÅ f‚ÇÅ) (#APPLY F‚ÇÅ g‚ÇÅ) #NAT)))
                               (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f‚ÇÇ g‚ÇÇ (#QBAIREn a‚ÇÇ)) (#EQ (#APPLY F‚ÇÇ f‚ÇÇ) (#APPLY F‚ÇÇ g‚ÇÇ) #NAT))))
    ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
      eqTypesFUN‚Üê
        (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
        (eqTypesFUN‚Üê
          (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 a‚ÇÅ a‚ÇÇ (equalInType-mon ea w2 e2))
                      (‚ààBAIRE‚Üí‚ààQBAIREn (equalInType-refl (equalInType-mon ea w2 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                      (‚ààBAIRE‚Üí‚ààQBAIREn (equalInType-refl (equalInType-mon ea w2 e2)) eg))
          (eqTypesEQ‚Üê eqTypesNAT
                      (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                      (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

    ea1 : equalTypes i w1
            (#PI #BAIRE
                 (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                          (#[0]FUN (#[0]EQ ‚åû f‚ÇÅ ‚åü #[0]VAR (#[0]QBAIREn ‚åû a‚ÇÅ ‚åü))
                                   (#[0]EQ (#[0]APPLY ‚åû F‚ÇÅ ‚åü ‚åû f‚ÇÅ ‚åü) (#[0]APPLY ‚åû F‚ÇÅ ‚åü #[0]VAR) #[0]NAT))))
            (#PI #BAIRE
                 (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                          (#[0]FUN (#[0]EQ ‚åû f‚ÇÇ ‚åü #[0]VAR (#[0]QBAIREn ‚åû a‚ÇÇ ‚åü))
                                   (#[0]EQ (#[0]APPLY ‚åû F‚ÇÇ ‚åü ‚åû f‚ÇÇ ‚åü) (#[0]APPLY ‚åû F‚ÇÇ ‚åü #[0]VAR) #[0]NAT))))
    ea1 = eqTypesPI‚Üê (Œª w' _ ‚Üí eqTypesBAIRE)
                      (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí
                        ‚â°CTerm‚ÜíeqTypes
                          (sym (sub0-contQBodyPI-PI F‚ÇÅ f‚ÇÅ a‚ÇÅ g‚ÇÅ))
                          (sym (sub0-contQBodyPI-PI F‚ÇÇ f‚ÇÇ a‚ÇÇ g‚ÇÇ))
                          (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))




equalTypes-contQBody : (i : ‚Ñï) (w : ùïé¬∑) (F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ : CTerm)
                      ‚Üí equalInType i w #BAIRE‚ÜíNAT F‚ÇÅ F‚ÇÇ
                      ‚Üí equalInType i w #BAIRE f‚ÇÅ f‚ÇÇ
                      ‚Üí equalTypes i w (#contQBody F‚ÇÅ f‚ÇÅ) (#contQBody F‚ÇÇ f‚ÇÇ)
equalTypes-contQBody i w F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíeqTypes
    (sym (#contQBody‚â° F‚ÇÅ f‚ÇÅ))
    (sym (#contQBody‚â° F‚ÇÇ f‚ÇÇ))
    (eqTypesSUM‚Üê
      (Œª w' e' ‚Üí eqTypesQNAT)
      (equalTypes-contQBodyPI i w F‚ÇÅ F‚ÇÇ f‚ÇÅ f‚ÇÇ ‚ààF ‚ààf))



equalInType-QBAIREn-BAIRE-trans : {i : ‚Ñï} {w : ùïé¬∑} {a b c n : CTerm}
                                 ‚Üí equalInType i w #BAIRE b c
                                 ‚Üí equalInType i w (#QBAIREn n) a b
                                 ‚Üí equalInType i w #QNAT n n
                                 ‚Üí equalInType i w (#QBAIREn n) a c
equalInType-QBAIREn-BAIRE-trans {i} {w} {a} {b} {c} {n} h1 h2 h3 =
  equalInType-trans h2 h4
  where
    h4 : equalInType i w (#QBAIREn n) b c
    h4 = ‚ààBAIRE‚Üí‚ààQBAIREn h3 h1



#lift-<NUM-pair‚Üí#weakMonEq‚Çó : {w : ùïé¬∑} {a b : CTerm}
                              ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí #lift-<NUM-pair w' a b)
                              ‚Üí #weakMonEq w a a
#lift-<NUM-pair‚Üí#weakMonEq‚Çó {w} {a} {b} h w1 e1 =
  lift (fst (lower (h w1 e1)) , fst (snd (snd (lower (h w1 e1)))) , fst (snd (snd (lower (h w1 e1)))))



#lift-<NUM-pair‚Üí#weakMonEq·µ£ : {w : ùïé¬∑} {a b : CTerm}
                              ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí #lift-<NUM-pair w' a b)
                              ‚Üí #weakMonEq w b b
#lift-<NUM-pair‚Üí#weakMonEq·µ£ {w} {a} {b} h w1 e1 =
  lift (fst (snd (lower (h w1 e1))) , fst (snd (snd (snd (lower (h w1 e1))))) , fst (snd (snd (snd (lower (h w1 e1))))))


‚ÜíequalInTypeQLT : {i : ‚Ñï} {w : ùïé¬∑} {a b u v : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí #lift-<NUM-pair w' a b)
                  ‚Üí equalInType i w (#QLT a b) u v
‚ÜíequalInTypeQLT {i} {w} {a} {b} {u} {v} h =
  (EQTQLT a a b b (#compAllRefl (#QLT a b) w) (#compAllRefl (#QLT a b) w) (#lift-<NUM-pair‚Üí#weakMonEq‚Çó {w} {a} {b} h) (#lift-<NUM-pair‚Üí#weakMonEq·µ£ {w} {a} {b} h)) ,
  Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí lift (lower (h w1 e1)))


‚ÜíequalInType-QNATn : {i : ‚Ñï} {w : ùïé¬∑} {t a b : CTerm}
                     ‚Üí equalInType i w #QNAT t t
                     ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª k ‚Üí t #‚áì #NUM n at w' √ó a #‚áõ #NUM k at w' √ó b #‚áõ #NUM k at w' √ó k < n)))
                     ‚Üí equalInType i w (#QNATn t) a b
‚ÜíequalInType-QNATn {i} {w} {t} {a} {b} eqt eqi =
  ‚â°CTerm‚ÜíequalInType
    (sym (‚â°QNATn t))
    (equalInType-SET
      (Œª w' _ ‚Üí eqTypesNAT)
      (Œª w' e' a‚ÇÅ a‚ÇÇ eqa ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-QNATn-body a‚ÇÅ t)) (sym (sub0-QNATn-body a‚ÇÇ t)) (‚ÜíequalTypesQLT (‚ààNAT‚Üí‚ààQNAT eqa) (equalInType-mon eqt w' e')))
      (Œª w' e' ‚Üí ‚ÜíequalInType-NAT i w' a b (Mod.‚àÄùïé-‚ñ°Func M (Œª w'' e'' (n , k , c , c1 , c2 , ltn) ‚Üí k , c1 , c2) (Mod.‚Üë‚ñ° M eqi e')))
      (Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üí‚ñ°‚àÄùïé M eqi)))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª k ‚Üí t #‚áì #NUM n at w'' √ó a #‚áõ #NUM k at w'' √ó b #‚áõ #NUM k at w'' √ó k < n)))
                       ‚Üí Œ£ CTerm (‚ààType i w' (sub0 a (#[0]QLT #[0]VAR ‚åû t ‚åü))))
    aw w1 e1 h =
      #AX ,
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-QNATn-body a t))
        (‚ÜíequalInTypeQLT {i} {w1} {a} {t}
          (Œª w2 e2 ‚Üí lift (fst (snd (h w2 e2)) ,
                            fst (h w2 e2) ,
                            lower (fst (snd (snd (snd (h w2 e2)))) w2 (‚äë-refl¬∑ _)) ,
                            fst (snd (snd (h w2 e2))) ,
                            snd (snd (snd (snd (snd (h w2 e2))))))))


‚Üí‚àÄùïé-NATeq-NATeq : (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) ((k : ‚Ñï) ‚Üí a #‚áì #NUM k at w' ‚Üí b #‚áì #NUM k at w'))
                   ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí NATeq w' a a ‚Üí NATeq w' a b)
‚Üí‚àÄùïé-NATeq-NATeq w a b h w1 e1 (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÅ , c
  where
    c : b #‚áõ #NUM n at w1
    c w2 e2 = lift (lower (h w2 (‚äë-trans¬∑ e1 e2)) n (lower (c‚ÇÅ w2 e2)))


-- checks that n is the highest w.r.t. the name generated by 'FRESH'
isHighestFresh‚Ñï : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï)
                ‚Üí steps k (FRESH a , w1) ‚â° (b , w2)
                ‚Üí Set
isHighestFresh‚Ñï {0} {w1} {w2} {a} {b} n comp rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•
isHighestFresh‚Ñï {suc k} {w1} {w2} {a} {b} n comp with step‚äé (FRESH a) w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  isHighest‚Ñï
    {k} {startNewChoiceT Res‚ä§ w1 a} {w2}
    {shiftNameDown 0 (renn 0 (newChoiceT+ w1 a) a)} {b} n
    (newChoiceT w1 a) comp
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing z)


abstract
  ŒΩtestMup‚áì‚Ñï : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
              ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
              ‚Üí ‚ààType i w #BAIRE f
              ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w to w'))
  ŒΩtestMup‚áì‚Ñï cn kb gc i w F f ‚ààF ‚ààf = n , c
    where
      h : #‚áìsame‚Ñï w (#ŒΩtestMup F f) (#ŒΩtestMup F f)
      h = ŒΩtestM-QNAT-shift cn kb gc i w F f ‚ààF ‚ààf

      n : ‚Ñï
      n = fst h

      c : Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w to w')
      c = #‚áì‚Üífrom-to {w} {#ŒΩtestMup F f} {#NUM n} (fst (snd h))



abstract
  ŒΩtestMLup‚áì‚Ñï : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
              ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
              ‚Üí ‚ààType i w #BAIRE f
              ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w to w'))
  ŒΩtestMLup‚áì‚Ñï cn kb gc i w F f ‚ààF ‚ààf = n , c
    where
      h : #‚áìsame‚Ñï w (#ŒΩtestMLup F f) (#ŒΩtestMLup F f)
      h = ŒΩtestMLup-QNAT-shift cn kb gc i w F f ‚ààF ‚ààf

      n : ‚Ñï
      n = fst h

      c : Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w to w')
      c = #‚áì‚Üífrom-to {w} {#ŒΩtestMLup F f} {#NUM n} (fst (snd h))


-- This is capturing the fact there is a world w1 ‚äí w such that all ‚Ñïs that f gets applied to in
-- the computation of #ŒΩtestMup F f, are smaller than all #ŒΩtestMup F f for all extensions of w
-- (i.e., w1 is the world with the smallest modulus of continuity among the extensions of w)
smallestModAux : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                 (w1 : ùïé¬∑) (e1 : w ‚äë¬∑ w1)
                 ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                 ‚Üí ‚ààType i w #BAIRE f
                 ‚Üí Set(lsuc L)
smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf =
  ‚àÄùïé w P2
    where
      P2 : wPred w
      P2 w2 e2 =
        Lift {0‚Ñì} (lsuc(L))
             (isHighestFresh‚Ñï {fst (snd (snd h1))} {w1} {fst (snd h1)} {testMLup 0 ‚åú F ‚åù ‚åú f ‚åù}
                               {NUM (fst h1)} (fst h2) (snd (snd (snd h1))))
        where
          h1 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1 to w'))
          h1 = ŒΩtestMLup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

          h2 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w2 to w'))
          h2 = ŒΩtestMLup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon ‚ààF w2 e2) (equalInType-mon ‚ààf w2 e2)


smallestMod : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
              ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
              ‚Üí ‚ààType i w #BAIRE f
              ‚Üí Set(lsuc L)
smallestMod cn kb gc i w F f ‚ààF ‚ààf =
  ‚àÉùïé w P1
  where
    P1 : wPred w
    P1 w1 e1 = smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf



testM‚áì‚Üí : (cn : comp‚Üí‚àÄ‚Ñï) {w1 w2 : ùïé¬∑} {F f : Term} {n : ‚Ñï} {name : Name}
           ‚Üí # F
           ‚Üí # f
           ‚Üí compatible¬∑ name w1 Res‚ä§
           ‚Üí testM name F f ‚áì NUM n from w1 to w2
           ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
               APPLY F (upd name f) ‚áì v from (chooseT name w1 (NUM 0)) to w2
               √ó isValue v
               √ó getT 0 name w2 ‚â° just (NUM k)
               √ó n ‚â° suc k))
testM‚áì‚Üí cn {w1} {w2} {F} {f} {n} {name} cF cf compat comp =
  fst comp2 ,
  fst (snd comp2) ,
  fst (snd (snd comp2)) ,
  fst (snd (snd (snd comp2))) ,
  fst (snd (snd (snd (snd (snd comp2))))) ,
  NUMinj (snd (snd (snd (snd (snd (snd comp2))))))
  where
    w1' : ùïé¬∑
    w1' = chooseT name w1 (NUM 0)

    comp1 : probeM name F f ‚áì NUM n from w1' to w2
    comp1 = testM‚áì‚Üístep tt comp

    comp2 : Œ£ Term (Œª u ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
               appUpd name F f ‚áì u from w1' to w2
               √ó isValue u
               √ó get0 name ‚áì NUM k from w2 to w2
               √ó getT 0 name w2 ‚â° just (NUM k)
               √ó NUM n ‚â° NUM (suc k)))
    comp2 = probeM‚áì-decomp name F f (NUM n) w1' w2 comp1 tt (cn name w1 0 compat)


‚â°‚Üísteps : {k : ‚Ñï} {a b c : Term} {w1 w2 : ùïé¬∑}
           ‚Üí a ‚â° b
           ‚Üí steps k (a , w1) ‚â° (c , w2)
           ‚Üí steps k (b , w1) ‚â° (c , w2)
‚â°‚Üísteps {k} {a} {b} {c} {w1} {w2} e h rewrite e = h


testML‚áì‚Üí : (cn : comp‚Üí‚àÄ‚Ñï) {w1 w2 : ùïé¬∑} {F f : Term} {n : ‚Ñï} {name : Name}
           ‚Üí # F
           ‚Üí # f
           ‚Üí compatible¬∑ name w1 Res‚ä§
           ‚Üí testML name F f ‚áì NUM n from w1 to w2
           ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
               APPLY F (upd name f) ‚áì v from (chooseT name (startNewChoices Res‚ä§ w1 F) (NUM 0)) to w2
               √ó isValue v
               √ó getT 0 name w2 ‚â° just (NUM k)
               √ó n ‚â° suc k))
testML‚áì‚Üí cn {w1} {w2} {F} {f} {n} {name} cF cf compat (0 , ())
testML‚áì‚Üí cn {w1} {w2} {F} {f} {n} {name} cF cf compat (1 , ())
testML‚áì‚Üí cn {w1} {w2} {F} {f} {n} {name} cF cf compat (suc (suc k) , comp) =
  testM‚áì‚Üí
    cn {startNewChoices Res‚ä§ w1 F} {w2} {F} {f} {n} {name} cF cf
    (‚äë-compatible¬∑ (startNewChoices‚äë Res‚ä§ w1 F) compat)
    (k , ‚â°‚Üísteps {k} {sub AX (shiftUp 0 (testM name F f))} {testM name F f} {NUM n} {startNewChoices Res‚ä§ w1 F} {w2} c comp)
  where
    c : sub AX (shiftUp 0 (testM name F f)) ‚â° testM name F f
    c rewrite #shiftUp 0 (#testM name (ct F cF) (ct f cf))
            | subNotIn AX (testM name F f) (CTerm.closed (#testM name (ct F cF) (ct f cf)))
            | #shiftUp 0 (ct F cF)
            | #shiftUp 1 (ct F cF)
            | #shiftUp 0 (ct f cf)
            | #shiftUp 3 (ct f cf)
            | #shiftUp 4 (ct f cf)
            | #subv 1 AX F cF
            | #shiftDown 1 (ct F cF)
            | #subv 4 AX f cf
            | #shiftDown 4 (ct f cf) = refl


ŒΩtestM‚áì‚Üístep' : {F f v : Term} {w1 w2 : ùïé¬∑}
                ‚Üí # F
                ‚Üí # f
                ‚Üí isValue v
                ‚Üí ŒΩtestMup F f ‚áì v from w1 to w2
                ‚Üí testM (newChoiceT w1 (testMup 0 F f)) F f ‚áì v from startNewChoiceT Res‚ä§ w1 (testMup 0 F f) to w2
ŒΩtestM‚áì‚Üístep' {F} {f} {v} {w1} {w2} cF cf isv (0 , comp) rewrite pair-inj‚ÇÅ (sym comp) = ‚ä•-elim isv
ŒΩtestM‚áì‚Üístep' {F} {f} {v} {w1} {w2} cF cf isv (suc k , comp)
  rewrite shiftNameDown-renn-shiftNameUp (newChoiceT w1 (testMup 0 F f)) F f cF cf
  = k , comp


abstract
  ŒΩtestM‚áì‚Üí : (cn : comp‚Üí‚àÄ‚Ñï) {w1 w2 : ùïé¬∑} {F f : Term} {n : ‚Ñï}
             ‚Üí # F
             ‚Üí # f
             ‚Üí ŒΩtestMup F f ‚áì NUM n from w1 to w2
             ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
                 APPLY F (upd (newChoiceT w1 (testMup 0 F f)) f) ‚áì v from (chooseT (newChoiceT w1 (testMup 0 F f)) (startNewChoiceT Res‚ä§ w1 (testMup 0 F f)) (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 (newChoiceT w1 (testMup 0 F f)) w2 ‚â° just (NUM k)
                 √ó n ‚â° suc k
                 √ó compatible¬∑ (newChoiceT w1 (testMup 0 F f)) (startNewChoiceT Res‚ä§ w1 (testMup 0 F f)) Res‚ä§))
  ŒΩtestM‚áì‚Üí cn {w1} {w2} {F} {f} {n} cF cf comp =
    --newChoiceT w1 (testMup 0 F f) ,
    fst comp3 ,
    fst (snd comp3) ,
    fst (snd (snd comp3)) ,
    fst (snd (snd (snd comp3))) ,
    fst (snd (snd (snd (snd (snd comp3))))) ,
    NUMinj (snd (snd (snd (snd (snd (snd comp3)))))) ,
    compat1
    where
      name : Name
      name = newChoiceT w1 (testMup 0 F f)

      w1' : ùïé¬∑
      w1' = startNewChoiceT Res‚ä§ w1 (testMup 0 F f)

      comp1 : testM name F f ‚áì NUM n from w1' to w2
      comp1 = ŒΩtestM‚áì‚Üístep' cF cf tt comp

      w1'' : ùïé¬∑
      w1'' = chooseT name w1' (NUM 0)

      comp2 : probeM name F f ‚áì NUM n from w1'' to w2
      comp2 = testM‚áì‚Üístep tt comp1

      compat1 : compatible¬∑ name w1' Res‚ä§
      compat1 = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨newChoiceT‚ààdomùïé w1 (testMup 0 F f))

      comp3 : Œ£ Term (Œª u ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
               appUpd name F f ‚áì u from w1'' to w2
               √ó isValue u
               √ó get0 name ‚áì NUM k from w2 to w2
               √ó getT 0 name w2 ‚â° just (NUM k)
               √ó NUM n ‚â° NUM (suc k)))
      comp3 = probeM‚áì-decomp name F f (NUM n) w1'' w2 comp2 tt (cn name w1' 0 compat1)



isHighest‚Ñï‚ÜígetT‚â§‚Ñï-last : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï) (name : Name) (comp : steps k (a , w1) ‚â° (b , w2))
                            ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp
                            ‚Üí getT‚â§‚Ñï w2 n name
isHighest‚Ñï‚ÜígetT‚â§‚Ñï-last {0} {w1} {w2} {a} {b} n name comp h
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = h --h
isHighest‚Ñï‚ÜígetT‚â§‚Ñï-last {suc k} {w1} {w2} {a} {b} n name comp h with step‚äé a w1
... | inj‚ÇÅ (a' , w' , z) rewrite z = isHighest‚Ñï‚ÜígetT‚â§‚Ñï-last {k} {w'} {w2} {a'} {b} n name comp (snd h)
... | inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = h



isHighest‚Ñï‚Üí‚â§ : (cn : comp‚Üí‚àÄ‚Ñï) (F f : Term) (cF : # F) (cf : # f) (name : Name)
                 (n1 : ‚Ñï) (w1 w1' : ùïé¬∑) (k1 : ‚Ñï)
                 (comp1 : steps k1 (testM name F f , w1) ‚â° (NUM n1 , w1'))
                 (n2 : ‚Ñï)
                 ‚Üí compatible¬∑ name w1 Res‚ä§
                 ‚Üí isHighest‚Ñï {k1} {w1} {w1'} {testM name F f} {NUM n1} n2 name comp1
                 ‚Üí n1 ‚â§ n2
isHighest‚Ñï‚Üí‚â§ cn F f cF cf name n1 w1 w1' k1 comp1 n2 compat ish =
  ‚â§-trans (‚â§-reflexive (trans eqk (‚Üís‚â°s (NUMinj (just-inj (trans (sym gt0) gtm)))))) ltm
  where
    h : Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
          APPLY F (upd name f) ‚áì v from (chooseT name w1 (NUM 0)) to w1'
          √ó isValue v
          √ó getT 0 name w1' ‚â° just (NUM k)
          √ó n1 ‚â° suc k))
    h = testM‚áì‚Üí cn {w1} {w1'} {F} {f} {n1} {name} cF cf compat (k1 , comp1)

    k : ‚Ñï
    k = fst (snd h)

    gt0 : getT 0 name w1' ‚â° just (NUM k)
    gt0 = fst (snd (snd (snd (snd h))))

    eqk : n1 ‚â° suc k
    eqk = snd (snd (snd (snd (snd h))))

    gtl : getT‚â§‚Ñï w1' n2 name
    gtl = isHighest‚Ñï‚ÜígetT‚â§‚Ñï-last {k1} {w1} {w1'} {testM name F f} {NUM n1} n2 name comp1 ish

    m : ‚Ñï
    m = fst gtl

    gtm : getT 0 name w1' ‚â° just (NUM m)
    gtm = fst (snd gtl)

    ltm : m < n2
    ltm = snd (snd gtl)



isHighest‚Ñï‚Üí‚â§-LOAD : (cn : comp‚Üí‚àÄ‚Ñï) (F f : Term) (cF : # F) (cf : # f) (name : Name)
                 (n1 : ‚Ñï) (w1 w1' : ùïé¬∑) (k1 : ‚Ñï)
                 (comp1 : steps k1 (testML name F f , w1) ‚â° (NUM n1 , w1'))
                 (n2 : ‚Ñï)
                 ‚Üí compatible¬∑ name w1 Res‚ä§
                 ‚Üí isHighest‚Ñï {k1} {w1} {w1'} {testML name F f} {NUM n1} n2 name comp1
                 ‚Üí n1 ‚â§ n2
isHighest‚Ñï‚Üí‚â§-LOAD cn F f cF cf name n1 w1 w1' k1 comp1 n2 compat ish =
  ‚â§-trans (‚â§-reflexive (trans eqk (‚Üís‚â°s (NUMinj (just-inj (trans (sym gt0) gtm)))))) ltm
  where
    h : Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª k ‚Üí
          APPLY F (upd name f) ‚áì v from (chooseT name (startNewChoices Res‚ä§ w1 F) (NUM 0)) to w1'
          √ó isValue v
          √ó getT 0 name w1' ‚â° just (NUM k)
          √ó n1 ‚â° suc k))
    h = testML‚áì‚Üí cn {w1} {w1'} {F} {f} {n1} {name} cF cf compat (k1 , comp1)

    k : ‚Ñï
    k = fst (snd h)

    gt0 : getT 0 name w1' ‚â° just (NUM k)
    gt0 = fst (snd (snd (snd (snd h))))

    eqk : n1 ‚â° suc k
    eqk = snd (snd (snd (snd (snd h))))

    gtl : getT‚â§‚Ñï w1' n2 name
    gtl = isHighest‚Ñï‚ÜígetT‚â§‚Ñï-last {k1} {w1} {w1'} {testML name F f} {NUM n1} n2 name comp1 ish

    m : ‚Ñï
    m = fst gtl

    gtm : getT 0 name w1' ‚â° just (NUM m)
    gtm = fst (snd gtl)

    ltm : m < n2
    ltm = snd (snd gtl)



isHighestFresh‚Ñï‚Üí‚â§ : (cn : comp‚Üí‚àÄ‚Ñï) (F f : Term) (cF : # F) (cf : # f)
                      {n1 : ‚Ñï} {w1 w1' : ùïé¬∑} {k1 : ‚Ñï} (comp1 : steps k1 (ŒΩtestMup F f , w1) ‚â° (NUM n1 , w1'))
                      (n2 : ‚Ñï)
--                      (w2 w2' : ùïé¬∑) (k2 : ‚Ñï) (comp2 : steps k2 (ŒΩtestMup F f , w2) ‚â° (NUM n2 , w2'))
                      ‚Üí isHighestFresh‚Ñï {k1} {w1} {w1'} {testMup 0 F f} {NUM n1} n2 comp1
                      ‚Üí n1 ‚â§ n2
isHighestFresh‚Ñï‚Üí‚â§ cn F f cF cf {n1} {w1} {w1'} {suc k1} comp1 n2 ish
  rewrite shiftNameDown-renn-shiftNameUp (newChoiceT w1 (testMup 0 F f)) F f cF cf =
  isHighest‚Ñï‚Üí‚â§ cn F f cF cf name n1 w0 w1' k1 comp1 n2 compat ish
  where
    name : Name
    name = newChoiceT w1 (testMup 0 F f)

    w0 : ùïé¬∑
    w0 = startNewChoiceT Res‚ä§ w1 (testMup 0 F f)

    compat : compatible¬∑ name w0 Res‚ä§
    compat = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨newChoiceT‚ààdomùïé w1 (testMup 0 F f))


isHighestFresh‚Ñï‚Üí‚â§-LOAD : (cn : comp‚Üí‚àÄ‚Ñï) (F f : Term) (cF : # F) (cf : # f)
                      {n1 : ‚Ñï} {w1 w1' : ùïé¬∑} {k1 : ‚Ñï} (comp1 : steps k1 (ŒΩtestMLup F f , w1) ‚â° (NUM n1 , w1'))
                      (n2 : ‚Ñï)
--                      (w2 w2' : ùïé¬∑) (k2 : ‚Ñï) (comp2 : steps k2 (ŒΩtestMup F f , w2) ‚â° (NUM n2 , w2'))
                      ‚Üí isHighestFresh‚Ñï {k1} {w1} {w1'} {testMLup 0 F f} {NUM n1} n2 comp1
                      ‚Üí n1 ‚â§ n2
isHighestFresh‚Ñï‚Üí‚â§-LOAD cn F f cF cf {n1} {w1} {w1'} {suc k1} comp1 n2 ish
  rewrite shiftNameDown-renn-shiftNameUp-LOAD (newChoiceT w1 (testMLup 0 F f)) F f cF cf =
  isHighest‚Ñï‚Üí‚â§-LOAD cn F f cF cf name n1 w0 w1' k1 comp1 n2 compat ish
  where
    name : Name
    name = newChoiceT w1 (testMLup 0 F f)

    w0 : ùïé¬∑
    w0 = startNewChoiceT Res‚ä§ w1 (testMLup 0 F f)

    compat : compatible¬∑ name w0 Res‚ä§
    compat = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨newChoiceT‚ààdomùïé w1 (testMLup 0 F f))


abstract
  smallestModAux‚ÜíNATeq : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm} {w1 : ùïé¬∑} {e1 : w ‚äë¬∑ w1}
      (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
      (‚ààf : ‚ààType i w #BAIRE f)
      ‚Üí smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf
      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï)
                         ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMLup F f #‚áì #NUM n at w'' √ó k < n)))
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1 to w2
                   √ó ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n
                                    ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))))
  smallestModAux‚ÜíNATeq cn kb gc {i} {w} {F} {f} {g} {w1} {e1} ‚ààF ‚ààf sma h =
    fst h1 , fst (snd h1) , snd (snd h1) , concl
    where
      h1 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1 to w'))
      h1 = ŒΩtestMLup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

      concl : ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < fst h1 ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      concl w1' e1' k ltk = h w1' (‚äë-trans¬∑ e1 e1') k q
        where
          q : ‚àÄùïé w1' (Œª w'' _ ‚Üí Lift (lsuc L) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMLup F f #‚áì #NUM n at w'' √ó k < n)))
          q w1'' e1'' = lift (fst h2 , ‚áì-from-to‚Üí‚áì (snd (snd h2)) , <-transÀ° ltk (isHighestFresh‚Ñï‚Üí‚â§-LOAD cn ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) {_} {w1} {fst (snd h1)} {fst (snd (snd h1))} (snd (snd (snd h1))) (fst h2) hst))
            where
              h2 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1'' to w'))
              h2 = ŒΩtestMLup‚áì‚Ñï cn kb gc i w1'' F f (equalInType-mon ‚ààF w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1''))) (equalInType-mon ‚ààf w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))

              hst : isHighestFresh‚Ñï {fst (snd (snd h1))} {w1} {fst (snd h1)} {testMLup 0 ‚åú F ‚åù ‚åú f ‚åù}
                                     {NUM (fst h1)} (fst h2) (snd (snd (snd h1)))
              hst = lower (sma w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))



abstract
  smallestModAux‚Üí‚áõ!same‚Ñï : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm} {w1 : ùïé¬∑} {e1 : w ‚äë¬∑ w1}
      (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
      (‚ààf : ‚ààType i w #BAIRE f)
      ‚Üí smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf
      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï)
                         ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMLup F f #‚áì #NUM n at w'' √ó k < n)))
                         ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1 to w2
                   √ó ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n
                                    ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))))
  smallestModAux‚Üí‚áõ!same‚Ñï cn kb gc {i} {w} {F} {f} {g} {w1} {e1} ‚ààF ‚ààf sma h =
    fst h1 , fst (snd h1) , snd (snd h1) , concl
    where
      h1 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1 to w'))
      h1 = ŒΩtestMLup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

      concl : ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < fst h1 ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      concl w1' e1' k ltk = h w1' (‚äë-trans¬∑ e1 e1') k q
        where
          q : ‚àÄùïé w1' (Œª w'' _ ‚Üí Lift (lsuc L) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMLup F f #‚áì #NUM n at w'' √ó k < n)))
          q w1'' e1'' = lift (fst h2 , ‚áì-from-to‚Üí‚áì (snd (snd h2)) , <-transÀ° ltk (isHighestFresh‚Ñï‚Üí‚â§-LOAD cn ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) {_} {w1} {fst (snd h1)} {fst (snd (snd h1))} (snd (snd (snd h1))) (fst h2) hst))
            where
              h2 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMLup F f #‚áì #NUM n from w1'' to w'))
              h2 = ŒΩtestMLup‚áì‚Ñï cn kb gc i w1'' F f (equalInType-mon ‚ààF w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1''))) (equalInType-mon ‚ààf w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))

              hst : isHighestFresh‚Ñï {fst (snd (snd h1))} {w1} {fst (snd h1)} {testMLup 0 ‚åú F ‚åù ‚åú f ‚åù}
                                     {NUM (fst h1)} (fst h2) (snd (snd (snd h1)))
              hst = lower (sma w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))



‚Üí‚â°sucIf‚â§ : {v : Var} {a b : Var}
            ‚Üí a ‚â° b
            ‚Üí sucIf‚â§ v a ‚â° sucIf‚â§ v b
‚Üí‚â°sucIf‚â§ {v} {a} {b} e rewrite e = refl


NAMEinj : {n m : Name} ‚Üí NAME n ‚â° NAME m ‚Üí n ‚â° m
NAMEinj refl =  refl


shiftNameUp-inj : {n : Name} {a b : Term} ‚Üí shiftNameUp n a ‚â° shiftNameUp n b ‚Üí a ‚â° b
shiftNameUp-inj {n} {VAR x} {VAR x} refl = refl
shiftNameUp-inj {n} {NAT} {NAT} e = refl
shiftNameUp-inj {n} {QNAT} {QNAT} e = refl
shiftNameUp-inj {n} {TNAT} {TNAT} e = refl
shiftNameUp-inj {n} {LT a a‚ÇÅ} {LT b b‚ÇÅ} e rewrite shiftNameUp-inj (LTinj1 e) | shiftNameUp-inj (LTinj2 e) = refl
shiftNameUp-inj {n} {QLT a a‚ÇÅ} {QLT b b‚ÇÅ} e rewrite shiftNameUp-inj (QLTinj1 e) | shiftNameUp-inj (QLTinj2 e) = refl
shiftNameUp-inj {n} {NUM x} {NUM .x} refl = refl
shiftNameUp-inj {n} {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} {IFLT b b‚ÇÅ b‚ÇÇ b‚ÇÉ} e rewrite shiftNameUp-inj (IFLTinj1 e) | shiftNameUp-inj (IFLTinj2 e) | shiftNameUp-inj (IFLTinj3 e) | shiftNameUp-inj (IFLTinj4 e) = refl
shiftNameUp-inj {n} {SUC a} {SUC b} e rewrite shiftNameUp-inj (SUCinj e) = refl
shiftNameUp-inj {n} {PI a a‚ÇÅ} {PI b b‚ÇÅ} e rewrite shiftNameUp-inj (PIinj1 e) | shiftNameUp-inj (PIinj2 e) = refl
shiftNameUp-inj {n} {LAMBDA a} {LAMBDA b} e rewrite shiftNameUp-inj (LAMinj e) = refl
shiftNameUp-inj {n} {APPLY a a‚ÇÅ} {APPLY b b‚ÇÅ} e rewrite shiftNameUp-inj (APPLYinj1 e) | shiftNameUp-inj (APPLYinj2 e) = refl
shiftNameUp-inj {n} {FIX a} {FIX b} e rewrite shiftNameUp-inj (FIXinj e) = refl
shiftNameUp-inj {n} {LET a a‚ÇÅ} {LET b b‚ÇÅ} e rewrite shiftNameUp-inj (LETinj1 e) | shiftNameUp-inj (LETinj2 e) = refl
shiftNameUp-inj {n} {SUM a a‚ÇÅ} {SUM b b‚ÇÅ} e rewrite shiftNameUp-inj (SUMinj1 e) | shiftNameUp-inj (SUMinj2 e) = refl
shiftNameUp-inj {n} {PAIR a a‚ÇÅ} {PAIR b b‚ÇÅ} e rewrite shiftNameUp-inj (PAIRinj1 e) | shiftNameUp-inj (PAIRinj2 e) = refl
shiftNameUp-inj {n} {SPREAD a a‚ÇÅ} {SPREAD b b‚ÇÅ} e rewrite shiftNameUp-inj (SPREADinj1 e) | shiftNameUp-inj (SPREADinj2 e) = refl
shiftNameUp-inj {n} {SET a a‚ÇÅ} {SET b b‚ÇÅ} e rewrite shiftNameUp-inj (SETinj1 e) | shiftNameUp-inj (SETinj2 e) = refl
shiftNameUp-inj {n} {ISECT a a‚ÇÅ} {ISECT b b‚ÇÅ} e rewrite shiftNameUp-inj (ISECTinj1 e) | shiftNameUp-inj (ISECTinj2 e) = refl
shiftNameUp-inj {n} {TUNION a a‚ÇÅ} {TUNION b b‚ÇÅ} e rewrite shiftNameUp-inj (TUNIONinj1 e) | shiftNameUp-inj (TUNIONinj2 e) = refl
shiftNameUp-inj {n} {UNION a a‚ÇÅ} {UNION b b‚ÇÅ} e rewrite shiftNameUp-inj (UNIONinj1 e) | shiftNameUp-inj (UNIONinj2 e) = refl
shiftNameUp-inj {n} {QTUNION a a‚ÇÅ} {QTUNION b b‚ÇÅ} e rewrite shiftNameUp-inj (QTUNIONinj1 e) | shiftNameUp-inj (QTUNIONinj2 e) = refl
shiftNameUp-inj {n} {INL a} {INL b} e rewrite shiftNameUp-inj (INLinj e) = refl
shiftNameUp-inj {n} {INR a} {INR b} e rewrite shiftNameUp-inj (INRinj e) = refl
shiftNameUp-inj {n} {DECIDE a a‚ÇÅ a‚ÇÇ} {DECIDE b b‚ÇÅ b‚ÇÇ} e rewrite shiftNameUp-inj (DECIDEinj1 e) | shiftNameUp-inj (DECIDEinj2 e) | shiftNameUp-inj (DECIDEinj3 e) = refl
shiftNameUp-inj {n} {EQ a a‚ÇÅ a‚ÇÇ} {EQ b b‚ÇÅ b‚ÇÇ} e rewrite shiftNameUp-inj (EQinj1 e) | shiftNameUp-inj (EQinj2 e) | shiftNameUp-inj (EQinj3 e) = refl
shiftNameUp-inj {n} {AX} {AX} e = refl
shiftNameUp-inj {n} {FREE} {FREE} e = refl
shiftNameUp-inj {n} {CS x} {CS x‚ÇÅ} e = ‚â°CS (sucIf‚â§-inj {n} {x} {x‚ÇÅ} (CSinj e))
shiftNameUp-inj {n} {NAME x} {NAME x‚ÇÅ} e = ‚â°NAME (sucIf‚â§-inj {n} {x} {x‚ÇÅ} (NAMEinj e))
shiftNameUp-inj {n} {FRESH a} {FRESH b} e rewrite shiftNameUp-inj (FRESHinj e) = refl
shiftNameUp-inj {n} {LOAD a} {LOAD b} e = e --rewrite shiftNameUp-inj (LOADinj e) = refl
shiftNameUp-inj {n} {CHOOSE a a‚ÇÅ} {CHOOSE b b‚ÇÅ} e rewrite shiftNameUp-inj (CHOOSEinj1 e) | shiftNameUp-inj (CHOOSEinj2 e) = refl
--shiftNameUp-inj {n} {IFC0 a a‚ÇÅ a‚ÇÇ} {IFC0 b b‚ÇÅ b‚ÇÇ} e rewrite shiftNameUp-inj (IFC0inj1 e) | shiftNameUp-inj (IFC0inj2 e) | shiftNameUp-inj (IFC0inj3 e) = refl
shiftNameUp-inj {n} {TSQUASH a} {TSQUASH b} e rewrite shiftNameUp-inj (TSQUASHinj e) = refl
shiftNameUp-inj {n} {TTRUNC a} {TTRUNC b} e rewrite shiftNameUp-inj (TTRUNCinj e) = refl
shiftNameUp-inj {n} {TCONST a} {TCONST b} e rewrite shiftNameUp-inj (TCONSTinj e) = refl
shiftNameUp-inj {n} {SUBSING a} {SUBSING b} e rewrite shiftNameUp-inj (SUBSINGinj e) = refl
shiftNameUp-inj {n} {DUM a} {DUM b} e rewrite shiftNameUp-inj (DUMinj e) = refl
shiftNameUp-inj {n} {FFDEFS a a‚ÇÅ} {FFDEFS b b‚ÇÅ} e rewrite shiftNameUp-inj (FFDEFSinj1 e) | shiftNameUp-inj (FFDEFSinj2 e) = refl
shiftNameUp-inj {n} {PURE} {PURE} refl = refl
shiftNameUp-inj {n} {UNIV x} {UNIV .x} refl = refl
shiftNameUp-inj {n} {LIFT a} {LIFT b} e rewrite shiftNameUp-inj (LIFTinj e) = refl
shiftNameUp-inj {n} {LOWER a} {LOWER b} e rewrite shiftNameUp-inj (LOWERinj e) = refl
shiftNameUp-inj {n} {SHRINK a} {SHRINK b} e rewrite shiftNameUp-inj (SHRINKinj e) = refl


shiftUp-ShiftNameUp‚â°ShiftNameUp‚Üí : (v : Name) (f a : Term)
                                    ‚Üí shiftUp 0 (shiftNameUp v f) ‚â° shiftNameUp v a
                                    ‚Üí a ‚â° shiftUp 0 f
shiftUp-ShiftNameUp‚â°ShiftNameUp‚Üí v f a e
  rewrite shiftUp-shiftNameUp 0 v f = sym (shiftNameUp-inj e)


updBody‚â°shiftNameUp‚Üí : (v : Var) (name : Name) (f : Term) (a : Term)
                        ‚Üí updBody (sucIf‚â§ v name) (shiftNameUp v f) ‚â° shiftNameUp v a
                        ‚Üí a ‚â° updBody name f
updBody‚â°shiftNameUp‚Üí v name f (LET (VAR 0) (LET (IFLT (APPLY (CS x‚ÇÅ) (NUM 0)) (VAR 0) (CHOOSE (NAME x‚ÇÇ) (VAR 0)) AX) (APPLY a (VAR 1)))) e
  rewrite sym (sucIf‚â§-inj {v} {name} {x‚ÇÅ} (CSinj (APPLYinj1 (IFLTinj1 (LETinj1 (LETinj2 e))))))
        | sym (sucIf‚â§-inj {v} {name} {x‚ÇÇ} (NAMEinj (CHOOSEinj1 (IFLTinj3 (LETinj1 (LETinj2 e))))))
        | shiftUp-ShiftNameUp‚â°ShiftNameUp‚Üí v f a (APPLYinj1 (LETinj2 (LETinj2 e))) = refl



{--
predIf‚â§-inj : {n : ‚Ñï} {x y : Var} ‚Üí predIf‚â§ n x ‚â° predIf‚â§ n y ‚Üí x ‚â° y
predIf‚â§-inj {n} {0} {0} e = refl
predIf‚â§-inj {n} {0} {suc y} e with suc y ‚â§? n
... | yes q = e
... | no q  = {!!}
predIf‚â§-inj {n} {suc x} {0} e with suc x ‚â§? n
... | yes p = e
... | no p  = {!!}
predIf‚â§-inj {n} {suc x} {suc y} e with suc x ‚â§? n | suc y ‚â§? n
... | yes p | yes q = e
... | yes p | no q rewrite e = ‚ä•-elim {!!}
... | no p  | yes q rewrite e = {!!}
... | no p  | no q  rewrite e = refl
--}



fvars-shiftNameDown : (n : ‚Ñï) (a : Term) ‚Üí fvars (shiftNameDown n a) ‚â° fvars a
fvars-shiftNameDown n (VAR x) = refl
fvars-shiftNameDown n NAT = refl
fvars-shiftNameDown n QNAT = refl
fvars-shiftNameDown n TNAT = refl
fvars-shiftNameDown n (LT a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (QLT a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (NUM x) = refl
fvars-shiftNameDown n (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ | fvars-shiftNameDown n a‚ÇÉ = refl
fvars-shiftNameDown n (SUC a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (PI a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (LAMBDA a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (APPLY a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (FIX a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (LET a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (SUM a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (PAIR a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (SPREAD a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (SET a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (ISECT a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (TUNION a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (UNION a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (QTUNION a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (INL a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (INR a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (DECIDE a a‚ÇÅ a‚ÇÇ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ = refl
fvars-shiftNameDown n (EQ a a‚ÇÅ a‚ÇÇ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ = refl
fvars-shiftNameDown n AX = refl
fvars-shiftNameDown n FREE = refl
fvars-shiftNameDown n (CS x) = refl
fvars-shiftNameDown n (NAME x) = refl
fvars-shiftNameDown n (FRESH a) rewrite fvars-shiftNameDown (suc n) a = refl
fvars-shiftNameDown n (LOAD a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (CHOOSE a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
--fvars-shiftNameDown n (IFC0 a a‚ÇÅ a‚ÇÇ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ = refl
fvars-shiftNameDown n (TSQUASH a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (TTRUNC a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (TCONST a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (SUBSING a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (DUM a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (FFDEFS a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n PURE = refl
fvars-shiftNameDown n (UNIV x) = refl
fvars-shiftNameDown n (LIFT a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (LOWER a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (SHRINK a) rewrite fvars-shiftNameDown n a = refl


‚Üí#shiftNameDown : (n : ‚Ñï) {a : Term} ‚Üí # a ‚Üí # shiftNameDown n a
‚Üí#shiftNameDown n {a} ca rewrite fvars-shiftNameDown n a = ca


‚â§‚Üí¬¨<‚Üí‚â° : {i n : ‚Ñï} ‚Üí n ‚â§ i ‚Üí ¬¨ n < i ‚Üí i ‚â° n
‚â§‚Üí¬¨<‚Üí‚â° {i} {n} lei nlei = sym (<s‚Üí¬¨<‚Üí‚â° {n} {i} (_‚â§_.s‚â§s lei) nlei)


sucIf‚â§-predIf‚â§ : (n : ‚Ñï) (x : Name) ‚Üí ¬¨ x ‚â° n ‚Üí (x ‚â° 0 ‚Üí 0 < n) ‚Üí sucIf‚â§ n (predIf‚â§ n x) ‚â° x
sucIf‚â§-predIf‚â§ n 0 d len with 0 <? n
... | yes p = refl
... | no p = ‚ä•-elim (p (len refl))
sucIf‚â§-predIf‚â§ n (suc x) d len with suc x ‚â§? n
... | yes p with suc x <? n
... |    yes q = refl
... |    no q = ‚ä•-elim (d (sym (‚â§‚Üí¬¨<‚Üí‚â° {n} {suc x} p q) ))
sucIf‚â§-predIf‚â§ n (suc x) d len | no p with x <? n
... |    yes q = ‚ä•-elim (p q)
... |    no q = refl



shiftNameUpDown : (n : ‚Ñï) (t : Term)
                  ‚Üí ((x : Name) ‚Üí x ‚àà names t ‚Üí ¬¨ x ‚â° n)
                  ‚Üí (0 ‚àà names t ‚Üí 0 < n)
                  ‚Üí shiftNameUp n (shiftNameDown n t) ‚â° t
shiftNameUpDown n (VAR x) imp1 imp2 = refl
shiftNameUpDown n NAT imp1 imp2 = refl
shiftNameUpDown n QNAT imp1 imp2 = refl
shiftNameUpDown n TNAT imp1 imp2 = refl
shiftNameUpDown n (LT t t‚ÇÅ) imp1 imp2 = ‚â°LT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (QLT t t‚ÇÅ) imp1 imp2 = ‚â°QLT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (NUM x) imp1 imp2 = refl
shiftNameUpDown n (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) imp1 imp2 = ‚â°IFLT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° z)))) (shiftNameUpDown n t‚ÇÇ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫À° i)))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫À° z))))) (shiftNameUpDown n t‚ÇÉ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫ ≥ (names t‚ÇÇ) i)))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫ ≥ (names t‚ÇÇ) z)))))
shiftNameUpDown n (SUC t) imp1 imp2 = ‚â°SUC (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (PI t t‚ÇÅ) imp1 imp2 = ‚â°PI (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (LAMBDA t) imp1 imp2 = ‚â°LAMBDA (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (APPLY t t‚ÇÅ) imp1 imp2 = ‚â°APPLY (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (FIX t) imp1 imp2 = ‚â°FIX (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (LET t t‚ÇÅ) imp1 imp2 = ‚â°LET (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (SUM t t‚ÇÅ) imp1 imp2 = ‚â°SUM (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (PAIR t t‚ÇÅ) imp1 imp2 = ‚â°PAIR (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (SPREAD t t‚ÇÅ) imp1 imp2 = ‚â°SPREAD (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (SET t t‚ÇÅ) imp1 imp2 = ‚â°SET (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (TUNION t t‚ÇÅ) imp1 imp2 = ‚â°TUNION (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (ISECT t t‚ÇÅ) imp1 imp2 = ‚â°ISECT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (UNION t t‚ÇÅ) imp1 imp2 = ‚â°UNION (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (QTUNION t t‚ÇÅ) imp1 imp2 = ‚â°QTUNION (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (INL t) imp1 imp2 = ‚â°INL (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (INR t) imp1 imp2 = ‚â°INR (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (DECIDE t t‚ÇÅ t‚ÇÇ) imp1 imp2 = ‚â°DECIDE (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° z)))) (shiftNameUpDown n t‚ÇÇ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) z))))
shiftNameUpDown n (EQ t t‚ÇÅ t‚ÇÇ) imp1 imp2 = ‚â°EQ (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° z)))) (shiftNameUpDown n t‚ÇÇ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) z))))
shiftNameUpDown n AX imp1 imp2 = refl
shiftNameUpDown n FREE imp1 imp2 = refl
shiftNameUpDown n (CS x) imp1 imp2 = ‚â°CS (sucIf‚â§-predIf‚â§ n x (imp1 x (here refl)) (Œª z ‚Üí imp2 (here (sym z))))
shiftNameUpDown n (NAME x) imp1 imp2 = ‚â°NAME (sucIf‚â§-predIf‚â§ n x (imp1 x (here refl)) (Œª z ‚Üí imp2 (here (sym z))))
shiftNameUpDown n (FRESH t) imp1 imp2 = ‚â°FRESH (shiftNameUpDown (suc n) t imp1' Œª z ‚Üí _‚â§_.s‚â§s _‚â§_.z‚â§n)
  where
    imp1' : (x : Name) ‚Üí x ‚àà names t ‚Üí ¬¨ x ‚â° suc n
    imp1' x i z rewrite z = imp1 n (suc‚Üí‚ààlowerNames {n} {names t} i) refl
shiftNameUpDown n (LOAD t) imp1 imp2 = refl --‚â°LOAD (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (CHOOSE t t‚ÇÅ) imp1 imp2 = ‚â°CHOOSE (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (TSQUASH t) imp1 imp2 = ‚â°TSQUASH (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (TTRUNC t) imp1 imp2 = ‚â°TTRUNC (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (TCONST t) imp1 imp2 = ‚â°TCONST (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (SUBSING t) imp1 imp2 = ‚â°SUBSING (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (DUM t) imp1 imp2 = ‚â°DUM (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (FFDEFS t t‚ÇÅ) imp1 imp2 = ‚â°FFDEFS (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n PURE imp1 imp2 = refl
shiftNameUpDown n (UNIV x) imp1 imp2 = refl
shiftNameUpDown n (LIFT t) imp1 imp2 = ‚â°LIFT (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (LOWER t) imp1 imp2 = ‚â°LOWER (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (SHRINK t) imp1 imp2 = ‚â°SHRINK (shiftNameUpDown n t imp1 imp2)



‚Üí¬¨s‚àànames-shiftNameUp : (n : Name) (t : Term)
                         ‚Üí ¬¨ n ‚àà names t
                         ‚Üí ¬¨ suc n ‚àà names (shiftNameUp 0 t)
‚Üí¬¨s‚àànames-shiftNameUp n t ni z rewrite names-shiftNameUp‚â° 0 t with ‚àà-map‚Åª (sucIf‚â§ 0) z
... | (y , j , e) rewrite suc-injective e = ni j




¬¨‚àà++2‚Üí¬¨‚àà1 : {L : Level} {A : Set(L)} {a b : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b)
             ‚Üí ¬¨ x ‚àà a
¬¨‚àà++2‚Üí¬¨‚àà1 {L} {A} {a} {b} {x} ni i = ni (‚àà-++‚Å∫À° i)



¬¨‚àà++2‚Üí¬¨‚àà2 : {L : Level} {A : Set(L)} {a b : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b)
             ‚Üí ¬¨ x ‚àà b
¬¨‚àà++2‚Üí¬¨‚àà2 {L} {A} {a} {b} {x} ni i = ni (‚àà-++‚Å∫ ≥ a i)


¬¨‚àà++3‚Üí¬¨‚àà1 : {L : Level} {A : Set(L)} {a b c : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c)
             ‚Üí ¬¨ x ‚àà a
¬¨‚àà++3‚Üí¬¨‚àà1 {L} {A} {a} {b} {c} {x} ni i = ni (‚àà-++‚Å∫À° i)


¬¨‚àà++3‚Üí¬¨‚àà2 : {L : Level} {A : Set(L)} {a b c : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c)
             ‚Üí ¬¨ x ‚àà b
¬¨‚àà++3‚Üí¬¨‚àà2 {L} {A} {a} {b} {c} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫À° i))


¬¨‚àà++3‚Üí¬¨‚àà3 : {L : Level} {A : Set(L)} {a b c : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c)
             ‚Üí ¬¨ x ‚àà c
¬¨‚àà++3‚Üí¬¨‚àà3 {L} {A} {a} {b} {c} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b i))



¬¨‚àà++4‚Üí¬¨‚àà1 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà a
¬¨‚àà++4‚Üí¬¨‚àà1 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫À° i)


¬¨‚àà++4‚Üí¬¨‚àà2 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà b
¬¨‚àà++4‚Üí¬¨‚àà2 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫À° i))


¬¨‚àà++4‚Üí¬¨‚àà3 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà c
¬¨‚àà++4‚Üí¬¨‚àà3 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b (‚àà-++‚Å∫À° i)))


¬¨‚àà++4‚Üí¬¨‚àà4 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà d
¬¨‚àà++4‚Üí¬¨‚àà4 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b (‚àà-++‚Å∫ ≥ c i)))




renn¬¨‚àà : (n m : Name) (t : Term)
         ‚Üí ¬¨ n ‚àà names t
         ‚Üí renn n m t ‚â° t
renn¬¨‚àà n m (VAR x) ni = refl
renn¬¨‚àà n m NAT ni = refl
renn¬¨‚àà n m QNAT ni = refl
renn¬¨‚àà n m TNAT ni = refl
renn¬¨‚àà n m (LT t t‚ÇÅ) ni = ‚â°LT (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (QLT t t‚ÇÅ) ni = ‚â°QLT (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (NUM x) ni = refl
renn¬¨‚àà n m (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) ni = ‚â°IFLT (renn¬¨‚àà n m t (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni)) (renn¬¨‚àà n m t‚ÇÇ (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni)) (renn¬¨‚àà n m t‚ÇÉ (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni))
renn¬¨‚àà n m (SUC t) ni = ‚â°SUC (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (PI t t‚ÇÅ) ni = ‚â°PI (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (LAMBDA t) ni = ‚â°LAMBDA (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (APPLY t t‚ÇÅ) ni = ‚â°APPLY (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (FIX t) ni = ‚â°FIX (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (LET t t‚ÇÅ) ni = ‚â°LET (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (SUM t t‚ÇÅ) ni = ‚â°SUM (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (PAIR t t‚ÇÅ) ni = ‚â°PAIR (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (SPREAD t t‚ÇÅ) ni = ‚â°SPREAD (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (SET t t‚ÇÅ) ni = ‚â°SET (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (TUNION t t‚ÇÅ) ni = ‚â°TUNION (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (ISECT t t‚ÇÅ) ni = ‚â°ISECT (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (UNION t t‚ÇÅ) ni = ‚â°UNION (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (QTUNION t t‚ÇÅ) ni = ‚â°QTUNION (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (INL t) ni = ‚â°INL (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (INR t) ni = ‚â°INR (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (DECIDE t t‚ÇÅ t‚ÇÇ) ni = ‚â°DECIDE (renn¬¨‚àà n m t (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÇ (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni))
renn¬¨‚àà n m (EQ t t‚ÇÅ t‚ÇÇ) ni = ‚â°EQ (renn¬¨‚àà n m t (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÇ (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni))
renn¬¨‚àà n m AX ni = refl
renn¬¨‚àà n m FREE ni = refl
renn¬¨‚àà n m (CS x) ni with x ‚âü n
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = refl
renn¬¨‚àà n m (NAME x) ni with x ‚âü n
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = refl
renn¬¨‚àà n m (FRESH t) ni = ‚â°FRESH (renn¬¨‚àà (suc n) (suc m) t (Œª z ‚Üí ni (suc‚Üí‚ààlowerNames {n} {names t} z)))
renn¬¨‚àà n m (LOAD t) ni = refl --‚â°LOAD (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (CHOOSE t t‚ÇÅ) ni = ‚â°CHOOSE (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (TSQUASH t) ni = ‚â°TSQUASH (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (TTRUNC t) ni = ‚â°TTRUNC (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (TCONST t) ni = ‚â°TCONST (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (SUBSING t) ni = ‚â°SUBSING (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (DUM t) ni = ‚â°DUM (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (FFDEFS t t‚ÇÅ) ni = ‚â°FFDEFS (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m PURE ni = refl
renn¬¨‚àà n m (UNIV x) ni = refl
renn¬¨‚àà n m (LIFT t) ni = ‚â°LIFT (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (LOWER t) ni = ‚â°LOWER (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (SHRINK t) ni = ‚â°SHRINK (renn¬¨‚àà n m t ni)



‚ààdomùïé‚Üí¬¨s‚â°newChoiceT+ : (name : Name) (w : ùïé¬∑) (t : Term)
                         ‚Üí name ‚àà domùïé¬∑ w
                         ‚Üí ¬¨ suc name ‚â° newChoiceT+ w t
‚ààdomùïé‚Üí¬¨s‚â°newChoiceT+ name w t i e rewrite suc-injective e = ¬¨fresh‚ààdomùïé2 w (namesùïé¬∑ w) (‚Üìvars (names t)) i


¬¨0‚àànames-shiftNameUp : (t : Term) ‚Üí ¬¨ 0 ‚àà names (shiftNameUp 0 t)
¬¨0‚àànames-shiftNameUp t i rewrite names-shiftNameUp‚â° 0 t with ‚àà-map‚Åª (sucIf‚â§ 0) i
... | (y , j , e) = suc-‚â¢-0 {y} (sym e)


choose-pres-getT‚â§‚Ñï : (cc : ContConds) (name name' : Name) (w : ùïé¬∑) (a : Term) (n : ‚Ñï)
                      ‚Üí ¬¨ name' ‚â° name
                      ‚Üí getT‚â§‚Ñï (chooseT name' w a) n name
                      ‚Üí (getT‚â§‚Ñï w n name √ó getT‚â§‚Ñï (chooseT name' w a) n name)
choose-pres-getT‚â§‚Ñï cc name name' w a n diff g
  rewrite ContConds.ccGcd cc 0 name name' w a (Œª x ‚Üí diff (sym x))
  = g , g


choose-pres-‚àànamesùïé : (cc : ContConds) (name name' : Name) (w : ùïé¬∑) (a : Term)
                       ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                       ‚Üí name ‚àà domùïé¬∑ w
                       ‚Üí (¬¨ name ‚àà namesùïé¬∑ (chooseT name' w a)) √ó name ‚àà domùïé¬∑ (chooseT name' w a)
choose-pres-‚àànamesùïé cc name name' w a nnw idom =
  (Œª x ‚Üí nnw (namesùïé-chooseT‚Üí cc name name' w a x)) ,
  domùïé-chooseT cc name name' w a idom

\end{code}
