\begin{code}
{-# OPTIONS --without-K --safe #-}
{-# OPTIONS --cubical #-}

open import Cubical.Core.Everything
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Prelude
  using (refl ; sym ; subst ; cong ; congS ; cong‚ÇÇ ; funExt ; isProp ; isSet ; transport ; Square ; _‚àô_ ;
         isProp‚ÜíisSet ; step-‚â° ; _‚â°‚ü®‚ü©_ ; _‚àé ; isContr)
open import Cubical.Foundations.HLevels
  using (isSetRetract ; isSetŒ£ ; isSet√ó ; isSet‚Üí ; isSetŒ† ; isSet‚ÜíisGroupoid)
open import Cubical.Categories.Category.Base
  using (Category ; _^op ; _[_,_])
open import Cubical.Categories.Limits.Terminal
open import Cubical.Categories.Limits.Initial
open import Cubical.Categories.Functor
open import Cubical.Categories.Presheaf.Base
open import Cubical.Categories.Instances.Sets
-- For the category of elements:
open import Cubical.Categories.Constructions.Elements
open import Cubical.Categories.TypesOfCategories.TypeCategory

open import Cubical.HITs.TypeQuotients renaming (rec to quot-rec ; elim to quot-elim)
open import Cubical.HITs.SetQuotients renaming (rec to set-quot-rec ; elim to set-quot-elim)
open import Cubical.HITs.PropositionalTruncation
  using (map2 ; ‚à•_‚à•‚ÇÅ ; ‚à£_‚à£‚ÇÅ ; squash‚ÇÅ)
  renaming (map to map-prop-trunc ; rec to rec-prop-trunc)
open import Cubical.HITs.SetTruncation
  using (‚à•_‚à•‚ÇÇ ; ‚à£_‚à£‚ÇÇ ; squash‚ÇÇ)
  renaming (rec to rec‚à•‚ÇÇ)
open import Cubical.Relation.Nullary hiding (‚ü™_‚ü´)
open import Cubical.Foundations.Univalence
open import Cubical.Data.Maybe
open import Cubical.Data.Nat hiding (_¬∑_)
open import Cubical.Data.Nat.Order
open import Cubical.Data.Sum
open import Cubical.Data.Empty renaming (elim to ‚ä•-elim)
open import Cubical.Data.Prod

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower ; _‚äî_) renaming (suc to lsuc)
import Data.Maybe
open import Data.Bool hiding (_‚âü_ ; _‚àß_ ; _‚à®_ ; _‚â§_ ; _<_)
open import Data.Unit using (‚ä§ ; tt)

module pca where


trans : {l : Level} {A : Set(l)} {a b c : A}
      ‚Üí a ‚â° b
      ‚Üí b ‚â° c
      ‚Üí a ‚â° c
trans {l} {A} {a} {b} {c} e f = subst (Œª a ‚Üí a ‚â° c) (sym e) f

cong‚ÇÉ : {l k i j : Level}
        {A : Type l}
        {B : A ‚Üí Type k}
        {C : (a : A) (b : B a) ‚Üí Type i}
        {D : (a : A) (b : B a) (c : C a b) ‚Üí Type j}
        (f : (a : A) (b : B a) (c : C a b) ‚Üí D a b c)
        {x : A} {y : A} (p : x ‚â° y)
        {u : B x} {v : B y} (q : PathP (Œª i ‚Üí B (p i)) u v) ‚Üí
        {m : C x u} {n : C y v} (r : PathP (Œª i ‚Üí C (p i) (q i)) m n) ‚Üí
        PathP (Œª i ‚Üí D (p i) (q i) (r i)) (f x u m) (f y v n)
cong‚ÇÉ f p q r i = f (p i) (q i) (r i)
{-# INLINE cong‚ÇÉ #-}

\end{code}

Partial PCAs

\begin{code}

module Partial where
  record PCA (l : Level) : Set(lsuc l) where
    constructor pca
    infixl 40 _¬∑_
    field
      |U|     : Set(l)
      set|U|  : isSet |U|
      _¬∑_     : |U| ‚Üí |U| ‚Üí Maybe |U|

  isTotal : {l : Level} (p : PCA(l)) ‚Üí Set(l)
  isTotal (pca A _ _¬∑_) = (a b : A) ‚Üí Œ£[ c ‚àà A ] a ¬∑ b ‚â° just c

  total¬∑ : {l : Level} (p : PCA(l))
         ‚Üí isTotal p
         ‚Üí PCA.|U| p ‚Üí PCA.|U| p ‚Üí PCA.|U| p
  total¬∑ p tot a b = fst (tot a b)

  open PCA {{...}}

  _‚âà_ : {l : Level} {{p : PCA(l)}} (a : Maybe |U|) (b : |U|) ‚Üí Set(l)
  a ‚âà b = a ‚â° just b

  infix 30 _‚âà_

--  ‚à£_‚à£ : {l : Level} (p : PCA(l)) ‚Üí Set(l)
--  ‚à£ p ‚à£ = PCA.|U| p

  _¬∑_‚Üì : {l : Level} {{p : PCA(l)}} (a b : |U|) ‚Üí Set
  _¬∑_‚Üì a b with a ¬∑ b
  ... | just _ = ‚ä§
  ... | nothing = ‚ä•

{--
_‚àò_//_ : {l : Level} {{p : PCA(l)}} (a b : |U|) (h : a ¬∑ b ‚Üì) ‚Üí |U|
_‚àò_//_ {{p}} a b h with a ¬∑ b
... | just c = {!!}
... | nothing = ‚ä•-elim {!h!}
--}

  record Comb {l : Level} {{p : PCA(l)}} : Set(lsuc l) where
    constructor comb
    field
      K : |U|
      S : |U|
      -- axioms
      -- K ¬∑ a ¬∑ b ‚â° a
      K-eqn : (a : |U|)
            ‚Üí Œ£ |U| (Œª ka ‚Üí
                K ¬∑ a ‚âà ka
              √ó ((b : |U|) ‚Üí ka ¬∑ b ‚âà a))
      -- S ¬∑ a ¬∑ b ¬∑ c ‚â° (a ¬∑ c) ¬∑ (b ¬∑ c)
      S-eqn : (a : |U|)
            ‚Üí Œ£ |U| (Œª sa
            ‚Üí S ¬∑ a ‚âà sa
              √ó ((b : |U|) ‚Üí Œ£ |U| (Œª sab
              ‚Üí sa ¬∑ b ‚âà sab
                √ó ((c ac bc acbc : |U|)
                ‚Üí a ¬∑ c ‚âà ac
                ‚Üí b ¬∑ c ‚âà bc
                ‚Üí ac ¬∑ bc ‚âà acbc
                ‚Üí sab ¬∑ c ‚âà acbc))))

  open Comb {{...}}

  -- K ¬∑ x is defined
  K¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U|
  K¬∑ {l} {{p}} {{c}} x with K-eqn x
  ... | Kx , Kx‚â° , q = Kx

{--
  -- K ¬∑ x ¬∑ y is defined
  K¬∑¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U| ‚Üí |U|
  K¬∑¬∑ {l} {{p}} {{c}} x y with K-eqn x
  ... | Kx , Kx‚â° , q with q y
  ... | Kxy = x
--}

  -- S ¬∑ a is defined
  S¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U|
  S¬∑ {l} {{p}} {{c}} a with S-eqn a
  ... | Sa , Sa‚â° , Fb = Sa

  -- S ¬∑ a ¬∑ b is defined
  S¬∑¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U| ‚Üí |U|
  S¬∑¬∑ {l} {{p}} {{c}} a b with S-eqn a
  ... | Sa , Sa‚â° , Fb with Fb b
  ... | Sab , Sab‚â° , q = Sab

  -- I combinator: I ¬∑ x ‚â° x
  -- Defined as S ¬∑ K ¬∑ K
  Ic : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U|
  Ic {l} {{p}} {{c}} = S¬∑¬∑ K K

  app-Ic : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
         ‚Üí (x : |U|) ‚Üí Ic {{p}} {{c}} ¬∑ x ‚âà x
  app-Ic {l} {{p}} {{c}} x
    with S-eqn K
  ... | SK , SK‚â° , FK with FK K
  ... | SKK , SKK‚â° , q with K-eqn x
  ... | Kx , Kx‚â° , h = q x Kx Kx x Kx‚â° Kx‚â° (h Kx)

  -- Composes a and b: S ¬∑ (K ¬∑ a) ¬∑ b
  Cc : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} (a b : |U|) ‚Üí |U|
  Cc {l} {{p}} {{c}} a b = S¬∑¬∑ (K¬∑ a) b

  Cc-eqn : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} (a b : |U|)
         ‚Üí (x y‚ÇÅ y‚ÇÇ : |U|)
         ‚Üí PCA._¬∑_ p b x ‚âà y‚ÇÅ
         ‚Üí PCA._¬∑_ p a y‚ÇÅ ‚âà y‚ÇÇ
         ‚Üí PCA._¬∑_ p (Cc a b) x ‚âà y‚ÇÇ
  Cc-eqn {l} {{p}} {{c}} a b x y‚ÇÅ y‚ÇÇ y‚ÇÅ‚â° y‚ÇÇ‚â° with K-eqn a
  ... | Ka , Ka‚â° , q with S-eqn Ka
  ... | SKa , SKa‚â° , Fb with Fb b
  ... | SKab , SKab‚â° , h = h x a y‚ÇÅ y‚ÇÇ (q x) y‚ÇÅ‚â° y‚ÇÇ‚â°

{--  Cc-eqn : {l : Level} {{p : PCA l}} {{c : Comb {l} {k} {{p}}}} (a b : |U|)
         ‚Üí (x : |U|) ‚Üí Cc {{p}} {{c}} a b ¬∑ x ‚âà a ¬∑ (b ¬∑ x)
  Cc-eqn {l} {{p}} {{c}} a b x = ?
--}

  -- zero combinator, i.e., Z f x ‚â° x, i.e., Œª f x. x
  Zc : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U|
  Zc {l} {{p}} {{c}} = K¬∑ Ic

  -- suc combinator, i.e., S n f x ‚â° f (n f x), i.e., Œª n f x. f(n f x)
  Sc : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U|
  Sc {l} {{p}} {{c}} = S¬∑ (S¬∑¬∑ (K¬∑ S) K)

  Sc¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U|
  Sc¬∑ {l} {{p}} {{c}} a = S¬∑¬∑ (S¬∑¬∑ (K¬∑ S) K) a

  -- number n
  Nc : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} (n : ‚Ñï) ‚Üí |U|
  Nc {l} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ zero = Zc
  Nc {l} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ (suc n) = Sc¬∑ (Nc n)

  app-K : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          (a : |U|)
        ‚Üí K ¬∑ a ‚âà K¬∑ a
  app-K {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a with K-eqn a
  ... | Kx , Kx‚â° , q = Kx‚â°

  app-K¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
           (x a : |U|)
         ‚Üí (K¬∑ x) ¬∑ a ‚âà x
  app-K¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ x a with K-eqn x
  ... | Kx , Kx‚â° , q with q a
  ... | Kxy = Kxy

{--
  app-K¬∑¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
            (a b : |U|)
          ‚Üí K¬∑¬∑ a b ‚â° a
  app-K¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b with K-eqn a
  ... | Kx , Kx‚â° , q with q b
  ... | Kxy = refl
--}

  app-S : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          (a : |U|)
        ‚Üí S ¬∑ a ‚âà S¬∑ a
  app-S {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a with S-eqn a
  ... | Sa , Sa‚â° , Fb = Sa‚â°

  app-S¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          (a b : |U|)
        ‚Üí (S¬∑ a) ¬∑ b ‚âà S¬∑¬∑ a b
  app-S¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b with S-eqn a
  ... | Sa , Sa‚â° , Fb with Fb b
  ... | Sab , Sab‚â° , q = Sab‚â°

  app-S¬∑¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
            (a b c ac bc acbc : |U|)
          ‚Üí a ¬∑ c ‚âà ac
          ‚Üí b ¬∑ c ‚âà bc
          ‚Üí ac ¬∑ bc ‚âà acbc
          ‚Üí (S¬∑¬∑ a b) ¬∑ c ‚âà acbc
  app-S¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b c ac bc acbc ac‚â° bc‚â° acbc‚â° with S-eqn a
  ... | Sa , Sa‚â° , Fb with Fb b
  ... | Sab , Sab‚â° , q with q c ac bc acbc ac‚â° bc‚â° acbc‚â°
  ... | Sabc‚â° = Sabc‚â°

  c1 : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U|
  c1 {l} {{p}} {{c}} = S¬∑¬∑ (K¬∑ S) K

  -- c1 ¬∑ a is defined and is equal to S¬∑ (K¬∑ a)
  c1¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U| ‚Üí |U|
  c1¬∑ {l} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ a = S¬∑ (K¬∑ a)

  -- c1 ¬∑ a ¬∑ b is defined and is equal to S¬∑¬∑ (K¬∑ a) b
  c1¬∑¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U| ‚Üí |U|
  c1¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b = S¬∑¬∑ (K¬∑ a) b

  app-c1 : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
           (a : |U|)
         ‚Üí c1 ¬∑ a ‚âà c1¬∑ a
  app-c1 {l} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ a =
    app-S¬∑¬∑ (K¬∑ S) K a S (K¬∑ a) (S¬∑ (K¬∑ a))
            (app-K¬∑ S a) (app-K a)
            (app-S (K¬∑ a))

  app-c1¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
            (a b : |U|)
          ‚Üí (c1¬∑ a) ¬∑ b ‚âà c1¬∑¬∑ a b
  app-c1¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b = app-S¬∑ (K¬∑ a) b

  app-c1¬∑¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
             (a b c bc abc : |U|)
           ‚Üí b ¬∑ c ‚âà bc
           ‚Üí a ¬∑ bc ‚âà abc
           ‚Üí (c1¬∑¬∑ a b) ¬∑ c ‚âà abc
  app-c1¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b c bc abc bc‚â° abc‚â° =
    app-S¬∑¬∑ (K¬∑ a) b c a bc abc
            (app-K¬∑ a c)
            bc‚â° abc‚â°

  c2 : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U|
  c2 {l} {{p}} {{c}} = S¬∑¬∑ (c1¬∑¬∑ S (c1¬∑¬∑ K (c1¬∑¬∑ S (S¬∑¬∑ (c1¬∑¬∑ c1 Ic) (K¬∑ Ic))))) (K¬∑ (c1¬∑¬∑ K Ic))

  c2¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U|
  c2¬∑ {l} {{p}} {{c}} a = S¬∑¬∑ (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic))) (c1¬∑¬∑ K Ic)

  c2¬∑¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}} ‚Üí |U| ‚Üí |U| ‚Üí |U|
  c2¬∑¬∑ {l} {{p}} {{c}} a b = S¬∑¬∑ (c1¬∑¬∑ a Ic) (K¬∑ b)

  app-c2 : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
           (a : |U|)
         ‚Üí c2 ¬∑ a ‚âà c2¬∑ a
  app-c2 {l} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ a =
    app-S¬∑¬∑
      (c1¬∑¬∑ S (c1¬∑¬∑ K (c1¬∑¬∑ S (S¬∑¬∑ (c1¬∑¬∑ c1 Ic) (K¬∑ Ic)))))
      (K¬∑ (c1¬∑¬∑ K Ic))
      a
      (S¬∑ (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic))))
      (c1¬∑¬∑ K Ic)
      (c2¬∑ a)
      (app-c1¬∑¬∑ S (c1¬∑¬∑ K (c1¬∑¬∑ S (S¬∑¬∑ (c1¬∑¬∑ c1 Ic) (K¬∑ Ic)))) a
        (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic)))
        (S¬∑ (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic))))
        (app-c1¬∑¬∑ K (c1¬∑¬∑ S (S¬∑¬∑ (c1¬∑¬∑ c1 Ic) (K¬∑ Ic))) a
          (S¬∑ (c1¬∑¬∑ a Ic)) (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic)))
          (app-c1¬∑¬∑ S (S¬∑¬∑ (c1¬∑¬∑ c1 Ic) (K¬∑ Ic)) a
            (c1¬∑¬∑ a Ic) (S¬∑ (c1¬∑¬∑ a Ic))
            (app-S¬∑¬∑ (c1¬∑¬∑ c1 Ic) (K¬∑ Ic) a (c1¬∑ a) Ic (c1¬∑¬∑ a Ic)
              (app-c1¬∑¬∑ c1 Ic a a (c1¬∑ a) (app-Ic a) (app-c1 a))
              (app-K¬∑ Ic a) (app-c1¬∑ a Ic))
            (app-S (c1¬∑¬∑ a Ic)))
          (app-K (S¬∑ (c1¬∑¬∑ a Ic))))
        (app-S (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic)))))
      (app-K¬∑ (c1¬∑¬∑ (Comb.K c) Ic) a)
      (app-S¬∑ (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic))) (c1¬∑¬∑ (Comb.K c) Ic))

  app-c2¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
            (a b : |U|)
          ‚Üí (c2¬∑ a) ¬∑ b ‚âà c2¬∑¬∑ a b
  app-c2¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b =
    app-S¬∑¬∑ (K¬∑ (S¬∑ (c1¬∑¬∑ a Ic))) (c1¬∑¬∑ K Ic) b
      (S¬∑ (c1¬∑¬∑ a Ic))
      (K¬∑ b)
      (c2¬∑¬∑ a b)
      (app-K¬∑ (S¬∑ (c1¬∑¬∑ a Ic)) b)
      (app-c1¬∑¬∑ K Ic b b (K¬∑ b) (app-Ic b) (app-K b))
      (app-S¬∑ (c1¬∑¬∑ a Ic) (K¬∑ b))

  app-c2¬∑¬∑ : {l : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
             (a b c ac acb : |U|)
           ‚Üí a ¬∑ c ‚âà ac
           ‚Üí ac ¬∑ b ‚âà acb
           ‚Üí (c2¬∑¬∑ a b) ¬∑ c ‚âà acb
  app-c2¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b c ac acb ac‚â° acb‚â° =
    app-S¬∑¬∑ (c1¬∑¬∑ a Ic) (K¬∑ b) c ac b acb
      (app-c1¬∑¬∑ a Ic c c ac (app-Ic c) ac‚â°)
      (app-K¬∑ b c)
      acb‚â°

  -- Pairing opertor, i.e., Œª x y c. c x y
  -- Following https://web.stanford.edu/class/cs242/materials/lectures/lecture02.pdf
  Pc : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U|
  Pc {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ = c2¬∑¬∑ (c1¬∑¬∑ c1 (c1¬∑¬∑ c2 (c1¬∑¬∑ (c2¬∑ Ic) Ic))) Ic

  Pc¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U| ‚Üí |U|
  Pc¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a = c1¬∑¬∑ (c2¬∑ (c2¬∑¬∑ Ic a)) Ic

  Pc¬∑¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U| ‚Üí |U| ‚Üí |U|
  Pc¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a b = c2¬∑¬∑ (c2¬∑¬∑ Ic a) b

  app-Pc : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
           (a : |U|)
         ‚Üí Pc ¬∑ a ‚âà Pc¬∑ a
  app-Pc {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a =
    app-c2¬∑¬∑ (c1¬∑¬∑ c1 (c1¬∑¬∑ c2 (c1¬∑¬∑ (c2¬∑ Ic) Ic))) Ic a
      (c1¬∑ (c2¬∑ (c2¬∑¬∑ Ic a))) (Pc¬∑ a)
      (app-c1¬∑¬∑ c1 (c1¬∑¬∑ c2 (c1¬∑¬∑ (c2¬∑ Ic) Ic)) a
        (c2¬∑ (c2¬∑¬∑ Ic a))
        (c1¬∑ (c2¬∑ (c2¬∑¬∑ Ic a)))
        (app-c1¬∑¬∑ c2 (c1¬∑¬∑ (c2¬∑ Ic) Ic) a (c2¬∑¬∑ Ic a) (c2¬∑ (c2¬∑¬∑ Ic a))
          (app-c1¬∑¬∑ (c2¬∑ Ic) Ic a a (c2¬∑¬∑ Ic a) (app-Ic a) (app-c2¬∑ Ic a))
          (app-c2 (c2¬∑¬∑ Ic a)))
        (app-c1 (c2¬∑ (c2¬∑¬∑ Ic a))))
      (app-c1¬∑ (c2¬∑ (c2¬∑¬∑ Ic a)) Ic)

  app-Pc¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
            (a b : |U|)
           ‚Üí (Pc¬∑ a) ¬∑ b ‚âà Pc¬∑¬∑ a b
  app-Pc¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a b =
    app-c1¬∑¬∑ (c2¬∑ (c2¬∑¬∑ Ic a)) Ic b b (Pc¬∑¬∑ a b)
      (app-Ic b) (app-c2¬∑ (c2¬∑¬∑ Ic a) b)

  app-Pc¬∑¬∑ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
             (a b c ca cab : |U|)
           ‚Üí c ¬∑ a ‚âà ca
           ‚Üí ca ¬∑ b ‚âà cab
           ‚Üí (Pc¬∑¬∑ a b) ¬∑ c ‚âà cab
  app-Pc¬∑¬∑ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b c ca cab ca‚â° cab‚â° =
    app-c2¬∑¬∑ (c2¬∑¬∑ Ic a) b c ca cab
      (app-c2¬∑¬∑ Ic a c c ca (app-Ic c) ca‚â°)
      cab‚â°

  -- 1st projection of a pair
  œÄ‚ÇÅ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U|
  œÄ‚ÇÅ {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ = S¬∑¬∑ Ic (K¬∑ K)

  œÄ‚ÇÅ-pair : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          ‚Üí (a b : |U|)
          ‚Üí œÄ‚ÇÅ ¬∑ (Pc¬∑¬∑ a b) ‚âà a
  œÄ‚ÇÅ-pair {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a b =
    app-S¬∑¬∑ Ic (K¬∑ K) (Pc¬∑¬∑ a b) (Pc¬∑¬∑ a b) K a
      (app-Ic (Pc¬∑¬∑ a b))
      (app-K¬∑ K (Pc¬∑¬∑ a b))
      (app-Pc¬∑¬∑ a b K (K¬∑ a) a (app-K a) (app-K¬∑ a b))

  -- 2nd projection of a pair
  œÄ‚ÇÇ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U|
  œÄ‚ÇÇ {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ = S¬∑¬∑ Ic (K¬∑ (K¬∑ Ic))

  œÄ‚ÇÇ-pair : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          ‚Üí (a b : |U|)
          ‚Üí œÄ‚ÇÇ ¬∑ (Pc¬∑¬∑ a b) ‚âà b
  œÄ‚ÇÇ-pair {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a b =
    app-S¬∑¬∑ Ic (K¬∑ (K¬∑ Ic)) (Pc¬∑¬∑ a b) (Pc¬∑¬∑ a b) (K¬∑ Ic) b
      (app-Ic (Pc¬∑¬∑ a b))
      (app-K¬∑ (K¬∑ Ic) (Pc¬∑¬∑ a b))
      (app-Pc¬∑¬∑ a b (K¬∑ Ic) Ic b (app-K¬∑ Ic a) (app-Ic b))

{--
  data isNc {l : Level} ‚¶É p : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É p ‚¶Ñ ‚¶Ñ (n : ‚Ñï) : |U| ‚Üí Set(l) where
    isn : isNc n (Nc n)

  isNc-elim : {l : Level} ‚¶É p : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É p ‚¶Ñ ‚¶Ñ (n : ‚Ñï)
              (x : isNc n (Nc n))
            ‚Üí x ‚â° isn
  isNc-elim {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ n x = {!!}
--}

\end{code}

Total PCAs

\begin{code}
module Total where
  record PCA (l : Level) : Set(lsuc l) where
    constructor pca
    infixl 40 _¬∑_
    field
      |U|    : Set(l)
      set|U| : isSet |U|
      _¬∑_    : |U| ‚Üí |U| ‚Üí |U|

  open PCA {{...}}

  record Comb {l : Level} {{p : PCA(l)}} : Set(lsuc l) where
    constructor comb
    field
      K : |U|
      S : |U|
      -- axiom
      K-eqn : (a b : |U|)
            ‚Üí K ¬∑ a ¬∑ b ‚â° a
      S-eqn : (a b c : |U|)
            ‚Üí S ¬∑ a ¬∑ b ¬∑ c ‚â° (a ¬∑ c) ¬∑ (b ¬∑ c)

  Partial-Total : {l : Level} (p : Partial.PCA l)
                ‚Üí Partial.isTotal p
                ‚Üí PCA l
  Partial-Total p@(Partial.pca |U|‚ÇÅ iss _¬∑_) tot =
    pca |U|‚ÇÅ iss (Partial.total¬∑ p tot)

  Total-Partial : {l : Level} (p : PCA l)
                ‚Üí Partial.PCA l
  Total-Partial p@(pca |U|‚ÇÅ iss _¬∑_) =
    Partial.pca |U|‚ÇÅ iss (Œª a b ‚Üí just (a ¬∑ b))
\end{code}

Examples of a PCA

\begin{code}
module Lambda where

  ¬¨sm<m : {m : ‚Ñï} ‚Üí ¬¨ suc m < m
  ¬¨sm<m {m} h = ¬¨m<m {m} (‚â§-trans (‚â§-suc ‚â§-refl) h)

  -- increments x if c ‚â§ x
  sucIf‚â§ : (c x : ‚Ñï) ‚Üí ‚Ñï
  sucIf‚â§ zero x = suc x
  sucIf‚â§ (suc c) zero = zero
  sucIf‚â§ (suc c) (suc x) = suc (sucIf‚â§ c x)

  sucIf‚â§-prop : (c x : ‚Ñï)
              ‚Üí ((c ‚â§ x) √ó (sucIf‚â§ c x ‚â° suc x))
              ‚äé ((x < c) √ó (sucIf‚â§ c x ‚â° x))
  sucIf‚â§-prop zero x = inl (zero-‚â§ , refl)
  sucIf‚â§-prop (suc c) zero = inr (suc-‚â§-suc zero-‚â§ , refl)
  sucIf‚â§-prop (suc c) (suc x) with sucIf‚â§-prop c x
  ... | inl (p , q) = inl (suc-‚â§-suc p , cong suc q)
  ... | inr (p , q) = inr (suc-‚â§-suc p , cong suc q)

  sucIf‚â§-‚â§ : (c x : ‚Ñï)
           ‚Üí c ‚â§ x
           ‚Üí sucIf‚â§ c x ‚â° suc x
  sucIf‚â§-‚â§ c x c‚â§x with sucIf‚â§-prop c x
  ... | inl (c‚â§x , p) = p
  ... | inr (x<c , p) = ‚ä•-elim {A = Œª _ ‚Üí sucIf‚â§ c x ‚â° suc x} (¬¨m<m (‚â§-trans x<c c‚â§x))

  sucIf‚â§-< : (c x : ‚Ñï)
           ‚Üí x < c
           ‚Üí sucIf‚â§ c x ‚â° x
  sucIf‚â§-< c x x<c with sucIf‚â§-prop c x
  ... | inl (c‚â§x , p) = ‚ä•-elim {A = Œª _ ‚Üí sucIf‚â§ c x ‚â° x} (¬¨m<m (‚â§-trans x<c c‚â§x))
  ... | inr (x<c , p) = p

  -- decrements x if c < x
  predIf‚â§ : (c x : ‚Ñï) ‚Üí ‚Ñï
  predIf‚â§ c zero = zero
  predIf‚â§ zero (suc x) = x
  predIf‚â§ (suc c) (suc x) = suc (predIf‚â§ c x)

  predIf‚â§-suc-prop : (c x : ‚Ñï)
                   ‚Üí ((c ‚â§ x) √ó (predIf‚â§ c (suc x) ‚â° x))
                   ‚äé ((x < c) √ó (predIf‚â§ c (suc x) ‚â° suc x))
  predIf‚â§-suc-prop zero x = inl (zero-‚â§ , refl)
  predIf‚â§-suc-prop (suc c) zero = inr (suc-‚â§-suc zero-‚â§ , refl)
  predIf‚â§-suc-prop (suc c) (suc x) with predIf‚â§-suc-prop c x
  predIf‚â§-suc-prop (suc c) (suc x) | inl (c‚â§x , p) = inl (suc-‚â§-suc c‚â§x , cong suc p)
  predIf‚â§-suc-prop (suc c) (suc x) | inr (x<c , p) = inr (suc-‚â§-suc x<c , cong suc p)

  predIf‚â§-suc-‚â§ : (c x : ‚Ñï)
                ‚Üí c ‚â§ x
                ‚Üí predIf‚â§ c (suc x) ‚â° x
  predIf‚â§-suc-‚â§ c x c‚â§x with predIf‚â§-suc-prop c x
  predIf‚â§-suc-‚â§ c x c‚â§x | inl (c‚â§x‚ÇÅ , p) = p
  predIf‚â§-suc-‚â§ c x c‚â§x | inr (x<c‚ÇÅ , p) =
    ‚ä•-elim {A = Œª _ ‚Üí predIf‚â§ c (suc x) ‚â° x} (¬¨m<m (‚â§-trans x<c‚ÇÅ c‚â§x))

  sucIf‚â§-predIf‚â§-< : (v c x : ‚Ñï)
                   ‚Üí c < x
                   ‚Üí v < x
                   ‚Üí sucIf‚â§ v (predIf‚â§ c x) ‚â° x
  sucIf‚â§-predIf‚â§-< v c 0 c<x v<x = ‚ä•-elim {A = Œª _ ‚Üí sucIf‚â§ v zero ‚â° zero} (¬¨-<-zero c<x)
  sucIf‚â§-predIf‚â§-< v c (suc x) c<sx v<sx =
    trans (cong (sucIf‚â§ v) (predIf‚â§-suc-‚â§ c x (pred-‚â§-pred c<sx)))
          (sucIf‚â§-‚â§ v x (pred-‚â§-pred v<sx))

  sucIf‚â§-predIf‚â§‚â°predIf‚â§ : (v n x : ‚Ñï)
                         ‚Üí ¬¨ x ‚â° n
                         ‚Üí n ‚â§ v
                         ‚Üí x ‚â§ v
                         ‚Üí sucIf‚â§ v (predIf‚â§ n x) ‚â° predIf‚â§ n x
  sucIf‚â§-predIf‚â§‚â°predIf‚â§ v 0 0 x‚â¢n n‚â§v x‚â§v = sucIf‚â§-< v zero (‚â§-trans (‚ä•-elim {A = Œª _ ‚Üí 1 ‚â§ zero} (x‚â¢n refl)) n‚â§v)
  sucIf‚â§-predIf‚â§‚â°predIf‚â§ v (suc n) 0 x‚â¢sn sn‚â§v x‚â§v = sucIf‚â§-< v zero (‚â§-trans (suc-‚â§-suc zero-‚â§) sn‚â§v)
  sucIf‚â§-predIf‚â§‚â°predIf‚â§ v n (suc x) sx‚â¢n n‚â§v sx‚â§v with predIf‚â§-suc-prop n x
  sucIf‚â§-predIf‚â§‚â°predIf‚â§ v n (suc x) sx‚â¢n n‚â§v sx‚â§v | inl (n‚â§x , p) =
    trans (trans (cong (sucIf‚â§ v) p) (sucIf‚â§-< v x sx‚â§v)) (sym p)
  sucIf‚â§-predIf‚â§‚â°predIf‚â§ v n (suc x) sx‚â¢n n‚â§v sx‚â§v | inr (x<n , p) =
    trans (trans (cong (sucIf‚â§ v) p) (sucIf‚â§-< v (suc x) (‚â§-trans (‚â§‚Üí< x<n sx‚â¢n) n‚â§v))) (sym p)

  if‚â° : {T : Set} (a b : ‚Ñï) (c d : T) ‚Üí T
  if‚â° zero zero c d = c
  if‚â° zero (suc _) c d = d
  if‚â° (suc _) zero c d = d
  if‚â° (suc a) (suc b) c d = if‚â° a b c d

  if‚â°-prop : (a b : ‚Ñï)
           ‚Üí ((a ‚â° b) √ó ({T : Set} (c d : T) ‚Üí if‚â° a b c d ‚â° c))
           ‚äé ((¬¨ a ‚â° b) √ó ({T : Set} (c d : T) ‚Üí if‚â° a b c d ‚â° d))
  if‚â°-prop zero zero = inl (refl , Œª c d ‚Üí refl)
  if‚â°-prop zero (suc b) = inr (znots , Œª c d ‚Üí refl)
  if‚â°-prop (suc a) zero = inr (snotz , Œª c d ‚Üí refl)
  if‚â°-prop (suc a) (suc b) with if‚â°-prop a b
  ... | inl (p , q) = inl (cong suc p , q)
  ... | inr (p , q) = inr ((Œª z ‚Üí p (injSuc z)) , q)

  if‚â°-prop-‚â¢ : {T : Set} (a b : ‚Ñï) (c d : T)
             ‚Üí ¬¨ a ‚â° b
             ‚Üí if‚â° a b c d ‚â° d
  if‚â°-prop-‚â¢ a b c d a‚â¢b with if‚â°-prop a b
  ... | inl (p , q) = ‚ä•-elim {A = Œª _ ‚Üí if‚â° a b c d ‚â° d} (a‚â¢b p)
  ... | inr (p , q) = q c d

  contra : {A B : Type} ‚Üí (A ‚Üí B) ‚Üí ¬¨ B ‚Üí ¬¨ A
  contra f g x = g (f x)

  data Œõ : Set where
    var : ‚Ñï ‚Üí Œõ
    lam : Œõ ‚Üí Œõ
    app : Œõ ‚Üí Œõ ‚Üí Œõ

  ¬¨var‚â°lam : {n : ‚Ñï} {a : Œõ} ‚Üí ¬¨ var n ‚â° lam a
  ¬¨var‚â°lam p = transport (cong f p) tt
    where
      f : Œõ ‚Üí Type
      f (var _)   = ‚ä§
      f (lam _)   = ‚ä•
      f (app _ _) = ‚ä•

  ¬¨var‚â°app : {n : ‚Ñï} {a b : Œõ} ‚Üí ¬¨ var n ‚â° app a b
  ¬¨var‚â°app p = transport (cong f p) tt
    where
      f : Œõ ‚Üí Type
      f (var _)   = ‚ä§
      f (lam _)   = ‚ä•
      f (app _ _) = ‚ä•

  ¬¨lam‚â°app : {a b c : Œõ} ‚Üí ¬¨ lam a ‚â° app b c
  ¬¨lam‚â°app p = transport (cong f p) tt
    where
      f : Œõ ‚Üí Type
      f (var _)   = ‚ä•
      f (lam _)   = ‚ä§
      f (app _ _) = ‚ä•

  lama‚â°lamb-implies-a‚â°b : {a b : Œõ} ‚Üí lam a ‚â° lam b ‚Üí a ‚â° b
  lama‚â°lamb-implies-a‚â°b = cong unpack
    where
    unpack : Œõ ‚Üí Œõ
    unpack (var _)   = var 0
    unpack (lam a)   = a
    unpack (app _ _) = var 0

  varn‚â°varm-impliesn‚â°m : {n m : ‚Ñï} ‚Üí var n ‚â° var m ‚Üí n ‚â° m
  varn‚â°varm-impliesn‚â°m = cong unpack
    where
    unpack : Œõ ‚Üí ‚Ñï
    unpack (var n)   = n
    unpack (lam _)   = 0
    unpack (app _ _) = 0

  appfa‚â°appgb-implies-f‚â°g : {f g a b : Œõ} ‚Üí app f a ‚â° app g b ‚Üí f ‚â° g
  appfa‚â°appgb-implies-f‚â°g = cong unpack
    where
    unpack : Œõ ‚Üí Œõ
    unpack (var _)   = var 0
    unpack (lam _)   = var 0
    unpack (app f _) = f

  appfa‚â°appgb-implies-a‚â°b : {f g a b : Œõ} ‚Üí app f a ‚â° app g b ‚Üí a ‚â° b
  appfa‚â°appgb-implies-a‚â°b = cong unpack
    where
    unpack : Œõ ‚Üí Œõ
    unpack (var _)   = var 0
    unpack (lam _)   = var 0
    unpack (app _ a) = a

  shiftUp : ‚Ñï ‚Üí Œõ ‚Üí Œõ
  shiftUp c (var x) = var (sucIf‚â§ c x)
  shiftUp c (lam t) = lam (shiftUp (suc c) t)
  shiftUp c (app t u) = app (shiftUp c t) (shiftUp c u)
  --  shiftUp c (eq {a} {b} e f) = eq {shiftUp c a} {shiftUp c b} (Œõ‚â°-shiftUp c a b e) f

  gsub : (œÉ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí Œõ ‚Üí Œõ ‚Üí Œõ
  gsub œÉ v t (var x)   = if‚â° x v t (var (œÉ v x))
  gsub œÉ v t (lam u)   = lam (gsub œÉ (suc v) (shiftUp 0 t) u)
  gsub œÉ v t (app f a) = app (gsub œÉ v t f) (gsub œÉ v t a)
  --gsub œÉ v t (eq {a} {b} e f) = eq {gsub œÉ v t a} {gsub œÉ v t b} (Œõ‚â°-gsub œÉ v t a b e) f

  sub : Œõ ‚Üí Œõ ‚Üí Œõ
  sub a f = gsub predIf‚â§ 0 a f

  data Œõ‚â° : Œõ ‚Üí Œõ ‚Üí Set where
    Œõ‚â°refl  : (a : Œõ) ‚Üí Œõ‚â° a a
    Œõ‚â°sym   : {a b : Œõ}
            ‚Üí Œõ‚â° a b
            ‚Üí Œõ‚â° b a
    Œõ‚â°trans : {a b c : Œõ}
            ‚Üí Œõ‚â° a b
            ‚Üí Œõ‚â° b c
            ‚Üí Œõ‚â° a c
    Œõ‚â°beta  : (f a : Œõ)
            ‚Üí Œõ‚â° (app (lam f) a) (sub a f)
    Œõ‚â°lam   : {f g : Œõ}
            ‚Üí Œõ‚â° f g
            ‚Üí Œõ‚â° (lam f) (lam g)
    Œõ‚â°app   : {f g a b : Œõ}
            ‚Üí Œõ‚â° f g
            ‚Üí Œõ‚â° a b
            ‚Üí Œõ‚â° (app f a) (app g b)

  gsub-shiftUp-var : (n : ‚Ñï) (x : ‚Ñï) (a : Œõ) (f : ‚Ñï ‚Üí Œõ)
                   ‚Üí if‚â° (sucIf‚â§ n x) n a (f (predIf‚â§ n (sucIf‚â§ n x))) ‚â° f x
  gsub-shiftUp-var zero x a f = refl
  gsub-shiftUp-var (suc n) zero a f = refl
  gsub-shiftUp-var (suc n) (suc x) a f = gsub-shiftUp-var n x a (Œª z ‚Üí f (suc z))

  gsub-shiftUp : (n : ‚Ñï) (a b : Œõ)
               ‚Üí gsub predIf‚â§ n a (shiftUp n b)
               ‚â° b
  gsub-shiftUp n a (var x) = gsub-shiftUp-var n x a var
  gsub-shiftUp n a (lam b) = cong lam (gsub-shiftUp (suc n) (shiftUp 0 a) b)
  gsub-shiftUp n a (app b b‚ÇÅ) = cong‚ÇÇ app (gsub-shiftUp n a b) (gsub-shiftUp n a b‚ÇÅ)

  shiftUp-shiftUp : (n v : ‚Ñï) (a : Œõ)
                  ‚Üí n ‚â§ v
                  ‚Üí shiftUp n (shiftUp v a)
                  ‚â° shiftUp (suc v) (shiftUp n a)
  shiftUp-shiftUp n v (var x) n‚â§v with sucIf‚â§-prop v x
  shiftUp-shiftUp n v (var x) n‚â§v | inl (v‚â§x , q) with sucIf‚â§-prop n x
  shiftUp-shiftUp n v (var x) n‚â§v | inl (v‚â§x , q) | inl (n‚â§x , q‚ÇÅ) =
    cong var (trans (cong (sucIf‚â§ n) q)
                    (trans (trans (sucIf‚â§-‚â§ n (suc x) (‚â§-trans n‚â§v (‚â§-trans v‚â§x (‚â§-suc ‚â§-refl))))
                                  (cong suc (sym q)))
                           (cong (sucIf‚â§ (suc v)) (sym q‚ÇÅ))))
  shiftUp-shiftUp n v (var x) n‚â§v | inl (v‚â§x , q) | inr (x<n , q‚ÇÅ) =
    ‚ä•-elim {A = Œª _ ‚Üí var (sucIf‚â§ n (sucIf‚â§ v x)) ‚â° var (sucIf‚â§ (suc v) (sucIf‚â§ n x))}
           (¬¨m<m (‚â§-trans x<n (‚â§-trans n‚â§v v‚â§x)))
  shiftUp-shiftUp n v (var x) n‚â§v | inr (x<v , q) with sucIf‚â§-prop n x
  shiftUp-shiftUp n v (var x) n‚â§v | inr (x<v , q) | inl (n‚â§x , q‚ÇÅ) =
    cong var (trans (cong (sucIf‚â§ n) q)
                    (trans q‚ÇÅ (trans (cong suc (sym q))
                                     (cong (sucIf‚â§ (suc v)) (sym q‚ÇÅ)))))
  shiftUp-shiftUp n v (var x) n‚â§v | inr (x<v , q) | inr (x<n , q‚ÇÅ) =
    cong var (trans (cong (sucIf‚â§ n) q)
                    (trans q‚ÇÅ (trans (sym (sucIf‚â§-< (suc v) x (‚â§-trans x<v ‚â§-suc‚Ñï)))
                                     (cong (sucIf‚â§ (suc v)) (sym q‚ÇÅ)))))
  shiftUp-shiftUp n v (lam a) n‚â§v = cong lam (shiftUp-shiftUp (suc n) (suc v) a (suc-‚â§-suc n‚â§v))
  shiftUp-shiftUp n v (app a a‚ÇÅ) n‚â§v = cong‚ÇÇ app (shiftUp-shiftUp n v a n‚â§v) (shiftUp-shiftUp n v a‚ÇÅ n‚â§v)

  sub-shiftUp-suc : (n v : ‚Ñï) (a f : Œõ)
                  ‚Üí n ‚â§ v
                  ‚Üí gsub predIf‚â§ n (shiftUp v a) (shiftUp (suc v) f)
                  ‚â° shiftUp v (gsub predIf‚â§ n a f)
  sub-shiftUp-suc n v a (var x) n‚â§v with sucIf‚â§-prop (suc v) x
  sub-shiftUp-suc n v a (var x) n‚â§v | inl (sv‚â§x , p) =
    trans (cong (Œª z ‚Üí if‚â° z n (shiftUp v a) (var (predIf‚â§ n z))) p)
          (trans (if‚â°-prop-‚â¢ (suc x) n (shiftUp v a) (var (predIf‚â§ n (suc x)))
                             (Œª z ‚Üí ¬¨m<m (‚â§-trans (‚â§-trans (0 , z) (‚â§-trans n‚â§v (1 , refl))) sv‚â§x)))
                 (trans (cong var (trans (predIf‚â§-suc-‚â§ n x (‚â§-trans n‚â§v (‚â§-trans (1 , refl) sv‚â§x)))
                                         (sym (sucIf‚â§-predIf‚â§-< v n x (‚â§-trans (suc-‚â§-suc n‚â§v) sv‚â§x) sv‚â§x))))
                        (cong (shiftUp v) (sym (if‚â°-prop-‚â¢ x n a (var (predIf‚â§ n x))
                              (Œª z ‚Üí ¬¨m<m (‚â§-trans (suc-‚â§-suc (‚â§-trans (0 , z) n‚â§v)) sv‚â§x)))))))
  sub-shiftUp-suc n v a (var x) n‚â§v | inr (x<sv , p) with if‚â°-prop x n
  sub-shiftUp-suc n v a (var x) n‚â§v | inr (x<sv , p) | inl (x‚â°n , q) =
    trans (cong (Œª z ‚Üí if‚â° z n (shiftUp v a) (var (predIf‚â§ n z))) p)
          (trans (q (shiftUp v a) (var (predIf‚â§ n x)))
                 (cong (shiftUp v) (sym (q a (var (predIf‚â§ n x))))))
  sub-shiftUp-suc n v a (var x) n‚â§v | inr (x<sv , p) | inr (x‚â¢n , q) =
    trans (cong (Œª z ‚Üí if‚â° z n (shiftUp v a) (var (predIf‚â§ n z))) p)
          (trans (q (shiftUp v a) (var (predIf‚â§ n x)))
                 (trans (cong var (sym (sucIf‚â§-predIf‚â§‚â°predIf‚â§ v n x x‚â¢n n‚â§v (pred-‚â§-pred x<sv))))
                        (cong (shiftUp v) (sym (q a (var (predIf‚â§ n x)))))))
  sub-shiftUp-suc n v a (lam f) n‚â§v =
    cong lam (trans (cong (Œª x ‚Üí gsub predIf‚â§ (suc n) x (shiftUp (suc (suc v)) f))
                          (shiftUp-shiftUp 0 v a zero-‚â§))
                    (sub-shiftUp-suc (suc n) (suc v) (shiftUp 0 a) f (suc-‚â§-suc n‚â§v)))
  sub-shiftUp-suc n v a (app f f‚ÇÅ) n‚â§v =
    cong‚ÇÇ app (sub-shiftUp-suc n v a f n‚â§v)
              (sub-shiftUp-suc n v a f‚ÇÅ n‚â§v)

  ‚â°‚ÜíŒõ‚â° : {a b : Œõ}
       ‚Üí a ‚â° b
       ‚Üí Œõ‚â° a b
  ‚â°‚ÜíŒõ‚â° {a} {b} a‚â°b = subst (Œª a ‚Üí Œõ‚â° a b) (sym a‚â°b) (Œõ‚â°refl b)

  Œõ‚â°-shiftUp : (v : ‚Ñï) (a b : Œõ)
             ‚Üí Œõ‚â° a b
             ‚Üí Œõ‚â° (shiftUp v a) (shiftUp v b)
  Œõ‚â°-shiftUp v a .a (Œõ‚â°refl .a) = Œõ‚â°refl (shiftUp v a)
  Œõ‚â°-shiftUp v a b (Œõ‚â°sym a‚â°b) = Œõ‚â°sym (Œõ‚â°-shiftUp v b a a‚â°b)
  Œõ‚â°-shiftUp v a b (Œõ‚â°trans {a} {x} {b} a‚â°b a‚â°b‚ÇÅ) = Œõ‚â°trans (Œõ‚â°-shiftUp v a x a‚â°b) (Œõ‚â°-shiftUp v x b a‚â°b‚ÇÅ)
  Œõ‚â°-shiftUp v .(app (lam f) a) .(sub a f) (Œõ‚â°beta f a) =
    Œõ‚â°trans (Œõ‚â°beta (shiftUp (suc v) f) (shiftUp v a))
            (‚â°‚ÜíŒõ‚â° (sub-shiftUp-suc 0 v a f zero-‚â§))
  Œõ‚â°-shiftUp v .(lam _) .(lam _) (Œõ‚â°lam {f} {g} a‚â°b) = Œõ‚â°lam (Œõ‚â°-shiftUp (suc v) f g a‚â°b)
  Œõ‚â°-shiftUp v .(app _ _) .(app _ _) (Œõ‚â°app {f} {g} {a} {b} a‚â°b a‚â°b‚ÇÅ) =
    Œõ‚â°app (Œõ‚â°-shiftUp v f g a‚â°b) (Œõ‚â°-shiftUp v a b a‚â°b‚ÇÅ)

  Œõ‚â°-if‚â° : (x v : ‚Ñï) (a b t : Œõ)
         ‚Üí Œõ‚â° a b
         ‚Üí Œõ‚â° (if‚â° x v a t) (if‚â° x v b t)
  Œõ‚â°-if‚â° zero zero a b t a‚â°b = a‚â°b
  Œõ‚â°-if‚â° zero (suc v) a b t a‚â°b = Œõ‚â°refl t
  Œõ‚â°-if‚â° (suc x) zero a b t a‚â°b = Œõ‚â°refl t
  Œõ‚â°-if‚â° (suc x) (suc v) a b t a‚â°b = Œõ‚â°-if‚â° x v a b t a‚â°b

  Œõ‚â°-gsub‚ÇÅ : (œÉ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) (v : ‚Ñï) (t a b : Œõ)
           ‚Üí Œõ‚â° a b
           ‚Üí Œõ‚â° (gsub œÉ v a t) (gsub œÉ v b t)
  Œõ‚â°-gsub‚ÇÅ œÉ v (var x) a b a‚â°b =
    Œõ‚â°-if‚â° x v a b (var (œÉ v x)) a‚â°b
  Œõ‚â°-gsub‚ÇÅ œÉ v (lam t) a b a‚â°b =
    Œõ‚â°lam (Œõ‚â°-gsub‚ÇÅ œÉ (suc v) t (shiftUp 0 a) (shiftUp 0 b) (Œõ‚â°-shiftUp 0 a b a‚â°b))
  Œõ‚â°-gsub‚ÇÅ œÉ v (app t t‚ÇÅ) a b a‚â°b =
    Œõ‚â°app (Œõ‚â°-gsub‚ÇÅ œÉ v t a b a‚â°b) (Œõ‚â°-gsub‚ÇÅ œÉ v t‚ÇÅ a b a‚â°b)

  Œõ-Discrete : Discrete Œõ
  Œõ-Discrete (var x)   (var y)   = decRec
    (Œª p  ‚Üí yes (cong var p))
    (Œª ne ‚Üí no (Œª p ‚Üí ne (varn‚â°varm-impliesn‚â°m p)))
    (discrete‚Ñï x y)
  Œõ-Discrete (var x)   (lam b)   = no ¬¨var‚â°lam
  Œõ-Discrete (var x)   (app g b) = no ¬¨var‚â°app
  Œõ-Discrete (lam a)   (var y)   = no Œª p ‚Üí ¬¨var‚â°lam (sym p)
  Œõ-Discrete (lam a)   (lam b)   = decRec
    (Œª p ‚Üí yes (cong lam p))
    (Œª ne ‚Üí no (contra lama‚â°lamb-implies-a‚â°b ne))
    (Œõ-Discrete a b)
  Œõ-Discrete (lam a)   (app g b) = no ¬¨lam‚â°app
  Œõ-Discrete (app f a) (var y)   = no Œª p ‚Üí ¬¨var‚â°app (sym p)
  Œõ-Discrete (app f a) (lam b)   = no Œª p ‚Üí ¬¨lam‚â°app (sym p)
  Œõ-Discrete (app f a) (app g b) = decRec
    (Œª p ‚Üí decRec
      (Œª q ‚Üí yes (cong‚ÇÇ app p q))
      (Œª ne ‚Üí no (contra appfa‚â°appgb-implies-a‚â°b ne))
      (Œõ-Discrete a b))
    (Œª ne ‚Üí no (contra appfa‚â°appgb-implies-f‚â°g ne))
      (Œõ-Discrete f g)

  isSet-Œõ : isSet Œõ
  isSet-Œõ = Discrete‚ÜíisSet Œõ-Discrete

  Œõ/ : Set
  Œõ/ = Œõ / Œõ‚â°

  Œõt‚ÇÅ : Œõ/
  Œõt‚ÇÅ = [ app (lam (var zero)) (var zero) ]

  Œõ/-example : Œõt‚ÇÅ ‚â° [ var zero ]
  Œõ/-example = eq/ _ _ (Œõ‚â°beta (var zero) (var zero))


{--
-- Attempt at using the quotient type recursor but we run into the same issue.
app/-with-rec : Œõ/ ‚Üí Œõ/ ‚Üí Œõ/
app/-with-rec = set-quot-rec (Œª f ‚Üí set-quot-rec (Œª a ‚Üí [ app f a ]) (foo f)) bar
 where
  foo : (f a b : Œõ) ‚Üí Œõ‚â° a b ‚Üí [ app f a ] ‚â° [ app f b ]
  foo f a b r = eq/ (app f a) (app f b) (Œõ‚â°app (Œõ‚â°refl f) r)

  bar : (f g : Œõ) ‚Üí Œõ‚â° f g ‚Üí set-quot-rec (Œª a ‚Üí [ app f a ]) (foo f) ‚â° set-quot-rec (Œª a ‚Üí [ app g a ]) (foo g)
  bar f g r = funExt (
   quot-elim
    (Œª a ‚Üí eq/ (app f a) (app g a) (Œõ‚â°app r (Œõ‚â°refl a)))
    (Œª a b r i j ‚Üí {!!} ))
    -- i0,j0 it should be [ app f a ]
    -- i0,j1 it should be [ app g a ]
    -- i1,j0 it should be [ app f b ]
    -- i1,j1 it should be [ app g b ]
--}

  isSet-Œõ/ : isSet Œõ/
  isSet-Œõ/ = squash/

  app/ : Œõ/ ‚Üí Œõ/ ‚Üí Œõ/
  app/ f a =
    rec2 squash/
         (Œª f a ‚Üí [ app f a ])
         (Œª f g a r ‚Üí eq/ (app f a) (app g a) (Œõ‚â°app r (Œõ‚â°refl a)))
         (Œª f a b r ‚Üí eq/ (app f a) (app f b) (Œõ‚â°app (Œõ‚â°refl f) r))
         f a

  open Total

  PCA-Œõ : PCA(0‚Ñì)
  PCA-Œõ = pca Œõ/ isSet-Œõ/ app/

  sub/ : Œõ/ ‚Üí Œõ ‚Üí Œõ/
  sub/ a f =
    set-quot-elim
      {A = Œõ}
      {R = Œõ‚â°}
      {P = Œª _ ‚Üí Œõ/}
      (Œª _ ‚Üí isSet-Œõ/)
      (Œª b ‚Üí [ sub b f ])
      (Œª b c r ‚Üí eq/ (sub b f) (sub c f) (Œõ‚â°-gsub‚ÇÅ predIf‚â§ 0 f b c r))
      a

  Comb-Œõ : Comb{{PCA-Œõ}}
  Comb-Œõ = comb [ K ] [ S ] Kcond Scond
    where
    K : Œõ
    K = lam (lam (var 1))

    S : Œõ
    S = lam (lam (lam (app (app (var 2) (var 0)) (app (var 1) (var 0)))))

    Kcond : (a b : Œõ/) ‚Üí app/ (app/ [ K ] a) b ‚â° a
    Kcond a b =
      trans (cong {x = app/ [ K ] a} {y = sub/ a (lam (var 1))}
                  (Œª x ‚Üí app/ x b)
                  {!!})
            {!!}
 {--app/ [ K ] a ,
      refl ,
      Œª b ‚Üí cong just {!!}--}

 {--set-quot-elim
      {P = Œª a ‚Üí Œ£ (PCA.|U| PCA-Œõ)
            (Œª ka ‚Üí ((PCA-Œõ PCA.¬∑ [ K ]) a ‚â° just ka) √ó ((b : PCA.|U| PCA-Œõ) ‚Üí (PCA-Œõ PCA.¬∑ ka) b ‚â° just a))}
      (Œª b ‚Üí isSetŒ£ squash/
       (Œª c ‚Üí isOfHLevelProd 2
        (isOfHLevelMaybe 1 (isSet‚ÜíisGroupoid isSet-Œõ/) _ _)
         (isSetŒ† Œª d ‚Üí isOfHLevelMaybe 1 (isSet‚ÜíisGroupoid isSet-Œõ/) (just _) (just _))))
      (Œª b ‚Üí [ lam (shiftUp 0 b) ] ,
             cong just (eq/ _ _ (Œõ‚â°beta (lam (var 1)) b)) ,
             Œª c ‚Üí cong just (set-quot-elim {A = Œõ} {R = Œõ‚â°} {P = Œª c ‚Üí app/ [ lam (shiftUp 0 b) ] c ‚â° [ b ]}
                                            (Œª x ‚Üí isProp‚ÜíisSet (squash/ (app/ [ lam (shiftUp 0 b) ] x) [ b ]))
                                            (Œª x ‚Üí trans (eq/ _ _ (Œõ‚â°beta (shiftUp 0 b) x)) (cong [_] (gsub-shiftUp 0 x b)))
                                            (Œª x y z ‚Üí {!!})
                                            c))
      (Œª x y r ‚Üí {!!})
      a
--}

    Scond : (a b c : Œõ/)
          ‚Üí app/ (app/ (app/ [ S ] a) b) c
          ‚â° app/ (app/ a c) (app/ b c)
    Scond a b c = {!!}
{--
        app/ [ S ] a ,
        app/ (app/ [ S ] a) b ,
        cong just refl ,
        cong just refl ,
        Œª c ac bc acbc ac‚â° bc‚â° acbc‚â° ‚Üí trans {!!} acbc‚â°
--}

\end{code}

Assemblies

\begin{code}
open Partial
open PCA {{...}}

record Assembly {l l‚Ä≤ k‚Ä≤ : Level} {{A : PCA l}} : Set(lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤) where
  constructor asm
  field
    |X|   : Set(l‚Ä≤)
    _‚ä©_   : |U| ‚Üí |X| ‚Üí Set(k‚Ä≤)
    inh   : (x : |X|) ‚Üí Œ£ |U| (Œª r ‚Üí r ‚ä© x)
    set|  : isSet |X|
    prop‚ä© : (u : |U|) (x : |X|) ‚Üí isProp (u ‚ä© x)

--syntax r ‚ä© [ A ] x = Assembly._‚ä©_ A r x

isPartitioned : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} (a : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}) ‚Üí Set(l ‚äî l‚Ä≤ ‚äî k‚Ä≤)
isPartitioned {l} {l‚Ä≤} {k‚Ä≤} {{p}} (asm |X| _‚ä©_ inh set| prop‚ä©) =
  (x : |X|) (t : |U|) ‚Üí t ‚ä© x ‚Üí t ‚â° fst (inh x)

morphismCond : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} (X Y : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}})
               (f : Assembly.|X| X ‚Üí Assembly.|X| Y)
             ‚Üí Set(l ‚äî l‚Ä≤ ‚äî k‚Ä≤)
morphismCond {l} {l‚Ä≤} {k‚Ä≤} {{p}} X Y f =
  Œ£ |U| (Œª a
  ‚Üí (x : Assembly.|X| X) (b : |U|)
  ‚Üí Assembly._‚ä©_ X b x
  ‚Üí ‚à• Œ£ |U| (Œª c ‚Üí Œ£ (a ¬∑ b ‚âà c) Œª _ ‚Üí Assembly._‚ä©_ Y c (f x)) ‚à•‚ÇÅ )

‚à•morphismCond‚à• : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} (X Y : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}})
                 (f : Assembly.|X| X ‚Üí Assembly.|X| Y)
               ‚Üí Set(l ‚äî l‚Ä≤ ‚äî k‚Ä≤)
‚à•morphismCond‚à• {l} {l‚Ä≤} {k‚Ä≤} {{p}} X Y f =
  ‚à• morphismCond X Y f ‚à•‚ÇÅ

record morphism {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} (X Y : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}) : Set(l ‚äî l‚Ä≤ ‚äî k‚Ä≤) where
  constructor morph
  field
    f    : Assembly.|X| X ‚Üí Assembly.|X| Y
--    a    : |U| -- truncate a & combine with cond as an ‚àÉ
    cond : ‚à•morphismCond‚à• X Y f

‚à•morphismCond‚à•-comp : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
                      {x y z : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}}
                      (f‚ÇÅ : Assembly.|X| x ‚Üí Assembly.|X| y)
                      (f‚ÇÇ : Assembly.|X| y ‚Üí Assembly.|X| z)
                      (cond‚ÇÅ : ‚à•morphismCond‚à• x y f‚ÇÅ)
                      (cond‚ÇÇ : ‚à•morphismCond‚à• y z f‚ÇÇ)
                    ‚Üí ‚à•morphismCond‚à• x z (Œª u ‚Üí f‚ÇÇ (f‚ÇÅ u))
‚à•morphismCond‚à•-comp {l} {l‚Ä≤} {k‚Ä≤} {{p}} {{c}} {x} {y} {z} f‚ÇÅ f‚ÇÇ cond‚ÇÅ cond‚ÇÇ =
  map2 cond‚Ä≤ cond‚ÇÅ cond‚ÇÇ
  where
  cond‚Ä≤ : morphismCond x y f‚ÇÅ ‚Üí morphismCond y z f‚ÇÇ ‚Üí morphismCond x z (Œª u ‚Üí f‚ÇÇ (f‚ÇÅ u))
  cond‚Ä≤ (a‚ÇÅ , cd‚ÇÅ) (a‚ÇÇ , cd‚ÇÇ) = Cc a‚ÇÇ a‚ÇÅ , cond‚Ä≥
    where
    cond‚Ä≥ : (u : Assembly.|X| x) (b : |U|)
          ‚Üí Assembly._‚ä©_ x b u
          ‚Üí ‚à• Œ£ |U| (Œª c‚ÇÅ ‚Üí Œ£ ((Cc a‚ÇÇ a‚ÇÅ) ¬∑ b ‚âà c‚ÇÅ) Œª _ ‚Üí Assembly._‚ä©_ z c‚ÇÅ (f‚ÇÇ (f‚ÇÅ u))) ‚à•‚ÇÅ
    cond‚Ä≥ u b b‚ä©u =
      rec-prop-trunc
        squash‚ÇÅ
        (Œª (c‚ÇÅ , c‚ÇÅ‚â° , ‚ä©c‚ÇÅ) ‚Üí
          map-prop-trunc
            (Œª (c‚ÇÇ , c‚ÇÇ‚â° , ‚ä©c‚ÇÇ) ‚Üí c‚ÇÇ , Cc-eqn a‚ÇÇ a‚ÇÅ b c‚ÇÅ c‚ÇÇ c‚ÇÅ‚â° c‚ÇÇ‚â° , ‚ä©c‚ÇÇ)
            (cd‚ÇÇ (f‚ÇÅ u) c‚ÇÅ ‚ä©c‚ÇÅ))
        (cd‚ÇÅ u b b‚ä©u)

morphism-comp : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
                {x y z : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}}
              ‚Üí morphism x y ‚Üí morphism y z ‚Üí morphism x z
morphism-comp {l} {l‚Ä≤} {k‚Ä≤} {{p}} {{c}} {x} {y} {z} (morph f‚ÇÅ cond‚ÇÅ) (morph f‚ÇÇ cond‚ÇÇ) =
  morph (Œª u ‚Üí f‚ÇÇ (f‚ÇÅ u)) (‚à•morphismCond‚à•-comp {{p}} {{c}} {x} {y} {z} f‚ÇÅ f‚ÇÇ cond‚ÇÅ cond‚ÇÇ)

‚à•morphismCond‚à•-id : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
                    {X : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}}
                  ‚Üí ‚à•morphismCond‚à• X X (Œª x ‚Üí x)
‚à•morphismCond‚à•-id {{p}} {{c}} {X} = ‚à£ Ic , cond‚Ä≤ ‚à£‚ÇÅ
  where
  cond‚Ä≤ : (x : Assembly.|X| X) (b : |U|)
        ‚Üí Assembly._‚ä©_ X b x
        ‚Üí ‚à• Œ£ |U| (Œª c‚ÇÅ ‚Üí Œ£ (Ic ¬∑ b ‚âà c‚ÇÅ) Œª _ ‚Üí Assembly._‚ä©_ X c‚ÇÅ x) ‚à•‚ÇÅ
  cond‚Ä≤ x b b‚ä©x = ‚à£ b , app-Ic b , b‚ä©x ‚à£‚ÇÅ

Asm-id : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
         {X : Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}}
       ‚Üí morphism X X
Asm-id {{p}} {{c}} {X} =
  morph (Œª x ‚Üí x) (‚à•morphismCond‚à•-id {{p}} {{c}} {X})

Asm-*IdL : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
           {x y : Assembly {l} {l‚Ä≤} {k‚Ä≤}} (f : morphism x y)
         ‚Üí morphism-comp Asm-id f ‚â° f
Asm-*IdL {l} {l‚Ä≤} {k‚Ä≤} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ {x} {y} (morph f {--a--} cond) =
  cong‚ÇÇ morph
        (funExt (Œª x ‚Üí refl))
        (squash‚ÇÅ _ _)
-- (‚à•morphismCond‚à•-comp {{p}} {{c}} {x} {x} {y} (Œª x ‚Üí x) f (‚à•morphismCond‚à•-id {{p}} {{c}} {x}) cond)
--                 cond)

Asm-*IdR : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
           {x y : Assembly {l} {l‚Ä≤} {k‚Ä≤}} (f : morphism x y)
         ‚Üí morphism-comp f Asm-id ‚â° f
Asm-*IdR {l} {l‚Ä≤} {k‚Ä≤} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ {x} {y} (morph f cond) =
  cong‚ÇÇ morph
        (funExt (Œª x ‚Üí refl))
        (squash‚ÇÅ _ _)
-- (‚à•morphismCond‚à•-comp {{p}} {{c}} {x} {y} {y} f (Œª x ‚Üí x) cond (‚à•morphismCond‚à•-id {{p}} {{c}} {y}))
--                 cond)

Asm-*Assoc : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
             {x y z w : Assembly {l} {l‚Ä≤} {k‚Ä≤}}
             (f : morphism x y) (g : morphism y z) (h : morphism z w)
           ‚Üí morphism-comp (morphism-comp f g) h
           ‚â° morphism-comp f (morphism-comp g h)
Asm-*Assoc {l} {l‚Ä≤} {k‚Ä≤} {{p}} {{c}} {x} {y} {z} {w} f g h =
  cong‚ÇÇ morph
        (funExt (Œª u ‚Üí refl))
        (squash‚ÇÅ _ _)

Asm-isSetHom : {l l‚Ä≤ k‚Ä≤ : Level} {{p : PCA l}} {{c : Comb {l} {{p}}}}
               {x y : Assembly {l} {l‚Ä≤} {k‚Ä≤}}
             ‚Üí isSet (morphism x y)
Asm-isSetHom {l} {l‚Ä≤} {k‚Ä≤} ‚¶É p ‚¶Ñ ‚¶É c ‚¶Ñ {x} {y} =
  isSetRetract
   {B = Œ£ (Assembly.|X| x ‚Üí Assembly.|X| y) (Œª f ‚Üí ‚à•morphismCond‚à• x y f)}
   (Œª (morph f c) ‚Üí f , c)
   (Œª (f , c) ‚Üí morph f c)
   (Œª (morph f c) ‚Üí refl)
   (isSetŒ£ (isSet‚Üí (Assembly.set| y))
           (Œª f ‚Üí isProp‚ÜíisSet  squash‚ÇÅ))

Asm : (l l‚Ä≤ k‚Ä≤ : Level) {{p : PCA l}} {{c : Comb {l} {{p}}}}
    ‚Üí Category (lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤) (l ‚äî l‚Ä≤ ‚äî k‚Ä≤)
Asm l l‚Ä≤ k‚Ä≤ {{p}} {{c}} =
  record
  { ob       = Assembly {l} {l‚Ä≤} {k‚Ä≤} {{p}}
  ; Hom[_,_] = morphism {l} {l‚Ä≤} {k‚Ä≤} {{p}}
  ; id       = Asm-id
  ; _‚ãÜ_      = morphism-comp
  ; ‚ãÜIdL     = Asm-*IdL
  ; ‚ãÜIdR     = Asm-*IdR
  ; ‚ãÜAssoc   = Asm-*Assoc
  ; isSetHom = Asm-isSetHom
  }

\end{code}

CwFs

\begin{code}

open Contravariant

record CwF {l k m n : Level} : Set(lsuc l ‚äî lsuc k ‚äî lsuc m ‚äî lsuc n) where
  constructor cwf

  open Functor

  field
    C  : Category l k
    o  : Terminal C
    Ty : Presheaf C m
    Tm : Presheaf (‚à´·¥æ Ty) n

  open Category C

  field
    _‚®æ_ : (Œì : ob)
          (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
        ‚Üí ob

    p‚ü®_‚ü© : {Œì : ob}
           (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
         ‚Üí Hom[ Œì ‚®æ œÉ , Œì ]

    v‚ü®_‚ü© : {Œì : ob}
           (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
         ‚Üí typ (Tm ‚üÖ (Œì ‚®æ œÉ) , (Ty ‚ü™ p‚ü® œÉ ‚ü© ‚ü´) œÉ ‚üÜ)

    [_]‚ü®_,_‚ü© : {Œì Œî : ob}
               (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
               (f : Hom[ Œî , Œì ])
               (M : typ (Tm ‚üÖ Œî , (Ty ‚ü™ f ‚ü´) œÉ ‚üÜ))
             ‚Üí Hom[ Œî , Œì ‚®æ œÉ ]

    comprehension-p : {Œì Œî : ob}
                      (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
                      (f : Hom[ Œî , Œì ])
                      (M : typ (Tm ‚üÖ Œî , (Ty ‚ü™ f ‚ü´) œÉ ‚üÜ))
                    ‚Üí p‚ü® œÉ ‚ü© ‚àò [ œÉ ]‚ü® f , M ‚ü© ‚â° f

    comprehension-v : {Œì Œî : ob}
                      (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
                      (f : Hom[ Œî , Œì ])
                      (M : typ (Tm ‚üÖ Œî , (Ty ‚ü™ f ‚ü´) œÉ ‚üÜ))
                    ‚Üí (Tm ‚ü™ [ œÉ ]‚ü® f , M ‚ü©
                          , cong (Œª h ‚Üí h œÉ)
                             (trans (sym (Ty .F-seq p‚ü® œÉ ‚ü© [ œÉ ]‚ü® f , M ‚ü©))
                                    (cong (Ty ‚ü™_‚ü´) (comprehension-p œÉ f M)))
                          ‚ü´) v‚ü® œÉ ‚ü© ‚â° M

    comprehension-unique : {Œì Œî : ob}
                           (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
                           (f : Hom[ Œî , Œì ])
                           (M : typ (Tm ‚üÖ Œî , (Ty ‚ü™ f ‚ü´) œÉ ‚üÜ))
                           (u : Hom[ Œî , Œì ‚®æ œÉ ])
                           (u-p : p‚ü® œÉ ‚ü© ‚àò u ‚â° f)
                           (u-v : (Tm ‚ü™ u
                                      , cong (Œª h ‚Üí h œÉ)
                                         (trans (sym (Ty .F-seq p‚ü® œÉ ‚ü© u))
                                                (cong (Ty ‚ü™_‚ü´) u-p))
                                      ‚ü´) v‚ü® œÉ ‚ü© ‚â° M)
                          ‚Üí [ œÉ ]‚ü® f , M ‚ü© ‚â° u

  -- Weakening maps

  q‚ü®_,_‚ü© : {Œì Œî : ob}
           (f : Hom[ Œî , Œì ])
           (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
         ‚Üí Hom[ Œî ‚®æ (Ty ‚ü™ f ‚ü´) œÉ , Œì ‚®æ œÉ ]
  q‚ü®_,_‚ü© {Œì} {Œî} f œÉ =
    [ œÉ ]‚ü® f ‚àò p‚ü® (Ty ‚ü™ f ‚ü´) œÉ ‚ü©
         , transport
             (cong
               (Œª g ‚Üí typ (Tm ‚üÖ (Œî ‚®æ (Ty ‚ü™ f ‚ü´) œÉ ) , g œÉ ‚üÜ))
               (sym (Ty .F-seq f p‚ü® (Ty ‚ü™ f ‚ü´) œÉ ‚ü©)))
             v‚ü® (Ty ‚ü™ f ‚ü´) œÉ ‚ü©
         ‚ü©

  -- Terms and sections coincide

  term-to-sec : {Œì : ob} {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
              ‚Üí typ (Tm ‚üÖ Œì , œÉ ‚üÜ)
              ‚Üí Hom[ Œì , Œì ‚®æ œÉ ]
  term-to-sec {Œì} {œÉ} M =
    [ œÉ ]‚ü® id {Œì}
         , transport (cong (Œª f ‚Üí typ (Tm ‚üÖ Œì , f œÉ ‚üÜ)) (sym (Ty .F-id))) M
         ‚ü©

  term-to-sec-is-sec : {Œì : ob} {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
                       (M : typ (Tm ‚üÖ Œì , œÉ ‚üÜ))
                     ‚Üí p‚ü® œÉ ‚ü© ‚àò term-to-sec M ‚â° id
  term-to-sec-is-sec {Œì} {œÉ} M =
    comprehension-p
      œÉ
      id
      (transport (cong (Œª f ‚Üí typ (Tm ‚üÖ Œì , f œÉ ‚üÜ)) (sym (Ty .F-id))) M)

  sec-to-term : {Œì : ob} {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)} (f : Hom[ Œì , Œì ‚®æ œÉ ])
                ‚Üí (f ‚ãÜ p‚ü® œÉ ‚ü© ‚â° id) ‚Üí typ (Tm ‚üÖ Œì , œÉ ‚üÜ)
  sec-to-term = {!!}

  -- TODO: get a term from a section

record supportsŒ†Types {l k m n : Level} (ùìíùîÄùìï : CwF {l} {k} {m} {n})
  : Set(lsuc l ‚äî lsuc k ‚äî lsuc m ‚äî lsuc n) where
  constructor mkŒ†Types

  open Functor
  open CwF ùìíùîÄùìï
  open Category C

  field
    Œ† : {Œì : ob}
        (œÉ : typ (Ty ‚üÖ Œì ‚üÜ))
        (œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ))
      ‚Üí typ (Ty ‚üÖ Œì ‚üÜ)

    ∆õ : {Œì : ob}
        {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
        {œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ)}
        (M : typ (Tm ‚üÖ Œì ‚®æ œÉ , œÑ ‚üÜ))
      ‚Üí typ (Tm ‚üÖ Œì , Œ† œÉ œÑ ‚üÜ)

    app : {Œì : ob}
          {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
          {œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ)}
          (M : typ (Tm ‚üÖ Œì , Œ† œÉ œÑ ‚üÜ))
          (N : typ (Tm ‚üÖ Œì , œÉ ‚üÜ))
        ‚Üí typ (Tm ‚üÖ Œì , (Ty ‚ü™ term-to-sec N ‚ü´) œÑ ‚üÜ)

    Œ≤‚â° : {Œì : ob}
         {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
         {œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ)}
         (M : typ (Tm ‚üÖ Œì ‚®æ œÉ , œÑ ‚üÜ))
         (N : typ (Tm ‚üÖ Œì , œÉ ‚üÜ))
       ‚Üí app (∆õ M) N ‚â° (Tm ‚ü™ term-to-sec N , refl ‚ü´) M

    Œ†sub : {Œì Œî : ob}
           {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
           {œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ)}
           (f : Hom[ Œî , Œì ])
         ‚Üí (Ty ‚ü™ f ‚ü´) (Œ† œÉ œÑ) ‚â° Œ† ((Ty ‚ü™ f ‚ü´) œÉ) ((Ty ‚ü™ q‚ü® f , œÉ ‚ü© ‚ü´) œÑ)

    ∆õsub : {Œì Œî : ob}
           {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
           {œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ)}
           (M : typ (Tm ‚üÖ Œì ‚®æ œÉ , œÑ ‚üÜ))
           (f : Hom[ Œî , Œì ])
         ‚Üí (Tm ‚ü™ f , Œ†sub f ‚ü´) (∆õ M) ‚â° ∆õ ((Tm ‚ü™ q‚ü® f , œÉ ‚ü© , refl ‚ü´) M)

    appsub : {Œì Œî : ob}
             {œÉ : typ (Ty ‚üÖ Œì ‚üÜ)}
             {œÑ : typ (Ty ‚üÖ Œì ‚®æ œÉ ‚üÜ)}
             (M : typ (Tm ‚üÖ Œì , Œ† œÉ œÑ ‚üÜ))
             (N : typ (Tm ‚üÖ Œì , œÉ ‚üÜ))
             (f : Hom[ Œî , Œì ])
           ‚Üí (Tm ‚ü™ f
                 , ((Ty ‚ü™ f ‚ü´) ((Ty ‚ü™ term-to-sec N ‚ü´) œÑ)
                      ‚â°‚ü® cong (Œª g ‚Üí g œÑ) (sym (Ty .F-seq (term-to-sec N) f)) ‚ü©
                    (Ty ‚ü™ term-to-sec N ‚àò f ‚ü´) œÑ
                      ‚â°‚ü® {!!} ‚ü© -- by some result we need about how term-to-sec commutes with substitutions (probably to do with weakenings giving pullbacks)
                    (Ty ‚ü™ q‚ü® f , œÉ ‚ü© ‚àò term-to-sec ((Tm ‚ü™ f , refl ‚ü´) N) ‚ü´) œÑ
                      ‚â°‚ü® cong (Œª g ‚Üí g œÑ) (Ty .F-seq q‚ü® f , œÉ ‚ü© (term-to-sec ((Tm ‚ü™ f , refl ‚ü´) N))) ‚ü©
                    (Ty ‚ü™ term-to-sec ((Tm ‚ü™ f , refl ‚ü´) N) ‚ü´) ((Ty ‚ü™ q‚ü® f , œÉ ‚ü© ‚ü´) œÑ)
                      ‚àé)
                 ‚ü´ ) (app M N) ‚â°
               app ((Tm ‚ü™ f , Œ†sub f ‚ü´) M) ((Tm ‚ü™ f , refl ‚ü´) N)

-- 1. Prove that assemblies form a CwF
-- 2. Show that CwF form a model of TT (unless we take TT to be the initial CwF)

\end{code}

Example of a CwF

\begin{code}

ùüôAssembly : {l l‚Ä≤ k‚Ä≤ : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          ‚Üí Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ
ùüôAssembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ =
  asm ùüô|X| _ùüô‚ä©_ ùüôinh ùüôsetA ùüôprop‚ä©
  where
  ùüô|X| : Type l‚Ä≤
  ùüô|X| = Lift l‚Ä≤ ‚ä§

  _ùüô‚ä©_ : |U| ‚Üí ùüô|X| ‚Üí Type k‚Ä≤
  _ùüô‚ä©_ p t = Lift k‚Ä≤ ‚ä§

  ùüôinh : (x : ùüô|X|) ‚Üí Œ£ |U| (Œª r ‚Üí r ùüô‚ä© x)
  ùüôinh x = Ic , lift tt

  ùüôsetA : isSet ùüô|X|
  ùüôsetA (lift tt) (lift tt) = Œª x y ‚Üí refl

  ùüôprop‚ä© : (u : |U|) (x : ùüô|X|) ‚Üí isProp (u ùüô‚ä© x)
  ùüôprop‚ä© u x a b = refl

ùüôAssembly-terminal : {l l‚Ä≤ k‚Ä≤ : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
                   ‚Üí isTerminal (Asm l l‚Ä≤ k‚Ä≤) ùüôAssembly
ùüôAssembly-terminal {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ y =
  m , m‚â°
  where
  m : morphism y ùüôAssembly
  m = morph (Œª _ ‚Üí lift tt) ‚à£ Ic , (Œª x b b‚ä©x ‚Üí ‚à£ b , app-Ic b , lift tt ‚à£‚ÇÅ ) ‚à£‚ÇÅ

  m‚â° : (n : morphism y ùüôAssembly) ‚Üí m ‚â° n
  m‚â° (morph n ncond) =
    cong‚ÇÇ morph
          (funExt (Œª x ‚Üí refl))
          (squash‚ÇÅ _ _)

ùüòAssembly : {l l‚Ä≤ k‚Ä≤ : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          ‚Üí Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ
ùüòAssembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ =
  asm ùüò|X| _ùüò‚ä©_ ùüòinh ùüòsetA ùüòprop‚ä©
  where
  ùüò|X| : Type l‚Ä≤
  ùüò|X| = Lift l‚Ä≤ ‚ä•

  _ùüò‚ä©_ : |U| ‚Üí ùüò|X| ‚Üí Type k‚Ä≤
  _ùüò‚ä©_ p t = Lift k‚Ä≤ ‚ä•

  ùüòinh : (x : ùüò|X|) ‚Üí Œ£ |U| (Œª r ‚Üí r ùüò‚ä© x)
  ùüòinh ()

  ùüòsetA : isSet ùüò|X|
  ùüòsetA () y

  ùüòprop‚ä© : (u : |U|) (x : ùüò|X|) ‚Üí isProp (u ùüò‚ä© x)
  ùüòprop‚ä© u () a b

ùüòAssembly-initial : {l l‚Ä≤ k‚Ä≤ : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
                  ‚Üí isInitial (Asm l l‚Ä≤ k‚Ä≤) ùüòAssembly
ùüòAssembly-initial {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ y =
  m , m‚â°
  where
  f : Assembly.|X| (ùüòAssembly {l} {l‚Ä≤} {k‚Ä≤}) ‚Üí Assembly.|X| y
  f ()

  fcond : ‚à•morphismCond‚à• ùüòAssembly y f
  fcond = ‚à£ Ic , (Œª x b ()) ‚à£‚ÇÅ

  m : morphism ùüòAssembly y
  m = morph f fcond

  m‚â° : (n : morphism ùüòAssembly y) ‚Üí m ‚â° n
  m‚â° (morph n ncond) = c ncond
    -- why not the more direct proof?
    --   cong‚ÇÇ morph (funExt Œª ()) (squash‚ÇÅ _ _)
    where
    n‚â°f : n ‚â° f
    n‚â°f = funExt (Œª ())

    c : (ncond : ‚à•morphismCond‚à• ùüòAssembly y n) ‚Üí  m ‚â° morph n ncond
    c = subst
         (Œª n ‚Üí (ncond : ‚à•morphismCond‚à• ùüòAssembly y n) ‚Üí m ‚â° morph n ncond)
         (sym n‚â°f)
         (Œª ncond ‚Üí cong‚ÇÇ morph refl (squash‚ÇÅ _ _))

Discrete-Lift : {l k : Level} {A : Set l} ‚Üí Discrete A ‚Üí Discrete (Lift k A)
Discrete-Lift {l} {k} {A} d (lift x) (lift y) with d x y
... | yes p = yes (cong lift p)
... | no p = no (Œª q ‚Üí p (cong lower q))

‚ÑïAssembly : {l l‚Ä≤ : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
          ‚Üí Assembly {l} {l‚Ä≤} {l} ‚¶É ùï° ‚¶Ñ
‚ÑïAssembly {l} {l‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ =
  asm ‚Ñï|X| _‚Ñï‚ä©_ ‚Ñïinh ‚ÑïsetA ‚Ñïprop‚ä©
  where
  ‚Ñï|X| : Type l‚Ä≤
  ‚Ñï|X| = Lift l‚Ä≤ ‚Ñï

  _‚Ñï‚ä©_ : |U| ‚Üí ‚Ñï|X| ‚Üí Type l
  _‚Ñï‚ä©_ p (lift n) = p ‚â° Nc n --isNc n p

  ‚Ñïinh : (x : ‚Ñï|X|) ‚Üí Œ£ |U| (Œª r ‚Üí r ‚Ñï‚ä© x)
  ‚Ñïinh (lift n) = Nc n , refl --isn

  ‚ÑïsetA : isSet ‚Ñï|X|
  ‚ÑïsetA = Discrete‚ÜíisSet (Discrete-Lift discrete‚Ñï)

  ‚Ñïprop‚ä© : (u : |U|) (n : ‚Ñï|X|) ‚Üí isProp (u ‚Ñï‚ä© n)
  ‚Ñïprop‚ä© u (lift n) x y = set|U| u (Nc n) x y

setMorph : {l : Level} (X Y : Set(l)) (xset : isSet X) (yset : isSet Y)
           (f : X ‚Üí Y)
         ‚Üí Category.Hom[_,_] (SET l) (X , xset) (Y , yset)
setMorph {l} X Y xest yset f = f

AsmCwF : {l l‚Ä≤ k‚Ä≤ n : Level}
         {{ùï° : PCA l}}
         {{ùïî : Comb {l} {{ùï°}}}}
       ‚Üí CwF {lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤} {l ‚äî l‚Ä≤ ‚äî k‚Ä≤} {lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤} {n}
AsmCwF {l} {l‚Ä≤} {k‚Ä≤} {n} {{ùï°}} {{ùïî}} =
  cwf (Asm l l‚Ä≤ k‚Ä≤ {{ùï°}} {{ùïî}})
      (ùüôAssembly , ùüôAssembly-terminal)
      Ty {!Tm!} {!!} {!!} {!!} {!!} {!!} {!!} {!!}
  where
  open Category (Asm l l‚Ä≤ k‚Ä≤)

  Ty : Presheaf (Asm l l‚Ä≤ k‚Ä≤) (lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤)
  Ty = record { F-ob  = Œª Œì ‚Üí (Assembly.|X| Œì ‚Üí ‚à• Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚à•‚ÇÇ) ,
                               isSet‚Üí squash‚ÇÇ ;
                F-hom = hom ;
                F-id  = Œª {x} ‚Üí refl ;
                F-seq = seq }
     where
     hom : {x y : Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ}
                ‚Üí morphism y x
                ‚Üí (Assembly.|X| x ‚Üí ‚à• Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚à•‚ÇÇ)
                ‚Üí (Assembly.|X| y ‚Üí ‚à• Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚à•‚ÇÇ)
     hom {Œì} {Œî} c f d = f (morphism.f c d)

     seq : {x y z : Assembly {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ} (f : morphism y z) (g : morphism x y)
         ‚Üí hom (morphism-comp g f) ‚â° Œª x ‚Üí (hom g) ((hom f) x)
     seq f g = refl

  Tm : Presheaf (‚à´·¥æ Ty) {!!}
  Tm = record { F-ob  = Œª ŒìU@(Œì , U) ‚Üí ‚à• Œ£ ((Œ≥ : Assembly.|X| Œì) ‚Üí {!Assembly.|X| (U Œ≥)!}) {!!} ‚à•‚ÇÇ ,
                                       squash‚ÇÇ ; --rec‚à•‚ÇÇ {!!} {!!} {!!} ;
                                       -- ‚à• Œ£ ((Œ≥ : Assembly.|X| Œì) ‚Üí {!Assembly.|X| (U Œ≥)!}) {!!} ‚à•‚ÇÇ ,
                                       -- squash‚ÇÇ ; -- rec‚à•‚ÇÇ {!!} {!!} {!!}
                                       -- This doesn't quite work because Assembly is truncated in Ty
                F-hom = {!!} ;
                F-id  = {!!} ;
                F-seq = {!!} }

CExt : {l l‚Ä≤ k‚Ä≤ : Level}
       ‚¶É ùï° : PCA l ‚¶Ñ
       ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
       (Œì : Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
       (U : Assembly.|X| Œì ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
     ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ
CExt {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ Œì U =
  asm C|X| _C‚ä©_ Cinh Cset| Cprop‚ä©
  where
  C|X| : Set(l‚Ä≤)
  C|X| = Œ£ (Assembly.|X| Œì) (Œª Œ≥ ‚Üí Assembly.|X| (U Œ≥))

  _C‚ä©_ : |U| ‚Üí C|X| ‚Üí Set(l ‚äî k‚Ä≤)
  _C‚ä©_ p (Œ≥ , t) =
    ‚à• Œ£ |U| (Œª a ‚Üí
      Œ£ |U| (Œª b ‚Üí
      Œ£ (œÄ‚ÇÅ ¬∑ p ‚âà a) (Œª a‚â° ‚Üí
      Œ£ (œÄ‚ÇÇ ¬∑ p ‚âà b) (Œª b‚â° ‚Üí
      Œ£ (Assembly._‚ä©_ Œì a Œ≥) (Œª ‚ä©a ‚Üí
      Assembly._‚ä©_ (U Œ≥) b t))))) ‚à•‚ÇÅ

  Cinh : (x : C|X|) ‚Üí Œ£ |U| (Œª r ‚Üí r C‚ä© x)
  Cinh (Œ≥ , t) =
    Pc¬∑¬∑ (fst (Assembly.inh Œì Œ≥)) (fst (Assembly.inh (U Œ≥) t)) ,
    ‚à£ fst (Assembly.inh Œì Œ≥) ,
      fst (Assembly.inh (U Œ≥) t) ,
      œÄ‚ÇÅ-pair (fst (Assembly.inh Œì Œ≥)) (fst (Assembly.inh (U Œ≥) t)) ,
      œÄ‚ÇÇ-pair (fst (Assembly.inh Œì Œ≥)) (fst (Assembly.inh (U Œ≥) t)) ,
      snd (Assembly.inh Œì Œ≥) ,
      snd (Assembly.inh (U Œ≥) t) ‚à£‚ÇÅ

  Cset| : isSet C|X|
  Cset| = isSetŒ£ (Assembly.set| Œì) (Œª Œ≥ ‚Üí Assembly.set| (U Œ≥))

  Cprop‚ä© : (u : |U|) (x : C|X|) ‚Üí isProp (u C‚ä© x)
  Cprop‚ä© u x = squash‚ÇÅ

CExt-restriction : {l l‚Ä≤ k‚Ä≤ : Level}
                   ‚¶É ùï° : PCA l ‚¶Ñ
                   ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
                   (Œì : Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
                   (U : Assembly.|X| Œì ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
                 ‚Üí morphism (CExt {l} {l‚Ä≤} {k‚Ä≤} Œì U) Œì
CExt-restriction {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ Œì U =
  morph fst ‚à£ œÄ‚ÇÅ , (Œª x@(Œ≥ , t) b b‚ä©x ‚Üí map-prop-trunc (Œª (a , b , a‚â° , b‚â° , ‚ä©a , ‚ä©b) ‚Üí a , a‚â° , ‚ä©a) b‚ä©x) ‚à£‚ÇÅ

Creindex : {l l‚Ä≤ k‚Ä≤ : Level}
           ‚¶É ùï° : PCA l ‚¶Ñ
           ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
           (Œì Œî : Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
           (m : morphism {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ Œî Œì)
           (U : Assembly.|X| Œì ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
         ‚Üí Assembly.|X| Œî ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ
Creindex {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ Œì Œî m U Œ¥ = U (morphism.f m Œ¥)

-- Œª b ‚Üí ‚ü® a (œÄ‚ÇÅ b) , œÄ‚ÇÇ b ‚ü©
CœÄ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ ‚Üí |U| ‚Üí |U|
CœÄ {l} ‚¶É ùï° ‚¶Ñ ‚¶É c ‚¶Ñ a = S¬∑¬∑ (S¬∑¬∑ (K¬∑ Pc) (S¬∑¬∑ (K¬∑ a) œÄ‚ÇÅ)) œÄ‚ÇÇ

app-CœÄ : {l : Level} ‚¶É ùï° : PCA l ‚¶Ñ ‚¶É c : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
         (a b b‚ÇÅ b‚ÇÇ c : |U|)
       ‚Üí œÄ‚ÇÅ ¬∑ b ‚âà b‚ÇÅ
       ‚Üí œÄ‚ÇÇ ¬∑ b ‚âà b‚ÇÇ
       ‚Üí a ¬∑ b‚ÇÅ ‚âà c
       ‚Üí (CœÄ a) ¬∑ b ‚âà Pc¬∑¬∑ c b‚ÇÇ
app-CœÄ {l} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ a b b‚ÇÅ b‚ÇÇ c b‚ÇÅ‚â° b‚ÇÇ‚â° c‚â° =
  app-S¬∑¬∑
    (S¬∑¬∑ (K¬∑ Pc) (S¬∑¬∑ (K¬∑ a) œÄ‚ÇÅ)) œÄ‚ÇÇ b (Pc¬∑ c) b‚ÇÇ (Pc¬∑¬∑ c b‚ÇÇ)
    (app-S¬∑¬∑
      (K¬∑ Pc) (S¬∑¬∑ (K¬∑ a) œÄ‚ÇÅ) b Pc c (Pc¬∑ c)
      (app-K¬∑ Pc b)
      (app-S¬∑¬∑
        (K¬∑ a) œÄ‚ÇÅ b a b‚ÇÅ c
        (app-K¬∑ a b)
        b‚ÇÅ‚â° c‚â°)
      (app-Pc c))
    b‚ÇÇ‚â°
    (app-Pc¬∑ c b‚ÇÇ)

Cq : {l l‚Ä≤ k‚Ä≤ : Level}
     ‚¶É ùï° : PCA l ‚¶Ñ
     ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
     (Œì Œî : Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
     (f : morphism {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ Œî Œì)
     (A : Assembly.|X| Œì ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ)
   ‚Üí morphism {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ (CExt {l} {l‚Ä≤} {k‚Ä≤} Œî (Creindex {l} {l‚Ä≤} {k‚Ä≤} Œì Œî f A))
                                      (CExt {l} {l‚Ä≤} {k‚Ä≤} Œì A)
Cq {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ Œì Œî (morph f cond) A =
  morph f‚Ä≤ cond‚Ä≤
  where
  f‚Ä≤ : Assembly.|X| (CExt {l} {l‚Ä≤} {k‚Ä≤} Œî (Creindex {l} {l‚Ä≤} {k‚Ä≤} Œì Œî (morph f cond) A))
     ‚Üí Assembly.|X| (CExt {l} {l‚Ä≤} {k‚Ä≤} Œì A)
  f‚Ä≤ (Œ¥ , u) = f Œ¥ , u

  cond‚ÇÄ : morphismCond Œî Œì f
        ‚Üí morphismCond (CExt {l} {l‚Ä≤} {k‚Ä≤} Œî (Creindex {l} {l‚Ä≤} {k‚Ä≤} Œì Œî (morph f cond) A))
                       (CExt {l} {l‚Ä≤} {k‚Ä≤} Œì A)
                       f‚Ä≤
  cond‚ÇÄ (a , c) =
    CœÄ a ,
    Œª x@(Œ¥ , u) b b‚ä©x ‚Üí
      rec-prop-trunc
        squash‚ÇÅ
        (Œª b‚ä©x‚ÇÅ@(a‚ÇÅ , b‚ÇÅ , a‚â° , b‚â° , ‚ä©a , ‚ä©b) ‚Üí
          map-prop-trunc
            (Œª (c‚ÇÅ , c‚ÇÅ‚â° , ‚ä©c‚ÇÅ) ‚Üí
              Pc¬∑¬∑ c‚ÇÅ b‚ÇÅ  ,
              app-CœÄ a b a‚ÇÅ b‚ÇÅ c‚ÇÅ a‚â° b‚â° c‚ÇÅ‚â° ,
              ‚à£ c‚ÇÅ , b‚ÇÅ , œÄ‚ÇÅ-pair c‚ÇÅ b‚ÇÅ , œÄ‚ÇÇ-pair c‚ÇÅ b‚ÇÅ , ‚ä©c‚ÇÅ , ‚ä©b ‚à£‚ÇÅ)
            (c Œ¥ a‚ÇÅ ‚ä©a))
        b‚ä©x

  cond‚Ä≤ : ‚à•morphismCond‚à• (CExt {l} {l‚Ä≤} {k‚Ä≤} Œî (Creindex {l} {l‚Ä≤} {k‚Ä≤} Œì Œî (morph f cond) A))
                         (CExt {l} {l‚Ä≤} {k‚Ä≤} Œì A)
                         f‚Ä≤
  cond‚Ä≤ = map-prop-trunc cond‚ÇÄ cond

AsmType : {l l‚Ä≤ k‚Ä≤ : Level}
          ‚¶É ùï° : PCA l ‚¶Ñ
          ‚¶É ùïî : Comb {l} ‚¶É ùï° ‚¶Ñ ‚¶Ñ
        ‚Üí isTypeCategory {lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤} {l ‚äî l‚Ä≤ ‚äî k‚Ä≤} {lsuc l ‚äî lsuc l‚Ä≤ ‚äî lsuc k‚Ä≤}
                         (Asm l l‚Ä≤ (l ‚äî k‚Ä≤) ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ)
AsmType {l} {l‚Ä≤} {k‚Ä≤} ‚¶É ùï° ‚¶Ñ ‚¶É ùïî ‚¶Ñ =
  record
   { Ty[_]   = Œª Œì ‚Üí Assembly.|X| Œì ‚Üí Assembly {l} {l‚Ä≤} {l ‚äî k‚Ä≤} ‚¶É ùï° ‚¶Ñ
   ; cext    = Œª Œì U ‚Üí CExt {l} {l‚Ä≤} {k‚Ä≤} Œì U , CExt-restriction {l} {l‚Ä≤} {k‚Ä≤} Œì U
   ; reindex = Œª {Œì‚Ä≤} {Œì} m U ‚Üí Creindex {l} {l‚Ä≤} {k‚Ä≤} Œì Œì‚Ä≤ m U
   ; q‚ü®_,_‚ü©  = Œª {Œì‚Ä≤} {Œì} f A ‚Üí Cq {l} {l‚Ä≤} {k‚Ä≤} Œì Œì‚Ä≤ f A
   ; sq      = {!!}
   ; isPB    = {!!}
   }


\end{code}
