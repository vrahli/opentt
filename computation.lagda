\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import calculus
open import world
open import choice


module computation {L : Level} (W : PossibleWorlds {L}) (C : Choice W) where
open import worldDef(W)
open import choiceDef(W)(C)
\end{code}


We now define part of OpenTT's syntax and operational semantics.


\begin{code}
step : ‚àÄ (T : Term) (w : ùïé¬∑) ‚Üí Maybe Term
-- VAR
step (VAR v) w = nothing
-- NAT
step NAT w = just NAT
-- QNAT
step QNAT w = just QNAT
-- LT
step (LT a b) w = just (LT a b)
-- QLT
step (QLT a b) w = just (QLT a b)
-- NUM
step (NUM n) w = just (NUM n)
-- PI
step (PI a b) w = just (PI a b)
-- LAMBDA
step (LAMBDA t) w = just (LAMBDA t)
-- APPLY
-- access the n^th choice in the history of choices made for "name"
step (APPLY (CS name) (NUM n)) w = getChoice¬∑ n name w
step (APPLY (CS name) t) w with step t w
... | just u = just (APPLY (CS name) u)
... | nothing = nothing
step (APPLY (LAMBDA t) u) w = just (sub u t)
step (APPLY f a) w with step f w
... | just g = just (APPLY g a)
... | nothing = nothing
-- SUM
step (SUM a b) w = just (SUM a b)
-- PAIR
step (PAIR a b) w = just (PAIR a b)
-- SPREAD
step (SPREAD a b) w = nothing -- TODO
-- SET
step (SET a b) w = just (SET a b)
-- UNION
step (UNION a b) w = just (UNION a b)
-- INL
step (INL a) w = just (INL a)
-- INR
step (INR a) w = just (INR a)
-- DECIDE
step (DECIDE a b c) w = nothing -- TODO
-- EQ
step (EQ a b c) w = just (EQ a b c)
-- AX
step AX w = just AX
-- FREE
step FREE w = just FREE
-- CS
step (CS name) w = just (CS name)
-- TSQUASH
step (TSQUASH a) w = just (TSQUASH a)
-- DUM
step (DUM a) w = just (DUM a)
-- FFDEFS
step (FFDEFS a b) w = just (FFDEFS a b)
-- UNIV
step (UNIV u) w = just (UNIV u)
-- LIFT
step (LIFT t) w = just (LIFT t)
-- LOWER
step (LOWER t) w = just (LOWER t)
-- LOWER
step (SHRINK t) w = just (SHRINK t)

steps : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí Term
steps 0 t w = t
steps (suc n) t w with step t w
... | just u = steps n u w
... | nothing = t

_‚áì_at_ : ‚àÄ (T T' : Term) (w : ùïé¬∑) ‚Üí Set
T ‚áì T' at w = Œ£ ‚Ñï (Œª n ‚Üí steps n T w ‚â° T')
infix 30 _‚áì_at_


-- T computes to T' in all extensions of w
_‚áõ_at_ : (T T' : Term) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T ‚áõ T' at w = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (T ‚áì T' at w'))
infix 30 _‚áõ_at_


‚áì-refl : (T : Term) (w : ùïé¬∑) ‚Üí T ‚áì T at w
‚áì-refl T w = (0 , refl)

-- values compute to themselves
stepVal : (a : Term) (w : ùïé¬∑) ‚Üí isValue a ‚Üí step a w ‚â° just a
stepVal NAT w v = refl
stepVal QNAT w v = refl
stepVal (LT a b) w v = refl
stepVal (QLT a b) w v = refl
stepVal (NUM x) w v = refl
stepVal (PI a a‚ÇÅ) w v = refl
stepVal (LAMBDA a) w v = refl
stepVal (SUM a a‚ÇÅ) w v = refl
stepVal (PAIR a a‚ÇÅ) w v = refl
stepVal (SET a a‚ÇÅ) w v = refl
stepVal (UNION a a‚ÇÅ) w v = refl
stepVal (INL a) w v = refl
stepVal (INR a) w v = refl
stepVal (EQ a a‚ÇÅ a‚ÇÇ) w v = refl
stepVal AX w v = refl
stepVal FREE w v = refl
stepVal (CS x) w v = refl
stepVal (TSQUASH a) w v = refl
stepVal (DUM a) w v = refl
stepVal (FFDEFS a a‚ÇÅ) w v = refl
stepVal (UNIV x) w v = refl
stepVal (LIFT x) w v = refl
stepVal (LOWER a) w v = refl
stepVal (SHRINK a) w v = refl

stepsVal : (a : Term) (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isValue a ‚Üí steps n a w ‚â° a
stepsVal a w 0 v = refl
stepsVal a w (suc n) v rewrite stepVal a w v = stepsVal a w n v

compVal : (a b : Term) (w : ùïé¬∑) ‚Üí a ‚áì b at w ‚Üí isValue a ‚Üí a ‚â° b
compVal a b w (n , c) v rewrite stepsVal a w n v = c



postulate
  -- Howe's computational equivalence relation
  _‚àº_at_ : (T T' : Term) (w : ùïé¬∑) ‚Üí Set
  -- ‚àº is an equivalence relation
  ‚àº-refl : {a : Term} {w : ùïé¬∑} ‚Üí a ‚àº a at w
  ‚àº-sym : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚àº b at w ‚Üí b ‚àº a at w
  ‚àº-trans : {a b c : Term} {w : ùïé¬∑} ‚Üí a ‚àº b at w ‚Üí b ‚àº c at w ‚Üí a ‚àº c at w
  -- states that the argument does not contain any definition or choice sequence
  nodefs : Term ‚Üí Set
infix 30 _‚àº_at_

-- T computationally equivalent to T' in all extensions of w
_‚âà_at_ : (T T' : Term) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T ‚âà T' at w = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (T ‚àº T' at w'))
infix 30 _‚âà_at_

‚âà-refl : {a : Term} {w : ùïé¬∑} ‚Üí a ‚âà a at w
‚âà-refl {a} {w} w1 e1 = lift ‚àº-refl

‚âà-sym : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚âà b at w ‚Üí b ‚âà a at w
‚âà-sym {a} {b} {w} h w1 e1 = lift (‚àº-sym (lower (h w1 e1)))

‚âà-trans : {a b c : Term} {w : ùïé¬∑} ‚Üí a ‚âà b at w ‚Üí b ‚âà c at w ‚Üí a ‚âà c at w
‚âà-trans {a} {b} {c} {w} h q w1 e1 = lift (‚àº-trans (lower (h w1 e1)) (lower (q w1 e1)))

‚âà-‚àº : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚âà b at w ‚Üí a ‚àº b at w
‚âà-‚àº {a} {b} {w} h = lower (h w (‚äë-refl¬∑ w))


compAllRefl : (T : Term) (w : ùïé¬∑) ‚Üí T ‚áõ T at w
compAllRefl T w =  Œª w' e ‚Üí lift (‚áì-refl T w')

compAllVal : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚áõ b at w ‚Üí isValue a ‚Üí a ‚â° b
compAllVal {a} {b} {w} c i = let c' = c _ (‚äë-refl¬∑ w) in compVal _ _ _ (lower c') i

-- t1 and t2 compute to the same number and stay the same number in all extensions
strongMonEq : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
strongMonEq w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí t1 ‚áõ (NUM n) at w √ó t2 ‚áõ (NUM n) at w)

-- t1 and t2 compute to the same number but that number can change over time
weakMonEq : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
weakMonEq w t1 t2 = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí t1 ‚áì (NUM n) at w' √ó t2 ‚áì (NUM n) at w')))


weak‚Ñï : (w : ùïé¬∑) (t : Term) ‚Üí Set(lsuc(L))
weak‚Ñï w t = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí t ‚áì NUM n at w')))



weak‚ÑïM : (w : ùïé¬∑) (f : ùïé¬∑ ‚Üí Maybe Term) ‚Üí Set(lsuc(L))
weak‚ÑïM w f = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ Term (Œª t ‚Üí f w' ‚â° just t √ó Œ£ ‚Ñï (Œª n ‚Üí t ‚áì NUM n at w'))))


‚áõto-same-CS : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
‚áõto-same-CS w t1 t2 = Œ£ Name (Œª n ‚Üí t1 ‚áõ (CS n) at w √ó t2 ‚áõ (CS n) at w)


<NUM-pair : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set
<NUM-pair w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª m ‚Üí t1 ‚áì (NUM n) at w √ó t2 ‚áì (NUM m) at w √ó n < m))


lift-<NUM-pair : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
lift-<NUM-pair w t1 t2 = Lift {0‚Ñì} (lsuc(L)) (<NUM-pair w t1 t2)


‚áõ-mon : {a b : Term} {w2 w1 : ùïé¬∑}
           ‚Üí w1 ‚äë¬∑ w2
           ‚Üí a ‚áõ b at w1
           ‚Üí a ‚áõ b at w2
‚áõ-mon {a} {b} {w2} {w1} ext c w' e' = c w' (‚äë-trans¬∑ ext e')



maybeStep : (t : Term) (w : ùïé¬∑) ‚Üí Term
maybeStep t w with step t w
... | just u = u
... | nothing = t

stepsR : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí Term
stepsR 0 t w = t
stepsR (suc n) t w = maybeStep (stepsR n t w) w


step‚äé : (t : Term) (w : ùïé¬∑) ‚Üí (Œ£ Term (Œª u ‚Üí step t w ‚â° just u)) ‚äé step t w ‚â° nothing
step‚äé t w with step t w
... | just u = inj‚ÇÅ (u , refl)
... | nothing = inj‚ÇÇ refl

steps‚â° : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí steps (suc n) t w ‚â° maybeStep (steps n t w) w
steps‚â° 0 t w with step t w
... | just u = refl
... | nothing = refl
steps‚â° (suc n) t w with step‚äé t w
... | inj‚ÇÅ (u , p) rewrite p | steps‚â° n u w = refl
... | inj‚ÇÇ p rewrite p | p = refl

steps‚â°stepsR : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí steps n t w ‚â° stepsR n t w
steps‚â°stepsR 0 t w = refl
steps‚â°stepsR (suc n) t w rewrite sym (steps‚â°stepsR n t w) | steps‚â° n t w = refl

step-APPLY-CS : (t : Term) (w : ùïé¬∑) (k : ‚Ñï) (name : Name)
                ‚Üí getChoice¬∑ k name w ‚â° just t
                ‚Üí steps 1 (APPLY (CS name) (NUM k)) w ‚â° t
step-APPLY-CS t w k name gc rewrite gc = refl



step-APPLY-CS-¬¨NUM : (name : Name) (a b : Term) (w : ùïé¬∑)
                     ‚Üí ((n : ‚Ñï) ‚Üí ¬¨ a ‚â° NUM n)
                     ‚Üí step a w ‚â° just b
                     ‚Üí step (APPLY (CS name) a) w ‚â° just (APPLY (CS name) b)
step-APPLY-CS-¬¨NUM name NAT b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name QNAT b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LT a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (QLT a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (NUM x) b w c s rewrite sym (just-inj s) = ‚ä•-elim (c x refl)
step-APPLY-CS-¬¨NUM name (PI a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LAMBDA a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (APPLY a a‚ÇÅ) b w c s rewrite s = refl
step-APPLY-CS-¬¨NUM name (SUM a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (PAIR a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (SET a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (UNION a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (INL a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (INR a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (EQ a a‚ÇÅ a‚ÇÇ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name AX b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name FREE b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (CS x) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (TSQUASH a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (DUM a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (FFDEFS a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (UNIV x) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LIFT a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LOWER a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (SHRINK a) b w c s rewrite sym (just-inj s) = refl

Œ£-steps-APPLY-CS‚â§ : (n : ‚Ñï) (a b : Term) (w : ùïé¬∑) (name : Name)
                 ‚Üí steps n a w ‚â° b
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) b)
Œ£-steps-APPLY-CS‚â§ 0 a b w name h rewrite h = (0 , ‚â§-refl , refl)
Œ£-steps-APPLY-CS‚â§ (suc n) a b w name h with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p with is-NUM a
...                          | inj‚ÇÅ (k , q) rewrite q | sym (just-inj p) | stepsVal (NUM k) w n tt | sym h = (0 , _‚â§_.z‚â§n , refl)
...                          | inj‚ÇÇ q = (suc m , _‚â§_.s‚â§s l , g)
  where
    ms : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) u) w ‚â° APPLY (CS name) b)
    ms = Œ£-steps-APPLY-CS‚â§ n u b w name h

    m : ‚Ñï
    m = proj‚ÇÅ ms

    l : m ‚â§ n
    l = proj‚ÇÅ (proj‚ÇÇ ms)

    s : steps m (APPLY (CS name) u) w ‚â° APPLY (CS name) b
    s = proj‚ÇÇ (proj‚ÇÇ ms)

    g : steps (suc m) (APPLY (CS name) a) w ‚â° APPLY (CS name) b
    g rewrite step-APPLY-CS-¬¨NUM name a u w q p = s
Œ£-steps-APPLY-CS‚â§ (suc n) a b w name h | inj‚ÇÇ p rewrite p | h = (0 , _‚â§_.z‚â§n , refl)


Œ£-steps-APPLY-CS : (n : ‚Ñï) (a t : Term) (w : ùïé¬∑) (k : ‚Ñï) (name : Name)
                 ‚Üí steps n a w ‚â° NUM k
                 ‚Üí getChoice¬∑ k name w ‚â° just t
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí steps m (APPLY (CS name) a) w ‚â° t)
Œ£-steps-APPLY-CS n a t w k name h gc = (suc m , g)
  where
    ms : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) (NUM k))
    ms = Œ£-steps-APPLY-CS‚â§ n a (NUM k) w name h

    m : ‚Ñï
    m = proj‚ÇÅ ms

    l : m ‚â§ n
    l = proj‚ÇÅ (proj‚ÇÇ ms)

    s : steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) (NUM k)
    s = proj‚ÇÇ (proj‚ÇÇ ms)

    g : steps (suc m) (APPLY (CS name) a) w ‚â° t
    g rewrite steps‚â° m (APPLY (CS name) a) w | s | gc = refl


step-steps-trans : {w : ùïé¬∑} {a b c : Term} {n : ‚Ñï} ‚Üí step a w ‚â° just b ‚Üí steps n b w ‚â° c ‚Üí steps (suc n) a w ‚â° c
step-steps-trans {w} {a} {b} {c} {n} c‚ÇÅ c‚ÇÇ rewrite c‚ÇÅ = c‚ÇÇ



step-‚áì-trans : {w : ùïé¬∑} {a b c : Term} ‚Üí step a w ‚â° just b ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
step-‚áì-trans {w} {a} {b} {c} c‚ÇÅ (n , c‚ÇÇ) = suc n , step-steps-trans {w} {a} {b} {c} {n} c‚ÇÅ c‚ÇÇ



steps-‚áì-trans : {w : ùïé¬∑} {a b c : Term} (n : ‚Ñï) ‚Üí steps n a w ‚â° b ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
steps-‚áì-trans {w} {a} {b} {c} 0 c‚ÇÅ c‚ÇÇ rewrite c‚ÇÅ = c‚ÇÇ
steps-‚áì-trans {w} {a} {b} {c} (suc n) c‚ÇÅ c‚ÇÇ with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p = step-‚áì-trans p (steps-‚áì-trans n c‚ÇÅ c‚ÇÇ)
... | inj‚ÇÇ p rewrite p | c‚ÇÅ = c‚ÇÇ


‚áì-trans : {w : ùïé¬∑} {a b c : Term} ‚Üí a ‚áì b at w ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
‚áì-trans {w} {a} {b} {c} (n , c‚ÇÅ) c‚ÇÇ = steps-‚áì-trans n c‚ÇÅ c‚ÇÇ



‚áì-APPLY-CS : (w : ùïé¬∑) (a b : Term) (name : Name)
             ‚Üí a ‚áì b at w
             ‚Üí (APPLY (CS name) a) ‚áì (APPLY (CS name) b) at w
‚áì-APPLY-CS w a b name (n , c) = fst c' , snd (snd c')
  where
    c' : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) b)
    c' = Œ£-steps-APPLY-CS‚â§ n a b w name c



{--‚áõ-APPLY-CS : (w : ùïé¬∑) (name : Name) (a t : Term) (k : ‚Ñï)
              ‚Üí getChoice¬∑ k name w ‚â° just t
              ‚Üí a ‚áõ NUM k at w
              ‚Üí APPLY (CS name) a ‚áõ t at w
‚áõ-APPLY-CS w name a t k gc c w1 e1 =
  let (n , c1) = lower (c w1 e1) in
  lift (Œ£-steps-APPLY-CS n a t w1 k name c1 (getChoice‚äë¬∑ w w1 k name t e1 gc))
--}


_#‚áì_at_ : (T T' : CTerm) (w : ùïé¬∑) ‚Üí Set
T #‚áì T' at w = ‚åú T ‚åù ‚áì ‚åú T' ‚åù at w
infix 30 _#‚áì_at_



_#‚áõ_at_ : (T T' : CTerm) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T #‚áõ T' at w = ‚åú T ‚åù ‚áõ ‚åú T' ‚åù at w
infix 30 _#‚áõ_at_



#isValue : CTerm -> Set
#isValue t = isValue ‚åú t ‚åù


#compAllRefl : (T : CTerm) (w : ùïé¬∑) ‚Üí T #‚áõ T at w
#compAllRefl (ct T cT) w i = compAllRefl T w i


#compAllVal : {a b : CTerm} {w : ùïé¬∑} ‚Üí a #‚áõ b at w ‚Üí #isValue a ‚Üí a ‚â° b
#compAllVal {ct a ca} {ct b cb} {w} c i = CTerm‚â° (compAllVal c i)


#strongMonEq : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#strongMonEq w t1 t2 = strongMonEq w ‚åú t1 ‚åù ‚åú t2 ‚åù


#weakMonEq : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#weakMonEq w t1 t2 = weakMonEq w ‚åú t1 ‚åù ‚åú t2 ‚åù


#NUM : ‚Ñï ‚Üí CTerm
#NUM n = ct (NUM n) refl


#weakMonEq‚Üí : {w : ùïé¬∑} {a b : CTerm}
               ‚Üí #weakMonEq w a b
               ‚Üí Œ£ ‚Ñï (Œª n ‚Üí a #‚áì #NUM n at w √ó b #‚áì #NUM n at w)
#weakMonEq‚Üí {w} {a} {B} h = lower (h w (‚äë-refl¬∑ w))



NUMinj : {n m : ‚Ñï} ‚Üí NUM n ‚â° NUM m ‚Üí n ‚â° m
NUMinj refl =  refl



#NUMinj : {n m : ‚Ñï} ‚Üí #NUM n ‚â° #NUM m ‚Üí n ‚â° m
#NUMinj {n} {m} e = NUMinj (‚â°CTerm e)


#weakMonEq-#NUM : (w : ùïé¬∑) (k : ‚Ñï) ‚Üí #weakMonEq w (#NUM k) (#NUM k)
#weakMonEq-#NUM w k w' e' = lift (k , ‚áì-refl (NUM k) w' , ‚áì-refl (NUM k) w')


#strongMonEq-#NUM : (w : ùïé¬∑) (k : ‚Ñï) ‚Üí #strongMonEq w (#NUM k) (#NUM k)
#strongMonEq-#NUM w k = k , compAllRefl (NUM k) w , compAllRefl (NUM k) w



strongMonEq-refl : {w : ùïé¬∑} {a b : Term}
                  ‚Üí strongMonEq w a b
                  ‚Üí strongMonEq w a a
strongMonEq-refl {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÅ , c‚ÇÅ


strongMonEq-refl-rev : {w : ùïé¬∑} {a b : Term}
                  ‚Üí strongMonEq w a b
                  ‚Üí strongMonEq w b b
strongMonEq-refl-rev {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÇ , c‚ÇÇ




weakMonEq-refl : {w : ùïé¬∑} {a b : Term}
                 ‚Üí weakMonEq w a b
                 ‚Üí weakMonEq w a a
weakMonEq-refl {w} {a} {b} wm w1 e1 = lift (fst z , fst (snd z) , fst (snd z))
  where
    z : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1)
    z = lower (wm w1 e1)


weakMonEq-refl-rev : {w : ùïé¬∑} {a b : Term}
                     ‚Üí weakMonEq w a b
                     ‚Üí weakMonEq w b b
weakMonEq-refl-rev {w} {a} {b} wm w1 e1 = lift (fst z , snd (snd z) , snd (snd z))
  where
    z : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1)
    z = lower (wm w1 e1)



strongMonEq-sym : {w : ùïé¬∑} {a b : Term}
                  ‚Üí strongMonEq w a b
                  ‚Üí strongMonEq w b a
strongMonEq-sym {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÇ , c‚ÇÅ



step‚â°nothing-steps : (w : ùïé¬∑) (a : Term) (n : ‚Ñï) ‚Üí step a w ‚â° nothing ‚Üí steps n a w ‚â° a
step‚â°nothing-steps w a 0 h = refl
step‚â°nothing-steps w a (suc n) h rewrite h = refl


steps-+ : (n m : ‚Ñï) (a : Term) (w : ùïé¬∑) ‚Üí steps (n + m) a w ‚â° steps m (steps n a w) w
steps-+ 0 m a w = refl
steps-+ (suc n) m a w with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p = steps-+ n m u w
... | inj‚ÇÇ p rewrite p rewrite step‚â°nothing-steps w a m p = refl



‚â§-Œ£+ : {n m : ‚Ñï} ‚Üí n ‚â§ m ‚Üí Œ£ ‚Ñï (Œª k ‚Üí m ‚â° n + k)
‚â§-Œ£+ {0} {m} _‚â§_.z‚â§n = (m , refl)
‚â§-Œ£+ {suc n} {suc m} (_‚â§_.s‚â§s le) with ‚â§-Œ£+ le
... | (k , p) rewrite p = k , refl



steps-val-det : (w : ùïé¬∑) (a v‚ÇÅ v‚ÇÇ : Term) (n m : ‚Ñï) ‚Üí isValue v‚ÇÅ ‚Üí steps n a w ‚â° v‚ÇÅ ‚Üí steps m a w ‚â° v‚ÇÇ ‚Üí n ‚â§ m ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
steps-val-det w a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ c‚ÇÅ c‚ÇÇ p with ‚â§-Œ£+ p
... | (k , q) rewrite q | steps-+ n k a w | c‚ÇÇ | c‚ÇÅ | stepsVal v‚ÇÅ w k isv‚ÇÅ = c‚ÇÇ


‚áì-val-det : {w : ùïé¬∑} {a v‚ÇÅ v‚ÇÇ : Term} ‚Üí isValue v‚ÇÅ ‚Üí isValue v‚ÇÇ ‚Üí a ‚áì v‚ÇÅ at w ‚Üí a ‚áì v‚ÇÇ at w ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
‚áì-val-det {w} {a} {v‚ÇÅ} {v‚ÇÇ} isv‚ÇÅ isv‚ÇÇ (n , c‚ÇÅ) (m , c‚ÇÇ) with n ‚â§? m
... | yes p = steps-val-det w a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ c‚ÇÅ c‚ÇÇ p
... | no p = sym (steps-val-det w a v‚ÇÇ v‚ÇÅ m n isv‚ÇÇ c‚ÇÇ c‚ÇÅ (‚â∞‚áí‚â• p))


‚áõ-val-det : {w : ùïé¬∑} {a v‚ÇÅ v‚ÇÇ : Term} ‚Üí isValue v‚ÇÅ ‚Üí isValue v‚ÇÇ ‚Üí a ‚áõ v‚ÇÅ at w ‚Üí a ‚áõ v‚ÇÇ at w ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
‚áõ-val-det {w} {a} {v‚ÇÅ} {v‚ÇÇ} isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ =
  ‚áì-val-det isv‚ÇÅ isv‚ÇÇ h1 h2
  where
    h1 : a ‚áì v‚ÇÅ at w
    h1 = let c = c‚ÇÅ w (‚äë-refl¬∑ w) in Level.lower c

    h2 : a ‚áì v‚ÇÇ at w
    h2 = let c = c‚ÇÇ w (‚äë-refl¬∑ w) in Level.lower c


#‚áõ-val-det : {w : ùïé¬∑} {a v‚ÇÅ v‚ÇÇ : CTerm} ‚Üí #isValue v‚ÇÅ ‚Üí #isValue v‚ÇÇ ‚Üí a #‚áõ v‚ÇÅ at w ‚Üí a #‚áõ v‚ÇÇ at w ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
#‚áõ-val-det {w} {a} {v‚ÇÅ} {v‚ÇÇ} isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ = CTerm‚â° (‚áõ-val-det isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ)



strongMonEq-trans : {w : ùïé¬∑} {a b c : Term}
                    ‚Üí strongMonEq w a b
                    ‚Üí strongMonEq w b c
                    ‚Üí strongMonEq w a c
strongMonEq-trans {w} {a} {b} {c} (n , c‚ÇÅ , c‚ÇÇ) (m , d‚ÇÅ , d‚ÇÇ) rewrite NUMinj (‚áõ-val-det tt tt d‚ÇÅ c‚ÇÇ) = n , c‚ÇÅ , d‚ÇÇ



weakMonEq-sym : {w : ùïé¬∑} {a b : Term}
                ‚Üí weakMonEq w a b
                ‚Üí weakMonEq w b a
weakMonEq-sym {w} {a} {b} h w1 e1 = lift (fst z‚ÇÇ , snd (snd z‚ÇÇ) , fst (snd z‚ÇÇ))
  where
    z‚ÇÅ : Lift (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1))
    z‚ÇÅ = h w1 e1

    z‚ÇÇ : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1)
    z‚ÇÇ = lower z‚ÇÅ



weakMonEq-trans : {w : ùïé¬∑} {a b c : Term}
                  ‚Üí weakMonEq w a b
                  ‚Üí weakMonEq w b c
                  ‚Üí weakMonEq w a c
weakMonEq-trans {w} {a} {b} {c} weak1 weak2 w1 e1 = lift (n , c‚ÇÅ , d)
  where
    wk1 : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì (NUM n) at w1 √ó b ‚áì (NUM n) at w1)
    wk1 = lower (weak1 w1 e1)

    n : ‚Ñï
    n = fst wk1

    c‚ÇÅ : a ‚áì (NUM n) at w1
    c‚ÇÅ = fst (snd wk1)

    c‚ÇÇ : b ‚áì (NUM n) at w1
    c‚ÇÇ = snd (snd wk1)

    wk2 : Œ£ ‚Ñï (Œª n ‚Üí b ‚áì (NUM n) at w1 √ó c ‚áì (NUM n) at w1)
    wk2 = lower (weak2 w1 e1)

    m : ‚Ñï
    m = fst wk2

    d‚ÇÅ : b ‚áì (NUM m) at w1
    d‚ÇÅ = fst (snd wk2)

    d‚ÇÇ : c ‚áì (NUM m) at w1
    d‚ÇÇ = snd (snd wk2)

    d : c ‚áì (NUM n) at w1
    d rewrite NUMinj (‚áì-val-det tt tt c‚ÇÇ d‚ÇÅ) = d‚ÇÇ



‚â°‚Üí#compAllRefl : {a b : CTerm} (w : ùïé¬∑) ‚Üí a ‚â° b ‚Üí a #‚áõ b at w
‚â°‚Üí#compAllRefl {a} {b} w e rewrite e = #compAllRefl b w




removeV : (v : Var) (l : List Var) ‚Üí List Var
removeV v [] = []
removeV v (x ‚à∑ l) with x ‚âü v
... | yes _ = removeV v l
... | no _ = x ‚à∑ removeV v l


remove0 : List Var ‚Üí List Var
remove0 [] = []
remove0 (0 ‚à∑ l) = remove0 l
remove0 (x ‚à∑ l) = x ‚à∑ remove0 l


remove0-as-V : (l : List Var) ‚Üí remove0 l ‚â° removeV 0 l
remove0-as-V [] = refl
remove0-as-V (0 ‚à∑ l) = remove0-as-V l
remove0-as-V (suc x ‚à∑ l) rewrite remove0-as-V l = refl


‚ààremoveV‚Üí : {x v : Var} {a : List Var} ‚Üí x ‚àà (removeV v a) ‚Üí x ‚àà a √ó ¬¨ (x ‚â° v)
‚ààremoveV‚Üí {x} {v} {x‚ÇÅ ‚à∑ a} i with x‚ÇÅ ‚âü v
... | yes p rewrite p = there (fst (‚ààremoveV‚Üí i)) , snd (‚ààremoveV‚Üí {x} {v} {a} i)
‚ààremoveV‚Üí {x} {v} {x‚ÇÅ ‚à∑ a} (here px) | no p rewrite px = here refl , p
‚ààremoveV‚Üí {x} {v} {x‚ÇÅ ‚à∑ a} (there i) | no p = there (fst (‚ààremoveV‚Üí i)) ,  snd (‚ààremoveV‚Üí {x} {v} {a} i)


‚Üí‚ààremoveV : {x v : Var} {a : List Var} ‚Üí x ‚àà a ‚Üí ¬¨ (x ‚â° v) ‚Üí x ‚àà (removeV v a)
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} i d with x‚ÇÅ ‚âü v
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (here px) d | yes p rewrite p | px = ‚ä•-elim (d refl)
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (there i) d | yes p = ‚Üí‚ààremoveV i d
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (here px) d | no p = here px
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (there i) d | no p = there (‚Üí‚ààremoveV i d)


‚äÜremoveV : {v : Var} {a b : List Var} ‚Üí a ‚äÜ b ‚Üí (removeV v a) ‚äÜ (removeV v b)
‚äÜremoveV {v} {a} {b} s i = ‚Üí‚ààremoveV (s (fst (‚ààremoveV‚Üí i))) (snd (‚ààremoveV‚Üí {_} {v} {a} i))


‚ààremoveV++L : {x v : Var} {a b c : List Var} ‚Üí x ‚àà (removeV v a ++ c) ‚Üí x ‚àà (removeV v (a ++ b) ++ c)
‚ààremoveV++L {x} {v} {a} {b} {c} i with ‚àà-++‚Åª (removeV v a) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚äÜremoveV {v} {a} {a ++ b} ‚àà-++‚Å∫À° p)
... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ (removeV v (a ++ b)) p


‚ààremoveV++R : {x v : Var} {a b c : List Var} ‚Üí x ‚àà (removeV v b ++ c) ‚Üí x ‚àà (removeV v (a ++ b) ++ c)
‚ààremoveV++R {x} {v} {a} {b} {c} i with ‚àà-++‚Åª (removeV v b) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚äÜremoveV {v} {b} {a ++ b} (‚àà-++‚Å∫ ≥ a) p)
... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ (removeV v (a ++ b)) p


‚ààlowerVars‚Üí : (v : Var) (l : List Var) ‚Üí v ‚àà lowerVars l ‚Üí suc v ‚àà l
‚ààlowerVars‚Üí v (0 ‚à∑ l) i = there (‚ààlowerVars‚Üí v l i)
‚ààlowerVars‚Üí v (suc x ‚à∑ l) (here px) rewrite px = here refl
‚ààlowerVars‚Üí v (suc x ‚à∑ l) (there i) = there (‚ààlowerVars‚Üí v l i)


‚Üí‚ààlowerVars : (v : Var) (l : List Var) ‚Üí suc v ‚àà l ‚Üí v ‚àà lowerVars l
‚Üí‚ààlowerVars v (0 ‚à∑ l) (there i) = ‚Üí‚ààlowerVars v l i
‚Üí‚ààlowerVars v (suc x ‚à∑ l) (here px) = here (suc-injective px)
‚Üí‚ààlowerVars v (suc x ‚à∑ l) (there i) = there (‚Üí‚ààlowerVars v l i)


lowerVars-map-sucIf‚â§-suc : (n : ‚Ñï) (l : List Var)
                           ‚Üí lowerVars (Data.List.map (sucIf‚â§ (suc n)) l)
                              ‚â° Data.List.map (sucIf‚â§ n) (lowerVars l)
lowerVars-map-sucIf‚â§-suc n [] = refl
lowerVars-map-sucIf‚â§-suc n (x ‚à∑ l) with x <? suc n
lowerVars-map-sucIf‚â§-suc n (0 ‚à∑ l) | yes p = lowerVars-map-sucIf‚â§-suc n l
lowerVars-map-sucIf‚â§-suc n (suc x ‚à∑ l) | yes p with x <? n
... | yes q rewrite lowerVars-map-sucIf‚â§-suc n l = refl
... | no q = ‚ä•-elim (q (s‚â§s-inj p))
lowerVars-map-sucIf‚â§-suc n (0 ‚à∑ l) | no p = ‚ä•-elim (p (_‚â§_.s‚â§s _‚â§_.z‚â§n))
lowerVars-map-sucIf‚â§-suc n (suc x ‚à∑ l) | no p with x <? n
... | yes q = ‚ä•-elim (p (_‚â§_.s‚â§s q))
... | no q rewrite lowerVars-map-sucIf‚â§-suc n l = refl


{--
all> : (n : ‚Ñï) (l : List ‚Ñï) ‚Üí Set
all> n l = (v : ‚Ñï) ‚Üí v ‚àà l ‚Üí n < v


all>‚à∑ : {n x : ‚Ñï} {l : List ‚Ñï} ‚Üí all> n (x ‚à∑ l) ‚Üí all> n l
all>‚à∑ {n} {x} {l} i v j = i v (there j)


all>++L : {n : ‚Ñï} {l k : List ‚Ñï} ‚Üí all> n (l ++ k) ‚Üí all> n l
all>++L {n} {l} {k} i v j = i v (‚àà-++‚Å∫À° j)


all>++R : {n : ‚Ñï} {l k : List ‚Ñï} ‚Üí all> n (l ++ k) ‚Üí all> n k
all>++R {n} {l} {k} i v j = i v (‚àà-++‚Å∫ ≥ _ j)
--}


lowerVars-map-predIf‚â§-suc : (n : ‚Ñï) (l : List Var)
                            ‚Üí lowerVars (Data.List.map (predIf‚â§ (suc n)) l)
                               ‚â° Data.List.map (predIf‚â§ n) (lowerVars l)
lowerVars-map-predIf‚â§-suc n [] = refl
lowerVars-map-predIf‚â§-suc n (0 ‚à∑ l) = lowerVars-map-predIf‚â§-suc n l
lowerVars-map-predIf‚â§-suc n (suc x ‚à∑ l) with suc x ‚â§? suc n
lowerVars-map-predIf‚â§-suc n (suc 0 ‚à∑ l) | yes p rewrite lowerVars-map-predIf‚â§-suc n l = refl
lowerVars-map-predIf‚â§-suc n (suc 0 ‚à∑ l) | no p = ‚ä•-elim (p (_‚â§_.s‚â§s _‚â§_.z‚â§n))
lowerVars-map-predIf‚â§-suc n (suc (suc x) ‚à∑ l) | yes p with suc x ‚â§? n
... | yes q rewrite lowerVars-map-predIf‚â§-suc n l = refl
... | no q = ‚ä•-elim (q (s‚â§s-inj p))
lowerVars-map-predIf‚â§-suc n (suc (suc x) ‚à∑ l) | no p with suc x ‚â§? n
... | yes q = ‚ä•-elim (p (_‚â§_.s‚â§s q))
... | no q rewrite lowerVars-map-predIf‚â§-suc n l = refl


fvars-shiftUp‚â° : (n : ‚Ñï) (t : Term)
                 ‚Üí fvars (shiftUp n t) ‚â° Data.List.map (sucIf‚â§ n) (fvars t)
fvars-shiftUp‚â° n (VAR x) with x <? n
... | yes p = refl
... | no p = refl
fvars-shiftUp‚â° n NAT = refl
fvars-shiftUp‚â° n QNAT = refl
fvars-shiftUp‚â° n (LT t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (QLT t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (NUM x) = refl
fvars-shiftUp‚â° n (PI t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftUp‚â° n (LAMBDA t)
  rewrite fvars-shiftUp‚â° (suc n) t
  | lowerVars-map-sucIf‚â§-suc n (fvars t) = refl
fvars-shiftUp‚â° n (APPLY t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (SUM t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftUp‚â° n (PAIR t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (SPREAD t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (lowerVars (fvars t‚ÇÅ)))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc (suc n)) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc (suc n) (fvars t‚ÇÅ)
  | lowerVars-map-sucIf‚â§-suc n (lowerVars (fvars t‚ÇÅ)) = refl
fvars-shiftUp‚â° n (SET t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftUp‚â° n (UNION t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (INL t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (INR t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (DECIDE t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ) ++ lowerVars (fvars t‚ÇÇ))
  | map-++-commute (sucIf‚â§ n) (lowerVars (fvars t‚ÇÅ)) (lowerVars (fvars t‚ÇÇ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | fvars-shiftUp‚â° (suc n) t‚ÇÇ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ)
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÇ) = refl
fvars-shiftUp‚â° n (EQ t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ ++ fvars t‚ÇÇ)
  | map-++-commute (sucIf‚â§ n) (fvars t‚ÇÅ) (fvars t‚ÇÇ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ
  | fvars-shiftUp‚â° n t‚ÇÇ = refl
fvars-shiftUp‚â° n AX = refl
fvars-shiftUp‚â° n FREE = refl
fvars-shiftUp‚â° n (CS x) = refl
fvars-shiftUp‚â° n (TSQUASH t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (DUM t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (FFDEFS t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (UNIV x) = refl
fvars-shiftUp‚â° n (LIFT t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (LOWER t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (SHRINK t) = fvars-shiftUp‚â° n t


fvars-shiftDown‚â° : (n : ‚Ñï) (t : Term)
                   ‚Üí fvars (shiftDown n t) ‚â° Data.List.map (predIf‚â§ n) (fvars t)
fvars-shiftDown‚â° n (VAR 0) = refl
fvars-shiftDown‚â° n (VAR (suc x)) with suc x <? n
... | yes p = refl
... | no p = refl
fvars-shiftDown‚â° n NAT = refl
fvars-shiftDown‚â° n QNAT = refl
fvars-shiftDown‚â° n (LT t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (QLT t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (NUM x) = refl
fvars-shiftDown‚â° n (PI t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftDown‚â° n (LAMBDA t)
  rewrite fvars-shiftDown‚â° (suc n) t
  | lowerVars-map-predIf‚â§-suc n (fvars t) = refl
fvars-shiftDown‚â° n (APPLY t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (SUM t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftDown‚â° n (PAIR t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (SPREAD t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (lowerVars (fvars t‚ÇÅ)))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc (suc n)) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc (suc n) (fvars t‚ÇÅ)
  | lowerVars-map-predIf‚â§-suc n (lowerVars (fvars t‚ÇÅ)) = refl
fvars-shiftDown‚â° n (SET t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftDown‚â° n (UNION t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (INL t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (INR t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (DECIDE t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ) ++ lowerVars (fvars t‚ÇÇ))
  | map-++-commute (predIf‚â§ n) (lowerVars (fvars t‚ÇÅ)) (lowerVars (fvars t‚ÇÇ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | fvars-shiftDown‚â° (suc n) t‚ÇÇ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ)
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÇ) = refl
fvars-shiftDown‚â° n (EQ t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ ++ fvars t‚ÇÇ)
  | map-++-commute (predIf‚â§ n) (fvars t‚ÇÅ) (fvars t‚ÇÇ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ
  | fvars-shiftDown‚â° n t‚ÇÇ = refl
fvars-shiftDown‚â° n AX = refl
fvars-shiftDown‚â° n FREE = refl
fvars-shiftDown‚â° n (CS x) = refl
fvars-shiftDown‚â° n (TSQUASH t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (DUM t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (FFDEFS t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (UNIV x) = refl
fvars-shiftDown‚â° n (LIFT t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (LOWER t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (SHRINK t) = fvars-shiftDown‚â° n t


‚ààremoveV-lowerVars++‚Üí : (x v : Var) (l : List Var) (a : Term)
                         ‚Üí x ‚àà removeV v (lowerVars l) ++ fvars a
                         ‚Üí (suc x) ‚àà removeV (suc v) l ++ fvars (shiftUp 0 a)
‚ààremoveV-lowerVars++‚Üí x v l a i with ‚àà-++‚Åª (removeV v (lowerVars l)) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚Üí‚ààremoveV (‚ààlowerVars‚Üí x l (fst (‚ààremoveV‚Üí p))) (‚Üí¬¨S _ _ (snd (‚ààremoveV‚Üí {x} {v} {lowerVars l} p))))
... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ (removeV (suc v) l) j
  where
    j : suc x ‚àà fvars (shiftUp 0 a)
    j rewrite fvars-shiftUp‚â° 0 a = ‚àà-map‚Å∫ (sucIf‚â§ 0) p


‚Üí‚ààremoveV-lowerVars++ : (x v : Var) (l : List Var) (a : Term)
                         ‚Üí (suc x) ‚àà removeV (suc v) l ++ fvars (shiftUp 0 a)
                         ‚Üí x ‚àà removeV v (lowerVars l) ++ fvars a
‚Üí‚ààremoveV-lowerVars++ x v l a i with ‚àà-++‚Åª (removeV (suc v) l) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚Üí‚ààremoveV (‚Üí‚ààlowerVars x l (fst (‚ààremoveV‚Üí p))) (¬¨S‚Üí _ _ (snd (‚ààremoveV‚Üí {suc x} {suc v} {l} p))))
... | inj‚ÇÇ p rewrite fvars-shiftUp‚â° 0 a = ‚àà-++‚Å∫ ≥ (removeV v (lowerVars l)) j'
  where
    y : Var
    y = fst (‚àà-map‚Åª (sucIf‚â§ 0) p)

    j : y ‚àà fvars a
    j = fst (snd (‚àà-map‚Åª (sucIf‚â§ 0) p))

    e : x ‚â° y
    e = suc-injective (snd (snd (‚àà-map‚Åª (sucIf‚â§ 0) p)))

    j' : x ‚àà fvars a
    j' rewrite e = j


fvars-subv : (v : Var) (a b : Term) ‚Üí fvars (subv v a b) ‚äÜ removeV v (fvars b) ++ fvars a
fvars-subv v a (VAR x) i with x ‚âü v
... | yes _ = i
fvars-subv v a (VAR x) (here px) | no _ rewrite px = here refl
fvars-subv v a NAT i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a QNAT i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (LT b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (QLT b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (NUM x) i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (PI b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a j)
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ {suc x} (‚ààlowerVars‚Üí x _ p)
fvars-subv v a (LAMBDA b) {x} i = ‚Üí‚ààremoveV-lowerVars++ x v (fvars b) a j
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b {suc x} (‚ààlowerVars‚Üí x _ i)
fvars-subv v a (APPLY b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (SUM b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a j)
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ {suc x} (‚ààlowerVars‚Üí x _ p)
fvars-subv v a (PAIR b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (SPREAD b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (lowerVars (fvars b‚ÇÅ))} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (lowerVars (fvars b‚ÇÅ))} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (lowerVars (fvars b‚ÇÅ)) a (‚Üí‚ààremoveV-lowerVars++ (suc x) (suc v) (fvars b‚ÇÅ) (shiftUp 0 a) j))
  where
    j : (suc (suc x)) ‚àà removeV (suc (suc v)) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 (shiftUp 0 a))
    j = fvars-subv (suc (suc v)) (shiftUp 0 (shiftUp 0 a)) b‚ÇÅ {suc (suc x)} (‚ààlowerVars‚Üí (suc x) _ (‚ààlowerVars‚Üí x _ p))
fvars-subv v a (SET b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a j)
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ {suc x} (‚ààlowerVars‚Üí x _ p)
fvars-subv v a (UNION b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (INL b) = fvars-subv v a b
fvars-subv v a (INR b) = fvars-subv v a b
fvars-subv v a (DECIDE b b‚ÇÅ b‚ÇÇ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ) ++ lowerVars (fvars b‚ÇÇ)} (fvars-subv v a b p)
... | inj‚ÇÇ p with ‚àà-++‚Åª (lowerVars (fvars (subv (suc v) (shiftUp 0 a) b‚ÇÅ))) p
... | inj‚ÇÅ q = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ) ++ lowerVars (fvars b‚ÇÇ)} {fvars a}
                           (‚ààremoveV++L {_} {v} {lowerVars (fvars b‚ÇÅ)} {lowerVars (fvars b‚ÇÇ)}
                                        (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a
                                                               (fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ (‚ààlowerVars‚Üí _ _ q))))
... | inj‚ÇÇ q = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ) ++ lowerVars (fvars b‚ÇÇ)} {fvars a}
                           (‚ààremoveV++R {_} {v} {lowerVars (fvars b‚ÇÅ)} {lowerVars (fvars b‚ÇÇ)}
                                        (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÇ) a
                                                                (fvars-subv (suc v) (shiftUp 0 a) b‚ÇÇ (‚ààlowerVars‚Üí _ _ q))))
fvars-subv v a (EQ b b‚ÇÅ b‚ÇÇ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ ++ fvars b‚ÇÇ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p with ‚àà-++‚Åª (fvars (subv v a b‚ÇÅ)) p
... | inj‚ÇÅ q = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ ++ fvars b‚ÇÇ} {fvars a}
                           (‚ààremoveV++L {_} {v} {fvars b‚ÇÅ} {fvars b‚ÇÇ} {fvars a} (fvars-subv v a b‚ÇÅ q))
... | inj‚ÇÇ q = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ ++ fvars b‚ÇÇ} {fvars a}
                           (‚ààremoveV++R {_} {v} {fvars b‚ÇÅ} {fvars b‚ÇÇ} {fvars a} (fvars-subv v a b‚ÇÇ q))
fvars-subv v a AX i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a FREE i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (CS x) i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (TSQUASH b) = fvars-subv v a b
fvars-subv v a (DUM b) = fvars-subv v a b
fvars-subv v a (FFDEFS b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (UNIV x) i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (LIFT b) = fvars-subv v a b
fvars-subv v a (LOWER b) = fvars-subv v a b
fvars-subv v a (SHRINK b) = fvars-subv v a b


‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ : (y : Var) (l : List Var) (a : Term)
                             ‚Üí y ‚àà removeV 0 l ++ fvars (shiftUp 0 a)
                             ‚Üí (predIf‚â§ 0 y) ‚àà (lowerVars l ++ fvars a)
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ y l a i with ‚àà-++‚Åª (removeV 0 l) i
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ 0 l a i | inj‚ÇÅ p = ‚ä•-elim (snd (‚ààremoveV‚Üí {0} {0} {l} p) refl)
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ (suc y) l a i | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚Üí‚ààlowerVars y l (fst (‚ààremoveV‚Üí p)))
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ 0 l a i | inj‚ÇÇ p rewrite fvars-shiftUp‚â° 0 a = ‚ä•-elim (suc-‚â¢-0 (sym (snd (snd (‚àà-map‚Åª suc p)))))
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ (suc y) l a i | inj‚ÇÇ p rewrite fvars-shiftUp‚â° 0 a = ‚àà-++‚Å∫ ≥ (lowerVars l) (‚àà-map‚Üí suc-injective p)


fvars-sub : (a b : Term) ‚Üí fvars (sub a b) ‚äÜ lowerVars (fvars b) ++ fvars a
fvars-sub a b {x} i rewrite fvars-shiftDown‚â° 0 (subv 0 (shiftUp 0 a) b) = --remove0-as-V (fvars b) =
  k2
  where
    y : Var
    y = fst (‚àà-map‚Åª (predIf‚â§ 0) i)
    -- x = predIf‚â§ 0 y

    j : y ‚àà fvars (subv 0 (shiftUp 0 a) b)
    j = fst (snd (‚àà-map‚Åª (predIf‚â§ 0) i))

    k : y ‚àà removeV 0 (fvars b) ++ fvars (shiftUp 0 a)
    k = fvars-subv 0 (shiftUp 0 a) b j

    k1 : (predIf‚â§ 0 y) ‚àà (lowerVars (fvars b) ++ fvars a)
    k1 = ‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ y (fvars b) a k

    k2 : x ‚àà (lowerVars (fvars b) ++ fvars a)
    k2 rewrite snd (snd (‚àà-map‚Åª (predIf‚â§ 0) i)) = k1


fvars-cterm : (a : CTerm) ‚Üí fvars ‚åú a ‚åù ‚â° []
fvars-cterm a = CTerm.closed a



‚Üíremove0‚â°[] : {l : List Var} ‚Üí l ‚äÜ [ 0 ] ‚Üí remove0 l ‚â° []
‚Üíremove0‚â°[] {[]} h = refl
‚Üíremove0‚â°[] {0 ‚à∑ l} h = ‚Üíremove0‚â°[] Œª i ‚Üí h (there i)
‚Üíremove0‚â°[] {suc x ‚à∑ l} h = ‚ä•-elim (suc-‚â¢-0 j)
  where
    i : suc x ‚àà [ 0 ]
    i = h (here refl)

    j : suc x ‚â° 0
    j = ‚àà[1] i


‚äÜ?‚Üí‚äÜ : {l k : List Var} ‚Üí l ‚äÜ? k ‚â° true ‚Üí l ‚äÜ k
‚äÜ?‚Üí‚äÜ {[]} {k} h i = ‚ä•-elim (¬¨‚àà[] i)
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} h i with (v ‚àà? k)
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} h (here px) | yes p rewrite px = p
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} h (there i) | yes p = ‚äÜ?‚Üí‚äÜ h i
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} () i | no p


‚äÜ‚Üí‚äÜ? : {l k : List Var} ‚Üí l ‚äÜ k ‚Üí l ‚äÜ? k ‚â° true
‚äÜ‚Üí‚äÜ? {[]} {k} s = refl
‚äÜ‚Üí‚äÜ? {x ‚à∑ l} {k} s with x ‚àà? k
... | yes p = ‚äÜ‚Üí‚äÜ? {l} {k} Œª {z} i ‚Üí s (there i)
... | no p = ‚ä•-elim (p (s (here refl)))


lowerVars-fvars-CTerm0‚äÜ[] : (a : CTerm0) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚äÜ []
lowerVars-fvars-CTerm0‚äÜ[] a {x} i = ‚ä•-elim (suc-‚â¢-0 e)
  where
    j : suc x ‚àà fvars ‚åú a ‚åù
    j = ‚ààlowerVars‚Üí x (fvars ‚åú a ‚åù) i

    k : suc x ‚àà [ 0 ]
    k = ‚äÜ?‚Üí‚äÜ (CTerm0.closed a) j

    e : suc x ‚â° 0
    e = ‚àà[1] k


lowerVars-fvars-CTerm0‚â°[] : (a : CTerm0) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚â° []
lowerVars-fvars-CTerm0‚â°[] a = ‚äÜ[]‚Üí‚â°[] (lowerVars-fvars-CTerm0‚äÜ[] a)


#shiftUp : (n : ‚Ñï) (a : CTerm) ‚Üí shiftUp n ‚åú a ‚åù ‚â° ‚åú a ‚åù
#shiftUp n a = shiftUpTrivial n ‚åú a ‚åù (Œª w z ‚Üí #‚Üí¬¨‚àà {‚åú a ‚åù} (CTerm.closed a) w)


lowerVars-fvars-CTerm‚äÜ[] : (a : CTerm) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚äÜ []
lowerVars-fvars-CTerm‚äÜ[] a {x} i rewrite CTerm.closed a = i


lowerVars-fvars-CTerm‚â°[] : (a : CTerm) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚â° []
lowerVars-fvars-CTerm‚â°[] a = ‚äÜ[]‚Üí‚â°[] (lowerVars-fvars-CTerm‚äÜ[] a)


#sub : (a : CTerm) (b : CTerm0) ‚Üí # (sub ‚åú a ‚åù ‚åú b ‚åù)
#sub a b = ‚äÜ[]‚Üí‚â°[] (‚äÜ-trans (fvars-sub ‚åú a ‚åù ‚åú b ‚åù) (‚â°[]‚Üí‚äÜ[] (‚Üí++‚â°[] c1 c2)))
  where
    c1 : lowerVars (fvars ‚åú b ‚åù) ‚â° []
    c1 = lowerVars-fvars-CTerm0‚â°[] b

    c2 : fvars ‚åú a ‚åù ‚â° []
    c2 = CTerm.closed a



sub0 : (a : CTerm) (t : CTerm0) ‚Üí CTerm
sub0 a t =
  ct (sub ‚åú a ‚åù ‚åú t ‚åù) (#sub a t)


sub0‚åû‚åü : (a b : CTerm) ‚Üí sub0 a ‚åû b ‚åü ‚â° b
sub0‚åû‚åü a b = CTerm‚â° (subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b))



‚Üí‚â°sub0 : {a : CTerm} {t u : CTerm0} ‚Üí t ‚â° u ‚Üí sub0 a t ‚â° sub0 a u
‚Üí‚â°sub0 {a} {t} {u} e rewrite e = refl


¬¨isValue-APPLY : (a b : Term) ‚Üí ¬¨ isValue (APPLY a b)
¬¨isValue-APPLY a b ()



#lift-<NUM-pair : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#lift-<NUM-pair w t1 t2 = lift-<NUM-pair w ‚åú t1 ‚åù ‚åú t2 ‚åù


#‚áõto-same-CS : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#‚áõto-same-CS w t1 t2 = ‚áõto-same-CS w ‚åú t1 ‚åù ‚åú t2 ‚åù

\end{code}
