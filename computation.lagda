\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice


module computation {L : Level} (W : PossibleWorlds {L})
                   (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M)
       where
open import worldDef(W)
open import choiceDef{L}(C)
open import getChoiceDef(W)(C)(M)(G)
\end{code}


We now define part of OpenTT's syntax and operational semantics.


\begin{code}
step : ‚àÄ (T : Term) (w : ùïé¬∑) ‚Üí Maybe Term
-- VAR
step (VAR v) w = nothing
-- NAT
step NAT w = just NAT
-- QNAT
step QNAT w = just QNAT
-- LT
step (LT a b) w = just (LT a b)
-- QLT
step (QLT a b) w = just (QLT a b)
-- NUM
step (NUM n) w = just (NUM n)
-- PI
step (PI a b) w = just (PI a b)
-- LAMBDA
step (LAMBDA t) w = just (LAMBDA t)
-- APPLY
-- access the n^th choice in the history of choices made for "name"
step (APPLY (CS name) (NUM n)) w = getT n name w
step (APPLY (CS name) t) w with step t w
... | just u = just (APPLY (CS name) u)
... | nothing = nothing
step (APPLY (LAMBDA t) u) w = just (sub u t)
step (APPLY f a) w with step f w
... | just g = just (APPLY g a)
... | nothing = nothing
-- FIX
step (FIX (LAMBDA t)) w = just (sub (FIX (LAMBDA t)) t)
step (FIX f) w with step f w
... | just g = just (FIX g)
... | nothing = nothing
-- SUM
step (SUM a b) w = just (SUM a b)
-- PAIR
step (PAIR a b) w = just (PAIR a b)
-- SPREAD
step (SPREAD (PAIR a b) c) w = just (sub b (sub a c))
step (SPREAD a b) w with step a w
... | just t = just (SPREAD t b)
... | nothing = nothing
-- SET
step (SET a b) w = just (SET a b)
-- UNION
step (UNION a b) w = just (UNION a b)
-- INL
step (INL a) w = just (INL a)
-- INR
step (INR a) w = just (INR a)
-- DECIDE
step (DECIDE (INL a) b c) w = just (sub a b)
step (DECIDE (INR a) b c) w = just (sub a c)
step (DECIDE a b c) w with step a w
... | just t = just (DECIDE t b c)
... | nothing = nothing
-- EQ
step (EQ a b c) w = just (EQ a b c)
-- AX
step AX w = just AX
-- FREE
step FREE w = just FREE
-- CS
step (CS name) w = just (CS name)
-- TSQUASH
step (TSQUASH a) w = just (TSQUASH a)
-- DUM
step (DUM a) w = just (DUM a)
-- FFDEFS
step (FFDEFS a b) w = just (FFDEFS a b)
-- UNIV
step (UNIV u) w = just (UNIV u)
-- LIFT
step (LIFT t) w = just (LIFT t)
-- LOWER
step (LOWER t) w = just (LOWER t)
-- LOWER
step (SHRINK t) w = just (SHRINK t)

steps : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí Term
steps 0 t w = t
steps (suc n) t w with step t w
... | just u = steps n u w
... | nothing = t

_‚áì_at_ : ‚àÄ (T T' : Term) (w : ùïé¬∑) ‚Üí Set
T ‚áì T' at w = Œ£ ‚Ñï (Œª n ‚Üí steps n T w ‚â° T')
infix 30 _‚áì_at_


-- T computes to T' in all extensions of w
_‚áõ_at_ : (T T' : Term) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T ‚áõ T' at w = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (T ‚áì T' at w'))
infix 30 _‚áõ_at_


‚áì-refl : (T : Term) (w : ùïé¬∑) ‚Üí T ‚áì T at w
‚áì-refl T w = (0 , refl)

-- values compute to themselves
stepVal : (a : Term) (w : ùïé¬∑) ‚Üí isValue a ‚Üí step a w ‚â° just a
stepVal NAT w v = refl
stepVal QNAT w v = refl
stepVal (LT a b) w v = refl
stepVal (QLT a b) w v = refl
stepVal (NUM x) w v = refl
stepVal (PI a a‚ÇÅ) w v = refl
stepVal (LAMBDA a) w v = refl
stepVal (SUM a a‚ÇÅ) w v = refl
stepVal (PAIR a a‚ÇÅ) w v = refl
stepVal (SET a a‚ÇÅ) w v = refl
stepVal (UNION a a‚ÇÅ) w v = refl
stepVal (INL a) w v = refl
stepVal (INR a) w v = refl
stepVal (EQ a a‚ÇÅ a‚ÇÇ) w v = refl
stepVal AX w v = refl
stepVal FREE w v = refl
stepVal (CS x) w v = refl
stepVal (TSQUASH a) w v = refl
stepVal (DUM a) w v = refl
stepVal (FFDEFS a a‚ÇÅ) w v = refl
stepVal (UNIV x) w v = refl
stepVal (LIFT x) w v = refl
stepVal (LOWER a) w v = refl
stepVal (SHRINK a) w v = refl

stepsVal : (a : Term) (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isValue a ‚Üí steps n a w ‚â° a
stepsVal a w 0 v = refl
stepsVal a w (suc n) v rewrite stepVal a w v = stepsVal a w n v

compVal : (a b : Term) (w : ùïé¬∑) ‚Üí a ‚áì b at w ‚Üí isValue a ‚Üí a ‚â° b
compVal a b w (n , c) v rewrite stepsVal a w n v = c



postulate
  -- Howe's computational equivalence relation
  _‚àº_at_ : (T T' : Term) (w : ùïé¬∑) ‚Üí Set
  -- ‚àº is an equivalence relation
  ‚àº-refl : {a : Term} {w : ùïé¬∑} ‚Üí a ‚àº a at w
  ‚àº-sym : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚àº b at w ‚Üí b ‚àº a at w
  ‚àº-trans : {a b c : Term} {w : ùïé¬∑} ‚Üí a ‚àº b at w ‚Üí b ‚àº c at w ‚Üí a ‚àº c at w
  -- includes ‚áì
  ‚áì‚Üí‚àº : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚áì b at w ‚Üí a ‚àº b at w
  -- states that the argument does not contain any definition or choice sequence
  nodefs : Term ‚Üí Set
infix 30 _‚àº_at_

-- T computationally equivalent to T' in all extensions of w
_‚âà_at_ : (T T' : Term) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T ‚âà T' at w = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (T ‚àº T' at w'))
infix 30 _‚âà_at_

‚âà-refl : {a : Term} {w : ùïé¬∑} ‚Üí a ‚âà a at w
‚âà-refl {a} {w} w1 e1 = lift ‚àº-refl

‚âà-sym : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚âà b at w ‚Üí b ‚âà a at w
‚âà-sym {a} {b} {w} h w1 e1 = lift (‚àº-sym (lower (h w1 e1)))

‚âà-trans : {a b c : Term} {w : ùïé¬∑} ‚Üí a ‚âà b at w ‚Üí b ‚âà c at w ‚Üí a ‚âà c at w
‚âà-trans {a} {b} {c} {w} h q w1 e1 = lift (‚àº-trans (lower (h w1 e1)) (lower (q w1 e1)))

‚âà-‚àº : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚âà b at w ‚Üí a ‚àº b at w
‚âà-‚àº {a} {b} {w} h = lower (h w (‚äë-refl¬∑ w))


compAllRefl : (T : Term) (w : ùïé¬∑) ‚Üí T ‚áõ T at w
compAllRefl T w =  Œª w' e ‚Üí lift (‚áì-refl T w')

compAllVal : {a b : Term} {w : ùïé¬∑} ‚Üí a ‚áõ b at w ‚Üí isValue a ‚Üí a ‚â° b
compAllVal {a} {b} {w} c i = let c' = c _ (‚äë-refl¬∑ w) in compVal _ _ _ (lower c') i

-- t1 and t2 compute to the same number and stay the same number in all extensions
strongMonEq : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
strongMonEq w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí t1 ‚áõ (NUM n) at w √ó t2 ‚áõ (NUM n) at w)


‚áìsame‚Ñï : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set
‚áìsame‚Ñï w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí t1 ‚áì (NUM n) at w √ó t2 ‚áì (NUM n) at w)


-- t1 and t2 compute to the same number but that number can change over time
weakMonEq : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
weakMonEq w t1 t2 = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (‚áìsame‚Ñï w' t1 t2))


weak‚Ñï : (w : ùïé¬∑) (t : Term) ‚Üí Set(lsuc(L))
weak‚Ñï w t = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí t ‚áì NUM n at w')))



weak‚ÑïM : (w : ùïé¬∑) (f : ùïé¬∑ ‚Üí Maybe Term) ‚Üí Set(lsuc(L))
weak‚ÑïM w f = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ Term (Œª t ‚Üí f w' ‚â° just t √ó Œ£ ‚Ñï (Œª n ‚Üí t ‚áì NUM n at w'))))


‚áõto-same-CS : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
‚áõto-same-CS w t1 t2 = Œ£ Name (Œª n ‚Üí t1 ‚áõ (CS n) at w √ó t2 ‚áõ (CS n) at w)


<NUM-pair : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set
<NUM-pair w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª m ‚Üí t1 ‚áì (NUM n) at w √ó t2 ‚áì (NUM m) at w √ó n < m))


lift-<NUM-pair : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
lift-<NUM-pair w t1 t2 = Lift {0‚Ñì} (lsuc(L)) (<NUM-pair w t1 t2)


‚áõ-mon : {a b : Term} {w2 w1 : ùïé¬∑}
           ‚Üí w1 ‚äë¬∑ w2
           ‚Üí a ‚áõ b at w1
           ‚Üí a ‚áõ b at w2
‚áõ-mon {a} {b} {w2} {w1} ext c w' e' = c w' (‚äë-trans¬∑ ext e')



maybeStep : (t : Term) (w : ùïé¬∑) ‚Üí Term
maybeStep t w with step t w
... | just u = u
... | nothing = t

stepsR : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí Term
stepsR 0 t w = t
stepsR (suc n) t w = maybeStep (stepsR n t w) w


step‚äé : (t : Term) (w : ùïé¬∑) ‚Üí (Œ£ Term (Œª u ‚Üí step t w ‚â° just u)) ‚äé step t w ‚â° nothing
step‚äé t w with step t w
... | just u = inj‚ÇÅ (u , refl)
... | nothing = inj‚ÇÇ refl

steps‚â° : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí steps (suc n) t w ‚â° maybeStep (steps n t w) w
steps‚â° 0 t w with step t w
... | just u = refl
... | nothing = refl
steps‚â° (suc n) t w with step‚äé t w
... | inj‚ÇÅ (u , p) rewrite p | steps‚â° n u w = refl
... | inj‚ÇÇ p rewrite p | p = refl


steps‚â°stepsR : (n : ‚Ñï) (t : Term) (w : ùïé¬∑) ‚Üí steps n t w ‚â° stepsR n t w
steps‚â°stepsR 0 t w = refl
steps‚â°stepsR (suc n) t w rewrite sym (steps‚â°stepsR n t w) | steps‚â° n t w = refl


step-APPLY-CS : (t : Term) (w : ùïé¬∑) (k : ‚Ñï) (name : Name)
                ‚Üí getT k name w ‚â° just t
                ‚Üí steps 1 (APPLY (CS name) (NUM k)) w ‚â° t
step-APPLY-CS t w k name gc rewrite gc = refl



step-APPLY-CS-¬¨NUM : (name : Name) (a b : Term) (w : ùïé¬∑)
                     ‚Üí ((n : ‚Ñï) ‚Üí ¬¨ a ‚â° NUM n)
                     ‚Üí step a w ‚â° just b
                     ‚Üí step (APPLY (CS name) a) w ‚â° just (APPLY (CS name) b)
step-APPLY-CS-¬¨NUM name NAT b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name QNAT b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LT a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (QLT a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (NUM x) b w c s rewrite sym (just-inj s) = ‚ä•-elim (c x refl)
step-APPLY-CS-¬¨NUM name (PI a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LAMBDA a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (APPLY a a‚ÇÅ) b w c s rewrite s = refl
step-APPLY-CS-¬¨NUM name (FIX a) b w c s rewrite s = refl
step-APPLY-CS-¬¨NUM name (SUM a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (PAIR a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (SET a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (UNION a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (INL a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (INR a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (EQ a a‚ÇÅ a‚ÇÇ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name AX b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name FREE b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (CS x) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (TSQUASH a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (DUM a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (FFDEFS a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (UNIV x) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LIFT a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LOWER a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (SHRINK a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (DECIDE a x y) b w c s rewrite s = refl
step-APPLY-CS-¬¨NUM name (SPREAD a x) b w c s rewrite s = refl

Œ£-steps-APPLY-CS‚â§ : (n : ‚Ñï) (a b : Term) (w : ùïé¬∑) (name : Name)
                 ‚Üí steps n a w ‚â° b
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) b)
Œ£-steps-APPLY-CS‚â§ 0 a b w name h rewrite h = (0 , ‚â§-refl , refl)
Œ£-steps-APPLY-CS‚â§ (suc n) a b w name h with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p with is-NUM a
...                          | inj‚ÇÅ (k , q) rewrite q | sym (just-inj p) | stepsVal (NUM k) w n tt | sym h = (0 , _‚â§_.z‚â§n , refl)
...                          | inj‚ÇÇ q = (suc m , _‚â§_.s‚â§s l , g)
  where
    ms : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) u) w ‚â° APPLY (CS name) b)
    ms = Œ£-steps-APPLY-CS‚â§ n u b w name h

    m : ‚Ñï
    m = proj‚ÇÅ ms

    l : m ‚â§ n
    l = proj‚ÇÅ (proj‚ÇÇ ms)

    s : steps m (APPLY (CS name) u) w ‚â° APPLY (CS name) b
    s = proj‚ÇÇ (proj‚ÇÇ ms)

    g : steps (suc m) (APPLY (CS name) a) w ‚â° APPLY (CS name) b
    g rewrite step-APPLY-CS-¬¨NUM name a u w q p = s
Œ£-steps-APPLY-CS‚â§ (suc n) a b w name h | inj‚ÇÇ p rewrite p | h = (0 , _‚â§_.z‚â§n , refl)


Œ£-steps-APPLY-CS : (n : ‚Ñï) (a t : Term) (w : ùïé¬∑) (k : ‚Ñï) (name : Name)
                 ‚Üí steps n a w ‚â° NUM k
                 ‚Üí getT k name w ‚â° just t
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí steps m (APPLY (CS name) a) w ‚â° t)
Œ£-steps-APPLY-CS n a t w k name h gc = (suc m , g)
  where
    ms : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) (NUM k))
    ms = Œ£-steps-APPLY-CS‚â§ n a (NUM k) w name h

    m : ‚Ñï
    m = proj‚ÇÅ ms

    l : m ‚â§ n
    l = proj‚ÇÅ (proj‚ÇÇ ms)

    s : steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) (NUM k)
    s = proj‚ÇÇ (proj‚ÇÇ ms)

    g : steps (suc m) (APPLY (CS name) a) w ‚â° t
    g rewrite steps‚â° m (APPLY (CS name) a) w | s | gc = refl


step-steps-trans : {w : ùïé¬∑} {a b c : Term} {n : ‚Ñï} ‚Üí step a w ‚â° just b ‚Üí steps n b w ‚â° c ‚Üí steps (suc n) a w ‚â° c
step-steps-trans {w} {a} {b} {c} {n} c‚ÇÅ c‚ÇÇ rewrite c‚ÇÅ = c‚ÇÇ



step-‚áì-trans : {w : ùïé¬∑} {a b c : Term} ‚Üí step a w ‚â° just b ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
step-‚áì-trans {w} {a} {b} {c} c‚ÇÅ (n , c‚ÇÇ) = suc n , step-steps-trans {w} {a} {b} {c} {n} c‚ÇÅ c‚ÇÇ



steps-‚áì-trans : {w : ùïé¬∑} {a b c : Term} (n : ‚Ñï) ‚Üí steps n a w ‚â° b ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
steps-‚áì-trans {w} {a} {b} {c} 0 c‚ÇÅ c‚ÇÇ rewrite c‚ÇÅ = c‚ÇÇ
steps-‚áì-trans {w} {a} {b} {c} (suc n) c‚ÇÅ c‚ÇÇ with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p = step-‚áì-trans p (steps-‚áì-trans n c‚ÇÅ c‚ÇÇ)
... | inj‚ÇÇ p rewrite p | c‚ÇÅ = c‚ÇÇ


‚áì-trans : {w : ùïé¬∑} {a b c : Term} ‚Üí a ‚áì b at w ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
‚áì-trans {w} {a} {b} {c} (n , c‚ÇÅ) c‚ÇÇ = steps-‚áì-trans n c‚ÇÅ c‚ÇÇ



‚áì-APPLY-CS : (w : ùïé¬∑) (a b : Term) (name : Name)
             ‚Üí a ‚áì b at w
             ‚Üí (APPLY (CS name) a) ‚áì (APPLY (CS name) b) at w
‚áì-APPLY-CS w a b name (n , c) = fst c' , snd (snd c')
  where
    c' : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) b)
    c' = Œ£-steps-APPLY-CS‚â§ n a b w name c



{--‚áõ-APPLY-CS : (w : ùïé¬∑) (name : Name) (a t : Term) (k : ‚Ñï)
              ‚Üí getChoice¬∑ k name w ‚â° just t
              ‚Üí a ‚áõ NUM k at w
              ‚Üí APPLY (CS name) a ‚áõ t at w
‚áõ-APPLY-CS w name a t k gc c w1 e1 =
  let (n , c1) = lower (c w1 e1) in
  lift (Œ£-steps-APPLY-CS n a t w1 k name c1 (getChoice‚äë¬∑ w w1 k name t e1 gc))
--}


_#‚áì_at_ : (T T' : CTerm) (w : ùïé¬∑) ‚Üí Set
T #‚áì T' at w = ‚åú T ‚åù ‚áì ‚åú T' ‚åù at w
infix 30 _#‚áì_at_



_#‚áõ_at_ : (T T' : CTerm) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T #‚áõ T' at w = ‚åú T ‚åù ‚áõ ‚åú T' ‚åù at w
infix 30 _#‚áõ_at_



#compAllRefl : (T : CTerm) (w : ùïé¬∑) ‚Üí T #‚áõ T at w
#compAllRefl (ct T cT) w i = compAllRefl T w i


#compAllVal : {a b : CTerm} {w : ùïé¬∑} ‚Üí a #‚áõ b at w ‚Üí #isValue a ‚Üí a ‚â° b
#compAllVal {ct a ca} {ct b cb} {w} c i = CTerm‚â° (compAllVal c i)


#strongMonEq : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#strongMonEq w t1 t2 = strongMonEq w ‚åú t1 ‚åù ‚åú t2 ‚åù


#weakMonEq : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#weakMonEq w t1 t2 = weakMonEq w ‚åú t1 ‚åù ‚åú t2 ‚åù


#weakMonEq‚Üí : {w : ùïé¬∑} {a b : CTerm}
               ‚Üí #weakMonEq w a b
               ‚Üí Œ£ ‚Ñï (Œª n ‚Üí a #‚áì #NUM n at w √ó b #‚áì #NUM n at w)
#weakMonEq‚Üí {w} {a} {B} h = lower (h w (‚äë-refl¬∑ w))


#weakMonEq-#NUM : (w : ùïé¬∑) (k : ‚Ñï) ‚Üí #weakMonEq w (#NUM k) (#NUM k)
#weakMonEq-#NUM w k w' e' = lift (k , ‚áì-refl (NUM k) w' , ‚áì-refl (NUM k) w')


#strongMonEq-#NUM : (w : ùïé¬∑) (k : ‚Ñï) ‚Üí #strongMonEq w (#NUM k) (#NUM k)
#strongMonEq-#NUM w k = k , compAllRefl (NUM k) w , compAllRefl (NUM k) w



strongMonEq-refl : {w : ùïé¬∑} {a b : Term}
                  ‚Üí strongMonEq w a b
                  ‚Üí strongMonEq w a a
strongMonEq-refl {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÅ , c‚ÇÅ


strongMonEq-refl-rev : {w : ùïé¬∑} {a b : Term}
                  ‚Üí strongMonEq w a b
                  ‚Üí strongMonEq w b b
strongMonEq-refl-rev {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÇ , c‚ÇÇ




weakMonEq-refl : {w : ùïé¬∑} {a b : Term}
                 ‚Üí weakMonEq w a b
                 ‚Üí weakMonEq w a a
weakMonEq-refl {w} {a} {b} wm w1 e1 = lift (fst z , fst (snd z) , fst (snd z))
  where
    z : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1)
    z = lower (wm w1 e1)


weakMonEq-refl-rev : {w : ùïé¬∑} {a b : Term}
                     ‚Üí weakMonEq w a b
                     ‚Üí weakMonEq w b b
weakMonEq-refl-rev {w} {a} {b} wm w1 e1 = lift (fst z , snd (snd z) , snd (snd z))
  where
    z : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1)
    z = lower (wm w1 e1)



strongMonEq-sym : {w : ùïé¬∑} {a b : Term}
                  ‚Üí strongMonEq w a b
                  ‚Üí strongMonEq w b a
strongMonEq-sym {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , c‚ÇÇ , c‚ÇÅ



step‚â°nothing-steps : (w : ùïé¬∑) (a : Term) (n : ‚Ñï) ‚Üí step a w ‚â° nothing ‚Üí steps n a w ‚â° a
step‚â°nothing-steps w a 0 h = refl
step‚â°nothing-steps w a (suc n) h rewrite h = refl


steps-+ : (n m : ‚Ñï) (a : Term) (w : ùïé¬∑) ‚Üí steps (n + m) a w ‚â° steps m (steps n a w) w
steps-+ 0 m a w = refl
steps-+ (suc n) m a w with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p = steps-+ n m u w
... | inj‚ÇÇ p rewrite p rewrite step‚â°nothing-steps w a m p = refl



‚â§-Œ£+ : {n m : ‚Ñï} ‚Üí n ‚â§ m ‚Üí Œ£ ‚Ñï (Œª k ‚Üí m ‚â° n + k)
‚â§-Œ£+ {0} {m} _‚â§_.z‚â§n = (m , refl)
‚â§-Œ£+ {suc n} {suc m} (_‚â§_.s‚â§s le) with ‚â§-Œ£+ le
... | (k , p) rewrite p = k , refl



steps-val-det : (w : ùïé¬∑) (a v‚ÇÅ v‚ÇÇ : Term) (n m : ‚Ñï) ‚Üí isValue v‚ÇÅ ‚Üí steps n a w ‚â° v‚ÇÅ ‚Üí steps m a w ‚â° v‚ÇÇ ‚Üí n ‚â§ m ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
steps-val-det w a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ c‚ÇÅ c‚ÇÇ p with ‚â§-Œ£+ p
... | (k , q) rewrite q | steps-+ n k a w | c‚ÇÇ | c‚ÇÅ | stepsVal v‚ÇÅ w k isv‚ÇÅ = c‚ÇÇ


‚áì-val-det : {w : ùïé¬∑} {a v‚ÇÅ v‚ÇÇ : Term} ‚Üí isValue v‚ÇÅ ‚Üí isValue v‚ÇÇ ‚Üí a ‚áì v‚ÇÅ at w ‚Üí a ‚áì v‚ÇÇ at w ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
‚áì-val-det {w} {a} {v‚ÇÅ} {v‚ÇÇ} isv‚ÇÅ isv‚ÇÇ (n , c‚ÇÅ) (m , c‚ÇÇ) with n ‚â§? m
... | yes p = steps-val-det w a v‚ÇÅ v‚ÇÇ n m isv‚ÇÅ c‚ÇÅ c‚ÇÇ p
... | no p = sym (steps-val-det w a v‚ÇÇ v‚ÇÅ m n isv‚ÇÇ c‚ÇÇ c‚ÇÅ (‚â∞‚áí‚â• p))


‚áõ-val-det : {w : ùïé¬∑} {a v‚ÇÅ v‚ÇÇ : Term} ‚Üí isValue v‚ÇÅ ‚Üí isValue v‚ÇÇ ‚Üí a ‚áõ v‚ÇÅ at w ‚Üí a ‚áõ v‚ÇÇ at w ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
‚áõ-val-det {w} {a} {v‚ÇÅ} {v‚ÇÇ} isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ =
  ‚áì-val-det isv‚ÇÅ isv‚ÇÇ h1 h2
  where
    h1 : a ‚áì v‚ÇÅ at w
    h1 = let c = c‚ÇÅ w (‚äë-refl¬∑ w) in Level.lower c

    h2 : a ‚áì v‚ÇÇ at w
    h2 = let c = c‚ÇÇ w (‚äë-refl¬∑ w) in Level.lower c


#‚áõ-val-det : {w : ùïé¬∑} {a v‚ÇÅ v‚ÇÇ : CTerm} ‚Üí #isValue v‚ÇÅ ‚Üí #isValue v‚ÇÇ ‚Üí a #‚áõ v‚ÇÅ at w ‚Üí a #‚áõ v‚ÇÇ at w ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
#‚áõ-val-det {w} {a} {v‚ÇÅ} {v‚ÇÇ} isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ = CTerm‚â° (‚áõ-val-det isv‚ÇÅ isv‚ÇÇ c‚ÇÅ c‚ÇÇ)



strongMonEq-trans : {w : ùïé¬∑} {a b c : Term}
                    ‚Üí strongMonEq w a b
                    ‚Üí strongMonEq w b c
                    ‚Üí strongMonEq w a c
strongMonEq-trans {w} {a} {b} {c} (n , c‚ÇÅ , c‚ÇÇ) (m , d‚ÇÅ , d‚ÇÇ) rewrite NUMinj (‚áõ-val-det tt tt d‚ÇÅ c‚ÇÇ) = n , c‚ÇÅ , d‚ÇÇ



weakMonEq-sym : {w : ùïé¬∑} {a b : Term}
                ‚Üí weakMonEq w a b
                ‚Üí weakMonEq w b a
weakMonEq-sym {w} {a} {b} h w1 e1 = lift (fst z‚ÇÇ , snd (snd z‚ÇÇ) , fst (snd z‚ÇÇ))
  where
    z‚ÇÅ : Lift (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1))
    z‚ÇÅ = h w1 e1

    z‚ÇÇ : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì NUM n at w1 √ó b ‚áì NUM n at w1)
    z‚ÇÇ = lower z‚ÇÅ



weakMonEq-trans : {w : ùïé¬∑} {a b c : Term}
                  ‚Üí weakMonEq w a b
                  ‚Üí weakMonEq w b c
                  ‚Üí weakMonEq w a c
weakMonEq-trans {w} {a} {b} {c} weak1 weak2 w1 e1 = lift (n , c‚ÇÅ , d)
  where
    wk1 : Œ£ ‚Ñï (Œª n ‚Üí a ‚áì (NUM n) at w1 √ó b ‚áì (NUM n) at w1)
    wk1 = lower (weak1 w1 e1)

    n : ‚Ñï
    n = fst wk1

    c‚ÇÅ : a ‚áì (NUM n) at w1
    c‚ÇÅ = fst (snd wk1)

    c‚ÇÇ : b ‚áì (NUM n) at w1
    c‚ÇÇ = snd (snd wk1)

    wk2 : Œ£ ‚Ñï (Œª n ‚Üí b ‚áì (NUM n) at w1 √ó c ‚áì (NUM n) at w1)
    wk2 = lower (weak2 w1 e1)

    m : ‚Ñï
    m = fst wk2

    d‚ÇÅ : b ‚áì (NUM m) at w1
    d‚ÇÅ = fst (snd wk2)

    d‚ÇÇ : c ‚áì (NUM m) at w1
    d‚ÇÇ = snd (snd wk2)

    d : c ‚áì (NUM n) at w1
    d rewrite NUMinj (‚áì-val-det tt tt c‚ÇÇ d‚ÇÅ) = d‚ÇÇ



‚â°‚Üí#compAllRefl : {a b : CTerm} (w : ùïé¬∑) ‚Üí a ‚â° b ‚Üí a #‚áõ b at w
‚â°‚Üí#compAllRefl {a} {b} w e rewrite e = #compAllRefl b w


{--
all> : (n : ‚Ñï) (l : List ‚Ñï) ‚Üí Set
all> n l = (v : ‚Ñï) ‚Üí v ‚àà l ‚Üí n < v


all>‚à∑ : {n x : ‚Ñï} {l : List ‚Ñï} ‚Üí all> n (x ‚à∑ l) ‚Üí all> n l
all>‚à∑ {n} {x} {l} i v j = i v (there j)


all>++L : {n : ‚Ñï} {l k : List ‚Ñï} ‚Üí all> n (l ++ k) ‚Üí all> n l
all>++L {n} {l} {k} i v j = i v (‚àà-++‚Å∫À° j)


all>++R : {n : ‚Ñï} {l k : List ‚Ñï} ‚Üí all> n (l ++ k) ‚Üí all> n k
all>++R {n} {l} {k} i v j = i v (‚àà-++‚Å∫ ≥ _ j)
--}


¬¨isValue-APPLY : (a b : Term) ‚Üí ¬¨ isValue (APPLY a b)
¬¨isValue-APPLY a b ()



#lift-<NUM-pair : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#lift-<NUM-pair w t1 t2 = lift-<NUM-pair w ‚åú t1 ‚åù ‚åú t2 ‚åù


#‚áõto-same-CS : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#‚áõto-same-CS w t1 t2 = ‚áõto-same-CS w ‚åú t1 ‚åù ‚åú t2 ‚åù


‚áõ-APPLY-CS : (w : ùïé¬∑) (a b : Term) (name : Name)
             ‚Üí a ‚áõ b at w
             ‚Üí (APPLY (CS name) a) ‚áõ (APPLY (CS name) b) at w
‚áõ-APPLY-CS w a b name comp w1 e1 = lift (‚áì-APPLY-CS w1 a b name (lower (comp w1 e1)))


#‚áõ-APPLY-CS : {w : ùïé¬∑} {a b : CTerm} (name : Name)
             ‚Üí a #‚áõ b at w
             ‚Üí (#APPLY (#CS name) a) #‚áõ (#APPLY (#CS name) b) at w
#‚áõ-APPLY-CS {w} {a} {b} name comp w1 e1 = ‚áõ-APPLY-CS w ‚åú a ‚åù ‚åú b ‚åù name comp w1 e1



‚áõ-trans : {w : ùïé¬∑} {a b c : Term} ‚Üí a ‚áõ b at w ‚Üí b ‚áõ c at w ‚Üí a ‚áõ c at w
‚áõ-trans {w} {a} {b} {c} c‚ÇÅ c‚ÇÇ w1 e1 = lift (‚áì-trans (lower (c‚ÇÅ w1 e1)) (lower (c‚ÇÇ w1 e1)))


#strongMonEq-#‚áõ-left-rev : {w : ùïé¬∑} {a b c : CTerm}
                            ‚Üí a #‚áõ b at w
                            ‚Üí #strongMonEq w b c
                            ‚Üí #strongMonEq w a c
#strongMonEq-#‚áõ-left-rev {w} {a} {b} {c} comp (n , c‚ÇÅ , c‚ÇÇ) = n , ‚áõ-trans comp c‚ÇÅ , c‚ÇÇ


#weakMonEq-#‚áõ-left-rev : {w : ùïé¬∑} {a b c : CTerm}
                          ‚Üí a #‚áõ b at w
                          ‚Üí #weakMonEq w b c
                          ‚Üí #weakMonEq w a c
#weakMonEq-#‚áõ-left-rev {w} {a} {b} {c} comp h w1 e1 =
  lift (fst (lower (h w1 e1)) , ‚áì-trans (lower (comp w1 e1)) (fst (snd (lower (h w1 e1)))) , snd (snd (lower (h w1 e1))))


#‚áõto-same-CS-#‚áõ-left-rev : {w : ùïé¬∑} {a b c : CTerm}
                             ‚Üí a #‚áõ b at w
                             ‚Üí #‚áõto-same-CS w b c
                             ‚Üí #‚áõto-same-CS w a c
#‚áõto-same-CS-#‚áõ-left-rev {w} {a} {b} {c} comp (name , c‚ÇÅ , c‚ÇÇ) = name , ‚áõ-trans comp c‚ÇÅ , c‚ÇÇ


‚Üí-step-APPLY : {w : ùïé¬∑} {a b : Term} (c : Term)
                ‚Üí step a w ‚â° just b
                ‚Üí APPLY a c ‚áì APPLY b c at w
‚Üí-step-APPLY {w} {NAT} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {QNAT} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {LT a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {QLT a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {NUM x} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {PI a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {LAMBDA a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {APPLY a a‚ÇÅ} {b} c comp = 1 , z
  where
    z : steps 1 (APPLY (APPLY a a‚ÇÅ) c) w ‚â° APPLY b c
    z rewrite comp = refl
‚Üí-step-APPLY {w} {FIX a} {b} c comp = 1 , z
  where
    z : steps 1 (APPLY (FIX a) c) w ‚â° APPLY b c
    z rewrite comp = refl
‚Üí-step-APPLY {w} {SUM a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {PAIR a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {SET a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {UNION a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {INL a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {INR a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {EQ a a‚ÇÅ a‚ÇÇ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {AX} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {FREE} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {CS x} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {TSQUASH a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {DUM a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {FFDEFS a a‚ÇÅ} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {UNIV x} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {LIFT a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {LOWER a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {SHRINK a} {b} c comp rewrite sym (just-inj comp) = 0 , refl
‚Üí-step-APPLY {w} {DECIDE a x y} {b} c comp = 1 , z
  where
    z : steps 1 (APPLY (DECIDE a x y) c) w ‚â° APPLY b c
    z rewrite comp = refl
‚Üí-step-APPLY {w} {SPREAD a x} {b} c comp = 1 , z
  where
    z : steps 1 (APPLY (SPREAD a x) c) w ‚â° APPLY b c
    z rewrite comp = refl


‚Üí-steps-APPLY : {w : ùïé¬∑} {a b : Term} (n : ‚Ñï) (c : Term)
                ‚Üí steps n a w ‚â° b
                ‚Üí APPLY a c ‚áì APPLY b c at w
‚Üí-steps-APPLY {w} {a} {b} 0 c comp rewrite comp = ‚áì-refl _ _
‚Üí-steps-APPLY {w} {a} {b} (suc n) c comp with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p = ‚áì-trans (‚Üí-step-APPLY c p) (‚Üí-steps-APPLY n c comp)
... | inj‚ÇÇ p rewrite p | comp = 0 , refl


‚Üí-#‚áõ-#APPLY : {w : ùïé¬∑} {a b : CTerm} (c : CTerm)
                ‚Üí a #‚áõ b at w
                ‚Üí #APPLY a c #‚áõ #APPLY b c at w
‚Üí-#‚áõ-#APPLY {w} {a} {b} c comp w1 e1 = lift (‚Üí-steps-APPLY (fst (lower (comp w1 e1))) ‚åú c ‚åù (snd (lower (comp w1 e1))))


‚áõ‚Üí‚âà : {w : ùïé¬∑} {a b : Term}
        ‚Üí a ‚áõ b at w
        ‚Üí a ‚âà b at w
‚áõ‚Üí‚âà {w} {a} {b} comp w1 e1 = lift (‚áì‚Üí‚àº (lower (comp w1 e1)))



val-‚áì‚Üí : {w : ùïé¬∑} {a b v : Term}
            ‚Üí isValue v
            ‚Üí a ‚áì b at w
            ‚Üí a ‚áì v at w
            ‚Üí b ‚áì v at w
val-‚áì‚Üí {w} {a} {b} {v} isv (m , comp1) (n , comp2) with n ‚â§? m
... | yes p rewrite sym (steps-val-det w a v b n m isv comp2 comp1 p) = 0 , refl
... | no p with ‚â§-Œ£+ (‚â∞‚áí‚â• p)
... |   (k , q) rewrite q | steps-+ m k a w | comp1 = k , comp2


val-‚áõ‚Üí : {w : ùïé¬∑} {a b v : Term}
            ‚Üí isValue v
            ‚Üí a ‚áõ b at w
            ‚Üí a ‚áõ v at w
            ‚Üí b ‚áõ v at w
val-‚áõ‚Üí {w} {a} {b} {v} isv comp1 comp2 w1 e1 = lift (val-‚áì‚Üí isv (lower (comp1 w1 e1)) (lower (comp2 w1 e1)))


val-#‚áõ‚Üí : {w : ùïé¬∑} {a b v : CTerm}
            ‚Üí #isValue v
            ‚Üí a #‚áõ b at w
            ‚Üí a #‚áõ v at w
            ‚Üí b #‚áõ v at w
val-#‚áõ‚Üí {w} {a} {b} {v} isv comp1 comp2 = val-‚áõ‚Üí isv comp1 comp2



#strongMonEq-#‚áõ-left : {w : ùïé¬∑} {a b c : CTerm}
                        ‚Üí a #‚áõ b at w
                        ‚Üí #strongMonEq w a c
                        ‚Üí #strongMonEq w b c
#strongMonEq-#‚áõ-left {w} {a} {b} {c} comp (n , c‚ÇÅ , c‚ÇÇ) = n , val-#‚áõ‚Üí {w} {a} {b} {#NUM n} tt comp c‚ÇÅ , c‚ÇÇ


#weakMonEq-#‚áõ-left : {w : ùïé¬∑} {a b c : CTerm}
                      ‚Üí a #‚áõ b at w
                      ‚Üí #weakMonEq w a c
                      ‚Üí #weakMonEq w b c
#weakMonEq-#‚áõ-left {w} {a} {b} {c} comp h w1 e1 =
  lift (fst (lower (h w1 e1)) , val-‚áì‚Üí tt (lower (comp w1 e1)) (fst (snd (lower (h w1 e1)))) , snd (snd (lower (h w1 e1))))


#‚áõto-same-CS-#‚áõ-left : {w : ùïé¬∑} {a b c : CTerm}
                         ‚Üí a #‚áõ b at w
                         ‚Üí #‚áõto-same-CS w a c
                         ‚Üí #‚áõto-same-CS w b c
#‚áõto-same-CS-#‚áõ-left {w} {a} {b} {c} comp (name , c‚ÇÅ , c‚ÇÇ) = name , val-#‚áõ‚Üí {w} {a} {b} {#CS name} tt comp c‚ÇÅ , c‚ÇÇ


#compVal : {a b : CTerm} {w : ùïé¬∑} ‚Üí a #‚áì b at w ‚Üí #isValue a ‚Üí a ‚â° b
#compVal {a} {b} {w} c v = CTerm‚â° (compVal ‚åú a ‚åù ‚åú b ‚åù w c v)


step-‚áì-ASSERT‚ÇÅ : {w : ùïé¬∑} {a b : Term}
                 ‚Üí step a w ‚â° just b
                 ‚Üí ASSERT‚ÇÅ a ‚áì ASSERT‚ÇÅ b at w
step-‚áì-ASSERT‚ÇÅ {w} {NAT} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {QNAT} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {LT a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {QLT a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {NUM x} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {PI a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {LAMBDA a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {APPLY a a‚ÇÅ} {b} comp = 1 , z
  where
    z : steps 1 (ASSERT‚ÇÅ (APPLY a a‚ÇÅ)) w ‚â° ASSERT‚ÇÅ b
    z rewrite comp = refl
step-‚áì-ASSERT‚ÇÅ {w} {FIX a} {b} comp = 1 , z
  where
    z : steps 1 (ASSERT‚ÇÅ (FIX a)) w ‚â° ASSERT‚ÇÅ b
    z rewrite comp = refl
step-‚áì-ASSERT‚ÇÅ {w} {SUM a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {PAIR a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {SET a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {UNION a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {INL a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {INR a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {DECIDE a a‚ÇÅ a‚ÇÇ} {b} comp = 1 , z
  where
    z : steps 1 (ASSERT‚ÇÅ (DECIDE a a‚ÇÅ a‚ÇÇ)) w ‚â° ASSERT‚ÇÅ b
    z rewrite comp = refl
step-‚áì-ASSERT‚ÇÅ {w} {SPREAD a a‚ÇÅ} {b} comp = 1 , z
  where
    z : steps 1 (ASSERT‚ÇÅ (SPREAD a a‚ÇÅ)) w ‚â° ASSERT‚ÇÅ b
    z rewrite comp = refl
step-‚áì-ASSERT‚ÇÅ {w} {EQ a a‚ÇÅ a‚ÇÇ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {AX} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {FREE} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {CS x} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {TSQUASH a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {DUM a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {FFDEFS a a‚ÇÅ} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {UNIV x} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {LIFT a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {LOWER a} {b} comp rewrite sym (just-inj comp) = 0 , refl
step-‚áì-ASSERT‚ÇÅ {w} {SHRINK a} {b} comp rewrite sym (just-inj comp) = 0 , refl



steps-‚áì-ASSERT‚ÇÅ : {w : ùïé¬∑} (n : ‚Ñï) {a b : Term}
                  ‚Üí steps n a w ‚â° b
                  ‚Üí ASSERT‚ÇÅ a ‚áì ASSERT‚ÇÅ b at w
steps-‚áì-ASSERT‚ÇÅ {w} 0 {a} {b} comp rewrite comp = 0 , refl
steps-‚áì-ASSERT‚ÇÅ {w} (suc n) {a} {b} comp with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p = ‚áì-trans (step-‚áì-ASSERT‚ÇÅ p) (steps-‚áì-ASSERT‚ÇÅ n comp)
... | inj‚ÇÇ p rewrite p | comp = 0 , refl


‚áì-ASSERT‚ÇÅ-INL : {w : ùïé¬∑} {a x : Term}
                ‚Üí a ‚áì INL x at w
                ‚Üí ASSERT‚ÇÅ a ‚áì TRUE at w
‚áì-ASSERT‚ÇÅ-INL {w} {a} {x} comp = ‚áì-trans (steps-‚áì-ASSERT‚ÇÅ (fst comp) (snd comp)) (1 , refl)


#‚áõ-ASSERT‚ÇÅ-INL : {w : ùïé¬∑} {a x : CTerm}
                  ‚Üí a #‚áõ #INL x at w
                  ‚Üí #ASSERT‚ÇÅ a #‚áõ #TRUE at w
#‚áõ-ASSERT‚ÇÅ-INL {w} {a} {x} comp w' e = lift (‚áì-ASSERT‚ÇÅ-INL (lower (comp w' e)))


‚áì-ASSERT‚ÇÅ-INR : {w : ùïé¬∑} {a x : Term}
                ‚Üí a ‚áì INR x at w
                ‚Üí ASSERT‚ÇÅ a ‚áì FALSE at w
‚áì-ASSERT‚ÇÅ-INR {w} {a} {x} comp = ‚áì-trans (steps-‚áì-ASSERT‚ÇÅ (fst comp) (snd comp)) (1 , refl)


#‚áõ-ASSERT‚ÇÅ-INR : {w : ùïé¬∑} {a x : CTerm}
                ‚Üí a #‚áõ #INR x at w
                ‚Üí #ASSERT‚ÇÅ a #‚áõ #FALSE at w
#‚áõ-ASSERT‚ÇÅ-INR {w} {a} {x} comp w' e = lift (‚áì-ASSERT‚ÇÅ-INR (lower (comp w' e)))



-- A simpler definition than Howe's computation equivalence relation for now
data ‚àºT : ùïé¬∑ ‚Üí Term ‚Üí Term ‚Üí Set where
  ‚àºT‚Üí : {w : ùïé¬∑} {a b : Term} ‚Üí a ‚áì b at w ‚Üí ‚àºT w a b
  ‚àºT‚Üê : {w : ùïé¬∑} {a b : Term} ‚Üí b ‚áì a at w ‚Üí ‚àºT w a b
  ‚àºT-trans : {w : ùïé¬∑} {a b c : Term} ‚Üí ‚àºT w a b ‚Üí ‚àºT w b c ‚Üí ‚àºT w a c


‚àºC : ùïé¬∑ ‚Üí CTerm ‚Üí CTerm ‚Üí Set
‚àºC w a b = ‚àºT w ‚åú a ‚åù ‚åú b ‚åù


‚âàC : ùïé¬∑ ‚Üí CTerm ‚Üí CTerm ‚Üí Set(lsuc(L))
‚âàC w a b = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (‚àºC w' a b))


‚àºT-sym : {w : ùïé¬∑} {a b : Term} ‚Üí ‚àºT w a b ‚Üí ‚àºT w b a
‚àºT-sym {w} {a} {b} (‚àºT‚Üí x) = ‚àºT‚Üê x
‚àºT-sym {w} {a} {b} (‚àºT‚Üê x) = ‚àºT‚Üí x
‚àºT-sym {w} {a} {b} (‚àºT-trans h h‚ÇÅ) = ‚àºT-trans (‚àºT-sym h‚ÇÅ) (‚àºT-sym h)


‚àºC-sym : {w : ùïé¬∑} {a b : CTerm} ‚Üí ‚àºC w a b ‚Üí ‚àºC w b a
‚àºC-sym {w} {a} {b} h = ‚àºT-sym h


‚âàC-sym : {w : ùïé¬∑} {a b : CTerm} ‚Üí ‚âàC w a b ‚Üí ‚âàC w b a
‚âàC-sym {w} {a} {b} h w1 e1 = lift (‚àºC-sym {w1} {a} {b} (lower (h w1 e1)))


‚àºT-refl : {w : ùïé¬∑} {a : Term} ‚Üí ‚àºT w a a
‚àºT-refl {w} {a} = ‚àºT‚Üí (‚áì-refl a w)


‚àºC-refl : {w : ùïé¬∑} {a : CTerm} ‚Üí ‚àºC w a a
‚àºC-refl {w} {a} = ‚àºT-refl {w} {‚åú a ‚åù}


‚âàC-refl : {w : ùïé¬∑} {a : CTerm} ‚Üí ‚âàC w a a
‚âàC-refl {w} {a} w1 e1 = lift (‚àºC-refl {w1} {a})


‚àºC-trans : {w : ùïé¬∑} {a b c : CTerm} ‚Üí ‚àºC w a b ‚Üí ‚àºC w b c ‚Üí ‚àºC w a c
‚àºC-trans {w} {a} {b} {c} h1 h2 = ‚àºT-trans h1 h2


‚âàC-trans : {w : ùïé¬∑} {a b c : CTerm} ‚Üí ‚âàC w a b ‚Üí ‚âàC w b c ‚Üí ‚âàC w a c
‚âàC-trans {w} {a} {b} {c} h1 h2 w1 e1 = lift (‚àºC-trans {w1} {a} {b} {c} (lower (h1 w1 e1)) (lower (h2 w1 e1)))


‚áì‚Üí‚àºT : {w : ùïé¬∑} {a b : Term} ‚Üí a ‚áì b at w ‚Üí ‚àºT w a b
‚áì‚Üí‚àºT {w} {a} {b} c = ‚àºT‚Üí c


#‚áì‚Üí‚àºC : {w : ùïé¬∑} {a b : CTerm} ‚Üí a #‚áì b at w ‚Üí ‚àºC w a b
#‚áì‚Üí‚àºC {w} {a} {b} c = ‚àºT‚Üí c


#‚áõ‚Üí‚âàC : {w : ùïé¬∑} {a b : CTerm} ‚Üí a #‚áõ b at w ‚Üí ‚âàC w a b
#‚áõ‚Üí‚âàC {w} {a} {b} c w1 e1 = lift (#‚áì‚Üí‚àºC {w1} {a} {b} (lower (c w1 e1)))


‚âàC-‚àºC : {w : ùïé¬∑} {a b : CTerm} ‚Üí ‚âàC w a b ‚Üí ‚àºC w a b
‚âàC-‚àºC {w} {a} {b} h = lower (h w (‚äë-refl¬∑ w))



‚àºT‚Üí‚áì : {w : ùïé¬∑} {a b c : Term} ‚Üí isValue c ‚Üí ‚àºT w a b ‚Üí b ‚áì c at w ‚Üí a ‚áì c at w
‚àºT‚Üí‚áì {w} {a} {b} {c} isv (‚àºT‚Üí x) comp = ‚áì-trans x comp
‚àºT‚Üí‚áì {w} {a} {b} {c} isv (‚àºT‚Üê x) comp = val-‚áì‚Üí isv x comp
‚àºT‚Üí‚áì {w} {a} {b} {c} isv (‚àºT-trans {.w} {.a} {x} {.b} h h‚ÇÅ) comp = ‚àºT‚Üí‚áì isv h (‚àºT‚Üí‚áì isv h‚ÇÅ comp)


‚àºC‚Üí#‚áì : {w : ùïé¬∑} {a b : CTerm} ‚Üí #isValue b ‚Üí ‚àºC w a b ‚Üí a #‚áì b at w
‚àºC‚Üí#‚áì {w} {a} {b} isv h = ‚àºT‚Üí‚áì isv h (‚áì-refl ‚åú b ‚åù w)


‚â°R‚Üí#‚áì : {w : ùïé¬∑} {a b c : CTerm} ‚Üí b ‚â° c ‚Üí a #‚áì b at w ‚Üí a #‚áì c at w
‚â°R‚Üí#‚áì {w} {a} {b} {c} e comp rewrite e = comp


‚â°R‚Üí‚àºC : {w : ùïé¬∑} {a b c : CTerm} ‚Üí b ‚â° c ‚Üí ‚àºC w a b ‚Üí ‚àºC w a c
‚â°R‚Üí‚àºC {w} {a} {b} {c} e comp rewrite e = comp


‚â°R‚Üí‚àºT : {w : ùïé¬∑} {a b c : Term} ‚Üí b ‚â° c ‚Üí ‚àºT w a b ‚Üí ‚àºT w a c
‚â°R‚Üí‚àºT {w} {a} {b} {c} e comp rewrite e = comp


#weakMonEq‚Üí‚âàC : {w : ùïé¬∑} {a b : CTerm} ‚Üí #weakMonEq w a b ‚Üí ‚âàC w a b
#weakMonEq‚Üí‚âàC {w} {a} {b} h w1 e1 =
  lift (‚àºC-trans {w1} {a} {#NUM n} {b}
                 (#‚áì‚Üí‚àºC {w1} {a} {#NUM n} (fst (snd (lower (h w1 e1)))))
                 (‚àºC-sym {w1} {b} {#NUM n} (#‚áì‚Üí‚àºC {w1} {b} {#NUM n} (snd (snd (lower (h w1 e1)))))))
  where
    n : ‚Ñï
    n = fst (lower (h w1 e1))


{--
-- TODO: finish
step-preserves-fvars-APPLY : (w : ùïé¬∑) (f a b : Term) ‚Üí step (APPLY f a) w ‚â° just b ‚Üí fvars b ‚äÜ fvars f ++ fvars a
step-preserves-fvars-APPLY w f a b e {x} i = ?


step-preserves-fvars : (w : ùïé¬∑) (a b : Term) ‚Üí step a w ‚â° just b ‚Üí fvars b ‚äÜ fvars a
step-preserves-fvars w NAT b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w QNAT b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (LT a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (QLT a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (NUM x‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (PI a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (LAMBDA a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (APPLY a a‚ÇÅ) b e {x} i = {!!} -- rewrite sym (just-inj e) = {!!}
step-preserves-fvars w (FIX a) b e {x} i = {!!} -- rewrite sym (just-inj e) = {!!}
step-preserves-fvars w (SUM a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (PAIR a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (SPREAD a a‚ÇÅ) b e {x} i = {!!} --rewrite sym (just-inj e) = {!!}
step-preserves-fvars w (SET a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (UNION a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (INL a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (INR a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (DECIDE a a‚ÇÅ a‚ÇÇ) b e {x} i = {!!} -- rewrite sym (just-inj e) = {!!}
step-preserves-fvars w (EQ a a‚ÇÅ a‚ÇÇ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w AX b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w FREE b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (CS x‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (TSQUASH a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (DUM a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (FFDEFS a a‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (UNIV x‚ÇÅ) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (LIFT a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (LOWER a) b e {x} i rewrite sym (just-inj e) = i
step-preserves-fvars w (SHRINK a) b e {x} i rewrite sym (just-inj e) = i
--}


‚áìsame-bool : ùïé¬∑ ‚Üí Term ‚Üí Term ‚Üí Set
‚áìsame-bool w t1 t2 =
  Œ£ Term (Œª x ‚Üí Œ£ Term (Œª y ‚Üí
  (t1 ‚áì INL x at w √ó t2 ‚áì INL y at w)
  ‚äé
  (t1 ‚áì INR x at w √ó t2 ‚áì INR y at w)))



#‚áìsame-bool : ùïé¬∑ ‚Üí CTerm ‚Üí CTerm ‚Üí Set
#‚áìsame-bool w t1 t2 =
  Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
  (t1 #‚áì #INL x at w √ó t2 #‚áì #INL y at w)
  ‚äé
  (t1 #‚áì #INR x at w √ó t2 #‚áì #INR y at w)))



weakBool : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
weakBool w t1 t2 = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (‚áìsame-bool w' t1 t2))


#weakBool : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#weakBool w t1 t2 = ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (#‚áìsame-bool w' t1 t2))
--weakBool w ‚åú t1 ‚åù ‚åú t2 ‚åù


{--
#weakBool‚Üí : {w : ùïé¬∑} {t1 t2 : CTerm} ‚Üí #weakBool w t1 t2 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (#‚áìsame-bool w' t1 t2))
#weakBool‚Üí {w} {t1} {t2} h w' e = lift (c (snd (snd (lower (h w' e)))))
  where
    x : Term
    x = fst (lower (h w' e))

    y : Term
    y = fst (snd (lower (h w' e)))

--    h' : ‚áìsame-bool w' ‚åú t1 ‚åù ‚åú t2 ‚åù
--    h' = lower (h w' e)

    c : ((‚åú t1 ‚åù ‚áì INL x at w' √ó ‚åú t2 ‚åù ‚áì INL y at w') ‚äé (‚åú t1 ‚åù ‚áì INR x at w' √ó ‚åú t2 ‚åù ‚áì INR y at w')) ‚Üí #‚áìsame-bool w' t1 t2
    c (inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = {!!}
    c (inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = {!!}
--}



strongBool : (w : ùïé¬∑) (t1 t2 : Term) ‚Üí Set(lsuc(L))
strongBool w t1 t2 =
  Œ£ Term (Œª x ‚Üí Œ£ Term (Œª y ‚Üí
  (t1 ‚áõ INL x at w √ó t2 ‚áõ INL y at w)
  ‚äé
  (t1 ‚áõ INR x at w √ó t2 ‚áõ INR y at w)))



#strongBool : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set(lsuc(L))
#strongBool w t1 t2 =
  Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
  (t1 #‚áõ #INL x at w √ó t2 #‚áõ #INL y at w)
  ‚äé
  (t1 #‚áõ #INR x at w √ó t2 #‚áõ #INR y at w)))
-- strongBool w ‚åú t1 ‚åù ‚åú t2 ‚åù

\end{code}
