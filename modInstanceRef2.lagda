\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms


module modInstanceRef2 (E : Extensionality 0‚Ñì 3‚Ñì)
       where


open import worldInstanceRef2
open import choiceDef{1‚Ñì}(choiceRef)
open import worldDef(PossibleWorldsRef)
open import compatibleDef(PossibleWorldsRef)(choiceRef)(compatibleREF)
open import progressDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)
open import getChoiceDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)
open import choiceExtDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)
open import newChoiceDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(newChoiceRef)
open import freezeDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)(freezeREF)

open import bar(PossibleWorldsRef)
open import barOpen(PossibleWorldsRef)
open import barBeth(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)
open import barI(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)
open import computation(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)

open import forcing(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(E)
open import props1(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(E)
open import props2(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(E)
open import props3(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(E)



Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref : CTerm
Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref = #QTBOOL


Type‚ÑÇ‚ÇÄ‚ÇÅ-isType-beth-bar : (u : ‚Ñï) (w : ùïé¬∑) ‚Üí isType u w Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref
Type‚ÑÇ‚ÇÄ‚ÇÅ-isType-beth-bar u w = eqTypesQTBOOL


‚ÑÇ‚ÇÄ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref : (u : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType u w Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref C‚ÑÇ‚ÇÄ
‚ÑÇ‚ÇÄ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref u w = INL-equalInType-QTBOOL u w #AX #AX


‚ÑÇ‚ÇÅ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref : (u : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType u w Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref C‚ÑÇ‚ÇÅ
‚ÑÇ‚ÇÅ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref u w = INR-equalInType-QTBOOL u w #AX #AX


isvalue-choice : (c : ‚ÑÇ¬∑) ‚Üí #isValue (‚ÑÇ‚ÜíC¬∑ c)
isvalue-choice true = tt
isvalue-choice false = tt


{--‚ÑÇ‚ÜíC‚Üí‚àº‚ÑÇ-beth-ref : {w : ùïé¬∑} {c c1 c2 : ‚ÑÇ¬∑} ‚Üí ‚ÑÇ‚ÜíC¬∑ c1 #‚áì ‚ÑÇ‚ÜíC¬∑ c2 at w ‚Üí ‚àºC w c1 c ‚Üí ‚àºC w c2 c
‚ÑÇ‚ÜíC‚Üí‚àº‚ÑÇ-beth-ref {w} {c} {c1} {c2} comp sim
  rewrite sym (#NUMinj (#compVal comp (isvalue-choice c1))) -- (‚àºvals‚ÜíisValue‚ÇÅ sim)
  = sim--}


{--
isValue‚ÑÇ‚ÇÄ-beth-ref : isValue T‚ÑÇ‚ÇÄ
isValue‚ÑÇ‚ÇÄ-beth-ref = tt


isValue‚ÑÇ‚ÇÅ-beth-ref : isValue T‚ÑÇ‚ÇÅ
isValue‚ÑÇ‚ÇÅ-beth-ref = tt


‚ÑÇ‚ÇÄ‚â†‚ÑÇ‚ÇÅ-beth-ref : ¬¨ C‚ÑÇ‚ÇÄ ‚â° C‚ÑÇ‚ÇÅ
‚ÑÇ‚ÇÄ‚â†‚ÑÇ‚ÇÅ-beth-ref ()
--}


‚Ñï‚ÜíB : ‚Ñï ‚Üí Bool
‚Ñï‚ÜíB 0 = true
‚Ñï‚ÜíB (suc _) = false



#‚áì-true : (w : ùïé¬∑) (a x : CTerm) (c : ‚ÑÇ¬∑)
          ‚Üí a #‚áì ‚ÑÇ‚ÜíC¬∑ c at w
          ‚Üí a #‚áì #INL x at w
          ‚Üí c ‚â° true
#‚áì-true w a x true c‚ÇÅ c‚ÇÇ = refl
#‚áì-true w a x false c‚ÇÅ c‚ÇÇ = ‚ä•-elim (z (CTerm‚â° (‚áì-val-det tt tt c‚ÇÇ c‚ÇÅ)))
  where
    z : ¬¨ #INL x ‚â° #BFALSE
    z ()



#‚áì-false : (w : ùïé¬∑) (a x : CTerm) (c : ‚ÑÇ¬∑)
          ‚Üí a #‚áì ‚ÑÇ‚ÜíC¬∑ c at w
          ‚Üí a #‚áì #INR x at w
          ‚Üí c ‚â° false
#‚áì-false w a x false c‚ÇÅ c‚ÇÇ = refl
#‚áì-false w a x true c‚ÇÅ c‚ÇÇ = ‚ä•-elim (z (CTerm‚â° (‚áì-val-det tt tt c‚ÇÇ c‚ÇÅ)))
  where
    z : ¬¨ #INR x ‚â° #BTRUE
    z ()



‚ààType‚ÑÇ‚ÇÄ‚ÇÅ‚Üí-beth-ref : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm) ‚Üí equalInType i w Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref a b ‚Üí inbar w (Œª w' _ ‚Üí #weak‚ÑÇEq w' a b)
‚ààType‚ÑÇ‚ÇÄ‚ÇÅ‚Üí-beth-ref i w a b eqi = Bar.‚àÄùïé-‚ñ°Func barI aw (equalInType-QTBOOL‚Üí i w a b eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #weakBool w' a b ‚Üí #weak‚ÑÇEq w' a b)
    aw w1 e1 h w2 e2 = lift j
      where
        j : (c‚ÇÅ c‚ÇÇ : ‚ÑÇ¬∑) ‚Üí ‚åú a ‚åù ‚áì ‚ÑÇ‚ÜíT c‚ÇÅ at w2 ‚Üí ‚åú b ‚åù ‚áì ‚ÑÇ‚ÜíT c‚ÇÇ at w2 ‚Üí ‚àºC w2 (‚ÑÇ‚ÜíC¬∑ c‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ c‚ÇÇ)
        j c‚ÇÅ c‚ÇÇ comp‚ÇÅ comp‚ÇÇ = c (snd (snd (lower (h w2 e2)))) --‚àºT-trans (‚àºT‚Üê comp‚ÇÅ) (‚àºT-trans (‚àºT-trans (‚àºT‚Üí (fst (snd (lower (h w2 e2))))) (‚àºT‚Üê (snd (snd (lower (h w2 e2)))))) (‚àºT‚Üí comp‚ÇÇ))
          where
            x : CTerm
            x = fst (lower (h w2 e2))

            y : CTerm
            y = fst (snd (lower (h w2 e2)))

            c : ((a #‚áì #INL x at w2 √ó b #‚áì #INL y at w2) ‚äé (a #‚áì #INR x at w2 √ó b #‚áì #INR y at w2)) ‚Üí ‚àºC w2 (‚ÑÇ‚ÜíC¬∑ c‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ c‚ÇÇ)
            c (inj‚ÇÅ (c1 , c2)) rewrite #‚áì-true w2 a x c‚ÇÅ comp‚ÇÅ c1 | #‚áì-true w2 b y c‚ÇÇ comp‚ÇÇ c2 = ‚àºC-refl {w2} {#BTRUE}
            c (inj‚ÇÇ (c1 , c2)) rewrite #‚áì-false w2 a x c‚ÇÅ comp‚ÇÅ c1 | #‚áì-false w2 b y c‚ÇÇ comp‚ÇÇ c2 = ‚àºC-refl {w2} {#BFALSE}



‚Üí‚ààType‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref : (i : ‚Ñï) {w : ùïé¬∑} {n : ‚Ñï} {c : Name}
                      ‚Üí inbar w (Œª w' _ ‚Üí weak‚ÑÇ‚ÇÄ‚ÇÅM w' (getT n c))
                      ‚Üí ‚ààType i w Type‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref (#APPLY (#CS c) (#NUM n))
‚Üí‚ààType‚ÑÇ‚ÇÄ‚ÇÅ-beth-ref i {w} {n} {c} h =
  ‚ÜíequalInType-QTBOOL i w (#APPLY (#CS c) (#NUM n)) (#APPLY (#CS c) (#NUM n))
                     (Bar.‚àÄùïé-‚ñ°Func barI aw h)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí weak‚ÑÇ‚ÇÄ‚ÇÅM w' (getT n c) ‚Üí #weakBool w' (#APPLY (#CS c) (#NUM n)) (#APPLY (#CS c) (#NUM n)))
    aw w1 e1 z w2 e2 = lift (x (snd (snd (lower (z w2 e2)))))
      where
        t : Term
        t = fst (lower (z w2 e2))

        g : getT n c w2 ‚â° just t
        g = fst (snd (lower (z w2 e2)))

        x : (t ‚áì T‚ÑÇ‚ÇÄ at w2 ‚äé t ‚áì T‚ÑÇ‚ÇÅ at w2)
            ‚Üí #‚áìsame-bool w2 (#APPLY (#CS c) (#NUM n)) (#APPLY (#CS c) (#NUM n))
        x (inj‚ÇÅ y) = #AX , #AX , inj‚ÇÅ (‚áì-trans (Œ£-steps-APPLY-CS 0 (NUM n) t w2 n c refl g) y , ‚áì-trans (Œ£-steps-APPLY-CS 0 (NUM n) t w2 n c refl g) y)
        x (inj‚ÇÇ y) = #AX , #AX , inj‚ÇÇ (‚áì-trans (Œ£-steps-APPLY-CS 1 (NUM n) t w2 n c refl g) y , ‚áì-trans (Œ£-steps-APPLY-CS 1 (NUM n) t w2 n c refl g) y)



inbar-choice-beth-ref : (w : ùïé¬∑) (c : Name) (m : ‚Ñï) (r : Res)
                        ‚Üí compatible¬∑ c w r
                        ‚Üí inBethBar w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (2‚Ñì) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ m c w'' ‚â° just t √ó ¬∑·µ£ r m t))))
inbar-choice-beth-ref w c m r (v , f , i , sat) = trivialISùîπ w , j
  where
    j : inISùîπ (trivialISùîπ w) (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (2‚Ñì) (Œ£ ‚ÑÇ¬∑ (Œª t ‚Üí getChoice¬∑ m c w'' ‚â° just t √ó ¬∑·µ£ r m t))))
    j {w1} e1 b w2 e2 z w3 e3 rewrite fst (snd (snd (‚äë-pres-getRef (‚äë-trans¬∑ z e3) i))) =
      lift (fst (‚äë-pres-getRef (‚äë-trans¬∑ z e3) i) ,
            refl ,
            getRefChoiceCompatible
              c r w3 m
              (fst (‚äë-pres-getRef (‚äë-trans¬∑ z e3) i))
              (‚äë-compatibleRef (‚äë-trans¬∑ z e3) (v , f , i , sat))
              gc)
      where
        gc : getRefChoice m c w3 ‚â° just (fst (‚äë-pres-getRef (‚äë-trans¬∑ z e3) i))
        gc rewrite fst (snd (snd (‚äë-pres-getRef (‚äë-trans¬∑ z e3) i))) = refl



followChoice-beth-ref : (c : Name) {w : ùïé¬∑} {f : wPred w} {r : Res{0‚Ñì}}
                        ‚Üí inBethBar w f
                        ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w
                        ‚Üí compatible¬∑ c w r
                        ‚Üí freezable¬∑ c w
                        ‚Üí ‚àÉùïé w (Œª w1 e1 ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w1 √ó compatible¬∑ c w1 r √ó freezable¬∑ c w1 √ó f w1 e1)
followChoice-beth-ref c {w} {f} {r} (bar , i) ioc comp fb =
  w , ‚äë-refl¬∑ _ , ioc , comp , fb ,
  i e (BarredChain.b bp) (chain.seq (pchain.c pc) (BarredChain.n bp)) (BarredChain.ext bp) (‚äë-refl¬∑ _)
  where
    pc : pchain w
    pc = ùïé‚Üípchain w

    bp : BarredChain (ùîπ.bar bar) (pchain.c pc)
    bp = ùîπ.bars bar pc

    w' : ùïé¬∑
    w' = BarredChain.w' bp

    e : w ‚äë¬∑ w'
    e = ùîπ.ext bar (BarredChain.b bp)


-- TODO: if we didn't want to rely on the choice instance at all,
-- we could add to getFreeze that we have ¬¨ freezable c w' in the extensions
¬¨followChoice-open-ref-aux : (w : ùïé¬∑)
                             ‚Üí ¬¨((c : Name) {w : ùïé¬∑} {f : wPred w} {r : Res{0‚Ñì}}
                                    ‚Üí inOpenBar w f
                                    ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w
                                    ‚Üí compatible¬∑ c w r
                                    ‚Üí freezable¬∑ c w
                                    ‚Üí ‚àÉùïé w (Œª w1 e1 ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w1 √ó compatible¬∑ c w1 r √ó freezable¬∑ c w1 √ó f w1 e1))
¬¨followChoice-open-ref-aux w0 h =
  lower (snd (snd (snd (snd (snd q))))) (fst (snd (snd (snd (snd q)))))
  where
    r : Res{0‚Ñì}
    r = Res‚ÑÇ‚ÇÄ‚ÇÅ

    c : Name
    c = newChoice¬∑ w0

    w : ùïé¬∑
    w = startNewChoice r w0

    f : wPred w
    f w' e = Lift 2‚Ñì (¬¨ freezable¬∑ c w')

    comp : compatible¬∑ c w r
    comp = startChoiceCompatible¬∑ r w0

    k : ‚ÑÇ¬∑
    k = ‚ÑÇ‚ÇÅ¬∑

    i : inOpenBar w f
    i w1 e1 = w2 , e2 , aw
      where
        w2 : ùïé¬∑
        w2 = freeze¬∑ c w1 k

        e2 : w1 ‚äë¬∑ w2
        e2 = freeze‚äë¬∑ c w1 k (‚äë-compatible¬∑ e1 comp) Œª n ‚Üí inj‚ÇÇ refl

        -- This we where we could modify getFreeze or add an axiom like freeze‚Üí¬¨freezable
        aw : ‚àÄùïé w2 (Œª w3 e3 ‚Üí (z : w ‚äë¬∑ w3) ‚Üí f w3 z)
        aw w3 e3 z = freeze‚Üí¬¨freezable {c} {w1} k (‚äë-compatible¬∑ e1 comp) w3 e3

    oc : only‚ÑÇ‚ààùïé (Res.def r) c w
    oc n = getChoice-startNewChoice¬∑ n r w0

    fb : freezable¬∑ c w
    fb = freezableStart¬∑ r w0

    q :  ‚àÉùïé w (Œª w1 e1 ‚Üí only‚ÑÇ‚ààùïé (Res.def r) c w1 √ó compatible¬∑ c w1 r √ó freezable¬∑ c w1 √ó f w1 e1)
    q = h c {w} {f} {r} i oc comp fb


{--
-- We need ùïé to be non-empty
¬¨followChoice-open-ref : ¬¨((c : Name) {w : ùïé¬∑} {f : wPred w} {r : Res{0‚Ñì}}
                           ‚Üí inOpenBar w f
                           ‚Üí isOnlyChoice‚ààùïé (Res.def r) c w
                           ‚Üí compatible¬∑ c w r
                           ‚Üí freezable¬∑ c w
                           ‚Üí ‚àÉùïé w (Œª w1 e1 ‚Üí isOnlyChoice‚ààùïé (Res.def r) c w1 √ó compatible¬∑ c w1 r √ó freezable¬∑ c w1 √ó f w1 e1))
¬¨followChoice-open-ref h = {!!}
--}

\end{code}
