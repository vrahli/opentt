\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
--open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
--open import Agda.Builtin.String
--open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
--open import Function.Bundles
--open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity7b2 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                     (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                     (X : ChoiceExt W C)
                     (N : NewChoice {L} W C K G)
                     (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
--open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
--open import terms4(W)(C)(K)(G)(X)(N)
--open import terms5(W)(C)(K)(G)(X)(N)
--open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

{--
open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)
--}

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E) using (force)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E) using (getT‚â§‚Ñï)
--open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E) using (¬¨0‚àànames-shiftNameUp)
--open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4b(W)(M)(C)(K)(P)(G)(X)(N)(E) --using (ren ; updRel2 ; uptoùïé)
open import continuity5b(W)(M)(C)(K)(P)(G)(X)(N)(E) using (stepsPresUpdRel2 ; Œ£stepsUpdRel2 ; subRen-refl ; stepsPresUpdRel2-APPLY‚ÇÇ‚Üí ; ‚ÜíupdRel2-shiftNameDown0 ; updRel2-renn ; subRen-trans)
open import continuity6b(W)(M)(C)(K)(P)(G)(X)(N)(E) using (++‚äÜ2‚Üí1 ; ++‚äÜ2‚Üí2 ; ++‚äÜ3‚Üí1 ; ++‚äÜ3‚Üí2 ; ++‚äÜ3‚Üí3 ; ++‚äÜ4‚Üí1 ; ++‚äÜ4‚Üí2 ; ++‚äÜ4‚Üí3 ; ++‚äÜ4‚Üí4 ; stepsPresUpdRel2-IFLT‚ÇÇ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFLT‚ÇÇ ; stepsPresUpdRel2-IFLT‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFLT‚ÇÅ ; stepsPresUpdRel2-IFEQ‚ÇÇ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFEQ‚ÇÇ ; stepsPresUpdRel2-IFEQ‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-IFEQ‚ÇÅ ; stepsPresUpdRel2-SUC‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-SUC‚ÇÅ ; stepsPresUpdRel2-MAPP‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-MAPP‚ÇÅ ; ‚ÜíŒ£stepsUpdRel2-upd ; updRel2-CS‚Çó‚Üí ; uptoùïé-pres-getT ; ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÇ ; stepsPresUpdRel2-APPLY‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ ; Œ£stepsUpdRel2-FIX-APPLY‚Üí ; stepsPresUpdRel2-FIX‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-FIX‚ÇÅ ; updRel2-val‚Çó‚Üí ; stepsPresUpdRel2-LET‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-LET‚ÇÅ ; stepsPresUpdRel2-SPREAD‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-SPREAD‚ÇÅ ; stepsPresUpdRel2-WREC‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-WREC‚ÇÅ ; stepsPresUpdRel2-DECIDE‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-DECIDE‚ÇÅ ; ‚Üí¬¨0‚àànames-renn-0s ; ¬¨newChoiceT+‚àànames ; ‚Üí¬¨newChoiceT+-suc ; ¬¨0‚ààren‚Çó-sren ; ¬¨0‚ààren·µ£-sren ; ‚Üíuptoùïé-startNewChoiceT ; names2ren ; uptoùïé-startNewChoices ; subRen-names2ren ; updRel2-NAME‚Çó‚Üí ; ‚Üíuptoùïé-chooseT ; updRel2-¬¨NUM‚Üí ; stepsPresUpdRel2-CHOOSE‚ÇÅ‚Üí ; ‚ÜíŒ£stepsUpdRel2-CHOOSE‚ÇÅ ; updRel2-WRECr)
open import continuity7b(W)(M)(C)(K)(P)(G)(X)(N)(E)



abstract

  -- This is not true if 'g' is impure, for example if 'g' is 'FRESH u', while f is 'FRESH t' then
  -- while 'updRel2 name f g a g', it might be the case for 'u' and 't' because the FRESH operators
  -- might generate different names.  uptoùïé should be up to some renaming, not just up to 'name'.
  step-updRel2 : (cc : ContConds) (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term}
               {a b x : Term} {w0 w1 w2 w : ùïé¬∑} {r : ren}
               ‚Üí ¬¨ name ‚àà names f
  --              ‚Üí ¬¨ name ‚àà names g
                  ‚Üí # f
                  ‚Üí # g
                  ‚Üí names a ‚äÜ domùïé¬∑ w1 -- Could these two restrictions be guaranteed by "loading" all names into the world? No, we don't have control over g in the extract...
                  ‚Üí names b ‚äÜ domùïé¬∑ w -- For this one we'd have to require g to be name-free
  --              ‚Üí names f ‚äÜ domùïé¬∑ w1
  --              ‚Üí names g ‚äÜ domùïé¬∑ w
                  ‚Üí step a w1 ‚â° just (x , w2)
                  ‚Üí stepsPresUpdRel2 n name f g x w2
                  ‚Üí updRel2 name f g r a b
                  ‚Üí uptoùïé name w1 w r
                  ‚Üí getT‚â§‚Ñï w1 n name
                  ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                  ‚Üí name ‚àà domùïé¬∑ w1
                  ‚Üí name ‚àà domùïé¬∑ w
                  ‚Üí compatible¬∑ name w1 Res‚ä§
                  ‚Üí compatible¬∑ name w Res‚ä§
                  ‚Üí ‚àÄùïé-get0-NUM w1 name
                  ‚Üí w0 ‚äë¬∑ w1
                  ‚Üí w0 ‚äë¬∑ w
                  ‚Üí ‚àÄùïé w0 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚áõ!same‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
                  ‚Üí Œ£stepsUpdRel2 name f g x w1 w2 b w r
  step-updRel2 cc gc {n} {name} {f} {g} {.NAT} {.NAT} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-NAT upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAT , NAT , w1 , w , r , refl , refl , updRel2-NAT , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.QNAT} {.QNAT} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-QNAT upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QNAT , QNAT , w1 , w , r , refl , refl , updRel2-QNAT , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.TNAT} {.TNAT} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-TNAT upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TNAT , TNAT , w1 , w , r , refl , refl , updRel2-TNAT , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-LT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-QLT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(NUM x‚ÇÅ)} {.(NUM x‚ÇÅ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-NUM x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NUM _ , NUM _ , w1 , w , r , refl , refl , updRel2-NUM _ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ur ur‚ÇÅ ur‚ÇÇ ur‚ÇÉ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-IFLT n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ur ur‚ÇÅ ur‚ÇÇ ur‚ÇÉ ind inda indb comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ4‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ4‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn

      indb : (b‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step b‚ÇÅ w1 ‚â° just (b‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g b‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r
      indb b‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ4‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ4‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur‚ÇÅ upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ur ur‚ÇÅ ur‚ÇÇ ur‚ÇÉ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-IFEQ n name f g r a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ x w w1 w2 naid nbid upw ur ur‚ÇÅ ur‚ÇÇ ur‚ÇÉ ind inda indb comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ4‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ4‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn

      indb : (b‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step b‚ÇÅ w1 ‚â° just (b‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g b‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r
      indb b‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ4‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ4‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur‚ÇÅ upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SUC a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-SUC n name f g r a‚ÇÅ a‚ÇÇ x w w1 w2 naid nbid upw ur ind inda comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg naid nbid
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-PI _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LAMBDA a‚ÇÅ , LAMBDA a‚ÇÇ , w1 , w , r , refl , refl , updRel2-LAMBDA _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl (updRel2-LAMBDA‚Çó‚Üí ur)
    where
      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel2 name f g r t u)
              ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
              ‚Üí Œ£stepsUpdRel2 name f g (sub b‚ÇÅ t) w1 w1 (APPLY a‚ÇÇ b‚ÇÇ) w r
      concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub b‚ÇÅ t , sub b‚ÇÇ u , w1 , w , r , refl , refl , updRel2-sub cf cg ur ur‚ÇÅ , upw , subRen-refl r
      concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
        where
          ind' : stepsPresUpdRel2 n name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
          ind' rewrite e1 | e2 | sub-upd name f b‚ÇÅ cf = ind

          c1 : Œ£stepsUpdRel2 name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1 (APPLY (force g) b‚ÇÇ) w r
          c1 = fst (‚ÜíŒ£stepsUpdRel2-upd cc gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {w0} {w1} {w} {r} nnf cf cg compat compat' wgt0 ur‚ÇÅ (++‚äÜ2‚Üí2 {names t} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names g ++ []} {names b‚ÇÇ} {domùïé¬∑ w} nbid) idom' upw ew01 ew0 eqn ind')

          c2 : Œ£stepsUpdRel2 name f g (sub b‚ÇÅ (updBody name f)) w1 w1 (APPLY (force g) b‚ÇÇ) w r
          c2 rewrite sub-upd name f b‚ÇÅ cf = c1
  ... | inj‚ÇÇ q with is-CS a‚ÇÅ
  ... |    inj‚ÇÅ (name' , np) rewrite np {--| updRel2-CS‚Çó‚Üí r--} with is-NUM b‚ÇÅ
  ... |       inj‚ÇÅ (k , nq) rewrite nq | updRel2-NUM‚Çó‚Üí ur‚ÇÅ with getT‚äé k name' w1
  ... |          inj‚ÇÅ (c , nr) rewrite nr | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
    0 , 1 , c , c , w1 , w , r , refl , concl , --comp' ,
    updRel2-refl {name} {f} {g} {r} {c} (ContConds.ccG¬¨names cc k name' w1 c nr) , --updRel2-refl {name} {f} {g} {c} (Œª x ‚Üí nnw (ContConds.ccGnames cc name name' k c w1 nr x)) ,
  -- In case c contains a name x, we'd have to guarantee that names‚ààren x x r.  We can't know that.
  -- Better only consider nats as choices here
    upw , subRen-refl r --Data.Maybe.map (Œª t ‚Üí t , w) (getT n name w)
    where {--()--} {--()--}
      nm2 : Œ£ Name (Œª name'' ‚Üí a‚ÇÇ ‚â° CS name'' √ó ¬¨ name' ‚â° name √ó ¬¨ name'' ‚â° name √ó names‚ààren name' name'' r)
      nm2 = updRel2-CS‚Çó‚Üí  ur

      comp' : steps 1 (APPLY (CS (fst nm2)) (NUM k) , w) ‚â° (c , w)
      comp' rewrite uptoùïé-pres-getT k name name' (fst nm2) w1 w r c (fst (snd (snd nm2))) (fst (snd (snd (snd nm2)))) (snd (snd (snd (snd nm2)))) upw nr = refl

      concl : steps 1 (APPLY a‚ÇÇ (NUM k) , w) ‚â° (c , w)
      concl rewrite fst (snd nm2) = comp' --refl
  ... |          inj‚ÇÇ nr rewrite nr = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn | inj‚ÇÇ q | inj‚ÇÅ (name' , np) | inj‚ÇÇ y with step‚äé b‚ÇÅ w1
  ... |          inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl
    where
      ind' : Œ£stepsUpdRel2 name f g b‚ÇÅ' w1 w1' b‚ÇÇ w r
      ind' = step-updRel2 cc gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg (Œª {x} i ‚Üí naid (there i)) (Œª {x} i ‚Üí nbid (‚àà-++‚Å∫ ≥ (names a‚ÇÇ) i)) z (stepsPresUpdRel2-APPLY‚ÇÇ‚Üí ind) ur‚ÇÅ upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn

      nm2 : Œ£ Name (Œª name'' ‚Üí a‚ÇÇ ‚â° CS name'' √ó ¬¨ name' ‚â° name √ó ¬¨ name'' ‚â° name √ó names‚ààren name' name'' r)
      nm2 = updRel2-CS‚Çó‚Üí  ur

      concl : Œ£stepsUpdRel2 name f g (APPLY (CS name') b‚ÇÅ') w1 w1' (APPLY a‚ÇÇ b‚ÇÇ) w r
      concl rewrite fst (snd nm2) = ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÇ {name} {f} {g} {name'} {fst nm2} (fst (snd (snd nm2))) (fst (snd (snd (snd nm2)))) (naid (here refl)) (nbid (here refl)) (snd (snd (snd (snd nm2)))) ind'
  ... |          inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn | inj‚ÇÇ q | inj‚ÇÇ p with is-MSEQ a‚ÇÅ
  ... | inj‚ÇÅ (s , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel2-MSEQ‚Çó‚Üí ur =
    0 , 1 , MAPP s b‚ÇÅ , MAPP s b‚ÇÇ , w1 , w , r , refl , refl , updRel2-MAPP s b‚ÇÅ b‚ÇÇ ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn | inj‚ÇÇ q | inj‚ÇÇ p | inj‚ÇÇ z with step‚äé a‚ÇÅ w1
  ... | inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ur‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = step-updRel2 cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) z (stepsPresUpdRel2-APPLY‚ÇÅ‚Üí ind) ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  ... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel2 cc gc {n} {name} {f} {g} {.(MSEQ s)} {.(MSEQ s)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-MSEQ s) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MSEQ _ , MSEQ _ , w1 , w , r , refl , refl , updRel2-MSEQ _ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-MAPP s a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-MAPP n name f g r s a‚ÇÅ a‚ÇÇ x w w1 w2 naid nbid upw ur ind inda comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg naid nbid
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-FIX a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl (updRel2-LAMBDA‚Çó‚Üí ur)
    where
      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel2 name f g r t u)
              ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
              ‚Üí Œ£stepsUpdRel2 name f g (sub (FIX (LAMBDA t)) t) w1 w1 (FIX a‚ÇÇ) w r
      concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub (FIX (LAMBDA t)) t , sub (FIX (LAMBDA u)) u , w1 , w , r , refl , refl , updRel2-sub cf cg ur (updRel2-FIX _ _ (updRel2-LAMBDA _ _ ur)) , upw , subRen-refl r
      concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c3
        where
          ind' : stepsPresUpdRel2 n name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
          ind' rewrite e1 | e2 | sub-upd name f (FIX (upd name f)) cf = ind

          na1 : names (FIX (LAMBDA t)) ‚äÜ domùïé¬∑ w1
          na1 = naid

          na2 : names (FIX (upd name f)) ‚äÜ domùïé¬∑ w1
          na2 rewrite e1 | e2 = naid

          nb1 : names (FIX (force g)) ‚äÜ domùïé¬∑ w
          nb1 = nbid

          c1 : Œ£ (Œ£stepsUpdRel2 name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1 (APPLY (force g) (FIX (force g))) w r)
                 (Œª x ‚Üí 0 < fst (snd x))
          c1 = ‚ÜíŒ£stepsUpdRel2-upd cc gc {n} {name} {f} {g} {FIX (upd name f)} {FIX (force g)} {w0} {w1} {w} {r} nnf cf cg compat compat' wgt0 (updRel2-FIX _ _ updRel2-upd) na2 {--(names-FIX-upd‚äÜ {name} {f} idom nfiw)--} nbid {--(names-FIX-force‚äÜ {g} ngiw)--} idom' upw ew01 ew0 eqn ind'

          c2 : Œ£stepsUpdRel2 name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1 (FIX (force g)) w r
          c2 = Œ£stepsUpdRel2-FIX-APPLY‚Üí c1

          c3 : Œ£stepsUpdRel2 name f g (sub (FIX (upd name f)) (updBody name f)) w1 w1 (FIX (force g)) w r
          c3 rewrite sub-upd name f (FIX (upd name f)) cf = c2
  ... | inj‚ÇÇ nt with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-FIX‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = step-updRel2 cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg naid nbid z (stepsPresUpdRel2-FIX‚ÇÅ‚Üí ind) ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel2 cc gc {n} {name} {f} {g} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-LET n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x w w1 w2 cf cg naid nbid upw ur ur‚ÇÅ ind inda comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-SUM _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-PAIR _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-SPREAD n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x w w1 w2 cf cg naid nbid upw ur ur‚ÇÅ ind inda comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(WT a‚ÇÅ b‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , WT a‚ÇÅ b‚ÇÅ , WT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-WT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUP a‚ÇÅ b‚ÇÅ , SUP a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-SUP _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-WREC n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ x w w1 w2 cf cg naid nbid upw ur ur‚ÇÅ ind inda comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(MT a‚ÇÅ b‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MT a‚ÇÅ b‚ÇÅ , MT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-MT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-SET _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , ISECT a‚ÇÅ b‚ÇÅ , ISECT a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-ISECT _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-TUNION _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-UNION _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-QTUNION _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-INL a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INL a‚ÇÅ , INL a‚ÇÇ , w1 , w , r , refl , refl , updRel2-INL _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-INR a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INR a‚ÇÅ , INR a‚ÇÇ , w1 , w , r , refl , refl , updRel2-INR _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ ur ur‚ÇÅ ur‚ÇÇ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn =
    Œ£stepsUpdRel2-DECIDE n name f g r a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ x w w1 w2 cf cg naid nbid upw ur ur‚ÇÅ ur‚ÇÇ ind inda comp
    where
      inda : (a‚ÇÅ' : Term) (w1' : ùïé¬∑) ‚Üí step a‚ÇÅ w1 ‚â° just (a‚ÇÅ' , w1') ‚Üí stepsPresUpdRel2 n name f g a‚ÇÅ' w1' ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      inda a‚ÇÅ' w1' comp' ind' =
        step-updRel2
          cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg
          (++‚äÜ3‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {domùïé¬∑ w1} naid)
          (++‚äÜ3‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {domùïé¬∑ w} nbid)
          comp' ind' ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  step-updRel2 cc gc {n} {name} {f} {g} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ ur ur‚ÇÅ r‚ÇÇ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , w , r , refl , refl , updRel2-EQ _ _ _ _ _ _ ur ur‚ÇÅ r‚ÇÇ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ ur ur‚ÇÅ r‚ÇÇ r‚ÇÉ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ , EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1 , w , r , refl , refl , updRel2-EQB _ _ _ _ _ _ _ _ ur ur‚ÇÅ r‚ÇÇ r‚ÇÉ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.AX} {.AX} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-AX upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , AX , AX , w1 , w , r , refl , refl , updRel2-AX , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.FREE} {.FREE} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-FREE upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FREE , FREE , w1 , w , r , refl , refl , updRel2-FREE , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(CS name1)} {.(CS name2)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-CS name1 name2 d1 d2 x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , CS _ , CS _ , w1 , w , r , refl , refl , updRel2-CS name1 name2 d1 d2 x‚ÇÅ {--updRel2-CS _ x‚ÇÅ--} , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(NAME name1)} {.(NAME name2)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-NAME name1 name2 d1 d2 x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAME _ , NAME _ , w1 , w , r , refl , refl , updRel2-NAME name1 name2 d1 d2 x‚ÇÅ {--updRel2-NAME _ x‚ÇÅ--} , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(FRESH a)} {.(FRESH b)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-FRESH a b ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 ,
    shiftNameDown 0 (renn 0 (newChoiceT+ w1 a) a) ,
    shiftNameDown 0 (renn 0 (newChoiceT+ w b) b) ,
    startNewChoiceT Res‚ä§ w1 a ,
    startNewChoiceT Res‚ä§ w b ,
    (newChoiceT w1 a , newChoiceT w b) ‚à∑ r ,
    refl , refl ,
    ‚ÜíupdRel2-shiftNameDown0 {name} {f} {g} cf cg
      ((newChoiceT w1 a , newChoiceT w b) ‚à∑ r)
      (‚Üí¬¨0‚àànames-renn-0s (newChoiceT w1 a) a)
      (‚Üí¬¨0‚àànames-renn-0s (newChoiceT w b) b)
      (updRel2-renn
        {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {sren r} {a} {b}
        0 (newChoiceT+ w1 a) (newChoiceT+ w b)
        (¬¨newChoiceT+‚àànames w1 a) (¬¨newChoiceT+‚àànames w b)
        (‚Üí¬¨newChoiceT+-suc name w1 a idom) (‚Üí¬¨newChoiceT+-suc name w b idom')
        (¬¨0‚ààren‚Çó-sren r) (¬¨0‚ààren·µ£-sren r)
        (¬¨0‚àànames-shiftNameUp f) (¬¨0‚àànames-shiftNameUp g)
        (Œª x ‚Üí suc-‚â¢-0 (sym x)) ur) , -- we have to get force to contain name too, so that updRel2 relates terms with the same names
    ‚Üíuptoùïé-startNewChoiceT cc name w1 w r a b upw ,
    subRen-trans (newChoiceT w1 a) (newChoiceT w b) r r (¬¨fresh‚ààdomùïé2 w1 (namesùïé¬∑ w1) (‚Üìvars (names a))) (¬¨fresh‚ààdomùïé2 w (namesùïé¬∑ w) (‚Üìvars (names b))) (subRen-refl r)
  step-updRel2 cc gc {n} {name} {f} {g} {.(LOAD a)} {.(LOAD a)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-LOAD a) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
    rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , AX , AX , startNewChoices Res‚ä§ w1 a , startNewChoices Res‚ä§ w a ,
    names2ren w1 w a (names a) r , refl , refl , updRel2-AX ,
    uptoùïé-startNewChoices cc name w1 w r a (names a) upw ,
    subRen-names2ren cc w1 w r r a (names a) (domùïé¬∑ w1) (domùïé¬∑ w) ‚äÜ-refl ‚äÜ-refl (subRen-refl r)
  --0 , 0 , LOAD a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TSQUASH _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn with is-NAME a‚ÇÅ
  ... | inj‚ÇÅ (nm , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | fst (snd (updRel2-NAME‚Çó‚Üí ur)) =
    0 , 1 , AX , AX , chooseT nm w1 b‚ÇÅ , chooseT (fst nm2) w b‚ÇÇ , r , refl , refl ,
    updRel2-AX , upw2 , (subRen-refl r)
    where
      nm2 : Œ£ Name (Œª nm' ‚Üí a‚ÇÇ ‚â° NAME nm' √ó ¬¨ nm ‚â° name √ó ¬¨ nm' ‚â° name √ó names‚ààren nm nm' r)
      nm2 = updRel2-NAME‚Çó‚Üí ur

      upw2 : uptoùïé name (chooseT nm w1 b‚ÇÅ) (chooseT (fst nm2) w b‚ÇÇ) r
      upw2 with is-NUM b‚ÇÅ
      ... | inj‚ÇÅ (k , q) rewrite q | updRel2-NUM‚Çó‚Üí ur‚ÇÅ =
        ‚Üíuptoùïé-chooseT
          cc {name} {nm} {fst nm2} {r} {w1} {w} (NUM k) (naid (here refl)) (nbid (here refl))
          (fst (snd (snd nm2)))
          (fst (snd (snd (snd nm2))))
          (snd (snd (snd (snd nm2))))
          upw
      ... | inj‚ÇÇ q rewrite ContConds.ccCnum cc nm w1 b‚ÇÅ q | ContConds.ccCnum cc (fst nm2) w b‚ÇÇ (updRel2-¬¨NUM‚Üí name f g r b‚ÇÅ b‚ÇÇ ur‚ÇÅ q) = upw
  ... | inj‚ÇÇ nm with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel2-CHOOSE‚ÇÅ (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) ur‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel2 name f g a‚ÇÅ' w1 w1' a‚ÇÇ w r
      ind' = step-updRel2 cc gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w0} {w1} {w1'} {w} nnf cf cg (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {domùïé¬∑ w1} naid) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {domùïé¬∑ w} nbid) z (stepsPresUpdRel2-CHOOSE‚ÇÅ‚Üí ind) ur upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel2 cc gc {n} {name} {f} {g} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TSQUASH a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TSQUASH _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TTRUNC a‚ÇÅ , TTRUNC a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TTRUNC _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-TCONST a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TCONST a‚ÇÅ , TCONST a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TCONST _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SUBSING a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUBSING a‚ÇÅ , SUBSING a‚ÇÇ , w1 , w , r , refl , refl , updRel2-SUBSING _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.PURE} {.PURE} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-PURE upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PURE , PURE , w1 , w , r , refl , refl , updRel2-PURE , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-TERM a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TERM a‚ÇÅ , TERM a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TERM _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(ENC a)} {.(ENC a)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-ENC a ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = ? --0 , 0 , TERM a‚ÇÅ , TERM a‚ÇÇ , w1 , w , r , refl , refl , updRel2-TERM _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-DUM a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , DUM a‚ÇÅ , DUM a‚ÇÇ , w1 , w , r , refl , refl , updRel2-DUM _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ ur ur‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , w , r , refl , refl , updRel2-FFDEFS _ _ _ _ ur ur‚ÇÅ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(UNIV x‚ÇÅ)} {.(UNIV x‚ÇÅ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-UNIV x‚ÇÅ) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNIV _ , UNIV _ , w1 , w , r , refl , refl , updRel2-UNIV _ , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-LIFT a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LIFT a‚ÇÅ , LIFT a‚ÇÇ , w1 , w , r , refl , refl , updRel2-LIFT _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-LOWER a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LOWER a‚ÇÅ , LOWER a‚ÇÇ , w1 , w , r , refl , refl , updRel2-LOWER _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind (updRel2-SHRINK a‚ÇÅ a‚ÇÇ ur) upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SHRINK a‚ÇÅ , SHRINK a‚ÇÇ , w1 , w , r , refl , refl , updRel2-SHRINK _ _ ur , upw , subRen-refl r
  step-updRel2 cc gc {n} {name} {f} {g} {.(upd name f)} {.(force g)} {x} {w0} {w1} {w2} {w} {r} nnf cf cg naid nbid comp ind updRel2-upd upw gtn nnw idom idom' compat compat' wgt0 ew01 ew0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , upd name f , force g , w1 , w , r , refl , refl , updRel2-upd , upw , subRen-refl r

\end{code}
