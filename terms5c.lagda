\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using ()
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice


module terms5c {L : Level} (W : PossibleWorlds {L})
               (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M) (E : ChoiceExt {L} W C)
               (N : NewChoice W C M G)
       where
open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(M)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)
open import computation(W)(C)(M)(G)(E)(N)
open import terms2(W)(C)(M)(G)(E)(N)
open import terms3(W)(C)(M)(G)(E)(N)
open import terms4(W)(C)(M)(G)(E)(N)
open import terms5(W)(C)(M)(G)(E)(N)
open import terms3b(W)(C)(M)(G)(E)(N)
open import terms5b(W)(C)(M)(G)(E)(N)

open import continuity-conds(W)(C)(M)(G)(E)(N)


{--
¬¨‚àà‚Üíupd‚áìnames-concl-val : {w1' w2 : ùïé¬∑} {name1 name2 : Name} {f b v : Term}
                          ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ Term (Œª v' ‚Üí
                               APPLY (upd name2 f) b ‚áì v' from w1' to w2'
                               √ó differ2 name1 name2 f v v'
                               √ó getT 0 name1 w2 ‚â° getT 0 name2 w2'))
                          ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ Term (Œª v' ‚Üí
                               APPLY (upd name2 f) b ‚áì v' from w1' to w2'
                               √ó differ2 name1 name2 f v v'
                               √ó getT 0 name1 w2 ‚â° getT 0 name2 w2'))
¬¨‚àà‚Üíupd‚áìnames-concl-val {w1'} {w2} {name1} {name2} {f} {b} {v} (w2' , v' , comp , diff , g0) = {!!}
--}


differ2-CS‚Üí : {name1 name2 name : Name} {f t : Term}
               ‚Üí differ2 name1 name2 f (CS name) t
               ‚Üí t ‚â° CS name
differ2-CS‚Üí {name1} {name2} {name} {f} {.(CS name)} (differ2-CS .name) = refl


differ2-NAME‚Üí : {name1 name2 name : Name} {f t : Term}
                 ‚Üí differ2 name1 name2 f (NAME name) t
                 ‚Üí t ‚â° NAME name
differ2-NAME‚Üí {name1} {name2} {name} {f} {.(NAME name)} (differ2-NAME .name) = refl


¬¨‚àà‚Üídiffer‚áì-aux2 : (gc0 : get-choose-‚Ñï)
               (f : Term) (cf : # f) (name1 name2 : Name) (w1 w2 w1' w0 : ùïé¬∑) (a b a' v : Term) (k : ‚Ñï)
               ‚Üí compatible¬∑ name1 w1 Res‚ä§
               ‚Üí compatible¬∑ name2 w1' Res‚ä§
               ‚Üí ‚àÄùïé-get0-NUM w1 name1
               ‚Üí differ2 name1 name2 f a b
               ‚Üí getT 0 name1 w1 ‚â° getT 0 name2 w1'
               ‚Üí step a w1 ‚â° just (a' , w2)
               ‚Üí steps k (a' , w2) ‚â° (v , w0)
               ‚Üí isValue v
               ‚Üí ((k' : ‚Ñï) ‚Üí k' < k ‚Üí ‚áìPresDiff2 f name1 name2 k')
               ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ Term (Œª b'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                   a' ‚áì a'' from w2 to w3
                   √ó b ‚áì b'' from w1' to w3'
                   √ó differ2 name1 name2 f a'' b''
                   √ó getT 0 name1 w3 ‚â° getT 0 name2 w3'))))
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .NAT .NAT a' v k compat1 compat2 agtn differ2-NAT g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NAT , NAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-NAT , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .QNAT .QNAT a' v k compat1 compat2 agtn differ2-QNAT g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QNAT , QNAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-QNAT , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(LT a‚ÇÅ b‚ÇÅ) .(LT a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-LT _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(QLT a‚ÇÅ b‚ÇÅ) .(QLT a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-QLT _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(NUM x) .(NUM x) a' v k compat1 compat2 agtn (differ2-NUM x) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NUM _ , NUM _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-NUM _ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) a' v k compat1 compat2 agtn (differ2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(SUC a) .(SUC b) a' v k compat1 compat2 agtn (differ2-SUC a b diff) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(PI a‚ÇÅ b‚ÇÅ) .(PI a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-PI _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(LAMBDA a) .(LAMBDA b) a' v k compat1 compat2 agtn (differ2-LAMBDA a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LAMBDA a , LAMBDA b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-LAMBDA _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(APPLY f‚ÇÅ a‚ÇÅ) .(APPLY f‚ÇÇ a‚ÇÇ) a' v k compat1 compat2 agtn (differ2-APPLY f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd with is-LAM f‚ÇÅ
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = concl d
  where
    d : Œ£ Term (Œª t' ‚Üí f‚ÇÇ ‚â° LAMBDA t' √ó differ2 name1 name2 f t t') ‚äé (t ‚â° updBody name1 f √ó f‚ÇÇ ‚â° upd name2 f)
    d = differ2-LAMBDA‚Çó‚Üí diff

    concl : Œ£ Term (Œª t' ‚Üí f‚ÇÇ ‚â° LAMBDA t' √ó differ2 name1 name2 f t t') ‚äé (t ‚â° updBody name1 f √ó f‚ÇÇ ‚â° upd name2 f)
            ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ Term (Œª b'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                   sub a‚ÇÅ t ‚áì a'' from w1 to w3
                   √ó APPLY f‚ÇÇ a‚ÇÇ ‚áì b'' from w1' to w3'
                   √ó differ2 name1 name2 f a'' b''
                   √ó getT 0 name1 w3 ‚â° getT 0 name2 w3'))))
    concl (inj‚ÇÅ (t' , e‚ÇÅ , e‚ÇÇ)) rewrite e‚ÇÅ =
      sub a‚ÇÅ t , sub a‚ÇÇ t' , w1 , w1' ,
      ‚áìfrom-to-refl _ _ , APPLY-LAMBDA‚áì w1' t' a‚ÇÇ ,
      differ2-sub cf e‚ÇÇ diff‚ÇÅ , g0
    concl (inj‚ÇÇ (e‚ÇÅ , e‚ÇÇ)) rewrite e‚ÇÅ | e‚ÇÇ | sub-upd name1 f a‚ÇÅ cf =
      v , fst (snd hv2) , w0 , fst hv2 , (k , hv1) , fst (snd (snd hv2)) ,
      fst (snd (snd (snd hv2))) , snd (snd (snd (snd hv2)))
      where
        hv0 : steps k (sub a‚ÇÅ (updBody name1 f) , w1) ‚â° (v , w0)
        hv0 rewrite e‚ÇÅ = hv

        hv1 : steps k (LET a‚ÇÅ (SEQ (updGt name1 (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w0)
        hv1 rewrite sym (sub-upd name1 f a‚ÇÅ cf) = hv0

        hv2 : Œ£ ùïé¬∑ (Œª w2' ‚Üí Œ£ Term (Œª v' ‚Üí
                 APPLY (upd name2 f) a‚ÇÇ ‚áì v' from w1' to w2'
                 √ó differ2 name1 name2 f v v'
                 √ó getT 0 name1 w0 ‚â° getT 0 name2 w2'))
        hv2 = ¬¨‚àà‚Üíupd‚áìnames gc0 k f name1 name2 w1 w1' w0 a‚ÇÅ a‚ÇÇ v cf agtn compat1 compat2 isvv pd g0 diff‚ÇÅ hv1
... | inj‚ÇÇ x with is-CS f‚ÇÅ
... |    inj‚ÇÅ (name , p) rewrite p with is-NUM a‚ÇÅ
... |       inj‚ÇÅ (n , q) rewrite q | differ2-NUM‚Üí diff‚ÇÅ | differ2-CS‚Üí diff = {!!} --Data.Maybe.map (Œª t ‚Üí t , w) (getT n name w)
... |       inj‚ÇÇ y with step‚äé a‚ÇÅ w1
... |          inj‚ÇÅ (a‚ÇÅ' , w3 , z) rewrite z = {!!} --ret (APPLY (CS name) u) w'
... |          inj‚ÇÇ z rewrite z = {!!} --nothing
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(APPLY f‚ÇÅ a‚ÇÅ) .(APPLY f‚ÇÇ a‚ÇÇ) a' v k compat1 compat2 agtn (differ2-APPLY f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd | inj‚ÇÇ x | inj‚ÇÇ name with step‚äé f‚ÇÅ w1
... | inj‚ÇÅ (f‚ÇÅ' , w3 , z) rewrite z = {!!} --ret (APPLY g a) w'
... | inj‚ÇÇ z rewrite z = {!!} --nothing
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(FIX a) .(FIX b) a' v k compat1 compat2 agtn (differ2-FIX a b diff) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(LET a‚ÇÅ b‚ÇÅ) .(LET a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(SUM a‚ÇÅ b‚ÇÅ) .(SUM a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-SUM _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(PAIR a‚ÇÅ b‚ÇÅ) .(PAIR a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-PAIR _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(SPREAD a‚ÇÅ b‚ÇÅ) .(SPREAD a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(SET a‚ÇÅ b‚ÇÅ) .(SET a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-SET _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(ISECT a‚ÇÅ b‚ÇÅ) .(ISECT a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = ISECT a‚ÇÅ b‚ÇÅ , ISECT a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-ISECT _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(TUNION a‚ÇÅ b‚ÇÅ) .(TUNION a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-TUNION _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(UNION a‚ÇÅ b‚ÇÅ) .(UNION a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-UNION _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(QTUNION a‚ÇÅ b‚ÇÅ) .(QTUNION a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-QTUNION _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(INL a) .(INL b) a' v k compat1 compat2 agtn (differ2-INL a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = INL a , INL b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-INL _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(INR a) .(INR b) a' v k compat1 compat2 agtn (differ2-INR a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = INR a , INR b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-INR _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) a' v k compat1 compat2 agtn (differ2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ) a' v k compat1 compat2 agtn (differ2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-EQ _ _ _ _ _ _ diff diff‚ÇÅ diff‚ÇÇ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .AX .AX a' v k compat1 compat2 agtn differ2-AX g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = AX , AX , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-AX , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .FREE .FREE a' v k compat1 compat2 agtn differ2-FREE g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = FREE , FREE , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-FREE , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(CS name) .(CS name) a' v k compat1 compat2 agtn (differ2-CS name) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = CS _ , CS _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-CS _ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(NAME name) .(NAME name) a' v k compat1 compat2 agtn (differ2-NAME name) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NAME _ , NAME _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-NAME _ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(FRESH a) .(FRESH b) a' v k compat1 compat2 agtn (differ2-FRESH a b diff) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(CHOOSE a‚ÇÅ b‚ÇÅ) .(CHOOSE a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd = {!!}
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(TSQUASH a) .(TSQUASH b) a' v k compat1 compat2 agtn (differ2-TSQUASH a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TSQUASH a , TSQUASH b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-TSQUASH _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(TTRUNC a) .(TTRUNC b) a' v k compat1 compat2 agtn (differ2-TTRUNC a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TTRUNC a , TTRUNC b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-TTRUNC _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(TCONST a) .(TCONST b) a' v k compat1 compat2 agtn (differ2-TCONST a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TCONST a , TCONST b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-TCONST _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(SUBSING a) .(SUBSING b) a' v k compat1 compat2 agtn (differ2-SUBSING a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUBSING a , SUBSING b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-SUBSING _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .PURE .PURE a' v k compat1 compat2 agtn differ2-PURE g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PURE , PURE , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-PURE , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(DUM a) .(DUM b) a' v k compat1 compat2 agtn (differ2-DUM a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = DUM a , DUM b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-DUM _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(FFDEFS a‚ÇÅ b‚ÇÅ) .(FFDEFS a‚ÇÇ b‚ÇÇ) a' v k compat1 compat2 agtn (differ2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-FFDEFS _ _ _ _ diff diff‚ÇÅ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(UNIV x) .(UNIV x) a' v k compat1 compat2 agtn (differ2-UNIV x) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = UNIV _ , UNIV _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-UNIV _ , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(LIFT a) .(LIFT b) a' v k compat1 compat2 agtn (differ2-LIFT a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LIFT a , LIFT b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-LIFT _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(LOWER a) .(LOWER b) a' v k compat1 compat2 agtn (differ2-LOWER a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LOWER a , LOWER b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-LOWER _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(SHRINK a) .(SHRINK b) a' v k compat1 compat2 agtn (differ2-SHRINK a b diff) g0 s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SHRINK a , SHRINK b , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ2-SHRINK _ _ diff , g0
¬¨‚àà‚Üídiffer‚áì-aux2 gc0 f cf name1 name2 w1 w2 w1' w0 .(upd name1 f) .(upd name2 f) a' v k compat1 compat2 agtn differ2-upd g0 s hv isvv pd = {!!}

\end{code}
