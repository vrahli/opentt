\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
--open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity5 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                   (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                   (X : ChoiceExt W C)
                   (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
                   (F : Freeze {L} W C K P G N)
                   (E : Axiom.Extensionality.Propositional.Extensionality 0‚Ñì (lsuc(lsuc(L))))
                   (CB : ChoiceBar W M C K P G X N V F E) -- TODO - We won't need everything from there: use a different module
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)

{--
open import type_sys_props_nat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qnat(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_qlt(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_free(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_pi(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_sum(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_set(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_eq(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_union(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_tsquash(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_ffdefs(W)(M)(C)(K)(P)(G)(E)
open import type_sys_props_lift(W)(M)(C)(K)(P)(G)(E)
--}

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)



steps-APPLY-LAMBDA-FIX‚Üí : {k : ‚Ñï} {t u : Term} {w1 w2 : ùïé¬∑}
                           ‚Üí 0 < k
                           ‚Üí steps k (APPLY (LAMBDA t) (FIX (LAMBDA t)) , w1) ‚â° (u , w2)
                           ‚Üí steps k (FIX (LAMBDA t) , w1) ‚â° (u , w2)
steps-APPLY-LAMBDA-FIX‚Üí {0} {t} {u} {w1} {w2} ltk comp = ‚ä•-elim (<-irrefl refl ltk)
steps-APPLY-LAMBDA-FIX‚Üí {suc k} {t} {u} {w1} {w2} ltk comp = comp


Œ£stepsUpdRel-FIX-APPLY‚Üí :
  {name : Name} {f g : Term} {w1 w : ùïé¬∑}
  ‚Üí Œ£ (Œ£stepsUpdRel name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) (FIX (force g))) w)
       (Œª x ‚Üí 0 < fst (snd x))
  ‚Üí Œ£stepsUpdRel name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (FIX (force g)) w
Œ£stepsUpdRel-FIX-APPLY‚Üí {name} {f} {g} {w1} {w} ((k1 , k2 , y1 , y2 , w3 , comp1 , comp2 , u) , gt0) =
  k1 , k2 , y1 , y2 , w3 , comp1 , steps-APPLY-LAMBDA-FIX‚Üí gt0 comp2 , u



step-updRel : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term}
              {a b x : Term} {w1 w2 w : ùïé¬∑}
              ‚Üí ¬¨Names f
              ‚Üí ¬¨Names g
              ‚Üí # f
              ‚Üí # g
              ‚Üí step a w1 ‚â° just (x , w2)
              ‚Üí stepsPresUpdRel n name f g x w2
              ‚Üí updRel name f g a b
              ‚Üí getT‚â§‚Ñï w1 n name
              ‚Üí compatible¬∑ name w1 Res‚ä§
              ‚Üí ‚àÄùïé-get0-NUM w1 name
              ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
              ‚Üí Œ£stepsUpdRel name f g x w2 b w
step-updRel gc {n} {name} {f} {g} {.NAT} {.NAT} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-NAT gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAT , NAT , w1 , refl , refl , updRel-NAT
step-updRel gc {n} {name} {f} {g} {.QNAT} {.QNAT} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-QNAT gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QNAT , QNAT , w1 , refl , refl , updRel-QNAT
step-updRel gc {n} {name} {f} {g} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-LT _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-QLT _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(NUM x‚ÇÅ)} {.(NUM x‚ÇÅ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-NUM x‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NUM x‚ÇÅ , NUM x‚ÇÅ , w1 , refl , refl , updRel-NUM _
step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
... | inj‚ÇÅ (i1 , p) rewrite p | updRel-NUM‚Çó‚Üí r with is-NUM b‚ÇÅ
... |    inj‚ÇÅ (i2 , q) rewrite q | updRel-NUM‚Çó‚Üí r‚ÇÅ with i1 <? i2
... |       yes j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , refl , concl , r‚ÇÇ
  where
    concl : steps 1 (IFLT (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (c‚ÇÇ , w)
    concl with i1 <? i2
    ... | yes j' = refl
    ... | no j' = ‚ä•-elim (j' j)
... |       no j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , refl , concl , r‚ÇÉ
  where
    concl : steps 1 (IFLT (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (d‚ÇÇ , w)
    concl with i1 <? i2
    ... | yes j' = ‚ä•-elim (j j')
    ... | no j' = refl
step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn | inj‚ÇÅ (i1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ r‚ÇÇ r‚ÇÉ ind'
  where
    ind' : Œ£stepsUpdRel name f g b‚ÇÅ' w1' b‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-IFLT‚ÇÇ‚Üí ind) r‚ÇÅ gtn compat wgt0 eqn
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ r‚ÇÅ r‚ÇÇ r‚ÇÉ ind'
  where
    ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-IFLT‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUC a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
... | inj‚ÇÅ (i , p)
  rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel-NUM‚Çó‚Üí r =
  0 , 1 , NUM (suc i) , NUM (suc i) , w1 , refl , refl , updRel-NUM (suc i)
... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z)
  rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-SUC‚ÇÅ ind'
  where
    ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-SUC‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-PI _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LAMBDA a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LAMBDA a‚ÇÅ , LAMBDA a‚ÇÇ , w1 , refl , refl , updRel-LAMBDA _ _ r
step-updRel gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-LAM a‚ÇÅ
... | inj‚ÇÅ (t , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  concl d --ret (sub a t) w
  where
    d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
        ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
    d = updRel-LAMBDA‚Çó‚Üí r

    concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
            ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
            ‚Üí Œ£stepsUpdRel name f g (sub b‚ÇÅ t) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
    concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub b‚ÇÅ t , sub b‚ÇÇ u , w1 , refl , refl , updRel-sub cf cg ur r‚ÇÅ
    concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
      where
        ind' : stepsPresUpdRel n name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        ind' rewrite e1 | e2 | sub-upd name f b‚ÇÅ cf = ind

        c1 : Œ£stepsUpdRel name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) b‚ÇÇ) w
        c1 = fst (‚ÜíŒ£stepsUpdRel-upd gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} cf cg nng compat wgt0 r‚ÇÅ eqn ind')

        c2 : Œ£stepsUpdRel name f g (sub b‚ÇÅ (updBody name f)) w1 (APPLY (force g) b‚ÇÇ) w
        c2 rewrite sub-upd name f b‚ÇÅ cf = c1
... | inj‚ÇÇ q with is-CS a‚ÇÅ
... |    inj‚ÇÅ (name' , p) rewrite p = ‚ä•-elim (updRel-CS‚Çó‚Üí r)
step-updRel gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn | inj‚ÇÇ q | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... | inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ r‚ÇÅ ind'
  where
    ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-APPLY‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-FIX a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn with is-LAM a‚ÇÅ
... | inj‚ÇÅ (t , p)
  rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  concl d
  where
    d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
        ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
    d = updRel-LAMBDA‚Çó‚Üí r

    concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
            ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
            ‚Üí Œ£stepsUpdRel name f g (sub (FIX (LAMBDA t)) t) w1 (FIX a‚ÇÇ) w
    concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub (FIX (LAMBDA t)) t , sub (FIX (LAMBDA u)) u , w1 , refl , refl , updRel-sub cf cg ur (updRel-FIX _ _ (updRel-LAMBDA _ _ ur))
    concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
      where
        ind' : stepsPresUpdRel n name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        ind' rewrite e1 | e2 | sub-upd name f (FIX (upd name f)) cf = ind

        c1b : Œ£ (Œ£stepsUpdRel name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) (FIX (force g))) w)
                (Œª x ‚Üí 0 < fst (snd x))
        c1b = ‚ÜíŒ£stepsUpdRel-upd gc {n} {name} {f} {g} {FIX (upd name f)} {FIX (force g)} {w1} {w} cf cg nng compat wgt0 (updRel-FIX _ _ updRel-upd) eqn ind'

        c1 : Œ£stepsUpdRel name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (FIX (force g)) w
        c1 = Œ£stepsUpdRel-FIX-APPLY‚Üí c1b

        c2 : Œ£stepsUpdRel name f g (sub (FIX (upd name f)) (updBody name f)) w1 (FIX (force g)) w
        c2 rewrite sub-upd name f (FIX (upd name f)) cf = c1
... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z)
  rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
  ‚ÜíŒ£stepsUpdRel-FIX‚ÇÅ ind'
  where
    ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
    ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-FIX‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-updRel gc {n} {name} {f} {g} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SUM _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-PAIR _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SET _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-TUNION _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-UNION _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-QTUNION _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-INL a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INL a‚ÇÅ , INL a‚ÇÇ , w1 , refl , refl , updRel-INL _ _ r
step-updRel gc {n} {name} {f} {g} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-INR a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INR a‚ÇÅ , INR a‚ÇÇ , w1 , refl , refl , updRel-INR _ _ r
step-updRel gc {n} {name} {f} {g} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , refl , refl , updRel-EQ _ _ _ _ _ _ r r‚ÇÅ r‚ÇÇ
step-updRel gc {n} {name} {f} {g} {.AX} {.AX} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-AX gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , AX , AX , w1 , refl , refl , updRel-AX
step-updRel gc {n} {name} {f} {g} {.FREE} {.FREE} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-FREE gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FREE , FREE , w1 , refl , refl , updRel-FREE
step-updRel gc {n} {name} {f} {g} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn = {!!}
step-updRel gc {n} {name} {f} {g} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TSQUASH a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TSQUASH a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , refl , refl , updRel-TSQUASH _ _ r
step-updRel gc {n} {name} {f} {g} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TTRUNC a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TTRUNC a‚ÇÅ , TTRUNC a‚ÇÇ , w1 , refl , refl , updRel-TTRUNC _ _ r
step-updRel gc {n} {name} {f} {g} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TCONST a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TCONST a‚ÇÅ , TCONST a‚ÇÇ , w1 , refl , refl , updRel-TCONST _ _ r
step-updRel gc {n} {name} {f} {g} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUBSING a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUBSING a‚ÇÅ , SUBSING a‚ÇÇ , w1 , refl , refl , updRel-SUBSING _ _ r
step-updRel gc {n} {name} {f} {g} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-DUM a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , DUM a‚ÇÅ , DUM a‚ÇÇ , w1 , refl , refl , updRel-DUM _ _ r
step-updRel gc {n} {name} {f} {g} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-FFDEFS _ _ _ _ r r‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(UNIV x‚ÇÅ)} {.(UNIV x‚ÇÅ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-UNIV x‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNIV x‚ÇÅ , UNIV x‚ÇÅ , w1 , refl , refl , updRel-UNIV x‚ÇÅ
step-updRel gc {n} {name} {f} {g} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LIFT a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LIFT a‚ÇÅ , LIFT a‚ÇÇ , w1 , refl , refl , updRel-LIFT _ _ r
step-updRel gc {n} {name} {f} {g} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LOWER a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LOWER a‚ÇÅ , LOWER a‚ÇÇ , w1 , refl , refl , updRel-LOWER _ _ r
step-updRel gc {n} {name} {f} {g} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SHRINK a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SHRINK a‚ÇÅ , SHRINK a‚ÇÇ , w1 , refl , refl , updRel-SHRINK _ _ r
step-updRel gc {n} {name} {f} {g} {.(upd name f)} {.(force g)} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-upd gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , upd name f , force g , w1 , refl , refl , updRel-upd
-- LAMBDA (LET (VAR 0) (LET (IFLT (APPLY (CS name) (NUM 0)) (VAR 0) (CHOOSE (NAME name) (VAR 0)) AX) (APPLY (shiftUp 0 f) (VAR 1))))
-- LAMBDA (LET (VAR 0) (APPLY g (VAR 0)))


steps-updRel-aux : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term}
                   ‚Üí ¬¨Names f
                   ‚Üí # f
                   ‚Üí (k : ‚Ñï)
                   ‚Üí (ind : (k' : ‚Ñï) ‚Üí k' < k ‚Üí presUpdRel n name f g k')
                   ‚Üí presUpdRel n name f g k
steps-updRel-aux gc {n} {name} {f} {g} nnf cf 0 ind {a} {b} {v} {w1} {w2} {w} r eqw comp ish isv
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = 0 , b , refl , r
steps-updRel-aux gc {n} {name} {f} {g} nnf cf (suc k) ind {a} {b} {v} {w1} {w2} {w} r eqw comp ish isv
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z = {!!}
  where
    ind0 : (k' : ‚Ñï) ‚Üí k' < suc k ‚Üí presUpdRel n name f g k'
    ind0 = ind

    ind1 : (k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel n name f g k'
    ind1 k' ltk = ind0 k' (_‚â§_.s‚â§s ltk)
... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) | stepVal a w1 isv =
  ‚ä•-elim (¬¨just‚â°nothing z)



steps-updRel : (gc : getT-chooseT) {n : ‚Ñï} {name : Name} {f g : Term} {k : ‚Ñï}
               ‚Üí ¬¨Names f
               ‚Üí # f
               ‚Üí presUpdRel n name f g k
steps-updRel gc {n} {name} {f} {g} {k} nnf cf =
  <‚Ñïind _ (steps-updRel-aux gc {n} {name} {f} {g} nnf cf) k



‚â°suc‚Üí< : {a b : ‚Ñï} ‚Üí a ‚â° suc b ‚Üí b < a
‚â°suc‚Üí< {a} {b} e rewrite e = ‚â§-refl



-- define an 'external' version of #ŒΩtestM that follows the computation of (APPLY F f), and keeps
-- track of the highest number f is applied to, and prove that this 'external' version returns
-- the same value as the 'internal' one (i.e., #ŒΩtestM)
eqfg : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm}
      ‚Üí #¬¨Names F
      ‚Üí #¬¨Names f
      ‚Üí #¬¨Names g
      ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
      ‚Üí ‚ààType i w #BAIRE f
      ‚Üí ‚ààType i w #BAIRE g
      ‚Üí equalInType i w (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí n < ? ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
      ‚Üí equalInType i w #NAT (#APPLY F f) (#APPLY F g)
eqfg nc cn kb gc {i} {w} {F} {f} {g} nnF nnf nng ‚ààF ‚ààf ‚ààg eqb =
  equalInType-trans (equalInType-APPLY-force ‚ààF ‚ààf) (equalInType-trans eqf (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààg)))
  where
    neqt : NATeq w (#ŒΩtestM F f) (#ŒΩtestM F f)
    neqt = ŒΩtestM-NAT nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf

    tn : ‚Ñï
    tn = fst neqt

    x : NATeq w (#ŒΩtestM F f) (#NUM tn)
    x = tn , fst (snd neqt) , compAllRefl _ _

    cx : #ŒΩtestM F f #‚áõ #NUM tn at w
    cx = NATeq‚Üí‚áõ {w} {#ŒΩtestM F f} x

    eqb1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#NATn (#ŒΩtestM F f)) a‚ÇÅ a‚ÇÇ
                         ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqb1 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (‚â°BAIREn (#ŒΩtestM F f)) eqb)

    eqb2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª k ‚Üí a‚ÇÅ #‚áõ #NUM k at w'' √ó a‚ÇÇ #‚áõ #NUM k at w'' √ó k < tn))
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí NATeq w'' (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)))
    eqb2 w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-NAT‚Üí i w1 (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ) (eqb1 w1 e1 a‚ÇÅ a‚ÇÇ (‚ÜíequalInType-NATn (‚àÄùïé-mon e1 cx) eqa))

    eqb3 : ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < tn
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
    eqb3 w1 e1 k ltk = kb z w1 (‚äë-refl¬∑ _)
      where
        z : ‚ñ°¬∑ w1 (Œª w'' _ ‚Üí NATeq w'' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        z = eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí k , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , ltk))

    inn : ‚ààType i w #NAT (#APPLY F (#force f))
    inn = equalInType-refl (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààf))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force f)) ‚Üí NATeq w' (#APPLY F (#force f)) (#APPLY F (#force g)))
    aw w1 e1 (n , comp1 , comp2) = n , comp1 , ¬¨Names‚Üí‚áì‚Üí‚áõ w1 w1 ‚åú #APPLY F (#force g) ‚åù (NUM n) (#¬¨Names-APPLY {F} {#force g} nnF (#¬¨Names-force {g} nng)) compg
      where
        cxb : Œ£ ùïé¬∑ (Œª w2 ‚Üí ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2)
        cxb = ‚áì‚Üífrom-to (lower (cx w1 e1))

        w2 : ùïé¬∑
        w2 = fst cxb

        compt : ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2
        compt = snd cxb

        compu : Œ£ Name (Œª name ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                 APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) ‚áì v from (chooseT name (startNewChoiceT Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)) (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM j)
                 √ó tn ‚â° suc j)))
        compu = #ŒΩtestM‚áì‚Üí nc cn {w1} {w2} {‚åú F ‚åù} {‚åú f ‚åù} {tn} (CTerm.closed F) (CTerm.closed f) nnF nnf compt

        name : Name
        name = fst compu

        v : Term
        v = fst (snd compu)

        j : ‚Ñï
        j = fst (snd (snd compu))

        w1' : ùïé¬∑
        w1' = chooseT name (startNewChoiceT Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)) (NUM 0)

        k : ‚Ñï
        k = fst (fst (snd (snd (snd compu))))

        compa : steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1') ‚â° (v , w2)
        compa = snd (fst (snd (snd (snd compu))))

        isvv : isValue v
        isvv = fst (snd (snd (snd (snd compu))))

        g0 : getT 0 name w2 ‚â° just (NUM j)
        g0 = fst (snd (snd (snd (snd (snd compu)))))

        eqj : tn ‚â° suc j
        eqj = snd (snd (snd (snd (snd (snd compu)))))

        ish : isHighest‚Ñï {k} {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
        ish = steps-sat-isHighest‚Ñï
                gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f) {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
                compa isvv (updCtxt-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) (¬¨Names‚ÜíupdCtxt {name} {‚åú f ‚åù} {‚åú F ‚åù} nnF) updCtxt-upd)
                {!!}
                {!!}
                (j , g0 , ‚â°suc‚Üí< eqj)

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = {!!}

-- We need to prove something like this, where w1 and w1' differ only in name
-- (we should be able to prove that for any world w3 between w1' and w2 (Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w3 ‚â° just (NUM j) √ó j ‚â§ m0)) -- see steps-sat-isHighest‚Ñï being proved below
-- (and then define a 'differ' relation relating CTXT(upd name f)/CTXT(force f)/CTXT(force g))
--  ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2 -- These 3 hypotheses come from #ŒΩtestM‚áì‚Üí
--  ‚Üí getT 0 name w2 ‚â° just (NUM m0)
--  ‚Üí m0 ‚â§ m
--  ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < m ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k))) -- from eqb2
--  ‚Üí APPLY F (force f) ‚áì NUM n at w1
--  ‚Üí APPLY F (force g) ‚áì NUM n at w1

    eqf : equalInType i w #NAT (#APPLY F (#force f)) (#APPLY F (#force g))
    eqf = ‚ÜíequalInType-NAT i w (#APPLY F (#force f)) (#APPLY F (#force g)) (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT‚Üí i w (#APPLY F (#force f)) (#APPLY F (#force f)) inn))





{--foo2 : {F f g : Term} {n m : ‚Ñï} {w1 w1' w2 : ùïé¬∑}
       ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2 -- These 2 hypotheses come from #ŒΩtestM‚áì‚Üí
       ‚Üí getT‚â§‚Ñï w2 m name
       ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < m ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k))) -- from eqb2
       ‚Üí APPLY F (force f) ‚áì NUM n at w1
       ‚Üí APPLY F (force g) ‚áì NUM n at w1
foo2 {F} {f} {g} {n} {m} {w1} {w1'} {w2} comp
--}



continuity : (nc : ‚Ñï‚ÑÇ) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : getT-chooseT)
             (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
             ‚Üí #¬¨Names F
             ‚Üí #¬¨Names f
             ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
             ‚Üí ‚ààType i w #BAIRE f
             ‚Üí ‚ààType i w (#contBody F f) (#PAIR (#ŒΩtestM F f) #lam3AX)
continuity nc cn kb gc i w F f nnF nnf ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestM F f , #ŒΩtestM F f , #lam3AX , #lam3AX ,
      testM-NAT nc cn kb gc i w1 F f nnF nnf (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestM F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#BAIREn (#ŒΩtestM F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2
          where
            aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                           (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                                 (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
              equalInType-FUN
                (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
                (eqTypesFUN‚Üê
                  (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w2 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w2 F f nnF nnf (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
                  (eqTypesEQ‚Üê eqTypesNAT
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                              (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
                aw4
              where
                aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                     ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f)))
                                                               (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                         (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
                aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
                  equalInType-FUN
                    (eqTypesEQ‚Üê (‚ÜíequalTypesBAIREn i w3 (#ŒΩtestM F f) (#ŒΩtestM F f) (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚Üí‚ààBAIREn (testM-NAT nc cn kb gc i w3 F f nnF nnf (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    (eqTypesEQ‚Üê eqTypesNAT
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                                 (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                    aw5
                  where
                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                        ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#BAIREn (#ŒΩtestM F f))) y‚ÇÅ y‚ÇÇ
                                        ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                            (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                    aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                      equalInType-EQ
                        eqTypesNAT
                        concl
                      where
                        hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ)
                        hyp = equalInType-EQ‚Üí ey

                        ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                        ff = equalInTypeFFDEFS‚Üí ex

                        aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#BAIREn (#ŒΩtestM F f)) f g‚ÇÅ
                                              ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                              ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                          where
                            h3 : equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
                            h3 = equalInType-BAIREn-BAIRE-trans h2 h1 (testM-NAT nc cn kb gc i w5 F f nnF nnf (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                            cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                            cc = {!!}

-- ‚Üí #¬¨Names F
-- ‚Üí #¬¨Names f
-- ‚Üí #¬¨Names g
-- ‚Üí equalInType i w5 (#BAIREn (#ŒΩtestM F f)) f g
--       ((n : ‚Ñï) ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
-- ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)

                        concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                        concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

            aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                                  ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                        (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]BAIREn ‚åû #ŒΩtestM F f ‚åü))
                                                                                 (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                                 (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
            aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI-PI F f (#ŒΩtestM F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql1 : equalInType i w1 (sub0 (#ŒΩtestM F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contBodyPI F f (#ŒΩtestM F f))) eql2

    seq : ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType i w' #NAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestM F f) #lam3AX)
                                (#PAIR (#ŒΩtestM F f) #lam3AX))
    seq = Mod.‚àÄùïé-‚ñ° M aw

    h0 : ‚ààType i w (#SUM #NAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]BAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestM F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesNAT) (equalTypes-contBodyPI i w F f ‚ààF ‚ààf) seq

\end{code}
