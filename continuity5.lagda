\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
--open import Relation.Binary.PropositionalEquality hiding ([_] ; Extensionality)
--open ‚â°-Reasoning
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar
open import encode


module continuity5 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                   (C : Choice)
                   (K : Compatible {L} W C)
                   (G : GetChoice {L} W C K)
                   (X : ChoiceExt W C)
                   (N : NewChoice {L} W C K G)
                   (EC : Encode)
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms4(W)(C)(K)(G)(X)(N)(EC)
open import terms5(W)(C)(K)(G)(X)(N)(EC)
open import terms6(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)
open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
open import ind2(W)(M)(C)(K)(G)(X)(N)(EC)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import encodeDef(EC)

open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
open import props4(W)(M)(C)(K)(G)(X)(N)(EC)

open import continuity-conds(W)(C)(K)(G)(X)(N)(EC)

open import continuity1(W)(M)(C)(K)(G)(X)(N)(EC)
open import continuity2(W)(M)(C)(K)(G)(X)(N)(EC)
open import continuity3(W)(M)(C)(K)(G)(X)(N)(EC)
open import continuity4(W)(M)(C)(K)(G)(X)(N)(EC)


updRel-NATRECr : {name : Name} {f g : Term} {n : ‚Ñï} {b1 b2 c1 c2 : Term} (cf : # f) (cg : # g)
               ‚Üí updRel name f g b1 b2
               ‚Üí updRel name f g c1 c2
               ‚Üí updRel name f g (NATRECr n b1 c1) (NATRECr n b2 c2)
updRel-NATRECr {name} {f} {g} {0} {b1} {b2} {c1} {c2} cf cg ub uc = ub
updRel-NATRECr {name} {f} {g} {suc n} {b1} {b2} {c1} {c2} cf cg ub uc =
  updRel-APPLY _ _ _ _
    (updRel-APPLY _ _ _ _ uc (updRel-NUM _))
   (updRel-NATREC _ _ _ _ _ _ (updRel-NUM _) ub uc)


updRel-WRECr : {name : Name} {f g : Term} {r1 r2 f1 f2 : Term} (cf : # f) (cg : # g)
               ‚Üí updRel name f g r1 r2
               ‚Üí updRel name f g f1 f2
               ‚Üí updRel name f g (WRECr r1 f1) (WRECr r2 f2)
updRel-WRECr {name} {f} {g} {r1} {r2} {f1} {f2} cf cg dr df =
  updRel-LAMBDA
    _ _
    (updRel-WREC
      _ _ _ _
      (updRel-APPLY _ _ _ _ (updRel-shiftUp 0 cf cg df) (updRel-VAR 0))
      (updRel-shiftUp 3 cf cg dr))


updRel-BOT : (name : Name) (f g : Term)
             ‚Üí updRel name f g BOT BOT
updRel-BOT name f g = updRel-FIX ID ID (updRel-LAMBDA (VAR 0) (VAR 0) (updRel-VAR _))


updRel-ENCr : {name : Name} {f g : Term} {a : Term}
              ‚Üí updRel name f g a a
              ‚Üí updRel name f g (ENCr a) (ENCr a)
updRel-ENCr {name} {f} {g} {a} u =
  updRel-IFEQ
    (APPLY a (NUM (encode¬∑ (ENC a)))) (APPLY a (NUM (encode¬∑ (ENC a)))) N0 N0 BOT BOT N0 N0
    (updRel-APPLY a a (NUM (encode¬∑ (ENC a))) (NUM (encode¬∑ (ENC a))) u (updRel-NUM _))
    (updRel-NUM _)
    (updRel-BOT name f g)
    (updRel-NUM _)


abstract

  step-updRel : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term}
                {a b x : Term} {w1 w2 w : ùïé¬∑}
                ‚Üí ¬¨Names f
                ‚Üí ¬¨Names g
                ‚Üí # f
                ‚Üí # g
                ‚Üí step a w1 ‚â° just (x , w2)
                ‚Üí stepsPresUpdRel n name f g x w2
                ‚Üí updRel name f g a b
                ‚Üí getT‚â§‚Ñï w1 n name
                ‚Üí compatible¬∑ name w1 Res‚ä§
                ‚Üí ‚àÄùïé-get0-NUM w1 name
                ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
                ‚Üí Œ£stepsUpdRel name f g x w2 b w
--  step-updRel gc {n} {name} {f} {g} {.NAT} {.NAT} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-NAT gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NAT , NAT , w1 , refl , refl , updRel-NAT
  step-updRel gc {n} {name} {f} {g} {.QNAT} {.QNAT} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-QNAT gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QNAT , QNAT , w1 , refl , refl , updRel-QNAT
--  step-updRel gc {n} {name} {f} {g} {.TNAT} {.TNAT} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-TNAT gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TNAT , TNAT , w1 , refl , refl , updRel-TNAT
  step-updRel gc {n} {name} {f} {g} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LT a‚ÇÅ b‚ÇÅ , LT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-LT _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QLT a‚ÇÅ b‚ÇÅ , QLT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-QLT _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(NUM x‚ÇÅ)} {.(NUM x‚ÇÅ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-NUM x‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NUM x‚ÇÅ , NUM x‚ÇÅ , w1 , refl , refl , updRel-NUM _
  step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (i1 , p) rewrite p | updRel-NUM‚Çó‚Üí r with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (i2 , q) rewrite q | updRel-NUM‚Çó‚Üí r‚ÇÅ with i1 <? i2
  ... |       yes j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , refl , concl , r‚ÇÇ
    where
      concl : steps 1 (IFLT (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (c‚ÇÇ , w)
      concl with i1 <? i2
      ... | yes j' = refl
      ... | no j' = ‚ä•-elim (j' j)
  ... |       no j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , refl , concl , r‚ÇÉ
    where
      concl : steps 1 (IFLT (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (d‚ÇÇ , w)
      concl with i1 <? i2
      ... | yes j' = ‚ä•-elim (j j')
      ... | no j' = refl
  step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn | inj‚ÇÅ (i1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-IFLT‚ÇÇ r‚ÇÇ r‚ÇÉ ind'
    where
      ind' : Œ£stepsUpdRel name f g b‚ÇÅ' w1' b‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-IFLT‚ÇÇ‚Üí ind) r‚ÇÅ gtn compat wgt0 eqn
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-IFLT‚ÇÅ r‚ÇÅ r‚ÇÇ r‚ÇÉ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-IFLT‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (i1 , p) rewrite p | updRel-NUM‚Çó‚Üí r with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (i2 , q) rewrite q | updRel-NUM‚Çó‚Üí r‚ÇÅ with i1 ‚âü i2
  ... |       yes j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , c‚ÇÅ , c‚ÇÇ , w1 , refl , concl , r‚ÇÇ
    where
      concl : steps 1 (IFEQ (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (c‚ÇÇ , w)
      concl with i1 ‚âü i2
      ... | yes j' = refl
      ... | no j' = ‚ä•-elim (j' j)
  ... |       no j rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , d‚ÇÅ , d‚ÇÇ , w1 , refl , concl , r‚ÇÉ
    where
      concl : steps 1 (IFEQ (NUM i1) (NUM i2) c‚ÇÇ d‚ÇÇ , w) ‚â° (d‚ÇÇ , w)
      concl with i1 ‚âü i2
      ... | yes j' = ‚ä•-elim (j j')
      ... | no j' = refl
  step-updRel gc {n} {name} {f} {g} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn | inj‚ÇÅ (i1 , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-IFEQ‚ÇÇ r‚ÇÇ r‚ÇÉ ind'
    where
      ind' : Œ£stepsUpdRel name f g b‚ÇÅ' w1' b‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {b‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-IFEQ‚ÇÇ‚Üí ind) r‚ÇÅ gtn compat wgt0 eqn
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-IFEQ‚ÇÅ r‚ÇÅ r‚ÇÇ r‚ÇÉ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-IFEQ‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUC a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (i , p)
    rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel-NUM‚Çó‚Üí r =
    0 , 1 , NUM (suc i) , NUM (suc i) , w1 , refl , refl , updRel-NUM (suc i)
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z)
    rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-SUC‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-SUC‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(NATREC a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(NATREC a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-NATREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (i , p)
    rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel-NUM‚Çó‚Üí r
    = 0 , 1 , NATRECr i b‚ÇÅ c‚ÇÅ , NATRECr i b‚ÇÇ c‚ÇÇ , w1 , refl , refl ,
      updRel-NATRECr {name} {f} {g} {i} {b‚ÇÅ} {b‚ÇÇ} {c‚ÇÅ} {c‚ÇÇ} cf cg r‚ÇÅ r‚ÇÇ
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z)
    rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-NATREC‚ÇÅ r‚ÇÅ r‚ÇÇ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-NATREC‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PI a‚ÇÅ b‚ÇÅ , PI a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-PI _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LAMBDA a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LAMBDA a‚ÇÅ , LAMBDA a‚ÇÇ , w1 , refl , refl , updRel-LAMBDA _ _ r
  step-updRel gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d --ret (sub a t) w
    where
      d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
          ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
      d = updRel-LAMBDA‚Çó‚Üí r

      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
              ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
              ‚Üí Œ£stepsUpdRel name f g (sub b‚ÇÅ t) w1 (APPLY a‚ÇÇ b‚ÇÇ) w
      concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub b‚ÇÅ t , sub b‚ÇÇ u , w1 , refl , refl , updRel-sub cf cg ur r‚ÇÅ
      concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
        where
          ind' : stepsPresUpdRel n name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
          ind' rewrite e1 | e2 | sub-upd name f b‚ÇÅ cf = ind

          c1 : Œ£stepsUpdRel name f g (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) b‚ÇÇ) w
          c1 = fst (‚ÜíŒ£stepsUpdRel-upd gc {n} {name} {f} {g} {b‚ÇÅ} {b‚ÇÇ} {w1} {w} cf cg nng compat wgt0 r‚ÇÅ eqn ind')

          c2 : Œ£stepsUpdRel name f g (sub b‚ÇÅ (updBody name f)) w1 (APPLY (force g) b‚ÇÇ) w
          c2 rewrite sub-upd name f b‚ÇÅ cf = c1
  ... | inj‚ÇÇ q with is-CS a‚ÇÅ
  ... |    inj‚ÇÅ (name' , p) rewrite p = ‚ä•-elim (updRel-CS‚Çó‚Üí r)
  step-updRel gc {n} {name} {f} {g} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn | inj‚ÇÇ q | inj‚ÇÇ p with is-MSEQ a‚ÇÅ
  ... | inj‚ÇÅ (sq , sqr) rewrite sqr | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel-MSEQ‚Çó‚Üí r =
    0 , 1 , MAPP sq b‚ÇÅ , MAPP sq b‚ÇÇ , w1 , refl , refl , updRel-MAPP sq b‚ÇÅ b‚ÇÇ r‚ÇÅ
  ... | inj‚ÇÇ sqr with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-APPLY‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-APPLY‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-FIX a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , p)
    rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
          ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
      d = updRel-LAMBDA‚Çó‚Üí r

      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° LAMBDA u √ó updRel name f g t u)
              ‚äé (t ‚â° updBody name f √ó a‚ÇÇ ‚â° force g)
              ‚Üí Œ£stepsUpdRel name f g (sub (FIX (LAMBDA t)) t) w1 (FIX a‚ÇÇ) w
      concl (inj‚ÇÅ (u , eqa , ur)) rewrite eqa = 0 , 1 , sub (FIX (LAMBDA t)) t , sub (FIX (LAMBDA u)) u , w1 , refl , refl , updRel-sub cf cg ur (updRel-FIX _ _ (updRel-LAMBDA _ _ ur))
      concl (inj‚ÇÇ (e1 , e2)) rewrite e1 | e2 = c2
        where
          ind' : stepsPresUpdRel n name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
          ind' rewrite e1 | e2 | sub-upd name f (FIX (upd name f)) cf = ind

          c1b : Œ£ (Œ£stepsUpdRel name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (APPLY (force g) (FIX (force g))) w)
                  (Œª x ‚Üí 0 < fst (snd x))
          c1b = ‚ÜíŒ£stepsUpdRel-upd gc {n} {name} {f} {g} {FIX (upd name f)} {FIX (force g)} {w1} {w} cf cg nng compat wgt0 (updRel-FIX _ _ updRel-upd) eqn ind'

          c1 : Œ£stepsUpdRel name f g (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 (FIX (force g)) w
          c1 = Œ£stepsUpdRel-FIX-APPLY‚Üí c1b

          c2 : Œ£stepsUpdRel name f g (sub (FIX (upd name f)) (updBody name f)) w1 (FIX (force g)) w
          c2 rewrite sub-upd name f (FIX (upd name f)) cf = c1
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z)
    rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-FIX‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-FIX‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with isValue‚äé a‚ÇÅ
  ... | inj‚ÇÅ y rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    0 , 1 , sub a‚ÇÅ b‚ÇÅ , sub a‚ÇÇ b‚ÇÇ , w1 , refl , (snd (LET-val‚áì w a‚ÇÇ b‚ÇÇ (updRel‚ÜíisValue r y))) , (updRel-sub cf cg r‚ÇÅ r)
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-LET‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-LET‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , WT a‚ÇÅ b‚ÇÅ c‚ÇÅ , WT a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , refl , refl , updRel-WT _ _ _ _ _ _ r r‚ÇÅ r‚ÇÇ
  step-updRel gc {n} {name} {f} {g} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUP a‚ÇÅ b‚ÇÅ , SUP a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SUP _ _ _ _ r r‚ÇÅ
  {--step-updRel gc {n} {name} {f} {g} {.(DSUP a‚ÇÅ b‚ÇÅ)} {.(DSUP a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-DSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
      d = updRel-SUP‚Çó‚Üí r

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
              ‚Üí Œ£stepsUpdRel name f g (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ)) w1 (DSUP a‚ÇÇ b‚ÇÇ) w
      concl (x‚ÇÅ , x‚ÇÇ , eqa , ur1 , ur2) rewrite eqa = 0 , 1 , sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , sub x‚ÇÇ (sub x‚ÇÅ b‚ÇÇ) , w1 , refl , refl , updRel-sub cf cg (updRel-sub cf cg r‚ÇÅ ur1) ur2
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-DSUP‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-DSUP‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))--}
  step-updRel gc {n} {name} {f} {g} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
      d = updRel-SUP‚Çó‚Üí r

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° SUP x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
              ‚Üí Œ£stepsUpdRel name f g (sub (WRECr b‚ÇÅ u‚ÇÇ) (sub (shiftUp 0 u‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 u‚ÇÅ)) b‚ÇÅ))) w1 (WREC a‚ÇÇ b‚ÇÇ) w
      concl (x‚ÇÅ , x‚ÇÇ , eqa , ur1 , ur2) rewrite eqa =
        0 , 1 ,
        sub (WRECr b‚ÇÅ u‚ÇÇ) (sub (shiftUp 0 u‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 u‚ÇÅ)) b‚ÇÅ)) ,
        sub (WRECr b‚ÇÇ x‚ÇÇ) (sub (shiftUp 0 x‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 x‚ÇÅ)) b‚ÇÇ)) ,
        w1 , refl , refl ,
        updRel-sub cf cg
          (updRel-sub cf cg (updRel-sub cf cg r‚ÇÅ (updRel-shiftUp 0 cf cg  (updRel-shiftUp 0 cf cg ur1))) (updRel-shiftUp 0 cf cg ur2))
          (updRel-WRECr cf cg r‚ÇÅ ur2)
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-WREC‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-WREC‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MT a‚ÇÅ b‚ÇÅ c‚ÇÅ , MT a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , refl , refl , updRel-MT _ _ _ _ _ _ r r‚ÇÅ r‚ÇÇ
  --step-updRel gc {n} {name} {f} {g} {.(MSUP a‚ÇÅ b‚ÇÅ)} {.(MSUP a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-MSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MSUP a‚ÇÅ b‚ÇÅ , MSUP a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-MSUP _ _ _ _ r r‚ÇÅ
  {--step-updRel gc {n} {name} {f} {g} {.(DMSUP a‚ÇÅ b‚ÇÅ)} {.(DMSUP a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-DMSUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-MSUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° MSUP x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
      d = updRel-MSUP‚Çó‚Üí r

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° MSUP x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
              ‚Üí Œ£stepsUpdRel name f g (sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ)) w1 (DMSUP a‚ÇÇ b‚ÇÇ) w
      concl (x‚ÇÅ , x‚ÇÇ , eqa , ur1 , ur2) rewrite eqa = 0 , 1 , sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , sub x‚ÇÇ (sub x‚ÇÅ b‚ÇÇ) , w1 , refl , refl , updRel-sub cf cg (updRel-sub cf cg r‚ÇÅ ur1) ur2
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-DMSUP‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-DMSUP‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))--}
  step-updRel gc {n} {name} {f} {g} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUM a‚ÇÅ b‚ÇÅ , SUM a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SUM _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PAIR a‚ÇÅ b‚ÇÅ , PAIR a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-PAIR _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-PAIR a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d
    where
      d : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° PAIR x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
      d = updRel-PAIR‚Çó‚Üí r

      concl : Œ£ Term (Œª x‚ÇÅ ‚Üí Œ£ Term (Œª x‚ÇÇ ‚Üí a‚ÇÇ ‚â° PAIR x‚ÇÅ x‚ÇÇ √ó updRel name f g u‚ÇÅ x‚ÇÅ √ó updRel name f g u‚ÇÇ x‚ÇÇ))
              ‚Üí Œ£stepsUpdRel name f g (sub u‚ÇÇ (sub (shiftUp 0 u‚ÇÅ) b‚ÇÅ)) w1 (SPREAD a‚ÇÇ b‚ÇÇ) w
      concl (x‚ÇÅ , x‚ÇÇ , eqa , ur1 , ur2) rewrite eqa =
        0 , 1 ,
        sub u‚ÇÇ (sub (shiftUp 0 u‚ÇÅ) b‚ÇÅ) ,
        sub x‚ÇÇ (sub (shiftUp 0 x‚ÇÅ) b‚ÇÇ) ,
        w1 , refl , refl ,
        updRel-sub cf cg (updRel-sub cf cg r‚ÇÅ (updRel-shiftUp 0 cf cg ur1)) ur2
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-SPREAD‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-SPREAD‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SET a‚ÇÅ b‚ÇÅ , SET a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-SET _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , ISECT a‚ÇÅ b‚ÇÅ , ISECT a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-ISECT _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TUNION a‚ÇÅ b‚ÇÅ , TUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-TUNION _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNION a‚ÇÅ b‚ÇÅ , UNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-UNION _ _ _ _ r r‚ÇÅ
--  step-updRel gc {n} {name} {f} {g} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , QTUNION a‚ÇÅ b‚ÇÅ , QTUNION a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-QTUNION _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-INL a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INL a‚ÇÅ , INL a‚ÇÇ , w1 , refl , refl , updRel-INL _ _ r
  step-updRel gc {n} {name} {f} {g} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-INR a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , INR a‚ÇÅ , INR a‚ÇÇ , w1 , refl , refl , updRel-INR _ _ r
  step-updRel gc {n} {name} {f} {g} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn with is-INL a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d --ret (sub t b) w
    where
      d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° INL u √ó updRel name f g t u)
      d = updRel-INL‚Çó‚Üí r

      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° INL u √ó updRel name f g t u)
              ‚Üí Œ£stepsUpdRel name f g (sub t b‚ÇÅ) w1 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) w
      concl (u , eqa , ur) rewrite eqa = 0 , 1 , sub t b‚ÇÅ , sub u b‚ÇÇ , w1 , refl , refl , updRel-sub cf cg r‚ÇÅ ur
  ... | inj‚ÇÇ y with is-INR a‚ÇÅ
  ... |    inj‚ÇÅ (t , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    concl d --ret (sub -- TODO:  b) w
    where
      d : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° INR u √ó updRel name f g t u)
      d = updRel-INR‚Çó‚Üí r

      concl : Œ£ Term (Œª u ‚Üí a‚ÇÇ ‚â° INR u √ó updRel name f g t u)
              ‚Üí Œ£stepsUpdRel name f g (sub t c‚ÇÅ) w1 (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) w
      concl (u , eqa , ur) rewrite eqa = 0 , 1 , sub t c‚ÇÅ , sub u c‚ÇÇ , w1 , refl , refl , updRel-sub cf cg r‚ÇÇ ur
  ... |    inj‚ÇÇ j with step‚äé a‚ÇÅ w1
  ... |       inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-DECIDE‚ÇÅ r‚ÇÅ r‚ÇÇ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-DECIDE‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ r r‚ÇÅ r‚ÇÇ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , w1 , refl , refl , updRel-EQ _ _ _ _ _ _ r r‚ÇÅ r‚ÇÇ
--  step-updRel gc {n} {name} {f} {g} {.(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-EQB a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ r r‚ÇÅ r‚ÇÇ r‚ÇÉ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ , EQB a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ , w1 , refl , refl , updRel-EQB _ _ _ _ _ _ _ _ r r‚ÇÅ r‚ÇÇ r‚ÇÉ
  step-updRel gc {n} {name} {f} {g} {.AX} {.AX} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-AX gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , AX , AX , w1 , refl , refl , updRel-AX
  step-updRel gc {n} {name} {f} {g} {.FREE} {.FREE} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-FREE gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FREE , FREE , w1 , refl , refl , updRel-FREE
  step-updRel gc {n} {name} {f} {g} {.(MSEQ s)} {.(MSEQ s)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-MSEQ s) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , MSEQ s , MSEQ s , w1 , refl , refl , updRel-MSEQ s
  step-updRel gc {n} {name} {f} {g} {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-MAPP s a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (k , q) rewrite q | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) | updRel-NUM‚Çó‚Üí r =
    0 , 1 , NUM (s k) , NUM (s k) , w1 , refl , refl , updRel-NUM _
  ... | inj‚ÇÇ q with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-MAPP‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-MAPP‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  step-updRel gc {n} {name} {f} {g} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn with is-NAME a‚ÇÅ
  ... | inj‚ÇÅ (name' , p) rewrite p | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = ‚ä•-elim (updRel-NAME‚Çó‚Üí r)
  ... | inj‚ÇÇ q with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1' , z) rewrite z | pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) =
    ‚ÜíŒ£stepsUpdRel-CHOOSE‚ÇÅ r‚ÇÅ ind'
    where
      ind' : Œ£stepsUpdRel name f g a‚ÇÅ' w1' a‚ÇÇ w
      ind' = step-updRel gc {n} {name} {f} {g} {a‚ÇÅ} {a‚ÇÇ} {a‚ÇÅ'} {w1} {w1'} {w} nnf nng cf cg z (stepsPresUpdRel-CHOOSE‚ÇÅ‚Üí ind) r gtn compat wgt0 eqn
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
--  step-updRel gc {n} {name} {f} {g} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TSQUASH a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TSQUASH a‚ÇÅ , TSQUASH a‚ÇÇ , w1 , refl , refl , updRel-TSQUASH _ _ r
--  step-updRel gc {n} {name} {f} {g} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TTRUNC a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TTRUNC a‚ÇÅ , TTRUNC a‚ÇÇ , w1 , refl , refl , updRel-TTRUNC _ _ r
  step-updRel gc {n} {name} {f} {g} {.NOWRITE} {.NOWRITE} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-NOWRITE gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NOWRITE , NOWRITE , w1 , refl , refl , updRel-NOWRITE
  step-updRel gc {n} {name} {f} {g} {.NOREAD}  {.NOREAD}  {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-NOREAD  gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NOREAD  , NOREAD  , w1 , refl , refl , updRel-NOREAD
  step-updRel gc {n} {name} {f} {g} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SUBSING a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SUBSING a‚ÇÅ , SUBSING a‚ÇÇ , w1 , refl , refl , updRel-SUBSING _ _ r
  step-updRel gc {n} {name} {f} {g} {.(PURE)} {.(PURE)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-PURE) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PURE , PURE , w1 , refl , refl , updRel-PURE
  step-updRel gc {n} {name} {f} {g} {.(NOSEQ)} {.(NOSEQ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-NOSEQ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NOSEQ , NOSEQ , w1 , refl , refl , updRel-NOSEQ
  step-updRel gc {n} {name} {f} {g} {.(NOENC)} {.(NOENC)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-NOENC) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , NOENC , NOENC , w1 , refl , refl , updRel-NOENC
  step-updRel gc {n} {name} {f} {g} {.(TERM a‚ÇÅ)} {.(TERM a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-TERM a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , TERM a‚ÇÅ , TERM a‚ÇÇ , w1 , refl , refl , updRel-TERM _ _ r
  step-updRel gc {n} {name} {f} {g} {.(ENC a)} {.(ENC a)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-ENC a r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 1 , ENCr a , ENCr a , w1 , refl , refl , updRel-ENCr r --0 , 0 , TERM a‚ÇÅ , TERM a‚ÇÇ , w1 , refl , refl , updRel-TERM _ _ r
  step-updRel gc {n} {name} {f} {g} {.(PARTIAL a‚ÇÅ)} {.(PARTIAL a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-PARTIAL a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , PARTIAL a‚ÇÅ , PARTIAL a‚ÇÇ , w1 , refl , refl , updRel-PARTIAL _ _ r
  step-updRel gc {n} {name} {f} {g} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ r r‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , FFDEFS a‚ÇÅ b‚ÇÅ , FFDEFS a‚ÇÇ b‚ÇÇ , w1 , refl , refl , updRel-FFDEFS _ _ _ _ r r‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(UNIV x‚ÇÅ)} {.(UNIV x‚ÇÅ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-UNIV x‚ÇÅ) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , UNIV x‚ÇÅ , UNIV x‚ÇÅ , w1 , refl , refl , updRel-UNIV x‚ÇÅ
  step-updRel gc {n} {name} {f} {g} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LIFT a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LIFT a‚ÇÅ , LIFT a‚ÇÇ , w1 , refl , refl , updRel-LIFT _ _ r
  step-updRel gc {n} {name} {f} {g} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-LOWER a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , LOWER a‚ÇÅ , LOWER a‚ÇÇ , w1 , refl , refl , updRel-LOWER _ _ r
  step-updRel gc {n} {name} {f} {g} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {x} {w1} {w2} {w} nnf nng cf cg comp ind (updRel-SHRINK a‚ÇÅ a‚ÇÇ r) gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , SHRINK a‚ÇÅ , SHRINK a‚ÇÇ , w1 , refl , refl , updRel-SHRINK _ _ r
  step-updRel gc {n} {name} {f} {g} {.(upd name f)} {.(force g)} {x} {w1} {w2} {w} nnf nng cf cg comp ind updRel-upd gtn compat wgt0 eqn rewrite pair-inj‚ÇÅ (just-inj (sym comp)) | pair-inj‚ÇÇ (just-inj (sym comp)) = 0 , 0 , upd name f , force g , w1 , refl , refl , updRel-upd


steps-decomp-isHighest‚Ñï : {w w1 w2 : ùïé¬∑} {a b v : Term} {n m : ‚Ñï} (i : ‚Ñï) (name : Name)
              ‚Üí isValue v
              ‚Üí (comp1 : steps m (a , w) ‚â° (b , w1))
              ‚Üí (comp2 : steps n (a , w) ‚â° (v , w2))
              ‚Üí Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
                  isHighest‚Ñï {n} {w} {w2} {a} {v} i name comp2
                  ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp))
steps-decomp-isHighest‚Ñï {w} {w1} {w2} {a} {b} {v} {n} {0} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) = n , ‚â§-refl , comp2 , Œª x ‚Üí x
steps-decomp-isHighest‚Ñï {w} {w1} {w2} {a} {b} {v} {0} {suc m} i name isv comp1 comp2
  rewrite pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
        | stepVal a w isv
        | stepsVal a w m isv
        | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1)
  = 0 , ‚â§-refl , refl , Œª (j , e , q) ‚Üí j , e , <-‚â§-trans ‚â§-refl q
steps-decomp-isHighest‚Ñï {w} {w1} {w2} {a} {b} {v} {suc n} {suc m} i name isv comp1 comp2 with step‚äé a w
... | inj‚ÇÅ (a' , w' , z) rewrite z =
  fst q , ‚â§-trans (fst (snd q)) (<‚áí‚â§ (n<1+n n)) , fst (snd (snd q)) , Œª (x1 , x2) ‚Üí snd (snd (snd q)) x2
  where
    q : Œ£ ‚Ñï (Œª k ‚Üí k ‚â§ n √ó Œ£ (steps k (b , w1) ‚â° (v , w2)) (Œª comp ‚Üí
           isHighest‚Ñï {n} {w'} {w2} {a'} {v} i name comp2
           ‚Üí isHighest‚Ñï {k} {w1} {w2} {b} {v} i name comp))
    q = steps-decomp-isHighest‚Ñï {w'} {w1} {w2} {a'} {b} {v} {n} {m} i name isv comp1 comp2
... | inj‚ÇÇ z rewrite z
           | pair-inj‚ÇÅ (sym comp2) | pair-inj‚ÇÇ (sym comp2)
           | pair-inj‚ÇÅ (sym comp1) | pair-inj‚ÇÇ (sym comp1) = 0 , _‚â§_.z‚â§n , refl , Œª x ‚Üí x



steps-updRel-aux : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term}
                   ‚Üí ¬¨Names f
                   ‚Üí ¬¨Names g
                   ‚Üí # f
                   ‚Üí # g
                   ‚Üí (k : ‚Ñï)
                   ‚Üí (ind : (k' : ‚Ñï) ‚Üí k' < k ‚Üí presUpdRel n name f g k')
                   ‚Üí presUpdRel n name f g k
steps-updRel-aux gc {n} {name} {f} {g} nnf nng cf cg 0 ind {a} {b} {v} {w1} {w2} {w} r compat wgt0 eqw comp ish isv
  rewrite pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) = 0 , b , refl , r
steps-updRel-aux gc {n} {name} {f} {g} nnf nng cf cg (suc k) ind {a} {b} {v} {w1} {w2} {w} r compat wgt0 eqw comp ish isv
  with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z =
  k2 + k4 , v' , steps-trans+ {k2} {k4} {b} {y2} {v'} {w} {w} {w} comp2 comp4 , ur'
  where
    ind0 : (k' : ‚Ñï) ‚Üí k' < suc k ‚Üí presUpdRel n name f g k'
    ind0 = ind

    ind1 : (k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presUpdRel n name f g k'
    ind1 k' ltk = ind0 k' (_‚â§_.s‚â§s ltk)

    spres : stepsPresUpdRel n name f g a' w1'
    spres = k , v , w2 , comp , isv , snd ish , ind1

    s : Œ£stepsUpdRel name f g a' w1' b w
    s = step-updRel gc {n} {name} {f} {g} {a} {b} {a'} {w1} {w1'} {w} nnf nng cf cg z spres r (fst ish) compat wgt0 eqw

    k1 : ‚Ñï
    k1 = fst s

    k2 : ‚Ñï
    k2 = fst (snd s)

    y1 : Term
    y1 = fst (snd (snd s))

    y2 : Term
    y2 = fst (snd (snd (snd s)))

    w3 : ùïé¬∑
    w3 = fst (snd (snd (snd (snd s))))

    comp1 : steps k1 (a' , w1') ‚â° (y1 , w3)
    comp1 = fst (snd (snd (snd (snd (snd s)))))

    comp2 : steps k2 (b , w) ‚â° (y2 , w)
    comp2 = fst (snd (snd (snd (snd (snd (snd s))))))

    ur : updRel name f g y1 y2
    ur = snd (snd (snd (snd (snd (snd (snd s))))))

    q : Œ£ ‚Ñï (Œª k3 ‚Üí k3 ‚â§ k √ó Œ£ (steps k3 (y1 , w3) ‚â° (v , w2)) (Œª comp' ‚Üí
                  isHighest‚Ñï {k} {w1'} {w2} {a'} {v} n name comp
                  ‚Üí isHighest‚Ñï {k3} {w3} {w2} {y1} {v} n name comp'))
    q = steps-decomp-isHighest‚Ñï {w1'} {w3} {w2} {a'} {y1} {v} {k} {k1} n name isv comp1 comp

    k3 : ‚Ñï
    k3 = fst q

    ltk2 : k3 ‚â§ k
    ltk2 = fst (snd q)

    comp3 : steps k3 (y1 , w3) ‚â° (v , w2)
    comp3 = fst (snd (snd q))

    ish' : isHighest‚Ñï {k3} {w3} {w2} {y1} {v} n name comp3
    ish' = snd (snd (snd q)) (snd ish)

    e3 : w1 ‚äë¬∑ w3
    e3 = ‚äë-trans¬∑ (step‚äë {w1} {w1'} {a} {a'} z) (steps‚Üí‚äë k1 a' y1 {w1'} {w3} comp1)

    c : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (y2 , w) ‚â° (v' , w) √ó updRel name f g v v'))
    c = ind1 k3 ltk2 {y1} {y2} {v} {w3} {w2} {w} ur (‚äë-compatible¬∑ e3 compat) (‚àÄùïé-mon e3 wgt0) (‚àÄùïé-mon e3 eqw) comp3 ish' isv

    k4 : ‚Ñï
    k4 = fst c

    v' : Term
    v' = fst (snd c)

    comp4 : steps k4 (y2 , w) ‚â° (v' , w)
    comp4 = fst (snd (snd c))

    ur' : updRel name f g v v'
    ur' = snd (snd (snd c))
... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ (sym comp) | pair-inj‚ÇÇ (sym comp) | stepVal a w1 isv =
  ‚ä•-elim (¬¨just‚â°nothing z)



steps-updRel : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term} {k : ‚Ñï}
               ‚Üí ¬¨Names f
               ‚Üí ¬¨Names g
               ‚Üí # f
               ‚Üí # g
               ‚Üí presUpdRel n name f g k
steps-updRel gc {n} {name} {f} {g} {k} nnf nng cf cg =
  <‚Ñïind _ (steps-updRel-aux gc {n} {name} {f} {g} nnf nng cf cg) k



abstract

  updRel-refl : {name : Name} {f g a : Term}
                ‚Üí ¬¨names a ‚â° true
                ‚Üí updRel name f g a a
  updRel-refl {name} {f} {g} {VAR x} nn = updRel-VAR _
--  updRel-refl {name} {f} {g} {NAT} nn = updRel-NAT
  updRel-refl {name} {f} {g} {QNAT} nn = updRel-QNAT
--  updRel-refl {name} {f} {g} {TNAT} nn = updRel-TNAT
  updRel-refl {name} {f} {g} {LT a a‚ÇÅ} nn = updRel-LT _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {QLT a a‚ÇÅ} nn = updRel-QLT _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {NUM x} nn = updRel-NUM _
  updRel-refl {name} {f} {g} {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel-IFLT _ _ _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí4-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn))
  updRel-refl {name} {f} {g} {IFEQ a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel-IFEQ _ _ _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí4-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn))
  updRel-refl {name} {f} {g} {SUC a} nn = updRel-SUC _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {NATREC a a‚ÇÅ a‚ÇÇ} nn = updRel-NATREC _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
  updRel-refl {name} {f} {g} {PI a a‚ÇÅ} nn = updRel-PI _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {LAMBDA a} nn = updRel-LAMBDA _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {APPLY a a‚ÇÅ} nn = updRel-APPLY _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {FIX a} nn = updRel-FIX _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {LET a a‚ÇÅ} nn = updRel-LET _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {WT a a‚ÇÅ a‚ÇÇ} nn = updRel-WT _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
  updRel-refl {name} {f} {g} {SUP a a‚ÇÅ} nn = updRel-SUP _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  --updRel-refl {name} {f} {g} {DSUP a a‚ÇÅ} nn = updRel-DSUP _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {WREC a a‚ÇÅ} nn = updRel-WREC _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {MT a a‚ÇÅ a‚ÇÇ} nn = updRel-MT _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
  --updRel-refl {name} {f} {g} {MSUP a a‚ÇÅ} nn = updRel-MSUP _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  --updRel-refl {name} {f} {g} {DMSUP a a‚ÇÅ} nn = updRel-DMSUP _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {SUM a a‚ÇÅ} nn = updRel-SUM _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {PAIR a a‚ÇÅ} nn = updRel-PAIR _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {SPREAD a a‚ÇÅ} nn = updRel-SPREAD _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {SET a a‚ÇÅ} nn = updRel-SET _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {ISECT a a‚ÇÅ} nn = updRel-ISECT _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {TUNION a a‚ÇÅ} nn = updRel-TUNION _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {UNION a a‚ÇÅ} nn = updRel-UNION _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
--  updRel-refl {name} {f} {g} {QTUNION a a‚ÇÅ} nn = updRel-QTUNION _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {INL a} nn = updRel-INL _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {INR a} nn = updRel-INR _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {DECIDE a a‚ÇÅ a‚ÇÇ} nn = updRel-DECIDE _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
  updRel-refl {name} {f} {g} {EQ a a‚ÇÅ a‚ÇÇ} nn = updRel-EQ _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-3 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} nn))
--  updRel-refl {name} {f} {g} {EQB a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nn = updRel-EQB _ _ _ _ _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí1-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí2-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí3-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn)) (updRel-refl (‚àß‚â°true‚Üí4-4 {¬¨names a} {¬¨names a‚ÇÅ} {¬¨names a‚ÇÇ} {¬¨names a‚ÇÉ} nn))
  updRel-refl {name} {f} {g} {AX} nn = updRel-AX
  updRel-refl {name} {f} {g} {FREE} nn = updRel-FREE
  updRel-refl {name} {f} {g} {MSEQ s} nn = updRel-MSEQ s
  updRel-refl {name} {f} {g} {MAPP s a} nn = updRel-MAPP _ _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {CHOOSE a a‚ÇÅ} nn = updRel-CHOOSE _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
--  updRel-refl {name} {f} {g} {TSQUASH a} nn = updRel-TSQUASH _ _ (updRel-refl nn)
--  updRel-refl {name} {f} {g} {TTRUNC a} nn = updRel-TTRUNC _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {NOWRITE} nn = updRel-NOWRITE
  updRel-refl {name} {f} {g} {NOREAD}  nn = updRel-NOREAD
  updRel-refl {name} {f} {g} {SUBSING a} nn = updRel-SUBSING _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {PURE} nn = updRel-PURE
  updRel-refl {name} {f} {g} {NOSEQ} nn = updRel-NOSEQ
  updRel-refl {name} {f} {g} {NOENC} nn = updRel-NOENC
  updRel-refl {name} {f} {g} {TERM a} nn = updRel-TERM _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {ENC a} nn = updRel-ENC _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {PARTIAL a} nn = updRel-PARTIAL _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {FFDEFS a a‚ÇÅ} nn = updRel-FFDEFS _ _ _ _ (updRel-refl (‚àß‚â°true‚Üí‚Çó (¬¨names a) (¬¨names a‚ÇÅ) nn)) (updRel-refl (‚àß‚â°true‚Üí·µ£ (¬¨names a) (¬¨names a‚ÇÅ) nn))
  updRel-refl {name} {f} {g} {UNIV x} nn = updRel-UNIV x
  updRel-refl {name} {f} {g} {LIFT a} nn = updRel-LIFT _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {LOWER a} nn = updRel-LOWER _ _ (updRel-refl nn)
  updRel-refl {name} {f} {g} {SHRINK a} nn = updRel-SHRINK _ _ (updRel-refl nn)


steps-updRel-app : (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {F f g v : Term} {k : ‚Ñï} {w1 w2 w : ùïé¬∑}
                   ‚Üí ¬¨Names F
                   ‚Üí ¬¨Names f
                   ‚Üí ¬¨Names g
                   ‚Üí # f
                   ‚Üí # g
                   ‚Üí compatible¬∑ name w1 Res‚ä§
                   ‚Üí ‚àÄùïé-get0-NUM w1 name
                   ‚Üí ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí strongMonEq w' (APPLY f (NUM k)) (APPLY g (NUM k)))
                   ‚Üí (comp : steps k (APPLY F (upd name f)  , w1) ‚â° (v , w2))
                   ‚Üí isHighest‚Ñï {k} {w1} {w2} {APPLY F (upd name f)} {v} n name comp
                   ‚Üí isValue v
                   ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (APPLY F (force g) , w) ‚â° (v' , w) √ó updRel name f g v v'))
steps-updRel-app gc {n} {name} {F} {f} {g} {v} {k} {w1} {w2} {w} nnF nnf nng cf cg compat wgt0 eqn comp ish isv =
  steps-updRel
    gc {n} {name} {f} {g} {k}
    nnf nng cf cg
    {APPLY F (upd name f)} {APPLY F (force g)} {v} {w1} {w2} {w}
    (updRel-APPLY F F (upd name f) (force g) (updRel-refl nnF) updRel-upd)
    compat wgt0 eqn comp ish isv
\end{code}
