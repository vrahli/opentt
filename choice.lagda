\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Data.List.Properties


open import calculus
-- get rid of worldInstance here and only use world
-- make it a parameter of computation
open import world


module choice {L : Level} (W : PossibleWorlds {L}) where
open import worldDef W
\end{code}


\begin{code}

-- TODO: fix the level so that restriction can have higher levels
-- TODO: allow choices to be something else than terms: add a "choice" type
record Choice : Set(lsuc(L)) where
  constructor mkChoice
  field
    -- returns the n's choice in w for the choice sequence cs
    getChoice : (n : ‚Ñï) (cs : Name) (w : ùïé¬∑) ‚Üí Maybe Term
    --getChoice : (cs : Name) (w : ùïé¬∑) ‚Üí Maybe ‚Ñï

    -- returns a Name which does not occur in w
    newChoice : (w : ùïé¬∑) ‚Üí Name
    -- 'records' cs in w
    startChoice : (c : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
    -- if we start a new choice then it is 'empty' according to getChoice
--    getChoice-startNewChoice : (n : ‚Ñï) (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí getChoice n (newChoice w) (startChoice (newChoice w) r w) ‚â° nothing
    getChoice-startNewChoice : (n : ‚Ñï) (r : Res{0‚Ñì}) (w : ùïé¬∑) (t : Term)
                               ‚Üí getChoice n (newChoice w) (startChoice (newChoice w) r w) ‚â° just t ‚Üí t ‚â° Res.def r
--                               ‚Üí getChoice n (newChoice w) (startChoice (newChoice w) r w) ‚â° nothing
    -- starting a new choice gives us a non-trivial extension
    -- TODO: do we really need ‚äè, or is ‚äë enough?
    startNewChoice‚äè : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí w ‚äë¬∑ startChoice (newChoice w) r w

    -- states that the choices for c in w are constrained by the restiction
    -- *** This is a necesary assumption for freeze‚äë below, otherwise we might not be able to extend w with t
    compatible : (c : Name) (w : ùïé¬∑) (r : Res{0‚Ñì}) ‚Üí Set(L)
    -- ‚äë¬∑ preserves compatibility
    ‚äë-compatible : {c : Name} {w1 w2 : ùïé¬∑} {r : Res{0‚Ñì}} ‚Üí w1 ‚äë¬∑ w2 ‚Üí compatible c w1 r ‚Üí compatible c w2 r
    -- starting a new choice trivially satisfies compatibility
    startChoiceCompatible : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí compatible (newChoice w) (startChoice (newChoice w) r w) r

    -- This adds a new choice, which is frozen forever (can for example be recorded with a ùîπ in worlds)
    freeze : (c : Name) (w : ùïé¬∑) (t : Term) ‚Üí ùïé¬∑
    freeze‚äë : (c : Name) (w : ùïé¬∑) (t : Term) {r : Res{0‚Ñì}} ‚Üí compatible c w r ‚Üí ‚ãÜ·µ£ r t ‚Üí w ‚äë¬∑ freeze c w t
    getFreeze : (c : Name) (w : ùïé¬∑) (t : Term) {r : Res{0‚Ñì}} ‚Üí compatible c w r ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freeze c w t) (Œª w' _ ‚Üí Lift (lsuc(L)) (getChoice n c w' ‚â° just t)))

    -- ** Those are only needed for Beth bars ***
    -- expresses what it means to make some progress w.r.t. the name c between the 2 worlds
    -- progress is used to define infinite sequences for Beth models.  It is required to prove that all choices of numbers are barred
    progress : (c : Name) (w1 w2 : ùïé¬∑) ‚Üí Set(L)
    -- freezing a choice progresses
    freezeProgress : (c : Name) {w1 w2 : ùïé¬∑} (t : Term) ‚Üí w1 ‚äë¬∑ w2 ‚Üí progress c w1 (freeze c w2 t)
    -- We can build a progressing chain from any given world
    ùïé‚Üíchain : (w : ùïé¬∑) ‚Üí chain w
    chainProgress : (w : ùïé¬∑) (c : Name) (n : ‚Ñï) {r : Res{0‚Ñì}}
                    ‚Üí compatible c (chain.seq (ùïé‚Üíchain w) n) r
                    ‚Üí Œ£ ‚Ñï (Œª m ‚Üí n < m √ó progress c (chain.seq (ùïé‚Üíchain w) n) (chain.seq (ùïé‚Üíchain w) m))

-- To capture the fact that we can make different choices over time, should we
-- (1) add a setter function (would require the 'step' function to return a ùïé)
-- (2) or capture that through an axiom?

    -- getChoice is preserved by ‚äë
    -- This is only used by ‚áõ-APPLY-CS in computation, which is not used now
    -- This is something we want because it wouldn't hold for references
    {--getChoice‚äë : (w1 w2 : ùïé¬∑) (k : ‚Ñï) (name : Name) (t : Term)
                  ‚Üí w1 ‚äë¬∑ w2
                  ‚Üí getChoice k name w1 ‚â° just t
                  ‚Üí getChoice k name w2 ‚â° just t--}
\end{code}
