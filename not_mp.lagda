\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst ; cong ; cong‚ÇÇ)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module not_mp {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
              (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
              (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
              (N : NewChoice {L} W C K G)
              (EC : Encode)
              (V : ChoiceVal W C K G X N EC)
              (F : Freeze {L} W C K P G N)
              (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
              (CB : ChoiceBar W M C K P G X N EC V F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(EC)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
  using (subv# ; ‚Üí#shiftUp)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
  using (‚â°EQ ; ‚â°APPLY)
open import terms8(W)(C)(K)(G)(X)(N)(EC)
  using (#APPLY2)

open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (#strongMonEq-mon)
--open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (eqInType-ext ; TSext-equalTypes-equalInType)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (equalInType-PI‚Üí ; ‚â°CTerm‚ÜíequalInType ; NUM-equalInType-NAT! ; equalInType-FUN‚Üí ; equalInType-SQUASH‚Üí ;
         equalInType-NEG ; equalInType-SUM‚Üí ; equalInType-refl ; equalInType-mon ; ‚Üí‚â°equalInType ; equalInType-SUM ;
         isTypeNAT! ; ‚Üí‚â°equalTypes ; eqTypesFUN‚Üê ; equalInType-NEG‚Üí ; eqTypesNEG‚Üê ; eqTypesSQUASH‚Üê ; eqTypesNAT ;
         eqTypesNOWRITE ; eqTypesQNAT ; wPredExtIrr-eqInType ; equalInType-NAT!‚Üí ; eqTypesNOREAD ; #‚áõval‚Üí#‚áì‚Üí#‚áõ ;
         #strongMonEq‚Üí#weakMonEq ; equalInType-local ; ‚â°CTerm‚ÜíeqTypes ; eqTypesEQ‚Üê ; ¬¨equalInType-FALSE)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ ; equalInType-NEG‚Üí¬¨inh ; equalInType-NEG-inh ; sub0-ASSERT‚ÇÉ-APPLY ;
         ‚ÜíequalInType-CS-NAT!‚ÜíBOOL! ; ‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ! ; isType-#NAT!‚ÜíBOOL‚ÇÄ ; ‚ÜíequalInType-SQUASH ;
         ‚ÜíequalInType-CS-NAT!‚ÜíT ; equalTerms-pres-#‚áõ-left-rev ; equalInType-EQ‚Üí‚ÇÅ ; equalTypes-#‚áõ-left-right-rev ;
         ‚ÜíequalInType-TRUE ; equalTypes-#‚áõ-left-right ; equalInType-#‚áõ-LR ; inhType-mon)
open import props6(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (equalInType-SUM!‚Üí ; SUMeq! ; equalInType-SUM! ; _#‚áõ‚Çö_at_ ; equalInType-#‚áõ‚Çö-left-right-rev ;
         ‚ÜíequalInType-EQ)
--open import props5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (equalTerms-pres-#‚áõ-left-BOOL! ; equalTerms-pres-#‚áõ-left-rev-BOOL!)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import mp_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)
open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(E)(CB)

open import type_sys_props_isect(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
  using (eqInType-‚áõ-ISECT-rev)


alwaysFreezable : Freeze W C K P G N ‚Üí Set(L)
alwaysFreezable f = (c : Name) (w : ùïé¬∑) ‚Üí Freeze.freezable f c w


-- Assuming that our choices are Bools
-- and that choices are always freezable (see where it is used below)
-- Bool‚ÑÇ CB is for BOOL, which then would be only for FCSs, not references, which change over time
¬¨MP : Bool‚ÇÄ‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP) #lamAX
¬¨MP bcb afb w n = equalInType-NEG (isTypeMP w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = h8 h7
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f g
                             ‚Üí equalInType n w' (sub0 f (#[0]FUN #[0]MP-left #[0]MP-right)) (#APPLY F f) (#APPLY G g))
        aw2 = snd (snd (equalInType-PI‚Üí {n} {w1} {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left #[0]MP-right} ea))

        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f g : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f g
                             ‚Üí equalInType n w' (#FUN (#MP-left f) (#MP-right f)) (#APPLY F f) (#APPLY G g))
        aw3 w' e f g ex = ‚â°CTerm‚ÜíequalInType (sub0-fun-mp f) (aw2 w' e f g ex)

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
        oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ Res‚ÑÇ w1

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #BOOL‚ÇÄ (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #NAT!‚ÜíBOOL‚ÇÄ f
        eqf1 = ‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ eqf2

        h1 : equalInType n w2 (#FUN (#MP-left f) (#MP-right f)) (#APPLY F f) (#APPLY G f)
        h1 = aw3 w2 e2 f f eqf1

        h2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#MP-left f) a‚ÇÅ a‚ÇÇ
                            ‚Üí equalInType n w' (#MP-right f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
        h2 = equalInType-FUN‚Üí h1

        h4 : ‚àÄùïé w2 (Œª w3 e3 ‚Üí ¬¨ inhType n w3 (#PI-NEG-ASSERT‚ÇÇ f))
        -- freezable might not be true here, but this is something that FCS will satisfy because freezable is always true...
        h4 w3 e3 inh = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice n w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (afb name w3) z
          where
            z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType n w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
            z = equalInType-NEG‚Üí¬¨inh (snd (#PI-NEG-ASSERT‚ÇÇ‚Üí#Œ£choice bcb (‚äë-compatible¬∑ e3 comp1) (0 , sat-‚ÑÇ‚ÇÅ 0) inh))

        h3 : inhType n w2 (#MP-left f)
        h3 = equalInType-NEG-inh {n} {w2} (‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ eqf1) h4

        h5 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí inhType n w' (#SUM-ASSERT‚ÇÇ f))
        h5 = equalInType-SQUASH‚Üí (h2 w2 (‚äë-refl¬∑ _) (fst h3) (fst h3) (snd h3))

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (followChoice¬∑ name h5 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (followChoice¬∑ name h5 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
        oc2 = fst (snd (snd (followChoice¬∑ name h5 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 Res‚ÑÇ
        comp2 = fst (snd (snd (snd (followChoice¬∑ name h5 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h5 oc1 comp1 fb1)))))

        h6 : inhType n w3 (#SUM-ASSERT‚ÇÇ f)
        h6 = snd (snd (snd (snd (snd (followChoice¬∑ name h5 oc1 comp1 fb1)))))

        h7 : inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h7 = #SUM-ASSERT‚ÇÇ‚Üí#Œ£choice bcb comp2 (0 , sat-‚ÑÇ‚ÇÅ 0) h6

        h8 : ¬¨ inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h8 = ¬¨equalInType-#Œ£choice n w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ oc2 comp2 fb2


¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚ÇÉ : Bool!‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑) (name : Name)
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY (#CS name) n‚ÇÅ)))))
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚ÇÉ bcb n w name aw w1 e1 (t , inh) =
  lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
  where
    h0 : ‚ààType n w1 (#SUM #NAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t
    h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) inh

    h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' t t)
    h1 = equalInType-SUM‚Üí h0

    aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT!)
                                   (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                   w' t t
                          ‚Üí Lift (lsuc L) ‚ä•)
    aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (aw w2 (‚äë-trans¬∑ e1 e2) (a‚ÇÅ , a‚ÇÇ , ea , b‚ÇÅ , equalInType-refl eqi2))
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#ASSERT‚ÇÉ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi2 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÉ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1


Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÉ : (n : ‚Ñï) (w : ùïé¬∑) (f : CTerm)
                                        ‚Üí ‚ààType n w #NAT!‚ÜíBOOL! f
                                        ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w #NAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType n w (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))
                                        ‚Üí inhType n w (#SUM-ASSERT‚ÇÉ f)
Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÉ n w f f‚àà (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) =
  #PAIR n‚ÇÅ t ,
  equalInType-SUM
    (Œª w' _ ‚Üí isTypeNAT!)
    (isType-MP-right-qt-body n w f f f‚àà)
    (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                                (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
    aw w1 e1 =
      n‚ÇÅ , n‚ÇÅ , t , t , equalInType-refl (equalInType-mon n‚àà w1 e1) ,
      ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w1 , --#‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
      ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w1 , --#‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
      ‚Üí‚â°equalInType (sym (sub0-ASSERT‚ÇÉ-APPLY n‚ÇÅ f)) (equalInType-mon inh w1 e1)


-- QTBool!‚ÑÇ CB is for QTBOOL! which works for FCSs and refs
¬¨MP‚ÇÑ : Bool!‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚ÇÑ) #lamAX
¬¨MP‚ÇÑ bcb afb w n = equalInType-NEG (isTypeMP‚ÇÑ w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP‚ÇÑ a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = h8 h7
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType n w' #NAT!‚ÜíBOOL! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))))
        aw2 = ‚àà#MP‚ÇÑ‚Üí n w1 F G ea

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
        oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ Res‚ÑÇ w1

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #BOOL! (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #NAT!‚ÜíBOOL! f
        eqf1 = ‚ÜíequalInType-CS-NAT!‚ÜíBOOL! eqf2

        h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                                   √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
                                               ‚Üí ‚ä•)
                             ‚Üí ‚ä•)
        h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice n w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (afb name w3) z
          where
            z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType n w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
            z = ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚ÇÉ bcb n w3 name aw

        h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ)))))
        h4 = aw2 w2 e2 f eqf1 h3

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (followChoice¬∑ name h4 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (followChoice¬∑ name h4 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
        oc2 = fst (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 Res‚ÑÇ
        comp2 = fst (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

        h6 : Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w3 #NAT! n‚ÇÅ n‚ÇÇ
              √ó inhType n w3 (#ASSERT‚ÇÉ (#APPLY f n‚ÇÅ))))
        h6 = snd (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

        h7 : inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h7 = #SUM-ASSERT‚ÇÉ‚Üí#Œ£choice bcb comp2 (0 , sat-‚ÑÇ‚ÇÅ 0) (Œ£inhType-ASSERT‚ÇÉ‚ÜíinhType-SUM-ASSERT‚ÇÉ n w3 f (equalInType-mon eqf1 w3 e3) h6)

        h8 : ¬¨ inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h8 = ¬¨equalInType-#Œ£choice n w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ oc2 comp2 fb2


¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚ÇÑ : Bool‚ÇÄ!‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑) (name : Name)
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY (#CS name) n‚ÇÅ)))))
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚ÇÑ bcb n w name aw w1 e1 (t , inh) =
  lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
  where
    h0 : ‚ààType n w1 (#SUM #NAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t
    h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) inh

    h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' t t)
    h1 = equalInType-SUM‚Üí h0

    aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT!)
                                   (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                   w' t t
                          ‚Üí Lift (lsuc L) ‚ä•)
    aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (aw w2 (‚äë-trans¬∑ e1 e2) (a‚ÇÅ , a‚ÇÇ , ea , b‚ÇÅ , equalInType-refl eqi2))
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#ASSERT‚ÇÑ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi2 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÑ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1


Œ£inhType-ASSERT‚ÇÑ‚ÜíinhType-SUM-ASSERT‚ÇÖ : (n : ‚Ñï) (w : ùïé¬∑) (f : CTerm)
                                        ‚Üí ‚ààType n w #NAT!‚ÜíBOOL‚ÇÄ! f
                                        ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w #NAT! n‚ÇÅ n‚ÇÇ
                                            √ó inhType n w (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))
                                        ‚Üí inhType n w (#SUM-ASSERT‚ÇÖ f)
Œ£inhType-ASSERT‚ÇÑ‚ÜíinhType-SUM-ASSERT‚ÇÖ n w f f‚àà (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) =
  #PAIR n‚ÇÅ t ,
  equalInType-SUM
    (Œª w' _ ‚Üí isTypeNAT!)
    (isType-MP-right-qt‚ÇÉ-body n w f f f‚àà)
    (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                                (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
    aw w1 e1 =
      n‚ÇÅ , n‚ÇÅ , t , t , equalInType-refl (equalInType-mon n‚àà w1 e1) ,
      ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w1 , --#‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
      ‚áì-refl ‚åú #PAIR n‚ÇÅ t ‚åù w1 , --#‚áõ-refl w1 (#PAIR n‚ÇÅ t) ,
      ‚Üí‚â°equalInType (sym (sub0-ASSERT‚ÇÑ-APPLY n‚ÇÅ f)) (equalInType-mon inh w1 e1)


-- Bool‚ÇÄ!‚ÑÇ CB is for BOOL‚ÇÄ! which works only for FCSs
-- There is an instantiation in modInstanceBethCsBool2.lagda
-- alwaysFreezable is also for FCSs
-- This version uses truncated Œ£s, and noread/nowrite ‚Ñï and ùîπ
¬¨MP‚ÇÜ : Bool‚ÇÄ!‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚ÇÜ) #lamAX
¬¨MP‚ÇÜ bcb afb w n = equalInType-NEG (isTypeMP‚ÇÜ w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP‚ÇÜ a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = h8 h7
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType n w' #NAT!‚ÜíBOOL‚ÇÄ! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))))
        aw2 = ‚àà#MP‚ÇÜ‚Üí n w1 F G ea

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
        oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ Res‚ÑÇ w1

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #BOOL‚ÇÄ! (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (proj‚ÇÅ bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #NAT!‚ÜíBOOL‚ÇÄ! f
        eqf1 = ‚ÜíequalInType-CS-NAT!‚ÜíBOOL‚ÇÄ! eqf2

        h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                                   √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
                                               ‚Üí ‚ä•)
                             ‚Üí ‚ä•)
        h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice n w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (afb name w3) z
          where
            z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType n w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
            z = ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚ÇÑ bcb n w3 name aw

        h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ)))))
        h4 = aw2 w2 e2 f eqf1 h3

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (followChoice¬∑ name h4 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (followChoice¬∑ name h4 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
        oc2 = fst (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 Res‚ÑÇ
        comp2 = fst (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

        h6 : Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w3 #NAT! n‚ÇÅ n‚ÇÇ
              √ó inhType n w3 (#ASSERT‚ÇÑ (#APPLY f n‚ÇÅ))))
        h6 = snd (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

        h7 : inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h7 = #SUM-ASSERT‚ÇÖ‚Üí#Œ£choice bcb comp2 (0 , sat-‚ÑÇ‚ÇÅ 0) (Œ£inhType-ASSERT‚ÇÑ‚ÜíinhType-SUM-ASSERT‚ÇÖ n w3 f (equalInType-mon eqf1 w3 e3) h6)

        h8 : ¬¨ inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h8 = ¬¨equalInType-#Œ£choice n w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ oc2 comp2 fb2


equalInType-#MP-right‚Çò‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                        ‚Üí equalInType i w (#MP-right‚Çò f) a‚ÇÅ a‚ÇÇ
                        ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                         √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
equalInType-#MP-right‚Çò‚Üí i w f a‚ÇÅ a‚ÇÇ h =
  Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SUM!‚Üí h)
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq! (equalInType i w' #NAT!)
                              (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                              w' a‚ÇÅ a‚ÇÇ
                     ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
  aw w1 e1 (a1 , a2 , b1 , b2 , a‚àà , c‚ÇÅ , c‚ÇÇ , b‚àà) =
    a1 , a2 , a‚àà , b1 ,
    ‚Üí‚â°equalInType (sub0-ASSERT‚Çò-APPLY a1 f) (equalInType-refl b‚àà)


isType-MP-right‚Çò-body : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm)
                      ‚Üí equalInType i w #NAT!‚ÜíNAT! f‚ÇÅ f‚ÇÇ
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType i w' #NAT! a b)
                                     ‚Üí equalTypes i w' (sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))
                                                       (sub0 b (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f‚ÇÇ ‚åü #[0]VAR))))
isType-MP-right‚Çò-body i w f‚ÇÅ f‚ÇÇ f‚àà w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
  ‚Üí‚â°equalTypes
    (sym (sub0-ASSERT‚Çò-APPLY a‚ÇÅ f‚ÇÅ))
    (sym (sub0-ASSERT‚Çò-APPLY a‚ÇÇ f‚ÇÇ))
    (equalInType-NAT!‚ÜíequalTypes-ASSERT‚Çò (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíNAT!‚â° f‚àà) w1 e1 a‚ÇÅ a‚ÇÇ a‚àà))


‚ÜíequalInType-#MP-left‚Çò : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíNAT! f
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
                                                         ‚Üí ‚ä•)
                                         ‚Üí ‚ä•)
                          ‚Üí equalInType i w (#MP-left‚Çò f) a‚ÇÅ a‚ÇÇ
‚ÜíequalInType-#MP-left‚Çò  i w f a‚ÇÅ a‚ÇÇ f‚àà h =
  equalInType-NEG (eqTypesNEG‚Üê (‚ÜíequalTypes-#MP-right‚Çò f‚àà)) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' (#NEG (#MP-right‚Çò f)) g‚ÇÅ g‚ÇÇ)
    aw1 w1 e1 g‚ÇÅ g‚ÇÇ g‚àà = h w1 e1 aw2
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                               √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ))))) ‚Üí ‚ä•)
        aw2 w2 e2 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) =
          equalInType-NEG‚Üí g‚àà w2 e2 (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t) s‚àà
          where
            s‚àà : equalInType i w2 (#MP-right‚Çò f) (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t)
            s‚àà = equalInType-SUM!
                   (Œª w' _ ‚Üí isTypeNAT!)
                   (isType-MP-right‚Çò-body i w2 f f (equalInType-mon f‚àà w2 (‚äë-trans¬∑ e1 e2)))
                   (Mod.‚àÄùïé-‚ñ° M aw3)
              where
              aw3 : ‚àÄùïé w2 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!)
                                           (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚Çò (#[0]APPLY ‚åû f ‚åü #[0]VAR))))
                                           w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
              aw3 w3 e3 =
                n‚ÇÅ , n‚ÇÅ , t , t ,
                equalInType-refl (equalInType-mon n‚àà w3 e3) ,
                #‚áõ!-refl {w3} {#PAIR n‚ÇÅ t} ,
                #‚áõ!-refl {w3} {#PAIR n‚ÇÅ t} ,
                ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚Çò-APPLY n‚ÇÅ f)) (equalInType-mon inh w3 e3)


‚àà#MP‚Çò‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
       ‚Üí equalInType i w #MP‚Çò F G
       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType i w' #NAT!‚ÜíNAT! f
                      ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                         √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
                                                      ‚Üí ‚ä•)
                                      ‚Üí ‚ä•)
                      ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                        √ó inhType i w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ))))))
‚àà#MP‚Çò‚Üí i w F G F‚àà w1 e1 f f‚àà cond =
  equalInType-#MP-right‚Çò‚Üí i w1 f (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX) h3
  where
    h1 : equalInType i w1 (sub0 f (#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò)) (#APPLY F f) (#APPLY G f)
    h1 = snd (snd (equalInType-PI‚Üí {i} {w} {#NAT!‚ÜíNAT!} {#[0]FUN #[0]MP-left‚Çò #[0]MP-right‚Çò} F‚àà)) w1 e1 f f f‚àà

    h2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#MP-left‚Çò f) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType i w' (#MP-right‚Çò f) (#APPLY (#APPLY F f) a‚ÇÅ) (#APPLY (#APPLY G f) a‚ÇÇ))
    h2 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (sub0-fun-mp‚Çò f) h1)

    h3 : equalInType i w1 (#MP-right‚Çò f) (#APPLY (#APPLY F f) #AX) (#APPLY (#APPLY G f) #AX)
    h3 = h2 w1 (‚äë-refl¬∑ w1) #AX #AX (‚ÜíequalInType-#MP-left‚Çò i w1 f #AX #AX f‚àà cond)


#strongMonEq‚ÜíNOREADeq : {w : ùïé¬∑} {a b : CTerm}
                      ‚Üí #strongMonEq w a b
                      ‚Üí NOREADeq w a b
#strongMonEq‚ÜíNOREADeq {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) =
  ca , cb
  where
    ca : #‚áì‚Üí#‚áõ w a
    ca = #‚áõval‚Üí#‚áì‚Üí#‚áõ {w} {a} {#NUM n} tt c‚ÇÅ

    cb : #‚áì‚Üí#‚áõ w b
    cb = #‚áõval‚Üí#‚áì‚Üí#‚áõ {w} {b} {#NUM n} tt c‚ÇÇ


eqInType-‚áõ-NAT-rev : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                     ‚Üí (eqt : equalTypes u w #NAT #NAT)
                     ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #strongMonEq w' a b)
                     ‚Üí equalTerms u w eqt a b
eqInType-‚áõ-NAT-rev u w a b eqt h =
  eqInType-‚áõ-ISECT-rev
    (uni u) w #NAT #NAT #QNAT #QNAT #NOREAD #NOREAD a b
    (Œª w1 e1 ‚Üí eqTypesQNAT)
    (Œª w1 e1 ‚Üí eqTypesNOREAD)
    (wPredExtIrr-eqInType {u} {w} {#QNAT} {#QNAT} (Œª w' _ ‚Üí eqTypesQNAT))
    (wPredExtIrr-eqInType {u} {w} {#NOREAD} {#NOREAD} (Œª w' _ ‚Üí eqTypesNOREAD))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#QNAT} {#QNAT} eqTypesQNAT)
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#NOREAD} {#NOREAD} eqTypesNOREAD)
    (#‚áõ-refl w #NAT) (#‚áõ-refl w #NAT)
    eqt (Mod.‚àÄùïé-‚ñ°Func M aw1 h)
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí #strongMonEq w' a b
                        ‚Üí ISECTeq (eqInType (uni u) w' eqTypesQNAT) (eqInType (uni u) w' eqTypesNOREAD) a b)
    aw1 w1 e1 z1 = Mod.‚àÄùïé-‚ñ° M aw2 , Mod.‚àÄùïé-‚ñ° M Œª w2 e2 ‚Üí #strongMonEq‚ÜíNOREADeq {w2} {a} {b} (#strongMonEq-mon {a} {b} z1 w2 e2)
      where
      aw2 : ‚àÄùïé w1 (Œª w' e ‚Üí QNATeq w' a b)
      aw2 w2 e2 = #strongMonEq‚Üí#weakMonEq {w2} {a} {b} (#strongMonEq-mon {a} {b} z1 w2 e2)


#‚áõ!same‚Ñï‚Üí#strongMonEq : {w : ùïé¬∑} {a b : CTerm}
                      ‚Üí #‚áõ!same‚Ñï w a b
                      ‚Üí #strongMonEq w a b
#‚áõ!same‚Ñï‚Üí#strongMonEq {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) =
  n , #‚áõ!‚Üí#‚áõ {w} {a} {#NUM n} c‚ÇÅ , #‚áõ!‚Üí#‚áõ {w} {b} {#NUM n} c‚ÇÇ


#‚áõ!same‚Ñï‚ÜíNOWRITEeq : {w : ùïé¬∑} {a b : CTerm}
                   ‚Üí #‚áõ!same‚Ñï w a b
                   ‚Üí NOWRITEeq w a b
#‚áõ!same‚Ñï‚ÜíNOWRITEeq {w} {a} {b} (n , c‚ÇÅ , c‚ÇÇ) =
  ca , cb
  where
    ca : #‚áì‚Üí#‚áì! w a
    ca = #‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {#NUM n} {a} c‚ÇÅ tt

    cb : #‚áì‚Üí#‚áì! w b
    cb = #‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {#NUM n} {b} c‚ÇÇ tt


#‚áõ!same‚Ñï-mon : {w1 w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) {a b : CTerm}
                 ‚Üí #‚áõ!same‚Ñï w1 a b
                 ‚Üí #‚áõ!same‚Ñï w2 a b
#‚áõ!same‚Ñï-mon {w1} {w2} e {a} {b} (n , c‚ÇÅ , c‚ÇÇ) = n , ‚àÄùïé-mon e c‚ÇÅ , ‚àÄùïé-mon e c‚ÇÇ


eqInType-‚áõ-NAT!-rev : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí (eqt : equalTypes u w #NAT! #NAT!)
                    ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!same‚Ñï w' a b)
                    ‚Üí equalTerms u w eqt a b
eqInType-‚áõ-NAT!-rev u w a b eqt eqi =
  eqInType-‚áõ-ISECT-rev
    (uni u) w #NAT! #NAT! #NAT #NAT #NOWRITE #NOWRITE a b
    (Œª w1 e1 ‚Üí eqTypesNAT)
    (Œª w1 e1 ‚Üí eqTypesNOWRITE)
    (wPredExtIrr-eqInType {u} {w} {#NAT} {#NAT} (Œª w' _ ‚Üí eqTypesNAT))
    (wPredExtIrr-eqInType {u} {w} {#NOWRITE} {#NOWRITE} (Œª w' _ ‚Üí eqTypesNOWRITE))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#NAT} {#NAT} eqTypesNAT)
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#NOWRITE} {#NOWRITE} eqTypesNOWRITE)
    (#‚áõ-refl w #NAT!) (#‚áõ-refl w #NAT!)
    eqt (Mod.‚àÄùïé-‚ñ°Func M aw1 eqi)
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' a b
                        ‚Üí ISECTeq (eqInType (uni u) w' eqTypesNAT) (eqInType (uni u) w' eqTypesNOWRITE) a b)
    aw1 w1 e1 z1 =
      eqInType-‚áõ-NAT-rev u w1 a b eqTypesNAT (Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 z ‚Üí #‚áõ!same‚Ñï‚Üí#strongMonEq {w2} {a} {b} z) (Mod.‚Üë‚ñ° M eqi e1)) ,
      Mod.‚àÄùïé-‚ñ° M Œª w2 e2 ‚Üí #‚áõ!same‚Ñï‚ÜíNOWRITEeq {w2} {a} {b} (#‚áõ!same‚Ñï-mon e2 {a} {b} z1)


#‚áõ!‚Üí#‚áõ!same‚Ñï-rev : {w : ùïé¬∑} {a b c d : CTerm}
                 ‚Üí b #‚áõ! a at w
                 ‚Üí d #‚áõ! c at w
                 ‚Üí #‚áõ!same‚Ñï w a c
                 ‚Üí #‚áõ!same‚Ñï w b d
#‚áõ!‚Üí#‚áõ!same‚Ñï-rev {w} {a} {b} {c} {d} c1 c2 (n , c‚ÇÅ , c‚ÇÇ) =
  n , #‚áõ!-trans {w} {b} {a} {#NUM n} c1 c‚ÇÅ , #‚áõ!-trans {w} {d} {c} {#NUM n} c2 c‚ÇÇ


equalTerms-pres-#‚áõ-left-rev-NAT! : equalTerms-pres-#‚áõ-left-rev #NAT!
equalTerms-pres-#‚áõ-left-rev-NAT! {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-NAT!-rev i w a c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w1 e1 h ‚Üí #‚áõ!‚Üí#‚áõ!same‚Ñï-rev {w1} {b} {a} {c} {c} (‚àÄùïé-mon e1 comp) (#‚áõ!-refl {w1} {c}) h)
      (equalInType-NAT!‚Üí i w b c (eqt , eqi)))


‚ÜíequalInType-CS-NAT!‚ÜíNAT! : {n : ‚Ñï} {w : ùïé¬∑} {a b : Name}
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí equalInType n w' #NAT! (#APPLY (#CS a) (#NUM m)) (#APPLY (#CS b) (#NUM m)))
                          ‚Üí equalInType n w #NAT!‚ÜíNAT! (#CS a) (#CS b)
‚ÜíequalInType-CS-NAT!‚ÜíNAT! {n} {w} {a} {b} i rewrite #NAT!‚ÜíNAT!‚â° =
  ‚ÜíequalInType-CS-NAT!‚ÜíT isTypeNAT! equalTerms-pres-#‚áõ-left-rev-NAT! i


equalInType-#‚áõ!-type-rev : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                         ‚Üí T #‚áõ! U at w
                         ‚Üí equalInType i w U a b
                         ‚Üí equalInType i w T a b
equalInType-#‚áõ!-type-rev {i} {w} {T} {U} {a} {b} comp a‚àà =
  TSext-equalTypes-equalInType i w U T a b
    (equalTypes-#‚áõ-left-right-rev {i} {w} {U} {U} {T} {U} (#‚áõ-refl w U) (#‚áõ!‚Üí#‚áõ {w} {T} {U} comp) (fst a‚àà))
    a‚àà


equalInType-#‚áõ!-type : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                     ‚Üí T #‚áõ! U at w
                     ‚Üí equalInType i w T a b
                     ‚Üí equalInType i w U a b
equalInType-#‚áõ!-type {i} {w} {T} {U} {a} {b} comp a‚àà =
  TSext-equalTypes-equalInType i w T U a b
    (equalTypes-#‚áõ-left-right {i} {w} {T} {T} {U} {T} (#‚áõ!-refl {w} {T}) comp (fst a‚àà))
    a‚àà


EQ-N0‚ÜíNATREC-TRUE : (n : ‚Ñï) (w : ùïé¬∑) (t u a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                  ‚Üí equalInType n w (#EQ t #N0 #NAT!) a‚ÇÅ a‚ÇÇ
                  ‚Üí equalInType n w (#NATREC t #TRUE u) b‚ÇÅ b‚ÇÇ
EQ-N0‚ÜíNATREC-TRUE n w t u a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ h =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-NAT!‚Üí n w t #N0 (equalInType-EQ‚Üí‚ÇÅ h)))
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' t #N0
                     ‚Üí equalInType n w' (#NATREC t #TRUE u) b‚ÇÅ b‚ÇÇ)
  aw w1 e1 (k , c‚ÇÅ , c‚ÇÇ)  rewrite sym (#NUMinj (#‚áõ!‚Üí‚â° {#N0} {#NUM k} {w1} c‚ÇÇ tt)) =
    equalInType-#‚áõ!-type-rev {n} {w1} {#NATREC t #TRUE u} {#TRUE}
      (#NUM‚ÜíNATREC‚áõ! {t} {0} #TRUE u {w1} c‚ÇÅ) (‚ÜíequalInType-TRUE n)


¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò-eq : Nat!‚ÑÇ CB ‚Üí (a : CTerm) (name : Name)
                            ‚Üí sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (CTerm‚ÜíCTerm0 C‚ÑÇ‚ÇÅ) (CTerm‚ÜíCTerm0 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))
                            ‚â° #EQ (#APPLY (#CS name) a) #N0 #NAT!
¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò-eq bcb a name
  rewrite snd (snd bcb) | fst bcb
  = CTerm‚â° (‚â°EQ (‚â°APPLY refl (trans (#shiftDown 0 (ct (shiftUp 0 ‚åú a ‚åù) (‚Üí#shiftUp 0 {‚åú a ‚åù} (CTerm.closed a))))
                                    (#shiftUp 0 a))) refl refl)


¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò : Nat!‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑) (name : Name)
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                                            √ó inhType n w' (#ASSERT‚Çò (#APPLY (#CS name) n‚ÇÅ)))))
                         ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò bcb n w name aw w1 e1 (t , inh) =
  lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
  where
    h0 : ‚ààType n w1 (#SUM #NAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t
    h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) inh

    h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' t t)
    h1 = equalInType-SUM‚Üí h0

    aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT!)
                                 (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                 w' t t
                          ‚Üí Lift (lsuc L) ‚ä•)
    aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) =
      lift (aw w2 (‚äë-trans¬∑ e1 e2) (a‚ÇÅ , a‚ÇÇ , ea , b‚ÇÅ , equalInType-refl eqi2))
      where
      eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
      eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

      eqi2 : equalInType n w2 (#ASSERT‚Çò (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
      eqi2 = ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚Çò‚â° (#APPLY (#CS name) a‚ÇÅ)))
               (EQ-N0‚ÜíNATREC-TRUE n w2 (#APPLY (#CS name) a‚ÇÅ) (#LAMBDA (#[0]LAMBDA #[1]FALSE)) b‚ÇÅ b‚ÇÇ b‚ÇÅ b‚ÇÇ
                 (‚â°CTerm‚ÜíequalInType (¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò-eq bcb a‚ÇÅ name) eb))


#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ! : (w : ùïé¬∑) (a b : CTerm)
                              ‚Üí #APPLY2 (#LAMBDA (#[0]LAMBDA #[1]FALSE)) a b #‚áõ! #FALSE at w
#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ! w a b w1 e1 = lift (2 , refl)


inhType-ASSERT‚Çò‚Üí‚ààNAT! : (i : ‚Ñï) (w : ùïé¬∑) (t : CTerm)
                      ‚Üí ‚ààType i w #NAT! t
                      ‚Üí inhType i w (#ASSERT‚Çò t)
                      ‚Üí equalInType i w #NAT! t #N0
inhType-ASSERT‚Çò‚Üí‚ààNAT! i w t t‚àà (q , q‚àà) =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT!‚Üí i w t t t‚àà))
  where
  aw1 : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' t t ‚Üí equalInType i w' #NAT! t #N0)
  aw1 w1 e1 (n , c‚ÇÅ , c‚ÇÇ) =
    equalInType-#‚áõ‚Çö-left-right-rev {i} {w1} {#NAT!} {t} {#NUM n} {#N0} {#N0}
      c‚ÇÅ (#‚áõ!-refl {w1} {#N0}) (concl n q‚àà2)
    where
    q‚àà1 : ‚ààType i w1 (#NATREC t #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))) q
    q‚àà1 = ‚â°CTerm‚ÜíequalInType (#ASSERT‚Çò‚â° t) (equalInType-mon q‚àà w1 e1)

    q‚àà2 : ‚ààType i w1 (#NATRECr n #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))) q
    q‚àà2 = equalInType-#‚áõ!-type {i} {w1}
            {#NATREC t #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))}
            {#NATRECr n #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))}
            {q} {q}
            (#NUM‚ÜíNATREC‚áõ! {t} {n} #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE)) c‚ÇÅ)
            q‚àà1

    concl : (n : ‚Ñï)
          ‚Üí ‚ààType i w1 (#NATRECr n #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))) q
          ‚Üí equalInType i w1 #NAT! (#NUM n) #N0
    concl 0 h = NUM-equalInType-NAT! i w1 0
    concl (suc n) h =
      ‚ä•-elim (¬¨equalInType-FALSE {w1} {i} {q} {q}
               (equalInType-#‚áõ!-type {i} {w1}
                  {#NATRECr (suc n) #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))} {#FALSE}
                  {q} {q}
                  (#APPLY2-LAMBDA-LAMBDA-FALSE‚áõ! w1 (#NUM n) (#NATREC (#NUM n) #TRUE (#LAMBDA (#[0]LAMBDA #[1]FALSE))))
                  h))


#SUM-ASSERT‚Çò‚Üí#Œ£choice : Nat!‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                       ‚Üí compatible¬∑ name w Res‚ÑÇ
                       ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                       ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w #NAT! n‚ÇÅ n‚ÇÇ
                         √ó inhType n w (#ASSERT‚Çò (#APPLY (#CS name) n‚ÇÅ))))
                       ‚Üí inhType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
#SUM-ASSERT‚Çò‚Üí#Œ£choice bcb {n} {w} {name} comp sat (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) =
  #PAIR n‚ÇÅ #AX ,
  ‚â°CTerm‚ÜíequalInType (sym (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑))
    (equalInType-SUM {n} {w} {#NAT!} {#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) (CTerm‚ÜíCTerm0 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)}
       (Œª w1 e1 ‚Üí isTypeNAT!)
       aw1
       (Mod.‚àÄùïé-‚ñ° M aw2))
  where
  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ
                     ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) (CTerm‚ÜíCTerm0 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)))
                                       (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) (CTerm‚ÜíCTerm0 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))))
  aw1 w1 e1 a‚ÇÅ a‚ÇÇ a‚àà =
    ‚â°CTerm‚ÜíeqTypes
      (sym (¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò-eq bcb a‚ÇÅ name))
      (sym (¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò-eq bcb a‚ÇÇ name))
      (eqTypesEQ‚Üê {w1} {n} {#APPLY (#CS name) a‚ÇÅ} {#N0} {#APPLY (#CS name) a‚ÇÇ} {#N0} {#NAT!} {#NAT!}
        isTypeNAT!
        (‚â°CTerm‚ÜíequalInType (proj‚ÇÅ bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e1 comp) a‚àà))
        (NUM-equalInType-NAT! n w1 0))

  aw2 : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                             (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) (CTerm‚ÜíCTerm0 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))))
                             w' (#PAIR n‚ÇÅ #AX) (#PAIR n‚ÇÅ #AX))
  aw2 w1 e1 =
    n‚ÇÅ , n‚ÇÅ , #AX , #AX , equalInType-refl (equalInType-mon n‚àà w1 e1) ,
    ‚áì-refl ‚åú #PAIR n‚ÇÅ #AX ‚åù w1 , ‚áì-refl ‚åú #PAIR n‚ÇÅ #AX ‚åù w1  ,
    ‚â°CTerm‚ÜíequalInType (sym (¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò-eq bcb n‚ÇÅ name))
      (‚ÜíequalInType-EQ {n} {w1} {#APPLY (#CS name) n‚ÇÅ} {#N0} {#NAT!} {#AX} {#AX}
        (inhType-ASSERT‚Çò‚Üí‚ààNAT! n w1 (#APPLY (#CS name) n‚ÇÅ) h1 (inhType-mon e1 inh)))
    where
    h1 : ‚ààType n w1 #NAT! (#APPLY (#CS name) n‚ÇÅ)
    h1 = ‚â°CTerm‚ÜíequalInType (proj‚ÇÅ bcb)
           (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e1 comp) (equalInType-refl (equalInType-mon n‚àà w1 e1)))


-- Nat!‚ÑÇ CB is for NAT! which works only for FCSs
-- alwaysFreezable is also for FCSs
-- This version uses non-truncated Œ£s, and noread/nowrite ‚Ñï and ùîπ
¬¨MP‚Çò : Nat!‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚Çò) #lamAX
¬¨MP‚Çò bcb afb w n = equalInType-NEG (isTypeMP‚Çò w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP‚Çò a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = h8 h7
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType n w' #NAT!‚ÜíNAT! f
                           ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                                                  √ó inhType n w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
                                                              ‚Üí ‚ä•)
                                            ‚Üí ‚ä•)
                           ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ))))))
        aw2 = ‚àà#MP‚Çò‚Üí n w1 F G ea

        name : Name
        name = newChoice¬∑ w1

        w2 : ùïé¬∑
        w2 = startNewChoice Res‚ÑÇ w1

        e2 : w1 ‚äë¬∑ w2
        e2 = startNewChoice‚äè Res‚ÑÇ w1

        oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
        oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

        comp1 : compatible¬∑ name w2 Res‚ÑÇ
        comp1 = startNewChoiceCompatible Res‚ÑÇ w1

        fb1 : freezable¬∑ name w2
        fb1 = freezableStart¬∑ Res‚ÑÇ w1

        f : CTerm
        f = #CS name

        eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType n w' #NAT! (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
        eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (proj‚ÇÅ bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! n w' m))

        eqf1 : ‚ààType n w2 #NAT!‚ÜíNAT! f
        eqf1 = ‚ÜíequalInType-CS-NAT!‚ÜíNAT! eqf2

        h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                              √ó inhType n w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
                                           ‚Üí ‚ä•)
                           ‚Üí ‚ä•)
        h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice n w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (afb name w3) z
          where
            z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType n w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
            z = ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Çò bcb n w3 name aw

        h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ
                                             √ó inhType n w' (#ASSERT‚Çò (#APPLY f n‚ÇÅ)))))
        h4 = aw2 w2 e2 f eqf1 h3

        -- We follow the choice
        w3 : ùïé¬∑
        w3 = fst (followChoice¬∑ name h4 oc1 comp1 fb1)

        e3 : w2 ‚äë¬∑ w3
        e3 = fst (snd (followChoice¬∑ name h4 oc1 comp1 fb1))

        oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
        oc2 = fst (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))

        comp2 : compatible¬∑ name w3 Res‚ÑÇ
        comp2 = fst (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1))))

        fb2 : freezable¬∑ name w3
        fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

        h6 : Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w3 #NAT! n‚ÇÅ n‚ÇÇ
              √ó inhType n w3 (#ASSERT‚Çò (#APPLY f n‚ÇÅ))))
        h6 = snd (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

        h7 : inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h7 = #SUM-ASSERT‚Çò‚Üí#Œ£choice bcb comp2 (0 , sat-‚ÑÇ‚ÇÅ 0) h6

        h8 : ¬¨ inhType n w3 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
        h8 = ¬¨equalInType-#Œ£choice n w3 Res‚ÑÇ name isValue‚ÑÇ‚ÇÄ¬∑ isValue‚ÑÇ‚ÇÅ¬∑ ¬¨‚àº‚ÑÇ‚ÇÄ‚ÇÅ¬∑ oc2 comp2 fb2


-- A variant of Œ£choice that uses NAT instead of NAT!
Œ£choice‚Çô : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí Term
Œ£choice‚Çô n k = SUM NAT (EQ (APPLY (CS n) (VAR 0)) (‚ÑÇ‚ÜíT k) type‚ÑÇ‚ÇÄ‚ÇÅ)


#Œ£choice‚Çô : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí CTerm
#Œ£choice‚Çô n k = ct (Œ£choice‚Çô n k) c
  where
    c : # (Œ£choice‚Çô n k)
    c rewrite #-type‚ÑÇ‚ÇÄ‚ÇÅ | #-‚ÑÇ‚ÜíT k = refl


#Œ£choice‚Çô‚â° : (n : Name) (k : ‚ÑÇ¬∑) ‚Üí #Œ£choice‚Çô n k ‚â° #SUM #NAT (#[0]EQ (#[0]APPLY (#[0]CS n) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)
#Œ£choice‚Çô‚â° n k = CTerm‚â° refl


{--
‚ÜíequalInType-APPLY-CS‚Çô-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ : {i : ‚Ñï} {w : ùïé¬∑} {c : Name} {a‚ÇÅ a‚ÇÇ : CTerm}
                                  ‚Üí compatible¬∑ c w Res‚ÑÇ
                                  ‚Üí equalInType i w #NAT a‚ÇÅ a‚ÇÇ
                                  ‚Üí equalInType i w Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
‚ÜíequalInType-APPLY-CS‚Çô-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ {i} {w} {c} {a‚ÇÅ} {a‚ÇÇ} comp eqi =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1' (equalInType-NAT‚Üí i w a‚ÇÅ a‚ÇÇ eqi))
  where
    aw1' : ‚àÄùïé w (Œª w'' e'' ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ ‚Üí equalInType i w'' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ))
    aw1' w1 e1 (n , c‚ÇÅ , c‚ÇÇ) = {!!}
{--      equalTerms-pres-#‚áõ-left-rev‚ÜíequalInType-pres-#‚áõ-LR-rev
        _ #‚áõType‚ÑÇ‚ÇÄ‚ÇÅ-rev¬∑
        (#‚áõ!-APPLY-CS {w1} {a‚ÇÅ} {#NUM n} c c‚ÇÅ) (#‚áõ!-APPLY-CS {w1} {a‚ÇÇ} {#NUM n} c c‚ÇÇ) eqj
--}
 -- #‚áõType‚ÑÇ‚ÇÄ‚ÇÅ¬∑ {!!} {!!} {!!} --equalInType-#‚áõ-LR-rev (#‚áõ!-APPLY-CS {w1} {a‚ÇÅ} {#NUM n} c c‚ÇÅ) (#‚áõ!-APPLY-CS {w1} {a‚ÇÇ} {#NUM n} c c‚ÇÇ) eqj
      where
        j2 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí weak‚ÑÇ‚ÇÄ‚ÇÅM w' (getT n c))
        j2 = comp-Res‚ÑÇ‚Üí‚ñ°¬∑-weak‚ÑÇ‚ÇÄ‚ÇÅ n (‚äë-compatible¬∑ e1 comp)

        eqj : ‚ààType i w1 Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) (#NUM n))
        eqj = ‚Üí‚ààType‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i j2


equalTypes-#Œ£choice‚Çô-body : (i : ‚Ñï) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                           ‚Üí compatible¬∑ c w Res‚ÑÇ
                           ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                           ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                                           ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                                           ‚Üí equalTypes i w' (#EQ (#APPLY (#CS c) a‚ÇÅ) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
                                                              (#EQ (#APPLY (#CS c) a‚ÇÇ) (‚ÑÇ‚ÜíC¬∑ k) Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑))
equalTypes-#Œ£choice‚Çô-body i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea =
  eqTypesEQ‚Üê (Type‚ÑÇ‚ÇÄ‚ÇÅ-isType¬∑ i w') aw1 aw2
  where
    aw1 : equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
    aw1 = {!!} --‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e' comp) ea

    aw2 : equalInType i w' Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚ÑÇ‚ÜíC¬∑ k) (‚ÑÇ‚ÜíC¬∑ k)
    aw2 = sat‚ÜíequalInType-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ i w' k sat


equalTypes-#Œ£choice‚Çô-body-sub0 : (i : ‚Ñï) (w : ùïé¬∑) (c : Name) (k : ‚ÑÇ¬∑)
                                ‚Üí compatible¬∑ c w Res‚ÑÇ
                                ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n k)
                                ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                                                ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                                                ‚Üí equalTypes i w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                                                   (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS c) #[0]VAR) (‚ÑÇ‚ÜíC0 k) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
equalTypes-#Œ£choice‚Çô-body-sub0 i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea rewrite sub0-#Œ£choice-body‚â° a‚ÇÅ c k | sub0-#Œ£choice-body‚â° a‚ÇÇ c k =
  {!!} --equalTypes-#Œ£choice-body i w c k comp sat w' e' a‚ÇÅ a‚ÇÇ ea


#SUM-ASSERT‚Çô‚Üí#Œ£choice‚Çô : Bool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                       ‚Üí compatible¬∑ name w Res‚ÑÇ
                       ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                       ‚Üí inhType n w (#SUM-ASSERT‚Çô (#CS name))
                       ‚Üí inhType n w (#Œ£choice‚Çô name ‚ÑÇ‚ÇÅ¬∑)
#SUM-ASSERT‚Çô‚Üí#Œ£choice‚Çô bcb {n} {w} {name} comp sat (t , inh) =
  {!!}
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT! m
                        ‚Üí equalInType n w' (sub0 m (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR))) t‚ÇÅ t‚ÇÇ
                        ‚Üí equalInType n w' (sub0 m (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 m t‚ÇÅ t‚ÇÇ j eqi = ‚â°CTerm‚ÜíequalInType (sym (sub0-#Œ£choice-body‚â° m name ‚ÑÇ‚ÇÅ¬∑)) eqi2
      where
        eqi1 : equalInType n w1 (#ASSERT‚ÇÇ (#APPLY (#CS name) m)) t‚ÇÅ t‚ÇÇ
        eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY m (#CS name)) eqi

        eqt : equalTypes n w1 (#EQ (#APPLY (#CS name) m) #BTRUE #BOOL) (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
        eqt = eqTypesEQ‚Üê (equalTypes-BOOL-Type‚ÑÇ‚ÇÄ‚ÇÅ bcb n w1)
                          (‚ÜíequalInType-APPLY-CS-BOOL bcb (‚äë-compatible¬∑ e1 comp) j)
                          (equalInType-BTRUE-‚ÑÇ‚ÇÅ bcb n w1)

        eqi2 : equalInType n w1 (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) t‚ÇÅ t‚ÇÇ
        eqi2 = equalTypes‚ÜíequalInType
                 (‚â°CTerm‚ÜíeqTypes (sym (#ASSERT‚ÇÇ‚â° (#APPLY (#CS name) m))) refl eqt)
                 eqi1

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #NAT a‚ÇÅ a‚ÇÇ)
                        ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
    aw2 = {!!} --equalTypes-#Œ£choice-body-sub0 n w name ‚ÑÇ‚ÇÅ¬∑ comp sat



¬¨MP‚Çô : Bool‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚Çô) #lamAX
¬¨MP‚Çô bcb afb w n = equalInType-NEG (isTypeMP‚Çô w n) aw1
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' #MP‚Çô a‚ÇÅ a‚ÇÇ)
    aw1 w1 e1 F G ea = {!!}
      where
        aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType n w' #NAT‚ÜíBOOL f
                             ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT n‚ÇÅ n‚ÇÇ
                                                                    √ó inhType n w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
                                                                ‚Üí ‚ä•)
                                              ‚Üí ‚ä•)
                             ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT n‚ÇÅ n‚ÇÇ
                                                 √ó inhType n w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))))
        aw2 = ‚àà#MP‚Çô‚Üí n w1 F G ea
--}


-- This is similar to ¬¨MP but proved here for #MP‚ÇÇ, which is stated using ¬¨¬¨‚àÉ, instead of #MP, which is stated using ¬¨‚àÄ¬¨
¬¨MP‚ÇÇ : Bool‚ÇÄ‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚ÇÇ) #lamAX
¬¨MP‚ÇÇ bcb afb w n =
  ‚Üí‚ààType-NEG n w #MP #MP‚ÇÇ #lamAX #lamAX (isTypeMP‚ÇÇ w n) aw1 (¬¨MP bcb afb w n)
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp f‚ÇÅ))
        (sym (sub0-fun-mp f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left f‚àà) (‚ÜíequalTypes-#MP-right f‚àà))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT!‚ÜíBOOL‚ÇÄ a
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)) b‚ÇÅ b‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)) b‚ÇÅ b‚ÇÇ)
    p3 w1 e1 a b‚ÇÅ b‚ÇÇ a‚àà b‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp a))
        (‚Üí‚ààType-FUN
           n w1 (#MP-left3 a) (#MP-left a) (#MP-right a) (#MP-right a)
           b‚ÇÅ b‚ÇÇ (‚ÜíequalTypes-#MP-left a‚àà) (‚ÜíequalTypes-#MP-right a‚àà)
           (Œª w2 e2 x y h ‚Üí #MP-left2‚Üí#MP-left3 n w2 a x y (equalInType-mon a‚àà w2 e2) (#MP-left‚Üí#MP-left2 n w2 a x y (equalInType-mon a‚àà w2 e2) h))
           (Œª w2 e2 a b h ‚Üí h) (‚Üí‚â°equalInType (sub0-fun-mp‚ÇÇ a) b‚àà))

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType n w' #MP‚ÇÇ u‚ÇÅ u‚ÇÇ ‚Üí equalInType n w' #MP u‚ÇÅ u‚ÇÇ)
    aw1 w1 e1 u‚ÇÅ u‚ÇÇ u‚àà =
      ‚Üí‚ààType-PI
        n w1 #NAT!‚ÜíBOOL‚ÇÄ #NAT!‚ÜíBOOL‚ÇÄ
        (#[0]FUN #[0]MP-left3 #[0]MP-right)
        (#[0]FUN #[0]MP-left #[0]MP-right)
        u‚ÇÅ u‚ÇÇ (isType-#NAT!‚ÜíBOOL‚ÇÄ w1 n) (‚àÄùïé-mon e1 p2) (Œª w1 e1 a b h ‚Üí h)
        (‚àÄùïé-mon e1 p3) u‚àà


-- This is similar to ¬¨MP‚ÇÇ but proved here for an non-truncated version of #MP‚ÇÇ
¬¨MP‚ÇÉ : Bool‚ÇÄ‚ÑÇ CB ‚Üí alwaysFreezable F ‚Üí (w : ùïé¬∑) (n : ‚Ñï) ‚Üí ‚ààType n w (#NEG #MP‚ÇÉ) #lamAX
¬¨MP‚ÇÉ bcb afb w n =
  ‚Üí‚ààType-NEG n w #MP‚ÇÇ #MP‚ÇÉ #lamAX #lamAX (isTypeMP‚ÇÉ w n) aw1 (¬¨MP‚ÇÇ bcb afb w n)
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÅ))
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 f‚àà) (‚ÜíequalTypes-#MP-right f‚àà))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT!‚ÜíBOOL‚ÇÄ a
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left2 #[0]MP-right2)) b‚ÇÅ b‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)) b‚ÇÅ b‚ÇÇ)
    p3 w1 e1 a b‚ÇÅ b‚ÇÇ a‚àà b‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp‚ÇÇ a))
        (‚Üí‚ààType-FUN
          n w1 (#MP-left2 a) (#MP-left3 a) (#MP-right2 a) (#MP-right a) b‚ÇÅ b‚ÇÇ
          (‚ÜíequalTypes-#MP-left3 a‚àà) (‚ÜíequalTypes-#MP-right a‚àà)
          (Œª w2 e2 x y h ‚Üí #MP-left3‚Üí#MP-left2 n w2 a x y (equalInType-mon a‚àà w2 e2) h)
          (Œª w2 e2 x y h ‚Üí ‚àà#MP-right2‚Üí‚ààMP-right n w2 a x y x y (equalInType-mon a‚àà w2 e2) h)
          (‚Üí‚â°equalInType (sub0-fun-mp‚ÇÉ a) b‚àà))

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (u‚ÇÅ u‚ÇÇ : CTerm) ‚Üí equalInType n w' #MP‚ÇÉ u‚ÇÅ u‚ÇÇ ‚Üí equalInType n w' #MP‚ÇÇ u‚ÇÅ u‚ÇÇ)
    aw1 w1 e1 u‚ÇÅ u‚ÇÇ u‚àà = ‚Üí‚ààType-PI
        n w1 #NAT!‚ÜíBOOL‚ÇÄ #NAT!‚ÜíBOOL‚ÇÄ
        (#[0]FUN #[0]MP-left2 #[0]MP-right2)
        (#[0]FUN #[0]MP-left3 #[0]MP-right)
        u‚ÇÅ u‚ÇÇ (isType-#NAT!‚ÜíBOOL‚ÇÄ w1 n) (‚àÄùïé-mon e1 p2) (Œª w1 e1 a b h ‚Üí h)
        (‚àÄùïé-mon e1 p3) u‚àà

\end{code}[hide]
