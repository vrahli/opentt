\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity6b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5b(W)(M)(C)(K)(P)(G)(X)(N)(E)




{--
updRel2 name f g a b
‚Üí names a ‚â° names b
--}


{--
uptoùïé-pres-‚ààdomùïé : {name : Name} {w1 w2 : ùïé¬∑}
                        ‚Üí uptoùïé name w1 w2
                        ‚Üí name ‚àà domùïé¬∑ w1
                        ‚Üí name ‚àà domùïé¬∑ w2
uptoùïé-pres-‚ààdomùïé {name} {w1} {w2} upw i rewrite uptoùïé.upwDom upw = i


uptoùïé-pres-¬¨‚àànamesùïé : {name : Name} {w1 w2 : ùïé¬∑}
                        ‚Üí uptoùïé name w1 w2
                        ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                        ‚Üí ¬¨ name ‚àà namesùïé¬∑ w2
uptoùïé-pres-¬¨‚àànamesùïé {name} {w1} {w2} upw i rewrite uptoùïé.upwNames upw = i
--}



Œ£steps-updRel2-NUM‚Üí : {name : Name} {f g : Term} {r : ren} {m : ‚Ñï} {b : Term} {w0 w1 w2 : ùïé¬∑}
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí Œ£ ren (Œª r' ‚Üí
                          steps k' (b , w1) ‚â° (v' , w1')
                          √ó updRel2 name f g r' (NUM m) v'
                          √ó uptoùïé name w2 w1' r'
                          √ó subRen (domùïé¬∑ w0) (domùïé¬∑ w1) r r'))))
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí Œ£ ren (Œª r' ‚Üí
                          steps k' (b , w1) ‚â° (NUM m , w1')
                          √ó uptoùïé name w2 w1' r'
                          √ó subRen (domùïé¬∑ w0) (domùïé¬∑ w1) r r')))
Œ£steps-updRel2-NUM‚Üí {name} {f} {g} {r} {m} {b} {w0} {w1} {w2} (k' , .(NUM m) , w1' , r' , comp , updRel2-NUM .m , upw , sub) =
  k' , w1' , r' , comp , upw , sub



‚ÜíequalInType-NAT! : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' a b)
                    ‚Üí equalInType i w #NAT! a b
‚ÜíequalInType-NAT! i w a b eqi =
  isTypeNAT! ,
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' a b
                       ‚Üí TCONSTeq (Œª t1 t2 ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí #strongMonEq w'' t1 t2)) w' a b)
    aw w1 e1 (n , c‚ÇÅ , c‚ÇÇ) =
      Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí n , #‚áõ!-#‚áõ {w2} {a} {#NUM n} (‚àÄùïé-mon e2 c‚ÇÅ) , #‚áõ!-#‚áõ {w2} {b} {#NUM n} (‚àÄùïé-mon e2 c‚ÇÇ)) ,
      #‚áõ!-pres-#‚áì‚Üí#‚áì!-rev {w1} {#NUM n} {a} c‚ÇÅ (#‚áì‚Üí#‚áì!-NUM w1 n) ,
      #‚áõ!-pres-#‚áì‚Üí#‚áì!-rev {w1} {#NUM n} {b} c‚ÇÇ (#‚áì‚Üí#‚áì!-NUM w1 n)



wfRen-chooseT0if : (cc : ContConds) (name : Name) (w1 w2 : ùïé¬∑) (r : ren) (m : ‚Ñï)
                   ‚Üí wfRen w1 w2 r
                   ‚Üí wfRen (chooseT name w1 (NUM m)) w2 r
wfRen-chooseT0if cc name w1 w2 r m (mkWfRen dl dr nl nr) =
  mkWfRen
    (Œª n i ‚Üí domùïé-chooseT cc n name w1 (NUM m) (dl n i))
    dr
    nl
    nr



uptoùïégetT-chooseT0if : (cc : ContConds) (name : Name) (w1 w2 : ùïé¬∑) (r : ren) (m : ‚Ñï)
                        ‚Üí uptoùïégetT name w1 w2 r
                        ‚Üí uptoùïégetT name (chooseT name w1 (NUM m)) w2 r
uptoùïégetT-chooseT0if cc name w1 w2 r m h n1 n2 k d1 d2 i
  rewrite ContConds.ccGcd cc k n1 name w1 (NUM m) d1 = h n1 n2 k d1 d2 i



uptoùïé-chooseT0if : (cc : ContConds) (name : Name) (w1 w2 : ùïé¬∑) (r : ren) (n m : ‚Ñï)
                    ‚Üí uptoùïé name w1 w2 r
                    ‚Üí uptoùïé name (chooseT0if name w1 n m) w2 r
uptoùïé-chooseT0if cc name w1 w2 r n m (mkUptoùïé wf upw) with n <? m
... | yes x =
  mkUptoùïé
--    (sym (ContConds.ccDchoose‚â° cc name w (NUM m)))
--    (sym (ContConds.ccNchoose‚â° cc name w (NUM m)))
--    (sameRes-sym (sameRes-chooseT cc name w (NUM m)))
    (wfRen-chooseT0if cc name w1 w2 r m wf)
    (uptoùïégetT-chooseT0if cc name w1 w2 r m upw)
    -- (uptoùïégetT-chooseT cc name w r (NUM m))
... | no x = mkUptoùïé wf upw
 --mkUptoùïé {--refl refl (sameRes-refl w)--} (Œª n1 n2 k d1 d2 r ‚Üí {!!} {--refl--})



‚ÜíŒ£stepsUpdRel2-upd : (cc : ContConds) (gc : get-choose-‚Ñï) {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w0 w1 w : ùïé¬∑} {r : ren}
                     ‚Üí ¬¨ name ‚àà names f
                     ‚Üí # f
                     ‚Üí # g
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí compatible¬∑ name w Res‚ä§
                     ‚Üí ‚àÄùïé-get0-NUM w1 name
                     ‚Üí updRel2 name f g r a b
                     ‚Üí uptoùïé name w1 w r
                     ‚Üí w0 ‚äë¬∑ w1
                     ‚Üí w0 ‚äë¬∑ w
                     ‚Üí ‚àÄùïé w0 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n ‚Üí ‚áõ!same‚Ñï w' (APPLY f (NUM k)) (APPLY g (NUM k)))
                     ‚Üí stepsPresUpdRel2 n name f g (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
                     ‚Üí Œ£ (Œ£stepsUpdRel2 name f g (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1 (APPLY (force g) b) w r)
                          (Œª x ‚Üí 0 < fst (snd x))
‚ÜíŒ£stepsUpdRel2-upd cc gc {n} {name} {f} {g} {a} {b} {w0} {w1} {w} {r} nnf cf cg compat compat' wgt0 u upw ew01 ew0 eqn (k , v , w2 , comp , isv , ish , inw , ind) =
  (k2 + k3 , k5 + k6 , NUM i , NUM i , w1a , w1b {--w1a--} , r' , comp2b , compgc , updRel2-NUM i , upw2 , sub' {--uptoùïé-sym name w1a w1a' upw2--}) ,
  steps-APPLY-val‚Üí {k5 + k6} {force g} {b} {NUM i} {w} {w1b} tt compgc
  where
    c : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ‚Ñï (Œª m' ‚Üí
           k1 < k
           √ó k2 < k
           √ó getT 0 name w1' ‚â° just (NUM m')
           √ó ssteps k1 (a , w1) ‚â° just (NUM m , w1')
           √ó steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m))))))
    c = upd-decomp cf wgt0 comp isv
-- We need to know that m is less than n

    k1 : ‚Ñï
    k1 = fst c

    k2 : ‚Ñï
    k2 = fst (snd c)

    w1' : ùïé¬∑
    w1' = fst (snd (snd c))

    m : ‚Ñï
    m = fst (snd (snd (snd c)))

    m' : ‚Ñï
    m' = fst (snd (snd (snd (snd c))))

    ltk1 : k1 < k
    ltk1 = fst (snd (snd (snd (snd (snd c)))))

    ltk2 : k2 < k
    ltk2 = fst (snd (snd (snd (snd (snd (snd c))))))

    gt0 : getT 0 name w1' ‚â° just (NUM m')
    gt0 = fst (snd (snd (snd (snd (snd (snd (snd c)))))))

    comp1 : ssteps k1 (a , w1) ‚â° just (NUM m , w1')
    comp1 = fst (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    comp1b : steps k1 (a , w1) ‚â° (NUM m , w1')
    comp1b = ssteps‚Üísteps {k1} {a} {NUM m} {w1} {w1'} comp1

    comp2 : steps k2 (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m)
    comp2 = snd (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    e1 : w1 ‚äë¬∑ w1'
    e1 = steps‚Üí‚äë k1 a (NUM m) comp1b

    e2 : w1 ‚äë¬∑ chooseT0if name w1' m' m
    e2 = ‚äë-trans¬∑ e1 (‚äëchooseT0if {w1'} {name} {m'} {m})

    ltm : m < n
    ltm = isHighest‚Ñï-updBody‚Üí< gc {n} {name} {f} {k1} {k} {a} {v} {m} {w1} {w1'} {w2} cf compat comp1b comp isv ish

    ish1 : isHighest‚Ñï {k1} {w1} {w1'} {a} {NUM m} n name comp1b
    ish1 = isHighest‚Ñï-LET‚Üí {n} {k1} {k} {name} {a} {SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))} {NUM m} {v} {w1} {w1'} {w2} comp1b comp isv ish

    inw1 : ‚àànamesùïé {k1} {w1} {w1'} {a} {NUM m} name comp1b
    inw1 = ‚àànamesùïé-LET‚Üí {k1} {k} {name} {a} {SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))} {NUM m} {v} {w1} {w1'} {w2} comp1b comp isv inw

    indb : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ren (Œª r' ‚Üí steps k' (b , w) ‚â° (NUM m , w') √ó uptoùïé name w1' w' r' √ó subRen (domùïé¬∑ w1) (domùïé¬∑ w) r r')))
    indb = Œ£steps-updRel2-NUM‚Üí (ind k1 (<‚áí‚â§ ltk1) {a} {b} {NUM m} {w0} {w1} {w1'} {w} {r} u upw compat compat' wgt0 ew01 ew0 eqn comp1b ish1 inw1 tt)

    k4 : ‚Ñï
    k4 = fst indb

    w1x : ùïé¬∑
    w1x = fst (snd indb)

    r' : ren
    r' = fst (snd (snd indb))

    cb : steps k4 (b , w) ‚â° (NUM m , w1x)
    cb = fst (snd (snd (snd indb)))

    upw1 : uptoùïé name w1' w1x r'
    upw1 = fst (snd (snd (snd (snd indb))))

    sub' : subRen (domùïé¬∑ w1) (domùïé¬∑ w) r r'
    sub' = snd (snd (snd (snd (snd indb))))

    compg : APPLY (force g) b ‚áì APPLY g (NUM m) from w to w1x
    compg = ‚ÜíAPPLY-force‚áìAPPLY-NUM {m} {g} {b} {w} {w1x} cg (k4 , cb)

    k5 : ‚Ñï
    k5 = fst compg

    compgb : steps k5 (APPLY (force g) b , w) ‚â° (APPLY g (NUM m) , w1x)
    compgb = snd compg

    e1x : w ‚äë¬∑ w1x
    e1x = steps‚Üí‚äë k4 b (NUM m) cb

-- We could here start from w1' instead of w1x and assume that g is name-free, which we're using below anyway
-- We won't get an uptoùïé proof we need. We need a truncated NAT type where the worlds don't change.
-- replace strongMonEq with #‚áõ!same‚Ñï and NAT‚ÜíNAT with NAT‚ÜíNAT! (this is a another way of capturing some form of purity)
    sn : ‚áõ!same‚Ñï w0 (APPLY f (NUM m)) (APPLY g (NUM m))
    sn = eqn w0 (‚äë-refl¬∑ _) m ltm

    i : ‚Ñï
    i = fst sn

    ca1 : APPLY f (NUM m) ‚áì! (NUM i) at chooseT0if name w1' m' m
    ca1 = lower (fst (snd sn) (chooseT0if name w1' m' m) (‚äë-trans¬∑ ew01 e2))

    cb1 : APPLY g (NUM m) ‚áì! (NUM i) at w1x
    cb1 = lower (snd (snd sn) w1x (‚äë-trans¬∑ ew0 e1x))

    {--q : ‚áì‚àº‚Ñï w1x (APPLY f (NUM m)) (APPLY g (NUM m))
    q = lower ( w1x e1x)

    c1 : Œ£ ùïé¬∑ (Œª w1a ‚Üí APPLY f (NUM m) ‚áì NUM i from w1x to w1a
                       √ó APPLY g (NUM m) ‚áì NUM i from w1x to w1a)
    c1 = snd q--}

    w1a : ùïé¬∑
    w1a = chooseT0if name w1' m' m

    k3 : ‚Ñï
    k3 = fst ca1

    c1a : steps k3 (APPLY f (NUM m) , chooseT0if name w1' m' m) ‚â° (NUM i , w1a)
    c1a = snd ca1

    w1b : ùïé¬∑
    w1b = w1x

    k6 : ‚Ñï
    k6 = fst cb1

    c1b : steps k6 (APPLY g (NUM m) , w1x) ‚â° (NUM i , w1b)
    c1b = snd cb1
-- Move this to a computation from w1x to w1x if g is name-free

{--
    upwc : uptoùïé name w1x (chooseT0if name w1' m' m) r'
    upwc = uptoùïé-trans name w1x w1' (chooseT0if name w1' m' m) (uptoùïé-sym name w1' w1x upw1) (uptoùïé-chooseT0if cc name w1' m' m)

    nnw1x : ¬¨ name ‚àà namesùïé¬∑ w1x
    nnw1x = uptoùïé-pres-¬¨‚àànamesùïé upw1 (‚àànamesùïé‚Üí¬¨‚àànameùïé·µ£ {k1} {w1} {w1'} {a} {NUM m} name comp1b inw1)

    idomw1x : name ‚àà domùïé¬∑ w1x
    idomw1x = uptoùïé-pres-‚ààdomùïé upw1 (‚àànamesùïé‚Üí‚ààdomùïé·µ£ {k1} {w1} {w1'} {a} {NUM m} name comp1b inw1)

    c1ab : Œ£ ‚Ñï (Œª k3' ‚Üí Œ£ ùïé¬∑ (Œª w1a' ‚Üí
             steps k3' (APPLY f (NUM m) , chooseT0if name w1' m' m) ‚â° (NUM i , w1a')
             √ó uptoùïé name w1a w1a'
             √ó ¬¨ name ‚àà names (NUM i)
             √ó ¬¨ name ‚àà namesùïé¬∑ w1a
             √ó name ‚àà domùïé¬∑ w1a))
    c1ab = steps-uptoùïé cc name k3 (APPLY f (NUM m)) (NUM i) w1x w1a (chooseT0if name w1' m' m)
                        (¬¨‚àànames-APPLY {name} {f} {NUM m} nnf (¬¨‚àànames-NUM {name} {m}))
                        nnw1x idomw1x c1a upwc

    k3' : ‚Ñï
    k3' = fst c1ab

    w1a' : ùïé¬∑
    w1a' = fst (snd c1ab)

    c1c : steps k3' (APPLY f (NUM m) , chooseT0if name w1' m' m) ‚â° (NUM i , w1a')
    c1c = fst (snd (snd c1ab))
--}

    upw2 : uptoùïé name w1a w1b r'
    upw2 = uptoùïé-chooseT0if cc name w1' w1x r' m' m upw1

    comp2b : steps (k2 + k3) (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (NUM i , w1a)
    comp2b = steps-trans+ {k2} {k3} {LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {APPLY f (NUM m)} {NUM i} {w1} {chooseT0if name w1' m' m} {w1a} comp2 c1a

    compgc : steps (k5 + k6) (APPLY (force g) b , w) ‚â° (NUM i , w1b)
    compgc = steps-trans+ {k5} {k6} {APPLY (force g) b} {APPLY g (NUM m)} {NUM i} {w} {w1x} {w1b} compgb c1b



uptoùïé-pres-getT : (k : ‚Ñï) (name name1 name2 : Name) (w1 w2 : ùïé¬∑) (r : ren) (c : Term)
                   ‚Üí ¬¨ name1 ‚â° name
                   ‚Üí ¬¨ name2 ‚â° name
                   ‚Üí names‚ààren name1 name2 r
                   ‚Üí uptoùïé name w1 w2 r
                   ‚Üí getT k name1 w1 ‚â° just c
                   ‚Üí getT k name2 w2 ‚â° just c
uptoùïé-pres-getT k name name1 name2 w1 w2 r c d1 d2 i upw g
 rewrite uptoùïé.upwGet upw name1 name2 k d1 d2 i = g



subRen-pres-names‚ààren : (r r' : ren) (name1 name2 : Name) (l k : List Name)
                        ‚Üí subRen l k r r'
                        ‚Üí name1 ‚àà l
                        ‚Üí name2 ‚àà k
                        ‚Üí names‚ààren name1 name2 r
                        ‚Üí names‚ààren name1 name2 r'
subRen-pres-names‚ààren r .r name1 name2 l k (subRen-refl .r) i1 i2 i = i
subRen-pres-names‚ààren r .((a , b) ‚à∑ r2) name1 name2 l k (subRen-trans a b .r r2 nd1 nd2 sub‚ÇÅ) i1 i2 i =
  inj‚ÇÇ (ne1 i1 , ne2 i2 , subRen-pres-names‚ààren r r2 name1 name2 l k sub‚ÇÅ i1 i2 i)
  where
    ne1 : name1 ‚àà l ‚Üí ¬¨ name1 ‚â° a
    ne1 j x rewrite x = nd1 j

    ne2 : name2 ‚àà k ‚Üí ¬¨ name2 ‚â° b
    ne2 j x rewrite x = nd2 j


updRel2-CS‚Çó‚Üí : {name : Name} {f g : Term} {r : ren} {n : Name} {a : Term}
               ‚Üí updRel2 name f g r (CS n) a
               ‚Üí Œ£ Name (Œª n' ‚Üí a ‚â° CS n' √ó ¬¨ n ‚â° name √ó ¬¨ n' ‚â° name √ó names‚ààren n n' r)
updRel2-CS‚Çó‚Üí {name} {f} {g} {r} {n} {CS n'} (updRel2-CS .n .n' d1 d2 x) = n' , refl , d1 , d2 , x


sucNames : List Name ‚Üí List Name
sucNames [] = []
sucNames (n ‚à∑ l) = suc n ‚à∑ sucNames l


suc‚ààsubNames‚Üí : {n : Name} {l : List Name}
                 ‚Üí suc n ‚àà sucNames l
                 ‚Üí n ‚àà l
suc‚ààsubNames‚Üí {n} {x ‚à∑ l} (here px) rewrite suc-injective px = here refl
suc‚ààsubNames‚Üí {n} {x ‚à∑ l} (there i) = there (suc‚ààsubNames‚Üí {n} {l} i)


suc‚àà0subNames‚Üí : {n : Name} {l : List Name}
                 ‚Üí suc n ‚àà 0 ‚à∑ sucNames l
                 ‚Üí n ‚àà l
suc‚àà0subNames‚Üí {n} {l} (here px) = ‚ä•-elim (suc-‚â¢-0 px)
suc‚àà0subNames‚Üí {n} {l} (there i) = suc‚ààsubNames‚Üí i


‚Üísuc‚ààsubNames : {n : Name} {l : List Name}
                 ‚Üí n ‚àà l
                 ‚Üí suc n ‚àà sucNames l
‚Üísuc‚ààsubNames {n} {x ‚à∑ l} (here px) rewrite px = here refl
‚Üísuc‚ààsubNames {n} {x ‚à∑ l} (there i) = there (‚Üísuc‚ààsubNames {n} {l} i)


subRen-sren : {l k : List Name} {r r' : ren}
              ‚Üí subRen l k r r'
              ‚Üí subRen (0 ‚à∑ sucNames l) (0 ‚à∑ sucNames k) (sren r) (sren r')
subRen-sren {l} {k} {r} {.r} (subRen-refl .r) = subRen-refl _
subRen-sren {l} {k} {r} {.((a , b) ‚à∑ r2)} (subRen-trans a b .r r2 x x‚ÇÅ sub‚ÇÅ) =
  subRen-trans
    (suc a) (suc b) (sren r) (sren r2)
    (Œª z ‚Üí x (suc‚àà0subNames‚Üí z))
    (Œª z ‚Üí x‚ÇÅ (suc‚àà0subNames‚Üí z))
    (subRen-sren {l} {k} {r} {r2} sub‚ÇÅ)


‚Üí‚äÜsucNames : {l k : List Name} ‚Üí lowerNames k ‚äÜ l ‚Üí k ‚äÜ 0 ‚à∑ sucNames l
‚Üí‚äÜsucNames {l} {k} h {0} i = here refl
‚Üí‚äÜsucNames {l} {k} h {suc x} i = there (‚Üísuc‚ààsubNames {x} {l} (h (suc‚Üí‚ààlowerNames i)))


++‚äÜ2‚Üí1 : {a b l : List Name} ‚Üí a ++ b ‚äÜ l ‚Üí a ‚äÜ l
++‚äÜ2‚Üí1 {a} {b} {l} h {x} i = h (‚àà-++‚Å∫À° i)


++‚äÜ2‚Üí2 : {a b l : List Name} ‚Üí a ++ b ‚äÜ l ‚Üí b ‚äÜ l
++‚äÜ2‚Üí2 {a} {b} {l} h {x} i = h (‚àà-++‚Å∫ ≥ a i)


++‚äÜ3‚Üí1 : {a b c l : List Name} ‚Üí a ++ b ++ c ‚äÜ l ‚Üí a ‚äÜ l
++‚äÜ3‚Üí1 {a} {b} {c} {l} h {x} i = h (‚àà-++‚Å∫À° i)


++‚äÜ3‚Üí2 : {a b c l : List Name} ‚Üí a ++ b ++ c ‚äÜ l ‚Üí b ‚äÜ l
++‚äÜ3‚Üí2 {a} {b} {c} {l} h {x} i = h (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫À° i))


++‚äÜ3‚Üí3 : {a b c l : List Name} ‚Üí a ++ b ++ c ‚äÜ l ‚Üí c ‚äÜ l
++‚äÜ3‚Üí3 {a} {b} {c} {l} h {x} i = h (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b i))


++‚äÜ4‚Üí1 : {a b c d l : List Name} ‚Üí a ++ b ++ c ++ d ‚äÜ l ‚Üí a ‚äÜ l
++‚äÜ4‚Üí1 {a} {b} {c} {d} {l} h {x} i = h (‚àà-++‚Å∫À° i)


++‚äÜ4‚Üí2 : {a b c d l : List Name} ‚Üí a ++ b ++ c ++ d ‚äÜ l ‚Üí b ‚äÜ l
++‚äÜ4‚Üí2 {a} {b} {c} {d} {l} h {x} i = h (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫À° i))


++‚äÜ4‚Üí3 : {a b c d l : List Name} ‚Üí a ++ b ++ c ++ d ‚äÜ l ‚Üí c ‚äÜ l
++‚äÜ4‚Üí3 {a} {b} {c} {d} {l} h {x} i = h (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b (‚àà-++‚Å∫À° i)))


++‚äÜ4‚Üí4 : {a b c d l : List Name} ‚Üí a ++ b ++ c ++ d ‚äÜ l ‚Üí d ‚äÜ l
++‚äÜ4‚Üí4 {a} {b} {c} {d} {l} h {x} i = h (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b (‚àà-++‚Å∫ ≥ c i)))


updRel2-ren-mon : {name : Name} {f g : Term} {r r' : ren} {a b : Term} {l k : List Name}
                  ‚Üí subRen l k r r'
                  ‚Üí names a ‚äÜ l
                  ‚Üí names b ‚äÜ k
                  ‚Üí updRel2 name f g r a b
                  ‚Üí updRel2 name f g r' a b
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(VAR x)} {.(VAR x)} {l} {k} sub nad nbd (updRel2-VAR x) = updRel2-VAR x
updRel2-ren-mon {name} {f} {g} {r} {r'} {.NAT} {.NAT} {l} {k} sub nad nbd updRel2-NAT = updRel2-NAT
updRel2-ren-mon {name} {f} {g} {r} {r'} {.QNAT} {.QNAT} {l} {k} sub nad nbd updRel2-QNAT = updRel2-QNAT
updRel2-ren-mon {name} {f} {g} {r} {r'} {.TNAT} {.TNAT} {l} {k} sub nad nbd updRel2-TNAT = updRel2-TNAT
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-LT _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-QLT _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(NUM x)} {.(NUM x)} {l} {k} sub nad nbd (updRel2-NUM x) = updRel2-NUM x
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} {l} {k} sub nad nbd (updRel2-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) = updRel2-IFLT _ _ _ _ _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ4‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} nad) (++‚äÜ4‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ4‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} nad) (++‚äÜ4‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} nbd) upd‚ÇÇ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ4‚Üí3 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} nad) (++‚äÜ4‚Üí3 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} nbd) upd‚ÇÉ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ4‚Üí4 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} {names d‚ÇÅ} nad) (++‚äÜ4‚Üí4 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} {names d‚ÇÇ} nbd) upd‚ÇÑ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(SUC a‚ÇÅ)} {.(SUC a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-SUC a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-SUC _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-PI _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-LAMBDA a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-LAMBDA _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-APPLY _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(FIX a‚ÇÅ)} {.(FIX a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-FIX a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-FIX _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-LET _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-SUM _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-PAIR _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-SPREAD _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-SET _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-ISECT _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-TUNION _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-UNION _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(QTUNION a‚ÇÅ b‚ÇÅ)} {.(QTUNION a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-QTUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-QTUNION _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(INL a‚ÇÅ)} {.(INL a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-INL a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-INL _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(INR a‚ÇÅ)} {.(INR a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-INR a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-INR _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {l} {k} sub nad nbd (updRel2-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updRel2-DECIDE _ _ _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ3‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} nad) (++‚äÜ3‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ3‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} nad) (++‚äÜ3‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} nbd) upd‚ÇÇ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ3‚Üí3 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} nad) (++‚äÜ3‚Üí3 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} nbd) upd‚ÇÉ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} {l} {k} sub nad nbd (updRel2-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updRel2-EQ _ _ _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ3‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} nad) (++‚äÜ3‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ3‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} nad) (++‚äÜ3‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} nbd) upd‚ÇÇ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ3‚Üí3 {names a‚ÇÅ} {names b‚ÇÅ} {names c‚ÇÅ} nad) (++‚äÜ3‚Üí3 {names a‚ÇÇ} {names b‚ÇÇ} {names c‚ÇÇ} nbd) upd‚ÇÉ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.AX} {.AX} {l} {k} sub nad nbd updRel2-AX = updRel2-AX
updRel2-ren-mon {name} {f} {g} {r} {r'} {.FREE} {.FREE} {l} {k} sub nad nbd updRel2-FREE = updRel2-FREE
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(CS name1)} {.(CS name2)} {l} {k} sub nad nbd (updRel2-CS name1 name2 x x‚ÇÅ x‚ÇÇ) = updRel2-CS _ _ x x‚ÇÅ (subRen-pres-names‚ààren r r' name1 name2 l k sub (nad (here refl)) (nbd (here refl)) x‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(NAME name1)} {.(NAME name2)} {l} {k} sub nad nbd (updRel2-NAME name1 name2 x x‚ÇÅ x‚ÇÇ) = updRel2-NAME _ _ x x‚ÇÅ (subRen-pres-names‚ààren r r' name1 name2 l k sub (nad (here refl)) (nbd (here refl)) x‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(FRESH a)} {.(FRESH b)} {l} {k} sub nad nbd (updRel2-FRESH a b upd‚ÇÅ) = updRel2-FRESH _ _ (updRel2-ren-mon {suc name} {shiftNameUp 0 f} {shiftNameUp 0 g} {sren r} {sren r'} {a} {b} {0 ‚à∑ sucNames l} {0 ‚à∑ sucNames k} (subRen-sren sub) (‚Üí‚äÜsucNames nad) (‚Üí‚äÜsucNames nbd) upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-CHOOSE _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(TSQUASH a‚ÇÅ)} {.(TSQUASH a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-TSQUASH a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-TSQUASH _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(TTRUNC a‚ÇÅ)} {.(TTRUNC a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-TTRUNC a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-TTRUNC _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(TCONST a‚ÇÅ)} {.(TCONST a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-TCONST a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-TCONST _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(SUBSING a‚ÇÅ)} {.(SUBSING a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-SUBSING a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-SUBSING _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.PURE} {.PURE} {l} {k} sub nad nbd updRel2-PURE = updRel2-PURE
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(DUM a‚ÇÅ)} {.(DUM a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-DUM a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-DUM _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} {l} {k} sub nad nbd (updRel2-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ upd‚ÇÅ upd‚ÇÇ) = updRel2-FFDEFS _ _ _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí1 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí1 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÅ) (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub (++‚äÜ2‚Üí2 {names a‚ÇÅ} {names b‚ÇÅ} nad) (++‚äÜ2‚Üí2 {names a‚ÇÇ} {names b‚ÇÇ} nbd) upd‚ÇÇ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(UNIV x)} {.(UNIV x)} {l} {k} sub nad nbd (updRel2-UNIV x) = updRel2-UNIV x
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(LIFT a‚ÇÅ)} {.(LIFT a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-LIFT a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-LIFT _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(LOWER a‚ÇÅ)} {.(LOWER a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-LOWER a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-LOWER _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(SHRINK a‚ÇÅ)} {.(SHRINK a‚ÇÇ)} {l} {k} sub nad nbd (updRel2-SHRINK a‚ÇÅ a‚ÇÇ upd‚ÇÅ) = updRel2-SHRINK _ _ (updRel2-ren-mon {name} {f} {g} {r} {r'} {_} {_} {l} {k} sub nad nbd upd‚ÇÅ)
updRel2-ren-mon {name} {f} {g} {r} {r'} {.(upd name f)} {.(force g)} {l} {k} sub nad nbd updRel2-upd = updRel2-upd


‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ : {name : Name} {f g : Term} {r : ren} {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term} {w0 w1 w : ùïé¬∑}
                         ‚Üí names b‚ÇÅ ‚äÜ domùïé¬∑ w0
                         ‚Üí names b‚ÇÇ ‚äÜ domùïé¬∑ w
                         ‚Üí updRel2 name f g r b‚ÇÅ b‚ÇÇ
                         ‚Üí Œ£stepsUpdRel2 name f g a‚ÇÅ w0 w1 a‚ÇÇ w r
                         ‚Üí Œ£stepsUpdRel2 name f g (APPLY a‚ÇÅ b‚ÇÅ) w0 w1 (APPLY a‚ÇÇ b‚ÇÇ) w r
‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÅ {name} {f} {g} {r} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} {w0} {w1} {w} nd1 nd2 updb (k1 , k2 , y1 , y2 , w3 , w' , r' , comp1 , comp2 , ur , upw , sub) =
  fst comp1' , fst comp2' , APPLY y1 b‚ÇÅ , APPLY y2 b‚ÇÇ , w3 , w' , r' , snd comp1' , snd comp2' ,
  updRel2-APPLY
    _ _ _ _ ur
    (updRel2-ren-mon {name} {f} {g} {r} {r'} {b‚ÇÅ} {b‚ÇÇ} {domùïé¬∑ w0} {domùïé¬∑ w} sub nd1 nd2 updb) ,
  upw , sub
  where
    comp1' : APPLY a‚ÇÅ b‚ÇÅ ‚áì APPLY y1 b‚ÇÅ from w1 to w3
    comp1' = ‚Üísteps-APPLY b‚ÇÅ k1 comp1

    comp2' : APPLY a‚ÇÇ b‚ÇÇ ‚áì APPLY y2 b‚ÇÇ from w to w'
    comp2' = ‚Üísteps-APPLY b‚ÇÇ k2 comp2




-- We require that (name1 ‚àà domùïé w1) and (name2 ‚àà domùïé w) because otherwise it could be that
-- names‚ààren name1 name2 r is true because name1 and name2 are not covered by r and therefore
-- name1 ‚â° name2. But then in r' (from the Œ£stepsUpdRel2 hyp.), name1 gets paired with some other
-- name than name2, or the other way around.
-- TODO: can we turn this into a counterexample?
‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÇ : {name : Name} {f g : Term} {name1 name2 : Name} {r : ren} {b‚ÇÅ b‚ÇÇ : Term} {w1 w2 w : ùïé¬∑}
                         ‚Üí ¬¨ name1 ‚â° name
                         ‚Üí ¬¨ name2 ‚â° name
                         ‚Üí name1 ‚àà domùïé¬∑ w1
                         ‚Üí name2 ‚àà domùïé¬∑ w
                         ‚Üí names‚ààren name1 name2 r
                         ‚Üí Œ£stepsUpdRel2 name f g b‚ÇÅ w1 w2 b‚ÇÇ w r
                         ‚Üí Œ£stepsUpdRel2 name f g (APPLY (CS name1) b‚ÇÅ) w1 w2 (APPLY (CS name2) b‚ÇÇ) w r
‚ÜíŒ£stepsUpdRel2-APPLY‚ÇÇ {name} {f} {g} {name1} {name2} {r} {b‚ÇÅ} {b‚ÇÇ} {w1} {w2} {w} d1 d2 nd1 nd2 nir (k1 , k2 , y1 , y2 , w3 , w' , r' , comp1 , comp2 , ur , upw , sub) =
  fst comp1' , fst comp2' , APPLY (CS name1) y1 , APPLY (CS name2) y2 , w3 , w' , r' , snd comp1' , snd comp2' ,
  updRel2-APPLY _ _ _ _ (updRel2-CS name1 name2 d1 d2 (subRen-pres-names‚ààren r r' name1 name2 (domùïé¬∑ w1) (domùïé¬∑ w) sub nd1 nd2 nir)) ur , upw , sub
  where
    comp1' : APPLY (CS name1) b‚ÇÅ ‚áì APPLY (CS name1) y1 from w2 to w3
    comp1' = ‚ÜíŒ£-steps-APPLY-CS k1 b‚ÇÅ y1 w2 w3 name1 comp1

    comp2' : APPLY (CS name2) b‚ÇÇ ‚áì APPLY (CS name2) y2 from w to w'
    comp2' = ‚ÜíŒ£-steps-APPLY-CS k2 b‚ÇÇ y2 w w' name2 comp2


¬¨0‚ààren‚Çó-sren : (r : ren) ‚Üí ¬¨ 0 ‚àà ren‚Çó (sren r)
¬¨0‚ààren‚Çó-sren [] ()
¬¨0‚ààren‚Çó-sren ((a , b) ‚à∑ r) (here p) = suc-‚â¢-0 (sym p)
¬¨0‚ààren‚Çó-sren ((a , b) ‚à∑ r) (there p) = ¬¨0‚ààren‚Çó-sren r p


¬¨0‚ààren·µ£-sren : (r : ren) ‚Üí ¬¨ 0 ‚àà ren·µ£ (sren r)
¬¨0‚ààren·µ£-sren [] ()
¬¨0‚ààren·µ£-sren ((a , b) ‚à∑ r) (here p) = suc-‚â¢-0 (sym p)
¬¨0‚ààren·µ£-sren ((a , b) ‚à∑ r) (there p) = ¬¨0‚ààren·µ£-sren r p


‚ÜíuptoùïégetT-startNewChoiceT : (cc : ContConds) (name : Name) (w1 w2 : ùïé¬∑) (r : ren) (a b : Term)
                               ‚Üí uptoùïégetT name w1 w2 r
                               ‚Üí uptoùïégetT
                                    name
                                    (startNewChoiceT Res‚ä§ w1 a)
                                    (startNewChoiceT Res‚ä§ w2 b)
                                    ((newChoiceT w1 a , newChoiceT w2 b) ‚à∑ r)
‚ÜíuptoùïégetT-startNewChoiceT cc name w1 w2 r a b upw n1 n2 k d1 d2 (inj‚ÇÅ (i‚ÇÅ , i‚ÇÇ)) rewrite i‚ÇÅ | i‚ÇÇ = c
  where
    c : getT k (newChoiceT w1 a) (startNewChoiceT Res‚ä§ w1 a)
        ‚â° getT k (newChoiceT w2 b) (startNewChoiceT Res‚ä§ w2 b)
    c = ContConds.ccGstarts cc (newChoiceT w1 a) (newChoiceT w2 b) k Res‚ä§ w1 w2
                            (¬¨fresh‚ààdomùïé2 w1 (namesùïé¬∑ w1) (‚Üìvars (names a)))
                            (¬¨fresh‚ààdomùïé2 w2 (namesùïé¬∑ w2) (‚Üìvars (names b)))
‚ÜíuptoùïégetT-startNewChoiceT cc name w1 w2 r a b upw n1 n2 k d1 d2 (inj‚ÇÇ (i‚ÇÅ , i‚ÇÇ , x))
  rewrite ContConds.ccGstartd cc n1 (newChoiceT w1 a) k Res‚ä§ w1 i‚ÇÅ
        | ContConds.ccGstartd cc n2 (newChoiceT w2 b) k Res‚ä§ w2 i‚ÇÇ =
  upw n1 n2 k d1 d2 x


‚ÜíwfRen-startNewChoiceT : (cc : ContConds) (w1 w2 : ùïé¬∑) (r : ren) (a b : Term)
                           ‚Üí wfRen w1 w2 r
                           ‚Üí wfRen
                                (startNewChoiceT Res‚ä§ w1 a)
                                (startNewChoiceT Res‚ä§ w2 b)
                                ((newChoiceT w1 a , newChoiceT w2 b) ‚à∑ r)
‚ÜíwfRen-startNewChoiceT cc w1 w2 r a b (mkWfRen rl rr nrl nrr) =
  mkWfRen rl' rr' nrl' nrr'
    where
      rl' : (n : Name) ‚Üí n ‚àà newChoiceT w1 a ‚à∑ ren‚Çó r ‚Üí n ‚àà domùïé¬∑ (startNewChoiceT Res‚ä§ w1 a)
      rl' n (here p) rewrite p = ContConds.ccNchoice cc w1 a
      rl' n (there p) = ContConds.ccDstart cc n w1 a (rl n p)

      rr' : (n : Name) ‚Üí n ‚àà newChoiceT w2 b ‚à∑ ren·µ£ r ‚Üí n ‚àà domùïé¬∑ (startNewChoiceT Res‚ä§ w2 b)
      rr' n (here p) rewrite p = ContConds.ccNchoice cc w2 b
      rr' n (there p) = ContConds.ccDstart cc n w2 b (rr n p)

      nrl' : no-repeats (ren‚Çó ((newChoiceT w1 a , newChoiceT w2 b) ‚à∑ r))
      nrl' = (Œª x ‚Üí ¬¨fresh‚ààdomùïé2 w1 (namesùïé¬∑ w1) (‚Üìvars (names a)) (rl _ x)) , nrl

      nrr' : no-repeats (ren·µ£ ((newChoiceT w1 a , newChoiceT w2 b) ‚à∑ r))
      nrr' = (Œª x ‚Üí ¬¨fresh‚ààdomùïé2 w2 (namesùïé¬∑ w2) (‚Üìvars (names b)) (rr _ x)) , nrr


‚Üíuptoùïé-startNewChoiceT : (cc : ContConds) (name : Name) (w1 w2 : ùïé¬∑) (r : ren) (a b : Term)
                           ‚Üí uptoùïé name w1 w2 r
                           ‚Üí uptoùïé
                                name
                                (startNewChoiceT Res‚ä§ w1 a)
                                (startNewChoiceT Res‚ä§ w2 b)
                                ((newChoiceT w1 a , newChoiceT w2 b) ‚à∑ r)
‚Üíuptoùïé-startNewChoiceT cc name w1 w2 r a b (mkUptoùïé wf upw) =
  mkUptoùïé
    (‚ÜíwfRen-startNewChoiceT cc w1 w2 r a b wf)
    (‚ÜíuptoùïégetT-startNewChoiceT cc name w1 w2 r a b upw)



isHighest‚Ñï2-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {k : ‚Ñï} {name : Name} {f g : Term} {a b v : Term} {w w' : ùïé¬∑}
                      ‚Üí (comp : steps k (APPLY a b , w) ‚â° (v , w'))
                      ‚Üí isValue v
                      ‚Üí isHighest‚Ñï {k} {w} {w'} {APPLY a b} {v} n name comp
                      ‚Üí ‚àànamesùïé {k} {w} {w'} {APPLY a b} {v} name comp
                      ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {0} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p = 0 , LAMBDA t , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... | inj‚ÇÇ x with is-CS a
... |    inj‚ÇÅ (name' , q) rewrite q with is-NUM b
... |       inj‚ÇÅ (j , r) rewrite r with getT j name' w
... |          just t = 0 , CS name' , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          nothing = 0 , CS name' , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ x | inj‚ÇÅ (name' , q) | inj‚ÇÇ r with step‚äé b w
... |          inj‚ÇÅ (b0 , w0 , z) rewrite z = 0 , CS name' , w , refl , fst h , (fst inw , fst (snd inw)) , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
... |          inj‚ÇÇ z rewrite z = 0 , CS name' , w , refl , h , inw , tt , _‚â§_.s‚â§s _‚â§_.z‚â§n
isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {suc k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv h inw | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé a w
... |    inj‚ÇÅ (a0 , w0 , z) rewrite z =
  suc (fst ind) , concl
  where
    ind : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a0 , w0) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w0} {w''} {a0} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w0} {w''} {a0} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    ind = isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a0} {b} {v} {w0} {w'} comp isv (snd h) (snd (snd inw))

    concl : Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps (suc (fst ind)) (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {suc (fst ind)} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {suc (fst ind)} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó suc (fst ind) < suc k)))
    concl rewrite z =
      fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
      (fst h , fst (snd (snd (snd (snd ind))))) ,
      (fst inw , fst (snd inw) , fst (snd (snd (snd (snd (snd ind)))))) ,
      fst (snd (snd (snd (snd (snd (snd ind)))))) ,
      _‚â§_.s‚â§s (snd (snd (snd (snd (snd (snd (snd ind)))))))
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv



stepsPresUpdRel2-APPLY‚ÇÅ‚Üí : {n : ‚Ñï} {name : Name} {f g : Term} {a b : Term} {w : ùïé¬∑}
                           ‚Üí stepsPresUpdRel2 n name f g (APPLY a b) w
                           ‚Üí stepsPresUpdRel2 n name f g a w
stepsPresUpdRel2-APPLY‚ÇÅ‚Üí {n} {name} {f} {g} {a} {b} {w} (k , v , w' , comp , isv , ish , inw , ind) =
  fst hv , fst (snd hv) , fst (snd (snd hv)) , fst (snd (snd (snd hv))) ,
  fst (snd (snd (snd (snd (snd (snd hv)))))) , fst (snd (snd (snd (snd hv)))) ,
  fst (snd (snd (snd (snd (snd hv))))) ,
  Œª k' j ‚Üí ind k' (<‚áí‚â§ (<-trans ≥ j (snd (snd (snd (snd (snd (snd (snd hv)))))))))
  where
    hv : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª u ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí Œ£ (steps k' (a , w) ‚â° (u , w'')) (Œª comp' ‚Üí
                          isHighest‚Ñï {k'} {w} {w''} {a} {u} n name comp'
                          √ó ‚àànamesùïé {k'} {w} {w''} {a} {u} name comp'
                          √ó isValue u
                          √ó k' < k))))
    hv = isHighest‚Ñï2-APPLY‚ÇÅ‚Üí {n} {k} {name} {f} {g} {a} {b} {v} {w} {w'} comp isv ish inw

\end{code}
