\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ;  _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Axiom.UniquenessOfIdentityProofs
open import Axiom.Extensionality.Propositional

open import util
open import calculus
open import world
open import choice
open import compatible
open import progress
--open import bar
open import mod

module barI {L : Level} (W : PossibleWorlds {L}) (M : Mod W) --(B : BarsProps W) --
--            (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K)
       where

open import worldDef(W)
--open import bar(W)
--open import mod(W)
-- Example: open bars
--open import barOpen(W)
-- Example: Kripke bars i.e., all extensions
--open import barKripke(W)
-- Example: Beth bars
--open import barBeth(W)(C)(K)(P)


-- instance of a bar, which should be replaced by a parameter
--barI : Mod
--barI = BarsProps‚ÜíMod B
--barI = inOpenBar-Bar
--barI = inBethBar-Bar


‚ñ°¬∑ : (w : ùïé¬∑) (f : wPred w) ‚Üí Set(lsuc(L))
‚ñ°¬∑ = Mod.‚ñ° M
--‚ñ°¬∑ = inOpenBar
--‚ñ°¬∑ = inBethBar

‚ñ°¬∑' : (w : ùïé¬∑) {g : wPred w} (h : ‚ñ°¬∑ w g) (f : wPredDep g) ‚Üí Set(lsuc(L))
‚ñ°¬∑' = Mod.‚ñ°' M
--‚ñ°¬∑' = inOpenBar'
--‚ñ°¬∑' = inBethBar'

‚Üë‚ñ°¬∑ : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ°¬∑ w f) {w' : ùïé¬∑} (e : w ‚äë¬∑ w') ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred f e)
‚Üë‚ñ°¬∑ = Mod.‚Üë‚ñ° M
--‚Üë‚ñ°¬∑ = ‚ÜëinOpenBar
--‚Üë‚ñ°¬∑ = ‚ÜëinBethBar

‚Üë'‚ñ°¬∑ : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ°¬∑ w f) {w' : ùïé¬∑} (e : w ‚äë¬∑ w') ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' f e)
‚Üë'‚ñ°¬∑ = Mod.‚Üë'‚ñ° M
--‚Üë'‚ñ°¬∑ = ‚Üë'inOpenBar
--‚Üë'‚ñ°¬∑ = ‚Üë'inBethBar


‚Üë‚ñ°¬∑' : {w : ùïé¬∑} {f : wPred w} {g : wPredDep f} (i : ‚ñ°¬∑ w f) {w' : ùïé¬∑} (e : w ‚äë¬∑ w')
          ‚Üí ‚ñ°¬∑' w i g ‚Üí ‚ñ°¬∑' w' (‚Üë‚ñ°¬∑ i e) (‚ÜëwPredDep g e)
‚Üë‚ñ°¬∑' {w} {f} {g} = Mod.‚Üë‚ñ°' M {w} {f} {g}
--‚Üë‚ñ°¬∑' {w} {f} {g} = ‚ÜëinOpenBar' {w} {f} {g}
--‚Üë‚ñ°¬∑' {w} {f} {g} = ‚ÜëinBethBar' {w} {f} {g}



{--
atbar : {w : ùïé¬∑} {f : wPred w} (i : ‚ñ°¬∑ w f) (w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (p : f w' e') ‚Üí Set(lsuc(L))
--atbar = Bar.atBar b
atbar = atOpenBar
--atbar = atBethBar
--}
\end{code}
