\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using (T-‚àß)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice
open import encode


module choiceProp {L  : Level}
                  (W  : PossibleWorlds {L})
                  (C  : Choice)
                  (M  : Compatible W C)
                  (G  : GetChoice {L} W C M)
                  (E  : ChoiceExt {L} W C)
                  (N  : NewChoice W C M G)
                  (EC : Encode)
       where

open import worldDef(W)
open import choiceDef{L}(C)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)
open import computation(W)(C)(M)(G)(E)(N)(EC)
open import terms2(W)(C)(M)(G)(E)(N)(EC)
  using (‚àß‚â°true‚Üí‚Çó ; ‚àß‚â°true‚Üí·µ£ ; ‚àß‚â°true‚Üí1-3 ; ‚àß‚â°true‚Üí2-3 ; ‚àß‚â°true‚Üí3-3 ; ‚àß‚â°true‚Üí1-4 ; ‚àß‚â°true‚Üí2-4 ; ‚àß‚â°true‚Üí3-4 ; ‚àß‚â°true‚Üí4-4 ;
         ‚àß‚â°true‚Üí1r-4 ; ‚àß‚â°true‚Üí1r-3 ; IFLT-NUM-1st‚áìsteps ; IFLT-NUM-2nd‚áìsteps ; IFEQ-NUM-1st‚áìsteps ; IFEQ-NUM-2nd‚áìsteps ;
         SUC‚áìsteps ; hasValue ; hasValue‚Ñï ; hasValue-IFLT‚Üí ; hasValue-IFEQ‚Üí ; hasValue-SUC‚Üí ; hasValue-LET‚Üí ;
         hasValue-IFLT-NUM‚Üí ; hasValue-IFEQ-NUM‚Üí ; hasValue-APPLY‚Üí ; hasValue-FIX‚Üí ; hasValue-MAPP‚Üí ; hasValue-WREC‚Üí ;
         hasValue-CHOOSE‚Üí ; hasValue-DECIDE‚Üí ; hasValue-SPREAD‚Üí)
open import terms3(W)(C)(M)(G)(E)(N)(EC) using ()
open import subst(W)(C)(M)(G)(E)(N)(EC) using (subn ; sub‚â°subn)

open import continuity-conds(W)(C)(M)(G)(E)(N)(EC) using ()


¬¨writes : Term ‚Üí Bool
¬¨writes (VAR x) = true
--¬¨writes NAT = true
¬¨writes QNAT = true
--¬¨writes TNAT = true
¬¨writes (LT t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (QLT t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (NUM x) = true
¬¨writes (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ ‚àß ¬¨writes t‚ÇÉ
¬¨writes (IFEQ t t‚ÇÅ t‚ÇÇ t‚ÇÉ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ ‚àß ¬¨writes t‚ÇÉ
¬¨writes (SUC t) = ¬¨writes t
¬¨writes (PI t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (LAMBDA t) = ¬¨writes t
¬¨writes (APPLY t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (FIX t) = ¬¨writes t
¬¨writes (LET t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (WT t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
¬¨writes (SUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (DSUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (WREC t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (MT t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
--¬¨writes (MSUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (DMSUP t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (SUM t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (PAIR t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (SPREAD t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (SET t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (ISECT t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (TUNION t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (UNION t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (QTUNION t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes (INL t) = ¬¨writes t
¬¨writes (INR t) = ¬¨writes t
¬¨writes (DECIDE t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
¬¨writes (EQ t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
--¬¨writes (EQB t t‚ÇÅ t‚ÇÇ t‚ÇÉ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ ‚àß ¬¨writes t‚ÇÉ
¬¨writes AX = true
¬¨writes FREE = true
¬¨writes (MSEQ x) = true
¬¨writes (MAPP s t) = ¬¨writes t
¬¨writes (CS x) = true --false -- FALSE
¬¨writes (NAME x) = false -- FALSE
¬¨writes (FRESH t) = false -- FALSE
¬¨writes (LOAD t) = false -- FALSE
¬¨writes (CHOOSE t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
--¬¨writes (IFC0 t t‚ÇÅ t‚ÇÇ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ ‚àß ¬¨writes t‚ÇÇ
--¬¨writes (TSQUASH t) = ¬¨writes t
--¬¨writes (TTRUNC t) = ¬¨writes t
¬¨writes NOWRITE = true
¬¨writes NOREAD  = true
¬¨writes (SUBSING t) = ¬¨writes t
¬¨writes (DUM t) = ¬¨writes t
¬¨writes (FFDEFS t t‚ÇÅ) = ¬¨writes t ‚àß ¬¨writes t‚ÇÅ
¬¨writes PURE = true
¬¨writes NOSEQ = true
¬¨writes (TERM t) = ¬¨writes t
¬¨writes (ENC t) = ¬¨writes t
¬¨writes (UNIV x) = true
¬¨writes (LIFT t) = ¬¨writes t
¬¨writes (LOWER t) = ¬¨writes t
¬¨writes (SHRINK t) = ¬¨writes t


#¬¨writes : CTerm ‚Üí Bool
#¬¨writes t = ¬¨writes ‚åú t ‚åù


¬¨Writes : Term ‚Üí Set
¬¨Writes t = ¬¨writes t ‚â° true


#¬¨Writes : CTerm ‚Üí Set
#¬¨Writes t = #¬¨writes t ‚â° true


-- Only the choices can differ TRUE/FALSE
data differC : Term ‚Üí Term ‚Üí Set where
  differC-VAR      : (x : Var) ‚Üí differC (VAR x) (VAR x)
  differC-QNAT     : differC QNAT QNAT
  differC-LT       : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (LT a‚ÇÅ b‚ÇÅ) (LT a‚ÇÇ b‚ÇÇ)
  differC-QLT      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (QLT a‚ÇÅ b‚ÇÅ) (QLT a‚ÇÇ b‚ÇÇ)
  differC-NUM      : (x : ‚Ñï) ‚Üí differC (NUM x) (NUM x)
  differC-IFLT     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC d‚ÇÅ d‚ÇÇ ‚Üí differC (IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differC-IFEQ     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC d‚ÇÅ d‚ÇÇ ‚Üí differC (IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) (IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)
  differC-SUC      : (a b : Term) ‚Üí differC a b ‚Üí differC (SUC a) (SUC b)
  differC-PI       : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (PI a‚ÇÅ b‚ÇÅ) (PI a‚ÇÇ b‚ÇÇ)
  differC-LAMBDA   : (a b : Term) ‚Üí differC a b ‚Üí differC (LAMBDA a) (LAMBDA b)
  differC-APPLY    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (APPLY a‚ÇÅ b‚ÇÅ) (APPLY a‚ÇÇ b‚ÇÇ)
  differC-FIX      : (a b : Term) ‚Üí differC a b ‚Üí differC (FIX a) (FIX b)
  differC-LET      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (LET a‚ÇÅ b‚ÇÅ) (LET a‚ÇÇ b‚ÇÇ)
  differC-WT       : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (WT a‚ÇÅ b‚ÇÅ c‚ÇÅ) (WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-SUP      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SUP a‚ÇÅ b‚ÇÅ) (SUP a‚ÇÇ b‚ÇÇ)
  differC-WREC     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (WREC a‚ÇÅ b‚ÇÅ) (WREC a‚ÇÇ b‚ÇÇ)
  differC-MT       : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (MT a‚ÇÅ b‚ÇÅ c‚ÇÅ) (MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-SUM      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SUM a‚ÇÅ b‚ÇÅ) (SUM a‚ÇÇ b‚ÇÇ)
  differC-PAIR     : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (PAIR a‚ÇÅ b‚ÇÅ) (PAIR a‚ÇÇ b‚ÇÇ)
  differC-SPREAD   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SPREAD a‚ÇÅ b‚ÇÅ) (SPREAD a‚ÇÇ b‚ÇÇ)
  differC-SET      : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (SET a‚ÇÅ b‚ÇÅ) (SET a‚ÇÇ b‚ÇÇ)
  differC-ISECT    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (ISECT a‚ÇÅ b‚ÇÅ) (ISECT a‚ÇÇ b‚ÇÇ)
  differC-TUNION   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (TUNION a‚ÇÅ b‚ÇÅ) (TUNION a‚ÇÇ b‚ÇÇ)
  differC-UNION    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (UNION a‚ÇÅ b‚ÇÅ) (UNION a‚ÇÇ b‚ÇÇ)
  differC-INL      : (a b : Term) ‚Üí differC a b ‚Üí differC (INL a) (INL b)
  differC-INR      : (a b : Term) ‚Üí differC a b ‚Üí differC (INR a) (INR b)
  differC-DECIDE   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) (DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-EQ       : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC c‚ÇÅ c‚ÇÇ ‚Üí differC (EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  differC-AX       : differC AX AX
  differC-FREE     : differC FREE FREE
  differC-MSEQ     : (s : ùïä) ‚Üí differC (MSEQ s) (MSEQ s)
  differC-MAPP     : (s : ùïä) (a‚ÇÅ a‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC (MAPP s a‚ÇÅ) (MAPP s a‚ÇÇ)
  differC-CS       : (name : Name) ‚Üí differC (CS name) (CS name)
  differC-NAME     : (name : Name) ‚Üí differC (NAME name) (NAME name)
  differC-FRESH    : (a b : Term) ‚Üí differC a b ‚Üí differC (FRESH a) (FRESH b)
  differC-LOAD     : (a b : Term) ‚Üí differC a b ‚Üí differC (LOAD a) (LOAD b)
  differC-CHOOSE   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (CHOOSE a‚ÇÅ b‚ÇÅ) (CHOOSE a‚ÇÇ b‚ÇÇ)
  differC-NOWRITE  : differC NOWRITE NOWRITE
  differC-NOREAD   : differC NOREAD  NOREAD
  differC-SUBSING  : (a b : Term) ‚Üí differC a b ‚Üí differC (SUBSING a) (SUBSING b)
  differC-PURE     : differC PURE PURE
  differC-NOSEQ    : differC NOSEQ NOSEQ
  differC-TERM     : (a b : Term) ‚Üí differC a b ‚Üí differC (TERM a) (TERM b)
  differC-ENC      : (a : Term) ‚Üí differC a a ‚Üí differC (ENC a) (ENC a)
  differC-DUM      : (a b : Term) ‚Üí differC a b ‚Üí differC (DUM a) (DUM b)
  differC-FFDEFS   : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Term) ‚Üí differC a‚ÇÅ a‚ÇÇ ‚Üí differC b‚ÇÅ b‚ÇÇ ‚Üí differC (FFDEFS a‚ÇÅ b‚ÇÅ) (FFDEFS a‚ÇÇ b‚ÇÇ)
  differC-UNIV     : (x : ‚Ñï) ‚Üí differC (UNIV x) (UNIV x)
  differC-LIFT     : (a b : Term) ‚Üí differC a b ‚Üí differC (LIFT a) (LIFT b)
  differC-LOWER    : (a b : Term) ‚Üí differC a b ‚Üí differC (LOWER a) (LOWER b)
  differC-SHRINK   : (a b : Term) ‚Üí differC a b ‚Üí differC (SHRINK a) (SHRINK b)
  -- Cases where we potentially read different values off the world
  differC-writesTF : differC TRUE FALSE
  differC-writesFT : differC FALSE TRUE
--  differC-writesCT : (name : Name) (n : ‚Ñï) ‚Üí differC (APPLY (CS name) (NUM n)) TRUE
--  differC-writesCF : (name : Name) (n : ‚Ñï) ‚Üí differC (APPLY (CS name) (NUM n)) FALSE
--  differC-writesTC : (name : Name) (n : ‚Ñï) ‚Üí differC TRUE (APPLY (CS name) (NUM n))
--  differC-writesFC : (name : Name) (n : ‚Ñï) ‚Üí differC FALSE (APPLY (CS name) (NUM n))
  -- the APPLY could be within LETs
  -- + TRUE ~ APPLY (CS name) (NUM n)
  -- + b ~ let (APPLY (CS name) (NUM n)) in b
  -- and then the b computation could carry on, while the let is stuck


differC-NUM‚Üí : {n : ‚Ñï} {a : Term}
             ‚Üí differC (NUM n) a
             ‚Üí a ‚â° NUM n
differC-NUM‚Üí {n} {.(NUM n)} (differC-NUM .n) = refl


differC-NUM‚Üí·µ£ : {n : ‚Ñï} {a : Term}
              ‚Üí differC a (NUM n)
              ‚Üí a ‚â° NUM n
differC-NUM‚Üí·µ£ {n} {.(NUM n)} (differC-NUM .n) = refl


differC-MSEQ‚Üí : {n : ùïä} {a : Term}
              ‚Üí differC (MSEQ n) a
              ‚Üí a ‚â° MSEQ n
differC-MSEQ‚Üí {n} {.(MSEQ n)} (differC-MSEQ .n) = refl


differC-MSEQ‚Üí·µ£ : {n : ùïä} {a : Term}
               ‚Üí differC a (MSEQ n)
               ‚Üí a ‚â° MSEQ n
differC-MSEQ‚Üí·µ£ {n} {.(MSEQ n)} (differC-MSEQ .n) = refl


differC-CS‚Üí : {n : Name} {a : Term}
            ‚Üí differC (CS n) a
            ‚Üí a ‚â° CS n --‚äé a ‚â° TRUE ‚äé a ‚â° FALSE
differC-CS‚Üí {n} {.(CS n)} (differC-CS .n) = refl --inj‚ÇÅ refl
--differC-CS‚Üí {n} {TRUE} (differC-writesCT .n) = inj‚ÇÇ (inj‚ÇÅ refl)
--differC-CS‚Üí {n} {FALSE} (differC-writesCF .n) = inj‚ÇÇ (inj‚ÇÇ refl)


differC-CS‚Üí·µ£ : {n : Name} {a : Term}
             ‚Üí differC a (CS n)
             ‚Üí a ‚â° CS n --‚äé a ‚â° TRUE ‚äé a ‚â° FALSE
differC-CS‚Üí·µ£ {n} {.(CS n)} (differC-CS .n) = refl --inj‚ÇÅ refl
--differC-CS‚Üí·µ£ {n} {.TRUE} (differC-writesTC .n) = inj‚ÇÇ (inj‚ÇÅ refl)
--differC-CS‚Üí·µ£ {n} {.FALSE} (differC-writesFC .n) = inj‚ÇÇ (inj‚ÇÇ refl)


differC-NAME‚Üí : {n : Name} {a : Term}
              ‚Üí differC (NAME n) a
              ‚Üí a ‚â° NAME n
differC-NAME‚Üí {n} {.(NAME n)} (differC-NAME .n) = refl


differC-NAME‚Üí·µ£ : {n : Name} {a : Term}
              ‚Üí differC a (NAME n)
              ‚Üí a ‚â° NAME n
differC-NAME‚Üí·µ£ {n} {.(NAME n)} (differC-NAME .n) = refl


differC-LAM‚Üí : {t a : Term}
             ‚Üí differC (LAMBDA t) a
             ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó differC t u)
differC-LAM‚Üí {t} {.(LAMBDA b)} (differC-LAMBDA .t b d) = b , refl , d


differC-LAM‚Üí·µ£ : {t a : Term}
             ‚Üí differC a (LAMBDA t)
             ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° LAMBDA u √ó differC u t)
differC-LAM‚Üí·µ£ {t} {.(LAMBDA b)} (differC-LAMBDA b .t d) = b , refl , d


differC-INL‚Üí : {t a : Term}
             ‚Üí differC (INL t) a
             ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INL u √ó differC t u)
differC-INL‚Üí {t} {.(INL b)} (differC-INL .t b d) = b , refl , d


differC-INL‚Üí·µ£ : {t a : Term}
             ‚Üí differC a (INL t)
             ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INL u √ó differC u t)
differC-INL‚Üí·µ£ {t} {.(INL b)} (differC-INL b .t d) = b , refl , d


differC-INR‚Üí : {t a : Term}
             ‚Üí differC (INR t) a
             ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INR u √ó differC t u)
differC-INR‚Üí {t} {.(INR b)} (differC-INR .t b d) = b , refl , d


differC-INR‚Üí·µ£ : {t a : Term}
             ‚Üí differC a (INR t)
             ‚Üí Œ£ Term (Œª u ‚Üí a ‚â° INR u √ó differC u t)
differC-INR‚Üí·µ£ {t} {.(INR b)} (differC-INR b .t d) = b , refl , d


differC-PAIR‚Üí : {t‚ÇÅ t‚ÇÇ a : Term}
              ‚Üí differC (PAIR t‚ÇÅ t‚ÇÇ) a
              ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° PAIR u‚ÇÅ u‚ÇÇ √ó differC t‚ÇÅ u‚ÇÅ √ó differC t‚ÇÇ u‚ÇÇ))
differC-PAIR‚Üí {t‚ÇÅ} {t‚ÇÇ} {.(PAIR b‚ÇÅ b‚ÇÇ)} (differC-PAIR .t‚ÇÅ b‚ÇÅ .t‚ÇÇ b‚ÇÇ d‚ÇÅ d‚ÇÇ) = b‚ÇÅ , b‚ÇÇ , refl , d‚ÇÅ , d‚ÇÇ


differC-PAIR‚Üí·µ£ : {t‚ÇÅ t‚ÇÇ a : Term}
               ‚Üí differC a (PAIR t‚ÇÅ t‚ÇÇ)
               ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° PAIR u‚ÇÅ u‚ÇÇ √ó differC u‚ÇÅ t‚ÇÅ √ó differC u‚ÇÇ t‚ÇÇ))
differC-PAIR‚Üí·µ£ {t‚ÇÅ} {t‚ÇÇ} {.(PAIR b‚ÇÅ b‚ÇÇ)} (differC-PAIR b‚ÇÅ .t‚ÇÅ b‚ÇÇ .t‚ÇÇ d‚ÇÅ d‚ÇÇ) = b‚ÇÅ , b‚ÇÇ , refl , d‚ÇÅ , d‚ÇÇ


differC-SUP‚Üí : {t‚ÇÅ t‚ÇÇ a : Term}
              ‚Üí differC (SUP t‚ÇÅ t‚ÇÇ) a
              ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° SUP u‚ÇÅ u‚ÇÇ √ó differC t‚ÇÅ u‚ÇÅ √ó differC t‚ÇÇ u‚ÇÇ))
differC-SUP‚Üí {t‚ÇÅ} {t‚ÇÇ} {.(SUP b‚ÇÅ b‚ÇÇ)} (differC-SUP .t‚ÇÅ b‚ÇÅ .t‚ÇÇ b‚ÇÇ d‚ÇÅ d‚ÇÇ) = b‚ÇÅ , b‚ÇÇ , refl , d‚ÇÅ , d‚ÇÇ


differC-SUP‚Üí·µ£ : {t‚ÇÅ t‚ÇÇ a : Term}
               ‚Üí differC a (SUP t‚ÇÅ t‚ÇÇ)
               ‚Üí Œ£ Term (Œª u‚ÇÅ ‚Üí Œ£ Term (Œª u‚ÇÇ ‚Üí a ‚â° SUP u‚ÇÅ u‚ÇÇ √ó differC u‚ÇÅ t‚ÇÅ √ó differC u‚ÇÇ t‚ÇÇ))
differC-SUP‚Üí·µ£ {t‚ÇÅ} {t‚ÇÇ} {.(SUP b‚ÇÅ b‚ÇÇ)} (differC-SUP b‚ÇÅ .t‚ÇÅ b‚ÇÇ .t‚ÇÇ d‚ÇÅ d‚ÇÇ) = b‚ÇÅ , b‚ÇÇ , refl , d‚ÇÅ , d‚ÇÇ


‚â°‚àß : {a b c d : Bool}
   ‚Üí a ‚â° b
   ‚Üí c ‚â° d
   ‚Üí a ‚àß c ‚â° b ‚àß d
‚â°‚àß {a} {b} {c} {d} refl refl = refl


‚Üí‚àßtrue : {a b : Bool}
       ‚Üí a ‚â° true
       ‚Üí b ‚â° true
       ‚Üí a ‚àß b ‚â° true
‚Üí‚àßtrue {a} {b} refl refl = refl


{--
¬¨writes-shiftDown : (n : ‚Ñï) (a : Term)
                  ‚Üí ¬¨writes (shiftDown n a) ‚â° ¬¨writes a
¬¨writes-shiftDown n (VAR x) = refl
¬¨writes-shiftDown n QNAT = refl
¬¨writes-shiftDown n (LT a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (QLT a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (NUM x) = refl
¬¨writes-shiftDown n (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) = ‚â°‚àß (¬¨writes-shiftDown n a) (‚â°‚àß (¬¨writes-shiftDown n a‚ÇÅ) (‚â°‚àß (¬¨writes-shiftDown n a‚ÇÇ) (¬¨writes-shiftDown n a‚ÇÉ)))
¬¨writes-shiftDown n (IFEQ a a‚ÇÅ a‚ÇÇ a‚ÇÉ) = ‚â°‚àß (¬¨writes-shiftDown n a) (‚â°‚àß (¬¨writes-shiftDown n a‚ÇÅ) (‚â°‚àß (¬¨writes-shiftDown n a‚ÇÇ) (¬¨writes-shiftDown n a‚ÇÉ)))
¬¨writes-shiftDown n (SUC a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (PI a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc n) a‚ÇÅ)
¬¨writes-shiftDown n (LAMBDA a) = ¬¨writes-shiftDown (suc n) a
¬¨writes-shiftDown n (APPLY a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (FIX a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (LET a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc n) a‚ÇÅ)
¬¨writes-shiftDown n (WT a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftDown n a) (‚â°‚àß (¬¨writes-shiftDown (suc n) a‚ÇÅ) (¬¨writes-shiftDown n a‚ÇÇ))
¬¨writes-shiftDown n (SUP a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (WREC a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc (suc (suc n))) a‚ÇÅ)
¬¨writes-shiftDown n (MT a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftDown n a) (‚â°‚àß (¬¨writes-shiftDown (suc n) a‚ÇÅ) (¬¨writes-shiftDown n a‚ÇÇ))
¬¨writes-shiftDown n (SUM a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc n) a‚ÇÅ)
¬¨writes-shiftDown n (PAIR a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (SPREAD a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc (suc n)) a‚ÇÅ)
¬¨writes-shiftDown n (SET a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc n) a‚ÇÅ)
¬¨writes-shiftDown n (TUNION a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown (suc n) a‚ÇÅ)
¬¨writes-shiftDown n (ISECT a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (UNION a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (INL a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (INR a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (DECIDE a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftDown n a) (‚â°‚àß (¬¨writes-shiftDown (suc n) a‚ÇÅ) (¬¨writes-shiftDown (suc n) a‚ÇÇ))
¬¨writes-shiftDown n (EQ a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftDown n a) (‚â°‚àß (¬¨writes-shiftDown n a‚ÇÅ) (¬¨writes-shiftDown n a‚ÇÇ))
¬¨writes-shiftDown n AX = refl
¬¨writes-shiftDown n FREE = refl
¬¨writes-shiftDown n (CS x) = refl
¬¨writes-shiftDown n (NAME x) = refl
¬¨writes-shiftDown n (FRESH a) = refl
¬¨writes-shiftDown n (CHOOSE a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n (LOAD a) = refl
¬¨writes-shiftDown n (MSEQ x) = refl
¬¨writes-shiftDown n (MAPP x a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n NOWRITE = refl
¬¨writes-shiftDown n NOREAD = refl
¬¨writes-shiftDown n (SUBSING a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (DUM a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (FFDEFS a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftDown n a) (¬¨writes-shiftDown n a‚ÇÅ)
¬¨writes-shiftDown n PURE = refl
¬¨writes-shiftDown n NOSEQ = refl
¬¨writes-shiftDown n (TERM a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (ENC a) = refl
¬¨writes-shiftDown n (UNIV x) = refl
¬¨writes-shiftDown n (LIFT a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (LOWER a) = ¬¨writes-shiftDown n a
¬¨writes-shiftDown n (SHRINK a) = ¬¨writes-shiftDown n a
--}


¬¨writes-shiftUp : (n : ‚Ñï) (a : Term)
                ‚Üí ¬¨writes (shiftUp n a) ‚â° ¬¨writes a
¬¨writes-shiftUp n (VAR x) = refl
¬¨writes-shiftUp n QNAT = refl
¬¨writes-shiftUp n (LT a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (QLT a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (NUM x) = refl
¬¨writes-shiftUp n (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) = ‚â°‚àß (¬¨writes-shiftUp n a) (‚â°‚àß (¬¨writes-shiftUp n a‚ÇÅ) (‚â°‚àß (¬¨writes-shiftUp n a‚ÇÇ) (¬¨writes-shiftUp n a‚ÇÉ)))
¬¨writes-shiftUp n (IFEQ a a‚ÇÅ a‚ÇÇ a‚ÇÉ) = ‚â°‚àß (¬¨writes-shiftUp n a) (‚â°‚àß (¬¨writes-shiftUp n a‚ÇÅ) (‚â°‚àß (¬¨writes-shiftUp n a‚ÇÇ) (¬¨writes-shiftUp n a‚ÇÉ)))
¬¨writes-shiftUp n (SUC a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (PI a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc n) a‚ÇÅ)
¬¨writes-shiftUp n (LAMBDA a) = ¬¨writes-shiftUp (suc n) a
¬¨writes-shiftUp n (APPLY a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (FIX a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (LET a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc n) a‚ÇÅ)
¬¨writes-shiftUp n (WT a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftUp n a) (‚â°‚àß (¬¨writes-shiftUp (suc n) a‚ÇÅ) (¬¨writes-shiftUp n a‚ÇÇ))
¬¨writes-shiftUp n (SUP a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (WREC a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc (suc (suc n))) a‚ÇÅ)
¬¨writes-shiftUp n (MT a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftUp n a) (‚â°‚àß (¬¨writes-shiftUp (suc n) a‚ÇÅ) (¬¨writes-shiftUp n a‚ÇÇ))
¬¨writes-shiftUp n (SUM a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc n) a‚ÇÅ)
¬¨writes-shiftUp n (PAIR a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (SPREAD a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc (suc n)) a‚ÇÅ)
¬¨writes-shiftUp n (SET a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc n) a‚ÇÅ)
¬¨writes-shiftUp n (TUNION a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp (suc n) a‚ÇÅ)
¬¨writes-shiftUp n (ISECT a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (UNION a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (INL a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (INR a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (DECIDE a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftUp n a) (‚â°‚àß (¬¨writes-shiftUp (suc n) a‚ÇÅ) (¬¨writes-shiftUp (suc n) a‚ÇÇ))
¬¨writes-shiftUp n (EQ a a‚ÇÅ a‚ÇÇ) = ‚â°‚àß (¬¨writes-shiftUp n a) (‚â°‚àß (¬¨writes-shiftUp n a‚ÇÅ) (¬¨writes-shiftUp n a‚ÇÇ))
¬¨writes-shiftUp n AX = refl
¬¨writes-shiftUp n FREE = refl
¬¨writes-shiftUp n (CS x) = refl
¬¨writes-shiftUp n (NAME x) = refl
¬¨writes-shiftUp n (FRESH a) = refl
¬¨writes-shiftUp n (LOAD a) = refl
¬¨writes-shiftUp n (CHOOSE a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n (MSEQ x) = refl
¬¨writes-shiftUp n (MAPP x a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n NOWRITE = refl
¬¨writes-shiftUp n NOREAD = refl
¬¨writes-shiftUp n (SUBSING a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (DUM a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (FFDEFS a a‚ÇÅ) = ‚â°‚àß (¬¨writes-shiftUp n a) (¬¨writes-shiftUp n a‚ÇÅ)
¬¨writes-shiftUp n PURE = refl
¬¨writes-shiftUp n NOSEQ = refl
¬¨writes-shiftUp n (TERM a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (ENC a) = refl
¬¨writes-shiftUp n (UNIV x) = refl
¬¨writes-shiftUp n (LIFT a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (LOWER a) = ¬¨writes-shiftUp n a
¬¨writes-shiftUp n (SHRINK a) = ¬¨writes-shiftUp n a


‚Üí‚àß‚â°true : {a b c d : Bool}
        ‚Üí (a ‚â° true ‚Üí c ‚â° true)
        ‚Üí (b ‚â° true ‚Üí d ‚â° true)
        ‚Üí a ‚àß b ‚â° true
        ‚Üí c ‚àß d ‚â° true
‚Üí‚àß‚â°true {true} {.true} {false} {d} h1 h2 refl = h1 refl
‚Üí‚àß‚â°true {true} {.true} {true} {d} h1 h2 refl = h2 refl


‚Üí‚àß‚â°true3 : {a b c d e f : Bool}
         ‚Üí (a ‚â° true ‚Üí d ‚â° true)
         ‚Üí (b ‚â° true ‚Üí e ‚â° true)
         ‚Üí (c ‚â° true ‚Üí f ‚â° true)
         ‚Üí a ‚àß b ‚àß c ‚â° true
         ‚Üí d ‚àß e ‚àß f ‚â° true
‚Üí‚àß‚â°true3 {a} {b} {c} {d} {e} {f} h1 h2 h3 h4 =
  ‚Üí‚àß‚â°true {a} {b ‚àß c} {d} {e ‚àß f} h1 (‚Üí‚àß‚â°true {b} {c} {e} {f} h2 h3) h4


‚Üí‚àß‚â°true4 : {a b c d e f g h : Bool}
         ‚Üí (a ‚â° true ‚Üí e ‚â° true)
         ‚Üí (b ‚â° true ‚Üí f ‚â° true)
         ‚Üí (c ‚â° true ‚Üí g ‚â° true)
         ‚Üí (d ‚â° true ‚Üí h ‚â° true)
         ‚Üí a ‚àß b ‚àß c ‚àß d ‚â° true
         ‚Üí e ‚àß f ‚àß g ‚àß h ‚â° true
‚Üí‚àß‚â°true4 {a} {b} {c} {d} {e} {f} {g} {h} h1 h2 h3 h4 h5 =
  ‚Üí‚àß‚â°true {a} {b ‚àß c ‚àß d} {e} {f ‚àß g ‚àß h} h1 (‚Üí‚àß‚â°true3 {b} {c} {d} {f} {g} {h} h2 h3 h4) h5


{--
¬¨Writes-subv : {v : Var} {a t : Term}
             ‚Üí ¬¨writes a ‚â° true
             ‚Üí ¬¨writes t ‚â° true
             ‚Üí ¬¨writes (subv v a t) ‚â° true
¬¨Writes-subv {v} {a} {VAR x} nwa nwt with x ‚âü v
... | yes q = nwa
... | no q = nwt
¬¨Writes-subv {v} {a} {QNAT} nwa nwt = refl
¬¨Writes-subv {v} {a} {LT t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {QLT t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {NUM x} nwa nwt = refl
¬¨Writes-subv {v} {a} {IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ} nwa nwt = ‚Üí‚àß‚â°true4 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes t‚ÇÉ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} {¬¨writes (subv v a t‚ÇÇ)} {¬¨writes (subv v a t‚ÇÉ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÇ} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÉ} nwa) nwt
¬¨Writes-subv {v} {a} {IFEQ t t‚ÇÅ t‚ÇÇ t‚ÇÉ} nwa nwt = ‚Üí‚àß‚â°true4 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes t‚ÇÉ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} {¬¨writes (subv v a t‚ÇÇ)} {¬¨writes (subv v a t‚ÇÉ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÇ} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÉ} nwa) nwt
¬¨Writes-subv {v} {a} {SUC t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {PI t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subv {v} {a} {LAMBDA t} nwa nwt = ¬¨Writes-subv {suc v} {shiftUp 0 a} {t} (trans (¬¨writes-shiftUp 0 a) nwa) nwt
¬¨Writes-subv {v} {a} {APPLY t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {FIX t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {LET t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subv {v} {a} {WT t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} {¬¨writes (subv v a t‚ÇÇ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) (¬¨Writes-subv {v} {a} {t‚ÇÇ} nwa) nwt
¬¨Writes-subv {v} {a} {SUP t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {WREC t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 a))) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc (suc (suc v))} {shiftUp 0 (shiftUp 0 (shiftUp 0 a))} {t‚ÇÅ} (trans (trans (¬¨writes-shiftUp 0 (shiftUp 0 (shiftUp 0 a))) (trans (¬¨writes-shiftUp 0 (shiftUp 0 a)) (¬¨writes-shiftUp 0 a))) nwa)) nwt
¬¨Writes-subv {v} {a} {MT t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} {¬¨writes (subv v a t‚ÇÇ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) (¬¨Writes-subv {v} {a} {t‚ÇÇ} nwa) nwt
¬¨Writes-subv {v} {a} {SUM t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subv {v} {a} {PAIR t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {SPREAD t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc (suc v)) (shiftUp 0 (shiftUp 0 a)) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc (suc v)} {shiftUp 0 (shiftUp 0 a)} {t‚ÇÅ} (trans (trans (¬¨writes-shiftUp 0 (shiftUp 0 a)) (¬¨writes-shiftUp 0 a)) nwa)) nwt
¬¨Writes-subv {v} {a} {SET t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subv {v} {a} {TUNION t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subv {v} {a} {ISECT t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {UNION t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {INL t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {INR t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {DECIDE t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subv v a t)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÅ)} {¬¨writes (subv (suc v) (shiftUp 0 a) t‚ÇÇ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) (¬¨Writes-subv {suc v} {shiftUp 0 a} {t‚ÇÇ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subv {v} {a} {EQ t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} {¬¨writes (subv v a t‚ÇÇ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÇ} nwa) nwt
¬¨Writes-subv {v} {a} {AX} nwa nwt = refl
¬¨Writes-subv {v} {a} {FREE} nwa nwt = refl
¬¨Writes-subv {v} {a} {CS x} nwa nwt = refl
¬¨Writes-subv {v} {a} {CHOOSE t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {MSEQ x} nwa nwt = refl
¬¨Writes-subv {v} {a} {MAPP x t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {NOWRITE} nwa nwt = refl
¬¨Writes-subv {v} {a} {NOREAD} nwa nwt = refl
¬¨Writes-subv {v} {a} {SUBSING t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {DUM t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {FFDEFS t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subv v a t)} {¬¨writes (subv v a t‚ÇÅ)} (¬¨Writes-subv {v} {a} {t} nwa) (¬¨Writes-subv {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subv {v} {a} {PURE} nwa nwt = refl
¬¨Writes-subv {v} {a} {NOSEQ} nwa nwt = refl
¬¨Writes-subv {v} {a} {TERM t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {ENC t} nwa nwt = nwt
¬¨Writes-subv {v} {a} {UNIV x} nwa nwt = refl
¬¨Writes-subv {v} {a} {LIFT t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {LOWER t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
¬¨Writes-subv {v} {a} {SHRINK t} nwa nwt = ¬¨Writes-subv {v} {a} {t} nwa nwt
--}


¬¨Writes-subn : {v : Var} {a t : Term}
             ‚Üí ¬¨writes a ‚â° true
             ‚Üí ¬¨writes t ‚â° true
             ‚Üí ¬¨writes (subn v a t) ‚â° true
¬¨Writes-subn {v} {a} {VAR x} nwa nwt with x ‚âü v
... | yes q = nwa
... | no q = nwt
¬¨Writes-subn {v} {a} {QNAT} nwa nwt = refl
¬¨Writes-subn {v} {a} {LT t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {QLT t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {NUM x} nwa nwt = refl
¬¨Writes-subn {v} {a} {IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ} nwa nwt = ‚Üí‚àß‚â°true4 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes t‚ÇÉ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} {¬¨writes (subn v a t‚ÇÇ)} {¬¨writes (subn v a t‚ÇÉ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÇ} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÉ} nwa) nwt
¬¨Writes-subn {v} {a} {IFEQ t t‚ÇÅ t‚ÇÇ t‚ÇÉ} nwa nwt = ‚Üí‚àß‚â°true4 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes t‚ÇÉ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} {¬¨writes (subn v a t‚ÇÇ)} {¬¨writes (subn v a t‚ÇÉ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÇ} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÉ} nwa) nwt
¬¨Writes-subn {v} {a} {SUC t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {PI t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subn {v} {a} {LAMBDA t} nwa nwt = ¬¨Writes-subn {suc v} {shiftUp 0 a} {t} (trans (¬¨writes-shiftUp 0 a) nwa) nwt
¬¨Writes-subn {v} {a} {APPLY t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {FIX t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {LET t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subn {v} {a} {WT t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} {¬¨writes (subn v a t‚ÇÇ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) (¬¨Writes-subn {v} {a} {t‚ÇÇ} nwa) nwt
¬¨Writes-subn {v} {a} {SUP t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {WREC t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 a))) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc (suc (suc v))} {shiftUp 0 (shiftUp 0 (shiftUp 0 a))} {t‚ÇÅ} (trans (trans (¬¨writes-shiftUp 0 (shiftUp 0 (shiftUp 0 a))) (trans (¬¨writes-shiftUp 0 (shiftUp 0 a)) (¬¨writes-shiftUp 0 a))) nwa)) nwt
¬¨Writes-subn {v} {a} {MT t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} {¬¨writes (subn v a t‚ÇÇ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) (¬¨Writes-subn {v} {a} {t‚ÇÇ} nwa) nwt
¬¨Writes-subn {v} {a} {SUM t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subn {v} {a} {PAIR t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {SPREAD t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc (suc v)) (shiftUp 0 (shiftUp 0 a)) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc (suc v)} {shiftUp 0 (shiftUp 0 a)} {t‚ÇÅ} (trans (trans (¬¨writes-shiftUp 0 (shiftUp 0 a)) (¬¨writes-shiftUp 0 a)) nwa)) nwt
¬¨Writes-subn {v} {a} {SET t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subn {v} {a} {TUNION t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subn {v} {a} {ISECT t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {UNION t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {INL t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {INR t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {DECIDE t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subn v a t)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÅ)} {¬¨writes (subn (suc v) (shiftUp 0 a) t‚ÇÇ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÅ} (trans (¬¨writes-shiftUp 0 a) nwa)) (¬¨Writes-subn {suc v} {shiftUp 0 a} {t‚ÇÇ} (trans (¬¨writes-shiftUp 0 a) nwa)) nwt
¬¨Writes-subn {v} {a} {EQ t t‚ÇÅ t‚ÇÇ} nwa nwt = ‚Üí‚àß‚â°true3 {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes t‚ÇÇ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} {¬¨writes (subn v a t‚ÇÇ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÇ} nwa) nwt
¬¨Writes-subn {v} {a} {AX} nwa nwt = refl
¬¨Writes-subn {v} {a} {FREE} nwa nwt = refl
¬¨Writes-subn {v} {a} {CS x} nwa nwt = refl
¬¨Writes-subn {v} {a} {CHOOSE t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {MSEQ x} nwa nwt = refl
¬¨Writes-subn {v} {a} {MAPP x t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {NOWRITE} nwa nwt = refl
¬¨Writes-subn {v} {a} {NOREAD} nwa nwt = refl
¬¨Writes-subn {v} {a} {SUBSING t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {DUM t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {FFDEFS t t‚ÇÅ} nwa nwt = ‚Üí‚àß‚â°true {¬¨writes t} {¬¨writes t‚ÇÅ} {¬¨writes (subn v a t)} {¬¨writes (subn v a t‚ÇÅ)} (¬¨Writes-subn {v} {a} {t} nwa) (¬¨Writes-subn {v} {a} {t‚ÇÅ} nwa) nwt
¬¨Writes-subn {v} {a} {PURE} nwa nwt = refl
¬¨Writes-subn {v} {a} {NOSEQ} nwa nwt = refl
¬¨Writes-subn {v} {a} {TERM t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {ENC t} nwa nwt = nwt
¬¨Writes-subn {v} {a} {UNIV x} nwa nwt = refl
¬¨Writes-subn {v} {a} {LIFT t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {LOWER t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt
¬¨Writes-subn {v} {a} {SHRINK t} nwa nwt = ¬¨Writes-subn {v} {a} {t} nwa nwt


¬¨Writes-sub : {a t : Term}
            ‚Üí ¬¨Writes a
            ‚Üí ¬¨Writes t
            ‚Üí ¬¨Writes (sub a t)
¬¨Writes-sub {a} {t} nwa nwt
  rewrite sub‚â°subn a t
  = ¬¨Writes-subn {0} {a} {t} nwa nwt


¬¨Writes-WRECc : {a b : Term}
              ‚Üí ¬¨Writes a
              ‚Üí ¬¨Writes b
              ‚Üí ¬¨Writes (WRECr a b)
¬¨Writes-WRECc {a} {b} nwa nwb
  rewrite ¬¨writes-shiftUp 3 a | ¬¨writes-shiftUp 0 b | nwa | nwb = refl


differC-shiftUp : {n : ‚Ñï} {a b : Term}
                ‚Üí differC a b
                ‚Üí differC (shiftUp n a) (shiftUp n b)
differC-shiftUp {n} {.(VAR x)} {.(VAR x)} (differC-VAR x) = differC-VAR _
differC-shiftUp {n} {.QNAT} {.QNAT} differC-QNAT = differC-QNAT
differC-shiftUp {n} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-LT _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-QLT _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(NUM x)} {.(NUM x)} (differC-NUM x) = differC-NUM _
differC-shiftUp {n} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ d d‚ÇÉ d‚ÇÑ d‚ÇÖ) = differC-IFLT _ _ _ _ _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÉ) (differC-shiftUp d‚ÇÑ) (differC-shiftUp d‚ÇÖ)
differC-shiftUp {n} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ d d‚ÇÉ d‚ÇÑ d‚ÇÖ) = differC-IFEQ _ _ _ _ _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÉ) (differC-shiftUp d‚ÇÑ) (differC-shiftUp d‚ÇÖ)
differC-shiftUp {n} {.(SUC a)} {.(SUC b)} (differC-SUC a b d) = differC-SUC _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-PI _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(LAMBDA a)} {.(LAMBDA b)} (differC-LAMBDA a b d) = differC-LAMBDA _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-APPLY _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(FIX a)} {.(FIX b)} (differC-FIX a b d) = differC-FIX _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-LET _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-WT _ _ _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ) (differC-shiftUp d‚ÇÇ)
differC-shiftUp {n} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SUP _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-WREC _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-MT _ _ _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ) (differC-shiftUp d‚ÇÇ)
differC-shiftUp {n} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SUM _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-PAIR _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SPREAD _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SET _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-ISECT _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-TUNION _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-UNION _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(INL a)} {.(INL b)} (differC-INL a b d) = differC-INL _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(INR a)} {.(INR b)} (differC-INR a b d) = differC-INR _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-DECIDE _ _ _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ) (differC-shiftUp d‚ÇÇ)
differC-shiftUp {n} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-EQ _ _ _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ) (differC-shiftUp d‚ÇÇ)
differC-shiftUp {n} {.AX} {.AX} differC-AX = differC-AX
differC-shiftUp {n} {.FREE} {.FREE} differC-FREE = differC-FREE
differC-shiftUp {n} {.(MSEQ s)} {.(MSEQ s)} (differC-MSEQ s) = differC-MSEQ _
differC-shiftUp {n} {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (differC-MAPP s a‚ÇÅ a‚ÇÇ d) = differC-MAPP _ _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(CS name)} {.(CS name)} (differC-CS name) = differC-CS _
differC-shiftUp {n} {.(NAME name)} {.(NAME name)} (differC-NAME name) = differC-NAME _
differC-shiftUp {n} {.(FRESH a)} {.(FRESH b)} (differC-FRESH a b d) = differC-FRESH _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(LOAD a)} {.(LOAD b)} (differC-LOAD a b d) = differC-LOAD _ _ d
differC-shiftUp {n} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differC-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-CHOOSE _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.NOWRITE} {.NOWRITE} differC-NOWRITE = differC-NOWRITE
differC-shiftUp {n} {.NOREAD} {.NOREAD} differC-NOREAD = differC-NOREAD
differC-shiftUp {n} {.(SUBSING a)} {.(SUBSING b)} (differC-SUBSING a b d) = differC-SUBSING _ _ (differC-shiftUp d)
differC-shiftUp {n} {.PURE} {.PURE} differC-PURE = differC-PURE
differC-shiftUp {n} {.NOSEQ} {.NOSEQ} differC-NOSEQ = differC-NOSEQ
differC-shiftUp {n} {.(TERM a)} {.(TERM b)} (differC-TERM a b d) = differC-TERM _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(ENC a)} {.(ENC a)} (differC-ENC a d) = differC-ENC _ d
differC-shiftUp {n} {.(DUM a)} {.(DUM b)} (differC-DUM a b d) = differC-DUM _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-FFDEFS _ _ _ _ (differC-shiftUp d) (differC-shiftUp d‚ÇÅ)
differC-shiftUp {n} {.(UNIV x)} {.(UNIV x)} (differC-UNIV x) = differC-UNIV _
differC-shiftUp {n} {.(LIFT a)} {.(LIFT b)} (differC-LIFT a b d) = differC-LIFT _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(LOWER a)} {.(LOWER b)} (differC-LOWER a b d) = differC-LOWER _ _ (differC-shiftUp d)
differC-shiftUp {n} {.(SHRINK a)} {.(SHRINK b)} (differC-SHRINK a b d) = differC-SHRINK _ _ (differC-shiftUp d)
differC-shiftUp {n} {.TRUE} {.FALSE} differC-writesTF = differC-writesTF
differC-shiftUp {n} {.FALSE} {.TRUE} differC-writesFT = differC-writesFT
--differC-shiftUp {n} {.(CS name)} {.TRUE} (differC-writesCT name) = differC-writesCT _
--differC-shiftUp {n} {.(CS name)} {.FALSE} (differC-writesCF name) = differC-writesCF _
--differC-shiftUp {n} {.TRUE} {.(CS name)} (differC-writesTC name) = differC-writesTC _
--differC-shiftUp {n} {.FALSE} {.(CS name)} (differC-writesFC name) = differC-writesFC _


differC-shiftNameUp : {n : ‚Ñï} {a b : Term}
                    ‚Üí differC a b
                    ‚Üí differC (shiftNameUp n a) (shiftNameUp n b)
differC-shiftNameUp {n} {.(VAR x)} {.(VAR x)} (differC-VAR x) = differC-VAR _
differC-shiftNameUp {n} {.QNAT} {.QNAT} differC-QNAT = differC-QNAT
differC-shiftNameUp {n} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-LT _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-QLT _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(NUM x)} {.(NUM x)} (differC-NUM x) = differC-NUM _
differC-shiftNameUp {n} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ d d‚ÇÉ d‚ÇÑ d‚ÇÖ) = differC-IFLT _ _ _ _ _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÉ) (differC-shiftNameUp d‚ÇÑ) (differC-shiftNameUp d‚ÇÖ)
differC-shiftNameUp {n} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ d d‚ÇÉ d‚ÇÑ d‚ÇÖ) = differC-IFEQ _ _ _ _ _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÉ) (differC-shiftNameUp d‚ÇÑ) (differC-shiftNameUp d‚ÇÖ)
differC-shiftNameUp {n} {.(SUC a)} {.(SUC b)} (differC-SUC a b d) = differC-SUC _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-PI _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(LAMBDA a)} {.(LAMBDA b)} (differC-LAMBDA a b d) = differC-LAMBDA _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-APPLY _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(FIX a)} {.(FIX b)} (differC-FIX a b d) = differC-FIX _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-LET _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-WT _ _ _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ) (differC-shiftNameUp d‚ÇÇ)
differC-shiftNameUp {n} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SUP _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-WREC _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-MT _ _ _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ) (differC-shiftNameUp d‚ÇÇ)
differC-shiftNameUp {n} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SUM _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-PAIR _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SPREAD _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-SET _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-ISECT _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-TUNION _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-UNION _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(INL a)} {.(INL b)} (differC-INL a b d) = differC-INL _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(INR a)} {.(INR b)} (differC-INR a b d) = differC-INR _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-DECIDE _ _ _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ) (differC-shiftNameUp d‚ÇÇ)
differC-shiftNameUp {n} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d d‚ÇÅ d‚ÇÇ) = differC-EQ _ _ _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ) (differC-shiftNameUp d‚ÇÇ)
differC-shiftNameUp {n} {.AX} {.AX} differC-AX = differC-AX
differC-shiftNameUp {n} {.FREE} {.FREE} differC-FREE = differC-FREE
differC-shiftNameUp {n} {.(MSEQ s)} {.(MSEQ s)} (differC-MSEQ s) = differC-MSEQ _
differC-shiftNameUp {n} {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (differC-MAPP s a‚ÇÅ a‚ÇÇ d) = differC-MAPP _ _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(CS name)} {.(CS name)} (differC-CS name) = differC-CS _
differC-shiftNameUp {n} {.(NAME name)} {.(NAME name)} (differC-NAME name) = differC-NAME _
differC-shiftNameUp {n} {.(FRESH a)} {.(FRESH b)} (differC-FRESH a b d) = differC-FRESH _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(LOAD a)} {.(LOAD b)} (differC-LOAD a b d) = differC-LOAD _ _ d
differC-shiftNameUp {n} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differC-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-CHOOSE _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.NOWRITE} {.NOWRITE} differC-NOWRITE = differC-NOWRITE
differC-shiftNameUp {n} {.NOREAD} {.NOREAD} differC-NOREAD = differC-NOREAD
differC-shiftNameUp {n} {.(SUBSING a)} {.(SUBSING b)} (differC-SUBSING a b d) = differC-SUBSING _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.PURE} {.PURE} differC-PURE = differC-PURE
differC-shiftNameUp {n} {.NOSEQ} {.NOSEQ} differC-NOSEQ = differC-NOSEQ
differC-shiftNameUp {n} {.(TERM a)} {.(TERM b)} (differC-TERM a b d) = differC-TERM _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(ENC a)} {.(ENC a)} (differC-ENC a d) = differC-ENC _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(DUM a)} {.(DUM b)} (differC-DUM a b d) = differC-DUM _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d d‚ÇÅ) = differC-FFDEFS _ _ _ _ (differC-shiftNameUp d) (differC-shiftNameUp d‚ÇÅ)
differC-shiftNameUp {n} {.(UNIV x)} {.(UNIV x)} (differC-UNIV x) = differC-UNIV _
differC-shiftNameUp {n} {.(LIFT a)} {.(LIFT b)} (differC-LIFT a b d) = differC-LIFT _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(LOWER a)} {.(LOWER b)} (differC-LOWER a b d) = differC-LOWER _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.(SHRINK a)} {.(SHRINK b)} (differC-SHRINK a b d) = differC-SHRINK _ _ (differC-shiftNameUp d)
differC-shiftNameUp {n} {.TRUE} {.FALSE} differC-writesTF = differC-writesTF
differC-shiftNameUp {n} {.FALSE} {.TRUE} differC-writesFT = differC-writesFT
--differC-shiftNameUp {n} {.(CS name)} {.TRUE} (differC-writesCT name) = differC-writesCT _
--differC-shiftNameUp {n} {.(CS name)} {.FALSE} (differC-writesCF name) = differC-writesCF _
--differC-shiftNameUp {n} {.TRUE} {.(CS name)} (differC-writesTC name) = differC-writesTC _
--differC-shiftNameUp {n} {.FALSE} {.(CS name)} (differC-writesFC name) = differC-writesFC _


differC-subn : {n : ‚Ñï} {a b c d : Term}
             ‚Üí differC a b
             ‚Üí differC c d
             ‚Üí differC (subn n a c) (subn n b d)
differC-subn {n} {a} {b} {.(VAR x)} {.(VAR x)} d1 (differC-VAR x) with x ‚âü n
... | yes p = d1
... | no p = differC-VAR _
differC-subn {n} {a} {b} {.QNAT} {.QNAT} d1 differC-QNAT = differC-QNAT
differC-subn {n} {a} {b} {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} d1 (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-LT _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} d1 (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-QLT _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(NUM x)} {.(NUM x)} d1 (differC-NUM x) = differC-NUM _
differC-subn {n} {a} {b} {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} d1 (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ d2 d3 d4 d5) = differC-IFLT _ _ _ _ _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3) (differC-subn d1 d4) (differC-subn d1 d5)
differC-subn {n} {a} {b} {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} d1 (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ d2 d3 d4 d5) = differC-IFEQ _ _ _ _ _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3) (differC-subn d1 d4) (differC-subn d1 d5)
differC-subn {n} {a} {b} {.(SUC a‚ÇÅ)} {.(SUC b‚ÇÅ)} d1 (differC-SUC a‚ÇÅ b‚ÇÅ d2) = differC-SUC _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} d1 (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-PI _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3)
differC-subn {n} {a} {b} {.(LAMBDA a‚ÇÅ)} {.(LAMBDA b‚ÇÅ)} d1 (differC-LAMBDA a‚ÇÅ b‚ÇÅ d2) = differC-LAMBDA _ _ (differC-subn (differC-shiftUp d1) d2)
differC-subn {n} {a} {b} {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} d1 (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-APPLY _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(FIX a‚ÇÅ)} {.(FIX b‚ÇÅ)} d1 (differC-FIX a‚ÇÅ b‚ÇÅ d2) = differC-FIX _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} d1 (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-LET _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3)
differC-subn {n} {a} {b} {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} d1 (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d2 d3 d4) = differC-WT _ _ _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3) (differC-subn d1 d4)
differC-subn {n} {a} {b} {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} d1 (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-SUP _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} d1 (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-WREC _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp (differC-shiftUp (differC-shiftUp d1))) d3)
differC-subn {n} {a} {b} {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} d1 (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d2 d3 d4) = differC-MT _ _ _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3) (differC-subn d1 d4)
differC-subn {n} {a} {b} {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} d1 (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-SUM _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3)
differC-subn {n} {a} {b} {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} d1 (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-PAIR _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} d1 (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-SPREAD _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp (differC-shiftUp d1)) d3)
differC-subn {n} {a} {b} {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} d1 (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-SET _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3)
differC-subn {n} {a} {b} {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} d1 (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-ISECT _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} d1 (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-TUNION _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3)
differC-subn {n} {a} {b} {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} d1 (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-UNION _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(INL a‚ÇÅ)} {.(INL b‚ÇÅ)} d1 (differC-INL a‚ÇÅ b‚ÇÅ d2) = differC-INL _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(INR a‚ÇÅ)} {.(INR b‚ÇÅ)} d1 (differC-INR a‚ÇÅ b‚ÇÅ d2) = differC-INR _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} d1 (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d2 d3 d4) = differC-DECIDE _ _ _ _ _ _ (differC-subn d1 d2) (differC-subn (differC-shiftUp d1) d3) (differC-subn (differC-shiftUp d1) d4)
differC-subn {n} {a} {b} {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} d1 (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d2 d3 d4) = differC-EQ _ _ _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3) (differC-subn d1 d4)
differC-subn {n} {a} {b} {.AX} {.AX} d1 differC-AX = differC-AX
differC-subn {n} {a} {b} {.FREE} {.FREE} d1 differC-FREE = differC-FREE
differC-subn {n} {a} {b} {.(MSEQ s)} {.(MSEQ s)} d1 (differC-MSEQ s) = differC-MSEQ s
differC-subn {n} {a} {b} {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} d1 (differC-MAPP s a‚ÇÅ a‚ÇÇ d2) = differC-MAPP _ _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(CS name)} {.(CS name)} d1 (differC-CS name) = differC-CS _
differC-subn {n} {a} {b} {.(NAME name)} {.(NAME name)} d1 (differC-NAME name) = differC-NAME _
differC-subn {n} {a} {b} {.(FRESH a‚ÇÅ)} {.(FRESH b‚ÇÅ)} d1 (differC-FRESH a‚ÇÅ b‚ÇÅ d2) = differC-FRESH _ _ (differC-subn (differC-shiftNameUp d1) d2)
differC-subn {n} {a} {b} {.(LOAD a‚ÇÅ)} {.(LOAD b‚ÇÅ)} d1 (differC-LOAD a‚ÇÅ b‚ÇÅ d2) = differC-LOAD _ _ d2
differC-subn {n} {a} {b} {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} d1 (differC-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-CHOOSE _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.NOWRITE} {.NOWRITE} d1 differC-NOWRITE = differC-NOWRITE
differC-subn {n} {a} {b} {.NOREAD} {.NOREAD} d1 differC-NOREAD = differC-NOREAD
differC-subn {n} {a} {b} {.(SUBSING a‚ÇÅ)} {.(SUBSING b‚ÇÅ)} d1 (differC-SUBSING a‚ÇÅ b‚ÇÅ d2) = differC-SUBSING _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.PURE} {.PURE} d1 differC-PURE = differC-PURE
differC-subn {n} {a} {b} {.NOSEQ} {.NOSEQ} d1 differC-NOSEQ = differC-NOSEQ
differC-subn {n} {a} {b} {.(TERM a‚ÇÅ)} {.(TERM b‚ÇÅ)} d1 (differC-TERM a‚ÇÅ b‚ÇÅ d2) = differC-TERM _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(ENC a‚ÇÅ)} {.(ENC a‚ÇÅ)} d1 (differC-ENC a‚ÇÅ d2) = differC-ENC _ d2
differC-subn {n} {a} {b} {.(DUM a‚ÇÅ)} {.(DUM b‚ÇÅ)} d1 (differC-DUM a‚ÇÅ b‚ÇÅ d2) = differC-DUM _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} d1 (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ d2 d3) = differC-FFDEFS _ _ _ _ (differC-subn d1 d2) (differC-subn d1 d3)
differC-subn {n} {a} {b} {.(UNIV x)} {.(UNIV x)} d1 (differC-UNIV x) = differC-UNIV _
differC-subn {n} {a} {b} {.(LIFT a‚ÇÅ)} {.(LIFT b‚ÇÅ)} d1 (differC-LIFT a‚ÇÅ b‚ÇÅ d2) = differC-LIFT _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(LOWER a‚ÇÅ)} {.(LOWER b‚ÇÅ)} d1 (differC-LOWER a‚ÇÅ b‚ÇÅ d2) = differC-LOWER _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.(SHRINK a‚ÇÅ)} {.(SHRINK b‚ÇÅ)} d1 (differC-SHRINK a‚ÇÅ b‚ÇÅ d2) = differC-SHRINK _ _ (differC-subn d1 d2)
differC-subn {n} {a} {b} {.TRUE} {.FALSE} d1 differC-writesTF = differC-writesTF
differC-subn {n} {a} {b} {.FALSE} {.TRUE} d1 differC-writesFT = differC-writesFT
--differC-subn {n} {a} {b} {.(CS name)} {.TRUE} d1 (differC-writesCT name) = differC-writesCT _
--differC-subn {n} {a} {b} {.(CS name)} {.FALSE} d1 (differC-writesCF name) = differC-writesCF _
--differC-subn {n} {a} {b} {.TRUE} {.(CS name)} d1 (differC-writesTC name) = differC-writesTC _
--differC-subn {n} {a} {b} {.FALSE} {.(CS name)} d1 (differC-writesFC name) = differC-writesFC _


differC-sub : {a b c d : Term}
            ‚Üí differC a b
            ‚Üí differC c d
            ‚Üí differC (sub a c) (sub b d)
differC-sub {a} {b} {c} {d} d1 d2
  rewrite sub‚â°subn a c | sub‚â°subn b d
  = differC-subn {0} {a} {b} {c} {d} d1 d2


if-hasValue-SUC : (a : Term) (w : ùïé¬∑)
                ‚Üí hasValue (SUC a) w
                ‚Üí hasValue a w
if-hasValue-SUC a w (v , w' , (k , comp) , isv) with hasValue-SUC‚Üí a w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-IFLT-NUM : (n : ‚Ñï) (a b c : Term) (w : ùïé¬∑)
                     ‚Üí hasValue (IFLT (NUM n) a b c) w
                     ‚Üí hasValue a w
if-hasValue-IFLT-NUM n a b c w (v , w' , (k , comp) , isv) with hasValue-IFLT-NUM‚Üí n a b c w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-IFLT : (a b c d : Term) (w : ùïé¬∑)
                 ‚Üí hasValue (IFLT a b c d) w
                 ‚Üí hasValue a w
if-hasValue-IFLT a b c d w (v , w' , (k , comp) , isv) with hasValue-IFLT‚Üí a b c d w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-IFEQ-NUM : (n : ‚Ñï) (a b c : Term) (w : ùïé¬∑)
                     ‚Üí hasValue (IFEQ (NUM n) a b c) w
                     ‚Üí hasValue a w
if-hasValue-IFEQ-NUM n a b c w (v , w' , (k , comp) , isv) with hasValue-IFEQ-NUM‚Üí n a b c w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-IFEQ : (a b c d : Term) (w : ùïé¬∑)
                 ‚Üí hasValue (IFEQ a b c d) w
                 ‚Üí hasValue a w
if-hasValue-IFEQ a b c d w (v , w' , (k , comp) , isv) with hasValue-IFEQ‚Üí a b c d w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-APPLY : (a b : Term) (w : ùïé¬∑)
                  ‚Üí hasValue (APPLY a b) w
                  ‚Üí hasValue a w
if-hasValue-APPLY a b w (v , w' , (k , comp) , isv) with hasValue-APPLY‚Üí a b w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-APPLY-CS-NUM : (name : Name) (n : ‚Ñï) (w : ùïé¬∑)
                         ‚Üí hasValue (APPLY (CS name) (NUM n)) w
                         ‚Üí Œ£ ‚ÑÇ¬∑ (Œª c ‚Üí getChoice¬∑ n name w ‚â° just c)
if-hasValue-APPLY-CS-NUM name n w (.(APPLY (CS name) (NUM n)) , .w , (0 , refl) , ())
if-hasValue-APPLY-CS-NUM name n w (v , w' , (suc k , comp) , isv) with getChoice¬∑ n name w
... | just c = c , refl
... | nothing rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv


APPLY-CS‚ÜíhasValue : (k : ‚Ñï) (n : Name) (a v : Term) (w w' : ùïé¬∑)
                     ‚Üí steps k (APPLY (CS n) a , w) ‚â° (v , w')
                     ‚Üí isValue v
                     ‚Üí hasValue‚Ñï k a w
APPLY-CS‚ÜíhasValue 0 n a v w w' comp isv rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
APPLY-CS‚ÜíhasValue (suc k) n a v w w' comp isv with is-NUM a
... | inj‚ÇÅ (m , p) rewrite p = NUM m , w , stepsVal (NUM m) w k tt , tt
... | inj‚ÇÇ p with step‚äé a w
... |   inj‚ÇÅ (a' , w'' , q) rewrite q = APPLY-CS‚ÜíhasValue k n a' v w'' w' comp isv
... |   inj‚ÇÇ q rewrite q | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv


if-hasValue-APPLY-CS : (n : Name) (a : Term) (w : ùïé¬∑)
                     ‚Üí hasValue (APPLY (CS n) a) w
                     ‚Üí hasValue a w
if-hasValue-APPLY-CS n a w (v , w' , (k , comp) , isv) with APPLY-CS‚ÜíhasValue k n a v w w' comp isv
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-FIX : (a : Term) (w : ùïé¬∑)
                ‚Üí hasValue (FIX a) w
                ‚Üí hasValue a w
if-hasValue-FIX a w (v , w' , (k , comp) , isv) with hasValue-FIX‚Üí a w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-MAPP : (s : ùïä) (a : Term) (w : ùïé¬∑)
                 ‚Üí hasValue (MAPP s a) w
                 ‚Üí hasValue a w
if-hasValue-MAPP s a w (v , w' , (k , comp) , isv) with hasValue-MAPP‚Üí s a w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-LET : (a b : Term) (w : ùïé¬∑)
                ‚Üí hasValue (LET a b) w
                ‚Üí hasValue a w
if-hasValue-LET a b w (v , w' , (k , comp) , isv) with hasValue-LET‚Üí a b w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-WREC : (a b : Term) (w : ùïé¬∑)
                 ‚Üí hasValue (WREC a b) w
                 ‚Üí hasValue a w
if-hasValue-WREC a b w (v , w' , (k , comp) , isv) with hasValue-WREC‚Üí a b w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-CHOOSE : (a b : Term) (w : ùïé¬∑)
                   ‚Üí hasValue (CHOOSE a b) w
                   ‚Üí hasValue a w
if-hasValue-CHOOSE a b w (v , w' , (k , comp) , isv) with hasValue-CHOOSE‚Üí a b w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-DECIDE : (a b c : Term) (w : ùïé¬∑)
                   ‚Üí hasValue (DECIDE a b c) w
                   ‚Üí hasValue a w
if-hasValue-DECIDE a b c w (v , w' , (k , comp) , isv) with hasValue-DECIDE‚Üí a b c w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


if-hasValue-SPREAD : (a b : Term) (w : ùïé¬∑)
                   ‚Üí hasValue (SPREAD a b) w
                   ‚Üí hasValue a w
if-hasValue-SPREAD a b w (v , w' , (k , comp) , isv) with hasValue-SPREAD‚Üí a b w {k} (v , w' , comp , isv)
... | v1 , w1 , comp1 , isv1 = v1 , w1 , (k , comp1) , isv1


getChoice‚Ñô : Set(L)
getChoice‚Ñô =
    (n : ‚Ñï) (name : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑)
  ‚Üí getChoice¬∑ n name w ‚â° just c
  ‚Üí ‚ÑÇ‚ÜíT c ‚â° TRUE ‚äé ‚ÑÇ‚ÜíT c ‚â° FALSE


differC-NAT : differC NAT NAT
differC-NAT = differC-ISECT _ _ _ _ differC-QNAT differC-NOREAD


differC-TRUE : differC TRUE TRUE
differC-TRUE =
  differC-EQ
    _ _ _ _ _ _
    (differC-NUM _)
    (differC-NUM _)
    differC-NAT


differC-FALSE : differC FALSE FALSE
differC-FALSE =
  differC-EQ
    _ _ _ _ _ _
    (differC-NUM _)
    (differC-NUM _)
    differC-NAT


differC-BOT : differC BOT BOT
differC-BOT = differC-FIX _ _ (differC-LAMBDA _ _ (differC-VAR _))


differC-NEGD : {a b : Term}
             ‚Üí differC a b
             ‚Üí differC (NEGD a) (NEGD b)
differC-NEGD {a} {b} d = differC-IFEQ _ _ _ _ _ _ _ _ d (differC-NUM _) differC-BOT (differC-NUM _)


differC-ENCr : {a : Term}
             ‚Üí differC a a
             ‚Üí differC (ENCr a) (ENCr a)
differC-ENCr {a} d = differC-NEGD (differC-APPLY _ _ _ _ d (differC-NUM _))


differC-WRECr : {a b c d : Term}
              ‚Üí differC a b
              ‚Üí differC c d
              ‚Üí differC (WRECr a c) (WRECr b d)
differC-WRECr {a} {b} {c} {d} d1 d2 =
  differC-LAMBDA _ _ (differC-WREC _ _ _ _ (differC-APPLY _ _ _ _ (differC-shiftUp d2) (differC-VAR _))
                                           (differC-shiftUp d1))


getChoice‚Ñô‚ÜídifferC : (gcp : getChoice‚Ñô) {n1 n2 : ‚Ñï} {name1 name2 : Name} {w1 w2 : ùïé¬∑} {c1 c2 : ‚ÑÇ¬∑}
                   ‚Üí getChoice¬∑ n1 name1 w1 ‚â° just c1
                   ‚Üí getChoice¬∑ n2 name2 w2 ‚â° just c2
                   ‚Üí differC (‚ÑÇ‚ÜíT c1) (‚ÑÇ‚ÜíT c2)
getChoice‚Ñô‚ÜídifferC gcp {n1} {n2} {name1} {name2} {w1} {w2} {c1} {c2} g1 g2
  with gcp n1 name1 w1 c1 g1 | gcp n2 name2 w2 c2 g2
... | inj‚ÇÅ x | inj‚ÇÅ y rewrite x | y = differC-TRUE
... | inj‚ÇÅ x | inj‚ÇÇ y rewrite x | y = differC-writesTF
... | inj‚ÇÇ x | inj‚ÇÅ y rewrite x | y = differC-writesFT
... | inj‚ÇÇ x | inj‚ÇÇ y rewrite x | y = differC-FALSE


getChoice‚Ñô‚Üí¬¨Writes‚ÑÇ : (gcp : getChoice‚Ñô) {n : ‚Ñï} {name : Name} {w : ùïé¬∑} {c : ‚ÑÇ¬∑}
                    ‚Üí getChoice¬∑ n name w ‚â° just c
                    ‚Üí ¬¨Writes (‚ÑÇ‚ÜíT c)
getChoice‚Ñô‚Üí¬¨Writes‚ÑÇ gcp {n} {name} {w} {c} gc
  with gcp n name w c gc
... | inj‚ÇÅ x rewrite x = refl
... | inj‚ÇÇ x rewrite x = refl


differC-pres-isValue : {a b : Term}
                     ‚Üí differC a b
                     ‚Üí isValue a
                     ‚Üí isValue b
differC-pres-isValue {.QNAT} {.QNAT} differC-QNAT isv = tt
differC-pres-isValue {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(NUM x)} {.(NUM x)} (differC-NUM x) isv = tt
differC-pres-isValue {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(LAMBDA a)} {.(LAMBDA b)} (differC-LAMBDA a b diff) isv = tt
differC-pres-isValue {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) isv = tt
differC-pres-isValue {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) isv = tt
differC-pres-isValue {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(INL a)} {.(INL b)} (differC-INL a b diff) isv = tt
differC-pres-isValue {.(INR a)} {.(INR b)} (differC-INR a b diff) isv = tt
differC-pres-isValue {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) isv = tt
differC-pres-isValue {.AX} {.AX} differC-AX isv = tt
differC-pres-isValue {.FREE} {.FREE} differC-FREE isv = tt
differC-pres-isValue {.(MSEQ s)} {.(MSEQ s)} (differC-MSEQ s) isv = tt
differC-pres-isValue {.(CS name)} {.(CS name)} (differC-CS name) isv = tt
differC-pres-isValue {.(NAME name)} {.(NAME name)} (differC-NAME name) isv = tt
differC-pres-isValue {.NOWRITE} {.NOWRITE} differC-NOWRITE isv = tt
differC-pres-isValue {.NOREAD} {.NOREAD} differC-NOREAD isv = tt
differC-pres-isValue {.(SUBSING a)} {.(SUBSING b)} (differC-SUBSING a b diff) isv = tt
differC-pres-isValue {.PURE} {.PURE} differC-PURE isv = tt
differC-pres-isValue {.NOSEQ} {.NOSEQ} differC-NOSEQ isv = tt
differC-pres-isValue {.(TERM a)} {.(TERM b)} (differC-TERM a b diff) isv = tt
differC-pres-isValue {.(DUM a)} {.(DUM b)} (differC-DUM a b diff) isv = tt
differC-pres-isValue {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) isv = tt
differC-pres-isValue {.(UNIV x)} {.(UNIV x)} (differC-UNIV x) isv = tt
differC-pres-isValue {.(LIFT a)} {.(LIFT b)} (differC-LIFT a b diff) isv = tt
differC-pres-isValue {.(LOWER a)} {.(LOWER b)} (differC-LOWER a b diff) isv = tt
differC-pres-isValue {.(SHRINK a)} {.(SHRINK b)} (differC-SHRINK a b diff) isv = tt
differC-pres-isValue {.TRUE} {.FALSE} differC-writesTF isv = tt
differC-pres-isValue {.FALSE} {.TRUE} differC-writesFT isv = tt


differC-sym : {a b : Term}
            ‚Üí differC a b
            ‚Üí differC b a
differC-sym {.(VAR x)} {.(VAR x)} (differC-VAR x) = differC-VAR x
differC-sym {.QNAT} {.QNAT} differC-QNAT = differC-QNAT
differC-sym {.(LT a‚ÇÅ b‚ÇÅ)} {.(LT a‚ÇÇ b‚ÇÇ)} (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-LT a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(QLT a‚ÇÅ b‚ÇÅ)} {.(QLT a‚ÇÇ b‚ÇÇ)} (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-QLT a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(NUM x)} {.(NUM x)} (differC-NUM x) = differC-NUM x
differC-sym {.(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differC-IFLT a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ c‚ÇÇ c‚ÇÅ d‚ÇÇ d‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ) (differC-sym diff‚ÇÇ) (differC-sym diff‚ÇÉ)
differC-sym {.(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ)} {.(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ)} (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) = differC-IFEQ a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ c‚ÇÇ c‚ÇÅ d‚ÇÇ d‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ) (differC-sym diff‚ÇÇ) (differC-sym diff‚ÇÉ)
differC-sym {.(SUC a)} {.(SUC b)} (differC-SUC a b diff) = differC-SUC b a (differC-sym diff)
differC-sym {.(PI a‚ÇÅ b‚ÇÅ)} {.(PI a‚ÇÇ b‚ÇÇ)} (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-PI a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(LAMBDA a)} {.(LAMBDA b)} (differC-LAMBDA a b diff) = differC-LAMBDA b a (differC-sym diff)
differC-sym {.(APPLY a‚ÇÅ b‚ÇÅ)} {.(APPLY a‚ÇÇ b‚ÇÇ)} (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-APPLY a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(FIX a)} {.(FIX b)} (differC-FIX a b diff) = differC-FIX b a (differC-sym diff)
differC-sym {.(LET a‚ÇÅ b‚ÇÅ)} {.(LET a‚ÇÇ b‚ÇÇ)} (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-LET a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differC-WT a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ c‚ÇÇ c‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ) (differC-sym diff‚ÇÇ)
differC-sym {.(SUP a‚ÇÅ b‚ÇÅ)} {.(SUP a‚ÇÇ b‚ÇÇ)} (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-SUP a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(WREC a‚ÇÅ b‚ÇÅ)} {.(WREC a‚ÇÇ b‚ÇÇ)} (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-WREC a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differC-MT a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ c‚ÇÇ c‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ) (differC-sym diff‚ÇÇ)
differC-sym {.(SUM a‚ÇÅ b‚ÇÅ)} {.(SUM a‚ÇÇ b‚ÇÇ)} (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-SUM a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(PAIR a‚ÇÅ b‚ÇÅ)} {.(PAIR a‚ÇÇ b‚ÇÇ)} (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-PAIR a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(SPREAD a‚ÇÅ b‚ÇÅ)} {.(SPREAD a‚ÇÇ b‚ÇÇ)} (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-SPREAD a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(SET a‚ÇÅ b‚ÇÅ)} {.(SET a‚ÇÇ b‚ÇÇ)} (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-SET a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(ISECT a‚ÇÅ b‚ÇÅ)} {.(ISECT a‚ÇÇ b‚ÇÇ)} (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-ISECT a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(TUNION a‚ÇÅ b‚ÇÅ)} {.(TUNION a‚ÇÇ b‚ÇÇ)} (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-TUNION a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(UNION a‚ÇÅ b‚ÇÅ)} {.(UNION a‚ÇÇ b‚ÇÇ)} (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-UNION a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(INL a)} {.(INL b)} (differC-INL a b diff) = differC-INL b a (differC-sym diff)
differC-sym {.(INR a)} {.(INR b)} (differC-INR a b diff) = differC-INR b a (differC-sym diff)
differC-sym {.(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differC-DECIDE a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ c‚ÇÇ c‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ) (differC-sym diff‚ÇÇ)
differC-sym {.(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ)} {.(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ)} (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ diff diff‚ÇÅ diff‚ÇÇ) = differC-EQ a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ c‚ÇÇ c‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ) (differC-sym diff‚ÇÇ)
differC-sym {.AX} {.AX} differC-AX = differC-AX
differC-sym {.FREE} {.FREE} differC-FREE = differC-FREE
differC-sym {.(MSEQ s)} {.(MSEQ s)} (differC-MSEQ s) = differC-MSEQ s
differC-sym {.(MAPP s a‚ÇÅ)} {.(MAPP s a‚ÇÇ)} (differC-MAPP s a‚ÇÅ a‚ÇÇ diff) = differC-MAPP s a‚ÇÇ a‚ÇÅ (differC-sym diff)
differC-sym {.(CS name)} {.(CS name)} (differC-CS name) = differC-CS name
differC-sym {.(NAME name)} {.(NAME name)} (differC-NAME name) = differC-NAME name
differC-sym {.(FRESH a)} {.(FRESH b)} (differC-FRESH a b diff) = differC-FRESH b a (differC-sym diff)
differC-sym {.(LOAD a)} {.(LOAD b)} (differC-LOAD a b diff) = differC-LOAD b a (differC-sym diff)
differC-sym {.(CHOOSE a‚ÇÅ b‚ÇÅ)} {.(CHOOSE a‚ÇÇ b‚ÇÇ)} (differC-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-CHOOSE a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.NOWRITE} {.NOWRITE} differC-NOWRITE = differC-NOWRITE
differC-sym {.NOREAD} {.NOREAD} differC-NOREAD = differC-NOREAD
differC-sym {.(SUBSING a)} {.(SUBSING b)} (differC-SUBSING a b diff) = differC-SUBSING b a (differC-sym diff)
differC-sym {.PURE} {.PURE} differC-PURE = differC-PURE
differC-sym {.NOSEQ} {.NOSEQ} differC-NOSEQ = differC-NOSEQ
differC-sym {.(TERM a)} {.(TERM b)} (differC-TERM a b diff) = differC-TERM b a (differC-sym diff)
differC-sym {.(ENC a)} {.(ENC a)} (differC-ENC a diff) = differC-ENC a diff
differC-sym {.(DUM a)} {.(DUM b)} (differC-DUM a b diff) = differC-DUM b a (differC-sym diff)
differC-sym {.(FFDEFS a‚ÇÅ b‚ÇÅ)} {.(FFDEFS a‚ÇÇ b‚ÇÇ)} (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ diff diff‚ÇÅ) = differC-FFDEFS a‚ÇÇ a‚ÇÅ b‚ÇÇ b‚ÇÅ (differC-sym diff) (differC-sym diff‚ÇÅ)
differC-sym {.(UNIV x)} {.(UNIV x)} (differC-UNIV x) = differC-UNIV x
differC-sym {.(LIFT a)} {.(LIFT b)} (differC-LIFT a b diff) = differC-LIFT b a (differC-sym diff)
differC-sym {.(LOWER a)} {.(LOWER b)} (differC-LOWER a b diff) = differC-LOWER b a (differC-sym diff)
differC-sym {.(SHRINK a)} {.(SHRINK b)} (differC-SHRINK a b diff) = differC-SHRINK b a (differC-sym diff)
differC-sym {.TRUE} {.FALSE} differC-writesTF = differC-writesFT
differC-sym {.FALSE} {.TRUE} differC-writesFT = differC-writesTF


-- We need to add something like Choice‚Ñô from mp_prop to enforce that the choices are either TRUE or FALSE
abstract
  ¬¨Writes‚Üístep : (gcp : getChoice‚Ñô) (w1 w2 w3 : ùïé¬∑) (a b u : Term)
               ‚Üí ¬¨Writes a
               ‚Üí hasValue b w3
               ‚Üí differC a b
               ‚Üí step a w1 ‚â° just (u , w2)
               ‚Üí Œ£ ùïé¬∑ (Œª w4 ‚Üí Œ£ Term (Œª v ‚Üí step b w3 ‚â° just (v , w4) √ó ¬¨Writes u √ó differC u v))
  ¬¨Writes‚Üístep gcp w1 w2 w3 .QNAT .QNAT u nowrites hv differC-QNAT comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , QNAT , refl , nowrites , differC-QNAT
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LT a‚ÇÅ b‚ÇÅ) .(LT a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , LT a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-LT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(QLT a‚ÇÅ b‚ÇÅ) .(QLT a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , QLT a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-QLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(NUM x) .(NUM x) u nowrites hv (differC-NUM x) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NUM x , refl , nowrites , differC-NUM x
  -- IFLT
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites hv (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ | differC-NUM‚Üí dc with is-NUM b‚ÇÅ
  ... |   inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | differC-NUM‚Üí dc‚ÇÅ with n‚ÇÅ <? n‚ÇÇ
  ... |     yes p‚ÇÉ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , c‚ÇÇ , refl , ‚àß‚â°true‚Üí‚Çó (¬¨writes c‚ÇÅ) (¬¨writes d‚ÇÅ) nowrites , dc‚ÇÇ
  ... |     no q‚ÇÉ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , d‚ÇÇ , refl , ‚àß‚â°true‚Üí·µ£ (¬¨writes c‚ÇÅ) (¬¨writes d‚ÇÅ) nowrites , dc‚ÇÉ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites hv (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) | inj‚ÇÇ q‚ÇÇ
    rewrite p‚ÇÅ | differC-NUM‚Üí dc with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÇ z‚ÇÅ rewrite z‚ÇÅ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z‚ÇÅ)
    rewrite z‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with is-NUM b‚ÇÇ
  ... |         inj‚ÇÅ (m , p‚ÇÑ) rewrite p‚ÇÑ | differC-NUM‚Üí·µ£ dc‚ÇÅ = ‚ä•-elim (q‚ÇÇ m refl)
  ... |         inj‚ÇÇ q‚ÇÑ
    with ¬¨Writes‚Üístep gcp w1 w1' w3 b‚ÇÅ b‚ÇÇ b‚ÇÅ' (‚àß‚â°true‚Üí1-3 {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} nowrites) (if-hasValue-IFLT-NUM _ _ _ _ _ hv) dc‚ÇÅ z‚ÇÅ
  ... | w4 , v' , comp' , nowrites' , diff' rewrite comp'
    = w4 , IFLT (NUM n‚ÇÅ) v' c‚ÇÇ d‚ÇÇ , refl ,
      ‚àß‚â°true‚Üí1r-3 {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} {¬¨writes b‚ÇÅ'} nowrites nowrites' ,
      differC-IFLT (NUM n‚ÇÅ) (NUM n‚ÇÅ) b‚ÇÅ' v' c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ (differC-NUM _) diff' dc‚ÇÇ dc‚ÇÉ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFLT a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites hv (differC-IFLT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp | inj‚ÇÇ q‚ÇÅ with is-NUM a‚ÇÇ
  ... | inj‚ÇÅ (m‚ÇÇ , q‚ÇÇ) rewrite q‚ÇÇ | differC-NUM‚Üí·µ£ dc = ‚ä•-elim (q‚ÇÅ m‚ÇÇ refl)
  ... | inj‚ÇÇ q‚ÇÇ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÅ rewrite z‚ÇÅ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÅ)
    rewrite z‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí1-4 {¬¨writes a‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} nowrites) (if-hasValue-IFLT _ _ _ _ _ hv) dc z‚ÇÅ
  ... | w4 , v' , comp' , nowrites' , diff' rewrite comp'
    = w4 , IFLT v' b‚ÇÇ c‚ÇÇ d‚ÇÇ , refl ,
      ‚àß‚â°true‚Üí1r-4 {¬¨writes a‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} {¬¨writes a‚ÇÅ'} nowrites nowrites' ,
      differC-IFLT a‚ÇÅ' v' b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff' dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ
  -- IFEQ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites hv (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ | differC-NUM‚Üí dc with is-NUM b‚ÇÅ
  ... |   inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | differC-NUM‚Üí dc‚ÇÅ with n‚ÇÅ ‚âü n‚ÇÇ
  ... |     yes p‚ÇÉ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , c‚ÇÇ , refl , ‚àß‚â°true‚Üí‚Çó (¬¨writes c‚ÇÅ) (¬¨writes d‚ÇÅ) nowrites , dc‚ÇÇ
  ... |     no q‚ÇÉ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , d‚ÇÇ , refl , ‚àß‚â°true‚Üí·µ£ (¬¨writes c‚ÇÅ) (¬¨writes d‚ÇÅ) nowrites , dc‚ÇÉ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites hv (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) | inj‚ÇÇ q‚ÇÇ
    rewrite p‚ÇÅ | differC-NUM‚Üí dc with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÇ z‚ÇÅ rewrite z‚ÇÅ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1' , z‚ÇÅ)
    rewrite z‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with is-NUM b‚ÇÇ
  ... |         inj‚ÇÅ (m , p‚ÇÑ) rewrite p‚ÇÑ | differC-NUM‚Üí·µ£ dc‚ÇÅ = ‚ä•-elim (q‚ÇÇ m refl)
  ... |         inj‚ÇÇ q‚ÇÑ
    with ¬¨Writes‚Üístep gcp w1 w1' w3 b‚ÇÅ b‚ÇÇ b‚ÇÅ' (‚àß‚â°true‚Üí1-3 {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} nowrites) (if-hasValue-IFEQ-NUM _ _ _ _ _ hv) dc‚ÇÅ z‚ÇÅ
  ... | w4 , v' , comp' , nowrites' , diff' rewrite comp'
    = w4 , IFEQ (NUM n‚ÇÅ) v' c‚ÇÇ d‚ÇÇ , refl ,
      ‚àß‚â°true‚Üí1r-3 {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} {¬¨writes b‚ÇÅ'} nowrites nowrites' ,
      differC-IFEQ (NUM n‚ÇÅ) (NUM n‚ÇÅ) b‚ÇÅ' v' c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ (differC-NUM _) diff' dc‚ÇÇ dc‚ÇÉ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) .(IFEQ a‚ÇÇ b‚ÇÇ c‚ÇÇ d‚ÇÇ) u nowrites hv (differC-IFEQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ) comp | inj‚ÇÇ q‚ÇÅ with is-NUM a‚ÇÇ
  ... | inj‚ÇÅ (m‚ÇÇ , q‚ÇÇ) rewrite q‚ÇÇ | differC-NUM‚Üí·µ£ dc = ‚ä•-elim (q‚ÇÅ m‚ÇÇ refl)
  ... | inj‚ÇÇ q‚ÇÇ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÅ rewrite z‚ÇÅ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÅ)
    rewrite z‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí1-4 {¬¨writes a‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} nowrites) (if-hasValue-IFEQ _ _ _ _ _ hv) dc z‚ÇÅ
  ... | w4 , v' , comp' , nowrites' , diff' rewrite comp'
    = w4 , IFEQ v' b‚ÇÇ c‚ÇÇ d‚ÇÇ , refl ,
      ‚àß‚â°true‚Üí1r-4 {¬¨writes a‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} {¬¨writes d‚ÇÅ} {¬¨writes a‚ÇÅ'} nowrites nowrites' ,
      differC-IFEQ a‚ÇÅ' v' b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ diff' dc‚ÇÅ dc‚ÇÇ dc‚ÇÉ
  -- SUC
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SUC a) .(SUC b) u nowrites hv (differC-SUC a b dc) comp with is-NUM a
  ... | inj‚ÇÅ (m‚ÇÅ , p‚ÇÅ)
    rewrite p‚ÇÅ | differC-NUM‚Üí dc | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NUM (suc m‚ÇÅ) , refl , nowrites , (differC-NUM _)
  ... | inj‚ÇÇ q‚ÇÅ with step‚äé a w1
  ... |   inj‚ÇÇ z‚ÇÅ rewrite z‚ÇÅ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a' , w1' , z‚ÇÅ) with is-NUM b
  ... |     inj‚ÇÅ (m‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | differC-NUM‚Üí·µ£ dc = ‚ä•-elim (q‚ÇÅ m‚ÇÇ refl)
  ... |     inj‚ÇÇ q‚ÇÇ
    rewrite z‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a b a' nowrites (if-hasValue-SUC _ _ hv) dc z‚ÇÅ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , SUC v' , refl , nowrites' , differC-SUC _ _ diff'
  -- PI
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(PI a‚ÇÅ b‚ÇÅ) .(PI a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , PI a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-PI a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- LAMBDA
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LAMBDA a) .(LAMBDA b) u nowrites hv (differC-LAMBDA a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , LAMBDA b , refl , nowrites , differC-LAMBDA a b dc
  -- APPLY
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ with differC-LAM‚Üí dc
  ... |   u‚ÇÅ , e‚ÇÅ , d‚ÇÅ
    rewrite e‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , sub b‚ÇÇ u‚ÇÅ , refl ,
      ¬¨Writes-sub {b‚ÇÅ} {t‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) ,
      differC-sub dc‚ÇÅ d‚ÇÅ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp | inj‚ÇÇ q‚ÇÅ with is-LAM a‚ÇÇ
  ... | inj‚ÇÅ (t‚ÇÇ , z‚ÇÇ) rewrite z‚ÇÇ | fst (snd (differC-LAM‚Üí·µ£ dc)) = ‚ä•-elim (q‚ÇÅ _ refl)
  ... | inj‚ÇÇ z‚ÇÇ with is-CS a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | differC-CS‚Üí dc with is-NUM b‚ÇÅ
  ... |   inj‚ÇÅ (n‚ÇÉ , p‚ÇÉ) rewrite p‚ÇÉ | differC-NUM‚Üí dc‚ÇÅ with getChoice‚äé n‚ÇÉ n‚ÇÇ w1
  ... |     inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |     inj‚ÇÅ (c , z‚ÇÉ) rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) with if-hasValue-APPLY-CS-NUM n‚ÇÇ n‚ÇÉ w3 hv
  ... |       c' , gc'
    rewrite gc'
    = w3 , ‚ÑÇ‚ÜíT c' , refl , getChoice‚Ñô‚Üí¬¨Writes‚ÑÇ gcp z‚ÇÉ , getChoice‚Ñô‚ÜídifferC gcp z‚ÇÉ gc'
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp | inj‚ÇÇ q‚ÇÅ | inj‚ÇÇ z‚ÇÇ | inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) | inj‚ÇÇ q‚ÇÉ
    with is-NUM b‚ÇÇ
  ... | inj‚ÇÅ (n‚ÇÑ , p‚ÇÑ) rewrite p‚ÇÑ | differC-NUM‚Üí·µ£ dc‚ÇÅ = ‚ä•-elim (q‚ÇÉ _ refl)
  ... | inj‚ÇÇ p‚ÇÑ with step‚äé b‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÑ rewrite z‚ÇÑ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (b‚ÇÅ' , w1' , z‚ÇÑ)
    rewrite z‚ÇÑ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 b‚ÇÅ b‚ÇÇ b‚ÇÅ' nowrites (if-hasValue-APPLY-CS _ _ _ hv) dc‚ÇÅ z‚ÇÑ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , APPLY (CS n‚ÇÇ) v' , refl , nowrites' , differC-APPLY _ _ _ _ (differC-CS _) diff'
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(APPLY a‚ÇÅ b‚ÇÅ) .(APPLY a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-APPLY a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp | inj‚ÇÇ q‚ÇÅ | inj‚ÇÇ z‚ÇÇ | inj‚ÇÇ q‚ÇÇ
    with is-CS a‚ÇÇ
  ... | inj‚ÇÅ (n‚ÇÖ , p‚ÇÖ) rewrite p‚ÇÖ | differC-CS‚Üí·µ£ dc = ‚ä•-elim (q‚ÇÇ _ refl)
  ... | inj‚ÇÇ p‚ÇÖ with is-MSEQ a‚ÇÅ
  ... |   inj‚ÇÅ (s‚ÇÜ , p‚ÇÜ)
    rewrite p‚ÇÜ | differC-MSEQ‚Üí dc | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , MAPP s‚ÇÜ b‚ÇÇ , refl , nowrites , differC-MAPP _ _ _ dc‚ÇÅ
  ... |   inj‚ÇÇ p‚ÇÜ with is-MSEQ a‚ÇÇ
  ... |     inj‚ÇÅ (s‚Çá , p‚Çá) rewrite p‚Çá | differC-MSEQ‚Üí·µ£ dc = ‚ä•-elim (p‚ÇÜ _ refl)
  ... |     inj‚ÇÇ p‚Çá with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚Çà rewrite z‚Çà = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚Çà)
    rewrite z‚Çà | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí‚Çó (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (if-hasValue-APPLY _ _ _ hv) dc z‚Çà
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , APPLY v' b‚ÇÇ , refl ,
      ‚Üí‚àß‚â°true {¬¨writes a‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes a‚ÇÅ'} {¬¨writes b‚ÇÅ} (Œª x ‚Üí nowrites') (Œª x ‚Üí x) nowrites ,
      differC-APPLY _ _ _ _ diff' dc‚ÇÅ
  -- FIX
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(FIX a) .(FIX b) u nowrites hv (differC-FIX a b dc) comp
    with is-LAM a
  ... | inj‚ÇÅ (t‚ÇÅ , p‚ÇÅ)
    rewrite p‚ÇÅ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with differC-LAM‚Üí dc
  ... | t‚ÇÇ , e‚ÇÇ , d‚ÇÇ
    rewrite e‚ÇÇ
    = w3 , sub (FIX (LAMBDA t‚ÇÇ)) t‚ÇÇ , refl ,
      ¬¨Writes-sub {FIX (LAMBDA t‚ÇÅ)} {t‚ÇÅ} nowrites nowrites ,
      differC-sub {FIX (LAMBDA t‚ÇÅ)} {FIX (LAMBDA t‚ÇÇ)} {t‚ÇÅ} {t‚ÇÇ} (differC-FIX _ _ dc) d‚ÇÇ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(FIX a) .(FIX b) u nowrites hv (differC-FIX a b dc) comp | inj‚ÇÇ p‚ÇÅ with is-LAM b
  ... | inj‚ÇÅ (t‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | fst (snd (differC-LAM‚Üí·µ£ dc)) = ‚ä•-elim (p‚ÇÅ _ refl)
  ... | inj‚ÇÇ p‚ÇÇ with step‚äé a w1
  ... |   inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a b a' nowrites (if-hasValue-FIX _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , FIX v' , refl , nowrites' , differC-FIX _ _ diff'
  -- LET
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LET a‚ÇÅ b‚ÇÅ) .(LET a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    with isValue‚äé a‚ÇÅ
  ... | inj‚ÇÅ x‚ÇÅ with isValue‚äé a‚ÇÇ
  ... |   inj‚ÇÅ x‚ÇÇ
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , sub a‚ÇÇ b‚ÇÇ , refl ,
      ¬¨Writes-sub {a‚ÇÅ} {b‚ÇÅ} (‚àß‚â°true‚Üí‚Çó (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (‚àß‚â°true‚Üí·µ£ (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) ,
      differC-sub {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} dc dc‚ÇÅ
  ... |   inj‚ÇÇ x‚ÇÇ = ‚ä•-elim (x‚ÇÇ (differC-pres-isValue dc x‚ÇÅ))
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LET a‚ÇÅ b‚ÇÅ) .(LET a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-LET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp | inj‚ÇÇ x‚ÇÅ
    with isValue‚äé a‚ÇÇ
  ... | inj‚ÇÅ x‚ÇÉ = ‚ä•-elim (x‚ÇÅ (differC-pres-isValue (differC-sym dc) x‚ÇÉ))
  ... | inj‚ÇÇ x‚ÇÉ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí‚Çó (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (if-hasValue-LET _ _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , LET v' b‚ÇÇ , refl ,
      ‚Üí‚àßtrue {¬¨writes a‚ÇÅ'} {¬¨writes b‚ÇÅ} nowrites' (‚àß‚â°true‚Üí·µ£ (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) ,
      differC-LET _ _ _ _ diff' dc‚ÇÅ
  -- WT
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(WT a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites hv (differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , WT a‚ÇÇ b‚ÇÇ c‚ÇÇ , refl , nowrites , differC-WT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ
  -- SUP
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SUP a‚ÇÅ b‚ÇÅ) .(SUP a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , SUP a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-SUP a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- WREC
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(WREC a‚ÇÅ b‚ÇÅ) .(WREC a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (t‚ÇÅ , u‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ with differC-SUP‚Üí dc
  ... | t' , u' , e' , d1' , d2'
    rewrite e' | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , sub (WRECr b‚ÇÇ  u') (sub u' (sub t' b‚ÇÇ)) , refl ,
      ¬¨Writes-sub
        {WRECr b‚ÇÅ u‚ÇÅ} {sub u‚ÇÅ (sub t‚ÇÅ b‚ÇÅ)}
        (¬¨Writes-WRECc {b‚ÇÅ} {u‚ÇÅ}
          (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites)
          (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ) (¬¨writes u‚ÇÅ) (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites)))
        (¬¨Writes-sub {u‚ÇÅ} {sub t‚ÇÅ b‚ÇÅ}
          (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ) (¬¨writes u‚ÇÅ) (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites))
          (¬¨Writes-sub {t‚ÇÅ} {b‚ÇÅ}
            (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ) (¬¨writes u‚ÇÅ) (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites))
            (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites))) ,
      differC-sub
        {WRECr b‚ÇÅ u‚ÇÅ} {WRECr b‚ÇÇ u'} {sub u‚ÇÅ (sub t‚ÇÅ b‚ÇÅ)} {sub u' (sub t' b‚ÇÇ)}
        (differC-WRECr dc‚ÇÅ d2')
        (differC-sub {u‚ÇÅ} {u'} {sub t‚ÇÅ b‚ÇÅ} {sub t' b‚ÇÇ}
          d2'
          (differC-sub {t‚ÇÅ} {t'} {b‚ÇÅ} {b‚ÇÇ} d1' dc‚ÇÅ))
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(WREC a‚ÇÅ b‚ÇÅ) .(WREC a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-WREC a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp | inj‚ÇÇ p‚ÇÅ
    with is-SUP a‚ÇÇ
  ... | inj‚ÇÅ (t‚ÇÇ , u‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | fst (snd (snd (differC-SUP‚Üí·µ£ dc))) = ‚ä•-elim (p‚ÇÅ _ _ refl) -- not possible
  ... | inj‚ÇÇ q‚ÇÇ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí‚Çó (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (if-hasValue-WREC _ _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , WREC v' b‚ÇÇ , refl ,
      ‚Üí‚àßtrue {¬¨writes a‚ÇÅ'} {¬¨writes b‚ÇÅ} nowrites' (‚àß‚â°true‚Üí·µ£ (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) ,
      differC-WREC _ _ _ _ diff' dc‚ÇÅ
  -- MT
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(MT a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites hv (differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , MT a‚ÇÇ b‚ÇÇ c‚ÇÇ , refl , nowrites , differC-MT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ
  -- SUM
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SUM a‚ÇÅ b‚ÇÅ) .(SUM a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , SUM a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-SUM a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- PAIR
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(PAIR a‚ÇÅ b‚ÇÅ) .(PAIR a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , PAIR a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-PAIR a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- SPREAD
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SPREAD a‚ÇÅ b‚ÇÅ) .(SPREAD a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    with is-PAIR a‚ÇÅ
  ... | inj‚ÇÅ (t‚ÇÅ , u‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ with differC-PAIR‚Üí dc
  ... | t' , u' , e' , d1' , d2'
    rewrite e' | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , sub u' (sub t' b‚ÇÇ) , refl ,
      ¬¨Writes-sub {u‚ÇÅ} {sub t‚ÇÅ b‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ) (¬¨writes u‚ÇÅ) (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites))
                                   (¬¨Writes-sub {t‚ÇÅ} {b‚ÇÅ} (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ) (¬¨writes u‚ÇÅ) (‚àß‚â°true‚Üí‚Çó (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites))
                                                          (‚àß‚â°true‚Üí·µ£ (¬¨writes t‚ÇÅ ‚àß ¬¨writes u‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites)) ,
      differC-sub {u‚ÇÅ} {u'} {sub t‚ÇÅ b‚ÇÅ} {sub t' b‚ÇÇ} d2' (differC-sub {t‚ÇÅ} {t'} {b‚ÇÅ} {b‚ÇÇ} d1' dc‚ÇÅ)
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SPREAD a‚ÇÅ b‚ÇÅ) .(SPREAD a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-SPREAD a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp | inj‚ÇÇ p‚ÇÅ
    with is-PAIR a‚ÇÇ
  ... | inj‚ÇÅ (t‚ÇÇ , u‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | fst (snd (snd (differC-PAIR‚Üí·µ£ dc))) = ‚ä•-elim (p‚ÇÅ _ _ refl) -- not possible
  ... | inj‚ÇÇ q‚ÇÇ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí‚Çó (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (if-hasValue-SPREAD _ _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , SPREAD v' b‚ÇÇ , refl ,
      ‚Üí‚àßtrue {¬¨writes a‚ÇÅ'} {¬¨writes b‚ÇÅ} nowrites' (‚àß‚â°true‚Üí·µ£ (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) ,
      differC-SPREAD _ _ _ _ diff' dc‚ÇÅ
  -- SET
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SET a‚ÇÅ b‚ÇÅ) .(SET a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , SET a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-SET a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- ISECT
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(ISECT a‚ÇÅ b‚ÇÅ) .(ISECT a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , ISECT a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-ISECT a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- TUNION
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(TUNION a‚ÇÅ b‚ÇÅ) .(TUNION a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , TUNION a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-TUNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- UNION
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(UNION a‚ÇÅ b‚ÇÅ) .(UNION a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , UNION a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-UNION a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- INL
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(INL a) .(INL b) u nowrites hv (differC-INL a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , INL b , refl , nowrites , differC-INL a b dc
  -- INR
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(INR a) .(INR b) u nowrites hv (differC-INR a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , INR b , refl , nowrites , differC-INR a b dc
  -- DECIDE
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites hv (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    with is-INL a‚ÇÅ
  ... | inj‚ÇÅ (t‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ with differC-INL‚Üí dc
  ... | u' , e' , d'
    rewrite e' | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , sub u' b‚ÇÇ , refl ,
      ¬¨Writes-sub {t‚ÇÅ} {b‚ÇÅ} (‚àß‚â°true‚Üí1-3 {¬¨writes t‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} nowrites) (‚àß‚â°true‚Üí2-3 {¬¨writes t‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} nowrites) ,
      differC-sub {t‚ÇÅ} {u'} {b‚ÇÅ} {b‚ÇÇ} d' dc‚ÇÅ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites hv (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp | inj‚ÇÇ p‚ÇÅ
    with is-INL a‚ÇÇ
  ... | inj‚ÇÅ (t‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | fst (snd (differC-INL‚Üí·µ£ dc)) = ‚ä•-elim (p‚ÇÅ _ refl) -- not possible
  ... | inj‚ÇÇ q‚ÇÇ with is-INR a‚ÇÅ
  ... |   inj‚ÇÅ (t‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ with differC-INR‚Üí dc
  ... |   u' , e' , d'
    rewrite e' | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , sub u' c‚ÇÇ , refl ,
      ¬¨Writes-sub {t‚ÇÇ} {c‚ÇÅ} (‚àß‚â°true‚Üí1-3 {¬¨writes t‚ÇÇ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} nowrites) (‚àß‚â°true‚Üí3-3 {¬¨writes t‚ÇÇ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} nowrites) ,
      differC-sub {t‚ÇÇ} {u'} {c‚ÇÅ} {c‚ÇÇ} d' dc‚ÇÇ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(DECIDE a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites hv (differC-DECIDE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp | inj‚ÇÇ p‚ÇÅ | inj‚ÇÇ q‚ÇÇ | inj‚ÇÇ p‚ÇÇ
    with is-INR a‚ÇÇ
  ... | inj‚ÇÅ (t‚ÇÉ , p‚ÇÉ) rewrite p‚ÇÉ | fst (snd (differC-INR‚Üí·µ£ dc)) = ‚ä•-elim (p‚ÇÇ _ refl)
  ... | inj‚ÇÇ p‚ÇÉ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí1-3 {¬¨writes a‚ÇÅ} {¬¨writes b‚ÇÅ} {¬¨writes c‚ÇÅ} nowrites) (if-hasValue-DECIDE _ _ _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , DECIDE v' b‚ÇÇ c‚ÇÇ , refl ,
      ‚Üí‚àßtrue {¬¨writes a‚ÇÅ'} {¬¨writes b‚ÇÅ ‚àß ¬¨writes c‚ÇÅ} nowrites' (‚àß‚â°true‚Üí·µ£ (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ ‚àß ¬¨writes c‚ÇÅ) nowrites) ,
      differC-DECIDE _ _ _ _ _ _ diff' dc‚ÇÅ dc‚ÇÇ
  -- EQ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) .(EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ) u nowrites hv (differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , EQ a‚ÇÇ b‚ÇÇ c‚ÇÇ , refl , nowrites , differC-EQ a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ dc dc‚ÇÅ dc‚ÇÇ
  -- AX
  ¬¨Writes‚Üístep gcp w1 w2 w3 .AX .AX u nowrites hv differC-AX comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , AX , refl , nowrites , differC-AX
  -- FREE
  ¬¨Writes‚Üístep gcp w1 w2 w3 .FREE .FREE u nowrites hv differC-FREE comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , FREE , refl , nowrites , differC-FREE
  -- MSEQ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(MSEQ s) .(MSEQ s) u nowrites hv (differC-MSEQ s) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , MSEQ s , refl , nowrites , differC-MSEQ s
  -- MAPP
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(MAPP s a‚ÇÅ) .(MAPP s a‚ÇÇ) u nowrites hv (differC-MAPP s a‚ÇÅ a‚ÇÇ dc) comp with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ)
    rewrite p‚ÇÅ | differC-NUM‚Üí dc | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NUM (s n‚ÇÅ) , refl , nowrites , differC-NUM _
  ... | inj‚ÇÇ p‚ÇÅ with is-NUM a‚ÇÇ
  ... |   inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ | differC-NUM‚Üí·µ£ dc = ‚ä•-elim (p‚ÇÅ _ refl)
  ... |   inj‚ÇÇ p‚ÇÇ with step‚äé a‚ÇÅ w1
  ... |   inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |   inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' nowrites (if-hasValue-MAPP _ _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , MAPP s v' , refl , nowrites' , differC-MAPP _ _ _ diff'
  -- CS
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(CS name) .(CS name) u nowrites hv (differC-CS name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , CS name , refl , nowrites , differC-CS name
  -- NAME
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(NAME name) .(NAME name) u nowrites hv (differC-NAME name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NAME name , refl , nowrites , differC-NAME name
  -- FRESH
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(FRESH a) .(FRESH b) u nowrites hv (differC-FRESH a b dc) comp
    = {!!}
  -- LOAD
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LOAD a) .(LOAD b) u nowrites hv (differC-LOAD a b dc) comp
    = {!!}
  -- CHOOSE
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(CHOOSE a‚ÇÅ b‚ÇÅ) .(CHOOSE a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-CHOOSE a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    with is-NAME a‚ÇÅ
  ... | inj‚ÇÅ (n‚ÇÅ , p‚ÇÅ) rewrite p‚ÇÅ = {!!} --‚ä•-elim (differC-NAME‚Üí dc)
  ... | inj‚ÇÇ p‚ÇÅ with is-NAME a‚ÇÇ
  ... |   inj‚ÇÅ (n‚ÇÇ , p‚ÇÇ) rewrite p‚ÇÇ = {!!} --‚ä•-elim (differC-NAME‚Üí·µ£ dc)
  ... |   inj‚ÇÇ p‚ÇÇ with step‚äé a‚ÇÅ w1
  ... |     inj‚ÇÇ z‚ÇÉ rewrite z‚ÇÉ = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
  ... |     inj‚ÇÅ (a‚ÇÅ' , w1' , z‚ÇÉ)
    rewrite z‚ÇÉ | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a‚ÇÅ a‚ÇÇ a‚ÇÅ' (‚àß‚â°true‚Üí‚Çó (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) (if-hasValue-CHOOSE _ _ _ hv) dc z‚ÇÉ
  ... | w4 , v' , comp' , nowrites' , diff'
    rewrite comp'
    = w4 , CHOOSE v' b‚ÇÇ , refl ,
      ‚Üí‚àßtrue {¬¨writes a‚ÇÅ'} {¬¨writes b‚ÇÅ} nowrites' (‚àß‚â°true‚Üí·µ£ (¬¨writes a‚ÇÅ) (¬¨writes b‚ÇÅ) nowrites) ,
      differC-CHOOSE _ _ _ _ diff' dc‚ÇÅ
  -- NOWRITE
  ¬¨Writes‚Üístep gcp w1 w2 w3 .NOWRITE .NOWRITE u nowrites hv differC-NOWRITE comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NOWRITE , refl , nowrites , differC-NOWRITE
  -- NOREAD
  ¬¨Writes‚Üístep gcp w1 w2 w3 .NOREAD .NOREAD u nowrites hv differC-NOREAD comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NOREAD , refl , nowrites , differC-NOREAD
  -- SUBSING
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SUBSING a) .(SUBSING b) u nowrites hv (differC-SUBSING a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , SUBSING b , refl , nowrites , differC-SUBSING a b dc
  -- PURE
  ¬¨Writes‚Üístep gcp w1 w2 w3 .PURE .PURE u nowrites hv differC-PURE comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , PURE , refl , nowrites , differC-PURE
  -- NOSEQ
  ¬¨Writes‚Üístep gcp w1 w2 w3 .NOSEQ .NOSEQ u nowrites hv differC-NOSEQ comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , NOSEQ , refl , nowrites , differC-NOSEQ
  -- TERM
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(TERM a) .(TERM b) u nowrites hv (differC-TERM a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , TERM b , refl , nowrites , differC-TERM a b dc
  -- ENC
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(ENC a) .(ENC a) u nowrites hv (differC-ENC a dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , ENCr a , refl , ‚Üí‚àßtrue (‚Üí‚àßtrue nowrites refl) refl , differC-ENCr dc
  -- DUM
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(DUM a) .(DUM b) u nowrites hv (differC-DUM a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , DUM b , refl , nowrites , differC-DUM a b dc
  -- FFDEFS
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(FFDEFS a‚ÇÅ b‚ÇÅ) .(FFDEFS a‚ÇÇ b‚ÇÇ) u nowrites hv (differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , FFDEFS a‚ÇÇ b‚ÇÇ , refl , nowrites , differC-FFDEFS a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ dc dc‚ÇÅ
  -- UNIV
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(UNIV x) .(UNIV x) u nowrites hv (differC-UNIV x) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , UNIV x , refl , nowrites , differC-UNIV x
  -- LIFT
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LIFT a) .(LIFT b) u nowrites hv (differC-LIFT a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , LIFT b , refl , nowrites , differC-LIFT a b dc
  -- LOWER
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(LOWER a) .(LOWER b) u nowrites hv (differC-LOWER a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , LOWER b , refl , nowrites , differC-LOWER a b dc
  -- SHRINK
  ¬¨Writes‚Üístep gcp w1 w2 w3 .(SHRINK a) .(SHRINK b) u nowrites hv (differC-SHRINK a b dc) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , SHRINK b , refl , nowrites , differC-SHRINK a b dc
  ¬¨Writes‚Üístep gcp w1 w2 w3 .TRUE .FALSE u nowrites hv differC-writesTF comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , FALSE , refl , nowrites , differC-writesTF
  ¬¨Writes‚Üístep gcp w1 w2 w3 .FALSE .TRUE u nowrites hv differC-writesFT comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , TRUE , refl , nowrites , differC-writesFT
{--  ¬¨Writes‚Üístep gcp w1 w2 w3 (CS .name) .TRUE u nowrites hv (differC-writesCT name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , TRUE , refl , nowrites , differC-writesCT name
  ¬¨Writes‚Üístep gcp w1 w2 w3 (CS .name) .FALSE u nowrites hv (differC-writesCF name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , FALSE , refl , nowrites , differC-writesCF name
  ¬¨Writes‚Üístep gcp w1 w2 w3 .TRUE (CS .name) u nowrites hv (differC-writesTC name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , CS name , refl , nowrites , differC-writesTC name
  ¬¨Writes‚Üístep gcp w1 w2 w3 .FALSE (CS .name) u nowrites hv (differC-writesFC name) comp
    rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
    = w3 , CS name , refl , nowrites , differC-writesFC name
--}


step-hasValue : (a a' : Term) (w w' : ùïé¬∑)
              ‚Üí step a w ‚â° just (a' , w')
              ‚Üí hasValue a w
              ‚Üí hasValue a' w'
step-hasValue a a' w w' s (v , w'' , comp , isv) =
  v , w'' ,
  val-‚áì-from-to‚Üí {w} {w'} {w''} {a} {a'} {v} isv (step-‚áì-from-to-trans {w} {w'} {w'} {a} {a'} {a'} s (0 , refl)) comp ,
  isv


abstract
  ¬¨Writes‚Üísteps : (gcp : getChoice‚Ñô) (k : ‚Ñï) (w1 w2 w3 : ùïé¬∑) (a b u : Term)
                ‚Üí ¬¨Writes a
                ‚Üí hasValue b w3
                ‚Üí differC a b
                ‚Üí steps k (a , w1) ‚â° (u , w2)
                ‚Üí Œ£ ‚Ñï (Œª k' ‚Üí Œ£ ùïé¬∑ (Œª w4 ‚Üí Œ£ Term (Œª v ‚Üí steps k' (b , w3) ‚â° (v , w4) √ó ¬¨Writes u √ó differC u v)))
  ¬¨Writes‚Üísteps gcp 0 w1 w2 w3 a b u nwa hv diff comp
    rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
    = 0 , w3 , b , refl , nwa , diff
  ¬¨Writes‚Üísteps gcp (suc k) w1 w2 w3 a b u nwa hv diff comp
    with step‚äé a w1
  ... | inj‚ÇÅ (a' , w1' , z)
    rewrite z
    with ¬¨Writes‚Üístep gcp w1 w1' w3 a b a' nwa hv diff z
  ... | w3' , b' , z' , nwa' , diff'
    rewrite z'
    with ¬¨Writes‚Üísteps gcp k w1' w2 w3' a' b' u nwa' (step-hasValue b b' w3 w3' z' hv) diff' comp
  ... | k' , w4 , v , z'' , nw' , diff'
    = suc k' , w4 , v , step-steps-trans {w3} {w3'} {w4} {b} {b'} {v} {k'} z' z'' , nw' , diff'
  ¬¨Writes‚Üísteps gcp (suc k) w1 w2 w3 a b u nwa hv diff comp | inj‚ÇÇ z
    rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
    = 0 , w3 , b , refl , nwa , diff


abstract
  differC-refl : (a : Term)
--               ‚Üí ¬¨Writes a
               ‚Üí differC a a
  differC-refl (VAR x) = differC-VAR x
  differC-refl QNAT = differC-QNAT
  differC-refl (LT a a‚ÇÅ) = differC-LT a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (QLT a a‚ÇÅ) = differC-QLT a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (NUM x) = differC-NUM x
  differC-refl (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) = differC-IFLT a a a‚ÇÅ a‚ÇÅ a‚ÇÇ a‚ÇÇ a‚ÇÉ a‚ÇÉ (differC-refl a) (differC-refl a‚ÇÅ) (differC-refl a‚ÇÇ) (differC-refl a‚ÇÉ)
  differC-refl (IFEQ a a‚ÇÅ a‚ÇÇ a‚ÇÉ) = differC-IFEQ a a a‚ÇÅ a‚ÇÅ a‚ÇÇ a‚ÇÇ a‚ÇÉ a‚ÇÉ (differC-refl a) (differC-refl a‚ÇÅ) (differC-refl a‚ÇÇ) (differC-refl a‚ÇÉ)
  differC-refl (SUC a) = differC-SUC a a (differC-refl a)
  differC-refl (PI a a‚ÇÅ) = differC-PI a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (LAMBDA a) = differC-LAMBDA a a (differC-refl a)
  differC-refl (APPLY a a‚ÇÅ) = differC-APPLY a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (FIX a) = differC-FIX a a (differC-refl a)
  differC-refl (LET a a‚ÇÅ) = differC-LET a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (WT a a‚ÇÅ a‚ÇÇ) = differC-WT a a a‚ÇÅ a‚ÇÅ a‚ÇÇ a‚ÇÇ (differC-refl a) (differC-refl a‚ÇÅ) (differC-refl a‚ÇÇ)
  differC-refl (SUP a a‚ÇÅ) = differC-SUP a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (WREC a a‚ÇÅ) = differC-WREC a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (MT a a‚ÇÅ a‚ÇÇ) = differC-MT a a a‚ÇÅ a‚ÇÅ a‚ÇÇ a‚ÇÇ (differC-refl a) (differC-refl a‚ÇÅ) (differC-refl a‚ÇÇ)
  differC-refl (SUM a a‚ÇÅ) = differC-SUM a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (PAIR a a‚ÇÅ) = differC-PAIR a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (SPREAD a a‚ÇÅ) = differC-SPREAD a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (SET a a‚ÇÅ) = differC-SET a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (TUNION a a‚ÇÅ) = differC-TUNION a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (ISECT a a‚ÇÅ) = differC-ISECT a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (UNION a a‚ÇÅ) = differC-UNION a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (INL a) = differC-INL a a (differC-refl a)
  differC-refl (INR a) = differC-INR a a (differC-refl a)
  differC-refl (DECIDE a a‚ÇÅ a‚ÇÇ) = differC-DECIDE a a a‚ÇÅ a‚ÇÅ a‚ÇÇ a‚ÇÇ (differC-refl a) (differC-refl a‚ÇÅ) (differC-refl a‚ÇÇ)
  differC-refl (EQ a a‚ÇÅ a‚ÇÇ) = differC-EQ a a a‚ÇÅ a‚ÇÅ a‚ÇÇ a‚ÇÇ (differC-refl a) (differC-refl a‚ÇÅ) (differC-refl a‚ÇÇ)
  differC-refl AX = differC-AX
  differC-refl FREE = differC-FREE
  differC-refl (CS x) = differC-CS x
  differC-refl (NAME x) = differC-NAME x
  differC-refl (FRESH a) = differC-FRESH a a (differC-refl a)
  differC-refl (LOAD a) = differC-LOAD a a (differC-refl a)
  differC-refl (CHOOSE a a‚ÇÅ) = differC-CHOOSE a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl (MSEQ x) = differC-MSEQ x
  differC-refl (MAPP x a) = differC-MAPP x a a (differC-refl a)
  differC-refl NOWRITE = differC-NOWRITE
  differC-refl NOREAD = differC-NOREAD
  differC-refl (SUBSING a) = differC-SUBSING a a (differC-refl a)
  differC-refl (DUM a) = differC-DUM a a (differC-refl a)
  differC-refl (FFDEFS a a‚ÇÅ) = differC-FFDEFS a a a‚ÇÅ a‚ÇÅ (differC-refl a) (differC-refl a‚ÇÅ)
  differC-refl PURE = differC-PURE
  differC-refl NOSEQ = differC-NOSEQ
  differC-refl (TERM a) = differC-TERM a a (differC-refl a)
  differC-refl (ENC a) = differC-ENC a (differC-refl a)
  differC-refl (UNIV x) = differC-UNIV x
  differC-refl (LIFT a) = differC-LIFT a a (differC-refl a)
  differC-refl (LOWER a) = differC-LOWER a a (differC-refl a)
  differC-refl (SHRINK a) = differC-SHRINK a a (differC-refl a)

{--
  differC-refl {VAR x} nwa = differC-VAR x
  differC-refl {QNAT} nwa = differC-QNAT
  differC-refl {LT a a‚ÇÅ} nwa = differC-LT _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {QLT a a‚ÇÅ} nwa = differC-QLT _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {NUM x} nwa = differC-NUM x
  differC-refl {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nwa = differC-IFLT _ _ _ _ _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí1-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí2-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa)) (differC-refl {a‚ÇÇ} (‚àß‚â°true‚Üí3-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa)) (differC-refl {a‚ÇÉ} (‚àß‚â°true‚Üí4-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa))
  differC-refl {IFEQ a a‚ÇÅ a‚ÇÇ a‚ÇÉ} nwa = differC-IFEQ _ _ _ _ _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí1-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí2-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa)) (differC-refl {a‚ÇÇ} (‚àß‚â°true‚Üí3-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa)) (differC-refl {a‚ÇÉ} (‚àß‚â°true‚Üí4-4 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} {¬¨writes a‚ÇÉ} nwa))
  differC-refl {SUC a} nwa = differC-SUC a a (differC-refl nwa)
  differC-refl {PI a a‚ÇÅ} nwa = differC-PI _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {LAMBDA a} nwa = differC-LAMBDA a a (differC-refl nwa)
  differC-refl {APPLY a a‚ÇÅ} nwa = differC-APPLY _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {FIX a} nwa = differC-FIX a a (differC-refl nwa)
  differC-refl {LET a a‚ÇÅ} nwa = differC-LET _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {WT a a‚ÇÅ a‚ÇÇ} nwa = differC-WT _ _ _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí1-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí2-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÇ} (‚àß‚â°true‚Üí3-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa))
  differC-refl {SUP a a‚ÇÅ} nwa = differC-SUP _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {WREC a a‚ÇÅ} nwa = differC-WREC _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {MT a a‚ÇÅ a‚ÇÇ} nwa = differC-MT _ _ _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí1-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí2-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÇ} (‚àß‚â°true‚Üí3-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa))
  differC-refl {SUM a a‚ÇÅ} nwa = differC-SUM _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {PAIR a a‚ÇÅ} nwa = differC-PAIR _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {SPREAD a a‚ÇÅ} nwa = differC-SPREAD _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {SET a a‚ÇÅ} nwa = differC-SET _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {TUNION a a‚ÇÅ} nwa = differC-TUNION _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {ISECT a a‚ÇÅ} nwa = differC-ISECT _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {UNION a a‚ÇÅ} nwa = differC-UNION _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {INL a} nwa = differC-INL a a (differC-refl nwa)
  differC-refl {INR a} nwa = differC-INR a a (differC-refl nwa)
  differC-refl {DECIDE a a‚ÇÅ a‚ÇÇ} nwa = differC-DECIDE _ _ _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí1-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí2-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÇ} (‚àß‚â°true‚Üí3-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa))
  differC-refl {EQ a a‚ÇÅ a‚ÇÇ} nwa = differC-EQ _ _ _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí1-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí2-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa)) (differC-refl {a‚ÇÇ} (‚àß‚â°true‚Üí3-3 {¬¨writes a} {¬¨writes a‚ÇÅ} {¬¨writes a‚ÇÇ} nwa))
  differC-refl {AX} nwa = differC-AX
  differC-refl {FREE} nwa = differC-FREE
  differC-refl {CS x} nwa = differC-CS x
  differC-refl {NAME x} nwa = ?
  differC-refl {FRESH a} nwa = differC-FRESH _ _ (differC-refl nwa)
  differC-refl {CHOOSE a a‚ÇÅ} nwa = differC-CHOOSE _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {MSEQ x} nwa = differC-MSEQ x
  differC-refl {MAPP x a} nwa = differC-MAPP x a a (differC-refl nwa)
  differC-refl {NOWRITE} nwa = differC-NOWRITE
  differC-refl {NOREAD} nwa = differC-NOREAD
  differC-refl {SUBSING a} nwa = differC-SUBSING a a (differC-refl nwa)
  differC-refl {DUM a} nwa = differC-DUM a a (differC-refl nwa)
  differC-refl {FFDEFS a a‚ÇÅ} nwa = differC-FFDEFS _ _ _ _ (differC-refl {a} (‚àß‚â°true‚Üí‚Çó (¬¨writes a) (¬¨writes a‚ÇÅ) nwa)) (differC-refl {a‚ÇÅ} (‚àß‚â°true‚Üí·µ£ (¬¨writes a) (¬¨writes a‚ÇÅ) nwa))
  differC-refl {PURE} nwa = differC-PURE
  differC-refl {NOSEQ} nwa = differC-NOSEQ
  differC-refl {TERM a} nwa = differC-TERM a a (differC-refl nwa)
  differC-refl {ENC a} nwa = differC-ENC a (differC-refl nwa)
  differC-refl {UNIV x} nwa = differC-UNIV x
  differC-refl {LIFT a} nwa = differC-LIFT a a (differC-refl nwa)
  differC-refl {LOWER a} nwa = differC-LOWER a a (differC-refl nwa)
  differC-refl {SHRINK a} nwa = differC-SHRINK a a (differC-refl nwa)
--}


abstract
  ¬¨Writes‚Üí‚áì : (gcp : getChoice‚Ñô) (w1 w2 w3 : ùïé¬∑) (a b u : Term)
            ‚Üí ¬¨Writes a
            ‚Üí hasValue b w3
            ‚Üí differC a b
            ‚Üí a ‚áì u from w1 to w2
            ‚Üí Œ£ ùïé¬∑ (Œª w4 ‚Üí Œ£ Term (Œª v ‚Üí b ‚áì v from w3 to w4 √ó ¬¨Writes u √ó differC u v))
  ¬¨Writes‚Üí‚áì gcp w1 w2 w3 a b u nwa hv diff (k , comp)
    with ¬¨Writes‚Üísteps gcp k w1 w2 w3 a b u nwa hv diff comp
  ... | k' , w4 , v , comp , nwu , diff' = w4 , v , (k' , comp) , nwu , diff'


‚â°differC : (a b c d : Term)
         ‚Üí a ‚â° b
         ‚Üí c ‚â° d
         ‚Üí differC a c
         ‚Üí differC b d
‚â°differC a b c d refl refl diff = diff


abstract
  ¬¨Writes‚Üí‚áõ! : (gcp : getChoice‚Ñô) (w1 w2 : ùïé¬∑) (a b u v : Term)
             ‚Üí ¬¨Writes a
             ‚Üí isValue u
             ‚Üí isValue v
             ‚Üí a ‚áõ! u at w1
             ‚Üí b ‚áõ! v at w2
             ‚Üí differC a b
             ‚Üí differC u v
  ¬¨Writes‚Üí‚áõ! gcp w1 w2 a b u v nwa isvu isvv compa compb diff
    with ¬¨Writes‚Üí‚áì gcp w1 w1 w2 a b u nwa (v , w2 , lower (compb w2 (‚äë-refl¬∑ w2)) , isvv) diff (lower (compa w1 (‚äë-refl¬∑ w1)))
  ... | w4 , v' , compb' , nwu , diff' =
    ‚â°differC
      u u v' v
      refl
      (‚áì-val-det {w2} {b} {v'} {v}
        (differC-pres-isValue diff' isvu) isvv
        (‚áì-from-to‚Üí‚áì {w2} {w4} {b} {v'} compb')
        (‚áì-from-to‚Üí‚áì {w2} {w2} {b} {v} (lower (compb w2 (‚äë-refl¬∑ w2)))))
      diff'


¬¨differC-INL-INR : (a b : Term) ‚Üí ¬¨ differC (INL a) (INR b)
¬¨differC-INL-INR a b ()


abstract
  ¬¨Writes‚Üí‚áõ!INL-INR : (gcp : getChoice‚Ñô) (w1 w2 : ùïé¬∑) (a u v : Term)
                    ‚Üí ¬¨Writes a
                    ‚Üí a ‚áõ! INL u at w1
                    ‚Üí a ‚áõ! INR v at w2
                    ‚Üí ‚ä•
  ¬¨Writes‚Üí‚áõ!INL-INR gcp w1 w2 a u v nwa comp1 comp2 =
    ¬¨differC-INL-INR u v (¬¨Writes‚Üí‚áõ! gcp w1 w2 a a (INL u) (INR v) nwa tt tt comp1 comp2 (differC-refl a {--nwa--}))

\end{code}
