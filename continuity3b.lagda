\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity3b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)


eqfgq : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
        {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm}
        ‚Üí #¬¨Names g
        ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
        ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
        ‚Üí ‚ààType i w #BAIRE g
        ‚Üí smallestMod cn kb gc i w F f ‚ààF ‚ààf
        ‚Üí equalInType i w (#QBAIREn (#ŒΩtestMup F f)) f g
--       ((n : ‚Ñï) ‚Üí n < ? ‚Üí ‚áìsame‚Ñï w (APPLY f (NUM n)) (APPLY g (NUM n)))
        ‚Üí equalInType i w #NAT (#APPLY F f) (#APPLY F g)
eqfgq cn kb gc {i} {w} {F} {f} {g} nng ‚ààF ‚ààf ‚ààg smod eqb =
  equalInType-trans (equalInType-APPLY-force ‚ààF ‚ààf) (equalInType-trans eqf (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààg)))
  where
    eqb1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' (#QNATn (#ŒΩtestMup F f)) a‚ÇÅ a‚ÇÇ
                         ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqb1 = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType (‚â°QBAIREn (#ŒΩtestMup F f)) eqb)

    eqb2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm)
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ ‚Ñï (Œª tn ‚Üí Œ£ ‚Ñï (Œª k ‚Üí #ŒΩtestMup F f #‚áì #NUM tn at w'' √ó a‚ÇÅ #‚áõ #NUM k at w'' √ó a‚ÇÇ #‚áõ #NUM k at w'' √ó k < tn)))
                         ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí NATeq w'' (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)))
    eqb2 w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-NAT‚Üí i w1 (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ) (eqb1 w1 e1 a‚ÇÅ a‚ÇÇ (‚ÜíequalInType-QNATn (testM-QNAT cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)) eqa))

-- NOTE: It is not clear how this could work since to prove compg0 below we need to know that f and g compute to the same number
-- on the same input, as long as this input is less than the modulus of F at f. However, to use eqb2 for that we would have to
-- prove that this input is less than all possible moduli of continuity for all extensions...
-- Counter-example?

    eqb3 : ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï)
                         ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMup F f #‚áì #NUM n at w'' √ó k < n)))
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
    eqb3 w1 e1 k comp = kb z w1 (‚äë-refl¬∑ _)
      where
        z : ‚ñ°¬∑ w1 (Œª w'' _ ‚Üí NATeq w'' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        z = eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M Œª w2 e2 ‚Üí fst (lower (comp w2 e2)) , k , fst (snd (lower (comp w2 e2))) , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , snd (snd (lower (comp w2 e2))))

 --eqb2 w1 e1 (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí k , #compAllRefl (#NUM k) w2 , #compAllRefl (#NUM k) w2 , ltk))

{--    neqt : NATeq w (#ŒΩtestM F f) (#ŒΩtestM F f)
    neqt = ŒΩtestM-NAT cn kb gc i w F f nnF nnf ‚ààF ‚ààf

    tn : ‚Ñï
    tn = fst neqt

    x : NATeq w (#ŒΩtestM F f) (#NUM tn)
    x = tn , fst (snd neqt) , compAllRefl _ _

    cx : #ŒΩtestM F f #‚áõ #NUM tn at w
    cx = NATeq‚Üí‚áõ {w} {#ŒΩtestM F f} x
--}

    inn : ‚ààType i w #NAT (#APPLY F (#force f))
    inn = equalInType-refl (equalInType-sym (equalInType-APPLY-force ‚ààF ‚ààf))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) ((k : ‚Ñï) ‚Üí #APPLY F (#force f) #‚áì #NUM k at w' ‚Üí #APPLY F (#force g) #‚áì #NUM k at w'))
    aw w1 e1 = lift imp
      where
        w1' : ùïé¬∑
        w1' = fst smod

        e1' : w ‚äë¬∑ w1'
        e1' = fst (snd smod)

        sma : smallestModAux cn kb gc i w F f w1' e1' ‚ààF ‚ààf
        sma = {!!} --snd (snd smod)

        eqb4 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1' to w2
                          √ó ‚àÄùïé w1' (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n
                                            ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))))
        eqb4 = smallestModAux‚ÜíNATeq cn kb gc {i} {w} {F} {f} {g} {w1'} {e1'} ‚ààF ‚ààf {!!} {--sma--} eqb3

        tn : ‚Ñï
        tn = fst eqb4

        w2 : ùïé¬∑
        w2 = fst (snd eqb4)

        compt : ŒΩtestMup ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1' to w2
        compt = fst (snd (snd eqb4))

        eqb5 : ‚àÄùïé w1' (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < tn
                               ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        eqb5 = snd (snd (snd eqb4))

        w1s : ùïé¬∑
        w1s = startNewChoiceT Res‚ä§ w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)

        compu : Œ£ Name (Œª name ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                 APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) ‚áì v from (chooseT name w1s (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM j)
                 √ó tn ‚â° suc j
                 √ó compatible¬∑ name w1s Res‚ä§)))
        compu = ŒΩtestM‚áì‚Üí cn {w1'} {w2} {‚åú F ‚åù} {‚åú f ‚åù} {tn} (CTerm.closed F) (CTerm.closed f) compt

        name : Name
        name = fst compu

        v : Term
        v = fst (snd compu)

        j : ‚Ñï
        j = fst (snd (snd compu))

        w1s' : ùïé¬∑
        w1s' = chooseT name w1s (NUM 0)

        e0' : w1' ‚äë¬∑ w1s'
        e0' = ‚äë-trans¬∑ (startNewChoiceT‚äè Res‚ä§ w1' (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)) (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0)))

        e0'' : w ‚äë¬∑ w1s'
        e0'' = ‚äë-trans¬∑ e1' e0'

        k : ‚Ñï
        k = fst (fst (snd (snd (snd compu))))

        compa : steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1s') ‚â° (v , w2)
        compa = snd (fst (snd (snd (snd compu))))

        isvv : isValue v
        isvv = fst (snd (snd (snd (snd compu))))

        g0 : getT 0 name w2 ‚â° just (NUM j)
        g0 = fst (snd (snd (snd (snd (snd compu)))))

        eqj : tn ‚â° suc j
        eqj = fst (snd (snd (snd (snd (snd (snd compu))))))

        compat : compatible¬∑ name w1s Res‚ä§
        compat = snd (snd (snd (snd (snd (snd (snd compu))))))

        compat1 : compatible¬∑ name w1s' Res‚ä§
        compat1 = ‚äë-compatible¬∑ (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0))) compat

        wgt0 : ‚àÄùïé-get0-NUM w1s' name
        wgt0 = cn name w1s 0 compat

        ish : isHighest‚Ñï {k} {w1s'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
        ish = {!!} {--steps-sat-isHighest‚Ñï
                gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f) {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
                compa isvv (updCtxt-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) (¬¨Names‚ÜíupdCtxt {name} {‚åú f ‚åù} {‚åú F ‚åù} nnF) updCtxt-upd)
                compat1
                wgt0
                (j , g0 , ‚â°suc‚Üí< eqj)--}

        imp : (k : ‚Ñï) ‚Üí #APPLY F (#force f) #‚áì #NUM k at w1 ‚Üí #APPLY F (#force g) #‚áì #NUM k at w1
        imp k c = {!!}

{--
        compg0 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1) √ó updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'))
        compg0 = ? --steps-updRel-app gc {tn} {name} {‚åú F ‚åù} {‚åú f ‚åù} {‚åú g ‚åù} {v} {k} {w1'} {w2} {w1} nnF nnf nng (CTerm.closed f) (CTerm.closed g) compat1 wgt0 (‚àÄùïé-mon e1' eqb3) compa ish isvv

        k' : ‚Ñï
        k' = fst compg0

        v' : Term
        v' = fst (snd compg0)

        compg1 : steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1)
        compg1 = fst (snd (snd compg0))

        ur :  updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'
        ur = snd (snd (snd compg0))

        equf : ‚àÄùïé w1' (Œª w' _ ‚Üí NATeq w' (#APPLY F (#upd name f)) (#APPLY F (#force f)))
        equf = kb (equalInType-NAT‚Üí i w1' (#APPLY F (#upd name f)) (#APPLY F (#force f)) (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w1' e1') (equalInType-upd-force i w1' name f wgt0 (equalInType-mon ‚ààf w1' e1'))))

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = eqfg-aux {w1} {w1'} e0' {name} {‚åú f ‚åù} {‚åú g ‚åù} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú g ‚åù)} {v} {v'} {n} isvv (equf w1' (‚äë-refl¬∑ _)) comp1 (‚áì-from-to‚Üí‚áì (k , compa)) (‚áì-from-to‚Üí‚áì (k' , compg1)) ur
--}

--      n , comp1 ,
--      {!!} --¬¨Names‚Üí‚áì‚Üí‚áõ w1 w1 ‚åú #APPLY F (#force g) ‚åù (NUM n) (#¬¨Names-APPLY {F} {#force g} nnF (#¬¨Names-force {g} nng)) compg
{--      where
        cxb : Œ£ ùïé¬∑ (Œª w2 ‚Üí ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2)
        cxb = ‚áì‚Üífrom-to (lower (cx w1 e1))

        w2 : ùïé¬∑
        w2 = fst cxb

        compt : ŒΩtestM ‚åú F ‚åù ‚åú f ‚åù ‚áì NUM tn from w1 to w2
        compt = snd cxb

        w1s : ùïé¬∑
        w1s = startNewChoiceT Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)

        compu : Œ£ Name (Œª name ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                 APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) ‚áì v from (chooseT name w1s (NUM 0)) to w2
                 √ó isValue v
                 √ó getT 0 name w2 ‚â° just (NUM j)
                 √ó tn ‚â° suc j
                 √ó compatible¬∑ name w1s Res‚ä§)))
        compu = #ŒΩtestM‚áì‚Üí cn {w1} {w2} {‚åú F ‚åù} {‚åú f ‚åù} {tn} (CTerm.closed F) (CTerm.closed f) nnF nnf compt

        name : Name
        name = fst compu

        v : Term
        v = fst (snd compu)

        j : ‚Ñï
        j = fst (snd (snd compu))

        w1' : ùïé¬∑
        w1' = chooseT name w1s (NUM 0)

        e0' : w1 ‚äë¬∑ w1'
        e0' = ‚äë-trans¬∑ (startNewChoiceT‚äè Res‚ä§ w1 (testM 0 ‚åú F ‚åù ‚åú f ‚åù)) (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0)))

        e1' : w ‚äë¬∑ w1'
        e1' = ‚äë-trans¬∑ e1 e0'

        k : ‚Ñï
        k = fst (fst (snd (snd (snd compu))))

        compa : steps k (APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) , w1') ‚â° (v , w2)
        compa = snd (fst (snd (snd (snd compu))))

        isvv : isValue v
        isvv = fst (snd (snd (snd (snd compu))))

        g0 : getT 0 name w2 ‚â° just (NUM j)
        g0 = fst (snd (snd (snd (snd (snd compu)))))

        eqj : tn ‚â° suc j
        eqj = fst (snd (snd (snd (snd (snd (snd compu))))))

        compat : compatible¬∑ name w1s Res‚ä§
        compat = snd (snd (snd (snd (snd (snd (snd compu))))))

        compat1 : compatible¬∑ name w1' Res‚ä§
        compat1 = ‚äë-compatible¬∑ (choose‚äë¬∑ name w1s (T‚Üí‚ÑÇ¬∑ (NUM 0))) compat

        wgt0 : ‚àÄùïé-get0-NUM w1' name
        wgt0 = cn name w1s 0 compat

        ish : isHighest‚Ñï {k} {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} tn name compa
        ish = steps-sat-isHighest‚Ñï
                gc {name} {‚åú f ‚åù} {k} nnf (CTerm.closed f) {w1'} {w2} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {v} {tn}
                compa isvv (updCtxt-APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù) (¬¨Names‚ÜíupdCtxt {name} {‚åú f ‚åù} {‚åú F ‚åù} nnF) updCtxt-upd)
                compat1
                wgt0
                (j , g0 , ‚â°suc‚Üí< eqj)

        compg0 : Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª v' ‚Üí steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1) √ó updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'))
        compg0 = steps-updRel-app gc {tn} {name} {‚åú F ‚åù} {‚åú f ‚åù} {‚åú g ‚åù} {v} {k} {w1'} {w2} {w1} nnF nnf nng (CTerm.closed f) (CTerm.closed g) compat1 wgt0 (‚àÄùïé-mon e1' eqb3) compa ish isvv

        k' : ‚Ñï
        k' = fst compg0

        v' : Term
        v' = fst (snd compg0)

        compg1 : steps k' (APPLY ‚åú F ‚åù (force ‚åú g ‚åù) , w1) ‚â° (v' , w1)
        compg1 = fst (snd (snd compg0))

        ur :  updRel name ‚åú f ‚åù ‚åú g  ‚åù v v'
        ur = snd (snd (snd compg0))

        equf : ‚àÄùïé w1' (Œª w' _ ‚Üí NATeq w' (#APPLY F (#upd name f)) (#APPLY F (#force f)))
        equf = kb (equalInType-NAT‚Üí i w1' (#APPLY F (#upd name f)) (#APPLY F (#force f)) (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w1' e1') (equalInType-upd-force i w1' name f wgt0 (equalInType-mon ‚ààf w1' e1'))))

        compg : #APPLY F (#force g) #‚áì #NUM n at w1
        compg = eqfg-aux {w1} {w1'} e0' {name} {‚åú f ‚åù} {‚åú g ‚åù} {APPLY ‚åú F ‚åù (upd name ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú f ‚åù)} {APPLY ‚åú F ‚åù (force ‚åú g ‚åù)} {v} {v'} {n} isvv (equf w1' (‚äë-refl¬∑ _)) comp1 (‚áì-from-to‚Üí‚áì (k , compa)) (‚áì-from-to‚Üí‚áì (k' , compg1)) ur
--}

    eqf : equalInType i w #NAT (#APPLY F (#force f)) (#APPLY F (#force g))
    eqf = ‚ÜíequalInType-NAT
            i w (#APPLY F (#force f)) (#APPLY F (#force g))
            (Mod.‚àÄùïé-‚ñ°Func M
              (‚Üí‚àÄùïé-NATeq-NATeq w (#APPLY F (#force f)) (#APPLY F (#force g)) aw)
              (equalInType-NAT‚Üí i w (#APPLY F (#force f)) (#APPLY F (#force f)) inn))



continuityQBody : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
                  (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                  ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                  ‚Üí ‚ààType i w #BAIRE f
                  ‚Üí ‚ààType i w (#contQBody F f) (#PAIR (#ŒΩtestMup F f) #lam3AX)
continuityQBody cn kb gc i w F f ‚ààF ‚ààf =
  ‚â°CTerm‚ÜíequalInType (sym (#contQBody‚â° F f)) h0
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí SUMeq (equalInType i w' #QNAT)
                                (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]PI #[0]BAIRE
                                                                             (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                                                      (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                                                               (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT))))))
                                w'
                                (#PAIR (#ŒΩtestMup F f) #lam3AX)
                                (#PAIR (#ŒΩtestMup F f) #lam3AX))
    aw w1 e1 =
      #ŒΩtestMup F f , #ŒΩtestMup F f , #lam3AX , #lam3AX ,
      testM-QNAT cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1) ,
      #compAllRefl (#PAIR (#ŒΩtestMup F f) #lam3AX) w1 ,
      #compAllRefl (#PAIR (#ŒΩtestMup F f) #lam3AX) w1 ,
      eql1
      where
        ea2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) (eg : equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ)
                             ‚Üí equalTypes i w2
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÅ) (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                           (#FUN (#FFDEFS #BAIRE g‚ÇÇ) (#FUN (#EQ f g‚ÇÇ (#QBAIREn (#ŒΩtestMup F f))) (#EQ (#APPLY F f) (#APPLY F g‚ÇÇ) #NAT))))
        ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          eqTypesFUN‚Üê
            (eqTypesFFDEFS‚Üê eqTypesBAIRE eg)
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                          (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) eg))
              (eqTypesEQ‚Üê eqTypesNAT
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                          (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) eg)))

        aw3 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                              ‚Üí equalInType i w2 (#FUN (#FFDEFS #BAIRE g‚ÇÅ)
                                                        (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f)))
                                                              (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)))
                                             (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
        aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          equalInType-FUN
            (eqTypesFFDEFS‚Üê eqTypesBAIRE (equalInType-refl eg))
            (eqTypesFUN‚Üê
              (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w2 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))))
                           (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                           (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w2 F f (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2))) (equalInType-refl eg)))
              (eqTypesEQ‚Üê eqTypesNAT
                           (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-mon ‚ààf w2 (‚äë-trans¬∑ e1 e2)))
                           (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w2 (‚äë-trans¬∑ e1 e2)) (equalInType-refl eg))))
            aw4
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí (x‚ÇÅ x‚ÇÇ : CTerm)
                                 ‚Üí equalInType i w' (#FFDEFS #BAIRE g‚ÇÅ) x‚ÇÅ x‚ÇÇ
                                 ‚Üí equalInType i w' (#FUN (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f)))
                                                           (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT))
                                                     (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ)
                                                     (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ))
            aw4 w3 e3 x‚ÇÅ x‚ÇÇ ex =
              equalInType-FUN
                (eqTypesEQ‚Üê (‚ÜíequalTypesQBAIREn i w3 (#ŒΩtestMup F f) (#ŒΩtestMup F f) (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))))
                             (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                             (‚ààBAIRE‚Üí‚ààQBAIREn (testM-QNAT cn kb gc i w3 F f (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3)))) (equalInType-refl (equalInType-mon eg w3 e3))))
                (eqTypesEQ‚Üê eqTypesNAT
                             (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-mon ‚ààf w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))))
                             (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w3 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 e3))) (equalInType-refl (equalInType-mon eg w3 e3))))
                aw5
              where
                aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (y‚ÇÅ y‚ÇÇ : CTerm)
                                     ‚Üí equalInType i w' (#EQ f g‚ÇÅ (#QBAIREn (#ŒΩtestMup F f))) y‚ÇÅ y‚ÇÇ
                                     ‚Üí equalInType i w' (#EQ (#APPLY F f) (#APPLY F g‚ÇÅ) #NAT)
                                                         (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÅ) x‚ÇÅ) y‚ÇÅ)
                                                         (#APPLY (#APPLY (#APPLY #lam3AX g‚ÇÇ) x‚ÇÇ) y‚ÇÇ))
                aw5 w4 e4 y‚ÇÅ y‚ÇÇ ey =
                  equalInType-EQ
                    eqTypesNAT
                    concl
                  where
                    hyp : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 (#QBAIREn (#ŒΩtestMup F f)) f g‚ÇÅ)
                    hyp = equalInType-EQ‚Üí ey

                    ff : ‚ñ°¬∑ w3 (Œª w' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w' #BAIRE) w' x‚ÇÅ x‚ÇÇ)
                    ff = equalInTypeFFDEFS‚Üí ex

                    aw6 : ‚àÄùïé w4 (Œª w' e' ‚Üí equalInType i w' (#QBAIREn (#ŒΩtestMup F f)) f g‚ÇÅ
                                          ‚Üí ‚ÜëwPred (Œª w'' _ ‚Üí FFDEFSeq g‚ÇÅ (equalInType i w'' #BAIRE) w'' x‚ÇÅ x‚ÇÇ) e4 w' e'
                                          ‚Üí equalInType i w' #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                    aw6 w5 e5 h1 (g , h2 , nng) = equalInType-trans cc (‚ààBAIRE‚ÜíNAT‚Üí (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-sym h2))
                      where
                        h3 : equalInType i w5 (#QBAIREn (#ŒΩtestMup F f)) f g
                        h3 = equalInType-QBAIREn-BAIRE-trans h2 h1 (testM-QNAT cn kb gc i w5 F f (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))) (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))))

                        cc : equalInType i w5 #NAT (#APPLY F f) (#APPLY F g)
                        cc = {!!} {--eqfg cn kb gc {i} {w5} {F} {f} {g} nnF nnf nng
                                  (equalInType-mon ‚ààF w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))))
                                  (equalInType-mon ‚ààf w5 (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))))
                                  (equalInType-refl (equalInType-sym h2))
                                  h3--}

                    concl : ‚ñ°¬∑ w4 (Œª w5 _ ‚Üí equalInType i w5 #NAT (#APPLY F f) (#APPLY F g‚ÇÅ))
                    concl = ‚àÄùïé-‚ñ°Func2 aw6 hyp (Mod.‚Üë‚ñ° M ff e4)

        aw2 : ‚àÄùïé w1 (Œª w2 e2 ‚Üí (g‚ÇÅ g‚ÇÇ : CTerm) ‚Üí equalInType i w2 #BAIRE g‚ÇÅ g‚ÇÇ
                              ‚Üí equalInType i w2 (sub0 g‚ÇÅ (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                                                    (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû #ŒΩtestMup F f ‚åü))
                                                                             (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                             (#APPLY #lam3AX g‚ÇÅ) (#APPLY #lam3AX g‚ÇÇ))
        aw2 w2 e2 g‚ÇÅ g‚ÇÇ eg =
          ‚â°CTerm‚ÜíequalInType (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÅ)) (aw3 w2 e2 g‚ÇÅ g‚ÇÇ eg)

        eql2 : equalInType i w1 (#PI #BAIRE
                                     (#[0]FUN (#[0]FFDEFS #[0]BAIRE #[0]VAR)
                                              (#[0]FUN (#[0]EQ ‚åû f ‚åü #[0]VAR (#[0]QBAIREn ‚åû #ŒΩtestMup F f ‚åü))
                                                       (#[0]EQ (#[0]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[0]APPLY ‚åû F ‚åü #[0]VAR) #[0]NAT))))
                                  #lam3AX
                                  #lam3AX
        eql2 = equalInType-PI
                 (Œª w2 e2 ‚Üí eqTypesBAIRE)
                 (Œª w2 e2 g‚ÇÅ g‚ÇÇ eg ‚Üí ‚â°CTerm‚ÜíeqTypes (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÅ)) (sym (sub0-contQBodyPI-PI F f (#ŒΩtestMup F f) g‚ÇÇ)) (ea2 w2 e2 g‚ÇÅ g‚ÇÇ eg))
                 aw2

        eql1 : equalInType i w1 (sub0 (#ŒΩtestMup F f)
                                      (#[0]PI #[0]BAIRE
                                              (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                                       (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                                (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                                 #lam3AX
                                 #lam3AX
        eql1 = ‚â°CTerm‚ÜíequalInType (sym (sub0-contQBodyPI F f (#ŒΩtestMup F f))) eql2


    h0 : ‚ààType i w (#SUM #QNAT
                         (#[0]PI #[0]BAIRE
                                 (#[1]FUN (#[1]FFDEFS #[1]BAIRE #[1]VAR0)
                                          (#[1]FUN (#[1]EQ ‚åû f ‚åü #[1]VAR0 (#[1]QBAIREn #[1]VAR1))
                                                   (#[1]EQ (#[1]APPLY ‚åû F ‚åü ‚åû f ‚åü) (#[1]APPLY ‚åû F ‚åü #[1]VAR0) #[1]NAT)))))
                   (#PAIR (#ŒΩtestMup F f) #lam3AX)
    h0 = equalInType-SUM (Œª w' e' ‚Üí eqTypesQNAT) (equalTypes-contQBodyPI i w F F f f ‚ààF ‚ààf) (Mod.‚àÄùïé-‚ñ° M aw)

\end{code}
