\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS +RTS -M6G -RTS #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
--open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuitySMb {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                     (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                     (X : ChoiceExt W C)
                     (N : NewChoice {L} W C K G)
                     (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                     (EM : ExcludedMiddle (lsuc(L)))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

--open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity6(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4b(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity5b(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity6b(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import continuity7b(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity8b(W)(M)(C)(K)(P)(G)(X)(N)(E)



-- checks that n is the highest w.r.t. the name generated by 'FRESH'
isHighestFresh‚Ñï : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (n : ‚Ñï)
                ‚Üí steps k (FRESH a , w1) ‚â° (b , w2)
                ‚Üí Set
isHighestFresh‚Ñï {0} {w1} {w2} {a} {b} n comp rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•
isHighestFresh‚Ñï {suc k} {w1} {w2} {a} {b} n comp with step‚äé (FRESH a) w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  isHighest‚Ñï
    {k} {startNewChoiceT Res‚ä§ w1 a} {w2}
    {shiftNameDown 0 (renn 0 (newChoiceT+ w1 a) a)} {b} n
    (newChoiceT w1 a) comp
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing z)



isHighestFresh‚Ñï‚Üí‚â§ : (cn : comp‚Üí‚àÄ‚Ñï) (F f : Term) (cF : # F) (cf : # f)
                      {n1 : ‚Ñï} {w1 w1' : ùïé¬∑} {k1 : ‚Ñï} (comp1 : steps k1 (ŒΩtestMup F f , w1) ‚â° (NUM n1 , w1'))
                      (n2 : ‚Ñï)
--                      (w2 w2' : ùïé¬∑) (k2 : ‚Ñï) (comp2 : steps k2 (ŒΩtestMup F f , w2) ‚â° (NUM n2 , w2'))
                      ‚Üí isHighestFresh‚Ñï {k1} {w1} {w1'} {testMup 0 F f} {NUM n1} n2 comp1
                      ‚Üí n1 ‚â§ n2
isHighestFresh‚Ñï‚Üí‚â§ cn F f cF cf {n1} {w1} {w1'} {suc k1} comp1 n2 ish
  rewrite shiftNameDown-renn-shiftNameUp (newChoiceT w1 (testMup 0 F f)) F f cF cf =
  isHighest‚Ñï‚Üí‚â§ cn F f cF cf name n1 w0 w1' k1 comp1 n2 compat ish
  where
    name : Name
    name = newChoiceT w1 (testMup 0 F f)

    w0 : ùïé¬∑
    w0 = startNewChoiceT Res‚ä§ w1 (testMup 0 F f)

    compat : compatible¬∑ name w0 Res‚ä§
    compat = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨newChoiceT‚ààdomùïé w1 (testMup 0 F f))


isHighestFresh‚Ñï‚Üí‚â§-LOAD : (cn : comp‚Üí‚àÄ‚Ñï) (F f : Term) (cF : # F) (cf : # f)
                      {n1 : ‚Ñï} {w1 w1' : ùïé¬∑} {k1 : ‚Ñï} (comp1 : steps k1 (ŒΩtestMup F f , w1) ‚â° (NUM n1 , w1'))
                      (n2 : ‚Ñï)
--                      (w2 w2' : ùïé¬∑) (k2 : ‚Ñï) (comp2 : steps k2 (ŒΩtestMup F f , w2) ‚â° (NUM n2 , w2'))
                      ‚Üí isHighestFresh‚Ñï {k1} {w1} {w1'} {testMup 0 F f} {NUM n1} n2 comp1
                      ‚Üí n1 ‚â§ n2
isHighestFresh‚Ñï‚Üí‚â§-LOAD cn F f cF cf {n1} {w1} {w1'} {suc k1} comp1 n2 ish
  rewrite shiftNameDown-renn-shiftNameUp (newChoiceT w1 (testMup 0 F f)) F f cF cf =
  isHighest‚Ñï‚Üí‚â§ cn F f cF cf name n1 w0 w1' k1 comp1 n2 compat ish
  where
    name : Name
    name = newChoiceT w1 (testMup 0 F f)

    w0 : ùïé¬∑
    w0 = startNewChoiceT Res‚ä§ w1 (testMup 0 F f)

    compat : compatible¬∑ name w0 Res‚ä§
    compat = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨newChoiceT‚ààdomùïé w1 (testMup 0 F f))




-- This is capturing the fact there is a world w1 ‚äí w such that all ‚Ñïs that f gets applied to in
-- the computation of #ŒΩtestMup F f, are smaller than all #ŒΩtestMup F f for all extensions of w
-- (i.e., w1 is the world with the smallest modulus of continuity among the extensions of w)
smallestModAuxAux : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                    (w1 : ùïé¬∑) (e1 : w ‚äë¬∑ w1) (w2 : ùïé¬∑) (e2 : w ‚äë¬∑ w2)
                    ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                    ‚Üí ‚ààType i w #BAIRE f
                    ‚Üí Set(lsuc L)
smallestModAuxAux cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf =
  Lift {0‚Ñì} (lsuc(L))
       (isHighestFresh‚Ñï {fst (snd (snd h1))} {w1} {fst (snd h1)} {testMup 0 ‚åú F ‚åù ‚åú f ‚åù}
                         {NUM (fst h1)} (fst h2) (snd (snd (snd h1))))
   where
      h1 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1 to w'))
      h1 = ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

      h2 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w2 to w'))
      h2 = ŒΩtestMup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon ‚ààF w2 e2) (equalInType-mon ‚ààf w2 e2)



smallestModAux : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                 (w1 : ùïé¬∑) (e1 : w ‚äë¬∑ w1)
                 ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                 ‚Üí ‚ààType i w #BAIRE f
                 ‚Üí Set(lsuc L)
smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf =
  ‚àÄùïé w (Œª w2 e2 ‚Üí smallestModAuxAux cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf)


smallestMod : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
              ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
              ‚Üí ‚ààType i w #BAIRE f
              ‚Üí Set(lsuc L)
smallestMod cn kb gc i w F f ‚ààF ‚ààf =
  ‚àÉùïé w (Œª w1 e1 ‚Üí smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf)



‚àÄùïésmallestMod : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                 ‚Üí ‚ààType i w #BAIRE‚ÜíNAT F
                 ‚Üí ‚ààType i w #BAIRE f
                 ‚Üí Set(lsuc L)
‚àÄùïésmallestMod cn kb gc i w F f ‚ààF ‚ààf =
  ‚àÄùïé w (Œª w1 e1 ‚Üí smallestMod cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1))


¬¨‚àÄùïé‚Üí : {w : ùïé¬∑} {P : wPred w}
         ‚Üí ¬¨ ‚àÄùïé w P
         ‚Üí ‚àÉùïé w (Œª w1 e1 ‚Üí ¬¨ (P w1 e1))
¬¨‚àÄùïé‚Üí {w} {P} h with EM {‚àÉùïé w (Œª w1 e1 ‚Üí ¬¨ (P w1 e1))}
... | yes p = p
... | no p = ‚ä•-elim (h h1)
  where
    h1 : ‚àÄùïé w P
    h1 w1 e1 with EM {P w1 e1}
    ... | yes q = q
    ... | no q = ‚ä•-elim (p (w1 , e1 , q))


¬¨‚àÉùïé‚Üí : {w : ùïé¬∑} {P : wPred w}
         ‚Üí ¬¨ ‚àÉùïé w P
         ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ¬¨ (P w1 e1))
¬¨‚àÉùïé‚Üí {w} {P} h w1 e1 q = h (w1 , e1 , q)


¬¨‚àÄùïésmallestMod‚Üí1 : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                    ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
                    ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
                    ‚Üí ¬¨ smallestMod cn kb gc i w F f ‚ààF ‚ààf
                    ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w (Œª w2 e2 ‚Üí
                         ¬¨ smallestModAuxAux
                             cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf))
¬¨‚àÄùïésmallestMod‚Üí1 cn kb gc i w F f ‚ààF ‚ààf h w1 e1 = h1
  where
    h1 : ‚àÉùïé w (Œª w2 e2 ‚Üí ¬¨ smallestModAuxAux cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf)
    h1 = ¬¨‚àÄùïé‚Üí (¬¨‚àÉùïé‚Üí h w1 e1)


¬¨‚àÄùïésmallestMod‚Üí : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                    ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
                    ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
                    ‚Üí ¬¨ ‚àÄùïésmallestMod cn kb gc i w F f ‚ààF ‚ààf
                    ‚Üí ‚àÉùïé w (Œª w0 e0 ‚Üí ‚àÄùïé w0 (Œª w1 e1 ‚Üí ‚àÉùïé w0 (Œª w2 e2 ‚Üí
                         ¬¨ smallestModAuxAux
                             cn kb gc i w0 F f w1 e1 w2 e2
                             (equalInType-mon ‚ààF w0 e0) (equalInType-mon ‚ààf w0 e0))))
¬¨‚àÄùïésmallestMod‚Üí cn kb gc i w F f ‚ààF ‚ààf h =
  fst h1 , fst (snd h1) ,
  ¬¨‚àÄùïésmallestMod‚Üí1
    cn kb gc i (fst h1) F f
    (equalInType-mon ‚ààF (fst h1) (fst (snd h1)))
    (equalInType-mon ‚ààf (fst h1) (fst (snd h1)))
    (snd (snd h1))
  where
    h1 : ‚àÉùïé w (Œª w0 e0 ‚Üí ¬¨ smallestMod cn kb gc i w0 F f (equalInType-mon ‚ààF w0 e0) (equalInType-mon ‚ààf w0 e0))
    h1 = ¬¨‚àÄùïé‚Üí h



‚â°‚ÜíisHighest‚Ñï : (k : ‚Ñï) (name : Name) (a a' b : Term) (w1 w2 : ùïé¬∑) (n : ‚Ñï)
                 ‚Üí ((comp : steps k (a , w1) ‚â° (b , w2)) ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp)
                 ‚Üí a ‚â° a'
                 ‚Üí (comp : steps k (a' , w1) ‚â° (b , w2))
                 ‚Üí isHighest‚Ñï {k} {w1} {w2} {a'} {b} n name comp
‚â°‚ÜíisHighest‚Ñï k name a a' b w1 w2 n imp e comp rewrite e = imp comp


-- MOVE and use in continuity1b
sub-AX-testM : (name : Name) (F f : Term) (cF : # F) (cf : # f)
               ‚Üí sub AX (shiftUp 0 (testM name F f)) ‚â° testM name F f
sub-AX-testM name F f cF cf
  rewrite #shiftUp 0 (#testM name (ct F cF) (ct f cf))
        | subNotIn AX (testM name F f) (CTerm.closed (#testM name (ct F cF) (ct f cf)))
        | #shiftUp 0 (ct F cF)
        | #shiftUp 1 (ct F cF)
        | #shiftUp 0 (ct f cf)
        | #shiftUp 3 (ct f cf)
        | #shiftUp 4 (ct f cf)
        | #subv 1 AX F cF
        | #shiftDown 1 (ct F cF)
        | #subv 4 AX f cf
        | #shiftDown 4 (ct f cf) = refl


{--
‚Üí‚Üìvars-names-testMup-F : (v : Name) (F f : Term)
                          ‚Üí v ‚àà names F
                          ‚Üí v ‚àà ‚Üìvars (names (testMup 0 F f))
‚Üí‚Üìvars-names-testMup-F v F f i
  rewrite names-shiftUp 1 (shiftUp 0 (shiftNameUp 0 F))
        | names-shiftUp 4 (shiftUp 3 (shiftUp 0 (shiftNameUp 0 f)))
        | names-shiftUp 0 (shiftNameUp 0 F)
        | names-shiftUp 3 (shiftUp 0 (shiftNameUp 0 f))
        | names-shiftUp 0 (shiftNameUp 0 f)
        | ‚Üìvars++ (names (shiftNameUp 0 F) ++ 0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) [ 0 ]
        | ‚Üìvars++ (names (shiftNameUp 0 F)) (0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) =
  there (‚àà-++‚Å∫À° (‚àà-++‚Å∫À° j))
  where
    j : v ‚àà ‚Üìvars (names (shiftNameUp 0 F))
    j rewrite names-shiftNameUp‚â° 0 F = ‚Üí‚àà‚Üìvars-map-suc v (names F) i
--}


{--
‚Üí‚Üìvars-names-testMup-f : (v : Name) (F f : Term)
                          ‚Üí v ‚àà names f
                          ‚Üí v ‚àà ‚Üìvars (names (testMup 0 F f))
‚Üí‚Üìvars-names-testMup-f v F f i
  rewrite names-shiftUp 1 (shiftUp 0 (shiftNameUp 0 F))
        | names-shiftUp 4 (shiftUp 3 (shiftUp 0 (shiftNameUp 0 f)))
        | names-shiftUp 0 (shiftNameUp 0 F)
        | names-shiftUp 3 (shiftUp 0 (shiftNameUp 0 f))
        | names-shiftUp 0 (shiftNameUp 0 f)
        | ‚Üìvars++ (names (shiftNameUp 0 F) ++ 0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ []) [ 0 ]
        | ‚Üìvars++ (names (shiftNameUp 0 F)) (0 ‚à∑ 0 ‚à∑ names (shiftNameUp 0 f) ++ [])
        | ++[] (names (shiftNameUp 0 f)) =
  there (‚àà-++‚Å∫À° (‚àà-++‚Å∫ ≥ (‚Üìvars (names (shiftNameUp 0 F))) (there (there j))))
  where
    j : v ‚àà ‚Üìvars (names (shiftNameUp 0 f))
    j rewrite names-shiftNameUp‚â° 0 f = ‚Üí‚àà‚Üìvars-map-suc v (names f) i
--}


{--
¬¨newChoiceT-testMup‚àànamesùïé : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà namesùïé¬∑ w
¬¨newChoiceT-testMup‚àànamesùïé w F f i =
  snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f))))
      (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫À° i))


¬¨newChoiceT-testMup‚àànames-F : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà names F
¬¨newChoiceT-testMup‚àànames-F w F f i = q (‚Üí‚Üìvars-names-testMup-F (newChoiceT w (testMup 0 F f)) F f i)
  where
    q : ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà ‚Üìvars (names (testMup 0 F f))
    q = Œª x ‚Üí snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f)))) (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) x))



¬¨newChoiceT-testMup‚àànames-f : (w : ùïé¬∑) (F f : Term)
                            ‚Üí ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà names f
¬¨newChoiceT-testMup‚àànames-f w F f i = q (‚Üí‚Üìvars-names-testMup-f (newChoiceT w (testMup 0 F f)) F f i)
  where
    q : ¬¨ (newChoiceT w (testMup 0 F f)) ‚àà ‚Üìvars (names (testMup 0 F f))
    q = Œª x ‚Üí snd (freshName (domùïé¬∑ w ++ namesùïé¬∑ w ++ ‚Üìvars (names (testMup 0 F f)))) (‚àà-++‚Å∫ ≥ (domùïé¬∑ w) (‚àà-++‚Å∫ ≥ (namesùïé¬∑ w) x))
--}


sub-AX-probeM : (name : Name) (F f : Term) (cF : # F) (cf : # f)
               ‚Üí sub AX (shiftUp 0 (probeM name F f)) ‚â° probeM name F f
sub-AX-probeM name F f cF cf
  rewrite #shiftUp 0 (#probeM name (ct F cF) (ct f cf))
        | subNotIn AX (probeM name F f) (CTerm.closed (#probeM name (ct F cF) (ct f cf)))
        | #shiftUp 0 (ct F cF)
        | #subv 0 AX F cF
        | #shiftUp 0 (ct f cf)
        | #shiftUp 3 (ct f cf)
        | #subv 3 AX f cf
        | #shiftDown 3 (ct f cf)
        | #shiftDown 0 (ct F cF)
  = refl



‚ÜíisHighest‚Ñï-aux4 : (cc : ContConds) (gc : get-choose-‚Ñï) (k : ‚Ñï) (name : Name) (F f : Term) (cF : # F) (cf : # f) (w1 w2 : ùïé¬∑) (n1 : ‚Ñï)
                     ‚Üí ¬¨ name ‚àà names F
                     ‚Üí ¬¨ name ‚àà names f
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                     ‚Üí name ‚àà domùïé¬∑ w1
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí ‚àÄùïé-get0-NUM w1 name
                     ‚Üí getT‚â§‚Ñï w2 n1 name
                     ‚Üí (comp : steps k (probeM name F f , w1) ‚â° (NUM n1 , w2))
                     ‚Üí isHighest‚Ñï {k} {w1} {w2} {probeM name F f} {NUM n1} n1 name comp
‚ÜíisHighest‚Ñï-aux4 cc gc k name F f cF cf w1 w2 n1 nnF nnf nnw idom compat wgt0 gtw comp =
  fst (steps-sat-isHighest‚Ñï2
             cc gc {name} {f} {k} nnf cf
             {w1} {w2} {probeM name F f} {NUM n1} {n1}
             comp tt
             (updCtxt2-LET _ _ (updCtxt2-APPLY F (upd name f) (updCtxt2-refl name f F nnF) updCtxt2-upd) (updCtxt2-SUC _ (updCtxt2-APPLY _ _ (updCtxt2-CS _) (updCtxt2-NUM _))))
             compat wgt0 nnw idom) gtw



{--
getT‚â§‚Ñï-chooseT‚Üí : (name : name) (w : ùïé¬∑) (n : ‚Ñï)
                    ‚Üí getT‚â§‚Ñï (chooseT name w (NUM 0)) n name
                    ‚Üí getT‚â§‚Ñï w n name
getT‚â§‚Ñï-chooseT‚Üí name w n (
--}


‚ÜíisHighest‚Ñï-aux3 : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (gc : get-choose-‚Ñï) (k : ‚Ñï) (name : Name) (F f : Term) (cF : # F) (cf : # f) (w1 w2 : ùïé¬∑) (n1 : ‚Ñï)
                     ‚Üí ¬¨ name ‚àà names F
                     ‚Üí ¬¨ name ‚àà names f
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                     ‚Üí name ‚àà domùïé¬∑ w1
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí getT‚â§‚Ñï w1 n1 name
                     ‚Üí getT‚â§‚Ñï w2 n1 name
                     ‚Üí (comp : steps k (testM name F f , w1) ‚â° (NUM n1 , w2))
                     ‚Üí isHighest‚Ñï {k} {w1} {w2} {testM name F f} {NUM n1} n1 name comp
‚ÜíisHighest‚Ñï-aux3 cc cn gc 0 name F f cF cf w1 w2 n1 nnF nnf nnw idom compat gtw1 gtw2 ()
‚ÜíisHighest‚Ñï-aux3 cc cn gc 1 name F f cF cf w1 w2 n1 nnF nnf nnw idom compat gtw1 gtw2 ()
‚ÜíisHighest‚Ñï-aux3 cc cn gc (suc (suc k)) name F f cF cf w1 w2 n1 nnF nnf nnw idom compat gtw1 gtw2 comp =
  gtw1 , q4 ,
  ‚â°‚ÜíisHighest‚Ñï k name (probeM name F f) (sub AX (shiftUp 0 (probeM name F f)))
    (NUM n1) (chooseT name w1 (NUM 0)) w2 n1
    q1 (sym (sub-AX-probeM name F f cF cf)) comp
  where
    nnw' : ¬¨ name ‚àà namesùïé¬∑ (chooseT name w1 (NUM 0))
    nnw' = Œª x ‚Üí nnw (namesùïé-chooseT‚Üí cc name name w1 (NUM 0) x)

    idom' : name ‚àà domùïé¬∑ (chooseT name w1 (NUM 0))
    idom' = domùïé-chooseT cc name name w1 (NUM 0) idom

    compat' : compatible¬∑ name (chooseT name w1 (NUM 0)) Res‚ä§
    compat' = ‚äë-compatible¬∑ (choose‚äë¬∑ name w1 (T‚Üí‚ÑÇ¬∑ (NUM 0))) compat

    q1 : (comp‚ÇÅ  : steps k (probeM name F f , chooseT name w1 (NUM 0)) ‚â° (NUM n1 , w2))
         ‚Üí isHighest‚Ñï {k} {chooseT name w1 (NUM 0)} {w2} {probeM name F f} {NUM n1} n1 name comp‚ÇÅ
    q1 = ‚ÜíisHighest‚Ñï-aux4
           cc gc k name F f cF cf (chooseT name w1 (NUM 0)) w2 n1 nnF nnf
           nnw' idom' compat' (cn name w1 0 compat) gtw2

    q2 : steps k (probeM name F f , chooseT name w1 (NUM 0)) ‚â° (NUM n1 , w2)
    q2 rewrite sub-AX-probeM name F f cF cf = comp

    q3 : isHighest‚Ñï {k} {chooseT name w1 (NUM 0)} {w2} {probeM name F f} {NUM n1} n1 name q2
    q3 = q1 q2

    q4 : getT‚â§‚Ñï (chooseT name w1 (NUM 0)) n1 name
    q4 = isHighest‚Ñï‚ÜígetT‚â§‚Ñï {k} {chooseT name w1 (NUM 0)} {w2} {probeM name F f} {NUM n1} n1 name q2 q3


steps-testM‚ÜígetT‚â§‚Ñï : (cn : comp‚Üí‚àÄ‚Ñï) (k : ‚Ñï) (name : Name) (F f : Term) (cF : # F) (cf : # f) (w1 w2 : ùïé¬∑) (n : ‚Ñï)
                        ‚Üí compatible¬∑ name w1 Res‚ä§
                        ‚Üí steps k (testM name F f , w1) ‚â° (NUM n , w2)
                        ‚Üí getT‚â§‚Ñï w2 n name
steps-testM‚ÜígetT‚â§‚Ñï cn k name F f cF cf w1 w2 n compat comp =
  fst (snd h) , fst (snd (snd (snd (snd h)))) , ‚â°suc‚Üí< (snd (snd (snd (snd (snd h)))))
  where
    h : Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
          APPLY F (upd name f) ‚áì v from (chooseT name w1 {--(startNewChoices Res‚ä§ w1 F)--} (NUM 0)) to w2
          √ó isValue v
          √ó getT 0 name w2 ‚â° just (NUM j)
          √ó n ‚â° suc j))
    h = testM‚áì‚Üí cn {w1} {w2} {F} {f} {n} {name} cF cf compat (k , comp)


steps-testM‚Üí0< : (cn : comp‚Üí‚àÄ‚Ñï) (k : ‚Ñï) (name : Name) (F f : Term) (cF : # F) (cf : # f) (w1 w2 : ùïé¬∑) (n : ‚Ñï)
                        ‚Üí compatible¬∑ name w1 Res‚ä§
                        ‚Üí steps k (testM name F f , w1) ‚â° (NUM n , w2)
                        ‚Üí 0 < n
steps-testM‚Üí0< cn k name F f cF cf w1 w2 n compat comp = c
  where
    h : Œ£ Term (Œª v ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
          APPLY F (upd name f) ‚áì v from (chooseT name w1 {--(startNewChoices Res‚ä§ w1 F)--} (NUM 0)) to w2
          √ó isValue v
          √ó getT 0 name w2 ‚â° just (NUM j)
          √ó n ‚â° suc j))
    h = testM‚áì‚Üí cn {w1} {w2} {F} {f} {n} {name} cF cf compat (k , comp)

    c : 0 < n
    c rewrite snd (snd (snd (snd (snd h)))) = _‚â§_.s‚â§s _‚â§_.z‚â§n



‚ÜígetT‚â§‚Ñï-startNewChoices : (cc : ContConds) (w : ùïé¬∑) (a : Term) (n : ‚Ñï) (name : Name)
                            ‚Üí name ‚àà domùïé¬∑ w
                            ‚Üí getT‚â§‚Ñï w n name
                            ‚Üí getT‚â§‚Ñï (startNewChoices Res‚ä§ w a) n name
‚ÜígetT‚â§‚Ñï-startNewChoices cc w a n name idom (j , g , x) =
  j , trans (getT-startNewChoices‚â° cc name w a 0 idom) g , x



‚ÜíisHighest‚Ñï-aux2 : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (gc : get-choose-‚Ñï) (k : ‚Ñï) (name : Name) (F f : Term) (cF : # F) (cf : # f) (w1 w2 : ùïé¬∑) (n1 : ‚Ñï)
                     ‚Üí ¬¨ name ‚àà names F
                     ‚Üí ¬¨ name ‚àà names f
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                     ‚Üí name ‚àà domùïé¬∑ w1
                     ‚Üí getT‚â§‚Ñï w1 n1 name
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí (comp : steps k (testM name F f , w1) ‚â° (NUM n1 , w2))
                     ‚Üí isHighest‚Ñï {k} {w1} {w2} {testM name F f} {NUM n1} n1 name comp
‚ÜíisHighest‚Ñï-aux2 cc cn gc k name F f cF cf w1 w2 n1 nnF nnf nnw idom gtw compat comp =
  ‚ÜíisHighest‚Ñï-aux3
     cc cn gc k name F f cF cf w1 {--(startNewChoices Res‚ä§ w1 F)--} w2 n1 nnF nnf
     nnw idom compat gtw
     (steps-testM‚ÜígetT‚â§‚Ñï cn k name F f cF cf w1 w2 n1 compat comp)
     comp
{--
 ()
‚ÜíisHighest‚Ñï-aux2 cc cn gc 1 name F f cF cf w1 w2 n1 nnF nnf nnw idom gtw compat ()
‚ÜíisHighest‚Ñï-aux2 cc cn gc (suc (suc k)) name F f cF cf w1 w2 n1 nnF nnf nnw idom gtw compat comp =
  gtw , {!!} {--gtw--} ,
  {!!} {--‚â°‚ÜíisHighest‚Ñï k name (testM name F f) (sub AX (shiftUp 0 (testM name F f)))
    (NUM n1) w1 {--(startNewChoices Res‚ä§ w1 F)--} w2 n1
    q1
    (sym (sub-AX-testM name F f cF cf)) ? {--comp--}
--}
  where
--    nnw' : ¬¨ name ‚àà namesùïé¬∑ (startNewChoices Res‚ä§ w1 F)
--    nnw' = ‚Üí¬¨namesùïé-startNewChoices cc w1 F name nnw

--    idom' : name ‚àà domùïé¬∑ (startNewChoices Res‚ä§ w1 F)
--    idom' = ‚äÜdomùïé-startNewChoices cc w1 F idom

--    compat' : compatible¬∑ name (startNewChoices Res‚ä§ w1 F) Res‚ä§
--    compat' = ‚äë-compatible¬∑ (startNewChoices‚äë Res‚ä§ w1 F) compat

--    gtw' : getT‚â§‚Ñï w1 {--(startNewChoices Res‚ä§ w1 F)--} n1 name
--    gtw' = ‚ÜígetT‚â§‚Ñï-startNewChoices cc w1 F n1 name idom gtw

    q1 : (comp‚ÇÅ : steps k (testM name F f , w1 {--startNewChoices Res‚ä§ w1 F--}) ‚â° (NUM n1 , w2))
         ‚Üí isHighest‚Ñï {k} {w1 {--startNewChoices Res‚ä§ w1 F--}} {w2} {testM name F f} {NUM n1} n1 name comp‚ÇÅ
    q1 = ‚ÜíisHighest‚Ñï-aux3
           cc cn gc k name F f cF cf w1 {--(startNewChoices Res‚ä§ w1 F)--} w2 n1 nnF nnf
           nnw idom compat gtw
           (steps-testM‚ÜígetT‚â§‚Ñï cn (suc (suc k)) name F f cF cf w1 w2 n1 compat comp)
--}


‚ÜíisHighest‚Ñï-aux1 : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (gc : get-choose-‚Ñï) (k : ‚Ñï) (name : Name) (F f : Term) (cF : # F) (cf : # f) (w1 w2 : ùïé¬∑) (n1 : ‚Ñï)
                     ‚Üí ¬¨ name ‚àà names F
                     ‚Üí ¬¨ name ‚àà names f
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                     ‚Üí name ‚àà domùïé¬∑ w1
                     ‚Üí getT‚â§‚Ñï w1 n1 name
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí (comp : steps k (shiftNameDown 0 (renn 0 (suc name) (testMup 0 F f)) , w1) ‚â° (NUM n1 , w2))
                     ‚Üí isHighest‚Ñï {k} {w1} {w2} {shiftNameDown 0 (renn 0 (suc name) (testMup 0 F f))} {NUM n1} n1 name comp
‚ÜíisHighest‚Ñï-aux1 cc cn gc k name F f cF cf w1 w2 n1 nnF nnf nnw idom gtw compat comp =
  ‚â°‚ÜíisHighest‚Ñï k name (testM name F f)
    (shiftNameDown 0 (renn 0 (suc name) (testMup 0 F f))) (NUM n1) w1
    w2 n1
    (‚ÜíisHighest‚Ñï-aux2 cc cn gc k name F f cF cf w1 w2 n1 nnF nnf nnw idom gtw compat) --(‚ÜíisHighest‚Ñï-aux3 cc cn gc k name F f cF cf w1 w2 n1 nnF nnf nnw idom gtw compat)
    (sym (shiftNameDown-renn-shiftNameUp name F f cF cf))
    comp



getT‚â§‚Ñï‚â§ : {n1 n2 : ‚Ñï} (h : n1 ‚â§ n2) {w : ùïé¬∑} {name : Name}
           ‚Üí getT‚â§‚Ñï w n1 name
           ‚Üí getT‚â§‚Ñï w n2 name
getT‚â§‚Ñï‚â§ {n1} {n2} h {w} {name} (j , u , v) = j , u , ‚â§-trans v h


isHighest‚Ñï‚â§ : (k : ‚Ñï) (w1 w2 : ùïé¬∑) (a b : Term) (n1 n2 : ‚Ñï) (name : Name)
               (comp : steps k (a , w1) ‚â° (b , w2))
               ‚Üí n1 ‚â§ n2
               ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n1 name comp
               ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n2 name comp
isHighest‚Ñï‚â§ 0 w1 w2 a b n1 n2 name comp h q = getT‚â§‚Ñï‚â§ h q
isHighest‚Ñï‚â§ (suc k) w1 w2 a b n1 n2 name comp h q with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z =
  getT‚â§‚Ñï‚â§ h (fst q) , isHighest‚Ñï‚â§ k w1' w2 a' b n1 n2 name comp h (snd q)
... | inj‚ÇÇ z rewrite z = getT‚â§‚Ñï‚â§ h q



‚ÜísmallestModAuxAux : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                       (w1 : ùïé¬∑) (e1 : w ‚äë¬∑ w1) (w2 : ùïé¬∑) (e2 : w ‚äë¬∑ w2)
                       ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
                       ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
                       ‚Üí fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1))
                          ‚â§ fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon ‚ààF w2 e2) (equalInType-mon ‚ààf w2 e2))
                       ‚Üí smallestModAuxAux cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf
‚ÜísmallestModAuxAux cc cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf h
  with ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)
     | ŒΩtestMup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon ‚ààF w2 e2) (equalInType-mon ‚ààf w2 e2)
... | n1 , w1' , 0 , () | n2 , w2' , k2 , c2
... | n1 , w1' , suc k1 , c1 | n2 , w2' , 0 , ()
... | n1 , w1' , suc k1 , c1 | n2 , w2' , suc k2 , c2 =
  lift (isHighest‚Ñï‚â§ k1 w0 w1'
          (shiftNameDown 0 (renn 0 (suc name) (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)))
          (NUM n1) n1 n2 name c1 h h1)
  where
    name : Name
    name = newChoiceT w1 (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)

    w0 : ùïé¬∑
    w0 = startNewChoiceT Res‚ä§ w1 (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)

    compat : compatible¬∑ name w0 Res‚ä§
    compat = startChoiceCompatible¬∑ Res‚ä§ w1 name (¬¨fresh‚ààdomùïé2 w1 (namesùïé¬∑ w1) (‚Üìvars (names (testMup 0 ‚åú F ‚åù ‚åú f ‚åù))))

    nnw : ¬¨ name ‚àà namesùïé¬∑ w0
    nnw = Œª i ‚Üí ¬¨newChoiceT-testMup‚àànamesùïé w1 ‚åú F ‚åù ‚åú f ‚åù (‚àànamesùïé-startNewChoiceT‚Üí cc name w1 (testMup 0 ‚åú F ‚åù ‚åú f ‚åù) i)

    idom : name ‚àà domùïé¬∑ w0
    idom = newChoiceT‚ààdomùïé cc w1 (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)

    nidom : ¬¨ name ‚àà domùïé¬∑ w1
    nidom = ¬¨fresh‚ààdomùïé2 w1 (namesùïé¬∑ w1) (‚Üìvars (names (testMup 0 ‚åú F ‚åù ‚åú f ‚åù)))

    c1' : steps k1 (testM name ‚åú F ‚åù ‚åú f ‚åù , w0) ‚â° (NUM n1 , w1')
    c1' rewrite shiftNameDown-renn-shiftNameUp name ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) = c1

    gtw : getT‚â§‚Ñï w0 n1 name
    gtw = 0 , ContConds.ccGstart0 cc name w1 (testMup 0 ‚åú F ‚åù ‚åú f ‚åù) nidom ,
          steps-testM‚Üí0< cn k1 name ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) w0 w1' n1 compat c1'

    h1 : isHighest‚Ñï {k1} {w0} {w1'} {shiftNameDown 0 (renn 0 (suc name) (testMup 0 ‚åú F ‚åù ‚åú f ‚åù))} {NUM n1} n1 name c1
    h1 = ‚ÜíisHighest‚Ñï-aux1
           cc cn gc k1 name ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) w0 w1' n1
           (¬¨newChoiceT-testMup‚àànames-F w1 ‚åú F ‚åù ‚åú f ‚åù)
           (¬¨newChoiceT-testMup‚àànames-f w1 ‚åú F ‚åù ‚åú f ‚åù)
           nnw idom gtw compat
           c1


¬¨smallestModAuxAux‚Üí : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                       (w1 : ùïé¬∑) (e1 : w ‚äë¬∑ w1) (w2 : ùïé¬∑) (e2 : w ‚äë¬∑ w2)
                       ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
                       ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
                       ‚Üí ¬¨ smallestModAuxAux cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf
                       ‚Üí fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon ‚ààF w2 e2) (equalInType-mon ‚ààf w2 e2))
                          < fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1))
¬¨smallestModAuxAux‚Üí cc cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf h
  with fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon ‚ààF w2 e2) (equalInType-mon ‚ààf w2 e2))
        <? fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1))
... | yes q = q
... | no q = ‚ä•-elim (h (‚ÜísmallestModAuxAux cc cn kb gc i w F f w1 e1 w2 e2 ‚ààF ‚ààf (‚âÆ‚áí‚â• q)))



‚àÄùïésmallestMod‚ä§-aux : (w : ùïé¬∑) (F : (w' : ùïé¬∑) (e : w ‚äë¬∑ w') ‚Üí ‚Ñï) (n : ‚Ñï)
                      ‚Üí ‚àÉùïé w (Œª w0 e0 ‚Üí Lift {0‚Ñì} (lsuc(L)) (n ‚â° F w0 e0))
                      ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w (Œª w2 e2 ‚Üí Lift {0‚Ñì} (lsuc(L)) (F w2 e2 < F w1 e1)))
                      ‚Üí ‚ä•
‚àÄùïésmallestMod‚ä§-aux w F =
  <‚Ñïind _ q
  where
    q : (n : ‚Ñï) ‚Üí ((m : ‚Ñï) ‚Üí m < n
                             ‚Üí ‚àÉùïé w (Œª w0 e0 ‚Üí Lift (lsuc L) (m ‚â° F w0 e0))
                             ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w (Œª w2 e2 ‚Üí Lift (lsuc L) (F w2 e2 < F w1 e1)))
                             ‚Üí ‚ä•)
                ‚Üí ‚àÉùïé w (Œª w0 e0 ‚Üí Lift (lsuc L) (n ‚â° F w0 e0))
                ‚Üí ‚àÄùïé w (Œª w1 e1 ‚Üí ‚àÉùïé w (Œª w2 e2 ‚Üí Lift (lsuc L) (F w2 e2 < F w1 e1)))
                ‚Üí ‚ä•
    q n ind (w0 , e0 , lift z) h rewrite z =
      ind (F (fst (h w0 e0)) (fst (snd (h w0 e0))))
          (lower (snd (snd (h w0 e0))))
          (fst (h w0 e0) , fst (snd (h w0 e0)) , lift refl)
          h


‚àÄùïésmallestMod‚ä§ : (cc : ContConds) (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (F f : CTerm)
                 ‚Üí (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
                 ‚Üí (‚ààf : ‚ààType i w #BAIRE f)
                 ‚Üí ‚àÄùïésmallestMod cn kb gc i w F f ‚ààF ‚ààf
‚àÄùïésmallestMod‚ä§ cc cn kb gc i w F f ‚ààF ‚ààf with EM {‚àÄùïésmallestMod cn kb gc i w F f ‚ààF ‚ààf}
... | yes p = p
... | no p = ‚ä•-elim (‚àÄùïésmallestMod‚ä§-aux
                       w0
                       (Œª w' e ‚Üí fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w' F f (equalInType-mon (equalInType-mon ‚ààF w0 e0) w' e) (equalInType-mon (equalInType-mon ‚ààf w0 e0) w' e)))
                       (fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w0 F f (equalInType-mon (equalInType-mon ‚ààF w0 e0) w0 (‚äë-refl¬∑ w0)) (equalInType-mon (equalInType-mon ‚ààf w0 e0) w0 (‚äë-refl¬∑ w0))))
                       (w0 , ‚äë-refl¬∑ w0 , lift refl)
                       h1)
  where
    h : ‚àÉùïé w (Œª w0 e0 ‚Üí ‚àÄùïé w0 (Œª w1 e1 ‚Üí ‚àÉùïé w0 (Œª w2 e2 ‚Üí
                         ¬¨ smallestModAuxAux
                             cn kb gc i w0 F f w1 e1 w2 e2
                             (equalInType-mon ‚ààF w0 e0) (equalInType-mon ‚ààf w0 e0))))
    h = ¬¨‚àÄùïésmallestMod‚Üí cn kb gc i w F f ‚ààF ‚ààf p

    w0 : ùïé¬∑
    w0 = fst h

    e0 : w ‚äë¬∑ w0
    e0 = fst (snd h)

    h0 : ‚àÄùïé w0 (Œª w1 e1 ‚Üí ‚àÉùïé w0 (Œª w2 e2 ‚Üí
                         ¬¨ smallestModAuxAux
                             cn kb gc i w0 F f w1 e1 w2 e2
                             (equalInType-mon ‚ààF w0 e0) (equalInType-mon ‚ààf w0 e0)))
    h0 = snd (snd h)

    h1 : ‚àÄùïé w0 (Œª w1 e1 ‚Üí ‚àÉùïé w0 (Œª w2 e2 ‚Üí
           Lift {0‚Ñì} (lsuc(L)) (fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w2 F f (equalInType-mon (equalInType-mon ‚ààF w0 e0) w2 e2) (equalInType-mon (equalInType-mon ‚ààf w0 e0) w2 e2))
                                < fst (ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon (equalInType-mon ‚ààF w0 e0) w1 e1) (equalInType-mon (equalInType-mon ‚ààf w0 e0) w1 e1)))))
    h1 w1 e1 = fst (h0 w1 e1) ,
               fst (snd (h0 w1 e1)) ,
               lift (¬¨smallestModAuxAux‚Üí
                       cc cn kb gc i w0 F f w1 e1 (fst (h0 w1 e1))
                       (fst (snd (h0 w1 e1)))
                       (equalInType-mon ‚ààF w0 e0)
                       (equalInType-mon ‚ààf w0 e0)
                       (snd (snd (h0 w1 e1))))



abstract
  smallestModAux‚ÜíNATeq : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm} {w1 : ùïé¬∑} {e1 : w ‚äë¬∑ w1}
      (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
      (‚ààf : ‚ààType i w #BAIRE f)
      ‚Üí smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf
      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï)
                         ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMup F f #‚áì #NUM n at w'' √ó k < n)))
                         ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1 to w2
                   √ó ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n
                                    ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))))
  smallestModAux‚ÜíNATeq cn kb gc {i} {w} {F} {f} {g} {w1} {e1} ‚ààF ‚ààf sma h =
    fst h1 , fst (snd h1) , snd (snd h1) , concl
    where
      h1 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1 to w'))
      h1 = ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

      concl : ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < fst h1 ‚Üí NATeq w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      concl w1' e1' k ltk = h w1' (‚äë-trans¬∑ e1 e1') k q
        where
          q : ‚àÄùïé w1' (Œª w'' _ ‚Üí Lift (lsuc L) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMup F f #‚áì #NUM n at w'' √ó k < n)))
          q w1'' e1'' = lift (fst h2 , ‚áì-from-to‚Üí‚áì (snd (snd h2)) , <-transÀ° ltk (isHighestFresh‚Ñï‚Üí‚â§ cn ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) {_} {w1} {fst (snd h1)} {fst (snd (snd h1))} (snd (snd (snd h1))) (fst h2) hst))
            where
              h2 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1'' to w'))
              h2 = ŒΩtestMup‚áì‚Ñï cn kb gc i w1'' F f (equalInType-mon ‚ààF w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1''))) (equalInType-mon ‚ààf w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))

              hst : isHighestFresh‚Ñï {fst (snd (snd h1))} {w1} {fst (snd h1)} {testMup 0 ‚åú F ‚åù ‚åú f ‚åù}
                                     {NUM (fst h1)} (fst h2) (snd (snd (snd h1)))
              hst = lower (sma w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))



abstract
  smallestModAux‚Üí‚áõ!same‚Ñï : (cn : comp‚Üí‚àÄ‚Ñï) (kb : K‚ñ°) (gc : get-choose-‚Ñï)
      {i : ‚Ñï} {w : ùïé¬∑} {F f g : CTerm} {w1 : ùïé¬∑} {e1 : w ‚äë¬∑ w1}
      (‚ààF : ‚ààType i w #BAIRE‚ÜíNAT F)
      (‚ààf : ‚ààType i w #BAIRE f)
      ‚Üí smallestModAux cn kb gc i w F f w1 e1 ‚ààF ‚ààf
      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (k : ‚Ñï)
                         ‚Üí ‚àÄùïé w' (Œª w'' _ ‚Üí Lift {0‚Ñì} (lsuc(L)) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMup F f #‚áì #NUM n at w'' √ó k < n)))
                         ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w2 ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1 to w2
                   √ó ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < n
                                    ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))))
  smallestModAux‚Üí‚áõ!same‚Ñï cn kb gc {i} {w} {F} {f} {g} {w1} {e1} ‚ààF ‚ààf sma h =
    fst h1 , fst (snd h1) , snd (snd h1) , concl
    where
      h1 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1 to w'))
      h1 = ŒΩtestMup‚áì‚Ñï cn kb gc i w1 F f (equalInType-mon ‚ààF w1 e1) (equalInType-mon ‚ààf w1 e1)

      concl : ‚àÄùïé w1 (Œª w' _ ‚Üí (k : ‚Ñï) ‚Üí k < fst h1 ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
      concl w1' e1' k ltk = h w1' (‚äë-trans¬∑ e1 e1') k q
        where
          q : ‚àÄùïé w1' (Œª w'' _ ‚Üí Lift (lsuc L) (Œ£ ‚Ñï (Œª n ‚Üí #ŒΩtestMup F f #‚áì #NUM n at w'' √ó k < n)))
          q w1'' e1'' = lift (fst h2 , ‚áì-from-to‚Üí‚áì (snd (snd h2)) , <-transÀ° ltk (isHighestFresh‚Ñï‚Üí‚â§ cn ‚åú F ‚åù ‚åú f ‚åù (CTerm.closed F) (CTerm.closed f) {_} {w1} {fst (snd h1)} {fst (snd (snd h1))} (snd (snd (snd h1))) (fst h2) hst))
            where
              h2 : Œ£ ‚Ñï (Œª n ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí #ŒΩtestMup F f #‚áì #NUM n from w1'' to w'))
              h2 = ŒΩtestMup‚áì‚Ñï cn kb gc i w1'' F f (equalInType-mon ‚ààF w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1''))) (equalInType-mon ‚ààf w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))

              hst : isHighestFresh‚Ñï {fst (snd (snd h1))} {w1} {fst (snd h1)} {testMup 0 ‚åú F ‚åù ‚åú f ‚åù}
                                     {NUM (fst h1)} (fst h2) (snd (snd (snd h1)))
              hst = lower (sma w1'' (‚äë-trans¬∑ e1 (‚äë-trans¬∑ e1' e1'')))

\end{code}
