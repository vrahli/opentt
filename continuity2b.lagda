\begin{code}
{-# OPTIONS --rewriting #-}
--{-# OPTIONS --auto-inline #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
open import choiceBar


module continuity2b {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                    (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                    (X : ChoiceExt W C)
                    (N : NewChoice {L} W C K G)
                    (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E)



data updCtxt2 (name : Name) (f : Term) : Term ‚Üí Set where
  updCtxt2-VAR     : (x : Var) ‚Üí updCtxt2 name f (VAR x)
  updCtxt2-NAT     : updCtxt2 name f NAT
  updCtxt2-QNAT    : updCtxt2 name f QNAT
  updCtxt2-LT      : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (LT a b)
  updCtxt2-QLT     : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (QLT a b)
  updCtxt2-NUM     : (x : ‚Ñï) ‚Üí updCtxt2 name f (NUM x)
  updCtxt2-IFLT    : (a b c d : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f c ‚Üí updCtxt2 name f d ‚Üí updCtxt2 name f (IFLT a b c d)
  updCtxt2-SUC     : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (SUC a)
  updCtxt2-PI      : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (PI a b)
  updCtxt2-LAMBDA  : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (LAMBDA a)
  updCtxt2-APPLY   : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (APPLY a b)
  updCtxt2-FIX     : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (FIX a)
  updCtxt2-LET     : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (LET a b)
  updCtxt2-SUM     : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (SUM a b)
  updCtxt2-PAIR    : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (PAIR a b)
  updCtxt2-SPREAD  : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (SPREAD a b)
  updCtxt2-SET     : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (SET a b)
  updCtxt2-ISECT   : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (ISECT a b)
  updCtxt2-TUNION  : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (TUNION a b)
  updCtxt2-UNION   : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (UNION a b)
  updCtxt2-QTUNION : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (QTUNION a b)
  updCtxt2-INL     : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (INL a)
  updCtxt2-INR     : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (INR a)
  updCtxt2-DECIDE  : (a b c : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f c ‚Üí updCtxt2 name f (DECIDE a b c)
  updCtxt2-EQ      : (a b c : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f c ‚Üí updCtxt2 name f (EQ a b c)
  updCtxt2-AX      : updCtxt2 name f AX
  updCtxt2-FREE    : updCtxt2 name f FREE
  updCtxt2-CS      : (name' : Name) ‚Üí updCtxt2 name f (CS name')
  updCtxt2-NAME    : (name' : Name) ‚Üí ¬¨ name' ‚â° name ‚Üí updCtxt2 name f (NAME name')
  updCtxt2-FRESH   : (a : Term) ‚Üí updCtxt2 (suc name) (shiftNameUp 0 f) a ‚Üí updCtxt2 name f (FRESH a)
  updCtxt2-CHOOSE  : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (CHOOSE a b)
--  updCtxt2-IFC0    : (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : Term) ‚Üí updCtxt2 name1 name2 f a‚ÇÅ a‚ÇÇ ‚Üí updCtxt2 name1 name2 f b‚ÇÅ b‚ÇÇ ‚Üí updCtxt2 name1 name2 f c‚ÇÅ c‚ÇÇ ‚Üí updCtxt2 name1 name2 f (IFC0 a‚ÇÅ b‚ÇÅ c‚ÇÅ) (IFC0 a‚ÇÇ b‚ÇÇ c‚ÇÇ)
  updCtxt2-TSQUASH : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (TSQUASH a)
  updCtxt2-TTRUNC  : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (TTRUNC a)
  updCtxt2-TCONST  : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (TCONST a)
  updCtxt2-SUBSING : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (SUBSING a)
  updCtxt2-PURE    : updCtxt2 name f PURE
  updCtxt2-DUM     : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (DUM a)
  updCtxt2-FFDEFS  : (a b : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f b ‚Üí updCtxt2 name f (FFDEFS a b)
  updCtxt2-UNIV    : (x : ‚Ñï) ‚Üí updCtxt2 name f (UNIV x)
  updCtxt2-LIFT    : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (LIFT a)
  updCtxt2-LOWER   : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (LOWER a)
  updCtxt2-SHRINK  : (a : Term) ‚Üí updCtxt2 name f a ‚Üí updCtxt2 name f (SHRINK a)
  updCtxt2-upd     : updCtxt2 name f (upd name f)



‚àànamesùïé : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (name : Name)
              ‚Üí steps k (a , w1) ‚â° (b , w2)
              ‚Üí Set
‚àànamesùïé {0} {w1} {w2} {a} {b} name comp = ¬¨ name ‚àà namesùïé¬∑ w1 √ó name ‚àà domùïé¬∑ w1
‚àànamesùïé {suc k} {w1} {w2} {a} {b} name comp with step a w1
... | just (x , w) = ¬¨ name ‚àà namesùïé¬∑ w1 √ó name ‚àà domùïé¬∑ w1 √ó ‚àànamesùïé {k} {w} {w2} {x} {b} name comp
... | nothing = ¬¨ name ‚àà namesùïé¬∑ w1 √ó name ‚àà domùïé¬∑ w1


pres‚àànamesùïé : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (name : Name) (comp : steps k (a , w1) ‚â° (b , w2)) ‚Üí Set
pres‚àànamesùïé {k} {w1} {w2} {a} {b} name comp =
  ¬¨ name ‚àà namesùïé¬∑ w1
  ‚Üí name ‚àà domùïé¬∑ w1
  ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {b} name comp


‚àànamesùïé‚Üí¬¨‚àànameùïé : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (name : Name)
                     (comp : steps k (a , w1) ‚â° (b , w2))
                     ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {b} name comp
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
‚àànamesùïé‚Üí¬¨‚àànameùïé {0} {w1} {w2} {a} {b} name comp inw = fst inw
‚àànamesùïé‚Üí¬¨‚àànameùïé {suc k} {w1} {w2} {a} {b} name comp inw with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z = fst inw
... | inj‚ÇÇ z rewrite z = fst inw



‚àànamesùïé‚Üí‚ààdomùïé : {k : ‚Ñï} {w1 w2 : ùïé¬∑} {a b : Term} (name : Name)
                     (comp : steps k (a , w1) ‚â° (b , w2))
                     ‚Üí ‚àànamesùïé {k} {w1} {w2} {a} {b} name comp
                     ‚Üí name ‚àà domùïé¬∑ w1
‚àànamesùïé‚Üí‚ààdomùïé {0} {w1} {w2} {a} {b} name comp inw = snd inw
‚àànamesùïé‚Üí‚ààdomùïé {suc k} {w1} {w2} {a} {b} name comp inw with step‚äé a w1
... | inj‚ÇÅ (a' , w1' , z) rewrite z = fst (snd inw)
... | inj‚ÇÇ z rewrite z = snd inw


presHighest‚Ñï2 : (name : Name) (f : Term) (k : ‚Ñï) ‚Üí Set(lsuc L)
presHighest‚Ñï2 name f k =
  {w1 w2 : ùïé¬∑} {a b : Term} {n : ‚Ñï}
  (comp : steps k (a , w1) ‚â° (b , w2))
  ‚Üí isValue b
  ‚Üí updCtxt2 name f a
  ‚Üí compatible¬∑ name w1 Res‚ä§
  ‚Üí ‚àÄùïé-get0-NUM w1 name
  ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
  ‚Üí name ‚àà domùïé¬∑ w1
  ‚Üí (getT‚â§‚Ñï w2 n name --getT 0 name w2 ‚â° just (NUM n)
      ‚Üí isHighest‚Ñï {k} {w1} {w2} {a} {b} n name comp)
     √ó ‚àànamesùïé {k} {w1} {w2} {a} {b} name comp


stepsPresHighest‚Ñï2 : (name : Name) (f : Term) (b : Term) (w : ùïé¬∑) ‚Üí Set(lsuc L)
stepsPresHighest‚Ñï2 name f b w =
  Œ£ ‚Ñï (Œª k ‚Üí Œ£ Term (Œª v ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    steps k (b , w) ‚â° (v , w')
    √ó isValue v
    √ó ((k' : ‚Ñï) ‚Üí k' ‚â§ k ‚Üí presHighest‚Ñï2 name f k'))))


Œ£highestUpdCtxtAux2 : (k' : ‚Ñï) (name : Name) (f : Term) (n : ‚Ñï) (a a' : Term) (w0 w w' : ùïé¬∑) ‚Üí Set(L)
Œ£highestUpdCtxtAux2 k' name f n a a' w0 w w' =
  Œ£ (steps k' (a , w) ‚â° (a' , w')) (Œª comp ‚Üí
    (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó isHighest‚Ñï {k'} {w} {w'} {a} {a'} n name comp))
    √ó ‚àànamesùïé {k'} {w} {w'} {a} {a'} name comp
    √ó updCtxt2 name f a')


Œ£highestUpdCtxt2 : (name : Name) (f : Term) (n : ‚Ñï) (a : Term) (w0 w : ùïé¬∑) ‚Üí Set(L)
Œ£highestUpdCtxt2 name f n a w0 w =
  Œ£ ‚Ñï (Œª k' ‚Üí Œ£ Term (Œª a' ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí
    Œ£highestUpdCtxtAux2 k' name f n a a' w0 w w')))


‚ÜíupdCtxt2-shiftUp : (v : Var) {name : Name} {f : Term} (cf : # f) {a : Term}
                   ‚Üí updCtxt2 name f a
                   ‚Üí updCtxt2 name f (shiftUp v a)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(VAR x)} (updCtxt2-VAR x) = updCtxt2-VAR _
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.NAT} updCtxt2-NAT = updCtxt2-NAT
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.QNAT} updCtxt2-QNAT = updCtxt2-QNAT
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(LT a b)} (updCtxt2-LT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LT _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(QLT a b)} (updCtxt2-QLT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QLT _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(NUM x)} (updCtxt2-NUM x) = updCtxt2-NUM _
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(IFLT a b c d)} (updCtxt2-IFLT a b c d upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) = updCtxt2-IFLT _ _ _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÉ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÑ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(SUC a)} (updCtxt2-SUC a upd‚ÇÅ) = updCtxt2-SUC _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(PI a b)} (updCtxt2-PI a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PI _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(LAMBDA a)} (updCtxt2-LAMBDA a upd‚ÇÅ) = updCtxt2-LAMBDA _ (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(APPLY a b)} (updCtxt2-APPLY a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-APPLY _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(FIX a)} (updCtxt2-FIX a upd‚ÇÅ) = updCtxt2-FIX _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(LET a b)} (updCtxt2-LET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LET _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(SUM a b)} (updCtxt2-SUM a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SUM _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(PAIR a b)} (updCtxt2-PAIR a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PAIR _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(SPREAD a b)} (updCtxt2-SPREAD a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SPREAD _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc (suc v)) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(SET a b)} (updCtxt2-SET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SET _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(ISECT a b)} (updCtxt2-ISECT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-ISECT _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(TUNION a b)} (updCtxt2-TUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-TUNION _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(UNION a b)} (updCtxt2-UNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-UNION _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(QTUNION a b)} (updCtxt2-QTUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QTUNION _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(INL a)} (updCtxt2-INL a upd‚ÇÅ) = updCtxt2-INL _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(INR a)} (updCtxt2-INR a upd‚ÇÅ) = updCtxt2-INR _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(DECIDE a b c)} (updCtxt2-DECIDE a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-DECIDE _ _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftUp (suc v) cf upd‚ÇÉ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(EQ a b c)} (updCtxt2-EQ a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-EQ _ _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÉ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.AX} updCtxt2-AX = updCtxt2-AX
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.FREE} updCtxt2-FREE = updCtxt2-FREE
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(CS name')} (updCtxt2-CS name') = updCtxt2-CS _
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(NAME name')} (updCtxt2-NAME name' x) = updCtxt2-NAME _ x
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(FRESH a)} (updCtxt2-FRESH a upd‚ÇÅ) = updCtxt2-FRESH _ (‚ÜíupdCtxt2-shiftUp v (‚Üí#shiftNameUp 0 {f} cf) upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(CHOOSE a b)} (updCtxt2-CHOOSE a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-CHOOSE _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(TSQUASH a)} (updCtxt2-TSQUASH a upd‚ÇÅ) = updCtxt2-TSQUASH _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(TTRUNC a)} (updCtxt2-TTRUNC a upd‚ÇÅ) = updCtxt2-TTRUNC _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(TCONST a)} (updCtxt2-TCONST a upd‚ÇÅ) = updCtxt2-TCONST _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(SUBSING a)} (updCtxt2-SUBSING a upd‚ÇÅ) = updCtxt2-SUBSING _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.PURE} updCtxt2-PURE = updCtxt2-PURE
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(DUM a)} (updCtxt2-DUM a upd‚ÇÅ) = updCtxt2-DUM _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(FFDEFS a b)} (updCtxt2-FFDEFS a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-FFDEFS _ _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(UNIV x)} (updCtxt2-UNIV x) = updCtxt2-UNIV _
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(LIFT a)} (updCtxt2-LIFT a upd‚ÇÅ) = updCtxt2-LIFT _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(LOWER a)} (updCtxt2-LOWER a upd‚ÇÅ) = updCtxt2-LOWER _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(SHRINK a)} (updCtxt2-SHRINK a upd‚ÇÅ) = updCtxt2-SHRINK _ (‚ÜíupdCtxt2-shiftUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftUp v {name} {f} cf {.(upd name f)} updCtxt2-upd
  rewrite sucIf‚â§s0 v | #shiftUp (suc (suc (suc v))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updCtxt2-upd


‚ÜíupdCtxt2-shiftDown : (v : Var) {name : Name} {f : Term} (cf : # f) {a : Term}
                   ‚Üí updCtxt2 name f a
                   ‚Üí updCtxt2 name f (shiftDown v a)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(VAR x)} (updCtxt2-VAR x) = updCtxt2-VAR _
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.NAT} updCtxt2-NAT = updCtxt2-NAT
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.QNAT} updCtxt2-QNAT = updCtxt2-QNAT
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(LT a b)} (updCtxt2-LT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LT _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(QLT a b)} (updCtxt2-QLT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QLT _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(NUM x)} (updCtxt2-NUM x) = updCtxt2-NUM _
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(IFLT a b c d)} (updCtxt2-IFLT a b c d upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) = updCtxt2-IFLT _ _ _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÉ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÑ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(SUC a)} (updCtxt2-SUC a upd‚ÇÅ) = updCtxt2-SUC _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(PI a b)} (updCtxt2-PI a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PI _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(LAMBDA a)} (updCtxt2-LAMBDA a upd‚ÇÅ) = updCtxt2-LAMBDA _ (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(APPLY a b)} (updCtxt2-APPLY a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-APPLY _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(FIX a)} (updCtxt2-FIX a upd‚ÇÅ) = updCtxt2-FIX _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(LET a b)} (updCtxt2-LET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LET _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(SUM a b)} (updCtxt2-SUM a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SUM _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(PAIR a b)} (updCtxt2-PAIR a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PAIR _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(SPREAD a b)} (updCtxt2-SPREAD a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SPREAD _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc (suc v)) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(SET a b)} (updCtxt2-SET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SET _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(ISECT a b)} (updCtxt2-ISECT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-ISECT _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(TUNION a b)} (updCtxt2-TUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-TUNION _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(UNION a b)} (updCtxt2-UNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-UNION _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(QTUNION a b)} (updCtxt2-QTUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QTUNION _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(INL a)} (updCtxt2-INL a upd‚ÇÅ) = updCtxt2-INL _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(INR a)} (updCtxt2-INR a upd‚ÇÅ) = updCtxt2-INR _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(DECIDE a b c)} (updCtxt2-DECIDE a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-DECIDE _ _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftDown (suc v) cf upd‚ÇÉ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(EQ a b c)} (updCtxt2-EQ a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-EQ _ _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÉ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.AX} updCtxt2-AX = updCtxt2-AX
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.FREE} updCtxt2-FREE = updCtxt2-FREE
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(CS name')} (updCtxt2-CS name') = updCtxt2-CS _
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(NAME name')} (updCtxt2-NAME name' x) = updCtxt2-NAME _ x
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(FRESH a)} (updCtxt2-FRESH a upd‚ÇÅ) = updCtxt2-FRESH _ (‚ÜíupdCtxt2-shiftDown v (‚Üí#shiftNameUp 0 {f} cf) upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(CHOOSE a b)} (updCtxt2-CHOOSE a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-CHOOSE _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(TSQUASH a)} (updCtxt2-TSQUASH a upd‚ÇÅ) = updCtxt2-TSQUASH _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(TTRUNC a)} (updCtxt2-TTRUNC a upd‚ÇÅ) = updCtxt2-TTRUNC _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(TCONST a)} (updCtxt2-TCONST a upd‚ÇÅ) = updCtxt2-TCONST _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(SUBSING a)} (updCtxt2-SUBSING a upd‚ÇÅ) = updCtxt2-SUBSING _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.PURE} updCtxt2-PURE = updCtxt2-PURE
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(DUM a)} (updCtxt2-DUM a upd‚ÇÅ) = updCtxt2-DUM _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(FFDEFS a b)} (updCtxt2-FFDEFS a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-FFDEFS _ _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(UNIV x)} (updCtxt2-UNIV x) = updCtxt2-UNIV _
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(LIFT a)} (updCtxt2-LIFT a upd‚ÇÅ) = updCtxt2-LIFT _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(LOWER a)} (updCtxt2-LOWER a upd‚ÇÅ) = updCtxt2-LOWER _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(SHRINK a)} (updCtxt2-SHRINK a upd‚ÇÅ) = updCtxt2-SHRINK _ (‚ÜíupdCtxt2-shiftDown v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftDown v {name} {f} cf {.(upd name f)} updCtxt2-upd
  rewrite sucIf‚â§s0 v | #shiftDown (suc (suc (suc v))) (ct (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)) = updCtxt2-upd


‚ÜíupdCtxt2-shiftNameUp : (v : Var) {name : Name} {f : Term} (cf : # f) {a : Term}
                         ‚Üí updCtxt2 name f a
                         ‚Üí updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v a)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(VAR x)} (updCtxt2-VAR x) = updCtxt2-VAR _
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.NAT} updCtxt2-NAT = updCtxt2-NAT
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.QNAT} updCtxt2-QNAT = updCtxt2-QNAT
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(LT a b)} (updCtxt2-LT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LT _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(QLT a b)} (updCtxt2-QLT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QLT _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(NUM x)} (updCtxt2-NUM x) = updCtxt2-NUM _
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(IFLT a b c d)} (updCtxt2-IFLT a b c d upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) = updCtxt2-IFLT _ _ _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÉ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÑ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(SUC a)} (updCtxt2-SUC a upd‚ÇÅ) = updCtxt2-SUC _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(PI a b)} (updCtxt2-PI a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PI _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(LAMBDA a)} (updCtxt2-LAMBDA a upd‚ÇÅ) = updCtxt2-LAMBDA _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(APPLY a b)} (updCtxt2-APPLY a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-APPLY _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(FIX a)} (updCtxt2-FIX a upd‚ÇÅ) = updCtxt2-FIX _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(LET a b)} (updCtxt2-LET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LET _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(SUM a b)} (updCtxt2-SUM a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SUM _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(PAIR a b)} (updCtxt2-PAIR a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PAIR _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(SPREAD a b)} (updCtxt2-SPREAD a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SPREAD _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(SET a b)} (updCtxt2-SET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SET _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(ISECT a b)} (updCtxt2-ISECT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-ISECT _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(TUNION a b)} (updCtxt2-TUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-TUNION _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(UNION a b)} (updCtxt2-UNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-UNION _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(QTUNION a b)} (updCtxt2-QTUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QTUNION _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(INL a)} (updCtxt2-INL a upd‚ÇÅ) = updCtxt2-INL _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(INR a)} (updCtxt2-INR a upd‚ÇÅ) = updCtxt2-INR _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(DECIDE a b c)} (updCtxt2-DECIDE a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-DECIDE _ _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÉ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(EQ a b c)} (updCtxt2-EQ a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-EQ _ _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÉ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.AX} updCtxt2-AX = updCtxt2-AX
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.FREE} updCtxt2-FREE = updCtxt2-FREE
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(CS name')} (updCtxt2-CS name') = updCtxt2-CS _
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(NAME name')} (updCtxt2-NAME name' x) = updCtxt2-NAME (sucIf‚â§ v name') (Œª y ‚Üí x (sucIf‚â§-inj y))
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(FRESH a)} (updCtxt2-FRESH a upd‚ÇÅ) =
  updCtxt2-FRESH (shiftNameUp (suc v) a) c1
  where
    c3 : updCtxt2 (sucIf‚â§ (suc v) (suc name))
                (shiftNameUp (suc v) (shiftNameUp 0 f))
                (shiftNameUp (suc v) a)
    c3 = ‚ÜíupdCtxt2-shiftNameUp (suc v) {suc name} (‚Üí#shiftNameUp 0 {f} cf) upd‚ÇÅ

    c2 : updCtxt2 (suc (sucIf‚â§ v name))
                (shiftNameUp (suc v) (shiftNameUp 0 f))
                (shiftNameUp (suc v) a)
    c2 rewrite suc-sucIf‚â§ v name = c3

    c1 : updCtxt2 (suc (sucIf‚â§ v name))
                (shiftNameUp 0 (shiftNameUp v f))
                (shiftNameUp (suc v) a)
    c1 rewrite shiftNameUp-shiftNameUp {0} {v} {f} _‚â§_.z‚â§n = c2
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(CHOOSE a b)} (updCtxt2-CHOOSE a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-CHOOSE _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(TSQUASH a)} (updCtxt2-TSQUASH a upd‚ÇÅ) = updCtxt2-TSQUASH _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(TTRUNC a)} (updCtxt2-TTRUNC a upd‚ÇÅ) = updCtxt2-TTRUNC _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(TCONST a)} (updCtxt2-TCONST a upd‚ÇÅ) = updCtxt2-TCONST _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(SUBSING a)} (updCtxt2-SUBSING a upd‚ÇÅ) = updCtxt2-SUBSING _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.PURE} updCtxt2-PURE = updCtxt2-PURE
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(DUM a)} (updCtxt2-DUM a upd‚ÇÅ) = updCtxt2-DUM _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(FFDEFS a b)} (updCtxt2-FFDEFS a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-FFDEFS _ _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ) (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÇ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(UNIV x)} (updCtxt2-UNIV x) = updCtxt2-UNIV _
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(LIFT a)} (updCtxt2-LIFT a upd‚ÇÅ) = updCtxt2-LIFT _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(LOWER a)} (updCtxt2-LOWER a upd‚ÇÅ) = updCtxt2-LOWER _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(SHRINK a)} (updCtxt2-SHRINK a upd‚ÇÅ) = updCtxt2-SHRINK _ (‚ÜíupdCtxt2-shiftNameUp v cf upd‚ÇÅ)
‚ÜíupdCtxt2-shiftNameUp v {name} {f} cf {.(upd name f)} updCtxt2-upd = c2
  where
    c1 : updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (upd (sucIf‚â§ v name) (shiftNameUp v f))
    c1 = updCtxt2-upd

    c2 : updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f)
                  (LAMBDA (LET (VAR 0)
                               (LET (IFLT (APPLY (CS (sucIf‚â§ v name)) (NUM 0)) (VAR 0)
                                          (CHOOSE (NAME (sucIf‚â§ v name)) (VAR 0)) AX)
                                    (APPLY (shiftNameUp v (shiftUp 0 f)) (VAR (sucIf‚â§ 0 0))))))
    c2 rewrite sym (shiftUp-shiftNameUp 0 v f)  = c1



‚ÜíupdCtxt2-shiftNameUp0 : {name : Name} {f : Term} (cf : # f) {a : Term}
                   ‚Üí updCtxt2 name f a
                   ‚Üí updCtxt2 (suc name) (shiftNameUp 0 f) (shiftNameUp 0 a)
‚ÜíupdCtxt2-shiftNameUp0 {name} {f} cf {a} dif
  rewrite suc‚â°sucIf‚â§0 name =
  ‚ÜíupdCtxt2-shiftNameUp 0 {name} cf dif



updCtxt2-subv : {name : Name} {f : Term} (cf : # f) (v : Var) {a b : Term}
             ‚Üí updCtxt2 name f a
             ‚Üí updCtxt2 name f b
             ‚Üí updCtxt2 name f (subv v b a)
updCtxt2-subv {name} {f} cf v {.(VAR x)} {b} (updCtxt2-VAR x) updb with x ‚âü v
... | yes p = updb
... | no p = updCtxt2-VAR _
updCtxt2-subv {name} {f} cf v {.NAT} {b} updCtxt2-NAT updb = updCtxt2-NAT
updCtxt2-subv {name} {f} cf v {.QNAT} {b} updCtxt2-QNAT updb = updCtxt2-QNAT
updCtxt2-subv {name} {f} cf v {.(LT a b‚ÇÅ)} {b} (updCtxt2-LT a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-LT _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(QLT a b‚ÇÅ)} {b} (updCtxt2-QLT a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-QLT _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(NUM x)} {b} (updCtxt2-NUM x) updb = updCtxt2-NUM _
updCtxt2-subv {name} {f} cf v {.(IFLT a b‚ÇÅ c d)} {b} (updCtxt2-IFLT a b‚ÇÅ c d upda upda‚ÇÅ upda‚ÇÇ upda‚ÇÉ) updb = updCtxt2-IFLT _ _ _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb) (updCtxt2-subv cf v upda‚ÇÇ updb) (updCtxt2-subv cf v upda‚ÇÉ updb)
updCtxt2-subv {name} {f} cf v {.(SUC a)} {b} (updCtxt2-SUC a upda) updb = updCtxt2-SUC _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(PI a b‚ÇÅ)} {b} (updCtxt2-PI a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-PI _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc v) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(LAMBDA a)} {b} (updCtxt2-LAMBDA a upda) updb = updCtxt2-LAMBDA _ (updCtxt2-subv cf (suc v) upda (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(APPLY a b‚ÇÅ)} {b} (updCtxt2-APPLY a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-APPLY _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(FIX a)} {b} (updCtxt2-FIX a upda) updb = updCtxt2-FIX _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(LET a b‚ÇÅ)} {b} (updCtxt2-LET a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-LET _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc v) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(SUM a b‚ÇÅ)} {b} (updCtxt2-SUM a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-SUM _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc v) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(PAIR a b‚ÇÅ)} {b} (updCtxt2-PAIR a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-PAIR _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(SPREAD a b‚ÇÅ)} {b} (updCtxt2-SPREAD a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-SPREAD _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc (suc v)) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf (‚ÜíupdCtxt2-shiftUp 0 cf updb)))
updCtxt2-subv {name} {f} cf v {.(SET a b‚ÇÅ)} {b} (updCtxt2-SET a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-SET _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc v) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(ISECT a b‚ÇÅ)} {b} (updCtxt2-ISECT a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-ISECT _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(TUNION a b‚ÇÅ)} {b} (updCtxt2-TUNION a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-TUNION _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc v) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(UNION a b‚ÇÅ)} {b} (updCtxt2-UNION a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-UNION _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(QTUNION a b‚ÇÅ)} {b} (updCtxt2-QTUNION a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-QTUNION _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(INL a)} {b} (updCtxt2-INL a upda) updb = updCtxt2-INL _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(INR a)} {b} (updCtxt2-INR a upda) updb = updCtxt2-INR _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(DECIDE a b‚ÇÅ c)} {b} (updCtxt2-DECIDE a b‚ÇÅ c upda upda‚ÇÅ upda‚ÇÇ) updb = updCtxt2-DECIDE _ _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf (suc v) upda‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf updb)) (updCtxt2-subv cf (suc v) upda‚ÇÇ (‚ÜíupdCtxt2-shiftUp 0 cf updb))
updCtxt2-subv {name} {f} cf v {.(EQ a b‚ÇÅ c)} {b} (updCtxt2-EQ a b‚ÇÅ c upda upda‚ÇÅ upda‚ÇÇ) updb = updCtxt2-EQ _ _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb) (updCtxt2-subv cf v upda‚ÇÇ updb)
updCtxt2-subv {name} {f} cf v {.AX} {b} updCtxt2-AX updb = updCtxt2-AX
updCtxt2-subv {name} {f} cf v {.FREE} {b} updCtxt2-FREE updb = updCtxt2-FREE
updCtxt2-subv {name} {f} cf v {.(CS name')} {b} (updCtxt2-CS name') updb = updCtxt2-CS _
updCtxt2-subv {name} {f} cf v {.(NAME name')} {b} (updCtxt2-NAME name' x) updb = updCtxt2-NAME _ x
updCtxt2-subv {name} {f} cf v {.(FRESH a)} {b} (updCtxt2-FRESH a upda) updb = updCtxt2-FRESH _ (updCtxt2-subv (‚Üí#shiftNameUp 0 {f} cf) v upda (‚ÜíupdCtxt2-shiftNameUp0 {name} cf updb))
updCtxt2-subv {name} {f} cf v {.(CHOOSE a b‚ÇÅ)} {b} (updCtxt2-CHOOSE a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-CHOOSE _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(TSQUASH a)} {b} (updCtxt2-TSQUASH a upda) updb = updCtxt2-TSQUASH _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(TTRUNC a)} {b} (updCtxt2-TTRUNC a upda) updb = updCtxt2-TTRUNC _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(TCONST a)} {b} (updCtxt2-TCONST a upda) updb = updCtxt2-TCONST _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(SUBSING a)} {b} (updCtxt2-SUBSING a upda) updb = updCtxt2-SUBSING _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.PURE} {b} updCtxt2-PURE updb = updCtxt2-PURE
updCtxt2-subv {name} {f} cf v {.(DUM a)} {b} (updCtxt2-DUM a upda) updb = updCtxt2-DUM _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(FFDEFS a b‚ÇÅ)} {b} (updCtxt2-FFDEFS a b‚ÇÅ upda upda‚ÇÅ) updb = updCtxt2-FFDEFS _ _ (updCtxt2-subv cf v upda updb) (updCtxt2-subv cf v upda‚ÇÅ updb)
updCtxt2-subv {name} {f} cf v {.(UNIV x)} {b} (updCtxt2-UNIV x) updb = updCtxt2-UNIV _
updCtxt2-subv {name} {f} cf v {.(LIFT a)} {b} (updCtxt2-LIFT a upda) updb = updCtxt2-LIFT _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(LOWER a)} {b} (updCtxt2-LOWER a upda) updb = updCtxt2-LOWER _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(SHRINK a)} {b} (updCtxt2-SHRINK a upda) updb = updCtxt2-SHRINK _ (updCtxt2-subv cf v upda updb)
updCtxt2-subv {name} {f} cf v {.(upd name f)} {b} updCtxt2-upd updb
  rewrite sucIf‚â§00
        | subv# (suc (suc (suc v))) (shiftUp 0 (shiftUp 0 (shiftUp 0 b))) (shiftUp 0 f) (‚Üí#shiftUp 0 {f} cf)
  = updCtxt2-upd



updCtxt2-sub : {name : Name} {f : Term} (cf : # f) {a b : Term}
             ‚Üí updCtxt2 name f a
             ‚Üí updCtxt2 name f b
             ‚Üí updCtxt2 name f (sub b a)
updCtxt2-sub {name} {f} cf {a} {b} d‚ÇÅ d‚ÇÇ =
  ‚ÜíupdCtxt2-shiftDown 0 cf (updCtxt2-subv {name} {f} cf 0 {a} {shiftUp 0 b} d‚ÇÅ (‚ÜíupdCtxt2-shiftUp 0 cf d‚ÇÇ))


updCtxt2-LAMBDA‚Üí : {name : Name} {f t : Term}
                   ‚Üí updCtxt2 name f (LAMBDA t)
                   ‚Üí updCtxt2 name f t ‚äé t ‚â° updBody name f
updCtxt2-LAMBDA‚Üí {name} {f} {t} (updCtxt2-LAMBDA .t u) = inj‚ÇÅ u
updCtxt2-LAMBDA‚Üí {name} {f} {.(updBody name f)} updCtxt2-upd = inj‚ÇÇ refl



updCtxt2-NAME‚Üí : {name name' : Name} {f : Term}
                   ‚Üí updCtxt2 name f (NAME name')
                   ‚Üí ¬¨ name' ‚â° name
updCtxt2-NAME‚Üí {name} {name'} {f} (updCtxt2-NAME .name' x) = x



updCtxt2-PAIR‚Üí‚ÇÅ : {name : Name} {f a b : Term}
                   ‚Üí updCtxt2 name f (PAIR a b)
                   ‚Üí updCtxt2 name f a
updCtxt2-PAIR‚Üí‚ÇÅ {name} {f} {a} {b} (updCtxt2-PAIR .a .b ca cb) = ca



updCtxt2-PAIR‚Üí‚ÇÇ : {name : Name} {f a b : Term}
                   ‚Üí updCtxt2 name f (PAIR a b)
                   ‚Üí updCtxt2 name f b
updCtxt2-PAIR‚Üí‚ÇÇ {name} {f} {a} {b} (updCtxt2-PAIR .a .b ca cb) = cb



updCtxt2-INL‚Üí : {name : Name} {f a : Term}
                   ‚Üí updCtxt2 name f (INL a)
                   ‚Üí updCtxt2 name f a
updCtxt2-INL‚Üí {name} {f} {a} (updCtxt2-INL .a ca) = ca



updCtxt2-INR‚Üí : {name : Name} {f a : Term}
                   ‚Üí updCtxt2 name f (INR a)
                   ‚Üí updCtxt2 name f a
updCtxt2-INR‚Üí {name} {f} {a} (updCtxt2-INR .a ca) = ca



¬¨‚àà++2‚Üí¬¨‚àà1 : {L : Level} {A : Set(L)} {a b : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b)
             ‚Üí ¬¨ x ‚àà a
¬¨‚àà++2‚Üí¬¨‚àà1 {L} {A} {a} {b} {x} ni i = ni (‚àà-++‚Å∫À° i)



¬¨‚àà++2‚Üí¬¨‚àà2 : {L : Level} {A : Set(L)} {a b : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b)
             ‚Üí ¬¨ x ‚àà b
¬¨‚àà++2‚Üí¬¨‚àà2 {L} {A} {a} {b} {x} ni i = ni (‚àà-++‚Å∫ ≥ a i)


¬¨‚àà++3‚Üí¬¨‚àà1 : {L : Level} {A : Set(L)} {a b c : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c)
             ‚Üí ¬¨ x ‚àà a
¬¨‚àà++3‚Üí¬¨‚àà1 {L} {A} {a} {b} {c} {x} ni i = ni (‚àà-++‚Å∫À° i)


¬¨‚àà++3‚Üí¬¨‚àà2 : {L : Level} {A : Set(L)} {a b c : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c)
             ‚Üí ¬¨ x ‚àà b
¬¨‚àà++3‚Üí¬¨‚àà2 {L} {A} {a} {b} {c} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫À° i))


¬¨‚àà++3‚Üí¬¨‚àà3 : {L : Level} {A : Set(L)} {a b c : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c)
             ‚Üí ¬¨ x ‚àà c
¬¨‚àà++3‚Üí¬¨‚àà3 {L} {A} {a} {b} {c} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b i))



¬¨‚àà++4‚Üí¬¨‚àà1 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà a
¬¨‚àà++4‚Üí¬¨‚àà1 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫À° i)


¬¨‚àà++4‚Üí¬¨‚àà2 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà b
¬¨‚àà++4‚Üí¬¨‚àà2 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫À° i))


¬¨‚àà++4‚Üí¬¨‚àà3 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà c
¬¨‚àà++4‚Üí¬¨‚àà3 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b (‚àà-++‚Å∫À° i)))


¬¨‚àà++4‚Üí¬¨‚àà4 : {L : Level} {A : Set(L)} {a b c d : List A} {x : A}
             ‚Üí ¬¨ x ‚àà (a ++ b ++ c ++ d)
             ‚Üí ¬¨ x ‚àà d
¬¨‚àà++4‚Üí¬¨‚àà4 {L} {A} {a} {b} {c} {d} {x} ni i = ni (‚àà-++‚Å∫ ≥ a (‚àà-++‚Å∫ ≥ b (‚àà-++‚Å∫ ≥ c i)))


¬¨‚àànames-APPLY : {name : Name} {a b : Term}
                ‚Üí ¬¨ name ‚àà names a
                ‚Üí ¬¨ name ‚àà names b
                ‚Üí ¬¨ name ‚àà names (APPLY a b)
¬¨‚àànames-APPLY {name} {a} {b} na nb i with ‚àà-++‚Åª (names a) i
... | inj‚ÇÅ p = na p
... | inj‚ÇÇ p = nb p


¬¨‚àànames-NUM : {name : Name} {n : ‚Ñï}
               ‚Üí ¬¨ name ‚àà names (NUM n)
¬¨‚àànames-NUM {name} {n} ()


updCtxt2-refl : (name : Name) (f t : Term)
                ‚Üí ¬¨ name ‚àà names t
                ‚Üí updCtxt2 name f t
updCtxt2-refl name f (VAR x) nn = updCtxt2-VAR _
updCtxt2-refl name f NAT nn = updCtxt2-NAT
updCtxt2-refl name f QNAT nn = updCtxt2-QNAT
updCtxt2-refl name f (LT t t‚ÇÅ) nn = updCtxt2-LT _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (QLT t t‚ÇÅ) nn = updCtxt2-QLT _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (NUM x) nn = updCtxt2-NUM _
updCtxt2-refl name f (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) nn = updCtxt2-IFLT _ _ _ _ (updCtxt2-refl name f t (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} nn)) (updCtxt2-refl name f t‚ÇÇ (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} nn)) (updCtxt2-refl name f t‚ÇÉ (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} nn))
updCtxt2-refl name f (SUC t) nn = updCtxt2-SUC _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (PI t t‚ÇÅ) nn = updCtxt2-PI _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (LAMBDA t) nn = updCtxt2-LAMBDA _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (APPLY t t‚ÇÅ) nn = updCtxt2-APPLY _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (FIX t) nn = updCtxt2-FIX _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (LET t t‚ÇÅ) nn = updCtxt2-LET _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (SUM t t‚ÇÅ) nn = updCtxt2-SUM _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (PAIR t t‚ÇÅ) nn = updCtxt2-PAIR _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (SPREAD t t‚ÇÅ) nn = updCtxt2-SPREAD _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (SET t t‚ÇÅ) nn = updCtxt2-SET _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (TUNION t t‚ÇÅ) nn = updCtxt2-TUNION _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (ISECT t t‚ÇÅ) nn = updCtxt2-ISECT _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (UNION t t‚ÇÅ) nn = updCtxt2-UNION _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (QTUNION t t‚ÇÅ) nn = updCtxt2-QTUNION _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (INL t) nn = updCtxt2-INL _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (INR t) nn = updCtxt2-INR _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (DECIDE t t‚ÇÅ t‚ÇÇ) nn = updCtxt2-DECIDE _ _ _ (updCtxt2-refl name f t (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} nn)) (updCtxt2-refl name f t‚ÇÇ (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} nn))
updCtxt2-refl name f (EQ t t‚ÇÅ t‚ÇÇ) nn = updCtxt2-EQ _ _ _ (updCtxt2-refl name f t (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} nn)) (updCtxt2-refl name f t‚ÇÇ (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} nn))
updCtxt2-refl name f AX nn = updCtxt2-AX
updCtxt2-refl name f FREE nn = updCtxt2-FREE
updCtxt2-refl name f (CS x) nn = updCtxt2-CS _
updCtxt2-refl name f (NAME x) nn = updCtxt2-NAME x (Œª z ‚Üí nn (here (sym z)))
updCtxt2-refl name f (FRESH t) nn = updCtxt2-FRESH t (updCtxt2-refl (suc name) (shiftNameUp 0 f) t (Œª z ‚Üí nn (suc‚Üí‚ààlowerNames {name} {names t} z)))
updCtxt2-refl name f (CHOOSE t t‚ÇÅ) nn = updCtxt2-CHOOSE _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f (TSQUASH t) nn = updCtxt2-TSQUASH _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (TTRUNC t) nn = updCtxt2-TTRUNC _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (TCONST t) nn = updCtxt2-TCONST _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (SUBSING t) nn = updCtxt2-SUBSING _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (DUM t) nn = updCtxt2-DUM _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (FFDEFS t t‚ÇÅ) nn = updCtxt2-FFDEFS _ _ (updCtxt2-refl name f t (¬¨‚àà++2‚Üí¬¨‚àà1 nn)) (updCtxt2-refl name f t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 nn))
updCtxt2-refl name f PURE nn = updCtxt2-PURE
updCtxt2-refl name f (UNIV x) nn = updCtxt2-UNIV _
updCtxt2-refl name f (LIFT t) nn = updCtxt2-LIFT _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (LOWER t) nn = updCtxt2-LOWER _ (updCtxt2-refl name f t nn)
updCtxt2-refl name f (SHRINK t) nn = updCtxt2-SHRINK _ (updCtxt2-refl name f t nn)



‚Üí‚â°sucIf‚â§ : {v : Var} {a b : Var}
            ‚Üí a ‚â° b
            ‚Üí sucIf‚â§ v a ‚â° sucIf‚â§ v b
‚Üí‚â°sucIf‚â§ {v} {a} {b} e rewrite e = refl


NAMEinj : {n m : Name} ‚Üí NAME n ‚â° NAME m ‚Üí n ‚â° m
NAMEinj refl =  refl


shiftNameUp-inj : {n : Name} {a b : Term} ‚Üí shiftNameUp n a ‚â° shiftNameUp n b ‚Üí a ‚â° b
shiftNameUp-inj {n} {VAR x} {VAR x} refl = refl
shiftNameUp-inj {n} {NAT} {NAT} e = refl
shiftNameUp-inj {n} {QNAT} {QNAT} e = refl
shiftNameUp-inj {n} {LT a a‚ÇÅ} {LT b b‚ÇÅ} e rewrite shiftNameUp-inj (LTinj1 e) | shiftNameUp-inj (LTinj2 e) = refl
shiftNameUp-inj {n} {QLT a a‚ÇÅ} {QLT b b‚ÇÅ} e rewrite shiftNameUp-inj (QLTinj1 e) | shiftNameUp-inj (QLTinj2 e) = refl
shiftNameUp-inj {n} {NUM x} {NUM .x} refl = refl
shiftNameUp-inj {n} {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} {IFLT b b‚ÇÅ b‚ÇÇ b‚ÇÉ} e rewrite shiftNameUp-inj (IFLTinj1 e) | shiftNameUp-inj (IFLTinj2 e) | shiftNameUp-inj (IFLTinj3 e) | shiftNameUp-inj (IFLTinj4 e) = refl
shiftNameUp-inj {n} {SUC a} {SUC b} e rewrite shiftNameUp-inj (SUCinj e) = refl
shiftNameUp-inj {n} {PI a a‚ÇÅ} {PI b b‚ÇÅ} e rewrite shiftNameUp-inj (PIinj1 e) | shiftNameUp-inj (PIinj2 e) = refl
shiftNameUp-inj {n} {LAMBDA a} {LAMBDA b} e rewrite shiftNameUp-inj (LAMinj e) = refl
shiftNameUp-inj {n} {APPLY a a‚ÇÅ} {APPLY b b‚ÇÅ} e rewrite shiftNameUp-inj (APPLYinj1 e) | shiftNameUp-inj (APPLYinj2 e) = refl
shiftNameUp-inj {n} {FIX a} {FIX b} e rewrite shiftNameUp-inj (FIXinj e) = refl
shiftNameUp-inj {n} {LET a a‚ÇÅ} {LET b b‚ÇÅ} e rewrite shiftNameUp-inj (LETinj1 e) | shiftNameUp-inj (LETinj2 e) = refl
shiftNameUp-inj {n} {SUM a a‚ÇÅ} {SUM b b‚ÇÅ} e rewrite shiftNameUp-inj (SUMinj1 e) | shiftNameUp-inj (SUMinj2 e) = refl
shiftNameUp-inj {n} {PAIR a a‚ÇÅ} {PAIR b b‚ÇÅ} e rewrite shiftNameUp-inj (PAIRinj1 e) | shiftNameUp-inj (PAIRinj2 e) = refl
shiftNameUp-inj {n} {SPREAD a a‚ÇÅ} {SPREAD b b‚ÇÅ} e rewrite shiftNameUp-inj (SPREADinj1 e) | shiftNameUp-inj (SPREADinj2 e) = refl
shiftNameUp-inj {n} {SET a a‚ÇÅ} {SET b b‚ÇÅ} e rewrite shiftNameUp-inj (SETinj1 e) | shiftNameUp-inj (SETinj2 e) = refl
shiftNameUp-inj {n} {ISECT a a‚ÇÅ} {ISECT b b‚ÇÅ} e rewrite shiftNameUp-inj (ISECTinj1 e) | shiftNameUp-inj (ISECTinj2 e) = refl
shiftNameUp-inj {n} {TUNION a a‚ÇÅ} {TUNION b b‚ÇÅ} e rewrite shiftNameUp-inj (TUNIONinj1 e) | shiftNameUp-inj (TUNIONinj2 e) = refl
shiftNameUp-inj {n} {UNION a a‚ÇÅ} {UNION b b‚ÇÅ} e rewrite shiftNameUp-inj (UNIONinj1 e) | shiftNameUp-inj (UNIONinj2 e) = refl
shiftNameUp-inj {n} {QTUNION a a‚ÇÅ} {QTUNION b b‚ÇÅ} e rewrite shiftNameUp-inj (QTUNIONinj1 e) | shiftNameUp-inj (QTUNIONinj2 e) = refl
shiftNameUp-inj {n} {INL a} {INL b} e rewrite shiftNameUp-inj (INLinj e) = refl
shiftNameUp-inj {n} {INR a} {INR b} e rewrite shiftNameUp-inj (INRinj e) = refl
shiftNameUp-inj {n} {DECIDE a a‚ÇÅ a‚ÇÇ} {DECIDE b b‚ÇÅ b‚ÇÇ} e rewrite shiftNameUp-inj (DECIDEinj1 e) | shiftNameUp-inj (DECIDEinj2 e) | shiftNameUp-inj (DECIDEinj3 e) = refl
shiftNameUp-inj {n} {EQ a a‚ÇÅ a‚ÇÇ} {EQ b b‚ÇÅ b‚ÇÇ} e rewrite shiftNameUp-inj (EQinj1 e) | shiftNameUp-inj (EQinj2 e) | shiftNameUp-inj (EQinj3 e) = refl
shiftNameUp-inj {n} {AX} {AX} e = refl
shiftNameUp-inj {n} {FREE} {FREE} e = refl
shiftNameUp-inj {n} {CS x} {CS x‚ÇÅ} e = ‚â°CS (sucIf‚â§-inj {n} {x} {x‚ÇÅ} (CSinj e))
shiftNameUp-inj {n} {NAME x} {NAME x‚ÇÅ} e = ‚â°NAME (sucIf‚â§-inj {n} {x} {x‚ÇÅ} (NAMEinj e))
shiftNameUp-inj {n} {FRESH a} {FRESH b} e rewrite shiftNameUp-inj (FRESHinj e) = refl
shiftNameUp-inj {n} {CHOOSE a a‚ÇÅ} {CHOOSE b b‚ÇÅ} e rewrite shiftNameUp-inj (CHOOSEinj1 e) | shiftNameUp-inj (CHOOSEinj2 e) = refl
--shiftNameUp-inj {n} {IFC0 a a‚ÇÅ a‚ÇÇ} {IFC0 b b‚ÇÅ b‚ÇÇ} e rewrite shiftNameUp-inj (IFC0inj1 e) | shiftNameUp-inj (IFC0inj2 e) | shiftNameUp-inj (IFC0inj3 e) = refl
shiftNameUp-inj {n} {TSQUASH a} {TSQUASH b} e rewrite shiftNameUp-inj (TSQUASHinj e) = refl
shiftNameUp-inj {n} {TTRUNC a} {TTRUNC b} e rewrite shiftNameUp-inj (TTRUNCinj e) = refl
shiftNameUp-inj {n} {TCONST a} {TCONST b} e rewrite shiftNameUp-inj (TCONSTinj e) = refl
shiftNameUp-inj {n} {SUBSING a} {SUBSING b} e rewrite shiftNameUp-inj (SUBSINGinj e) = refl
shiftNameUp-inj {n} {DUM a} {DUM b} e rewrite shiftNameUp-inj (DUMinj e) = refl
shiftNameUp-inj {n} {FFDEFS a a‚ÇÅ} {FFDEFS b b‚ÇÅ} e rewrite shiftNameUp-inj (FFDEFSinj1 e) | shiftNameUp-inj (FFDEFSinj2 e) = refl
shiftNameUp-inj {n} {PURE} {PURE} refl = refl
shiftNameUp-inj {n} {UNIV x} {UNIV .x} refl = refl
shiftNameUp-inj {n} {LIFT a} {LIFT b} e rewrite shiftNameUp-inj (LIFTinj e) = refl
shiftNameUp-inj {n} {LOWER a} {LOWER b} e rewrite shiftNameUp-inj (LOWERinj e) = refl
shiftNameUp-inj {n} {SHRINK a} {SHRINK b} e rewrite shiftNameUp-inj (SHRINKinj e) = refl


shiftUp-ShiftNameUp‚â°ShiftNameUp‚Üí : (v : Name) (f a : Term)
                                    ‚Üí shiftUp 0 (shiftNameUp v f) ‚â° shiftNameUp v a
                                    ‚Üí a ‚â° shiftUp 0 f
shiftUp-ShiftNameUp‚â°ShiftNameUp‚Üí v f a e
  rewrite shiftUp-shiftNameUp 0 v f = sym (shiftNameUp-inj e)


updBody‚â°shiftNameUp‚Üí : (v : Var) (name : Name) (f : Term) (a : Term)
                        ‚Üí updBody (sucIf‚â§ v name) (shiftNameUp v f) ‚â° shiftNameUp v a
                        ‚Üí a ‚â° updBody name f
updBody‚â°shiftNameUp‚Üí v name f (LET (VAR 0) (LET (IFLT (APPLY (CS x‚ÇÅ) (NUM 0)) (VAR 0) (CHOOSE (NAME x‚ÇÇ) (VAR 0)) AX) (APPLY a (VAR 1)))) e
  rewrite sym (sucIf‚â§-inj {v} {name} {x‚ÇÅ} (CSinj (APPLYinj1 (IFLTinj1 (LETinj1 (LETinj2 e))))))
        | sym (sucIf‚â§-inj {v} {name} {x‚ÇÇ} (NAMEinj (CHOOSEinj1 (IFLTinj3 (LETinj1 (LETinj2 e))))))
        | shiftUp-ShiftNameUp‚â°ShiftNameUp‚Üí v f a (APPLYinj1 (LETinj2 (LETinj2 e))) = refl



updCtxt2-shiftNameUp-LAMBDA‚Üí : (v : Var) {name : Name} {f : Term} (cf : # f) {a t : Term}
                                ‚Üí t ‚â° shiftNameUp v a
                                ‚Üí updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (LAMBDA t)
                                ‚Üí (updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v a) ‚Üí updCtxt2 name f a)
                                ‚Üí updCtxt2 name f (LAMBDA a)
updCtxt2-shiftNameUp-LAMBDA‚Üí v {name} {f} cf {a} {t} e (updCtxt2-LAMBDA .t upd‚ÇÅ) ind rewrite e = updCtxt2-LAMBDA _ (ind upd‚ÇÅ)
updCtxt2-shiftNameUp-LAMBDA‚Üí v {name} {f} cf {a} {.(updBody (sucIf‚â§ v name) (shiftNameUp v f))} e updCtxt2-upd ind
  rewrite updBody‚â°shiftNameUp‚Üí v name f a e = updCtxt2-upd



updCtxt2-shiftNameUp‚Üí : (v : Var) {name : Name} {f : Term} (cf : # f) {a : Term}
                         ‚Üí updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v a)
                         ‚Üí updCtxt2 name f a
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {VAR x} (updCtxt2-VAR .x) = updCtxt2-VAR _
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {NAT} upd = updCtxt2-NAT
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {QNAT} upd = updCtxt2-QNAT
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {LT a a‚ÇÅ} (updCtxt2-LT .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LT _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {QLT a a‚ÇÅ} (updCtxt2-QLT .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QLT _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {NUM x} upd = updCtxt2-NUM _
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ} (updCtxt2-IFLT .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) .(shiftNameUp v a‚ÇÇ) .(shiftNameUp v a‚ÇÉ) upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) = updCtxt2-IFLT _ _ _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÉ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÑ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {SUC a} (updCtxt2-SUC .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-SUC _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {PI a a‚ÇÅ} (updCtxt2-PI .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PI _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {LAMBDA a} upd =
  updCtxt2-shiftNameUp-LAMBDA‚Üí v {name} {f} cf {a} {shiftNameUp v a} refl upd ind
  where
    ind : updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v a) ‚Üí updCtxt2 name f a
    ind = updCtxt2-shiftNameUp‚Üí v cf
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {APPLY a a‚ÇÅ} (updCtxt2-APPLY .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-APPLY _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {FIX a} (updCtxt2-FIX .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-FIX _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {LET a a‚ÇÅ} (updCtxt2-LET .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LET _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {SUM a a‚ÇÅ} (updCtxt2-SUM .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SUM _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {PAIR a a‚ÇÅ} (updCtxt2-PAIR .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PAIR _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {SPREAD a a‚ÇÅ} (updCtxt2-SPREAD .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SPREAD _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {SET a a‚ÇÅ} (updCtxt2-SET .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SET _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {TUNION a a‚ÇÅ} (updCtxt2-TUNION .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-TUNION _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {ISECT a a‚ÇÅ} (updCtxt2-ISECT .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-ISECT _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {UNION a a‚ÇÅ} (updCtxt2-UNION .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-UNION _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {QTUNION a a‚ÇÅ} (updCtxt2-QTUNION .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QTUNION _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {INL a} (updCtxt2-INL .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-INL _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {INR a} (updCtxt2-INR .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-INR _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {DECIDE a a‚ÇÅ a‚ÇÇ} (updCtxt2-DECIDE .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) .(shiftNameUp v a‚ÇÇ) upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-DECIDE _ _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÉ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {EQ a a‚ÇÅ a‚ÇÇ} (updCtxt2-EQ .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) .(shiftNameUp v a‚ÇÇ) upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-EQ _ _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÉ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {AX} upd = updCtxt2-AX
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {FREE} upd = updCtxt2-FREE
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {CS x} upd = updCtxt2-CS _
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {NAME x} (updCtxt2-NAME .(sucIf‚â§ v x) d) = updCtxt2-NAME _ Œª z ‚Üí d (‚Üí‚â°sucIf‚â§ z)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {FRESH a} (updCtxt2-FRESH .(shiftNameUp (suc v) a) upd‚ÇÅ) =
  updCtxt2-FRESH a (updCtxt2-shiftNameUp‚Üí (suc v) {suc name} {shiftNameUp 0 f} (‚Üí#shiftNameUp 0 {f} cf) upd1)
  where
    seq : suc (sucIf‚â§ v name) ‚â° sucIf‚â§ (suc v) (sucIf‚â§ 0 name)
    seq rewrite sym (sucIf‚â§-sucIf‚â§ {name} {0} {v} _‚â§_.z‚â§n) | sym (suc‚â°sucIf‚â§0 (sucIf‚â§ v name)) = refl

    upd1 : updCtxt2 (sucIf‚â§ (suc v) (suc name)) (shiftNameUp (suc v) (shiftNameUp 0 f)) (shiftNameUp (suc v) a)
    upd1 rewrite suc‚â°sucIf‚â§0 name | sym seq | sym (shiftNameUp-shiftNameUp {0} {v} {f} _‚â§_.z‚â§n) = upd‚ÇÅ
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {CHOOSE a a‚ÇÅ} (updCtxt2-CHOOSE .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-CHOOSE _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {TSQUASH a} (updCtxt2-TSQUASH .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-TSQUASH _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {TTRUNC a} (updCtxt2-TTRUNC .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-TTRUNC _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {TCONST a} (updCtxt2-TCONST .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-TCONST _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {SUBSING a} (updCtxt2-SUBSING .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-SUBSING _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {DUM a} (updCtxt2-DUM .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-DUM _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {FFDEFS a a‚ÇÅ} (updCtxt2-FFDEFS .(shiftNameUp v a) .(shiftNameUp v a‚ÇÅ) upd‚ÇÅ upd‚ÇÇ) = updCtxt2-FFDEFS _ _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ) (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÇ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {PURE} upd = updCtxt2-PURE
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {UNIV x} upd = updCtxt2-UNIV _
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {LIFT a} (updCtxt2-LIFT .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-LIFT _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {LOWER a} (updCtxt2-LOWER .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-LOWER _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)
updCtxt2-shiftNameUp‚Üí v {name} {f} cf {SHRINK a} (updCtxt2-SHRINK .(shiftNameUp v a) upd‚ÇÅ) = updCtxt2-SHRINK _ (updCtxt2-shiftNameUp‚Üí v cf upd‚ÇÅ)



¬¨‚àànames‚ÜíisHighest‚Ñï-step : (cc : ContConds) {t u : Term} {w1 w2 : ùïé¬∑} {n : ‚Ñï} {name : Name}
                           ‚Üí ¬¨ name ‚àà names t
                           ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                           ‚Üí name ‚àà domùïé¬∑ w1
                           ‚Üí getT‚â§‚Ñï w1 n name
                           ‚Üí step t w1 ‚â° just (u , w2)
                           ‚Üí ¬¨ name ‚àà names u
                              √ó ¬¨ name ‚àà namesùïé¬∑ w2
                              √ó name ‚àà domùïé¬∑ w2
                              √ó getT‚â§‚Ñï w2 n name
¬¨‚àànames‚ÜíisHighest‚Ñï-step cc {t} {u} {w1} {w2} {n} {name} nnt nnw idom gt comp =
  fst (snd h) , fst (snd (snd h)) , snd (snd (snd h)) , gt2
  where
    h : getT 0 name w1 ‚â° getT 0 name w2 √ó ¬¨ name ‚àà names u √ó ¬¨ name ‚àà namesùïé¬∑ w2 √ó name ‚àà domùïé¬∑ w2
    h = name¬¨‚àà‚Üístep cc w1 w2 t u name comp nnt nnw idom

    gt2 : getT‚â§‚Ñï w2 n name
    gt2 rewrite (sym (fst h)) = gt


¬¨‚àànames‚ÜíisHighest‚Ñï : (cc : ContConds) {k : ‚Ñï} {t u : Term} {w1 w2 : ùïé¬∑} {n : ‚Ñï} {name : Name}
                      ‚Üí ¬¨ name ‚àà names t
                      ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                      ‚Üí name ‚àà domùïé¬∑ w1
                      ‚Üí getT‚â§‚Ñï w1 n name
                      ‚Üí (comp : steps k (t , w1) ‚â° (u , w2))
                      ‚Üí isHighest‚Ñï {k} {w1} {w2} n name comp
¬¨‚àànames‚ÜíisHighest‚Ñï cc {0} {t} {u} {w1} {w2} {n} {name} nnt nnw idom gtn comp
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = gtn
¬¨‚àànames‚ÜíisHighest‚Ñï cc {suc k} {t} {u} {w1} {w2} {n} {name} nnt nnw idom gtn comp with step‚äé t w1
... | inj‚ÇÅ (t' , w1' , z) rewrite z =
  gtn , ¬¨‚àànames‚ÜíisHighest‚Ñï cc {k} {t'} {u} {w1'} {w2} {n} {name} (fst q) (fst (snd q)) (fst (snd (snd q))) (snd (snd (snd q))) comp
  where
    q : ¬¨ name ‚àà names t' √ó ¬¨ name ‚àà namesùïé¬∑ w1' √ó name ‚àà domùïé¬∑ w1' √ó getT‚â§‚Ñï w1' n name
    q = ¬¨‚àànames‚ÜíisHighest‚Ñï-step cc {t} {t'} {w1} {w1'} {n} {name} nnt nnw idom gtn z
... | inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = gtn



¬¨‚àànames‚Üí‚àànamesùïé : (cc : ContConds) {k : ‚Ñï} {t u : Term} {w1 w2 : ùïé¬∑} {name : Name}
                      ‚Üí ¬¨ name ‚àà names t
                      ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                      ‚Üí name ‚àà domùïé¬∑ w1
                      ‚Üí (comp : steps k (t , w1) ‚â° (u , w2))
                      ‚Üí ‚àànamesùïé {k} {w1} {w2} name comp
¬¨‚àànames‚Üí‚àànamesùïé cc {0} {t} {u} {w1} {w2} {name} nnt nnw idom comp
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = nnw , idom
¬¨‚àànames‚Üí‚àànamesùïé cc {suc k} {t} {u} {w1} {w2} {name} nnt nnw idom comp with step‚äé t w1
... | inj‚ÇÅ (t' , w1' , z) rewrite z =
  nnw , idom ,
  ¬¨‚àànames‚Üí‚àànamesùïé cc {k} {t'} {u} {w1'} {w2} {name} (fst (snd q)) (fst (snd (snd q))) (snd (snd (snd q))) comp
  where
    q : getT 0 name w1 ‚â° getT 0 name w1' √ó ¬¨ name ‚àà names t' √ó ¬¨ name ‚àà namesùïé¬∑ w1' √ó name ‚àà domùïé¬∑ w1'
    q = name¬¨‚àà‚Üístep cc w1 w1' t t' name z nnt nnw idom
... | inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = nnw , idom



‚ÜíisHighest‚Ñï-upd-body2-NUM3b :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {n m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí compatible¬∑ name w Res‚ä§
    ‚Üí (comp : steps k (LET AX (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , chooseT name w (NUM m))
               ‚â° (APPLY f (NUM m) , chooseT name w (NUM m)))
    ‚Üí getT 0 name w ‚â° just (NUM m')
    ‚Üí m < n
    ‚Üí isHighest‚Ñï {k} {chooseT name w (NUM m)} {chooseT name w (NUM m)} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM3b cc gc {0} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat () g0 ltn
‚ÜíisHighest‚Ñï-upd-body2-NUM3b cc gc {suc k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 ltn
  rewrite #shiftUp 0 (ct f cf) | subv# 1 (NUM m) f cf | #shiftUp 0 (ct f cf) | #shiftDown 1 (ct f cf)
        | #shiftUp 0 (ct f cf) | subv# 0 AX f cf | #shiftDown 0 (ct f cf) =
  g1 ,
  ¬¨‚àànames‚ÜíisHighest‚Ñï cc {k} {APPLY f (NUM m)} {APPLY f (NUM m)} {chooseT name w (NUM m)} {chooseT name w (NUM m)} {n} {name} (¬¨‚àànames-APPLY {name} {f} {NUM m} nnf (¬¨‚àànames-NUM {name} {m})) (Œª z ‚Üí nnw (ContConds.ccNchoose cc name name w (NUM m) (¬¨‚àànames-NUM {name} {m}) z)) (ContConds.ccDchoose cc name name w (NUM m) idom) g1 comp
  where
    g1 : getT‚â§‚Ñï (chooseT name w (NUM m)) n name
    g1 rewrite gc name w m compat = m , refl , ltn



‚ÜíisHighest‚Ñï-upd-body2-NUM3b-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET AX (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , chooseT name w (NUM m))
               ‚â° (APPLY f (NUM m) , chooseT name w (NUM m)))
    ‚Üí ‚àànamesùïé {k} {chooseT name w (NUM m)} {chooseT name w (NUM m)} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM3b-‚àànamesùïé cc gc {0} {name} {w} {f} {m} {m'} cf nnf nnw idom comp =
  (Œª z ‚Üí nnw (ContConds.ccNchoose cc name name w (NUM m) (¬¨‚àànames-NUM {name} {m}) z)) ,
  ContConds.ccDchoose cc name name w (NUM m) idom
‚ÜíisHighest‚Ñï-upd-body2-NUM3b-‚àànamesùïé cc gc {suc k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp
  rewrite #shiftUp 0 (ct f cf) | subv# 1 (NUM m) f cf | #shiftUp 0 (ct f cf) | #shiftDown 1 (ct f cf)
        | #shiftUp 0 (ct f cf) | subv# 0 AX f cf | #shiftDown 0 (ct f cf) =
  (Œª z ‚Üí nnw (ContConds.ccNchoose cc name name w (NUM m) (¬¨‚àànames-NUM {name} {m}) z)) ,
  ContConds.ccDchoose cc name name w (NUM m) idom ,
  ¬¨‚àànames‚Üí‚àànamesùïé
    cc {k} {APPLY f (NUM m)} {APPLY f (NUM m)} {chooseT name w (NUM m)} {chooseT name w (NUM m)} {name}
    (¬¨‚àànames-APPLY {name} {f} {NUM m} nnf (¬¨‚àànames-NUM {name} {m}))
    (Œª z ‚Üí nnw (ContConds.ccNchoose cc name name w (NUM m) (¬¨‚àànames-NUM {name} {m}) z))
    (ContConds.ccDchoose cc name name w (NUM m) idom)
    comp



‚ÜíisHighest‚Ñï-upd-body2-NUM3 :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {n m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí compatible¬∑ name w Res‚ä§
    ‚Üí (comp : steps k (LET (CHOOSE (NAME name) (NUM m)) (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , chooseT name w (NUM m)))
    ‚Üí getT 0 name w ‚â° just (NUM m')
    ‚Üí m' < n
    ‚Üí m < n
    ‚Üí isHighest‚Ñï {k} {w} {chooseT name w (NUM m)} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM3 cc gc {0} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat () g0 ltn ltn'
‚ÜíisHighest‚Ñï-upd-body2-NUM3 cc gc {suc k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 ltn ltn' =
  (m' , g0 , ltn) ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM3b cc gc {k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 ltn'





‚ÜíisHighest‚Ñï-upd-body2-NUM3-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET (CHOOSE (NAME name) (NUM m)) (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , chooseT name w (NUM m)))
    ‚Üí ‚àànamesùïé {k} {w} {chooseT name w (NUM m)} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM3-‚àànamesùïé cc gc {0} {name} {w} {f} {m} {m'} cf nnf nnw idom ()
‚ÜíisHighest‚Ñï-upd-body2-NUM3-‚àànamesùïé cc gc {suc k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp =
  nnw , idom ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM3b-‚àànamesùïé cc gc {k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp



‚ÜíisHighest‚Ñï-upd-body2-NUM4 :
    (cc : ContConds) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {n m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET AX (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , w))
    ‚Üí getT 0 name w ‚â° just (NUM m')
    ‚Üí m' < n
    ‚Üí isHighest‚Ñï {k} {w} {w} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM4 cc {0} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom () g0 ltn
‚ÜíisHighest‚Ñï-upd-body2-NUM4 cc {suc k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom comp g0 ltn
  rewrite #shiftUp 0 (ct f cf) | subv# 1 (NUM m) f cf | #shiftDown 1 (ct f cf)
        | #shiftUp 0 (ct f cf) | subv# 0 AX f cf | #shiftDown 0 (ct f cf) =
  (m' , g0 , ltn) ,
  ¬¨‚àànames‚ÜíisHighest‚Ñï cc {k} {APPLY f (NUM m)} {APPLY f (NUM m)} {w} {w} {n} {name} (¬¨‚àànames-APPLY {name} {f} {NUM m} nnf (¬¨‚àànames-NUM {name} {m})) nnw idom (m' , g0 , ltn) comp





‚ÜíisHighest‚Ñï-upd-body2-NUM4-‚àànamesùïé :
    (cc : ContConds) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET AX (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , w))
    ‚Üí ‚àànamesùïé {k} {w} {w} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM4-‚àànamesùïé cc {0} {name} {w} {f} {m} {m'} cf nnf nnw idom ()
‚ÜíisHighest‚Ñï-upd-body2-NUM4-‚àànamesùïé cc {suc k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp
  rewrite #shiftUp 0 (ct f cf) | subv# 1 (NUM m) f cf | #shiftDown 1 (ct f cf)
        | #shiftUp 0 (ct f cf) | subv# 0 AX f cf | #shiftDown 0 (ct f cf) =
  nnw , idom ,
  ¬¨‚àànames‚Üí‚àànamesùïé
    cc {k} {APPLY f (NUM m)} {APPLY f (NUM m)} {w} {w} {name}
    (¬¨‚àànames-APPLY {name} {f} {NUM m} nnf (¬¨‚àànames-NUM {name} {m}))
    nnw idom comp


‚ÜíisHighest‚Ñï-upd-body2-NUM2 :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {n m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí compatible¬∑ name w Res‚ä§
    ‚Üí (comp : steps k (LET (IFLT (NUM m') (NUM m) (setT name (NUM m)) AX) (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , chooseT0if name w m' m))
    ‚Üí getT 0 name w ‚â° just (NUM m')
    ‚Üí m' < n
    ‚Üí getT‚â§‚Ñï (chooseT0if name w m' m) n name
    ‚Üí isHighest‚Ñï {k} {w} {chooseT0if name w m' m} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM2 cc gc {0} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat () g0 ltn gtn
‚ÜíisHighest‚Ñï-upd-body2-NUM2 cc gc {suc k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 ltn gtn with m' <? m
... | yes x = (m' , g0 , ltn) , ‚ÜíisHighest‚Ñï-upd-body2-NUM3 cc gc {k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 ltn (getT‚â§‚Ñï-chooseT‚Üí gc {name} {w} {n} {m} compat gtn)
... | no x = (m' , g0 , ltn) , ‚ÜíisHighest‚Ñï-upd-body2-NUM4 cc {k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom comp g0 ltn



‚ÜíisHighest‚Ñï-upd-body2-NUM2-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET (IFLT (NUM m') (NUM m) (setT name (NUM m)) AX) (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , chooseT0if name w m' m))
    ‚Üí ‚àànamesùïé {k} {w} {chooseT0if name w m' m} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM2-‚àànamesùïé cc gc {0} {name} {w} {f} {m} {m'} cf nnf nnw idom ()
‚ÜíisHighest‚Ñï-upd-body2-NUM2-‚àànamesùïé cc gc {suc k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp with m' <? m
... | yes x = nnw , idom , ‚ÜíisHighest‚Ñï-upd-body2-NUM3-‚àànamesùïé cc gc {k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp
... | no x = nnw , idom , ‚ÜíisHighest‚Ñï-upd-body2-NUM4-‚àànamesùïé cc {k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp



‚ÜíisHighest‚Ñï-upd-body2-NUM1 : (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {n m m' : ‚Ñï}
                             ‚Üí # f
                             ‚Üí ¬¨ name ‚àà names f
                             ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                             ‚Üí name ‚àà domùïé¬∑ w
                             ‚Üí compatible¬∑ name w Res‚ä§
                             ‚Üí (comp : steps k (LET (IFLT (get0 name) (NUM m) (setT name (NUM m)) AX) (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
                                        ‚â° (APPLY f (NUM m) , chooseT0if name w m' m))
                             ‚Üí getT 0 name w ‚â° just (NUM m')
                             ‚Üí m' < n
                             ‚Üí getT‚â§‚Ñï (chooseT0if name w m' m) n name
                             ‚Üí isHighest‚Ñï {k} {w} {chooseT0if name w m' m} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM1 cc gc {0} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat () g0 len gtn
‚ÜíisHighest‚Ñï-upd-body2-NUM1 cc gc {suc k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 len gtn rewrite g0 =
  (m' , g0 , len) ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM2 cc gc {k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 len gtn



‚ÜíisHighest‚Ñï-upd-body2-NUM1-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET (IFLT (get0 name) (NUM m) (setT name (NUM m)) AX) (APPLY (shiftDown 1 (subv 1 (NUM m) (shiftUp 0 f))) (NUM m)) , w)
               ‚â° (APPLY f (NUM m) , chooseT0if name w m' m))
    ‚Üí getT 0 name w ‚â° just (NUM m')
    ‚Üí ‚àànamesùïé {k} {w} {chooseT0if name w m' m} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM1-‚àànamesùïé cc gc {0} {name} {w} {f} {m} {m'} cf nnf nnw idom () g0
‚ÜíisHighest‚Ñï-upd-body2-NUM1-‚àànamesùïé cc gc {suc k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp g0 rewrite g0 =
  nnw , idom ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM2-‚àànamesùïé cc gc {k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp



‚ÜíisHighest‚Ñï-upd-body2-NUM1b : (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w w' : ùïé¬∑} {b f : Term} {n m m' : ‚Ñï}
                             ‚Üí # f
                             ‚Üí ¬¨ name ‚àà names f
                             ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                             ‚Üí name ‚àà domùïé¬∑ w
                             ‚Üí compatible¬∑ name w Res‚ä§
                             ‚Üí b ‚â° NUM m
                             ‚Üí w ‚â° w'
                             ‚Üí (comp : steps k (LET (IFLT (get0 name) (shiftDown 0 (shiftUp 0 b)) (setT name (shiftDown 0 (shiftUp 0 b))) AX)
                                                     (APPLY (shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 b)) (shiftUp 0 f)))
                                                            (shiftDown 1 (shiftUp 0 (shiftUp 0 b)))) , w)
                                        ‚â° (APPLY f (NUM m) , chooseT0if name w' m' m))
                             ‚Üí getT 0 name w' ‚â° just (NUM m')
                             ‚Üí m' < n
                             ‚Üí getT‚â§‚Ñï (chooseT0if name w' m' m) n name
                             ‚Üí isHighest‚Ñï {k} {w} {chooseT0if name w' m' m} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM1b cc gc {k} {name} {w} {w'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat eqb eqw comp g0 len gtn
  rewrite eqb | eqw =
  ‚ÜíisHighest‚Ñï-upd-body2-NUM1 cc gc {k} {name} {w'} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 len gtn



‚ÜíisHighest‚Ñï-upd-body2-NUM1b-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w w' : ùïé¬∑} {b f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí b ‚â° NUM m
    ‚Üí w ‚â° w'
    ‚Üí (comp : steps k (LET (IFLT (get0 name) (shiftDown 0 (shiftUp 0 b)) (setT name (shiftDown 0 (shiftUp 0 b))) AX)
                            (APPLY (shiftDown 1 (subv 1 (shiftUp 0 (shiftUp 0 b)) (shiftUp 0 f)))
                                   (shiftDown 1 (shiftUp 0 (shiftUp 0 b)))) , w)
               ‚â° (APPLY f (NUM m) , chooseT0if name w' m' m))
    ‚Üí getT 0 name w' ‚â° just (NUM m')
    ‚Üí ‚àànamesùïé {k} {w} {chooseT0if name w' m' m} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM1b-‚àànamesùïé cc gc {k} {name} {w} {w'} {b} {f} {m} {m'} cf nnf nnw idom eqb eqw comp g0
  rewrite eqb | eqw =
  ‚ÜíisHighest‚Ñï-upd-body2-NUM1-‚àànamesùïé cc gc {k} {name} {w'} {f} {m} {m'} cf nnf nnw idom comp g0



‚ÜíisHighest‚Ñï-upd-body2-NUM : (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {n m m' : ‚Ñï}
                             ‚Üí # f
                             ‚Üí ¬¨ name ‚àà names f
                             ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                             ‚Üí name ‚àà domùïé¬∑ w
                             ‚Üí compatible¬∑ name w Res‚ä§
                             ‚Üí (comp : steps k (LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w)
                                        ‚â° (APPLY f (NUM m) , chooseT0if name w m' m))
                             ‚Üí getT 0 name w ‚â° just (NUM m')
                             ‚Üí m' < n
                             ‚Üí getT‚â§‚Ñï (chooseT0if name w m' m) n name
                             ‚Üí isHighest‚Ñï {k} {w} {chooseT0if name w m' m} n name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM cc gc {0} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat () g0 len gtn
‚ÜíisHighest‚Ñï-upd-body2-NUM cc gc {suc k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 len gtn =
  (m' , g0 , len) ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM1 cc gc {k} {name} {w} {f} {n} {m} {m'} cf nnf nnw idom compat comp g0 len gtn



‚ÜíisHighest‚Ñï-upd-body2-NUM-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k : ‚Ñï} {name : Name} {w : ùïé¬∑} {f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
    ‚Üí name ‚àà domùïé¬∑ w
    ‚Üí (comp : steps k (LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w)
               ‚â° (APPLY f (NUM m) , chooseT0if name w m' m))
    ‚Üí getT 0 name w ‚â° just (NUM m')
    ‚Üí ‚àànamesùïé {k} {w} {chooseT0if name w m' m} name comp
‚ÜíisHighest‚Ñï-upd-body2-NUM-‚àànamesùïé cc gc {0} {name} {w} {f} {m} {m'} cf nnf nnw idom () g0
‚ÜíisHighest‚Ñï-upd-body2-NUM-‚àànamesùïé cc gc {suc k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp g0 =
  nnw , idom ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM1-‚àànamesùïé cc gc {k} {name} {w} {f} {m} {m'} cf nnf nnw idom comp g0



‚ÜíisHighest‚Ñï-upd-body2 : (cc : ContConds) (gc : get-choose-‚Ñï) {k1 k2 : ‚Ñï} {name : Name} {w1 w1' : ùïé¬∑} {b f : Term} {n m m' : ‚Ñï}
                         ‚Üí # f
                         ‚Üí ¬¨ name ‚àà names f
                         ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                         ‚Üí name ‚àà domùïé¬∑ w1
                         ‚Üí compatible¬∑ name w1 Res‚ä§
                         ‚Üí (comp1 : steps k1 (b , w1) ‚â° (NUM m , w1'))
                         ‚Üí (comp2 : steps k2 (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1)
                                     ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m))
                         ‚Üí getT 0 name w1' ‚â° just (NUM m')
                         ‚Üí getT‚â§‚Ñï (chooseT0if name w1' m' m) n name
                         ‚Üí isHighest‚Ñï {k1} {w1} {w1'} {b} {NUM m} n name comp1
                         ‚Üí ‚àànamesùïé {k1} {w1} {w1'} {b} {NUM m} name comp1
                         ‚Üí isHighest‚Ñï {k2} {w1} {chooseT0if name w1' m' m} n name comp2
‚ÜíisHighest‚Ñï-upd-body2 cc gc {0} {k2} {name} {w1} {w1'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat comp1 comp2 g0 gtn h inw
  rewrite pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 | g0 =
  ‚ÜíisHighest‚Ñï-upd-body2-NUM cc gc {k2} {name} {w1'} {f} {n} {m} {m'} cf nnf nnw idom compat comp2 g0 (Œ£‚â°justNUM‚â§ h) gtn
‚ÜíisHighest‚Ñï-upd-body2 cc gc {suc k1} {0} {name} {w1} {w1'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat comp1 () g0 gtn h inw
‚ÜíisHighest‚Ñï-upd-body2 cc gc {suc k1} {suc k2} {name} {w1} {w1'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat comp1 comp2 g0 gtn h inw with step‚äé b w1
... | inj‚ÇÅ (b' , w' , z) rewrite z with isValue‚äé b
... |    inj‚ÇÅ x
  rewrite stepVal b w1 x
        | sym (pair-inj‚ÇÅ (just-inj z))
        | sym (pair-inj‚ÇÇ (just-inj z)) =
  fst h , ‚ÜíisHighest‚Ñï-upd-body2-NUM1b cc gc {k2} {name} {w1} {w1'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat eqb eqw comp2 g0 (getT-getT‚â§‚Ñï‚Üí eqw g0 (fst h)) gtn
  where
    eqb : b ‚â° NUM m
    eqb = stepsVal‚Üí‚Çó b (NUM m) w1 w1' k1 x comp1

    eqw : w1 ‚â° w1'
    eqw = stepsVal‚Üí·µ£ b (NUM m) w1 w1' k1 x comp1
... |    inj‚ÇÇ x rewrite z =
  fst h , ‚ÜíisHighest‚Ñï-upd-body2 cc gc {k1} {k2} {name} {w'} {w1'} {b'} {f} {n} {m} {m'} cf nnf
                                 (‚àànamesùïé‚Üí¬¨‚àànameùïé {k1} {w'} {w1'} {b'} {NUM m} name comp1 (snd (snd inw)))
                                 (‚àànamesùïé‚Üí‚ààdomùïé {k1} {w'} {w1'} {b'} {NUM m} name comp1 (snd (snd inw)))
                                 (‚äë-compatible¬∑ (step‚äë {w1} {w'} {b} {b'} z) compat)
                                 comp1 comp2 g0 gtn (snd h) (snd (snd inw))
‚ÜíisHighest‚Ñï-upd-body2 cc gc {suc k1} {suc k2} {name} {w1} {w1'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat comp1 comp2 g0 gtn h inw | inj‚ÇÇ z
  rewrite z | pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 = ‚ä•-elim (¬¨just‚â°nothing z)


‚ÜíisHighest‚Ñï-upd-body2-‚àànamesùïé :
    (cc : ContConds) (gc : get-choose-‚Ñï) {k1 k2 : ‚Ñï} {name : Name} {w1 w1' : ùïé¬∑} {b f : Term} {m m' : ‚Ñï}
    ‚Üí # f
    ‚Üí ¬¨ name ‚àà names f
    ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
    ‚Üí name ‚àà domùïé¬∑ w1
    ‚Üí (comp1 : steps k1 (b , w1) ‚â° (NUM m , w1'))
    ‚Üí (comp2 : steps k2 (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1)
                ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m))
    ‚Üí getT 0 name w1' ‚â° just (NUM m')
    ‚Üí ‚àànamesùïé {k1} {w1} {w1'} {b} {NUM m} name comp1
    ‚Üí ‚àànamesùïé {k2} {w1} {chooseT0if name w1' m' m} {LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {APPLY f (NUM m)} name comp2
‚ÜíisHighest‚Ñï-upd-body2-‚àànamesùïé cc gc {0} {k2} {name} {w1} {w1'} {b} {f} {m} {m'} cf nnf nnw idom comp1 comp2 g0 inw
  rewrite pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 | g0
  = ‚ÜíisHighest‚Ñï-upd-body2-NUM-‚àànamesùïé cc gc {k2} {name} {w1'} {f} {m} {m'} cf nnf nnw idom comp2 g0
‚ÜíisHighest‚Ñï-upd-body2-‚àànamesùïé cc gc {suc k1} {suc k2} {name} {w1} {w1'} {b} {f} {m} {m'} cf nnf nnw idom comp1 comp2 g0 inw with step‚äé b w1
... | inj‚ÇÅ (b' , w' , z) rewrite z with isValue‚äé b
... |    inj‚ÇÅ x
  rewrite stepVal b w1 x
        | sym (pair-inj‚ÇÅ (just-inj z))
        | sym (pair-inj‚ÇÇ (just-inj z)) =
  nnw , idom ,
  ‚ÜíisHighest‚Ñï-upd-body2-NUM1b-‚àànamesùïé cc gc {k2} {name} {w1} {w1'} {b} {f} {m} {m'} cf nnf nnw idom eqb eqw comp2 g0
  where
    eqb : b ‚â° NUM m
    eqb = stepsVal‚Üí‚Çó b (NUM m) w1 w1' k1 x comp1

    eqw : w1 ‚â° w1'
    eqw = stepsVal‚Üí·µ£ b (NUM m) w1 w1' k1 x comp1
... |    inj‚ÇÇ x rewrite z =
  nnw , idom ,
  ‚ÜíisHighest‚Ñï-upd-body2-‚àànamesùïé
    cc gc {k1} {k2} {name} {w'} {w1'} {b'} {f} {m} {m'} cf nnf
    (‚àànamesùïé‚Üí¬¨‚àànameùïé {k1} {w'} {w1'} {b'} {NUM m} name comp1 (snd (snd inw)))
    (‚àànamesùïé‚Üí‚ààdomùïé {k1} {w'} {w1'} {b'} {NUM m} name comp1 (snd (snd inw)))
    comp1 comp2 g0 (snd (snd inw))
‚ÜíisHighest‚Ñï-upd-body2-‚àànamesùïé cc gc {suc k1} {suc k2} {name} {w1} {w1'} {b} {f} {m} {m'} cf nnf nnw idom comp1 comp2 g0 inw | inj‚ÇÇ z
  rewrite z | pair-inj‚ÇÅ comp1 | pair-inj‚ÇÇ comp1 = ‚ä•-elim (¬¨just‚â°nothing z)



‚ÜíŒ£highestUpdCtxt2-upd : (cc : ContConds) (gc : get-choose-‚Ñï) {name : Name} {f b : Term} {w1 : ùïé¬∑} {n : ‚Ñï}
                        ‚Üí compatible¬∑ name w1 Res‚ä§
                        ‚Üí ‚àÄùïé-get0-NUM w1 name
                        ‚Üí # f
                        ‚Üí ¬¨ name ‚àà names f
                        ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1
                        ‚Üí name ‚àà domùïé¬∑ w1
                        ‚Üí updCtxt2 name f b
                        ‚Üí stepsPresHighest‚Ñï2 name f (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
                        ‚Üí Œ£highestUpdCtxt2 name f n (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1
‚ÜíŒ£highestUpdCtxt2-upd cc gc {name} {f} {b} {w1} {n} compat wgt0 cf nnf nnw idom nnb (k , v , w2 , comp , isv , ind) =
  k2 , APPLY f (NUM m) , chooseT0if name w1' m' m , comp2 , j , inw  ,
  updCtxt2-refl name f (APPLY f (NUM m)) (¬¨‚àànames-APPLY {name} {f} {NUM m} nnf (¬¨‚àànames-NUM {name} {m}))
  where
    c : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w1' ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ‚Ñï (Œª m' ‚Üí
           k1 < k
           √ó k2 < k
           √ó getT 0 name w1' ‚â° just (NUM m')
           √ó ssteps k1 (b , w1) ‚â° just (NUM m , w1')
           √ó steps k2 (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m))))))
    c = upd-decomp cf wgt0 comp isv

    k1 : ‚Ñï
    k1 = fst c

    k2 : ‚Ñï
    k2 = fst (snd c)

    w1' : ùïé¬∑
    w1' = fst (snd (snd c))

    m : ‚Ñï
    m = fst (snd (snd (snd c)))

    m' : ‚Ñï
    m' = fst (snd (snd (snd (snd c))))

    ltk1 : k1 < k
    ltk1 = fst (snd (snd (snd (snd (snd c)))))

    ltk2 : k2 < k
    ltk2 = fst (snd (snd (snd (snd (snd (snd c))))))

    gt0 : getT 0 name w1' ‚â° just (NUM m')
    gt0 = fst (snd (snd (snd (snd (snd (snd (snd c)))))))

    comp1 : ssteps k1 (b , w1) ‚â° just (NUM m , w1')
    comp1 = fst (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    comp1b : steps k1 (b , w1) ‚â° (NUM m , w1')
    comp1b = ssteps‚Üísteps {k1} {b} {NUM m} {w1} {w1'} comp1

    comp2 : steps k2 (LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (APPLY f (NUM m) , chooseT0if name w1' m' m)
    comp2 = snd (snd (snd (snd (snd (snd (snd (snd (snd c))))))))

    e1 : w1 ‚äë¬∑ w1'
    e1 = steps‚Üí‚äë k1 b (NUM m) comp1b

    ind' : (getT‚â§‚Ñï w1' n name ‚Üí isHighest‚Ñï {k1} {w1} {w1'} {b} {NUM m} n name comp1b)
           √ó ‚àànamesùïé {k1} {w1} {w1'} {b} {NUM m} name comp1b
    ind' = ind k1 (<‚áí‚â§ ltk1) {w1} {w1'} {b} {NUM m} {n} comp1b tt nnb compat wgt0 nnw idom

    j : getT‚â§‚Ñï (chooseT0if name w1' m' m) n name
         ‚Üí (getT‚â§‚Ñï w1 n name √ó isHighest‚Ñï {k2} {w1} {chooseT0if name w1' m' m} n name comp2)
    j g = isHighest‚Ñï‚ÜígetT‚â§‚Ñï {k1} {w1} {w1'} {b} {NUM m} n name comp1b (fst ind' g') , j1
      where
        g' : getT‚â§‚Ñï w1' n name
        g' = getT‚â§‚Ñï-chooseT0if‚Üí gc {w1'} {name} {n} {m} {m'} (‚äë-compatible¬∑ e1 compat) gt0 g

        j1 : isHighest‚Ñï {k2} {w1} {chooseT0if name w1' m' m} {LET b (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))} {APPLY f (NUM m)} n name comp2
        j1 = ‚ÜíisHighest‚Ñï-upd-body2 cc gc {k1} {k2} {name} {w1} {w1'} {b} {f} {n} {m} {m'} cf nnf nnw idom compat comp1b comp2 gt0 g (fst ind' g') (snd ind')

    inw : ‚àànamesùïé {k2} {w1} {chooseT0if name w1' m' m} name comp2
    inw = ‚ÜíisHighest‚Ñï-upd-body2-‚àànamesùïé cc gc {k1} {k2} {name} {w1} {w1'} {b} {f} {m} {m'} cf nnf nnw idom comp1b comp2 gt0 (snd ind')



Œ£highestUpdCtxtAux2-APPLY‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï} {b : Term}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY a1 b) (APPLY a' b) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (APPLY a b) (APPLY a' b) w0 w w'
Œ£highestUpdCtxtAux2-APPLY‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} {b} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-LAM a
... | inj‚ÇÅ (x , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p with is-CS a
... |    inj‚ÇÅ (y , q) rewrite q = ‚ä•-elim (nv tt)
... |    inj‚ÇÇ q rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-APPLY‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' b : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY a b) (APPLY a' b) w0 w w')
Œ£highestUpdCtxtAux2-APPLY‚ÇÅ {0} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-APPLY _ _ u ub
Œ£highestUpdCtxtAux2-APPLY‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-APPLY‚ÇÅ {k} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-APPLY‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY a1 b) (APPLY a' b) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-APPLY‚ÇÅ {k} {name} {f} {n} {a1} {a'} {b} {w0} {w1} {w'} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-APPLY‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-APPLY _ _ u ub



Œ£highestUpdCtxt2-APPLY‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a b : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (APPLY a b) w0 w
Œ£highestUpdCtxt2-APPLY‚ÇÅ {name} {f} {n} {a} {b} {w0} {w} ub (k , a' , w' , wcomp , i , inw , u) =
  fst q , APPLY a' b , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY a b) (APPLY a' b) w0 w w')
    q = Œ£highestUpdCtxtAux2-APPLY‚ÇÅ {k} ub (wcomp , i , inw , u)



Œ£highestUpdCtxtAux2-APPLY‚ÇÇ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {name' : Name} {b b1 b' : Term} {name : Name} {f : Term} {n : ‚Ñï}
                               ‚Üí ¬¨ isValue b
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step b w ‚â° just (b1 , w1)
                               ‚Üí (comp : steps k (b1 , w1) ‚â° (b' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {b1} {b'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY (CS name') b1) (APPLY (CS name') b') w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (APPLY (CS name') b) (APPLY (CS name') b') w0 w w'
Œ£highestUpdCtxtAux2-APPLY‚ÇÇ-aux {j} {k} {w} {w0} {w1} {w'} {name'} {b} {b1} {b'} {name} {f} {n} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-NUM b
... | inj‚ÇÅ (m , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-APPLY‚ÇÇ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {name' : Name} {b b' : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n b b' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY (CS name') b) (APPLY (CS name') b') w0 w w')
Œ£highestUpdCtxtAux2-APPLY‚ÇÇ {0} {name} {f} {n} {name'} {b} {b'} {w0} {w} {w'} (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-APPLY _ _ (updCtxt2-CS name') u
Œ£highestUpdCtxtAux2-APPLY‚ÇÇ {suc k} {name} {f} {n} {name'} {b} {b'} {w0} {w} {w'} (comp , i , inw , u) with step‚äé b w
... | inj‚ÇÅ (b1 , w1 , z) rewrite z with isValue‚äé b
... |    inj‚ÇÅ y rewrite stepVal b w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-APPLY‚ÇÇ {k} (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-APPLY‚ÇÇ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY (CS name') b1) (APPLY (CS name') b') w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-APPLY‚ÇÇ {k} {name} {f} {n} {name'} {b1} {b'} {w0} {w1} {w'} (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-APPLY‚ÇÇ {suc k} {name} {f} {n} {name'} {b} {b'} {w0} {w} {w'} (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-APPLY _ _ (updCtxt2-CS name') u



Œ£highestUpdCtxt2-APPLY‚ÇÇ : {name : Name} {f : Term} {n : ‚Ñï} {name' : Name} {b : Term} {w0 w : ùïé¬∑}
                        ‚Üí Œ£highestUpdCtxt2 name f n b w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (APPLY (CS name') b) w0 w
Œ£highestUpdCtxt2-APPLY‚ÇÇ {name} {f} {n} {name'} {b} {w0} {w} (k , b' , w' , wcomp , i , inw , u) =
  fst q , APPLY (CS name') b' , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (APPLY (CS name') b) (APPLY (CS name') b') w0 w w')
    q = Œ£highestUpdCtxtAux2-APPLY‚ÇÇ {k} (wcomp , i , inw , u)



stepsPresHighest‚Ñï2-APPLY‚ÇÅ‚Üí : {name : Name} {f : Term} {a b : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (APPLY a b) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-APPLY‚ÇÅ‚Üí {name} {f} {a} {b} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = APPLY‚ÜíhasValue k a b v w w' comp isv



APPLY‚ÜíhasValue‚ÇÇ : (k : ‚Ñï) (name : Name) (b v : Term) (w w' : ùïé¬∑)
                 ‚Üí steps k (APPLY (CS name) b , w) ‚â° (v , w')
                 ‚Üí isValue v
                 ‚Üí hasValue‚Ñï k b w
APPLY‚ÜíhasValue‚ÇÇ 0 name b v w w' comp isv rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv
APPLY‚ÜíhasValue‚ÇÇ (suc k) name b v w w' comp isv with is-NUM b
... | inj‚ÇÅ (m , p) rewrite p = isValue‚ÜíhasValue‚Ñï (suc k) (NUM m) w tt
... | inj‚ÇÇ p with step‚äé b w
... |    inj‚ÇÅ (b' , w'' , z) rewrite z = APPLY‚ÜíhasValue‚ÇÇ k name b' v w'' w' comp isv
... |    inj‚ÇÇ z rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp) = ‚ä•-elim isv


stepsPresHighest‚Ñï2-APPLY‚ÇÇ‚Üí : {name : Name} {f : Term} {name' : Name} {a : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (APPLY (CS name') a) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-APPLY‚ÇÇ‚Üí {name} {f} {name'} {a} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = APPLY‚ÜíhasValue‚ÇÇ k name' a v w w' comp isv





stepsPresHighest‚Ñï2-IFLT‚ÇÇ‚Üí : {name : Name} {f : Term} {n : ‚Ñï} {b c d : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (IFLT (NUM n) b c d) w
                            ‚Üí stepsPresHighest‚Ñï2 name f b w
stepsPresHighest‚Ñï2-IFLT‚ÇÇ‚Üí {name} {f} {n} {b} {c} {d} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k b w
    hv = IFLT-NUM‚ÜíhasValue k n b c d v w w' comp isv



Œ£highestUpdCtxtAux2-IFLT‚ÇÇ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {b b1 b' : Term} {name : Name} {f : Term} {n : ‚Ñï} {m : ‚Ñï} {c d : Term}
                               ‚Üí ¬¨ isValue b
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step b w ‚â° just (b1 , w1)
                               ‚Üí (comp : steps k (b1 , w1) ‚â° (b' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {b1} {b'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT (NUM m) b1 c d) (IFLT (NUM m) b' c d) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (IFLT (NUM m) b c d) (IFLT (NUM m) b' c d) w0 w w'
Œ£highestUpdCtxtAux2-IFLT‚ÇÇ-aux {j} {k} {w} {w0} {w1} {w'} {b} {b1} {b'} {name} {f} {n} {m} {c} {d} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-NUM b
... | inj‚ÇÅ (x , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-IFLT‚ÇÇ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {m : ‚Ñï} {b b' c d : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f c
                        ‚Üí updCtxt2 name f d
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n b b' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT (NUM m) b c d) (IFLT (NUM m) b' c d) w0 w w')
Œ£highestUpdCtxtAux2-IFLT‚ÇÇ {0} {name} {f} {n} {m} {b} {b'} {c} {d} {w0} {w} {w'} uc ud (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-IFLT _ _ _ _ (updCtxt2-NUM m) u uc ud
Œ£highestUpdCtxtAux2-IFLT‚ÇÇ {suc k} {name} {f} {n} {m} {b} {b'} {c} {d} {w0} {w} {w'} uc ud (comp , i , inw , u) with step‚äé b w
... | inj‚ÇÅ (b1 , w1 , z) rewrite z with isValue‚äé b
... |    inj‚ÇÅ y rewrite stepVal b w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-IFLT‚ÇÇ {k} uc ud (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-IFLT‚ÇÇ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT (NUM m) b1 c d) (IFLT (NUM m) b' c d) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-IFLT‚ÇÇ {k} {name} {f} {n} {m} {b1} {b'} {c} {d} {w0} {w1} {w'} uc ud (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-IFLT‚ÇÇ {suc k} {name} {f} {n} {m} {b} {b'} {c} {d} {w0} {w} {w'} uc ud (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-IFLT _ _ _ _ (updCtxt2-NUM m) u uc ud



Œ£highestUpdCtxt2-IFLT‚ÇÇ : {name : Name} {f : Term} {n : ‚Ñï} {m : ‚Ñï} {b c d : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f c
                        ‚Üí updCtxt2 name f d
                        ‚Üí Œ£highestUpdCtxt2 name f n b w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (IFLT (NUM m) b c d) w0 w
Œ£highestUpdCtxt2-IFLT‚ÇÇ {name} {f} {n} {m} {b} {c} {d} {w0} {w} uc ud (k , b' , w' , wcomp , i , inw , u) =
  fst q , IFLT (NUM m) b' c d , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT (NUM m) b c d) (IFLT (NUM m) b' c d) w0 w w')
    q = Œ£highestUpdCtxtAux2-IFLT‚ÇÇ {k} uc ud (wcomp , i , inw , u)



stepsPresHighest‚Ñï2-IFLT‚ÇÅ‚Üí : {name : Name} {f : Term} {a b c d : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (IFLT a b c d) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-IFLT‚ÇÅ‚Üí {name} {f} {a} {b} {c} {d} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = IFLT‚ÜíhasValue k a b c d v w w' comp isv



Œ£highestUpdCtxtAux2-IFLT‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï} {b c d : Term}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT a1 b c d) (IFLT a' b c d) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (IFLT a b c d) (IFLT a' b c d) w0 w w'
Œ£highestUpdCtxtAux2-IFLT‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} {b} {c} {d} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-NUM a
... | inj‚ÇÅ (x , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-IFLT‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' b c d : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí updCtxt2 name f c
                        ‚Üí updCtxt2 name f d
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT a b c d) (IFLT a' b c d) w0 w w')
Œ£highestUpdCtxtAux2-IFLT‚ÇÅ {0} {name} {f} {n} {a} {a'} {b} {c} {d} {w0} {w} {w'} ub uc ud (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-IFLT _ _ _ _ u ub uc ud
Œ£highestUpdCtxtAux2-IFLT‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {c} {d} {w0} {w} {w'} ub uc ud (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-IFLT‚ÇÅ {k} ub uc ud (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-IFLT‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT a1 b c d) (IFLT a' b c d) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-IFLT‚ÇÅ {k} {name} {f} {n} {a1} {a'} {b} {c} {d} {w0} {w1} {w'} ub uc ud (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-IFLT‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {c} {d} {w0} {w} {w'} ub uc ud (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-IFLT _ _ _ _ u ub uc ud



Œ£highestUpdCtxt2-IFLT‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a b c d : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí updCtxt2 name f c
                        ‚Üí updCtxt2 name f d
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (IFLT a b c d) w0 w
Œ£highestUpdCtxt2-IFLT‚ÇÅ {name} {f} {n} {a} {b} {c} {d} {w0} {w} ub uc ud (k , a' , w' , wcomp , i , inw , u) =
  fst q , IFLT a' b c d , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (IFLT a b c d) (IFLT a' b c d) w0 w w')
    q = Œ£highestUpdCtxtAux2-IFLT‚ÇÅ {k} ub uc ud (wcomp , i , inw , u)




Œ£highestUpdCtxtAux2-SUC‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (SUC a1) (SUC a') w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (SUC a) (SUC a') w0 w w'
Œ£highestUpdCtxtAux2-SUC‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-NUM a
... | inj‚ÇÅ (x , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-SUC‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (SUC a) (SUC a') w0 w w')
Œ£highestUpdCtxtAux2-SUC‚ÇÅ {0} {name} {f} {n} {a} {a'} {w0} {w} {w'} (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-SUC _ u
Œ£highestUpdCtxtAux2-SUC‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {w0} {w} {w'} (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-SUC‚ÇÅ {k} (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-SUC‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (SUC a1) (SUC a') w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-SUC‚ÇÅ {k} {name} {f} {n} {a1} {a'} {w0} {w1} {w'} (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-SUC‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {w0} {w} {w'} (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-SUC _ u



Œ£highestUpdCtxt2-SUC‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a : Term} {w0 w : ùïé¬∑}
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (SUC a) w0 w
Œ£highestUpdCtxt2-SUC‚ÇÅ {name} {f} {n} {a} {w0} {w} (k , a' , w' , wcomp , i , inw , u) =
  fst q , SUC a' , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (SUC a) (SUC a') w0 w w')
    q = Œ£highestUpdCtxtAux2-SUC‚ÇÅ {k} (wcomp , i , inw , u)



stepsPresHighest‚Ñï2-SUC‚ÇÅ‚Üí : {name : Name} {f : Term} {a : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (SUC a) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-SUC‚ÇÅ‚Üí {name} {f} {a} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = SUC‚ÜíhasValue k a v w w' comp isv



Œ£highestUpdCtxtAux2-FIX‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (FIX a1) (FIX a') w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (FIX a) (FIX a') w0 w w'
Œ£highestUpdCtxtAux2-FIX‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-LAM a
... | inj‚ÇÅ (x , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-FIX‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (FIX a) (FIX a') w0 w w')
Œ£highestUpdCtxtAux2-FIX‚ÇÅ {0} {name} {f} {n} {a} {a'} {w0} {w} {w'} (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-FIX _ u
Œ£highestUpdCtxtAux2-FIX‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {w0} {w} {w'} (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-FIX‚ÇÅ {k} (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-FIX‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (FIX a1) (FIX a') w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-FIX‚ÇÅ {k} {name} {f} {n} {a1} {a'} {w0} {w1} {w'} (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-FIX‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {w0} {w} {w'} (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-FIX _ u



Œ£highestUpdCtxt2-FIX‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a : Term} {w0 w : ùïé¬∑}
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (FIX a) w0 w
Œ£highestUpdCtxt2-FIX‚ÇÅ {name} {f} {n} {a} {w0} {w} (k , a' , w' , wcomp , i , inw , u) =
  fst q , FIX a' , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (FIX a) (FIX a') w0 w w')
    q = Œ£highestUpdCtxtAux2-FIX‚ÇÅ {k} (wcomp , i , inw , u)



stepsPresHighest‚Ñï2-FIX‚ÇÅ‚Üí : {name : Name} {f : Term} {a : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (FIX a) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-FIX‚ÇÅ‚Üí {name} {f} {a} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = FIX‚ÜíhasValue k a v w w' comp isv


Œ£highestUpdCtxtAux2-LET‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï} {b : Term}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (LET a1 b) (LET a' b) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (LET a b) (LET a' b) w0 w w'
Œ£highestUpdCtxtAux2-LET‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} {b} nv nnw idom comp0 comp i (comp1 , g , inw , u) with isValue‚äé a
... | inj‚ÇÅ x = ‚ä•-elim (nv x)
... | inj‚ÇÇ x rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-LET‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' b : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (LET a b) (LET a' b) w0 w w')
Œ£highestUpdCtxtAux2-LET‚ÇÅ {0} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-LET _ _ u ub
Œ£highestUpdCtxtAux2-LET‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-LET‚ÇÅ {k} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-LET‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (LET a1 b) (LET a' b) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-LET‚ÇÅ {k} {name} {f} {n} {a1} {a'} {b} {w0} {w1} {w'} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-LET‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-LET _ _ u ub



Œ£highestUpdCtxt2-LET‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a b : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (LET a b) w0 w
Œ£highestUpdCtxt2-LET‚ÇÅ {name} {f} {n} {a} {b} {w0} {w} ub (k , a' , w' , wcomp , i , inw , u) =
  fst q , LET a' b , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (LET a b) (LET a' b) w0 w w')
    q = Œ£highestUpdCtxtAux2-LET‚ÇÅ {k} ub (wcomp , i , inw , u)



stepsPresHighest‚Ñï2-LET‚ÇÅ‚Üí : {name : Name} {f : Term} {a b : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (LET a b) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-LET‚ÇÅ‚Üí {name} {f} {a} {b} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = LET‚ÜíhasValue k a b v w w' comp isv


stepsPresHighest‚Ñï2-SPREAD‚ÇÅ‚Üí : {name : Name} {f : Term} {a b : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (SPREAD a b) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-SPREAD‚ÇÅ‚Üí {name} {f} {a} {b} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = SPREAD‚ÜíhasValue k a b v w w' comp isv


stepsPresHighest‚Ñï2-DECIDE‚ÇÅ‚Üí : {name : Name} {f : Term} {a b c : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (DECIDE a b c) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-DECIDE‚ÇÅ‚Üí {name} {f} {a} {b} {c} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = DECIDE‚ÜíhasValue k a b c v w w' comp isv



stepsPresHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí : {name : Name} {f : Term} {a b : Term} {w : ùïé¬∑}
                            ‚Üí stepsPresHighest‚Ñï2 name f (CHOOSE a b) w
                            ‚Üí stepsPresHighest‚Ñï2 name f a w
stepsPresHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí {name} {f} {a} {b} {w} (k , v , w' , comp , isv , ind) =
  k , fst hv , fst (snd hv) , fst (snd (snd hv)) , snd (snd (snd hv)) , ind
  where
    hv : hasValue‚Ñï k a w
    hv = CHOOSE‚ÜíhasValue k a b v w w' comp isv



Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï} {b : Term}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (SPREAD a1 b) (SPREAD a' b) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (SPREAD a b) (SPREAD a' b) w0 w w'
Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} {b} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-PAIR a
... | inj‚ÇÅ (x , y , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ q rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' b : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (SPREAD a b) (SPREAD a' b) w0 w w')
Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ {0} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-SPREAD _ _ u ub
Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ {k} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (SPREAD a1 b) (SPREAD a' b) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ {k} {name} {f} {n} {a1} {a'} {b} {w0} {w1} {w'} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-SPREAD _ _ u ub



Œ£highestUpdCtxt2-SPREAD‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a b : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (SPREAD a b) w0 w
Œ£highestUpdCtxt2-SPREAD‚ÇÅ {name} {f} {n} {a} {b} {w0} {w} ub (k , a' , w' , wcomp , i , inw , u) =
  fst q , SPREAD a' b , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (SPREAD a b) (SPREAD a' b) w0 w w')
    q = Œ£highestUpdCtxtAux2-SPREAD‚ÇÅ {k} ub (wcomp , i , inw , u)




Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï} {b c : Term}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (DECIDE a1 b c) (DECIDE a' b c) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (DECIDE a b c) (DECIDE a' b c) w0 w w'
Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} {b} {c} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-INL a
... | inj‚ÇÅ (x , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ p with is-INR a
... |    inj‚ÇÅ (y , q) rewrite q = ‚ä•-elim (nv tt)
... |    inj‚ÇÇ q rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' b c : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí updCtxt2 name f c
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (DECIDE a b c) (DECIDE a' b c) w0 w w')
Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ {0} {name} {f} {n} {a} {a'} {b} {c} {w0} {w} {w'} ub uc (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-DECIDE _ _ _ u ub uc
Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {c} {w0} {w} {w'} ub uc (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ {k} ub uc (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (DECIDE a1 b c) (DECIDE a' b c) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ {k} {name} {f} {n} {a1} {a'} {b} {c} {w0} {w1} {w'} ub uc (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {c} {w0} {w} {w'} ub uc (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-DECIDE _ _ _ u ub uc



Œ£highestUpdCtxt2-DECIDE‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a b c : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí updCtxt2 name f c
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (DECIDE a b c) w0 w
Œ£highestUpdCtxt2-DECIDE‚ÇÅ {name} {f} {n} {a} {b} {c} {w0} {w} ub uc (k , a' , w' , wcomp , i , inw , u) =
  fst q , DECIDE a' b c , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (DECIDE a b c) (DECIDE a' b c) w0 w w')
    q = Œ£highestUpdCtxtAux2-DECIDE‚ÇÅ {k} ub uc (wcomp , i , inw , u)



Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ-aux : {j : ‚Ñï} {k : ‚Ñï} {w w0 w1 w' : ùïé¬∑} {a a1 a' : Term} {name : Name} {f : Term} {n : ‚Ñï} {b : Term}
                               ‚Üí ¬¨ isValue a
                               ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                               ‚Üí name ‚àà domùïé¬∑ w
                               ‚Üí step a w ‚â° just (a1 , w1)
                               ‚Üí (comp : steps k (a1 , w1) ‚â° (a' , w'))
                               ‚Üí (getT‚â§‚Ñï w' n name ‚Üí (getT‚â§‚Ñï w0 n name √ó getT‚â§‚Ñï w n name √ó isHighest‚Ñï {k} {w1} {w'} {a1} {a'} n name comp))
                               ‚Üí Œ£highestUpdCtxtAux2 j name f n (CHOOSE a1 b) (CHOOSE a' b) w0 w1 w'
                               ‚Üí Œ£highestUpdCtxtAux2 (suc j) name f n (CHOOSE a b) (CHOOSE a' b) w0 w w'
Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ-aux {j} {k} {w} {w0} {w1} {w'} {a} {a1} {a'} {name} {f} {n} {b} nv nnw idom comp0 comp i (comp1 , g , inw , u) with is-NAME a
... | inj‚ÇÅ (name' , p) rewrite p = ‚ä•-elim (nv tt)
... | inj‚ÇÇ q rewrite comp0 = comp1 , (Œª s ‚Üí fst (g s) , fst (snd (i s)) , snd (g s)) , (nnw , idom , inw) , u



Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ : {k : ‚Ñï} {name : Name} {f : Term} {n : ‚Ñï} {a a' b : Term} {w0 w w' : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxtAux2 k name f n a a' w0 w w'
                        ‚Üí Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (CHOOSE a b) (CHOOSE a' b) w0 w w')
Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ {0} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u)
  rewrite sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-CHOOSE _ _ u ub
Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) with step‚äé a w
... | inj‚ÇÅ (a1 , w1 , z) rewrite z with isValue‚äé a
... |    inj‚ÇÅ y rewrite stepVal a w y | sym (pair-inj‚ÇÅ (just-inj z)) | sym (pair-inj‚ÇÇ (just-inj z)) =
  Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ {k} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
... |    inj‚ÇÇ y =
  suc (fst ind) , Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ-aux {fst ind} {k} y (fst inw) (fst (snd inw)) z comp i (snd ind)
  where
    ind : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (CHOOSE a1 b) (CHOOSE a' b) w0 w1 w')
    ind = Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ {k} {name} {f} {n} {a1} {a'} {b} {w0} {w1} {w'} ub (comp , (Œª s ‚Üí fst (i s) , snd (snd (i s))) , snd (snd inw) , u)
Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ {suc k} {name} {f} {n} {a} {a'} {b} {w0} {w} {w'} ub (comp , i , inw , u) | inj‚ÇÇ z
  rewrite z | sym (pair-inj‚ÇÅ comp) | sym (pair-inj‚ÇÇ comp)
  = 0 , refl , i , inw , updCtxt2-CHOOSE _ _ u ub



Œ£highestUpdCtxt2-CHOOSE‚ÇÅ : {name : Name} {f : Term} {n : ‚Ñï} {a b : Term} {w0 w : ùïé¬∑}
                        ‚Üí updCtxt2 name f b
                        ‚Üí Œ£highestUpdCtxt2 name f n a w0 w
                        ‚Üí Œ£highestUpdCtxt2 name f n (CHOOSE a b) w0 w
Œ£highestUpdCtxt2-CHOOSE‚ÇÅ {name} {f} {n} {a} {b} {w0} {w} ub (k , a' , w' , wcomp , i , inw , u) =
  fst q , CHOOSE a' b , w' , snd q
  where
    q : Œ£ ‚Ñï (Œª j ‚Üí Œ£highestUpdCtxtAux2 j name f n (CHOOSE a b) (CHOOSE a' b) w0 w w')
    q = Œ£highestUpdCtxtAux2-CHOOSE‚ÇÅ {k} ub (wcomp , i , inw , u)



¬¨‚àànamesùïé‚Üí¬¨‚àànames : (cc : ContConds) (name name' : Name) (n : ‚Ñï) (t : Term) (w : ùïé¬∑)
                     ‚Üí getT n name' w ‚â° just t
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                     ‚Üí ¬¨ name ‚àà names t
¬¨‚àànamesùïé‚Üí¬¨‚àànames cc name name' n t w gt nn i =
  nn (ContConds.ccGnames cc name name' n t w gt i)



¬¨‚àànamesùïé‚ÜíupdCtxt2 : (cc : ContConds) (f : Term) (name name' : Name) (n : ‚Ñï) (t : Term) (w : ùïé¬∑)
                     ‚Üí getT n name' w ‚â° just t
                     ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                     ‚Üí updCtxt2 name f t
¬¨‚àànamesùïé‚ÜíupdCtxt2 cc f name name' n t w gt nn =
  updCtxt2-refl name f t (¬¨‚àànamesùïé‚Üí¬¨‚àànames cc name name' n t w gt nn)




{--
predIf‚â§-inj : {n : ‚Ñï} {x y : Var} ‚Üí predIf‚â§ n x ‚â° predIf‚â§ n y ‚Üí x ‚â° y
predIf‚â§-inj {n} {0} {0} e = refl
predIf‚â§-inj {n} {0} {suc y} e with suc y ‚â§? n
... | yes q = e
... | no q  = {!!}
predIf‚â§-inj {n} {suc x} {0} e with suc x ‚â§? n
... | yes p = e
... | no p  = {!!}
predIf‚â§-inj {n} {suc x} {suc y} e with suc x ‚â§? n | suc y ‚â§? n
... | yes p | yes q = e
... | yes p | no q rewrite e = ‚ä•-elim {!!}
... | no p  | yes q rewrite e = {!!}
... | no p  | no q  rewrite e = refl
--}



fvars-shiftNameDown : (n : ‚Ñï) (a : Term) ‚Üí fvars (shiftNameDown n a) ‚â° fvars a
fvars-shiftNameDown n (VAR x) = refl
fvars-shiftNameDown n NAT = refl
fvars-shiftNameDown n QNAT = refl
fvars-shiftNameDown n (LT a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (QLT a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (NUM x) = refl
fvars-shiftNameDown n (IFLT a a‚ÇÅ a‚ÇÇ a‚ÇÉ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ | fvars-shiftNameDown n a‚ÇÉ = refl
fvars-shiftNameDown n (SUC a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (PI a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (LAMBDA a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (APPLY a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (FIX a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (LET a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (SUM a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (PAIR a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (SPREAD a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (SET a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (ISECT a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (TUNION a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (UNION a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (QTUNION a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n (INL a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (INR a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (DECIDE a a‚ÇÅ a‚ÇÇ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ = refl
fvars-shiftNameDown n (EQ a a‚ÇÅ a‚ÇÇ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ = refl
fvars-shiftNameDown n AX = refl
fvars-shiftNameDown n FREE = refl
fvars-shiftNameDown n (CS x) = refl
fvars-shiftNameDown n (NAME x) = refl
fvars-shiftNameDown n (FRESH a) rewrite fvars-shiftNameDown (suc n) a = refl
fvars-shiftNameDown n (CHOOSE a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
--fvars-shiftNameDown n (IFC0 a a‚ÇÅ a‚ÇÇ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ | fvars-shiftNameDown n a‚ÇÇ = refl
fvars-shiftNameDown n (TSQUASH a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (TTRUNC a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (TCONST a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (SUBSING a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (DUM a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (FFDEFS a a‚ÇÅ) rewrite fvars-shiftNameDown n a | fvars-shiftNameDown n a‚ÇÅ = refl
fvars-shiftNameDown n PURE = refl
fvars-shiftNameDown n (UNIV x) = refl
fvars-shiftNameDown n (LIFT a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (LOWER a) rewrite fvars-shiftNameDown n a = refl
fvars-shiftNameDown n (SHRINK a) rewrite fvars-shiftNameDown n a = refl


‚Üí#shiftNameDown : (n : ‚Ñï) {a : Term} ‚Üí # a ‚Üí # shiftNameDown n a
‚Üí#shiftNameDown n {a} ca rewrite fvars-shiftNameDown n a = ca


‚â§‚Üí¬¨<‚Üí‚â° : {i n : ‚Ñï} ‚Üí n ‚â§ i ‚Üí ¬¨ n < i ‚Üí i ‚â° n
‚â§‚Üí¬¨<‚Üí‚â° {i} {n} lei nlei = sym (<s‚Üí¬¨<‚Üí‚â° {n} {i} (_‚â§_.s‚â§s lei) nlei)


sucIf‚â§-predIf‚â§ : (n : ‚Ñï) (x : Name) ‚Üí ¬¨ x ‚â° n ‚Üí (x ‚â° 0 ‚Üí 0 < n) ‚Üí sucIf‚â§ n (predIf‚â§ n x) ‚â° x
sucIf‚â§-predIf‚â§ n 0 d len with 0 <? n
... | yes p = refl
... | no p = ‚ä•-elim (p (len refl))
sucIf‚â§-predIf‚â§ n (suc x) d len with suc x ‚â§? n
... | yes p with suc x <? n
... |    yes q = refl
... |    no q = ‚ä•-elim (d (sym (‚â§‚Üí¬¨<‚Üí‚â° {n} {suc x} p q) ))
sucIf‚â§-predIf‚â§ n (suc x) d len | no p with x <? n
... |    yes q = ‚ä•-elim (p q)
... |    no q = refl



shiftNameUpDown : (n : ‚Ñï) (t : Term)
                  ‚Üí ((x : Name) ‚Üí x ‚àà names t ‚Üí ¬¨ x ‚â° n)
                  ‚Üí (0 ‚àà names t ‚Üí 0 < n)
                  ‚Üí shiftNameUp n (shiftNameDown n t) ‚â° t
shiftNameUpDown n (VAR x) imp1 imp2 = refl
shiftNameUpDown n NAT imp1 imp2 = refl
shiftNameUpDown n QNAT imp1 imp2 = refl
shiftNameUpDown n (LT t t‚ÇÅ) imp1 imp2 = ‚â°LT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (QLT t t‚ÇÅ) imp1 imp2 = ‚â°QLT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (NUM x) imp1 imp2 = refl
shiftNameUpDown n (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) imp1 imp2 = ‚â°IFLT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° z)))) (shiftNameUpDown n t‚ÇÇ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫À° i)))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫À° z))))) (shiftNameUpDown n t‚ÇÉ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫ ≥ (names t‚ÇÇ) i)))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) (‚àà-++‚Å∫ ≥ (names t‚ÇÇ) z)))))
shiftNameUpDown n (SUC t) imp1 imp2 = ‚â°SUC (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (PI t t‚ÇÅ) imp1 imp2 = ‚â°PI (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (LAMBDA t) imp1 imp2 = ‚â°LAMBDA (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (APPLY t t‚ÇÅ) imp1 imp2 = ‚â°APPLY (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (FIX t) imp1 imp2 = ‚â°FIX (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (LET t t‚ÇÅ) imp1 imp2 = ‚â°LET (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (SUM t t‚ÇÅ) imp1 imp2 = ‚â°SUM (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (PAIR t t‚ÇÅ) imp1 imp2 = ‚â°PAIR (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (SPREAD t t‚ÇÅ) imp1 imp2 = ‚â°SPREAD (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (SET t t‚ÇÅ) imp1 imp2 = ‚â°SET (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (TUNION t t‚ÇÅ) imp1 imp2 = ‚â°TUNION (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (ISECT t t‚ÇÅ) imp1 imp2 = ‚â°ISECT (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (UNION t t‚ÇÅ) imp1 imp2 = ‚â°UNION (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (QTUNION t t‚ÇÅ) imp1 imp2 = ‚â°QTUNION (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (INL t) imp1 imp2 = ‚â°INL (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (INR t) imp1 imp2 = ‚â°INR (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (DECIDE t t‚ÇÅ t‚ÇÇ) imp1 imp2 = ‚â°DECIDE (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° z)))) (shiftNameUpDown n t‚ÇÇ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) z))))
shiftNameUpDown n (EQ t t‚ÇÅ t‚ÇÇ) imp1 imp2 = ‚â°EQ (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫À° z)))) (shiftNameUpDown n t‚ÇÇ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) i))) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) (‚àà-++‚Å∫ ≥ (names t‚ÇÅ) z))))
shiftNameUpDown n AX imp1 imp2 = refl
shiftNameUpDown n FREE imp1 imp2 = refl
shiftNameUpDown n (CS x) imp1 imp2 = ‚â°CS (sucIf‚â§-predIf‚â§ n x (imp1 x (here refl)) (Œª z ‚Üí imp2 (here (sym z))))
shiftNameUpDown n (NAME x) imp1 imp2 = ‚â°NAME (sucIf‚â§-predIf‚â§ n x (imp1 x (here refl)) (Œª z ‚Üí imp2 (here (sym z))))
shiftNameUpDown n (FRESH t) imp1 imp2 = ‚â°FRESH (shiftNameUpDown (suc n) t imp1' Œª z ‚Üí _‚â§_.s‚â§s _‚â§_.z‚â§n)
  where
    imp1' : (x : Name) ‚Üí x ‚àà names t ‚Üí ¬¨ x ‚â° suc n
    imp1' x i z rewrite z = imp1 n (suc‚Üí‚ààlowerNames {n} {names t} i) refl
shiftNameUpDown n (CHOOSE t t‚ÇÅ) imp1 imp2 = ‚â°CHOOSE (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n (TSQUASH t) imp1 imp2 = ‚â°TSQUASH (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (TTRUNC t) imp1 imp2 = ‚â°TTRUNC (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (TCONST t) imp1 imp2 = ‚â°TCONST (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (SUBSING t) imp1 imp2 = ‚â°SUBSING (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (DUM t) imp1 imp2 = ‚â°DUM (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (FFDEFS t t‚ÇÅ) imp1 imp2 = ‚â°FFDEFS (shiftNameUpDown n t (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫À° i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫À° z))) (shiftNameUpDown n t‚ÇÅ (Œª x i ‚Üí imp1 x (‚àà-++‚Å∫ ≥ (names t) i)) (Œª z ‚Üí imp2 (‚àà-++‚Å∫ ≥ (names t) z)))
shiftNameUpDown n PURE imp1 imp2 = refl
shiftNameUpDown n (UNIV x) imp1 imp2 = refl
shiftNameUpDown n (LIFT t) imp1 imp2 = ‚â°LIFT (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (LOWER t) imp1 imp2 = ‚â°LOWER (shiftNameUpDown n t imp1 imp2)
shiftNameUpDown n (SHRINK t) imp1 imp2 = ‚â°SHRINK (shiftNameUpDown n t imp1 imp2)


‚ÜíupdCtxt2-shiftNameDown : (v : Var) {name : Name} {f : Term} (cf : # f) {a : Term}
                           ‚Üí ((x : Name) ‚Üí x ‚àà names a ‚Üí ¬¨ x ‚â° v)
                           ‚Üí (0 ‚àà names a ‚Üí 0 < v)
                           ‚Üí updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) a
                           ‚Üí updCtxt2 name f (shiftNameDown v a)
‚ÜíupdCtxt2-shiftNameDown v {name} {f} cf {a} imp1 imp2 upd =
  updCtxt2-shiftNameUp‚Üí v {name} {f} cf {shiftNameDown v a} upd1
  where
    upd1 : updCtxt2 (sucIf‚â§ v name) (shiftNameUp v f) (shiftNameUp v (shiftNameDown v a))
    upd1 rewrite shiftNameUpDown v a imp1 imp2 = upd



‚Üí¬¨s‚àànames-shiftNameUp : (n : Name) (t : Term)
                         ‚Üí ¬¨ n ‚àà names t
                         ‚Üí ¬¨ suc n ‚àà names (shiftNameUp 0 t)
‚Üí¬¨s‚àànames-shiftNameUp n t ni z rewrite names-shiftNameUp‚â° 0 t with ‚àà-map‚Åª (sucIf‚â§ 0) z
... | (y , j , e) rewrite suc-injective e = ni j



renn¬¨‚àà : (n m : Name) (t : Term)
         ‚Üí ¬¨ n ‚àà names t
         ‚Üí renn n m t ‚â° t
renn¬¨‚àà n m (VAR x) ni = refl
renn¬¨‚àà n m NAT ni = refl
renn¬¨‚àà n m QNAT ni = refl
renn¬¨‚àà n m (LT t t‚ÇÅ) ni = ‚â°LT (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (QLT t t‚ÇÅ) ni = ‚â°QLT (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (NUM x) ni = refl
renn¬¨‚àà n m (IFLT t t‚ÇÅ t‚ÇÇ t‚ÇÉ) ni = ‚â°IFLT (renn¬¨‚àà n m t (¬¨‚àà++4‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++4‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni)) (renn¬¨‚àà n m t‚ÇÇ (¬¨‚àà++4‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni)) (renn¬¨‚àà n m t‚ÇÉ (¬¨‚àà++4‚Üí¬¨‚àà4 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {names t‚ÇÉ} {n} ni))
renn¬¨‚àà n m (SUC t) ni = ‚â°SUC (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (PI t t‚ÇÅ) ni = ‚â°PI (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (LAMBDA t) ni = ‚â°LAMBDA (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (APPLY t t‚ÇÅ) ni = ‚â°APPLY (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (FIX t) ni = ‚â°FIX (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (LET t t‚ÇÅ) ni = ‚â°LET (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (SUM t t‚ÇÅ) ni = ‚â°SUM (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (PAIR t t‚ÇÅ) ni = ‚â°PAIR (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (SPREAD t t‚ÇÅ) ni = ‚â°SPREAD (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (SET t t‚ÇÅ) ni = ‚â°SET (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (TUNION t t‚ÇÅ) ni = ‚â°TUNION (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (ISECT t t‚ÇÅ) ni = ‚â°ISECT (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (UNION t t‚ÇÅ) ni = ‚â°UNION (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (QTUNION t t‚ÇÅ) ni = ‚â°QTUNION (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (INL t) ni = ‚â°INL (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (INR t) ni = ‚â°INR (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (DECIDE t t‚ÇÅ t‚ÇÇ) ni = ‚â°DECIDE (renn¬¨‚àà n m t (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÇ (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni))
renn¬¨‚àà n m (EQ t t‚ÇÅ t‚ÇÇ) ni = ‚â°EQ (renn¬¨‚àà n m t (¬¨‚àà++3‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++3‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni)) (renn¬¨‚àà n m t‚ÇÇ (¬¨‚àà++3‚Üí¬¨‚àà3 {_} {_} {names t} {names t‚ÇÅ} {names t‚ÇÇ} {n} ni))
renn¬¨‚àà n m AX ni = refl
renn¬¨‚àà n m FREE ni = refl
renn¬¨‚àà n m (CS x) ni with x ‚âü n
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = refl
renn¬¨‚àà n m (NAME x) ni with x ‚âü n
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = refl
renn¬¨‚àà n m (FRESH t) ni = ‚â°FRESH (renn¬¨‚àà (suc n) (suc m) t (Œª z ‚Üí ni (suc‚Üí‚ààlowerNames {n} {names t} z)))
renn¬¨‚àà n m (CHOOSE t t‚ÇÅ) ni = ‚â°CHOOSE (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m (TSQUASH t) ni = ‚â°TSQUASH (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (TTRUNC t) ni = ‚â°TTRUNC (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (TCONST t) ni = ‚â°TCONST (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (SUBSING t) ni = ‚â°SUBSING (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (DUM t) ni = ‚â°DUM (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (FFDEFS t t‚ÇÅ) ni = ‚â°FFDEFS (renn¬¨‚àà n m t (¬¨‚àà++2‚Üí¬¨‚àà1 {_} {_} {names t} {names t‚ÇÅ} {n} ni)) (renn¬¨‚àà n m t‚ÇÅ (¬¨‚àà++2‚Üí¬¨‚àà2 {_} {_} {names t} {names t‚ÇÅ} {n} ni))
renn¬¨‚àà n m PURE ni = refl
renn¬¨‚àà n m (UNIV x) ni = refl
renn¬¨‚àà n m (LIFT t) ni = ‚â°LIFT (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (LOWER t) ni = ‚â°LOWER (renn¬¨‚àà n m t ni)
renn¬¨‚àà n m (SHRINK t) ni = ‚â°SHRINK (renn¬¨‚àà n m t ni)



updCtxt2-renn : (name n m : Name) (f a : Term)
                ‚Üí ¬¨ name ‚â° n
                ‚Üí ¬¨ name ‚â° m
                ‚Üí ¬¨ n ‚àà names f
                ‚Üí # f
                ‚Üí updCtxt2 name f a
                ‚Üí updCtxt2 name f (renn n m a)
updCtxt2-renn name n m f .(VAR x) diff1 diff2 nf cf (updCtxt2-VAR x) = updCtxt2-VAR _
updCtxt2-renn name n m f .NAT diff1 diff2 nf cf updCtxt2-NAT = updCtxt2-NAT
updCtxt2-renn name n m f .QNAT diff1 diff2 nf cf updCtxt2-QNAT = updCtxt2-QNAT
updCtxt2-renn name n m f .(LT a b) diff1 diff2 nf cf (updCtxt2-LT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LT _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(QLT a b) diff1 diff2 nf cf (updCtxt2-QLT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QLT _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(NUM x) diff1 diff2 nf cf (updCtxt2-NUM x) = updCtxt2-NUM _
updCtxt2-renn name n m f .(IFLT a b c d) diff1 diff2 nf cf (updCtxt2-IFLT a b c d upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ upd‚ÇÑ) = updCtxt2-IFLT _ _ _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ) (updCtxt2-renn name n m f c diff1 diff2 nf cf upd‚ÇÉ) (updCtxt2-renn name n m f d diff1 diff2 nf cf upd‚ÇÑ)
updCtxt2-renn name n m f .(SUC a) diff1 diff2 nf cf (updCtxt2-SUC a upd‚ÇÅ) = updCtxt2-SUC _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(PI a b) diff1 diff2 nf cf (updCtxt2-PI a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PI _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(LAMBDA a) diff1 diff2 nf cf (updCtxt2-LAMBDA a upd‚ÇÅ) = updCtxt2-LAMBDA _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(APPLY a b) diff1 diff2 nf cf (updCtxt2-APPLY a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-APPLY _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(FIX a) diff1 diff2 nf cf (updCtxt2-FIX a upd‚ÇÅ) = updCtxt2-FIX _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(LET a b) diff1 diff2 nf cf (updCtxt2-LET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-LET _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(SUM a b) diff1 diff2 nf cf (updCtxt2-SUM a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SUM _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(PAIR a b) diff1 diff2 nf cf (updCtxt2-PAIR a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-PAIR _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(SPREAD a b) diff1 diff2 nf cf (updCtxt2-SPREAD a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SPREAD _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(SET a b) diff1 diff2 nf cf (updCtxt2-SET a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-SET _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(ISECT a b) diff1 diff2 nf cf (updCtxt2-ISECT a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-ISECT _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(TUNION a b) diff1 diff2 nf cf (updCtxt2-TUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-TUNION _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(UNION a b) diff1 diff2 nf cf (updCtxt2-UNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-UNION _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(QTUNION a b) diff1 diff2 nf cf (updCtxt2-QTUNION a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-QTUNION _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(INL a) diff1 diff2 nf cf (updCtxt2-INL a upd‚ÇÅ) = updCtxt2-INL _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(INR a) diff1 diff2 nf cf (updCtxt2-INR a upd‚ÇÅ) = updCtxt2-INR _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(DECIDE a b c) diff1 diff2 nf cf (updCtxt2-DECIDE a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-DECIDE _ _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ) (updCtxt2-renn name n m f c diff1 diff2 nf cf upd‚ÇÉ)
updCtxt2-renn name n m f .(EQ a b c) diff1 diff2 nf cf (updCtxt2-EQ a b c upd‚ÇÅ upd‚ÇÇ upd‚ÇÉ) = updCtxt2-EQ _ _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ) (updCtxt2-renn name n m f c diff1 diff2 nf cf upd‚ÇÉ)
updCtxt2-renn name n m f .AX diff1 diff2 nf cf updCtxt2-AX = updCtxt2-AX
updCtxt2-renn name n m f .FREE diff1 diff2 nf cf updCtxt2-FREE = updCtxt2-FREE
updCtxt2-renn name n m f .(CS name') diff1 diff2 nf cf (updCtxt2-CS name') with name' ‚âü n
... | yes _ = updCtxt2-CS _
... | no _ = updCtxt2-CS _
updCtxt2-renn name n m f .(NAME name') diff1 diff2 nf cf (updCtxt2-NAME name' x) with name' ‚âü n
... | yes _ = updCtxt2-NAME _ (Œª z ‚Üí diff2 (sym z))
... | no _ = updCtxt2-NAME _ x
updCtxt2-renn name n m f .(FRESH a) diff1 diff2 nf cf (updCtxt2-FRESH a upd‚ÇÅ) = updCtxt2-FRESH _ (updCtxt2-renn (suc name) (suc n) (suc m) (shiftNameUp 0 f) a (Œª z ‚Üí diff1 (suc-injective z)) (Œª z ‚Üí diff2 (suc-injective z)) (‚Üí¬¨s‚àànames-shiftNameUp n f nf) (‚Üí#shiftNameUp 0 {f} cf) upd‚ÇÅ)
updCtxt2-renn name n m f .(CHOOSE a b) diff1 diff2 nf cf (updCtxt2-CHOOSE a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-CHOOSE _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(TSQUASH a) diff1 diff2 nf cf (updCtxt2-TSQUASH a upd‚ÇÅ) = updCtxt2-TSQUASH _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(TTRUNC a) diff1 diff2 nf cf (updCtxt2-TTRUNC a upd‚ÇÅ) = updCtxt2-TTRUNC _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(TCONST a) diff1 diff2 nf cf (updCtxt2-TCONST a upd‚ÇÅ) = updCtxt2-TCONST _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(SUBSING a) diff1 diff2 nf cf (updCtxt2-SUBSING a upd‚ÇÅ) = updCtxt2-SUBSING _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .PURE diff1 diff2 nf cf updCtxt2-PURE = updCtxt2-PURE
updCtxt2-renn name n m f .(DUM a) diff1 diff2 nf cf (updCtxt2-DUM a upd‚ÇÅ) = updCtxt2-DUM _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(FFDEFS a b) diff1 diff2 nf cf (updCtxt2-FFDEFS a b upd‚ÇÅ upd‚ÇÇ) = updCtxt2-FFDEFS _ _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ) (updCtxt2-renn name n m f b diff1 diff2 nf cf upd‚ÇÇ)
updCtxt2-renn name n m f .(UNIV x) diff1 diff2 nf cf (updCtxt2-UNIV x) = updCtxt2-UNIV _
updCtxt2-renn name n m f .(LIFT a) diff1 diff2 nf cf (updCtxt2-LIFT a upd‚ÇÅ) = updCtxt2-LIFT _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(LOWER a) diff1 diff2 nf cf (updCtxt2-LOWER a upd‚ÇÅ) = updCtxt2-LOWER _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(SHRINK a) diff1 diff2 nf cf (updCtxt2-SHRINK a upd‚ÇÅ) = updCtxt2-SHRINK _ (updCtxt2-renn name n m f a diff1 diff2 nf cf upd‚ÇÅ)
updCtxt2-renn name n m f .(upd name f) diff1 diff2 nf cf updCtxt2-upd with name ‚âü n
... | yes p rewrite p = ‚ä•-elim (diff1 refl)
... | no p rewrite renn¬¨‚àà n m (shiftUp 0 f) (‚Üí¬¨‚àànames-shiftUp {n} {0} {f} nf) = updCtxt2-upd


‚ààdomùïé‚Üí¬¨s‚â°newChoiceT+ : (name : Name) (w : ùïé¬∑) (t : Term)
                         ‚Üí name ‚àà domùïé¬∑ w
                         ‚Üí ¬¨ suc name ‚â° newChoiceT+ w t
‚ààdomùïé‚Üí¬¨s‚â°newChoiceT+ name w t i e rewrite suc-injective e = ¬¨fresh‚ààdomùïé2 w (namesùïé¬∑ w) (‚Üìvars (names t)) i


¬¨0‚àànames-shiftNameUp : (t : Term) ‚Üí ¬¨ 0 ‚àà names (shiftNameUp 0 t)
¬¨0‚àànames-shiftNameUp t i rewrite names-shiftNameUp‚â° 0 t with ‚àà-map‚Åª (sucIf‚â§ 0) i
... | (y , j , e) = suc-‚â¢-0 {y} (sym e)


choose-pres-getT‚â§‚Ñï : (cc : ContConds) (name name' : Name) (w : ùïé¬∑) (a : Term) (n : ‚Ñï)
                      ‚Üí ¬¨ name' ‚â° name
                      ‚Üí getT‚â§‚Ñï (chooseT name' w a) n name
                      ‚Üí (getT‚â§‚Ñï w n name √ó getT‚â§‚Ñï (chooseT name' w a) n name)
choose-pres-getT‚â§‚Ñï cc name name' w a n diff g
  rewrite ContConds.ccGcd cc 0 name name' w a (Œª x ‚Üí diff (sym x))
  = g , g


choose-pres-‚àànamesùïé : (cc : ContConds) (name name' : Name) (w : ùïé¬∑) (a : Term)
                       ‚Üí ¬¨ name' ‚â° name
                       ‚Üí ¬¨ name ‚àà namesùïé¬∑ w
                       ‚Üí name ‚àà domùïé¬∑ w
                       ‚Üí (¬¨ name ‚àà namesùïé¬∑ (chooseT name' w a)) √ó name ‚àà domùïé¬∑ (chooseT name' w a)
choose-pres-‚àànamesùïé cc name name' w a diff nnw idom =
  (Œª x ‚Üí nnw (ContConds.ccNchoosed cc name name' w a (Œª z ‚Üí diff (sym z)) x)) ,
  ContConds.ccDchoose cc name name' w a idom


-- This is similar to step-sat-isHighest‚Ñï in continuity3.lagda.
-- updCtxt2's properties can essentially be copied from terms3b.lagda as this is almost the same definition.
-- We only need to prove that name's value increases, but for this only upd must update name.
-- So we
--   (1) require that ¬¨ name ‚àà names f and
--   (2) that updCtxt2 name f (NAME name') only when ¬¨ name ‚â° name'
step-sat-isHighest‚Ñï2 : (cc : ContConds) (gc : get-choose-‚Ñï) {w1 w2 : ùïé¬∑} {a b : Term} {n : ‚Ñï} {name : Name} {f : Term}
                       ‚Üí compatible¬∑ name w1 Res‚ä§
                       ‚Üí ‚àÄùïé-get0-NUM w1 name
                       ‚Üí step a w1 ‚â° just (b , w2)
                       ‚Üí stepsPresHighest‚Ñï2 name f b w2
                       ‚Üí updCtxt2 name f a
                       ‚Üí ¬¨ name ‚àà names f -- This is so that (upd name f) does not update name when computing f
                       ‚Üí ¬¨ name ‚àà namesùïé¬∑ w1 -- This is so that reading choices does not bring name
                       ‚Üí name ‚àà domùïé¬∑ w1 -- this is so that FRESH does not pick name
                       ‚Üí # f
                       ‚Üí Œ£highestUpdCtxt2 name f n b w1 w2
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.NAT} {b} {n} {name} {f} compat wgt0 comp indb updCtxt2-NAT nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , NAT , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-NAT
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.QNAT} {b} {n} {name} {f} compat wgt0 comp indb updCtxt2-QNAT nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , QNAT , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-QNAT
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(LT a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-LT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LT a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-LT _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(QLT a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-QLT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , QLT a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-QLT _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(NUM x)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-NUM x) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , NUM _ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-NUM _
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(IFLT a b c d)} {x} {n} {name} {f} compat wgt0 comp indb (updCtxt2-IFLT a b c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf nnw idom cf with is-NUM a
... | inj‚ÇÅ (k1 , p) rewrite p with is-NUM b
... |    inj‚ÇÅ (k2 , q) rewrite q with k1 <? k2
... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , c , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , ctxt‚ÇÇ
... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , d , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , ctxt‚ÇÉ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(IFLT a b c d)} {x} {n} {name} {f} compat wgt0 comp indb (updCtxt2-IFLT a b c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf nnw idom cf | inj‚ÇÅ (k1 , p) | inj‚ÇÇ q with step‚äé b w1
... |       inj‚ÇÅ (b' , w1' , z) rewrite p | z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-IFLT‚ÇÇ ctxt‚ÇÇ ctxt‚ÇÉ ind
  where
    ind : Œ£highestUpdCtxt2 name f n b' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {b} {b'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-IFLT‚ÇÇ‚Üí indb) ctxt‚ÇÅ nnf nnw idom cf
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(IFLT a b c d)} {x} {n} {name} {f} compat wgt0 comp indb (updCtxt2-IFLT a b c d ctxt ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ) nnf nnw idom cf | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-IFLT‚ÇÅ ctxt‚ÇÅ ctxt‚ÇÇ ctxt‚ÇÉ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-IFLT‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(SUC a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-SUC a ctxt) nnf nnw idom cf with is-NUM a
... | inj‚ÇÅ (k1 , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , NUM (suc k1) , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-NUM _
... | inj‚ÇÇ p with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-SUC‚ÇÅ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-SUC‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(PI a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-PI a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , PI a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-PI _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(LAMBDA a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-LAMBDA a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LAMBDA a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-LAMBDA _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(APPLY g a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-APPLY g a ctxt ctxt‚ÇÅ) nnf nnw idom cf with is-LAM g
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  concl d
  where
    d : updCtxt2 name f t ‚äé t ‚â° updBody name f
    d = updCtxt2-LAMBDA‚Üí ctxt

    concl : updCtxt2 name f t ‚äé t ‚â° updBody name f
            ‚Üí Œ£highestUpdCtxt2 name f n (sub a t) w1 w1
    concl (inj‚ÇÅ u) = 0 , sub a t , w1 , refl , (Œª s ‚Üí s , s) , (nnw , idom) , updCtxt2-sub cf u ctxt‚ÇÅ
    concl (inj‚ÇÇ u) rewrite u = c2
      where
        indb' : stepsPresHighest‚Ñï2 name f (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        indb' rewrite u | sub-upd name f a cf = indb

        c1 : Œ£highestUpdCtxt2 name f n (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1
        c1 = ‚ÜíŒ£highestUpdCtxt2-upd cc gc {name} {f} {a} {w1} {n} compat wgt0 cf nnf nnw idom ctxt‚ÇÅ indb'

        c2 : Œ£highestUpdCtxt2 name f n (sub a (updBody name f)) w1 w1
        c2 rewrite sub-upd name f a cf = c1
... | inj‚ÇÇ x with is-CS g
... |    inj‚ÇÅ (name' , p) rewrite p with is-NUM a
... |       inj‚ÇÅ (m , q) rewrite q with getT‚äé m name' w1
... |          inj‚ÇÅ (c , r) rewrite r | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , c , w1 , refl , (Œª s ‚Üí s , s) , (nnw , idom) , ¬¨‚àànamesùïé‚ÜíupdCtxt2 cc f name name' m c w1 r nnw
... |          inj‚ÇÇ r rewrite r = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(APPLY g a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-APPLY g a ctxt ctxt‚ÇÅ) nnf nnw idom cf | inj‚ÇÇ x | inj‚ÇÅ (name' , p) | inj‚ÇÇ y with step‚äé a w1
... |          inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-APPLY‚ÇÇ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-APPLY‚ÇÇ‚Üí indb) ctxt‚ÇÅ nnf nnw idom cf
... |          inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(APPLY g a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-APPLY g a ctxt ctxt‚ÇÅ) nnf nnw idom cf | inj‚ÇÇ x | inj‚ÇÇ y with step‚äé g w1
... | inj‚ÇÅ (g' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-APPLY‚ÇÅ ctxt‚ÇÅ ind
  where
    ind : Œ£highestUpdCtxt2 name f n g' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {g} {g'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-APPLY‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(FIX a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-FIX a ctxt) nnf nnw idom cf with is-LAM a
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  concl d
  where
    d : updCtxt2 name f t ‚äé t ‚â° updBody name f
    d = updCtxt2-LAMBDA‚Üí ctxt

    concl : updCtxt2 name f t ‚äé t ‚â° updBody name f
            ‚Üí Œ£highestUpdCtxt2 name f n (sub (FIX (LAMBDA t)) t) w1 w1
    concl (inj‚ÇÅ u) = 0 , sub (FIX (LAMBDA t)) t , w1 , refl , (Œª s ‚Üí s , s) , (nnw , idom) , updCtxt2-sub cf u (updCtxt2-FIX _ ctxt)
    concl (inj‚ÇÇ u) rewrite u = c2 --c2
      where
        indb' : stepsPresHighest‚Ñï2 name f (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1
        indb' rewrite u | sub-upd name f (FIX (upd name f)) cf = indb

        c1 : Œ£highestUpdCtxt2 name f n (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0)))) w1 w1
        c1 = ‚ÜíŒ£highestUpdCtxt2-upd cc gc {name} {f} {FIX (upd name f)} {w1} {n} compat wgt0 cf nnf nnw idom (updCtxt2-FIX _ updCtxt2-upd) indb'

        c2 : Œ£highestUpdCtxt2 name f n (sub (FIX (upd name f)) (updBody name f)) w1 w1
        c2 rewrite sub-upd name f (FIX (upd name f)) cf = c1
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-FIX‚ÇÅ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-FIX‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(LET a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-LET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf with isValue‚äé a
... | inj‚ÇÅ x rewrite  sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , sub a b‚ÇÅ , w1 , refl , (Œª s ‚Üí s , s) , (nnw , idom) , updCtxt2-sub cf ctxt‚ÇÅ ctxt
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-LET‚ÇÅ ctxt‚ÇÅ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-LET‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(SUM a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-SUM a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SUM a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-SUM _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(PAIR a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-PAIR a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , PAIR a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-PAIR _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(SPREAD a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-SPREAD a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf with is-PAIR a
... | inj‚ÇÅ (u , v , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , sub v (sub u b‚ÇÅ) , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-sub cf (updCtxt2-sub cf ctxt‚ÇÅ (updCtxt2-PAIR‚Üí‚ÇÅ ctxt)) (updCtxt2-PAIR‚Üí‚ÇÇ ctxt)
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-SPREAD‚ÇÅ ctxt‚ÇÅ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-SPREAD‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(SET a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-SET a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SET a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-SET _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(ISECT a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-ISECT a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , ISECT a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-ISECT _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(TUNION a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-TUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TUNION a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-TUNION _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(UNION a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-UNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , UNION a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-UNION _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(QTUNION a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-QTUNION a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , QTUNION a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-QTUNION _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(INL a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-INL a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , INL a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-INL _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(INR a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-INR a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , INR a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-INR _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(DECIDE a b‚ÇÅ c)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-DECIDE a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf nnw idom cf with is-INL a
... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , sub t b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-sub cf ctxt‚ÇÅ (updCtxt2-INL‚Üí ctxt)
... | inj‚ÇÇ x with is-INR a
... |    inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , sub t c , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-sub cf ctxt‚ÇÇ (updCtxt2-INR‚Üí ctxt)
... |    inj‚ÇÇ y with step‚äé a w1
... |       inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-DECIDE‚ÇÅ ctxt‚ÇÅ ctxt‚ÇÇ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-DECIDE‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(EQ a b‚ÇÅ c)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-EQ a b‚ÇÅ c ctxt ctxt‚ÇÅ ctxt‚ÇÇ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , EQ a b‚ÇÅ c , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-EQ _ _ _ ctxt ctxt‚ÇÅ ctxt‚ÇÇ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.AX} {b} {n} {name} {f} compat wgt0 comp indb updCtxt2-AX nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , AX , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-AX
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.FREE} {b} {n} {name} {f} compat wgt0 comp indb updCtxt2-FREE nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , FREE , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-FREE
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(CS name')} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-CS name') nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , CS name' , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-CS _
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(NAME name')} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-NAME name' x) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , NAME name' , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-NAME _ x
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(FRESH a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-FRESH a ctxt) nnf nnw idom cf
  rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp))
  = 0 , shiftNameDown 0 (renn 0 (newChoiceT+ w1 a) a) , startNewChoiceT Res‚ä§ w1 a ,
    refl , (Œª x ‚Üí gt' x , x) , (nnw' , idom') , upd1
  where
    gt' : getT‚â§‚Ñï (startNewChoiceT Res‚ä§ w1 a) n name ‚Üí getT‚â§‚Ñï w1 n name
    gt' z rewrite ContConds.ccGstart cc name 0 Res‚ä§ a w1 idom = z

    nnw' : ¬¨ name ‚àà namesùïé¬∑ (startNewChoiceT Res‚ä§ w1 a)
    nnw' = Œª z ‚Üí nnw (ContConds.ccNstart cc name w1 a z)

    idom' : name ‚àà domùïé¬∑ (startNewChoiceT Res‚ä§ w1 a)
    idom' = ContConds.ccDstart cc name w1 a idom

    imp1 : (x : Name) ‚Üí  x ‚àà names (renn 0 (newChoiceT+ w1 a) a) ‚Üí ¬¨ x ‚â° 0
    imp1 x i z rewrite z = ‚ä•-elim (suc-‚â¢-0 {newChoiceT w1 a} (sym (fst (‚àànames-renn-same {0} {newChoiceT+ w1 a} {a} i))))

    imp2 : 0 ‚àà names (renn 0 (newChoiceT+ w1 a) a) ‚Üí 0 < 0
    imp2 z = ‚ä•-elim (suc-‚â¢-0 {newChoiceT w1 a} (sym (fst (‚àànames-renn-same {0} {newChoiceT+ w1 a} {a} z))))

    upd3 : updCtxt2 (suc name) (shiftNameUp 0 f) (renn 0 (newChoiceT+ w1 a) a)
    upd3 = updCtxt2-renn (suc name) 0 (newChoiceT+ w1 a) (shiftNameUp 0 f) a (suc-‚â¢-0 {name}) (‚ààdomùïé‚Üí¬¨s‚â°newChoiceT+ name w1 a idom) (¬¨0‚àànames-shiftNameUp f) (‚Üí#shiftNameUp 0 {f} cf) ctxt

    upd2 : updCtxt2 (sucIf‚â§ 0 name) (shiftNameUp 0 f) (renn 0 (newChoiceT+ w1 a) a)
    upd2 rewrite sym (suc‚â°sucIf‚â§0 name) = upd3

    upd1 : updCtxt2 name f (shiftNameDown 0 (renn 0 (newChoiceT+ w1 a) a))
    upd1 = ‚ÜíupdCtxt2-shiftNameDown 0 {name} {f} cf {renn 0 (newChoiceT+ w1 a) a} imp1 imp2 upd2
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(CHOOSE a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-CHOOSE a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf with is-NAME a
... | inj‚ÇÅ (nm , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  0 , AX , chooseT nm w1 b‚ÇÅ , refl ,
  choose-pres-getT‚â§‚Ñï cc name nm w1 b‚ÇÅ n (updCtxt2-NAME‚Üí ctxt) ,
  choose-pres-‚àànamesùïé cc name nm w1 b‚ÇÅ (updCtxt2-NAME‚Üí ctxt) nnw idom ,
  updCtxt2-AX
... | inj‚ÇÇ x with step‚äé a w1
... |    inj‚ÇÅ (a' , w1' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) =
  Œ£highestUpdCtxt2-CHOOSE‚ÇÅ ctxt‚ÇÅ ind
  where
    ind : Œ£highestUpdCtxt2 name f n a' w1 w1'
    ind = step-sat-isHighest‚Ñï2 cc gc {w1} {w1'} {a} {a'} {n} {name} {f} compat wgt0 z (stepsPresHighest‚Ñï2-CHOOSE‚ÇÅ‚Üí indb) ctxt nnf nnw idom cf
... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym comp))
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(TSQUASH a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-TSQUASH a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TSQUASH a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-TSQUASH _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(TTRUNC a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-TTRUNC a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TTRUNC a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-TTRUNC _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(TCONST a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-TCONST a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , TCONST a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-TCONST _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(SUBSING a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-SUBSING a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SUBSING a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-SUBSING _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.PURE} {b} {n} {name} {f} compat wgt0 comp indb updCtxt2-PURE nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , PURE , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-PURE
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(DUM a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-DUM a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , DUM a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-DUM _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(FFDEFS a b‚ÇÅ)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-FFDEFS a b‚ÇÅ ctxt ctxt‚ÇÅ) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , FFDEFS a b‚ÇÅ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-FFDEFS _ _ ctxt ctxt‚ÇÅ
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(UNIV x)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-UNIV x) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , UNIV _ , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-UNIV _
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(LIFT a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-LIFT a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LIFT a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-LIFT _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(LOWER a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-LOWER a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , LOWER a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-LOWER _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(SHRINK a)} {b} {n} {name} {f} compat wgt0 comp indb (updCtxt2-SHRINK a ctxt) nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , SHRINK a , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-SHRINK _ ctxt
step-sat-isHighest‚Ñï2 cc gc {w1} {w2} {.(upd name f)} {b} {n} {name} {f} compat wgt0 comp indb updCtxt2-upd nnf nnw idom cf rewrite sym (pair-inj‚ÇÅ (just-inj comp)) | sym (pair-inj‚ÇÇ (just-inj comp)) = 0 , upd name f , w1 , refl , (Œª x ‚Üí x , x) , (nnw , idom) , updCtxt2-upd

\end{code}
