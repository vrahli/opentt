\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import exBar
open import mod
open import encode


module mp {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
          (C : Choice)
          (K : Compatible W C)
          (G : GetChoice {L} W C K)
          (X : ChoiceExt {L} W C)
          (N : NewChoice {L} W C K G)
          (EC : Encode)
          (EB : ExBar W M)
          (EM : ExcludedMiddle (lsuc(L)))
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import exBarDef(W)(M)(EB)
  using (‚àÄ‚àÉùîπ¬∑)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)
--open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
--  using ()
--open import ind2(W)(M)(C)(K)(G)(X)(N)(EC)
--  using ()

open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
  using (TEQrefl-equalTypes)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-refl ; equalInType-mon ; ‚â°CTerm‚ÜíequalInType ; isTypeNAT! ; ‚Üí‚â°equalTypes ; equalInType-FUN‚Üí ;
         eqTypesFUN‚Üê ; ‚Üí‚â°equalInType ; equalInType-FUN ; equalInType-PI)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; ‚ÜíequalInType-SQUASH ; isType-#NAT!‚ÜíBOOL‚ÇÄ)
open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#SUM-ASSERT‚ÇÇ)
open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#MP-left ; #MP-right ; ‚àÄùïé‚àÉùïé-func ; #MP ; #MP‚â°#PI ; #[0]MP-left ; #[0]MP-right ; sub0-fun-mp ; ‚ÜíequalTypes-#MP-left ;
         ‚ÜíequalTypes-#MP-right ; #MP‚ÇÇ ; #[0]MP-left3 ; sub0-fun-mp‚ÇÇ ; ‚ÜíequalTypes-#MP-left3 ; ‚Üí‚ààType-FUN ; #MP-left3 ;
         ‚Üí‚ààType-PI)
open import mp_props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#MP-left‚Üí ; #MP-left2‚Üí#MP-left ; #MP-left3‚Üí#MP-left2)
open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (SUMeq! ; equalInType-SUM! ; equalInType-SUM!‚Üí)

--open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
--  using ()


-- This is classically equivalent to equalInType-#MP-left‚Üí
equalInType-#MP-left‚Üí2 : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ f
                          ‚Üí equalInType i w (#MP-left f) a‚ÇÅ a‚ÇÇ
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ‚àÉùïé w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ
                                                            ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                                             √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))))
equalInType-#MP-left‚Üí2 i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1 =
  h2 (EM {‚àÉùïé w1 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))})
  where
    h1 : ‚àÄùïé w1 (Œª w' _ ‚Üí (n‚ÇÅ n‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                          ‚Üí inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))
                                          ‚Üí ‚ä•) ‚Üí ‚ä•
    h1 = equalInType-#MP-left‚Üí i w f a‚ÇÅ a‚ÇÇ f‚àà a‚àà w1 e1

    h2 : Dec (‚àÉùïé w1 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ
                             ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                              √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ))))))
         ‚Üí ‚àÉùïé w1 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ
                          ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                           √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f n‚ÇÅ)))))
    h2 (yes p) = p
    h2 (no p) = ‚ä•-elim (h1 (Œª w2 e2 n‚ÇÅ n‚ÇÇ n‚àà inh ‚Üí p (w2 , e2 , n‚ÇÅ , n‚ÇÇ , n‚àà , inh)))


MPvalid-aux : (i : ‚Ñï) (w : ùïé¬∑) (f‚ÇÅ f‚ÇÇ : CTerm) (a‚ÇÅ a‚ÇÇ : CTerm)
              ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
              ‚Üí equalInType i w (#MP-left f‚ÇÅ) a‚ÇÅ a‚ÇÇ
              ‚Üí equalInType i w (#MP-right f‚ÇÅ) (#APPLY (#APPLY #lamAX f‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lamAX f‚ÇÇ) a‚ÇÇ)
MPvalid-aux i w f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ f‚àà a‚àà =
  ‚ÜíequalInType-SQUASH p5
  where
    p7 : ‚àÄùïé w (Œª w' _ ‚Üí ‚àÉùïé w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ
                                          ‚Üí equalInType i w' #NAT! n‚ÇÅ n‚ÇÇ
                                           √ó inhType i w' (#ASSERT‚ÇÇ (#APPLY f‚ÇÅ n‚ÇÅ))))))
    p7 = equalInType-#MP-left‚Üí2 i w f‚ÇÅ a‚ÇÅ a‚ÇÇ (equalInType-refl f‚àà) a‚àà

    aw : ‚àÄùïé w (Œª w3 e3 ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType i w3 #NAT! n‚ÇÅ n‚ÇÇ √ó inhType i w3 (#ASSERT‚ÇÇ (#APPLY f‚ÇÅ n‚ÇÅ))))
                         ‚Üí ‚ñ°¬∑ w3 (‚ÜëwPred (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ààType i w' (#SUM-ASSERT‚ÇÇ f‚ÇÅ) t)) e3))
    aw w3 e3 (n‚ÇÅ , n‚ÇÇ , n‚àà , (t , inh)) =
      Mod.‚àÄùïé-‚ñ° M aw1
        where
          aw1 : ‚àÄùïé w3 (‚ÜëwPred (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ààType i w' (#SUM-ASSERT‚ÇÇ f‚ÇÅ) t)) e3)
          aw1 w4 e4 =
            #PAIR n‚ÇÅ t ,
            equalInType-SUM!
              {B = #[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)}
              (Œª w' _ ‚Üí isTypeNAT!)
              (Œª w' e' a‚ÇÅ a‚ÇÇ a‚àà ‚Üí
                ‚Üí‚â°equalTypes
                  (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÅ f‚ÇÅ)) (sym (sub0-ASSERT‚ÇÇ-APPLY a‚ÇÇ f‚ÇÅ))
                  (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° (equalInType-refl f‚àà)) w' (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e')) a‚ÇÅ a‚ÇÇ a‚àà)))
              (Mod.‚àÄùïé-‚ñ° M aw2)
            where
              aw2 : ‚àÄùïé w4 (Œª w' _ ‚Üí SUMeq! (equalInType i w' #NAT!) (Œª a b ea ‚Üí equalInType i w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f‚ÇÅ ‚åü #[0]VAR)))) w' (#PAIR n‚ÇÅ t) (#PAIR n‚ÇÅ t))
              aw2 w5 e5 =
                n‚ÇÅ , n‚ÇÅ , t , t , equalInType-refl (equalInType-mon n‚àà w5 (‚äë-trans¬∑ e4 e5)) ,
                #‚áõ!-refl {w5} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w5 ,
                #‚áõ!-refl {w5} {#PAIR n‚ÇÅ t} , --#compAllRefl (#PAIR n‚ÇÅ t) w5 ,
                ‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY n‚ÇÅ f‚ÇÅ)) (equalInType-mon inh w5 (‚äë-trans¬∑ e4 e5))

    p6 : ‚àÄùïé w (Œª w3 e3 ‚Üí ‚àÉùïé w3 (Œª w4 e4
           ‚Üí ‚ñ°¬∑ w4 (‚ÜëwPred (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ààType i w' (#SUM-ASSERT‚ÇÇ f‚ÇÅ) t)) (‚äë-trans¬∑ e3 e4))))
    p6 = ‚àÄùïé‚àÉùïé-func aw p7

    p5 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ààType i w' (#SUM-ASSERT‚ÇÇ f‚ÇÅ) t))
    p5 = ‚àÄ‚àÉùîπ¬∑ (Œª w' e1 e2 h ‚Üí h) p6


MPvalid : (w : ùïé¬∑) ‚Üí member w #MP #lamAX
MPvalid w rewrite #MP‚â°#PI =
  n , equalInType-PI {n} {w} {#NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left #[0]MP-right} p1 p2 p3
  where
    n : ‚Ñï
    n = 1

    p1 : ‚àÄùïé w (Œª w' _ ‚Üí isType n w' #NAT!‚ÜíBOOL‚ÇÄ)
    p1 w1 e1 = isType-#NAT!‚ÜíBOOL‚ÇÄ w1 n

    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp f‚ÇÅ))
        (sym (sub0-fun-mp f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left f‚àà) (‚ÜíequalTypes-#MP-right f‚àà))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí equalInType n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right)) (#APPLY #lamAX f‚ÇÅ) (#APPLY #lamAX f‚ÇÇ))
    p3 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp f‚ÇÅ))
        (equalInType-FUN
          (TEQrefl-equalTypes n w1 _ _ (‚ÜíequalTypes-#MP-left f‚àà))
          (TEQrefl-equalTypes n w1 _ _ (‚ÜíequalTypes-#MP-right f‚àà))
          p4)
      where
        p4 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#MP-left f‚ÇÅ) a‚ÇÅ a‚ÇÇ
                            ‚Üí equalInType n w' (#MP-right f‚ÇÅ) (#APPLY (#APPLY #lamAX f‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lamAX f‚ÇÇ) a‚ÇÇ))
        p4 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà = MPvalid-aux n w2 f‚ÇÅ f‚ÇÇ a‚ÇÅ a‚ÇÇ (equalInType-mon f‚àà w2 e2) a‚àà


-- This is similar to MPvalid but proved here for #MP‚ÇÇ, which is stated using ¬¨¬¨‚àÉ, instead of #MP, which is stated using ¬¨‚àÄ¬¨
MP‚ÇÇvalid : (w : ùïé¬∑) ‚Üí member w #MP‚ÇÇ #lamAX
MP‚ÇÇvalid w =
  n ,
  ‚Üí‚ààType-PI
    n w #NAT!‚ÜíBOOL‚ÇÄ #NAT!‚ÜíBOOL‚ÇÄ
    (#[0]FUN #[0]MP-left #[0]MP-right)
    (#[0]FUN #[0]MP-left3 #[0]MP-right)
    #lamAX #lamAX (isType-#NAT!‚ÜíBOOL‚ÇÄ w n) p2 (Œª w1 e1 a b h ‚Üí h)
    p3 (snd (MPvalid w))
  where
    n : ‚Ñï
    n = 1

    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT!‚ÜíBOOL‚ÇÄ f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÅ))
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 f‚àà) (‚ÜíequalTypes-#MP-right f‚àà))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT!‚ÜíBOOL‚ÇÄ a
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)) b‚ÇÅ b‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)) b‚ÇÅ b‚ÇÇ)
    p3 w1 e1 a b‚ÇÅ b‚ÇÇ a‚àà b‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp‚ÇÇ a))
        (‚Üí‚ààType-FUN
           n w1 (#MP-left a) (#MP-left3 a) (#MP-right a) (#MP-right a)
           b‚ÇÅ b‚ÇÇ (‚ÜíequalTypes-#MP-left3 a‚àà) (‚ÜíequalTypes-#MP-right a‚àà)
           (Œª w2 e2 x y h ‚Üí #MP-left2‚Üí#MP-left n w2 a x y (equalInType-mon a‚àà w2 e2) (#MP-left3‚Üí#MP-left2 n w2 a x y (equalInType-mon a‚àà w2 e2) h))
           (Œª w2 e2 a b h ‚Üí h) (‚Üí‚â°equalInType (sub0-fun-mp a) b‚àà))

\end{code}[hide]
