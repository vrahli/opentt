\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --experimental-lossy-unification #-}
--{-# OPTIONS --auto-inline #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
--open import choiceBar


module barContP7 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                 (X : ChoiceExt W C)
                 (N : NewChoice {L} W C K G)
                 (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                 (EM : ExcludedMiddle (lsuc(L)))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)

open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
open import terms4(W)(C)(K)(G)(X)(N)
--open import terms5(W)(C)(K)(G)(X)(N)
--open import terms6(W)(C)(K)(G)(X)(N)
--open import terms7(W)(C)(K)(G)(X)(N)
open import terms8(W)(C)(K)(G)(X)(N)
open import terms9(W)(C)(K)(G)(X)(N)

open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import list(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity1b(W)(M)(C)(K)(P)(G)(X)(N)(E) using (#‚áìsame‚Ñï)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity5(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity7(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import barContP(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)
open import barContP2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)
open import barContP3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)
open import barContP4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)
open import barContP5(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)
open import barContP6(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)


lowerVars3-fvars-CTerm2‚äÜ[] : (a : CTerm2) ‚Üí lowerVars (lowerVars (lowerVars (fvars ‚åú a ‚åù))) ‚äÜ []
lowerVars3-fvars-CTerm2‚äÜ[] a {x} i = ‚ä•-elim (k2 k1)
  where
    i1 : suc x ‚àà lowerVars (lowerVars (fvars ‚åú a ‚åù))
    i1 = ‚ààlowerVars‚Üí x (lowerVars (lowerVars (fvars ‚åú a ‚åù))) i

    i2 : suc (suc x) ‚àà lowerVars (fvars ‚åú a ‚åù)
    i2 = ‚ààlowerVars‚Üí (suc x) (lowerVars (fvars ‚åú a ‚åù)) i1

    i3 : suc (suc (suc x)) ‚àà fvars ‚åú a ‚åù
    i3 = ‚ààlowerVars‚Üí (suc (suc x)) (fvars ‚åú a ‚åù) i2

    k1 : suc (suc (suc x)) ‚àà 0 ‚à∑ 1 ‚à∑ [ 2 ]
    k1 = ‚äÜ?‚Üí‚äÜ (CTerm2.closed a) i3

    k2 : suc (suc (suc x)) ‚àà 0 ‚à∑ 1 ‚à∑ [ 2 ] ‚Üí ‚ä•
    k2 (there (there (here ())))
    k2 (there (there (there ())))


lowerVars3-fvars-CTerm2‚â°[] : (a : CTerm2) ‚Üí lowerVars (lowerVars (lowerVars (fvars ‚åú a ‚åù))) ‚â° []
lowerVars3-fvars-CTerm2‚â°[] a = ‚äÜ[]‚Üí‚â°[] (lowerVars3-fvars-CTerm2‚äÜ[] a)


#WREC : CTerm ‚Üí CTerm2 ‚Üí CTerm
#WREC a b = ct (WREC ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # WREC ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | lowerVars3-fvars-CTerm2‚â°[] b = refl


#[3]DECIDE : CTerm3 ‚Üí CTerm4 ‚Üí CTerm4 ‚Üí CTerm3
#[3]DECIDE a b c = ct3 (DECIDE ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù) d
  where
    d : #[ 0 ‚à∑ 1 ‚à∑ 2 ‚à∑ [ 3 ] ] DECIDE ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù
    d = ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ lowerVars (fvars ‚åú b ‚åù) ++ lowerVars (fvars ‚åú c ‚åù)} {0 ‚à∑ 1 ‚à∑ 2 ‚à∑ [ 3 ]}
              (‚äÜ++ (‚äÜ?‚Üí‚äÜ {fvars ‚åú a ‚åù} {0 ‚à∑ 1 ‚à∑ 2 ‚à∑ [ 3 ]} (CTerm3.closed a))
                    (‚äÜ++ (lowerVars-fvars-[0,1,2,3,4] {fvars ‚åú b ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú b ‚åù} {0 ‚à∑ 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [ 4 ]} (CTerm4.closed b)))
                          (lowerVars-fvars-[0,1,2,3,4] {fvars ‚åú c ‚åù} (‚äÜ?‚Üí‚äÜ {fvars ‚åú c ‚åù} {0 ‚à∑ 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [ 4 ]} (CTerm4.closed c)))))


APPLY-‚ààBAIRE-NUM‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f : CTerm) (n : ‚Ñï)
                      ‚Üí ‚ààType i w #BAIRE f
                      ‚Üí ‚ààType i w #NAT (#APPLY f (#NUM n))
APPLY-‚ààBAIRE-NUM‚Üí i w f n f‚àà =
  equalInType-FUN‚Üí f‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (NUM-equalInType-NAT i w n)


APPLY-‚ààBAIRE!-NUM‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f : CTerm) (n : ‚Ñï)
                      ‚Üí ‚ààType i w #BAIRE! f
                      ‚Üí ‚ààType i w #NAT! (#APPLY f (#NUM n))
APPLY-‚ààBAIRE!-NUM‚Üí i w f n f‚àà =
  equalInType-FUN‚Üí f‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (NUM-equalInType-NAT i w n)


APPLY-‚â°‚ààBAIRE-NUM‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f g : CTerm) (n : ‚Ñï)
                      ‚Üí equalInType i w #BAIRE f g
                      ‚Üí equalInType i w #NAT (#APPLY f (#NUM n)) (#APPLY g (#NUM n))
APPLY-‚â°‚ààBAIRE-NUM‚Üí i w f g n f‚àà =
  equalInType-FUN‚Üí f‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (NUM-equalInType-NAT i w n)


APPLY-‚â°‚ààBAIRE!-NUM‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (f g : CTerm) (n : ‚Ñï)
                      ‚Üí equalInType i w #BAIRE! f g
                      ‚Üí equalInType i w #NAT! (#APPLY f (#NUM n)) (#APPLY g (#NUM n))
APPLY-‚â°‚ààBAIRE!-NUM‚Üí i w f g n f‚àà =
  equalInType-FUN‚Üí f‚àà w (‚äë-refl¬∑ w) (#NUM n) (#NUM n) (NUM-equalInType-NAT i w n)


BAIRE2ùïä : (kb : K‚ñ°) {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm} (f‚àà : ‚ààType i w #BAIRE f) ‚Üí ùïä
BAIRE2ùïä kb {i} {w} {f} f‚àà n = fst j
  where
    j : NATmem w (#APPLY f (#NUM n))
    j = kb (equalInType-NAT‚Üí i w _ _ (APPLY-‚ààBAIRE-NUM‚Üí i w f n f‚àà)) w (‚äë-refl¬∑ w)


BAIRE!2ùïä : (kb : K‚ñ°) {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm} (f‚àà : ‚ààType i w #BAIRE! f) ‚Üí ùïä
BAIRE!2ùïä kb {i} {w} {f} f‚àà n = fst j
  where
    j : #‚áõ!same‚Ñï w (#APPLY f (#NUM n)) (#APPLY f (#NUM n))
    j = kb (equalInType-NAT!‚Üí i w _ _ (APPLY-‚ààBAIRE!-NUM‚Üí i w f n f‚àà)) w (‚äë-refl¬∑ w)


#‚áõNUM‚ÜíequalInType-NAT : (i : ‚Ñï) (w : ùïé¬∑) (a : CTerm) (k : ‚Ñï)
                          ‚Üí a #‚áõ #NUM k at w
                          ‚Üí equalInType i w #NAT a (#NUM k)
#‚áõNUM‚ÜíequalInType-NAT i w a k ea =
  ‚ÜíequalInType-NAT i w _ _ (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí k , ‚àÄùïé-mon e1 ea , #‚áõ-refl w1 (#NUM k)))


NATeq‚Üí#‚áõNUM‚Çó : {w : ùïé¬∑} {a b : CTerm} {k : ‚Ñï}
                ‚Üí NATeq w a b
                ‚Üí b #‚áõ #NUM k at w
                ‚Üí a #‚áõ #NUM k at w
NATeq‚Üí#‚áõNUM‚Çó {w} {a} {b} {k} (j , c1 , c2) c
  rewrite NUMinj (‚áõ-val-det {w} {‚åú b ‚åù} {NUM j} {NUM k} tt tt c2 c) = c1


#‚áõ!same‚Ñï‚Üí#‚áõ!NUM‚Çó : {w : ùïé¬∑} {a b : CTerm} {k : ‚Ñï}
                      ‚Üí #‚áõ!same‚Ñï w a b
                      ‚Üí b #‚áõ! #NUM k at w
                      ‚Üí a #‚áõ! #NUM k at w
#‚áõ!same‚Ñï‚Üí#‚áõ!NUM‚Çó {w} {a} {b} {k} (j , c1 , c2) c
  rewrite NUMinj (‚áõ!-val-det {w} {‚åú b ‚åù} {NUM j} {NUM k} tt tt c2 c) = c1


BAIRE2ùïä-equalInBAIRE : (kb : K‚ñ°) {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm} (f‚àà : ‚ààType i w #BAIRE f)
                        ‚Üí equalInType i w #BAIRE f (#MSEQ (BAIRE2ùïä kb f‚àà))
BAIRE2ùïä-equalInBAIRE kb {i} {w} {f} f‚àà =
  equalInType-FUN eqTypesNAT eqTypesNAT aw
  where
    s : ùïä
    s = BAIRE2ùïä kb f‚àà

    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea =
      ‚ÜíequalInType-NAT i w1 _  _ (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT‚Üí i w1 _ _ ea))
      where
        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí NATeq w' a‚ÇÅ a‚ÇÇ ‚Üí NATeq w' (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
        aw1 w2 e2 (k , c1 , c2) = s k , j3 , APPLY-MSEQ‚áõ w2 s ‚åú a‚ÇÇ ‚åù k c2
          where
            j1 : #APPLY f (#NUM k) #‚áõ #NUM (s k) at w
            j1 = fst (snd (kb (equalInType-NAT‚Üí i w _ _ (APPLY-‚ààBAIRE-NUM‚Üí i w f k f‚àà)) w (‚äë-refl¬∑ w)))

            j2 : NATeq w2 (#APPLY f a‚ÇÅ) (#APPLY f (#NUM k))
            j2 = kb (equalInType-NAT‚Üí i w2 _ _ (equalInType-FUN‚Üí f‚àà w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ (#NUM k) (#‚áõNUM‚ÜíequalInType-NAT i w2 a‚ÇÅ k c1))) w2 (‚äë-refl¬∑ w2)

            j3 : #APPLY f a‚ÇÅ #‚áõ #NUM (s k) at w2
            j3 = NATeq‚Üí#‚áõNUM‚Çó {w2} {#APPLY f a‚ÇÅ} {#APPLY f (#NUM k)} j2 (‚àÄùïé-mon (‚äë-trans¬∑ e1 e2) j1)


APPLY-NUM-MSEQ‚áõ! : (w : ùïé¬∑) (s : ùïä) (k : ‚Ñï)
                    ‚Üí APPLY (MSEQ s) (NUM k) ‚áõ! NUM (s k) at w
APPLY-NUM-MSEQ‚áõ! w s k w1 e1 = lift (2 , refl)


BAIRE!2ùïä-equalInNAT! : (kb : K‚ñ°) {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm} (f‚àà : ‚ààType i w #BAIRE! f) (k : ‚Ñï)
                         ‚Üí equalInType i w #NAT! (#APPLY f (#NUM k)) (#APPLY (#MSEQ (BAIRE!2ùïä kb f‚àà)) (#NUM k))
BAIRE!2ùïä-equalInNAT! kb {i} {w} {f} f‚àà k =
  ‚ÜíequalInType-NAT! i w (#APPLY f (#NUM k)) (#APPLY (#MSEQ (BAIRE!2ùïä kb f‚àà)) (#NUM k)) (Mod.‚àÄùïé-‚ñ° M aw)
  where
    s : ùïä
    s = BAIRE!2ùïä kb f‚àà

    j1 : #APPLY f (#NUM k) #‚áõ! #NUM (s k) at w
    j1 = fst (snd (kb (equalInType-NAT!‚Üí i w _ _ (APPLY-‚ààBAIRE!-NUM‚Üí i w f k f‚àà)) w (‚äë-refl¬∑ w)))

    aw : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY (#MSEQ (BAIRE!2ùïä kb f‚àà)) (#NUM k)))
    aw w1 e1 = s k , ‚àÄùïé-mon e1 j1 , APPLY-NUM-MSEQ‚áõ! w1 s k


#tab : (r : Name) (F : CTerm) (k : ‚Ñï) (f : CTerm) ‚Üí CTerm
#tab r F k f = #APPLY2 (#loop r F) (#NUM k) f


wmem : (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) (w : ùïé¬∑) (t : CTerm) ‚Üí Set(lsuc(L))
wmem eqa eqb w t = weq eqa eqb w t t


BAIRE2list : (kb : K‚ñ°) {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm} (f‚àà : ‚ààType i w #BAIRE f) (k : ‚Ñï) ‚Üí CTerm
BAIRE2list kb {i} {w} {f} f‚àà k = seq2list (BAIRE2ùïä kb f‚àà) k


‚ààType-IndBarB‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (b : CTerm)
                   ‚Üí ‚ààType i w #IndBarB b
                   ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí Œ£ ‚Ñï (Œª n ‚Üí b #‚áõ! #INL t at w' √ó t #‚áõ #NUM n at w'))
                                      ‚äé Œ£ CTerm (Œª t ‚Üí b #‚áõ! #INR t at w'))
‚ààType-IndBarB‚Üí i w b b‚àà =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-UNION!‚Üí b‚àà))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNION!eq (equalInType i w' #NAT) (equalInType i w' #UNIT) w' b b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí Œ£ CTerm (Œª t ‚Üí Œ£ ‚Ñï (Œª n ‚Üí b #‚áõ! #INL t at w'' √ó t #‚áõ #NUM n at w''))
                                                      ‚äé Œ£ CTerm (Œª t ‚Üí b #‚áõ! #INR t at w'')) e'))
    aw w1 e1 (x , y , inj‚ÇÅ (c1 , c2 , eqi)) =
      Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 (j , d1 , d2) z ‚Üí inj‚ÇÅ (x , j , ‚àÄùïé-mon e2 c1 , d1)) (equalInType-NAT‚Üí i w1 _ _ eqi)
    aw w1 e1 (x , y , inj‚ÇÇ (c1 , c2 , eqi)) =
      Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 z ‚Üí inj‚ÇÇ (x , ‚àÄùïé-mon e2 c1))


equalInType-IndBarB‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                       ‚Üí equalInType i w #IndBarB a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí Œ£ CTerm (Œª u ‚Üí Œ£ ‚Ñï (Œª n ‚Üí a #‚áõ! #INL t at w' √ó b #‚áõ! #INL u at w' √ó t #‚áõ #NUM n at w' √ó u #‚áõ #NUM n at w')))
                                         ‚äé Œ£ CTerm (Œª t ‚Üí Œ£ CTerm (Œª u ‚Üí a #‚áõ! #INR t at w' √ó b #‚áõ! #INR u at w')))
equalInType-IndBarB‚Üí i w a b b‚àà =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-UNION!‚Üí b‚àà))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNION!eq (equalInType i w' #NAT) (equalInType i w' #UNIT) w' a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí Œ£ CTerm (Œª u ‚Üí Œ£ ‚Ñï (Œª n ‚Üí a #‚áõ! #INL t at w' √ó b #‚áõ! #INL u at w' √ó t #‚áõ #NUM n at w' √ó u #‚áõ #NUM n at w')))
                                                     ‚äé Œ£ CTerm (Œª t ‚Üí Œ£ CTerm (Œª u ‚Üí a #‚áõ! #INR t at w' √ó b #‚áõ! #INR u at w')))
                                          e'))
    aw w1 e1 (x , y , inj‚ÇÅ (c1 , c2 , eqi)) =
      Mod.‚àÄùïé-‚ñ°Func
        M (Œª w2 e2 (j , d1 , d2) z ‚Üí inj‚ÇÅ (x , y , j , ‚àÄùïé-mon e2 c1 , ‚àÄùïé-mon e2 c2 , d1 , d2))
        (equalInType-NAT‚Üí i w1 _ _ eqi)
    aw w1 e1 (x , y , inj‚ÇÇ (c1 , c2 , eqi)) =
      Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 z ‚Üí inj‚ÇÇ (x , y , ‚àÄùïé-mon e2 c1 , ‚àÄùïé-mon e2 c2))


followDA2 : (k k' r s : Term) ‚Üí Term
followDA2 k k' r s =
  LET (APPLY s k)
      (APPLY2 (shiftUp 0 r) (VAR 0) (shiftUp 0 k'))


followDA : (k r s : Term) ‚Üí Term
followDA k r s =
  LET (SUC k)
      (followDA2 (shiftUp 0 k) (VAR 0) (shiftUp 0 r) (shiftUp 0 s))


followD : (k a r s : Term) ‚Üí Term
followD k a r s =
  DECIDE a
         (VAR 0) -- i
         (followDA (shiftUp 0 k) (shiftUp 0 r) (shiftUp 0 s))


followBT : (a r s : Term) ‚Üí Term
followBT a r s =
  LAMBDA {--k--}
    (followD (VAR 0) (shiftUp 0 a) (shiftUp 0 r) (shiftUp 0 s))


followB : (s : Term) ‚Üí Term
followB s = followBT (VAR 0) (VAR 2) (shiftUp 0 (shiftUp 0 (shiftUp 0 s)))


follow : (s w : Term) (n : ‚Ñï) ‚Üí Term
follow s w n =
  APPLY (WREC w (followB s)) -- k
        (NUM n)
        -- VAR 0: k
        -- VAR 1: a
        -- VAR 2: f
        -- VAR 3: r


#follow : (s w : CTerm) (n : ‚Ñï) ‚Üí CTerm
#follow s w n =
  #APPLY (#WREC w (#[2]LAMBDA (#[3]DECIDE #[3]VAR1 -- a
                                          #[4]VAR0 -- i
                                          (#[4]LET (#[4]SUC #[4]VAR1)
                                                   (#[5]LET (#[5]APPLY (#[5]shiftUp0 (#[4]shiftUp0 (#[3]shiftUp0 (#[2]shiftUp0 (#[1]shiftUp0 (#[0]shiftUp0 s))))))
                                                                       #[5]VAR2) --k
                                                            (#[6]APPLY2 #[6]VAR6 -- r
                                                                        #[6]VAR0
                                                                        #[6]VAR1)))))) -- k
         (#NUM n)


-- sanity check
‚åú#follow‚åù‚â° : (s w : CTerm) (n : ‚Ñï) ‚Üí ‚åú #follow s w n ‚åù ‚â° follow ‚åú s ‚åù ‚åú w ‚åù n
‚åú#follow‚åù‚â° s w n = refl


‚â°‚Çó‚Üí‚áìfrom-to : {w w' : ùïé¬∑} {a b c : Term} ‚Üí b ‚â° a ‚Üí a ‚áì c from w to w' ‚Üí b ‚áì c from w to w'
‚â°‚Çó‚Üí‚áìfrom-to {w} {w'} {a} {b} {c} e comp rewrite e = comp


sub3-followB‚â° : (a g f : CTerm)
                ‚Üí sub (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù) (sub ‚åú g ‚åù (sub ‚åú a ‚åù (followB ‚åú f ‚åù)))
                   ‚â° followBT ‚åú a ‚åù (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù) ‚åú f ‚åù
sub3-followB‚â° a g f
   rewrite #shiftUp 0 a
         | #shiftUp 0 a
         | #shiftUp 0 a
         | #shiftUp 0 a
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 3 f
         | #shiftUp 6 f
         | #shiftUp 7 f
         | #shiftUp 7 f
         | #shiftUp 7 f
         | #shiftUp 7 f
         | #shiftUp 7 f
         | #shiftUp 0 g
         | #shiftUp 0 g
         | #shiftUp 0 g
         | #shiftUp 0 g
         | #shiftUp 1 g
         | #shiftUp 1 g
         | #shiftUp 1 g
         | #shiftUp 1 g
         | #shiftUp 1 g
         | #shiftDown 1 a
         | #shiftDown 5 g
         | #shiftDown 11 f
         | #subv 1 ‚åú g ‚åù ‚åú a ‚åù (CTerm.closed a)
         | #subv 3 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
         | #shiftDown 1 a
         | #shiftDown 3 f
         | #subv 3 ‚åú g ‚åù ‚åú f ‚åù (CTerm.closed f)
         | #shiftDown 3 f
         | #subv 1 (LAMBDA (WREC (APPLY ‚åú g ‚åù (VAR 0)) (LAMBDA (DECIDE (VAR 1) (VAR 0) (LET (SUC (VAR 1)) (LET (APPLY ‚åú f ‚åù (VAR 2)) (APPLY2 (VAR 6) (VAR 0) (VAR 1)))))))) ‚åú a ‚åù (CTerm.closed a)
         | #subv 3 (LAMBDA (WREC (APPLY ‚åú g ‚åù (VAR 0)) (LAMBDA (DECIDE (VAR 1) (VAR 0) (LET (SUC (VAR 1)) (LET (APPLY ‚åú f ‚åù (VAR 2)) (APPLY2 (VAR 6) (VAR 0) (VAR 1)))))))) ‚åú f ‚åù (CTerm.closed f)
         | #shiftDown 1 a
         | #shiftDown 3 f
   = refl


sub-followD‚â° : (k : ‚Ñï) (a g f : CTerm)
               ‚Üí sub (NUM k) (followD (VAR 0) (shiftUp 0 ‚åú a ‚åù) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù))
                  ‚â° followD (NUM k) ‚åú a ‚åù (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù) ‚åú f ‚åù
sub-followD‚â° k a g f
  rewrite #shiftUp 0 a
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 3 f
        | #shiftUp 6 f
        | #shiftUp 7 f
        | #shiftUp 7 f
        | #shiftUp 7 f
        | #shiftUp 7 f
        | #shiftUp 0 g
        | #shiftUp 1 g
        | #shiftUp 1 g
        | #shiftUp 1 g
        | #shiftUp 1 g
        | #subv 0 ‚åú #NUM k ‚åù ‚åú a ‚åù (CTerm.closed a)
        | #subv 4 ‚åú #NUM k ‚åù ‚åú g ‚åù (CTerm.closed g)
        | #subv 2 ‚åú #NUM k ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #subv 10 ‚åú #NUM k ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #shiftDown 0 a
        | #shiftDown 4 g
        | #shiftDown 10 f
        | #shiftDown 2 f
  = refl


#follow-INL‚áìfrom-to : (w w' : ùïé¬∑) (I a g f t : CTerm) (k n : ‚Ñï)
                      ‚Üí I #‚áì #SUP a g from w to w'
                      ‚Üí a #‚áõ! #INL t at w
                      ‚Üí t #‚áõ #NUM n at w
                      ‚Üí Œ£ ùïé¬∑ (Œª w'' ‚Üí #follow f I k #‚áì #NUM n from w to w'')
#follow-INL‚áìfrom-to w w' I a g f t k n cI ca cn =
  fst cn' ,
  ‚áì-trans‚ÇÇ
    (APPLY‚áì (NUM k) (WREC‚áì (followB ‚åú f ‚åù) cI))
    (‚áì-trans‚ÇÇ
      (APPLY‚áì (NUM k) (WREC-SUP‚áì w' ‚åú a ‚åù ‚åú g ‚åù (followB ‚åú f ‚åù)))
      (‚â°‚Çó‚Üí‚áìfrom-to
        (‚â°APPLY (sub3-followB‚â° a g f) refl)
        (‚áì-trans‚ÇÇ
          (APPLY-LAMBDA‚áì  w' (followD (VAR 0) (shiftUp 0 ‚åú a ‚åù) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)) (NUM k))
          (‚â°‚Çó‚Üí‚áìfrom-to
            (sub-followD‚â° k a g f)
            (‚áì-trans‚ÇÇ
               (DECIDE‚áì (VAR 0) (followDA (NUM k) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù))
                        (lower (ca w' (‚áìfrom-to‚Üí‚äë {w} {w'} {‚åú I ‚åù} {‚åú #SUP a g ‚åù} cI))))
               (‚áì-trans‚ÇÇ
                  (DECIDE-INL‚áì w' ‚åú t ‚åù (VAR 0) (followDA (NUM k) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)))
                  (‚â°‚Çó‚Üí‚áìfrom-to (sub-VAR0 ‚åú t ‚åù) (snd cn'))))))))
  where
    cn' : Œ£ ùïé¬∑ (Œª w'' ‚Üí t #‚áì #NUM n from w' to w'')
    cn' = #‚áì‚Üífrom-to {w'} {t} {#NUM n} (lower (cn w' (‚áìfrom-to‚Üí‚äë {w} {w'} {‚åú I ‚åù} {‚åú #SUP a g ‚åù} cI)))


-- INL case - this does not depend on f
#follow-INL‚áì : (w : ùïé¬∑) (I a g f t : CTerm) (k n : ‚Ñï)
               ‚Üí I #‚áì #SUP a g at w
               ‚Üí a #‚áõ! #INL t at w
               ‚Üí t #‚áõ #NUM n at w
               ‚Üí #follow f I k #‚áì #NUM n at w
#follow-INL‚áì w I a g f t k n cI ca cn =
  #‚áìfrom-to‚Üí#‚áì {w} {fst c} {#follow f I k} {#NUM n} (snd c)
  where
    cI' : Œ£ ùïé¬∑ (Œª w' ‚Üí I #‚áì #SUP a g from w to w')
    cI' = #‚áì‚Üífrom-to {w} {I} {#SUP a g} cI

    c : Œ£ ùïé¬∑ (Œª w'' ‚Üí #follow f I k #‚áì #NUM n from w to w'')
    c = #follow-INL‚áìfrom-to w (fst cI') I a g f t k n (snd cI') ca cn


-- INL case - this does not depend on f
#follow-INL‚áõ : (w : ùïé¬∑) (I a g f t : CTerm) (k n : ‚Ñï)
               ‚Üí I #‚áõ #SUP a g at w
               ‚Üí a #‚áõ! #INL t at w
               ‚Üí t #‚áõ #NUM n at w
               ‚Üí #follow f I k #‚áõ #NUM n at w
#follow-INL‚áõ w I a g f t k n cI ca cn w1 e1 =
  lift (#follow-INL‚áì w1 I a g f t k n (lower (cI w1 e1)) (‚àÄùïé-mon e1 ca) (‚àÄùïé-mon e1 cn))


sub-followDA‚â° : (t f g : CTerm) (k : ‚Ñï)
                ‚Üí sub ‚åú t ‚åù (followDA (NUM k) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù))
                   ‚â° followDA (NUM k) (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù) ‚åú f ‚åù
sub-followDA‚â° t f g k
   rewrite #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 0 f
         | #shiftUp 3 f
         | #shiftUp 3 f
         | #shiftUp 4 f
         | #shiftUp 6 f
         | #shiftUp 7 f
         | #shiftUp 7 f
         | #shiftUp 7 f
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 t
         | #shiftUp 0 g
         | #shiftUp 1 g
         | #shiftUp 1 g
         | #shiftUp 1 g
         | #subv 3 ‚åú t ‚åù ‚åú g ‚åù (CTerm.closed g)
         | #subv 1 ‚åú t ‚åù ‚åú f ‚åù (CTerm.closed f)
         | #subv 9 ‚åú t ‚åù ‚åú f ‚åù (CTerm.closed f)
         | #shiftDown 3 g
         | #shiftDown 1 f
         | #shiftDown 0 f
         | #shiftDown 9 f
   = refl


sub-followDA2‚â° : (m k : ‚Ñï) (f g : CTerm)
                 ‚Üí sub (NUM m) (followDA2 (shiftUp 0 (NUM k)) (VAR 0) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù))
                    ‚â° followDA2 (NUM k) (NUM m) (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù) ‚åú f ‚åù
sub-followDA2‚â° m k f g
  rewrite #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 3 f
        | #shiftUp 6 f
        | #shiftUp 7 f
        | #shiftUp 7 f
        | #shiftUp 0 g
        | #shiftUp 1 g
        | #shiftUp 1 g
        | #subv 2 ‚åú #NUM m ‚åù ‚åú g ‚åù (CTerm.closed g)
        | #subv 0 ‚åú #NUM m ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #subv 8 ‚åú #NUM m ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #shiftDown 2 g
        | #shiftDown 0 f
        | #shiftDown 8 f
  = refl


sub-WREC-followB : (a g f : CTerm)
                   ‚Üí sub ‚åú a ‚åù (WREC (APPLY (shiftUp 0 ‚åú g ‚åù) (VAR 0)) (shiftUp 3 (followB ‚åú f ‚åù)))
                      ‚â° WREC (APPLY ‚åú g ‚åù ‚åú a ‚åù) (followB ‚åú f ‚åù)
sub-WREC-followB a g f
  rewrite #shiftUp 0 a
        | #shiftUp 0 a
        | #shiftUp 0 a
        | #shiftUp 0 a
        | #shiftUp 0 a
        | #shiftUp 0 a
        | #shiftUp 0 a
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 3 f
        | #shiftUp 6 f
        | #shiftUp 0 g
        | #subv 0 ‚åú a ‚åù ‚åú g ‚åù (CTerm.closed g)
        | #subv 6 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #shiftDown 0 a
        | #shiftDown 6 a
        | #shiftDown 0 g
        | #shiftDown 6 f
  = refl


sub-APPLY2-WRECr-followB : (j k : ‚Ñï) (f g : CTerm)
                           ‚Üí sub (NUM j) (APPLY2 (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (VAR 0) (NUM (suc k)))
                              ‚â° APPLY2 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù) (NUM j) (NUM (suc k))
sub-APPLY2-WRECr-followB j k f g
  rewrite #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 0 f
        | #shiftUp 6 f
        | #shiftUp 7 f
        | #shiftUp 0 g
        | #shiftUp 1 g
        | #subv 1 ‚åú #NUM j ‚åù ‚åú g ‚åù (CTerm.closed g)
        | #subv 7 ‚åú #NUM j ‚åù ‚åú f ‚åù (CTerm.closed f)
        | #shiftDown 1 g
        | #shiftDown 7 f
  = refl


#follow-INR‚áìfrom-to : (w w' : ùïé¬∑) (I a g f t : CTerm) (k j : ‚Ñï)
                      ‚Üí I #‚áì #SUP a g from w to w'
                      ‚Üí a #‚áõ! #INR t at w
                      ‚Üí #APPLY f (#NUM k) #‚áõ! #NUM j at w'
                      ‚Üí #follow f I k #‚áì #follow f (#APPLY g (#NUM j)) (suc k) from w to w'
#follow-INR‚áìfrom-to w w' I a g f t k j cI ca cj =
  ‚áì-trans‚ÇÇ
    (APPLY‚áì (NUM k) (WREC‚áì (followB ‚åú f ‚åù) cI))
    (‚áì-trans‚ÇÇ
      (APPLY‚áì (NUM k) (WREC-SUP‚áì w' ‚åú a ‚åù ‚åú g ‚åù (followB ‚åú f ‚åù)))
      (‚â°‚Çó‚Üí‚áìfrom-to
        (‚â°APPLY (sub3-followB‚â° a g f) refl)
        (‚áì-trans‚ÇÇ
          (APPLY-LAMBDA‚áì w' (followD (VAR 0) (shiftUp 0 ‚åú a ‚åù) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)) (NUM k))
          (‚â°‚Çó‚Üí‚áìfrom-to
            (sub-followD‚â° k a g f)
            (‚áì-trans‚ÇÇ
               (DECIDE‚áì (VAR 0) (followDA (NUM k) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù))
                        (lower (ca w' e')))
               (‚áì-trans‚ÇÇ
                  (DECIDE-INR‚áì w' ‚åú t ‚åù (VAR 0) (followDA (NUM k) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)))
                  (‚â°‚Çó‚Üí‚áìfrom-to
                    (sub-followDA‚â° t f g k)
                    (‚áì-trans‚ÇÇ
                      (LET‚áì (followDA2 (shiftUp 0 (NUM k)) (VAR 0) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)) (SUC-NUM‚áì w' k))
                      (‚áì-trans‚ÇÇ
                        (LET-val‚áì w' (NUM (suc k)) (followDA2 (shiftUp 0 (NUM k)) (VAR 0) (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (shiftUp 0 ‚åú f ‚åù)) tt)
                        (‚â°‚Çó‚Üí‚áìfrom-to
                          (sub-followDA2‚â° (suc k) k f g)
                          (‚áì-trans‚ÇÇ
                            (LET‚áì (APPLY2 (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (VAR 0) (NUM (suc k))) (lower (cj w' (‚äë-refl¬∑ w'))))
                            (‚áì-trans‚ÇÇ
                               (LET-val‚áì w' (NUM j) (APPLY2 (shiftUp 0 (WRECr (followB ‚åú f ‚åù) ‚åú g ‚åù)) (VAR 0) (NUM (suc k))) tt)
                               (‚â°‚Çó‚Üí‚áìfrom-to
                                 (sub-APPLY2-WRECr-followB j k f g)
                                 (‚áì-trans‚ÇÇ
                                   (APPLY‚áì (NUM (suc k)) (APPLY-LAMBDA‚áì w' (WREC (APPLY (shiftUp 0 ‚åú g ‚åù) (VAR 0)) (shiftUp 3 (followB ‚åú f ‚åù))) (NUM j)))
                                   (‚â°‚Çó‚Üí‚áìfrom-to
                                     (‚â°APPLY (sub-WREC-followB (#NUM j) g f) refl)
                                     (‚áìfrom-to-refl _ w'))))))))))))))))
  where
    e' : w ‚äë¬∑ w'
    e' = ‚áìfrom-to‚Üí‚äë {w} {w'} {‚åú I ‚åù} {‚åú #SUP a g ‚åù} cI


-- INR case - this case depends on f
#follow-INR‚áì : (w : ùïé¬∑) (I a g f t : CTerm) (k j : ‚Ñï)
               ‚Üí I #‚áì #SUP a g at w
               ‚Üí a #‚áõ! #INR t at w
               ‚Üí #APPLY f (#NUM k) #‚áõ! #NUM j at w
               ‚Üí #follow f I k #‚áì #follow f (#APPLY g (#NUM j)) (suc k) at w
#follow-INR‚áì w I a g f t k j cI ca cj =
  #‚áìfrom-to‚Üí#‚áì
    {w} {fst cI'} {#follow f I k} {#follow f (#APPLY g (#NUM j)) (suc k)}
    (#follow-INR‚áìfrom-to w (fst cI') I a g f t k j (snd cI') ca (‚àÄùïé-mon e' cj))
  where
    cI' : Œ£ ùïé¬∑ (Œª w' ‚Üí I #‚áì #SUP a g from w to w')
    cI' = #‚áì‚Üífrom-to {w} {I} {#SUP a g} cI

    e' : w ‚äë¬∑ fst cI'
    e' = ‚áìfrom-to‚Üí‚äë {w} {fst cI'} {‚åú I ‚åù} {‚åú #SUP a g ‚åù} (snd cI')


#follow-INR‚áõ : (w : ùïé¬∑) (I a g f t : CTerm) (k j : ‚Ñï)
                ‚Üí I #‚áõ #SUP a g at w
                ‚Üí a #‚áõ! #INR t at w
                ‚Üí #APPLY f (#NUM k) #‚áõ! #NUM j at w
                ‚Üí #follow f I k #‚áõ #follow f (#APPLY g (#NUM j)) (suc k) at w
#follow-INR‚áõ w I a g f t k j cI ca cj w1 e1 =
  lift (#follow-INR‚áì w1 I a g f t k j (lower (cI w1 e1)) (‚àÄùïé-mon e1 ca) (‚àÄùïé-mon e1 cj))


INR‚Üí!‚â°‚ààType-IndBarC : (i : ‚Ñï) (w : ùïé¬∑) (x a b c : CTerm)
                     ‚Üí x #‚áõ! #INR a at w
                     ‚Üí equalInType i w (sub0 x #IndBarC) b c
                     ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' b c)
INR‚Üí!‚â°‚ààType-IndBarC i w x a b c comp j rewrite sub0-IndBarC‚â° x =
  equalInType-NAT!‚Üí i w b c j1
  where
    j1 : equalInType i w #NAT! b c
    j1 = equalInType-#‚áõ (#DECIDE‚áõINR-NAT‚áõ! w x a #[0]VOID comp) j


equalInType-#‚áõ-rev : {i : ‚Ñï} {w : ùïé¬∑} {T U a b : CTerm}
                      ‚Üí U #‚áõ! T at w
                      ‚Üí equalInType i w T a b
                      ‚Üí equalInType i w U a b
equalInType-#‚áõ-rev {i} {w} {T} {U} {a} {b} comp e =
  TSext-equalTypes-equalInType
    i w T U a b
    (equalTypes-#‚áõ-left-right-rev {i} {w} {T} {T} {U} {T} (#‚áõ-refl w T) (#‚áõ!‚Üí#‚áõ {w} {U} {T} comp) (fst e))
    e


sub0-indBarC‚áõINR-NAT‚áõ! : (w : ùïé¬∑) (x a : CTerm)
                           ‚Üí x #‚áõ! #INR a at w
                           ‚Üí sub0 x #IndBarC #‚áõ! #NAT! at w
sub0-indBarC‚áõINR-NAT‚áõ! w x a comp rewrite #shiftUp 0 x | #shiftDown 0 x =
  #DECIDE‚áõINR-NAT‚áõ! w x a #[0]VOID comp


#‚áõ‚ÜíNATeq : {w : ùïé¬∑} {a1 a2 b1 b2 : CTerm}
             ‚Üí b1 #‚áõ a1 at w
             ‚Üí b2 #‚áõ a2 at w
             ‚Üí NATeq w a1 a2
             ‚Üí NATeq w b1 b2
#‚áõ‚ÜíNATeq {w} {a1} {a2} {b1} {b2} c1 c2 (j , d1 , d2) =
  j , ‚áõ-trans c1 d1 , ‚áõ-trans c2 d2


#‚áìSUP‚Üíweq-refl : {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per} {w : ùïé¬∑} {I a1 a2 f1 f2 : CTerm} {j : ‚Ñï}
                  ‚Üí I #‚áì #SUP a1 f1 at w
                  ‚Üí I #‚áì #SUP a2 f2 at w
                  ‚Üí weq eqa eqb w (#APPLY f1 (#NUM j)) (#APPLY f2 (#NUM j))
                  ‚Üí weq eqa eqb w (#APPLY f1 (#NUM j)) (#APPLY f1 (#NUM j))
#‚áìSUP‚Üíweq-refl {eqa} {eqb} {w} {I} {a1} {a2} {f1} {f2} {j} c1 c2 h
  rewrite #SUPinj1 {a2} {f2} {a1} {f1} (#‚áì-val-det {_} {I} tt tt c2 c1)
        | #SUPinj2 {a2} {f2} {a1} {f1} (#‚áì-val-det {_} {I} tt tt c2 c1) = h


weq‚Üífollow-NATeq : (kb : K‚ñ°) (i : ‚Ñï) (w : ùïé¬∑) (I1 I2 f g : CTerm) (k : ‚Ñï)
                     ‚Üí weq (equalInType i w #IndBarB) (Œª a b eqa ‚Üí equalInType i w (sub0 a #IndBarC)) w I1 I2
                     ‚Üí ((k : ‚Ñï) ‚Üí equalInType i w #NAT! (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
                     ‚Üí NATeq {--#‚áìsame‚Ñï--} w (#follow f I1 k) (#follow g I2 k)
weq‚Üífollow-NATeq kb i w I1 I2 f g k (weqC a1 f1 a2 f2 e c1 c2 ind) eqf
  with kb (equalInType-IndBarB‚Üí i w a1 a2 e) w (‚äë-refl¬∑ w)
... | inj‚ÇÅ (t , u , n , d1 , d2 , x1 , x2) = n , comp1 , comp2
      where
        comp1 : #follow f I1 k #‚áõ #NUM n at w
        comp1 = #follow-INL‚áõ w I1 a1 f1 f t k n c1 d1 x1

        comp2 : #follow g I2 k #‚áõ #NUM n at w
        comp2 = #follow-INL‚áõ w I2 a2 f2 g u k n c2 d2 x2
... | inj‚ÇÇ (t , u , d1 , d2) =
    #‚áõ‚ÜíNATeq
      {w}
      {#follow f (#APPLY f1 (#NUM j)) (suc k)}
      {#follow g (#APPLY f2 (#NUM j)) (suc k)}
      {#follow f I1 k}
      {#follow g I2 k}
      comp1 comp2
      ind'
      where
        eqf0 : equalInType i w #NAT! (#APPLY f (#NUM k)) (#APPLY g (#NUM k))
        eqf0 = eqf k --APPLY-‚â°‚ààBAIRE!-NUM‚Üí i w f g k eqf

        eqf1 : equalInType i w (sub0 a1 #IndBarC) (#APPLY f (#NUM k)) (#APPLY g (#NUM k))
        eqf1 = equalInType-#‚áõ-rev (sub0-indBarC‚áõINR-NAT‚áõ! w a1 t d1) eqf0

        eqf2 : ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#APPLY f (#NUM k)) (#APPLY g (#NUM k)))
        eqf2 = INR‚Üí!‚â°‚ààType-IndBarC i w a1 t _ _ d1 eqf1

        eqf3 : #‚áõ!same‚Ñï w (#APPLY f (#NUM k)) (#APPLY g (#NUM k))
        eqf3 = kb eqf2 w (‚äë-refl¬∑ w)

        j : ‚Ñï
        j = fst eqf3

        cf : #APPLY f (#NUM k) #‚áõ! #NUM j at w
        cf = fst (snd eqf3)

        cg : #APPLY g (#NUM k) #‚áõ! #NUM j at w
        cg = snd (snd eqf3)

        eqj : equalInType i w (sub0 a1 #IndBarC) (#NUM j) (#NUM j)
        eqj = equalInType-#‚áõ-rev (sub0-indBarC‚áõINR-NAT‚áõ! w a1 t d1) (NUM-equalInType-NAT! i w j)

        ind' : NATeq {--#‚áìsame‚Ñï--} w (#follow f (#APPLY f1 (#NUM j)) (suc k)) (#follow g (#APPLY f2 (#NUM j)) (suc k))
        ind' = weq‚Üífollow-NATeq kb i w (#APPLY f1 (#NUM j)) (#APPLY f2 (#NUM j)) f g (suc k) (ind (#NUM j) (#NUM j) eqj) eqf

        comp1 : #follow f I1 k #‚áõ #follow f (#APPLY f1 (#NUM j)) (suc k) at w
        comp1 = #follow-INR‚áõ w I1 a1 f1 f t k j c1 d1 cf

        comp2 : #follow g I2 k #‚áõ #follow g (#APPLY f2 (#NUM j)) (suc k) at w
        comp2 = #follow-INR‚áõ w I2 a2 f2 g u k j c2 d2 cg


NATeq-trans : {w : ùïé¬∑} {a b c : CTerm}
              ‚Üí NATeq w a b
              ‚Üí NATeq w b c
              ‚Üí NATeq w a c
NATeq-trans {w} {a} {b} {c} (k , c1 , c2) (j , d1 , d2)
  rewrite #NUMinj (#‚áõ-val-det {_} {b} tt tt d1 c2) = k , c1 , d2


BAIRE!2ùïä-equalInBAIRE : (kb : K‚ñ°) {i : ‚Ñï} {w : ùïé¬∑} {f : CTerm} (f‚àà : ‚ààType i w #BAIRE! f)
                        ‚Üí equalInType i w #BAIRE f (#MSEQ (BAIRE!2ùïä kb f‚àà))
BAIRE!2ùïä-equalInBAIRE kb {i} {w} {f} f‚àà =
  equalInType-FUN eqTypesNAT eqTypesNAT aw
  where
    s : ùïä
    s = BAIRE!2ùïä kb f‚àà

    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w' #NAT (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea =
      ‚ÜíequalInType-NAT i w1 _  _ (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT‚Üí i w1 _ _ ea))
      where
        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí NATeq w' a‚ÇÅ a‚ÇÇ ‚Üí NATeq w' (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
        aw1 w2 e2 (k , c1 , c2) = s k , #‚áõ!‚Üí#‚áõ {w2} {#APPLY f a‚ÇÅ} {#NUM (s k)} j3 , APPLY-MSEQ‚áõ w2 s ‚åú a‚ÇÇ ‚åù k c2
          where
            j1 : #APPLY f (#NUM k) #‚áõ! #NUM (s k) at w
            j1 = fst (snd (kb (equalInType-NAT!‚Üí i w _ _ (APPLY-‚ààBAIRE!-NUM‚Üí i w f k f‚àà)) w (‚äë-refl¬∑ w)))

            j2 : #‚áõ!same‚Ñï w2 (#APPLY f a‚ÇÅ) (#APPLY f (#NUM k))
            j2 = kb (equalInType-NAT!‚Üí i w2 _ _ (equalInType-FUN‚Üí f‚àà w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ (#NUM k) (#‚áõNUM‚ÜíequalInType-NAT i w2 a‚ÇÅ k c1))) w2 (‚äë-refl¬∑ w2)

            j3 : #APPLY f a‚ÇÅ #‚áõ! #NUM (s k) at w2
            j3 = #‚áõ!same‚Ñï‚Üí#‚áõ!NUM‚Çó {w2} {#APPLY f a‚ÇÅ} {#APPLY f (#NUM k)} j2 (‚àÄùïé-mon (‚äë-trans¬∑ e1 e2) j1)



#‚áõ!same‚Ñï‚ÜíNATeq : {w : ùïé¬∑} {a b : CTerm}
                    ‚Üí #‚áõ!same‚Ñï w a b
                    ‚Üí NATeq w a b
#‚áõ!same‚Ñï‚ÜíNATeq {w} {a} {b} (k , c1 , c2) = k , #‚áõ!‚Üí#‚áõ {w} {a} {#NUM k} c1 , #‚áõ!‚Üí#‚áõ {w} {b} {#NUM k} c2


follow-NUM : (i : ‚Ñï) (w : ùïé¬∑) (r : Name) (F : CTerm) (s : ùïä) (k n : ‚Ñï)
             ‚Üí wmem (equalInType i w #IndBarB) (Œª a b eqa ‚Üí equalInType i w (sub0 a #IndBarC)) w (#tab r F k (seq2list s k))
             ‚Üí #APPLY F (#MSEQ s) #‚áõ #NUM n at w
             ‚Üí #follow (#MSEQ s) (#tab r F k (seq2list s k)) k #‚áõ #NUM n at w
follow-NUM i w r F s k n wm h comp = ?


semCond : (kb : K‚ñ°) (cn : c‚Ñï) (can : comp‚Üí‚àÄ‚Ñï) (exb : ‚àÉ‚ñ°) (gc : get-choose-‚Ñï)
          (i : ‚Ñï) (w : ùïé¬∑) (r : Name) (F f : CTerm)
          ‚Üí compatible¬∑ r w Res‚ä§
          ‚Üí ‚ààType i w #FunBarP F
          ‚Üí ‚ààType i w #BAIRE! f
          ‚Üí equalInType i w #NAT (#APPLY F f) (#follow f (#tab r F 0 #INIT) 0)
-- It's a #QNAT and not a #NAT because of the computation on #tab, which is a "time-dependent" computation
semCond kb cn can exb gc i w r F f compat F‚ààP f‚àà =
  ‚ÜíequalInType-NAT
    i w (#APPLY F f) (#follow f I 0)
    (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-W‚Üí i w #IndBarB #IndBarC I I I‚àà))
  where
    nnF  : #¬¨Names F
    nnF = equalInType-TPURE‚Üí‚Çó F‚ààP

    F‚àà : ‚ààType i w #FunBar F
    F‚àà = equalInType-TPURE‚Üí F‚ààP

    s : ùïä
    s = BAIRE!2ùïä kb f‚àà

    I : CTerm
    I = #tab r F 0 #INIT

    I‚àà : ‚ààType i w #IndBar I
    I‚àà = sem kb cn can exb gc i w r F compat F‚ààP

    f‚â°1 : (k : ‚Ñï) ‚Üí equalInType i w #NAT! (#APPLY f (#NUM k)) (#APPLY (#MSEQ s) (#NUM k))
    f‚â°1 k = BAIRE!2ùïä-equalInNAT! kb {i} {w} {f} f‚àà k

    f‚â°2 : equalInType i w #BAIRE f (#MSEQ (BAIRE!2ùïä kb f‚àà))
    f‚â°2 = BAIRE!2ùïä-equalInBAIRE kb {i} {w} {f} f‚àà

    aw : ‚àÄùïé w (Œª w' e' ‚Üí wmem (equalInType i w' #IndBarB) (Œª a b eqa ‚Üí equalInType i w' (sub0 a #IndBarC)) w' I
                        ‚Üí NATeq {--#weakMonEq--} w' (#APPLY F f) (#follow f I 0))
    aw w1 e1 h =
      NATeq-trans {w1} {#APPLY F f} {#follow (#MSEQ s) I 0} {#follow f I 0}
        (NATeq-trans {w1} {#APPLY F f} {#APPLY F (#MSEQ s)} {#follow (#MSEQ s) I 0} neq1 neq2)
        (weq‚Üífollow-NATeq kb i w1 I I (#MSEQ s) f 0 h (Œª k ‚Üí equalInType-mon (equalInType-sym (f‚â°1 k)) w1 e1))
      where
        neq1 : NATeq w1 (#APPLY F f) (#APPLY F (#MSEQ s))
        neq1 = kb (equalInType-NAT‚Üí i w1 _ _ (equalInType-FUN‚Üí F‚àà w1 e1 f (#MSEQ s) (equalInType-mon f‚â°2 w1 e1))) w1 (‚äë-refl¬∑ w1)

        neq2 : NATeq w1 (#APPLY F (#MSEQ s)) (#follow (#MSEQ s) I 0)
        neq2 = fst neq1 , snd (snd neq1) , {!!}

\end{code}
