\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; subst)
--open import Relation.Binary.PropositionalEquality hiding ([_] ; Extensionality) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
--open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_ ; true ; false ; if_then_else_)
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
--open import Agda.Builtin.String
--open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Data.List.Properties
--open import Function.Inverse using (Inverse)
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms


module worldInstanceRef (E : Extensionality 0‚Ñì 0‚Ñì) where
\end{code}



This provides an instance of world and choice for choice sequences


\begin{code}
true‚â†false : ¬¨ true ‚â° false
true‚â†false ()


‚äébool : (b : Bool) ‚Üí b ‚â° true ‚äé b ‚â° false
‚äébool true = inj‚ÇÅ refl
‚äébool false = inj‚ÇÇ refl


B‚ÜíC : Bool ‚Üí CTerm
B‚ÜíC true = #NUM 0
B‚ÜíC false = #NUM 1


B‚ÜíC-inj : {a b : Bool} ‚Üí B‚ÜíC a ‚â° B‚ÜíC b ‚Üí a ‚â° b
B‚ÜíC-inj {false} {false} x = refl
B‚ÜíC-inj {true} {true} x = refl


‚Ñï‚ÜíC : ‚Ñï ‚Üí CTerm
‚Ñï‚ÜíC n = #NUM n


‚Ñï‚ÜíC-inj : {a b : ‚Ñï} ‚Üí ‚Ñï‚ÜíC a ‚â° ‚Ñï‚ÜíC b ‚Üí a ‚â° b
‚Ñï‚ÜíC-inj {a} {b} h = NUMinj (‚â°CTerm h)



-- We could use Bools instead but then in choiceBarInstance.lagda, we have to pick a better type that contains only choices.
-- Could instead ‚ààType‚ÑÇ‚ÇÄ‚ÇÅ‚Üí in choiceBar have an assumption about a and b being choices?
open import choice

choiceRef : Choice
--choiceRef = mkChoice Bool B‚ÜíC B‚ÜíC-inj
choiceRef = mkChoice ‚Ñï ‚Ñï‚ÜíC (Œª c ‚Üí refl) (Œª c ‚Üí refl) --‚Ñï‚ÜíC-inj

open import choiceDef{1‚Ñì}(choiceRef)



-- The Bool says whether the cell is "frozen"
record Cell : Set‚ÇÅ where
  constructor cell
  field
    name : Name
    r : Res{0‚Ñì}
    v : ‚ÑÇ¬∑
    f : Bool


-- Worlds - entries are added at the end of the list
world : Set‚ÇÅ
world = List Cell


wdom : world ‚Üí List Name
wdom [] = []
wdom (cell name _ _ _ ‚à∑ w) = name ‚à∑ wdom w


wnames : world ‚Üí List Name
wnames w = []


-- states that we can only freeze (Res.c‚ÇÅ r), i.e., if f ‚â° true then v = Res.c‚ÇÅ r
freeze‚ÇÅ : (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool) ‚Üí Bool
freeze‚ÇÅ r v true with Res.frz r
freeze‚ÇÅ r v true | true with v ‚âü Res.c‚ÇÅ r
freeze‚ÇÅ r v true | true | yes _ = true
freeze‚ÇÅ r v true | true | no  _ = false
freeze‚ÇÅ r v true | false = true
freeze‚ÇÅ r v false = true


¬¨frz‚Üífreeze‚ÇÅ : (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool)
             ‚Üí Res.frz r ‚â° false
             ‚Üí freeze‚ÇÅ r v f ‚â° true
¬¨frz‚Üífreeze‚ÇÅ r v true h rewrite h = refl
¬¨frz‚Üífreeze‚ÇÅ r v false h = refl


¬¨freeze‚ÇÅ‚Üífrz : (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool)
             ‚Üí freeze‚ÇÅ r v f ‚â° false
             ‚Üí Res.frz r ‚â° true
¬¨freeze‚ÇÅ‚Üífrz r v true h with Res.frz r
¬¨freeze‚ÇÅ‚Üífrz r v true h | true = refl
¬¨freeze‚ÇÅ‚Üífrz r v true h | false = sym h
¬¨freeze‚ÇÅ‚Üífrz r v false h = ‚ä•-elim (true‚â†false h)


pres-freeze‚ÇÅ : (r : Res{0‚Ñì}) (v v' : ‚ÑÇ¬∑) (f f' : Bool) ‚Üí Set
pres-freeze‚ÇÅ r v v' f f' = freeze‚ÇÅ r v f ‚â° true ‚Üí freeze‚ÇÅ r v' f' ‚â° true


pres-freeze‚ÇÅ-refl : (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool)
                  ‚Üí pres-freeze‚ÇÅ r v v f f
pres-freeze‚ÇÅ-refl r v f x = x


update : (n : Name) (v : ‚ÑÇ¬∑) (f : Bool) (w : world) ‚Üí world
update _ _ _ [] = []
update n v f (cell name r x b ‚à∑ w) with n ‚âü name
... | yes p =
  (if Res.frz r -- if it's freezable (we're allowed to freeze)
   then (if b -- if it's freezable and currently frozen, we don't change
         then cell name r x b
         else if freeze‚ÇÅ r v f -- if it's freezable but not currently frozen: if f ‚â° true, then v must be (Res.c‚ÇÅ r) to freeze
              then cell name r v f
              else cell name r x b)
   else cell name r v f)
  ‚à∑ w
... | no p = cell name r x b ‚à∑ update n v f w


newCell : (n : Name) (r : Res{0‚Ñì}) (w : world) ‚Üí world
newCell n r w = cell n r (Res.c‚ÇÄ r) false ‚à∑ w


getRef : Name ‚Üí world ‚Üí Maybe Cell
getRef name [] = nothing
getRef name (cell n r v f ‚à∑ w) with name ‚âü n
... | yes p = just (cell n r v f)
... | no p = getRef name w


‚ààworld : (n : Name) (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool) (w : world) ‚Üí Set‚ÇÅ
‚ààworld n r v f w = getRef n w ‚â° just (cell n r v f)


hasRes : (c : Name) (w : world) (r : Res{0‚Ñì}) ‚Üí Set‚ÇÅ
hasRes c w r = Œ£ ‚ÑÇ¬∑ (Œª v ‚Üí Œ£ Bool (Œª f ‚Üí ‚ààworld c r v f w))


data _‚âº_ : (w2 : world) (w1 : world) ‚Üí Set‚ÇÅ where
  ‚âº-refl : (w : world) ‚Üí w ‚âº w
  ‚âº-trans : {w1 w2 w3 : world} ‚Üí w1 ‚âº w2 ‚Üí w2 ‚âº w3 ‚Üí w1 ‚âº w3
  upd :
    (w : world) (n : Name) (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool)
    ‚Üí hasRes n w r
    ‚Üí ‚ãÜ·µ£ r v
--    ‚Üí (f ‚â° true ‚Üí v ‚â° Res.c‚ÇÅ r)
--    ‚Üí ¬∑·µ£ r 0 v
    ‚Üí w ‚âº update n v f w
  new :
    (w : world) (n : Name) (r : Res{0‚Ñì})
    ‚Üí ¬¨ (n ‚àà wdom w) -- 'name' is not in 'w' so that we don't shadow an entry
    ‚Üí w ‚âº newCell n r w



open import world

PossibleWorldsRef : PossibleWorlds
PossibleWorldsRef = mkPossibleWorlds world _‚âº_ ‚âº-refl ‚âº-trans

open import worldDef(PossibleWorldsRef)



resSatRef : (v : ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí Set
resSatRef v r = ‚ãÜ·µ£ r v -- ¬∑·µ£ r 0 v


pres-freeze‚ÇÅ-trans : {r : Res{0‚Ñì}} {v‚ÇÅ v‚ÇÇ v‚ÇÉ : ‚ÑÇ¬∑} {f‚ÇÅ f‚ÇÇ f‚ÇÉ : Bool}
                   ‚Üí pres-freeze‚ÇÅ r v‚ÇÅ v‚ÇÇ f‚ÇÅ f‚ÇÇ
                   ‚Üí pres-freeze‚ÇÅ r v‚ÇÇ v‚ÇÉ f‚ÇÇ f‚ÇÉ
                   ‚Üí pres-freeze‚ÇÅ r v‚ÇÅ v‚ÇÉ f‚ÇÅ f‚ÇÉ
pres-freeze‚ÇÅ-trans x y z = y (x z)


-- This is the same as 'hasRef' & enforces satisfiability too
compatibleRef : (c : Name) (w : ùïé¬∑) (r : Res{0‚Ñì}) ‚Üí Set‚ÇÅ
compatibleRef c w r =
  Œ£ ‚ÑÇ¬∑ (Œª v ‚Üí Œ£ Bool (Œª f ‚Üí ‚ààworld c r v f w √ó resSatRef v r √ó freeze‚ÇÅ r v f ‚â° true))


pres-resSatRef : (v v' : ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí Set
pres-resSatRef v v' r = resSatRef v r ‚Üí resSatRef v' r


pres-resSatRef-refl : (v : ‚ÑÇ¬∑) (r : Res{0‚Ñì}) ‚Üí pres-resSatRef v v r
pres-resSatRef-refl v r d = d


pres-resSatRef-trans : {v1 v2 v3 : ‚ÑÇ¬∑} {r : Res{0‚Ñì}}
                       ‚Üí pres-resSatRef v1 v2 r
                       ‚Üí pres-resSatRef v2 v3 r
                       ‚Üí pres-resSatRef v1 v3 r
pres-resSatRef-trans {v1} {v2} {v3} {r} p1 p2 s = p2 (p1 s)



satFrozen : (r : Res{0‚Ñì}) (v v' : ‚ÑÇ¬∑) (f f' : Bool) ‚Üí Set
satFrozen r v v' true f' = (Res.frz r ‚â° true ‚Üí f' ‚â° true √ó v ‚â° v')
satFrozen r v v' false f' = ‚ä§


satFrozen-refl : (r : Res{0‚Ñì}) (v : ‚ÑÇ¬∑) (f : Bool) ‚Üí satFrozen r v v f f
satFrozen-refl r v true = Œª _ ‚Üí refl , refl
satFrozen-refl r v false = tt


satFrozen-trans : {r : Res{0‚Ñì}} {v1 v2 v3 : ‚ÑÇ¬∑} {f1 f2 f3 : Bool}
                  ‚Üí satFrozen r v1 v2 f1 f2
                  ‚Üí satFrozen r v2 v3 f2 f3
                  ‚Üí satFrozen r v1 v3 f1 f3
satFrozen-trans {r} {v1} {v2} {v3} {false} {f2} {f3} s1 s2 = tt
satFrozen-trans {r} {v1} {v2} {v3} {true} {f2} {f3} s1 s2 z rewrite z | fst (s1 refl) | snd (s1 refl) = s2 z


cell-inj1 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : ‚ÑÇ¬∑} {f1 f2 : Bool} ‚Üí cell n1 r1 v1 f1 ‚â° cell n2 r2 v2 f2 ‚Üí n1 ‚â° n2
cell-inj1 refl =  refl


cell-inj2 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : ‚ÑÇ¬∑} {f1 f2 : Bool} ‚Üí cell n1 r1 v1 f1 ‚â° cell n2 r2 v2 f2 ‚Üí r1 ‚â° r2
cell-inj2 refl =  refl


cell-inj3 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : ‚ÑÇ¬∑} {f1 f2 : Bool} ‚Üí cell n1 r1 v1 f1 ‚â° cell n2 r2 v2 f2 ‚Üí v1 ‚â° v2
cell-inj3 refl =  refl


cell-inj4 : {n1 n2 : Name} {r1 r2 : Res} {v1 v2 : ‚ÑÇ¬∑} {f1 f2 : Bool} ‚Üí cell n1 r1 v1 f1 ‚â° cell n2 r2 v2 f2 ‚Üí f1 ‚â° f2
cell-inj4 refl =  refl


getRef-update-true-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                       ‚Üí Rfrz? r
                       ‚Üí getRef name w ‚â° just (cell name r v true)
                       ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v true)
getRef-update-true-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e with name ‚âü name‚ÇÅ
... | yes p rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with name‚ÇÅ ‚âü name‚ÇÅ
...     | yes q with Res.frz r
...        | true rewrite q with name‚ÇÅ ‚âü name‚ÇÅ
...           | yes s = refl
...           | no s = ‚ä•-elim (s q)
getRef-update-true-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | yes q | false rewrite q = ‚ä•-elim frz
getRef-update-true-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-true-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | no p with name ‚âü name‚ÇÅ
...     | yes q = ‚ä•-elim (p q)
...     | no q = getRef-update-true-‚â° {w} v' f frz e



getRef-update-true-¬¨frz-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                       ‚Üí ¬¨ (Rfrz? r)
                       ‚Üí getRef name w ‚â° just (cell name r v true)
                       ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v' f)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e with name ‚âü name‚ÇÅ
... | yes p rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with Res.frz r
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | true = ‚ä•-elim (frz tt)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | false with freeze‚ÇÅ r v' f
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | false | true with name‚ÇÅ ‚âü name‚ÇÅ
... | yes q = refl
... | no q = ‚ä•-elim (q refl)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | yes p | false | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes q = refl
... | no q = ‚ä•-elim (q refl)
getRef-update-true-¬¨frz-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frz e | no p with name ‚âü name‚ÇÅ
... |    yes q = ‚ä•-elim (p q)
... |    no q = getRef-update-true-¬¨frz-‚â° {w} v' f frz e


getRef-update-false-‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                      ‚Üí freeze‚ÇÅ r v' f ‚â° true
                      ‚Üí getRef name w ‚â° just (cell name r v false)
                      ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v' f)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e with name ‚âü name‚ÇÅ
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q with Res.frz r
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | true with freeze‚ÇÅ r v' f
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | true | true with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = refl
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | true | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = ‚ä•-elim (true‚â†false (sym fr))
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | yes q | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z = refl
... | no z = ‚ä•-elim (z refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-false-‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f fr e | no p with name ‚âü name‚ÇÅ
...     | yes q = ‚ä•-elim (p q)
...     | no q = getRef-update-false-‚â° {w} v' f fr e


getRef-update-false-‚â°‚Ä≤ : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} (v' : ‚ÑÇ¬∑) (f : Bool)
                       ‚Üí Res.frz r ‚â° true
                       ‚Üí freeze‚ÇÅ r v' f ‚â° false
                       ‚Üí getRef name w ‚â° just (cell name r v false)
                       ‚Üí getRef name (update name v' f w) ‚â° just (cell name r v false)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e with name ‚âü name‚ÇÅ
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p
  rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with name‚ÇÅ ‚âü name‚ÇÅ
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q with Res.frz r
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | true with freeze‚ÇÅ r v' f
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | true | true with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = ‚ä•-elim (true‚â†false fr)
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | true | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z  = refl
... | no z  = ‚ä•-elim (z refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | yes q | false with name‚ÇÅ ‚âü name‚ÇÅ
... | yes z = ‚ä•-elim (true‚â†false (sym frr))
... | no z = ‚ä•-elim (z refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | yes p | no q = ‚ä•-elim (q refl)
getRef-update-false-‚â°‚Ä≤ {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} v' f frr fr e | no p with name ‚âü name‚ÇÅ
...     | yes q = ‚ä•-elim (p q)
...     | no q = getRef-update-false-‚â°‚Ä≤ {w} v' f frr fr e


getRef-update-¬¨‚â° : {w : ùïé¬∑} {name : Name} {r : Res{0‚Ñì}} {v : ‚ÑÇ¬∑} {f : Bool} (name' : Name) (v' : ‚ÑÇ¬∑) (f' : Bool)
                     ‚Üí ¬¨ name' ‚â° name
                     ‚Üí getRef name w ‚â° just (cell name r v f)
                     ‚Üí getRef name (update name' v' f' w) ‚â° just (cell name r v f)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} {f} name' v' f' d e with name ‚âü name‚ÇÅ
... | yes p rewrite p | cell-inj2 (just-inj e) | cell-inj3 (just-inj e) | cell-inj4 (just-inj e) with name' ‚âü name‚ÇÅ
... |    yes q rewrite q = ‚ä•-elim (d refl)
... |    no q with name‚ÇÅ ‚âü name‚ÇÅ
... |       yes z  = refl
... |       no z  = ‚ä•-elim (z refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p with name' ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ true ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q rewrite q with name ‚âü name‚ÇÅ
... |       yes z rewrite z = ‚ä•-elim (p refl)
... |       no z with Res.frz r‚ÇÅ
... |          true with name ‚âü name‚ÇÅ
... |             yes s = ‚ä•-elim (z s)
... |             no s = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ true ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | no z | false with name ‚âü name‚ÇÅ
... |             yes s = ‚ä•-elim (p s)
... |             no s = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q
  rewrite q with name ‚âü name‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | yes z
  rewrite z = ‚ä•-elim (p refl)
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | no z
  with Res.frz r‚ÇÅ
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | no z | true
  with freeze‚ÇÅ r‚ÇÅ v' f'
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | no z | true | true
  with name ‚âü name‚ÇÅ
... | yes y = ‚ä•-elim (p y)
... | no y = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | no z | true | false
  with name ‚âü name‚ÇÅ
... | yes y = ‚ä•-elim (p y)
... | no y = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ false ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | yes q | no z | false
  with name ‚âü name‚ÇÅ
... | yes y = ‚ä•-elim (p y)
... | no y = e
getRef-update-¬¨‚â° {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {name} {r} {v} {f} name' v' f' d e | no p | no q with name ‚âü name‚ÇÅ
... |       yes z rewrite z = ‚ä•-elim (p refl)
... |       no z = getRef-update-¬¨‚â° {w} name' v' f' d e



¬¨‚ààwdom‚ÜígetRef-nothing : {n : Name} {w : ùïé¬∑}
                         ‚Üí ¬¨ n ‚àà wdom w
                         ‚Üí getRef n w ‚â° nothing
¬¨‚ààwdom‚ÜígetRef-nothing {n} {[]} ni = refl
¬¨‚ààwdom‚ÜígetRef-nothing {n} {cell name r v f ‚à∑ w} ni with n ‚âü name
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = ¬¨‚ààwdom‚ÜígetRef-nothing {n} {w} (Œª x ‚Üí ni (there x))


‚ÜíRfrz? : {r : Res{0‚Ñì}} ‚Üí Res.frz r ‚â° true ‚Üí Rfrz? r
‚ÜíRfrz? {r} e rewrite e = tt


Rfrz?‚Üí : {r : Res{0‚Ñì}} ‚Üí Rfrz? r ‚Üí Res.frz r ‚â° true
Rfrz?‚Üí {r} e with Res.frz r
... | true = refl
... | false = ‚ä•-elim e


‚Üí¬¨Rfrz? : {r : Res{0‚Ñì}} ‚Üí Res.frz r ‚â° false ‚Üí ¬¨ Rfrz? r
‚Üí¬¨Rfrz? {r} e rewrite e = Œª z ‚Üí z


‚äë-pres-getRef : {w1 w2 : world} {name : Name} {r : Res} {v : ‚ÑÇ¬∑} {f : Bool}
                 ‚Üí w1 ‚äë¬∑ w2
                 ‚Üí getRef name w1 ‚â° just (cell name r v f)
                 ‚Üí Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí
                   Œ£ Bool (Œª f' ‚Üí getRef name w2 ‚â° just (cell name r v' f')
                   √ó pres-resSatRef v v' r
                   √ó satFrozen r v v' f f'
                   √ó pres-freeze‚ÇÅ r v v' f f'))
‚äë-pres-getRef {w1} {.w1} {name} {r} {v} {f} (‚âº-refl .w1) i =
  v , f , i , pres-resSatRef-refl v r , satFrozen-refl r v f , pres-freeze‚ÇÅ-refl r v f
‚äë-pres-getRef {w1} {w3} {name} {r} {v} {f} (‚âº-trans {.w1} {w2} {.w3} e‚ÇÅ e‚ÇÇ) i =
  fst ind2 , fst (snd ind2) , fst (snd (snd ind2)) ,
  pres-resSatRef-trans {v} {fst ind1} {fst ind2} {r} (fst (snd (snd (snd ind1)))) (fst (snd (snd (snd ind2)))) ,
  satFrozen-trans (fst (snd (snd (snd (snd ind1))))) (fst (snd (snd (snd (snd ind2))))) ,
  pres-freeze‚ÇÅ-trans
    {r} {v} {fst ind1} {fst ind2} {f} {fst (snd ind1)} {fst (snd ind2)}
    (snd (snd (snd (snd (snd ind1)))))
    (snd (snd (snd (snd (snd ind2)))))
  where
    ind1 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí
           Œ£ Bool (Œª f' ‚Üí getRef name w2 ‚â° just (cell name r v' f')
           √ó pres-resSatRef v v' r
           √ó satFrozen r v v' f f'
           √ó pres-freeze‚ÇÅ r v v' f f'))
    ind1 = ‚äë-pres-getRef e‚ÇÅ i

    ind2 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí
           Œ£ Bool (Œª f' ‚Üí getRef name w3 ‚â° just (cell name r v' f')
           √ó pres-resSatRef (fst ind1) v' r
           √ó satFrozen r (fst ind1) v' (fst (snd ind1)) f'
           √ó pres-freeze‚ÇÅ r (fst ind1) v' (fst (snd ind1)) f'))
    ind2 = ‚äë-pres-getRef e‚ÇÇ (fst (snd (snd ind1)))
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {true} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x) i with n ‚âü name
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {true} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x) i | yes p
  rewrite p with ‚äébool (Res.frz r)
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {true} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x) i | yes p | inj‚ÇÅ s =
  v , true , (getRef-update-true-‚â° {w1} v‚ÇÅ f‚ÇÅ (‚ÜíRfrz? {r} s) i) , (Œª x ‚Üí x) , (Œª _ ‚Üí refl , refl) , Œª x ‚Üí x
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {true} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x) i | yes p | inj‚ÇÇ s
  rewrite s | i | sym (cell-inj2 (just-inj (snd (snd hr))))
  = v‚ÇÅ , f‚ÇÅ , (getRef-update-true-¬¨frz-‚â° {w1} v‚ÇÅ f‚ÇÅ (‚Üí¬¨Rfrz? {r} s) i) , (Œª z ‚Üí x) , (Œª ()) ,
    Œª x ‚Üí ¬¨frz‚Üífreeze‚ÇÅ r v‚ÇÅ f‚ÇÅ s
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {true} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x) i | no p =
  v , true , getRef-update-¬¨‚â° {w1} n v‚ÇÅ f‚ÇÅ p i , (Œª x ‚Üí x) , (Œª z ‚Üí refl , refl) ,
  Œª x ‚Üí x
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {false} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x‚ÇÅ) i with n ‚âü name
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {false} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x‚ÇÅ) i | yes p
  rewrite p | i | sym (cell-inj2 (just-inj (snd (snd hr))))
  with ‚äébool (freeze‚ÇÅ r v‚ÇÅ f‚ÇÅ)
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {false} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x‚ÇÅ) i | yes p | inj‚ÇÅ z =
  v‚ÇÅ , f‚ÇÅ , getRef-update-false-‚â° {w1} v‚ÇÅ f‚ÇÅ z i , (Œª x ‚Üí x‚ÇÅ) , tt , Œª _ ‚Üí z
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {false} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x‚ÇÅ) i | yes p | inj‚ÇÇ z =
  v , false , getRef-update-false-‚â°‚Ä≤ {w1} v‚ÇÅ f‚ÇÅ (¬¨freeze‚ÇÅ‚Üífrz r v‚ÇÅ f‚ÇÅ z) z i , (Œª x ‚Üí x) , tt , Œª x ‚Üí x
‚äë-pres-getRef {w1} {.(update n v‚ÇÅ f‚ÇÅ w1)} {name} {r} {v} {false} (upd .w1 n r‚ÇÅ v‚ÇÅ f‚ÇÅ hr x‚ÇÅ) i | no p =
  v , false , getRef-update-¬¨‚â° {w1} n v‚ÇÅ f‚ÇÅ p i , (Œª x ‚Üí x) , tt , Œª x ‚Üí x
‚äë-pres-getRef {w1} {.(cell n r‚ÇÅ (Res.c‚ÇÄ r‚ÇÅ) false ‚à∑ w1)} {name} {r} {v} {f} (new .w1 n r‚ÇÅ x) i with name ‚âü n
... | yes p rewrite p | ¬¨‚ààwdom‚ÜígetRef-nothing {n} {w1} x = ‚ä•-elim (¬¨just‚â°nothing (sym i))
... | no p = v , f , i , (Œª x ‚Üí x) , satFrozen-refl r v f , Œª x ‚Üí x


‚äë-compatibleRef : {c : Name} {w1 w2 : ùïé¬∑} {r : Res{0‚Ñì}} ‚Üí w1 ‚äë¬∑ w2 ‚Üí compatibleRef c w1 r ‚Üí compatibleRef c w2 r
‚äë-compatibleRef {c} {w1} {w2} {r} e (v , f , comp , sat , fr‚ÇÅ) =
  fst x ,
  fst (snd x) ,
  fst (snd (snd x)) ,
  fst (snd (snd (snd x))) sat ,
  snd (snd (snd (snd (snd x)))) fr‚ÇÅ
  where
    x : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí Œ£ Bool (Œª f' ‚Üí getRef c w2 ‚â° just (cell c r v' f')
                     √ó pres-resSatRef v v' r
                     √ó satFrozen r v v' f f'
                     √ó pres-freeze‚ÇÅ r v v' f f'))
    x = ‚äë-pres-getRef e comp



open import compatible(PossibleWorldsRef)(choiceRef)

compatibleREF : Compatible
compatibleREF = mkCompatible compatibleRef ‚äë-compatibleRef

open import compatibleDef(PossibleWorldsRef)(choiceRef)(compatibleREF)



getRefChoice : (n : ‚Ñï) (name : Name) (w : world) ‚Üí Maybe ‚ÑÇ¬∑
getRefChoice _ name w with getRef name w
... | just (cell _ _ v _) = just v
... | nothing = nothing



getRefChoiceCompatible : (c : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) (n : ‚Ñï) (t : ‚ÑÇ¬∑)
                        ‚Üí compatibleRef c w r ‚Üí getRefChoice n c w ‚â° just t ‚Üí ¬∑·µ£ r n t
getRefChoiceCompatible c r w n t (k , b , i , sat , fr‚ÇÅ) g rewrite i | just-inj g = sat n



-- We're really only generating numbers as choices here
T‚Üí‚ÑÇref : Term ‚Üí ‚ÑÇ¬∑
T‚Üí‚ÑÇref (NUM n) = n
T‚Üí‚ÑÇref _ = 0


getRef‚äé : (name : Name) (w : world)
           ‚Üí Œ£ Cell (Œª c ‚Üí getRef name w ‚â° just c)
              ‚äé getRef name w ‚â° nothing
getRef‚äé name w with getRef name w
... | just c = inj‚ÇÅ (c , refl)
... | nothing = inj‚ÇÇ refl


chooseREF : (cs : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑) ‚Üí ùïé¬∑
chooseREF n w c with getRef n w
... | just (cell name r v f) with Res.dec r
... |    (true , D) with Res.inv r
... |       (true , I) with D 0 c
... |          inj‚ÇÅ y = update n c f w
... |          inj‚ÇÇ y = w
chooseREF n w c | just (cell name r v f) | (true , _) | (false , _) = w
chooseREF n w c | just (cell name r v f) | (false , _) = w
chooseREF n w c | nothing = w


getRef‚Üí‚ààworld : {n name : Name} {w : ùïé¬∑} {r : Res} {v : ‚ÑÇ¬∑} {f : Bool}
                 ‚Üí getRef n w ‚â° just (cell name r v f)
                 ‚Üí ‚ààworld n r v f w
getRef‚Üí‚ààworld {n} {name} {cell name‚ÇÅ r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w} {r} {v} {f} h with n ‚âü name‚ÇÅ
... | yes p rewrite p | h | cell-inj1 (just-inj h) = refl
... | no p = getRef‚Üí‚ààworld {n} {name} {w} h



chooseREF‚äë : (cs : Name) (w : ùïé¬∑) (c : ‚ÑÇ¬∑) ‚Üí w ‚äë¬∑ chooseREF cs w c
chooseREF‚äë n w c with getRef‚äé n w
... | inj‚ÇÅ (cell name r v f , e) rewrite e with Res.dec r
... |    (true , D) with Res.inv r
... |       (true , I) with D 0 c
... |          inj‚ÇÅ y = upd w n r c f (v , f , getRef‚Üí‚ààworld {n} {name} {w} e) (inv‚Üí¬∑·µ£‚Üí‚ãÜ·µ£ {r} {c} I y)
... |          inj‚ÇÇ y = ‚äë-refl¬∑ _
chooseREF‚äë n w c | inj‚ÇÅ (cell name r v f , e) | (true , _) | (false , _ ) rewrite e = ‚äë-refl¬∑ _
chooseREF‚äë n w c | inj‚ÇÅ (cell name r v f , e) | (false , _) rewrite e = ‚äë-refl¬∑ _
chooseREF‚äë n w c | inj‚ÇÇ e rewrite e = ‚äë-refl¬∑ _


is‚ÑÇ‚ÇÄref : ‚ÑÇ¬∑ ‚Üí Bool
is‚ÑÇ‚ÇÄref 0 = true
is‚ÑÇ‚ÇÄref (suc _) = false


open import getChoice(PossibleWorldsRef)(choiceRef)(compatibleREF)

getChoiceRef : GetChoice
getChoiceRef = mkGetChoice getRefChoice T‚Üí‚ÑÇref chooseREF chooseREF‚äë
-- wdom
-- is‚ÑÇ‚ÇÄref
-- getRefChoiceCompatible

open import getChoiceDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)


progressRef : (c : Name) (w1 w2 : ùïé¬∑) ‚Üí Set‚ÇÅ
progressRef c w1 w2 =
  (r : Res) (v : ‚ÑÇ¬∑) (f : Bool)
  ‚Üí ‚ààworld c r v f w1
  ‚Üí Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí Œ£ Bool (Œª f' ‚Üí ‚ààworld c r v' f' w2 √ó satFrozen r v v' f f'))


progressRef-refl : (c : Name) (w : ùïé¬∑) ‚Üí progressRef c w w
progressRef-refl c w r v f i = v , f , i , satFrozen-refl r v f


progressRef-trans : {c : Name} {w1 w2 w3 : ùïé¬∑}
                    ‚Üí progressRef c w1 w2
                    ‚Üí progressRef c w2 w3
                    ‚Üí progressRef c w1 w3
progressRef-trans {c} {w1} {w2} {w3} p1 p2 r v f i =
  fst z2 , fst (snd z2) , fst (snd (snd z2)) , satFrozen-trans (snd (snd (snd z1))) (snd (snd (snd z2)))
  where
    z1 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí Œ£ Bool (Œª f' ‚Üí ‚ààworld c r v' f' w2 √ó satFrozen r v v' f f'))
    z1 = p1 r v f i

    z2 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí Œ£ Bool (Œª f' ‚Üí ‚ààworld c r v' f' w3 √ó satFrozen r (fst z1) v' (fst (snd (z1))) f'))
    z2 = p2 r (fst z1) (fst (snd z1)) (fst (snd (snd z1)))


ùïé‚ÜírefChain : (w : ùïé¬∑) ‚Üí chain w
ùïé‚ÜírefChain w = mkChain (Œª _ ‚Üí w) (‚äë-refl¬∑ _) Œª _ ‚Üí ‚äë-refl¬∑ _


refChainProgress : (w : ùïé¬∑) (x : Name) (n : ‚Ñï) {r : Res{0‚Ñì}}
                   ‚Üí compatibleRef x (chain.seq (ùïé‚ÜírefChain w) n) r
                   ‚Üí Œ£ ‚Ñï (Œª m ‚Üí n < m √ó progressRef x (chain.seq (ùïé‚ÜírefChain w) n) (chain.seq (ùïé‚ÜírefChain w) m))
refChainProgress w x n {r} (v , f , i , sat) = suc n , ‚â§-refl , progressRef-refl x w




open import progress(PossibleWorldsRef)(choiceRef)(compatibleREF)

progressREF : Progress
progressREF =
  mkProgress
    progressRef
    ùïé‚ÜírefChain
    refChainProgress

open import progressDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)



C0 : ‚ÑÇ¬∑
C0 = 0 --true


C1 : ‚ÑÇ¬∑
C1 = 1 --false

dec‚ÑÇ‚ÇÄref : (c : ‚ÑÇ¬∑) ‚Üí c ‚â° C0 ‚äé ¬¨ c ‚â° C0
dec‚ÑÇ‚ÇÄref c with c ‚âü 0
... | yes x rewrite x = inj‚ÇÅ refl
... | no x = inj‚ÇÇ Œª y ‚Üí x y


dec‚ÑÇ‚ÇÅref : (c : ‚ÑÇ¬∑) ‚Üí c ‚â° C1 ‚äé ¬¨ c ‚â° C1
dec‚ÑÇ‚ÇÅref c with c ‚âü 1
... | yes x rewrite x = inj‚ÇÅ refl
... | no x = inj‚ÇÇ Œª y ‚Üí x y



open import choiceExt{1‚Ñì}(PossibleWorldsRef)(choiceRef)

choiceExtRef : ChoiceExt
choiceExtRef = mkChoiceExt C0 C1 dec‚ÑÇ‚ÇÄref dec‚ÑÇ‚ÇÅref

open import choiceExtDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)




newRefChoice : (w : ùïé¬∑) ‚Üí Name
newRefChoice w = fst (freshName (wdom w ++ wnames w))


startRefChoice : (n : Name) (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
startRefChoice n r w = newCell n r w


startNewRefChoice : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí ùïé¬∑
startNewRefChoice r w = startRefChoice (newRefChoice w) r w



getRef-newCell : (w : ùïé¬∑) (name : Name) (r : Res)
                 ‚Üí getRef name (newCell name r w) ‚â° just (cell name r (Res.c‚ÇÄ r) false)
getRef-newCell w name r with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)


getRefChoice-startRefChoice : (n : ‚Ñï) (r : Res) (w : ùïé¬∑) (t : ‚ÑÇ¬∑) (name : Name)
                              ‚Üí ¬¨ name ‚àà wdom w
                              ‚Üí getRefChoice n name (startRefChoice name r w) ‚â° just t ‚Üí t ‚â° Res.c‚ÇÄ r
--                            ‚Üí getRefChoice n (newRefChoice w) (startNewRefChoice r w) ‚â° nothing
getRefChoice-startRefChoice n r w t name ni e
  rewrite getRef-newCell w name r
        | just-inj e = refl


startRefChoice‚äè : (r : Res) (w : ùïé¬∑) (name : Name) ‚Üí ¬¨ name ‚àà wdom w ‚Üí w ‚äë¬∑ startRefChoice name r w
startRefChoice‚äè r w name ni = new w name r ni



startRefChoiceCompatible : (r : Res{0‚Ñì}) (w : ùïé¬∑) (name : Name)
                         ‚Üí ¬¨ name ‚àà wdom w ‚Üí compatibleRef name (startRefChoice name r w) r
startRefChoiceCompatible r w name ni =
  Res.c‚ÇÄ r , false , getRef-newCell w name r , Res.sat‚ÇÄ r , refl



open import newChoice(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)

newChoiceRef : NewChoice
newChoiceRef =
  mkNewChoice
    wdom --newRefChoice
    wnames
    startRefChoice
    getRefChoice-startRefChoice
    startRefChoice‚äè
    startRefChoiceCompatible

open import newChoiceDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(newChoiceRef)


open import encoding3(E)


open import computation(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)(newChoiceRef)(enc)



¬¨‚àºc01 : (w : ùïé¬∑) ‚Üí ¬¨ ‚àºC! w (‚ÑÇ‚ÜíC¬∑ C0) (‚ÑÇ‚ÜíC¬∑ C1)
¬¨‚àºc01 w h = x (#compVal (‚àºC!‚Üí#‚áì {w} {‚ÑÇ‚ÜíC¬∑ C0} {‚ÑÇ‚ÜíC¬∑ C1} tt h) tt)
  where
    x : ‚ÑÇ‚ÜíC¬∑ C0 ‚â° ‚ÑÇ‚ÜíC¬∑ C1 ‚Üí ‚ä•
    x ()


‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 : T‚Üí‚ÑÇ¬∑ ‚åú C‚ÑÇ‚ÇÄ ‚åù ‚â° ‚ÑÇ‚ÇÄ¬∑
‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 = refl


‚ÑÇ‚ÜíT‚Üí‚ÑÇ1 : T‚Üí‚ÑÇ¬∑ ‚åú C‚ÑÇ‚ÇÅ ‚åù ‚â° ‚ÑÇ‚ÇÅ¬∑
‚ÑÇ‚ÜíT‚Üí‚ÑÇ1 = refl



open import choiceVal{1‚Ñì}(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)(newChoiceRef)(enc)

choiceValRef : ChoiceVal
choiceValRef = mkChoiceVal ¬¨‚àºc01 tt tt ‚ÑÇ‚ÜíT‚Üí‚ÑÇ0 ‚ÑÇ‚ÜíT‚Üí‚ÑÇ1

open import choiceValDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(getChoiceRef)(choiceExtRef)(newChoiceRef)(enc)(choiceValRef)



freezeRef : (n : Name) (w : ùïé¬∑) (v : ‚ÑÇ¬∑) ‚Üí world
freezeRef n w v = update n v true w


hasRes‚à∑ : (name : Name) (r : Res) (v : ‚ÑÇ¬∑) (f : Bool) (w : ùïé¬∑)
          ‚Üí hasRes name (cell name r v f ‚à∑ w) r
hasRes‚à∑ name r v f w with name ‚âü name
... | yes p = v , f , refl
... | no p = ‚ä•-elim (p refl)


freezableRef : (c : Name) (w : ùïé¬∑) ‚Üí Set
freezableRef c w with getRef c w
... | just (cell n r v false) = ‚ä§
... | _ = ‚ä•


{--
‚äë-freeze‚à∑ : (name : Name) (r : Res) (v‚ÇÅ v‚ÇÇ : ‚ÑÇ¬∑) (w : ùïé¬∑)
         ‚Üí ‚ãÜ·µ£ r v‚ÇÇ
         ‚Üí (cell name r v‚ÇÅ false ‚à∑ w) ‚äë¬∑ (cell name r v‚ÇÇ true ‚à∑ w)
‚äë-freeze‚à∑ name r v‚ÇÅ v‚ÇÇ w sat =
  ‚äë-trans¬∑ (upd (cell name r v‚ÇÅ false ‚à∑ w) name r v‚ÇÇ true (hasRes‚à∑ name r v‚ÇÅ false w) sat) z
  where
    z : (update name v‚ÇÇ true (cell name r v‚ÇÅ false ‚à∑ w)) ‚äë¬∑ (cell name r v‚ÇÇ true ‚à∑ w)
    z with name ‚âü name
    ... | yes p = {!!} --‚äë-refl¬∑ _
    ... | no p = ‚ä•-elim (p refl)
--}


wdom++ : (w1 w2 : ùïé¬∑) ‚Üí wdom (w1 ++ w2) ‚â° wdom w1 ++ wdom w2
wdom++ [] w2 = refl
wdom++ (x ‚à∑ w1) w2 rewrite wdom++ w1 w2 = refl


getRef++-¬¨‚àà : {name : Name} (w1 w2 : ùïé¬∑)
              ‚Üí ¬¨ name ‚àà wdom w1
              ‚Üí getRef name (w1 ++ w2) ‚â° getRef name w2
getRef++-¬¨‚àà {name} [] w2 ni = refl
getRef++-¬¨‚àà {name} (cell name‚ÇÅ r v f ‚à∑ w1) w2 ni with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p = getRef++-¬¨‚àà w1 w2 (Œª x ‚Üí ni (there x))


hasRes++-¬¨‚àà : {name : Name} (w1 w2 : ùïé¬∑) (r : Res)
              ‚Üí ¬¨ name ‚àà wdom w1
              ‚Üí hasRes name w2 r
              ‚Üí hasRes name (w1 ++ w2) r
hasRes++-¬¨‚àà {name} w1 w2 r ni hr rewrite getRef++-¬¨‚àà w1 w2 ni = hr


update++-¬¨‚àà : {name : Name} {w1 : ùïé¬∑} (w2 : ùïé¬∑) (t : ‚ÑÇ¬∑) (f : Bool)
              ‚Üí ¬¨ name ‚àà wdom w1
              ‚Üí update name t f (w1 ++ w2) ‚â° w1 ++ update name t f w2
update++-¬¨‚àà {name} {[]} w2 t f ni = refl
update++-¬¨‚àà {name} {cell name‚ÇÅ r v f‚ÇÅ ‚à∑ w1} w2 t f ni with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (ni (here refl))
... | no p rewrite update++-¬¨‚àà {name} {w1} w2 t f (Œª x ‚Üí ni (there x)) = refl


preFreezeRef‚äë : (c : Name) (w w' : ùïé¬∑) (t : ‚ÑÇ¬∑) {r : Res}
                ‚Üí compatibleRef c w r
                ‚Üí ‚ãÜ·µ£ r t
                ‚Üí ¬¨ (c ‚àà wdom w')
                ‚Üí (w' ++ w) ‚äë¬∑ (w' ++ freezeRef c w t)
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni with c ‚âü name
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | yes p
  rewrite p with ‚äébool (Res.frz r‚ÇÅ)
... | inj‚ÇÅ s rewrite s = ‚âº-refl _
... | inj‚ÇÇ s rewrite s | sym (cell-inj2 (just-inj comp)) =
  ‚äë-trans¬∑ (upd (w' ++ cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) name r‚ÇÅ t true hr' rt) e'
  where
    hr' : hasRes name (w' ++ cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) r‚ÇÅ
    hr' = hasRes++-¬¨‚àà w' (cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) r‚ÇÅ ni (hasRes‚à∑ _ _ _ _ _)

    e' : update name t true (w' ++ cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) ‚äë¬∑ (w' ++ cell name r‚ÇÅ t true ‚à∑ w)
    e' rewrite update++-¬¨‚àà {name} {w'} (cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) t true ni with name ‚âü name
    ... | yes q rewrite s = ‚äë-refl¬∑ _
    ... | no q = ‚ä•-elim (q refl)
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | yes p
  rewrite p | sym (cell-inj2 (just-inj comp))
  with ‚äébool (Res.frz r‚ÇÅ)
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | yes p | inj‚ÇÅ z
  rewrite z
  with t ‚âü Res.c‚ÇÅ r‚ÇÅ
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | yes p | inj‚ÇÅ z | yes q =
  ‚äë-trans¬∑ (upd (w' ++ cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) name r‚ÇÅ t true hr' rt) e'
  where
    hr' : hasRes name (w' ++ cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r‚ÇÅ
    hr' = hasRes++-¬¨‚àà w' (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r‚ÇÅ ni (hasRes‚à∑ _ _ _ _ _)

    e' : update name t true (w' ++ cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) ‚äë¬∑ (w' ++ cell name r‚ÇÅ t true ‚à∑ w)
    e' rewrite update++-¬¨‚àà {name} {w'} (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) t true ni with name ‚âü name
    e' | yes x with Res.frz r‚ÇÅ
    e' | yes x | true with t ‚âü Res.c‚ÇÅ r‚ÇÅ
    e' | yes x | true | yes y = ‚äë-refl¬∑ _
    e' | yes x | true | no y = ‚ä•-elim (y q)
    e' | yes x | false = ‚äë-refl¬∑ _
    e' | no x = ‚ä•-elim (x refl)
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | yes p | inj‚ÇÅ z | no q =
  ‚äë-refl¬∑ _
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | yes p | inj‚ÇÇ z
  rewrite z
  = ‚äë-trans¬∑ (upd (w' ++ cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) name r‚ÇÅ t true hr' rt) e'
  where
    hr' : hasRes name (w' ++ cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r‚ÇÅ
    hr' = hasRes++-¬¨‚àà w' (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r‚ÇÅ ni (hasRes‚à∑ _ _ _ _ _)

    e' : update name t true (w' ++ cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) ‚äë¬∑ (w' ++ cell name r‚ÇÅ t true ‚à∑ w)
    e' rewrite update++-¬¨‚àà {name} {w'} (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) t true ni with name ‚âü name
    e' | yes q with Res.frz r‚ÇÅ
    e' | yes q | true = ‚ä•-elim (true‚â†false z)
    e' | yes q | false = ‚äë-refl¬∑ _
    e' | no q = ‚ä•-elim (q refl)
preFreezeRef‚äë c (cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w) w' t {r} (v , f , comp , sat) rt ni | no p
  rewrite sym (++-assoc w' [ cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ] w)
        | sym (++-assoc w' [ cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ] (freezeRef c w t)) =
  preFreezeRef‚äë c w (w' ++ [ cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ]) t (v , f , comp , sat) rt ni'
  where
    ni' : ¬¨ c ‚àà wdom (w' ++ [ cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ])
    ni' i rewrite wdom++ w' [ cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ] with ‚àà-++‚Åª (wdom w') i
    ... | inj‚ÇÅ q = ‚ä•-elim (ni q)
    ... | inj‚ÇÇ (here q) = ‚ä•-elim (p q)


freezeRef‚äë : (c : Name) (w : ùïé¬∑) {r : Res} ‚Üí compatibleRef c w r ‚Üí w ‚äë¬∑ freezeRef c w (Res.c‚ÇÅ r)
freezeRef‚äë c w {r} comp = preFreezeRef‚äë c w [] (Res.c‚ÇÅ r) comp (Res.sat‚ÇÅ r) Œª ()


freezableStartRef : (r : Res{0‚Ñì}) (w : ùïé¬∑) ‚Üí freezableRef (newRefChoice w) (startNewRefChoice r w)
freezableStartRef r w with newRefChoice w ‚âü newRefChoice w
... | yes p = tt
... | no p = ‚ä•-elim (p refl)


progressFreeze : (r : Res) (c : Name) (w : ùïé¬∑) ‚Üí Set‚ÇÅ
progressFreeze r c w =
    (v : ‚ÑÇ¬∑) (f : Bool)
  ‚Üí ‚ààworld c r v f w
  ‚Üí Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí ‚ààworld c r v' true (freezeRef c w (Res.c‚ÇÅ r)) √ó satFrozen r v v' f true)


progressRef-freeze : (c : Name) (w : ùïé¬∑) (r : Res) ‚Üí progressFreeze r c w
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w) r v f i with c ‚âü name
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) r v f i | yes p
  rewrite p | sym (cell-inj2 (just-inj i)) | sym (cell-inj3 (just-inj i)) | sym (cell-inj4 (just-inj i))
  with Res.frz r‚ÇÅ
... |    true with name ‚âü name
... |       yes q = v‚ÇÅ , refl , Œª z ‚Üí refl , refl
... |       no q = ‚ä•-elim (q refl)
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) r v f i | yes p | false with name ‚âü name
... |       yes q = Res.c‚ÇÅ r‚ÇÅ , refl , Œª ()
... |       no q = ‚ä•-elim (q refl)
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p
  rewrite p
  with name ‚âü name
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q
  rewrite q | sym (cell-inj2 (just-inj i)) | sym (cell-inj3 (just-inj i)) | sym (cell-inj4 (just-inj i))
  with Res.frz r‚ÇÅ
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | true
  with Res.c‚ÇÅ r‚ÇÅ ‚âü Res.c‚ÇÅ r‚ÇÅ
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | true | yes z
  with name ‚âü name
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | true | yes z | yes y = Res.c‚ÇÅ r‚ÇÅ , refl , tt
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | true | yes z | no y = ‚ä•-elim (y refl)
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | true | no z = ‚ä•-elim (z refl)
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | false
  with name ‚âü name
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | false | yes y = Res.c‚ÇÅ r‚ÇÅ , refl , tt
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | yes q | false | no y = ‚ä•-elim (y refl)
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) r v f i | yes p | no q = ‚ä•-elim (q refl)
progressRef-freeze c (cell name r‚ÇÅ v‚ÇÅ f‚ÇÅ ‚à∑ w) r v f i | no p with c ‚âü name
... |   yes q rewrite q = ‚ä•-elim (p refl)
... |   no q = progressRef-freeze c w r v f i


‚äë‚ÜíprogressRef : (c : Name) {w1 w2 : ùïé¬∑} ‚Üí w1 ‚äë¬∑ w2 ‚Üí progressRef c w1 w2
‚äë‚ÜíprogressRef c {w1} {w2} e r v f i =
  fst (‚äë-pres-getRef e i) ,
  fst (snd (‚äë-pres-getRef e i)) ,
  fst (snd (snd (‚äë-pres-getRef e i))) ,
  fst (snd (snd (snd (snd (‚äë-pres-getRef e i)))))


‚ààworld-false-freezeRef-true : (c : Name) (r : Res) (v : ‚ÑÇ¬∑) (w : ùïé¬∑)
                            ‚Üí Rfrz? r
                            ‚Üí ‚ààworld c r v false w
                            ‚Üí ‚ààworld c r (Res.c‚ÇÅ r) true (freezeRef c w (Res.c‚ÇÅ r))
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ f ‚à∑ w) fr i with c ‚âü name
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ true ‚à∑ w) fr i | yes p rewrite p with name ‚âü name
... |   yes q rewrite q = ‚ä•-elim (z2 z1)
  where
    z1 : true ‚â° false
    z1 = cell-inj4 (just-inj i)

    z2 : true ‚â° false ‚Üí ‚ä•
    z2 ()
... |   no q = ‚ä•-elim (q refl)
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p
  rewrite p
  with name ‚âü name
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p | yes q
  rewrite q | cell-inj2 (just-inj i)
  with Res.frz r
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p | yes q | true
  with Res.c‚ÇÅ r ‚âü Res.c‚ÇÅ r
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p | yes q | true | yes z
 with name ‚âü name
... | yes y = refl
... | no y = ‚ä•-elim (y refl)
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p | yes q | true | no z
 with name ‚âü name
... | yes y = ‚ä•-elim (z refl)
... | no y = ‚ä•-elim (y refl)
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p | yes q | false
  with name ‚âü name
... | yes y = refl
... | no y = ‚ä•-elim (y refl)
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ false ‚à∑ w) fr i | yes p | no q = ‚ä•-elim (q refl)
‚ààworld-false-freezeRef-true c r v (cell name r‚ÇÅ v‚ÇÅ f ‚à∑ w) fr i | no p
  with c ‚âü name
... |   yes q rewrite q = ‚ä•-elim (p refl)
... |   no q = ‚ààworld-false-freezeRef-true c r v w fr i


freeze‚Üí¬¨freezable : {c : Name} {w : ùïé¬∑} {r : Res{0‚Ñì}}
                  ‚Üí compatibleRef c w r
                  ‚Üí Rfrz? r
                  ‚Üí ‚àÄùïé (freezeRef c w (Res.c‚ÇÅ r)) (Œª w' _ ‚Üí Lift 2‚Ñì (¬¨ freezableRef c w'))
freeze‚Üí¬¨freezable {c} {w} {r} (v , f , comp , sat) frz w1 e1 = lift z4
  where
    z1 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí ‚ààworld c r v' true (freezeRef c w (Res.c‚ÇÅ r)) √ó satFrozen r v v' f true)
    z1 = progressRef-freeze c w r v f comp

    z2 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí Œ£ Bool (Œª f' ‚Üí ‚ààworld c r v' f' w1 √ó satFrozen r (fst z1) v' true f'))
    z2 = ‚äë‚ÜíprogressRef c e1 r (fst z1) true (fst (snd z1))

    z3 : ‚ààworld c r (fst z1) true w1
    z3 rewrite fst (snd (snd z2))
             | fst (snd (snd (snd z2)) (Rfrz?‚Üí {r} frz))
             | sym (snd (snd (snd (snd z2)) (Rfrz?‚Üí {r} frz))) = refl

    z4 : ¬¨ freezableRef c w1
    z4 h rewrite z3 = h


--freeze‚Üí¬¨freezable c w t {r} (v , false , comp , sat) rewrite comp = {!!}


getFreezeRef-aux : (c : Name) (w : ùïé¬∑) {r : Res{0‚Ñì}}
                   ‚Üí compatibleRef c w r
                   ‚Üí Rfrz? r
                   ‚Üí freezableRef c w
                   ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freezeRef c w (Res.c‚ÇÅ r))
                                   (Œª w' _ ‚Üí Lift 2‚Ñì (getRefChoice n c w' ‚â° just (Res.c‚ÇÅ r) √ó ¬¨ freezableRef c w')))
getFreezeRef-aux c w {r} (v , true , comp , sat) frz fb rewrite comp = ‚ä•-elim fb
getFreezeRef-aux c w {r} (v , false , comp , sat) frz fb rewrite comp = 0 , aw
  where
    t : ‚ÑÇ¬∑
    t = Res.c‚ÇÅ r

    aw : ‚àÄùïé (freezeRef c w t) (Œª w' _ ‚Üí Lift 2‚Ñì (getRefChoice 0 c w' ‚â° just t √ó ¬¨ freezableRef c w'))
    aw w1 e1 = lift (z4 , z5)
      where
        z1 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí ‚ààworld c r v' true (freezeRef c w t) √ó satFrozen r v v' false true)
        z1 = progressRef-freeze c w r v false comp

        z2 : Œ£ ‚ÑÇ¬∑ (Œª v' ‚Üí Œ£ Bool (Œª f' ‚Üí ‚ààworld c r v' f' w1 √ó satFrozen r (fst z1) v' true f'))
        z2 = ‚äë‚ÜíprogressRef c e1 r (fst z1) true (fst (snd z1))

        z3 : ‚ààworld c r (fst z1) true w1
        z3 rewrite fst (snd (snd z2))
             | fst (snd (snd (snd z2)) (Rfrz?‚Üí {r} frz))
             | sym (snd (snd (snd (snd z2)) (Rfrz?‚Üí {r} frz))) = refl

        x : ‚ààworld c r (fst z1) true (freezeRef c w t) ‚Üí fst z1 ‚â° t
        x i rewrite ‚ààworld-false-freezeRef-true c r v w frz comp = sym (cell-inj3 (just-inj i))

        z4 : getRefChoice 0 c w1 ‚â° just t
        z4 rewrite z3 | x (fst (snd z1)) = refl

        z5 : ¬¨ freezableRef c w1
        z5 h rewrite z3 = h


getFreezeRef : (c : Name) (w : ùïé¬∑) {r : Res{0‚Ñì}}
               ‚Üí compatibleRef c w r
               ‚Üí Rfrz? r
               ‚Üí freezableRef c w
               ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé (freezeRef c w (Res.c‚ÇÅ r)) (Œª w' _ ‚Üí Lift 2‚Ñì (getRefChoice n c w' ‚â° just (Res.c‚ÇÅ r))))
getFreezeRef c w {r} comp frz fb =
  fst (getFreezeRef-aux c w comp frz fb) ,
  Œª w1 e1 ‚Üí lift (fst (lower (snd (getFreezeRef-aux c w comp frz fb) w1 e1)))


{--
progressFreeze‚ÜíprogressRef : {c : Name} {w1 w2 : ùïé¬∑}
                              ‚Üí progressFreeze c w1 w2
                              ‚Üí progressRef c w1 w2
progressFreeze‚ÜíprogressRef {c} {w1} {w2} p r v f i =
  fst (p r v f i) , true , snd (p r v f i)
--}


{--
freezeRefProgress : (c : Name) {w1 w2 : ùïé¬∑} (t : ‚ÑÇ¬∑) ‚Üí w1 ‚äë¬∑ w2 ‚Üí progressRef c w1 (freezeRef c w2 t)
freezeRefProgress c {w1} {w2} t e =
  progressRef-trans {c} {w1} {w2} {freezeRef c w2 t}
                    (‚äë‚ÜíprogressRef c e)
                    (progressFreeze‚ÜíprogressRef {c} {w2} {freezeRef c w2 t} (progressRef-freeze c w2 t))
--}


freezableRefDec : (c : Name) (w : ùïé¬∑) ‚Üí freezableRef c w ‚äé ¬¨ freezableRef c w
freezableRefDec c w with getRef c w
... | just (cell n r v false) = inj‚ÇÅ tt
... | just (cell n r v true) = inj‚ÇÇ (Œª ())
... | nothing = inj‚ÇÇ (Œª ())


¬¨freezableRef : (c : Name) (w : ùïé¬∑) {r : Res{0‚Ñì}}
              ‚Üí compatible¬∑ c w r
              ‚Üí Rfrz? r
              ‚Üí ¬¨ freezableRef c w
              ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift 2‚Ñì (getChoice¬∑ n c w' ‚â° just (Res.c‚ÇÅ r))))
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf
  rewrite i
  with ‚äébool (Res.frz r)
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÅ p
  rewrite p
  with v ‚âü Res.c‚ÇÅ r
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÅ p | yes q
  rewrite q = 0 , h
  where
  h : (w' : List Cell) (e : w ‚âº w') ‚Üí Lift 2‚Ñì (getRefChoice 0 c w' ‚â° just (Res.c‚ÇÅ r))
  h w' e with ‚äë-pres-getRef {w} {w'} {c} {r} {Res.c‚ÇÅ r} {true} e i
  h w' e | v' , f' , gr , presr , satf , presf
    rewrite p | gr
    with Res.c‚ÇÅ r ‚âü Res.c‚ÇÅ r
  ... | yes z = lift (‚â°just (sym (snd (satf refl))))
  ... | no z = ‚ä•-elim (z refl)
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÅ p | no q = ‚ä•-elim (true‚â†false (sym ft))
¬¨freezableRef c w {r} (v , true , i , rs , ft) frz nf | inj‚ÇÇ p rewrite p = ‚ä•-elim frz
¬¨freezableRef c w {r} (v , false , i , rs , ft) frz nf
  rewrite i = ‚ä•-elim (nf tt)


open import freeze(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)

freezeREF : Freeze
freezeREF =
  mkFreeze
    freezeRef
    freezableRef
    freezableRefDec
    freezeRef‚äë
    getFreezeRef
    freezableStartRef
    --freezeRefProgress

open import freezeDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)(freezeREF)


open import freezeExt(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)(freezeREF)

freezeExtREF : FreezeExt
freezeExtREF =
  mkFreezeExt
    ¬¨freezableRef

open import freezeExtDef(PossibleWorldsRef)(choiceRef)(compatibleREF)(progressREF)(getChoiceRef)(newChoiceRef)(freezeREF)(freezeExtREF)

\end{code}
