\begin{code}
{-# OPTIONS --rewriting #-}

module world where

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Data.List.Properties
open import calculus
\end{code}



We first postulate and define enough about worlds to interpret OpenTT
w.r.t. open bars.


\begin{code}
1‚Ñì : Level
1‚Ñì = lsuc 0‚Ñì


{--record World : Set‚ÇÅ where
  constructor mkWorld
  field
    ùïé : Set
    _‚äë_ : ùïé ‚Üí ùïé ‚Üí Set--}

restriction : Set‚ÇÅ
restriction = (n : ‚Ñï) ‚Üí Term ‚Üí Set

record cs : Set‚ÇÅ where
  constructor mkcs
  field
    name    : csName
    choices : List Term
    res     : restriction

data entry : Set‚ÇÅ where
  start  : (name : csName) (res : restriction) ‚Üí entry
  choice : (name : csName) (t : Term) ‚Üí entry

-- Worlds - entries are added at the end of the list
world : Set‚ÇÅ
world = List entry

getChoices : csName ‚Üí world ‚Üí List Term
getChoices name [] = []
getChoices name (start _ _ ‚à∑ w) = getChoices name w
getChoices name (choice n t ‚à∑ w) with name ‚âü n
... | yes p = t ‚à∑ getChoices name w
... | no p = getChoices name w

-- ‚ü®_‚ü©_‚âΩ_ guarantees that there is only one 'start' for each choice sequence
getCs : csName ‚Üí world ‚Üí Maybe cs
getCs name [] = nothing
getCs name (start n r ‚à∑ w) with name ‚âü n
... | yes p = just (mkcs name (getChoices name w) r)
... | no p = getCs name w
getCs name (choice n t ‚à∑ w) = getCs name w

wdom : world ‚Üí List csName
wdom [] = []
wdom (start name _ ‚à∑ w) = name ‚à∑ wdom w
wdom (choice _ _ ‚à∑ w) = wdom w

‚ààworld : cs ‚Üí world ‚Üí Set‚ÇÅ
‚ààworld e w = getCs (cs.name e) w ‚â° just e

newcs : world ‚Üí csName ‚Üí restriction ‚Üí world
newcs w name r = w ‚à∑ ≥ start name r

extcs : world ‚Üí csName ‚Üí Term ‚Üí world
extcs w name t = w ‚à∑ ≥ choice name t


-- w2 extends w1
data _‚âΩ_ : (w2 : world) (w1 : world) ‚Üí Set‚ÇÅ where
  extRefl : (w : world) ‚Üí w ‚âΩ w
  extTrans : {w1 w2 w3 : world} ‚Üí w3 ‚âΩ w2 ‚Üí w2 ‚âΩ w1 ‚Üí w3 ‚âΩ w1
  extChoice :
    (w : world) (name : csName) (l : List Term) (t : Term) (res : restriction)
    ‚Üí ‚ààworld (mkcs name l res) w
    ‚Üí res (length l) t
    ‚Üí (extcs w name t) ‚âΩ w
  extEntry :
    (w : world) (name : csName) (res : restriction)
    ‚Üí ¬¨ (name ‚àà wdom w) -- 'name' is not in 'w' so that we don't shadow an entry
    ‚Üí (newcs w name res) ‚âΩ w


data norepeats {A : Set} : List A ‚Üí Set where
  norepsNil : norepeats []
  norepsCons : (a : A) (l : List A) ‚Üí ¬¨ a ‚àà l ‚Üí norepeats l ‚Üí norepeats (a ‚à∑ l)

++[] : {A : Set} (l : List A) ‚Üí l ++ [] ‚â° l
++[] {A} [] = refl
++[] {A} (x ‚à∑ l) rewrite ++[] l = refl


wdom++ : (w‚ÇÅ w‚ÇÇ : world) ‚Üí wdom (w‚ÇÅ ++ w‚ÇÇ) ‚â° wdom w‚ÇÅ ++ wdom w‚ÇÇ
wdom++ [] w‚ÇÇ = refl
wdom++ (start name res ‚à∑ w‚ÇÅ) w‚ÇÇ rewrite wdom++ w‚ÇÅ w‚ÇÇ = refl
wdom++ (choice name t ‚à∑ w‚ÇÅ) w‚ÇÇ rewrite wdom++ w‚ÇÅ w‚ÇÇ = refl

wdomAddChoice : (w : world) (name : csName) (t : Term) ‚Üí wdom (w ‚à∑ ≥ choice name t) ‚â° wdom w
wdomAddChoice w name t rewrite wdom++ w [ choice name t ] rewrite ++[] (wdom w) = refl

wdomAddStart : (w : world) (name : csName) (r : restriction) ‚Üí wdom (w ‚à∑ ≥ start name r) ‚â° wdom w ‚à∑ ≥ name
wdomAddStart w name r rewrite wdom++ w [ start name r ] = refl

‚àà[1] : {A : Set} {a b : A} ‚Üí a ‚àà [ b ] ‚Üí a ‚â° b
‚àà[1] {A} {a} {b} (here px) = px

‚àà‚à∑-‚àà‚à∑ ≥ : {A : Set} {a b : A} {l : List A} ‚Üí ¬¨ b ‚àà l ‚Üí b ‚àà l ‚à∑ ≥ a ‚Üí a ‚àà b ‚à∑ l
‚àà‚à∑-‚àà‚à∑ ≥ {A} {a} {b} {l} ni i with ‚àà-++‚Åª l i
... | inj‚ÇÅ p = ‚ä•-elim (ni p)
... | inj‚ÇÇ (here p) = here (sym p)

norepeats‚à∑ ≥ : {A : Set} (l : List A) (a : A) ‚Üí norepeats l ‚Üí ¬¨ a ‚àà l ‚Üí norepeats (l ‚à∑ ≥ a)
norepeats‚à∑ ≥ {A} [] a norep ni = norepsCons a [] ni norep
norepeats‚à∑ ≥ {A} (x ‚à∑ l) a (norepsCons .x .l x‚ÇÅ norep) ni =
  norepsCons
    x (l ‚à∑ ≥ a)
    (Œª x ‚Üí ‚ä•-elim (ni (‚àà‚à∑-‚àà‚à∑ ≥ x‚ÇÅ x)))
    (norepeats‚à∑ ≥ l a norep Œª x ‚Üí ni (there x))

extwPreservesNorepeats : (w1 w2 : world) ‚Üí w2 ‚âΩ w1 ‚Üí norepeats (wdom w1) ‚Üí norepeats (wdom w2)
extwPreservesNorepeats w1 .w1 (extRefl .w1) norep = norep
extwPreservesNorepeats w1 w2 (extTrans e e‚ÇÅ) norep = extwPreservesNorepeats _ _ e (extwPreservesNorepeats _ _ e‚ÇÅ norep)
extwPreservesNorepeats w1 .(w1 ++ choice name t ‚à∑ []) (extChoice .w1 name l t res x x‚ÇÅ) norep rewrite wdomAddChoice w1 name t = norep
extwPreservesNorepeats w1 .(w1 ++ start name res ‚à∑ []) (extEntry .w1 name res x) norep rewrite wdomAddStart w1 name res =
  norepeats‚à∑ ≥ _ _ norep x

wPred : (w : world) ‚Üí Set‚ÇÇ
wPred w = (w' : world) (e : w' ‚âΩ w) ‚Üí Set‚ÇÅ

wPredDep : {w : world} (f : wPred w) ‚Üí Set‚ÇÇ
wPredDep {w} f = (w' : world) (e' : w' ‚âΩ w) (x : f w' e') ‚Üí Set‚ÇÅ

wPredExtIrr : {w : world} (f : wPred w) ‚Üí Set‚ÇÅ
wPredExtIrr {w} f = (w' : world) (e1 e2 : w' ‚âΩ w) ‚Üí f w' e1 ‚Üí f w' e2

wPredDepExtIrr : {w : world} {g : wPred w} (f : wPredDep g) ‚Üí Set‚ÇÅ
wPredDepExtIrr {w} {g} f = (w' : world) (e1 e2 : w' ‚âΩ w) (x1 : g w' e1) (x2 : g w' e2) ‚Üí f w' e1 x1 ‚Üí f w' e2 x2

-- f holds in all extensions
allW : (w : world) (f : wPred w) ‚Üí Set‚ÇÅ
allW w f = ‚àÄ (w' : world) (e : w' ‚âΩ w) ‚Üí f w' e

-- f holds in one extensions
exW : (w : world) (f : wPred w) ‚Üí Set‚ÇÅ
exW w f = Œ£ world (Œª w' ‚Üí Œ£ (w' ‚âΩ w) (Œª e ‚Üí f w' e))

exAllW : (w : world) (f : wPred w) ‚Üí Set‚ÇÅ
exAllW w f = exW w (Œª w1 e1 ‚Üí allW w1 (Œª w2 e2 ‚Üí f w2 (extTrans e2 e1)))
\end{code}


We now define part of OpenTT's syntax and postulate its operational semantics.


\begin{code}
-- similar to lookup
select : {A : Set} (n : ‚Ñï) (l : List A) ‚Üí Maybe A
select {A} n [] = nothing
select {A} 0 (x ‚à∑ l) = just x
select {A} (suc n) (x ‚à∑ l) = select n l

getChoice : (n : ‚Ñï) (name : csName) (w : world) ‚Üí Maybe Term
getChoice n name w with getCs name w
... | just (mkcs _ l _) = select n l
... | nothing = nothing

step : ‚àÄ (T : Term) (w : world) ‚Üí Maybe Term
-- VAR
step (VAR v) w = nothing
-- NAT
step NAT w = just NAT
-- QNAT
step QNAT w = just QNAT
-- LT
step (LT a b) w = just (LT a b)
-- QLT
step (QLT a b) w = just (QLT a b)
-- NUM
step (NUM n) w = just (NUM n)
-- PI
step (PI a b) w = just (PI a b)
-- LAMBDA
step (LAMBDA t) w = just (LAMBDA t)
-- APPLY
step (APPLY (CS name) (NUM n)) w = getChoice n name w
step (APPLY (CS name) t) w with step t w
... | just u = just (APPLY (CS name) u)
... | nothing = nothing
step (APPLY (LAMBDA t) u) w = just (sub u t)
step (APPLY f a) w with step f w
... | just g = just (APPLY g a)
... | nothing = nothing
-- SUM
step (SUM a b) w = just (SUM a b)
-- PAIR
step (PAIR a b) w = just (PAIR a b)
-- SPREAD
step (SPREAD a b) w = nothing -- TODO
-- SET
step (SET a b) w = just (SET a b)
-- UNION
step (UNION a b) w = just (UNION a b)
-- INL
step (INL a) w = just (INL a)
-- INR
step (INR a) w = just (INR a)
-- DECIDE
step (DECIDE a b c) w = nothing -- TODO
-- EQ
step (EQ a b c) w = just (EQ a b c)
-- AX
step AX w = just AX
-- FREE
step FREE w = just FREE
-- CS
step (CS name) w = just (CS name)
-- TSQUASH
step (TSQUASH a) w = just (TSQUASH a)
-- DUM
step (DUM a) w = just (DUM a)
-- FFDEFS
step (FFDEFS a b) w = just (FFDEFS a b)
-- UNIV
step (UNIV u) w = just (UNIV u)
-- LOWER
step (LOWER t) w = just (LOWER t)
-- LOWER
step (SHRINK t) w = just (SHRINK t)

steps : (n : ‚Ñï) (t : Term) (w : world) ‚Üí Term
steps 0 t w = t
steps (suc n) t w with step t w
... | just u = steps n u w
... | nothing = t

_‚áì_at_ : ‚àÄ (T T' : Term) (w : world) ‚Üí Set
T ‚áì T' at w = Œ£ ‚Ñï (Œª n ‚Üí steps n T w ‚â° T')
infix 30 _‚áì_at_

‚áì-refl : (T : Term) (w : world) ‚Üí T ‚áì T at w
‚áì-refl T w = (0 , refl)

-- values compute to themselves
stepVal : (a : Term) (w : world) ‚Üí isValue a ‚Üí step a w ‚â° just a
stepVal NAT w v = refl
stepVal QNAT w v = refl
stepVal (LT a b) w v = refl
stepVal (QLT a b) w v = refl
stepVal (NUM x) w v = refl
stepVal (PI a a‚ÇÅ) w v = refl
stepVal (LAMBDA a) w v = refl
stepVal (SUM a a‚ÇÅ) w v = refl
stepVal (PAIR a a‚ÇÅ) w v = refl
stepVal (SET a a‚ÇÅ) w v = refl
stepVal (UNION a a‚ÇÅ) w v = refl
stepVal (INL a) w v = refl
stepVal (INR a) w v = refl
stepVal (EQ a a‚ÇÅ a‚ÇÇ) w v = refl
stepVal AX w v = refl
stepVal FREE w v = refl
stepVal (CS x) w v = refl
stepVal (TSQUASH a) w v = refl
stepVal (DUM a) w v = refl
stepVal (FFDEFS a a‚ÇÅ) w v = refl
stepVal (UNIV x) w v = refl
stepVal (LOWER a) w v = refl
stepVal (SHRINK a) w v = refl

stepsVal : (a : Term) (w : world) (n : ‚Ñï) ‚Üí isValue a ‚Üí steps n a w ‚â° a
stepsVal a w 0 v = refl
stepsVal a w (suc n) v rewrite stepVal a w v = stepsVal a w n v

compVal : (a b : Term) (w : world) ‚Üí a ‚áì b at w ‚Üí isValue a ‚Üí a ‚â° b
compVal a b w (n , c) v rewrite stepsVal a w n v = c

postulate
  -- Howe's computational equivalence relation
  _‚àº_at_ : (T T' : Term) (w : world) ‚Üí Set
  -- ‚àº is an equivalence relation
  ‚àº-refl : {a : Term} {w : world} ‚Üí a ‚àº a at w
  ‚àº-sym : {a b : Term} {w : world} ‚Üí a ‚àº b at w ‚Üí b ‚àº a at w
  ‚àº-trans : {a b c : Term} {w : world} ‚Üí a ‚àº b at w ‚Üí b ‚àº c at w ‚Üí a ‚àº c at w
  -- states that the argument does not contain any definition or choice sequence
  nodefs : Term ‚Üí Set
infix 30 _‚àº_at_


-- T computes to T' in all extensions of w
_‚áõ_at_ : (T T' : Term) (w : world) ‚Üí Set‚ÇÅ
T ‚áõ T' at w = allW w (Œª w' _ ‚Üí Lift {0‚Ñì} 1‚Ñì (T ‚áì T' at w'))
infix 30 _‚áõ_at_

-- T computationally equivalent to T' in all extensions of w
_‚âà_at_ : (T T' : Term) (w : world) ‚Üí Set‚ÇÅ
T ‚âà T' at w = allW w (Œª w' _ ‚Üí Lift {0‚Ñì} 1‚Ñì (T ‚àº T' at w'))
infix 30 _‚âà_at_

‚âà-refl : {a : Term} {w : world} ‚Üí a ‚âà a at w
‚âà-refl {a} {w} w1 e1 = lift ‚àº-refl

‚âà-sym : {a b : Term} {w : world} ‚Üí a ‚âà b at w ‚Üí b ‚âà a at w
‚âà-sym {a} {b} {w} h w1 e1 = lift (‚àº-sym (lower (h w1 e1)))

‚âà-trans : {a b c : Term} {w : world} ‚Üí a ‚âà b at w ‚Üí b ‚âà c at w ‚Üí a ‚âà c at w
‚âà-trans {a} {b} {c} {w} h q w1 e1 = lift (‚àº-trans (lower (h w1 e1)) (lower (q w1 e1)))

‚âà-‚àº : {a b : Term} {w : world} ‚Üí a ‚âà b at w ‚Üí a ‚àº b at w
‚âà-‚àº {a} {b} {w} h = lower (h w (extRefl w))


compAllRefl : (T : Term) (w : world) ‚Üí T ‚áõ T at w
compAllRefl T w =  Œª w' e ‚Üí lift (‚áì-refl T w')

compAllVal : {a b : Term} {w : world} ‚Üí a ‚áõ b at w ‚Üí isValue a ‚Üí a ‚â° b
compAllVal {a} {b} {w} c i = let c' = c _ (extRefl w) in compVal _ _ _ (lower c') i


-- t1 and t2 compute to the same number and stay the same number in all extensions
strongMonEq : (w : world) (t1 t2 : Term) ‚Üí Set‚ÇÅ
strongMonEq w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí t1 ‚áõ (NUM n) at w √ó t2 ‚áõ (NUM n) at w)

-- t1 and t2 compute to the same number but that number can change over time
weakMonEq : (w : world) (t1 t2 : Term) ‚Üí Set‚ÇÅ
weakMonEq w t1 t2 = allW w (Œª w' _ ‚Üí Lift {0‚Ñì} 1‚Ñì (Œ£ ‚Ñï (Œª n ‚Üí t1 ‚áì (NUM n) at w' √ó t2 ‚áì (NUM n) at w')))


‚áõto-same-CS : (w : world) (t1 t2 : Term) ‚Üí Set‚ÇÅ
‚áõto-same-CS w t1 t2 = Œ£ csName (Œª n ‚Üí t1 ‚áõ (CS n) at w √ó t2 ‚áõ (CS n) at w)


<NUM-pair : (w : world) (t1 t2 : Term) ‚Üí Set
<NUM-pair w t1 t2 = Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª m ‚Üí t1 ‚áì (NUM n) at w √ó t2 ‚áì (NUM m) at w √ó n < m))


lift-<NUM-pair : (w : world) (t1 t2 : Term) ‚Üí Set‚ÇÅ
lift-<NUM-pair w t1 t2 = Lift {0‚Ñì} 1‚Ñì (<NUM-pair w t1 t2)


‚ÜëwPred : {w1 : world} (f : wPred w1) {w2 : world} (e : w2 ‚âΩ w1) ‚Üí wPred w2
‚ÜëwPred {w1} f {w2} e w' e' = f w' (extTrans e' e)


‚ÜëwPred' : {w1 : world} (f : wPred w1) {w2 : world} (e : w2 ‚âΩ w1) ‚Üí wPred w2
‚ÜëwPred' {w1} f {w2} e w' e' = (z : w' ‚âΩ w1) ‚Üí f w' z


‚ÜëwPredDep : {w1 : world} {f : wPred w1} (g : wPredDep f) {w2 : world} (e : w2 ‚âΩ w1) ‚Üí wPredDep (‚ÜëwPred f e)
‚ÜëwPredDep {w1} {f} g {w2} e w' e' z = g w' (extTrans e' e) z


‚ÜëwPredDep' : {w1 : world} {f : wPred w1} (g : wPredDep f) {w2 : world} (e : w2 ‚âΩ w1) ‚Üí wPredDep (‚ÜëwPred' f e)
‚ÜëwPredDep' {w1} {f} g {w2} e w' e' z = (x : w' ‚âΩ w1) (y : f w' x) ‚Üí g w' x y


allW-mon : {w2 w1 : world} {f :  wPred w1} (e : w2 ‚âΩ w1)
           ‚Üí allW w1 f
           ‚Üí allW w2 (‚ÜëwPred f e)
allW-mon {w2} {w1} {f} e h w' e' = h w' (extTrans e' e)


‚áõ-mon : {a b : Term} {w2 w1 : world}
           ‚Üí w2 ‚âΩ w1
           ‚Üí a ‚áõ b at w1
           ‚Üí a ‚áõ b at w2
‚áõ-mon {a} {b} {w2} {w1} ext c w' e' = c w' (extTrans e' ext)


getChoices++ : (name : csName) (w w' : world)
               ‚Üí getChoices name (w ++ w') ‚â° getChoices name w ++ getChoices name w'
getChoices++ name [] w' = refl
getChoices++ name (start name‚ÇÅ res ‚à∑ w) w' = getChoices++ name w w'
getChoices++ name (choice name‚ÇÅ t ‚à∑ w) w' with name ‚âü name‚ÇÅ
... | yes p rewrite getChoices++ name w w' = refl
... | no p = getChoices++ name w w'

just-inj : {l : Level} {A : Set l} {a b : A} ‚Üí just a ‚â° just b ‚Üí a ‚â° b
just-inj refl =  refl

mkcs-inj1 : {n1 n2 : csName} {l1 l2 : List Term} {r1 r2 : restriction} ‚Üí mkcs n1 l1 r1 ‚â° mkcs n2 l2 r2 ‚Üí n1 ‚â° n2
mkcs-inj1 refl =  refl

mkcs-inj2 : {n1 n2 : csName} {l1 l2 : List Term} {r1 r2 : restriction} ‚Üí mkcs n1 l1 r1 ‚â° mkcs n2 l2 r2 ‚Üí l1 ‚â° l2
mkcs-inj2 refl =  refl

mkcs-inj3 : {n1 n2 : csName} {l1 l2 : List Term} {r1 r2 : restriction} ‚Üí mkcs n1 l1 r1 ‚â° mkcs n2 l2 r2 ‚Üí r1 ‚â° r2
mkcs-inj3 refl =  refl

getCs++ : (name : csName) (w w' : world) (l : List Term) (r : restriction)
          ‚Üí getCs name w ‚â° just (mkcs name l r)
          ‚Üí getCs name (w ++ w') ‚â° just (mkcs name (l ++ getChoices name w') r)
getCs++ name (start name‚ÇÅ res ‚à∑ w) w' l r e with name ‚âü name‚ÇÅ
... | yes p rewrite getChoices++ name w w' rewrite mkcs-inj2 (just-inj e) rewrite mkcs-inj3 (just-inj e) = refl
... | no p = getCs++ name w w' l r e
getCs++ name (choice name‚ÇÅ t ‚à∑ w) w' l r e = getCs++ name w w' l r e

getCs++-same-choice : (name : csName) (w : world) (l : List Term) (r : restriction) (t : Term)
                      ‚Üí getCs name w ‚â° just (mkcs name l r)
                      ‚Üí getCs name (w ++ [ choice name t ]) ‚â° just (mkcs name (l ++ [ t ]) r)
getCs++-same-choice name w l r t e rewrite getCs++ name w [ choice name t ] l r e with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)

getCs++-diff-choice : (name name‚ÇÅ : csName) (w : world) (l : List Term) (r : restriction) (t : Term)
                      ‚Üí ¬¨ name ‚â° name‚ÇÅ
                      ‚Üí getCs name w ‚â° just (mkcs name l r)
                      ‚Üí getCs name (w ++ [ choice name‚ÇÅ t ]) ‚â° just (mkcs name l r)
getCs++-diff-choice name name‚ÇÅ w l r t d e rewrite getCs++ name w [ choice name‚ÇÅ t ] l r e with name ‚âü name‚ÇÅ
... | yes p = ‚ä•-elim (d p)
... | no p rewrite ++[] l = refl

‚âΩ-pres-‚ààworld : {w1 w2 : world} {name : csName} {l : List Term} {r : restriction}
                  ‚Üí w2 ‚âΩ w1
                  ‚Üí ‚ààworld (mkcs name l r) w1
                  ‚Üí Œ£ (List Term) (Œª l' ‚Üí ‚ààworld (mkcs name (l ++ l') r) w2)
‚âΩ-pres-‚ààworld {w1} {.w1} {name} {l} {r} (extRefl .w1) i =
  ([] , subst (Œª x ‚Üí ‚ààworld (mkcs name x r) w1) (sym (++[] l)) i)
‚âΩ-pres-‚ààworld {w1} {w2} {name} {l} {r} (extTrans e e‚ÇÅ) i =
  let (l1 , i1) = ‚âΩ-pres-‚ààworld e‚ÇÅ i in
  let (l2 , i2) = ‚âΩ-pres-‚ààworld e i1 in
  (l1 ++ l2 , subst (Œª x ‚Üí ‚ààworld (mkcs name x r) w2) (++-assoc l l1 l2) i2)
‚âΩ-pres-‚ààworld {w1} {.(w1 ++ choice name‚ÇÅ t ‚à∑ [])} {name} {l} {r} (extChoice .w1 name‚ÇÅ l‚ÇÅ t res x x‚ÇÅ) i with name ‚âü name‚ÇÅ
... | yes p rewrite p = ([ t ] , getCs++-same-choice name‚ÇÅ w1 l r t i)
... | no p rewrite getCs++-diff-choice name name‚ÇÅ w1 l r t p i =
  ([] , subst (Œª x ‚Üí just (mkcs name l r) ‚â° just (mkcs name x r)) (sym (++[] l)) refl)
‚âΩ-pres-‚ààworld {w1} {.(w1 ++ start name‚ÇÅ res ‚à∑ [])} {name} {l} {r} (extEntry .w1 name‚ÇÅ res x) i rewrite getCs++ name w1 [ start name‚ÇÅ res ] l r i =
  ([] , refl)


suc‚â§len‚à∑ ≥ : {A : Set} (l : List A) (a : A) (k : ‚Ñï) ‚Üí k ‚â§ length l ‚Üí suc k ‚â§ length (l ‚à∑ ≥ a)
suc‚â§len‚à∑ ≥ {A} l a k h rewrite length-++ l {[ a ]} rewrite +-comm (length l) 1 = _‚â§_.s‚â§s h

suc‚â§len++‚à∑ ≥ : {A : Set} (k : ‚Ñï) (l1 l2 : List A) (a : A)
              ‚Üí k ‚â§ length l1
              ‚Üí suc k ‚â§ length ((l1 ++ l2) ‚à∑ ≥ a)
suc‚â§len++‚à∑ ≥ {A} k l1 l2 a h = suc‚â§len‚à∑ ≥ (l1 ++ l2) a k (subst (Œª x ‚Üí k ‚â§ x) (sym (length-++ l1 {l2})) (‚â§-steps ≥ (length l2) h))

‚ààworld-extcs : (w : world) (name : csName) (l : List Term) (r : restriction) (t : Term)
               ‚Üí ‚ààworld (mkcs name l r) w
               ‚Üí ‚ààworld (mkcs name (l ‚à∑ ≥ t) r) (extcs w name t)
‚ààworld-extcs w name l r t i rewrite getCs++ name w [ choice name t ] l r i with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)

getCs++‚àâ : (name : csName) (w w' : world)
          ‚Üí getCs name w ‚â° nothing
          ‚Üí getCs name (w ++ w') ‚â° getCs name w'
getCs++‚àâ name [] w' h = refl
getCs++‚àâ name (start name‚ÇÅ res ‚à∑ w) w' h with name ‚âü name‚ÇÅ
getCs++‚àâ name (start name‚ÇÅ res ‚à∑ w) w' () | yes p
... | no p = getCs++‚àâ name w w' h
getCs++‚àâ name (choice name‚ÇÅ t ‚à∑ w) w' h = getCs++‚àâ name w w' h

‚àâ-getCs-nothing : (w : world) (name : csName) ‚Üí ¬¨ (name ‚àà (wdom w)) ‚Üí getCs name w ‚â° nothing
‚àâ-getCs-nothing [] name i = refl
‚àâ-getCs-nothing (start name‚ÇÅ res ‚à∑ w) name i with name ‚âü name‚ÇÅ
... | yes p rewrite p = ‚ä•-elim (i (here refl))
... | no p = ‚àâ-getCs-nothing w name Œª j ‚Üí i (there j)
‚àâ-getCs-nothing (choice name‚ÇÅ t ‚à∑ w) name i = ‚àâ-getCs-nothing w name i

‚ààworld-newcs : (w : world) (name : csName) (r : restriction)
               ‚Üí ¬¨ (name ‚àà (wdom w))
               ‚Üí ‚ààworld (mkcs name [] r) (newcs w name r)
‚ààworld-newcs w name r ni rewrite getCs++‚àâ name w [ start name r ] (‚àâ-getCs-nothing w name ni) with name ‚âü name
... | yes p = refl
... | no p = ‚ä•-elim (p refl)

suc-‚â¢-0 : {n : ‚Ñï} ‚Üí ¬¨ suc n ‚â° 0
suc-‚â¢-0 {n} ()

select-last : {A : Set} (l : List A) (a : A)
              ‚Üí select (length l) (l ++ [ a ]) ‚â° just a
select-last {A} [] a = refl
select-last {A} (x ‚à∑ l) a = select-last l a

getChoice-extcs-last : (w : world) (k : ‚Ñï) (name : csName) (l : List Term) (r : restriction) (t : Term)
                       ‚Üí k ‚â° length l
                       ‚Üí getCs name w ‚â° just (mkcs name l r)
                       ‚Üí getChoice k name (extcs w name t) ‚â° just t
getChoice-extcs-last w k name l r t e h rewrite e | getCs++ name w [ choice name t ] l r h with name ‚âü name
... | yes p = select-last l t
... | no p = ‚ä•-elim (p refl)

‚â§-s‚â§s-‚â° : (i k : ‚Ñï) ‚Üí i ‚â§ k ‚Üí suc k ‚â§ suc i ‚Üí k ‚â° i
‚â§-s‚â§s-‚â° i k a (_‚â§_.s‚â§s b) = ‚â§‚àß‚âÆ‚áí‚â° b (‚â§‚áí‚âØ a)

‚âΩ-Œ£getChoice : (w1 w2 : world) (name : csName) (l1 l2 : List Term) (r : restriction) (k : ‚Ñï)
               ‚Üí ‚ààworld (mkcs name l1 r) w1
               ‚Üí ‚ààworld (mkcs name l2 r) w2
               ‚Üí length l1 ‚â§ k
               ‚Üí k < length l2
               ‚Üí w2 ‚âΩ w1
               ‚Üí Œ£ Term (Œª t ‚Üí Œ£ world (Œª w ‚Üí Œ£ (List Term) (Œª l ‚Üí
                     getChoice k name (extcs w name t) ‚â° just t
                   √ó ‚ààworld (mkcs name l r) w
                   √ó k ‚â° length l
                   √ó w2 ‚âΩ (extcs w name t)
                   √ó w ‚âΩ w1
                   √ó r k t)))
‚âΩ-Œ£getChoice w1 .w1 name l1 l2 r k i1 i2 len1 len2 (extRefl .w1)
  rewrite i1 | sym (mkcs-inj2 (just-inj i2)) = ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
‚âΩ-Œ£getChoice w1 w2 name l1 l2 r k i1 i2 len1 len2 (extTrans {w1} {w3} {w2} ext ext‚ÇÅ) with ‚âΩ-pres-‚ààworld ext‚ÇÅ i1
... | (l , iw) with k <? length (l1 ++ l)
...            | yes p =
  let (t , w , l0 , h1 , h2 , h3 , h4 , h5 , h6) = ‚âΩ-Œ£getChoice w1 w3 name l1 (l1 ++ l) r k i1 iw len1 p ext‚ÇÅ in
  (t , w , l0 , h1 , h2 , h3 , extTrans ext h4 , h5 , h6)
...            | no p =
  let (t , w , l0 , h1 , h2 , h3 , h4 , h5 , h6) = ‚âΩ-Œ£getChoice w3 w2 name (l1 ++ l) l2 r k iw i2 (‚âÆ‚áí‚â• p) len2 ext in
  (t , w , l0 , h1 , h2 , h3 , h4 , extTrans h5 ext‚ÇÅ , h6)
‚âΩ-Œ£getChoice w1 .(w1 ++ choice name‚ÇÅ t ‚à∑ []) name l1 l2 r k i1 i2 len1 len2 (extChoice .w1 name‚ÇÅ l t res x x‚ÇÅ) with name ‚âü name‚ÇÅ
... | yes p rewrite p | x | sym (mkcs-inj2 (just-inj i1))
                    | sym (mkcs-inj3 (just-inj i1))
                    | getCs++ name‚ÇÅ w1 [ choice name‚ÇÅ t ] l res x
                    | sym (mkcs-inj2 (just-inj i2))
            with name‚ÇÅ ‚âü name‚ÇÅ
...         | yes q rewrite length-++ l {[ t ]} | +-comm (length l) 1 =
              let len : k ‚â° length l
                  len = ‚â§-s‚â§s-‚â° _ _ len1 len2 in
                  (t , w1 , l , getChoice-extcs-last w1 k name‚ÇÅ l res t len x ,
                    x , len , extRefl (extcs w1 name‚ÇÅ t) , extRefl w1 , subst (Œª x ‚Üí res x t) (sym len) x‚ÇÅ)
...         | no q rewrite ++[] l = ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
‚âΩ-Œ£getChoice w1 .(w1 ++ choice name‚ÇÅ t ‚à∑ []) name l1 l2 r k i1 i2 len1 len2 (extChoice .w1 name‚ÇÅ l t res x x‚ÇÅ)
    | no p rewrite getCs++ name w1 [ choice name‚ÇÅ t ] l1 r i1
           with name ‚âü name‚ÇÅ
...        | yes q = ‚ä•-elim (p q)
...        | no q rewrite ++[] l1 | sym (mkcs-inj2 (just-inj i2)) = ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
‚âΩ-Œ£getChoice w1 .(w1 ++ start name‚ÇÅ res ‚à∑ []) name l1 l2 r k i1 i2 len1 len2 (extEntry .w1 name‚ÇÅ res x) with name ‚âü name‚ÇÅ
... | yes p rewrite p | getCs++ name‚ÇÅ w1 [ start name‚ÇÅ res ] l1 r i1 | ++[] l1 | sym (mkcs-inj2 (just-inj i2)) =
  ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))
... | no p rewrite getCs++ name w1 [ start name‚ÇÅ res ] l1 r i1 | ++[] l1 | sym (mkcs-inj2 (just-inj i2)) =
  ‚ä•-elim (1+n‚â∞n (‚â§-trans len2 len1))


maybeStep : (t : Term) (w : world) ‚Üí Term
maybeStep t w with step t w
... | just u = u
... | nothing = t

stepsR : (n : ‚Ñï) (t : Term) (w : world) ‚Üí Term
stepsR 0 t w = t
stepsR (suc n) t w = maybeStep (stepsR n t w) w


step‚äé : (t : Term) (w : world) ‚Üí (Œ£ Term (Œª u ‚Üí step t w ‚â° just u)) ‚äé step t w ‚â° nothing
step‚äé t w with step t w
... | just u = inj‚ÇÅ (u , refl)
... | nothing = inj‚ÇÇ refl

steps‚â° : (n : ‚Ñï) (t : Term) (w : world) ‚Üí steps (suc n) t w ‚â° maybeStep (steps n t w) w
steps‚â° 0 t w with step t w
... | just u = refl
... | nothing = refl
steps‚â° (suc n) t w with step‚äé t w
... | inj‚ÇÅ (u , p) rewrite p | steps‚â° n u w = refl
... | inj‚ÇÇ p rewrite p | p = refl

steps‚â°stepsR : (n : ‚Ñï) (t : Term) (w : world) ‚Üí steps n t w ‚â° stepsR n t w
steps‚â°stepsR 0 t w = refl
steps‚â°stepsR (suc n) t w rewrite sym (steps‚â°stepsR n t w) | steps‚â° n t w = refl

step-APPLY-CS : (t : Term) (w : world) (k : ‚Ñï) (name : csName)
                ‚Üí getChoice k name w ‚â° just t
                ‚Üí steps 1 (APPLY (CS name) (NUM k)) w ‚â° t
step-APPLY-CS t w k name gc rewrite gc = refl

is-NUM : (t : Term) ‚Üí (Œ£ ‚Ñï (Œª n ‚Üí t ‚â° NUM n)) ‚äé ((n : ‚Ñï) ‚Üí ¬¨ t ‚â° NUM n)
is-NUM (VAR x) = inj‚ÇÇ (Œª { n () })
is-NUM NAT = inj‚ÇÇ (Œª { n () })
is-NUM QNAT = inj‚ÇÇ (Œª { n () })
is-NUM (LT t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (QLT t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (NUM x) = inj‚ÇÅ ( x , refl)
is-NUM (PI t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (LAMBDA t) = inj‚ÇÇ (Œª { n () })
is-NUM (APPLY t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (SUM t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (PAIR t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (SPREAD t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (SET t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (UNION t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (INL t) = inj‚ÇÇ (Œª { n () })
is-NUM (INR t) = inj‚ÇÇ (Œª { n () })
is-NUM (DECIDE t t‚ÇÅ t‚ÇÇ) = inj‚ÇÇ (Œª { n () })
is-NUM (EQ t t‚ÇÅ t‚ÇÇ) = inj‚ÇÇ (Œª { n () })
is-NUM AX = inj‚ÇÇ (Œª { n () })
is-NUM FREE = inj‚ÇÇ (Œª { n () })
is-NUM (CS x) = inj‚ÇÇ (Œª { n () })
is-NUM (TSQUASH t) = inj‚ÇÇ (Œª { n () })
is-NUM (DUM t) = inj‚ÇÇ (Œª { n () })
is-NUM (FFDEFS t t‚ÇÅ) = inj‚ÇÇ (Œª { n () })
is-NUM (UNIV x) = inj‚ÇÇ (Œª { n () })
is-NUM (LOWER t) = inj‚ÇÇ (Œª { n () })
is-NUM (SHRINK t) = inj‚ÇÇ (Œª { n () })

step-APPLY-CS-¬¨NUM : (name : csName) (a b : Term) (w : world)
                     ‚Üí ((n : ‚Ñï) ‚Üí ¬¨ a ‚â° NUM n)
                     ‚Üí step a w ‚â° just b
                     ‚Üí step (APPLY (CS name) a) w ‚â° just (APPLY (CS name) b)
step-APPLY-CS-¬¨NUM name NAT b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name QNAT b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LT a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (QLT a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (NUM x) b w c s rewrite sym (just-inj s) = ‚ä•-elim (c x refl)
step-APPLY-CS-¬¨NUM name (PI a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LAMBDA a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (APPLY a a‚ÇÅ) b w c s rewrite s = refl
step-APPLY-CS-¬¨NUM name (SUM a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (PAIR a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (SET a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (UNION a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (INL a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (INR a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (EQ a a‚ÇÅ a‚ÇÇ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name AX b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name FREE b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (CS x) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (TSQUASH a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (DUM a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (FFDEFS a a‚ÇÅ) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (UNIV x) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (LOWER a) b w c s rewrite sym (just-inj s) = refl
step-APPLY-CS-¬¨NUM name (SHRINK a) b w c s rewrite sym (just-inj s) = refl

Œ£-steps-APPLY-CS‚â§ : (n : ‚Ñï) (a b : Term) (w : world) (name : csName)
                 ‚Üí steps n a w ‚â° b
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) b)
Œ£-steps-APPLY-CS‚â§ 0 a b w name h rewrite h = (0 , ‚â§-refl , refl)
Œ£-steps-APPLY-CS‚â§ (suc n) a b w name h with step‚äé a w
... | inj‚ÇÅ (u , p) rewrite p with is-NUM a
...                          | inj‚ÇÅ (k , q) rewrite q | sym (just-inj p) | stepsVal (NUM k) w n tt | sym h = (0 , _‚â§_.z‚â§n , refl)
...                          | inj‚ÇÇ q = (suc m , _‚â§_.s‚â§s l , g)
  where
    ms : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) u) w ‚â° APPLY (CS name) b)
    ms = Œ£-steps-APPLY-CS‚â§ n u b w name h

    m : ‚Ñï
    m = proj‚ÇÅ ms

    l : m ‚â§ n
    l = proj‚ÇÅ (proj‚ÇÇ ms)

    s : steps m (APPLY (CS name) u) w ‚â° APPLY (CS name) b
    s = proj‚ÇÇ (proj‚ÇÇ ms)

    g : steps (suc m) (APPLY (CS name) a) w ‚â° APPLY (CS name) b
    g rewrite step-APPLY-CS-¬¨NUM name a u w q p = s
Œ£-steps-APPLY-CS‚â§ (suc n) a b w name h | inj‚ÇÇ p rewrite p | h = (0 , _‚â§_.z‚â§n , refl)

Œ£-steps-APPLY-CS : (n : ‚Ñï) (a t : Term) (w : world) (k : ‚Ñï) (name : csName)
                 ‚Üí steps n a w ‚â° NUM k
                 ‚Üí getChoice k name w ‚â° just t
                 ‚Üí Œ£ ‚Ñï (Œª m ‚Üí steps m (APPLY (CS name) a) w ‚â° t)
Œ£-steps-APPLY-CS n a t w k name h gc = (suc m , g)
  where
    ms : Œ£ ‚Ñï (Œª m ‚Üí m ‚â§ n √ó steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) (NUM k))
    ms = Œ£-steps-APPLY-CS‚â§ n a (NUM k) w name h

    m : ‚Ñï
    m = proj‚ÇÅ ms

    l : m ‚â§ n
    l = proj‚ÇÅ (proj‚ÇÇ ms)

    s : steps m (APPLY (CS name) a) w ‚â° APPLY (CS name) (NUM k)
    s = proj‚ÇÇ (proj‚ÇÇ ms)

    g : steps (suc m) (APPLY (CS name) a) w ‚â° t
    g rewrite steps‚â° m (APPLY (CS name) a) w | s | gc = refl

‚âΩ-pres-getCs : {w1 w2 : world} {name : csName} {l : List Term} {r : restriction}
                 ‚Üí w2 ‚âΩ w1
                 ‚Üí getCs name w1 ‚â° just (mkcs name l r)
                 ‚Üí Œ£ (List Term) (Œª l' ‚Üí getCs name w2 ‚â° just (mkcs name (l ++ l') r))
‚âΩ-pres-getCs {w1} {.w1} {name} {l} {r} (extRefl .w1) i =
  ([] , subst (Œª x ‚Üí getCs name w1 ‚â° just (mkcs name x r)) (sym (++[] l)) i)
‚âΩ-pres-getCs {w1} {w2} {name} {l} {r} (extTrans ext ext‚ÇÅ) i =
  let (l1 , i1) = ‚âΩ-pres-getCs ext‚ÇÅ i in
  let (l2 , i2) = ‚âΩ-pres-getCs ext i1 in
  (l1 ++ l2 , subst (Œª x ‚Üí getCs name w2 ‚â° just (mkcs name x r)) (++-assoc l l1 l2) i2)
‚âΩ-pres-getCs {w1} {.(w1 ++ choice name‚ÇÅ t ‚à∑ [])} {name} {l} {r} (extChoice .w1 name‚ÇÅ l‚ÇÅ t res x x‚ÇÅ) i with name ‚âü name‚ÇÅ
... | yes p rewrite p = ([ t ] , getCs++-same-choice name‚ÇÅ w1 l r t i)
... | no p rewrite getCs++-diff-choice name name‚ÇÅ w1 l r t p i =
  ([] , subst (Œª x ‚Üí just (mkcs name l r) ‚â° just (mkcs name x r)) (sym (++[] l)) refl)
‚âΩ-pres-getCs {w1} {.(w1 ++ start name‚ÇÅ res ‚à∑ [])} {name} {l} {r} (extEntry .w1 name‚ÇÅ res x) i rewrite getCs++ name w1 [ start name‚ÇÅ res ] l r i =
  ([] , refl)

getCs-same-name : (name : csName) (w : world) (e : cs)
                  ‚Üí getCs name w ‚â° just e
                  ‚Üí cs.name e ‚â° name
getCs-same-name name (start name‚ÇÅ res ‚à∑ w) (mkcs n l r) h with name ‚âü name‚ÇÅ
... | yes p = sym (mkcs-inj1 (just-inj h))
... | no p = getCs-same-name name w (mkcs n l r) h
getCs-same-name name (choice name‚ÇÅ t ‚à∑ w) e h = getCs-same-name name w e h

getCs‚äé : (name : csName) (w : world) ‚Üí (Œ£ cs (Œª e ‚Üí getCs name w ‚â° just e)) ‚äé getCs name w ‚â° nothing
getCs‚äé name w with getCs name w
... | just u = inj‚ÇÅ (u , refl)
... | nothing = inj‚ÇÇ refl

¬¨just‚â°nothing : {A : Set} {a : A} ‚Üí ¬¨ just a ‚â° nothing
¬¨just‚â°nothing {A} {a} ()

getChoiceŒ£ : (k : ‚Ñï) (name : csName) (w : world) (t : Term)
             ‚Üí getChoice k name w ‚â° just t
             ‚Üí Œ£ (List Term) (Œª l ‚Üí Œ£ restriction (Œª r ‚Üí getCs name w ‚â° just (mkcs name l r) √ó select k l ‚â° just t))
getChoiceŒ£ k name w t gc with getCs‚äé name w
... | inj‚ÇÅ (mkcs n l r , p) rewrite p | getCs-same-name name w (mkcs n l r) p = (l , r , refl , gc)
getChoiceŒ£ k name w t gc | inj‚ÇÇ p rewrite p = ‚ä•-elim (¬¨just‚â°nothing (sym gc))

select++-just : {A : Set} {k : ‚Ñï} {l l' : List A} {t : A}
                ‚Üí select k l ‚â° just t
                ‚Üí select k (l ++ l') ‚â° just t
select++-just {A} {0} {x ‚à∑ l} {l'} {t} sel = sel
select++-just {A} {suc k} {x ‚à∑ l} {l'} {t} sel = select++-just {A} {k} {l} {l'} sel

‚âΩ-pres-getChoice : (w2 w1 : world) (k : ‚Ñï) (name : csName) (t : Term)
                   ‚Üí w2 ‚âΩ w1
                   ‚Üí getChoice k name w1 ‚â° just t
                   ‚Üí getChoice k name w2 ‚â° just t
‚âΩ-pres-getChoice w2 w1 k name t ext gc = gc3
  where
    h : Œ£ (List Term) (Œª l ‚Üí Œ£ restriction (Œª r ‚Üí getCs name w1 ‚â° just (mkcs name l r) √ó select k l ‚â° just t))
    h = getChoiceŒ£ k name w1 t gc

    l : List Term
    l = proj‚ÇÅ h

    r : restriction
    r = proj‚ÇÅ (proj‚ÇÇ h)

    gc1 : getCs name w1 ‚â° just (mkcs name l r)
    gc1 = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ h))

    sel : select k l ‚â° just t
    sel = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ h))

    q : Œ£ (List Term) (Œª l' ‚Üí getCs name w2 ‚â° just (mkcs name (l ++ l') r))
    q = ‚âΩ-pres-getCs ext gc1

    l' : List Term
    l' = proj‚ÇÅ q

    gc2 : getCs name w2 ‚â° just (mkcs name (l ++ l') r)
    gc2 = proj‚ÇÇ q

    gc3 : getChoice k name w2 ‚â° just t
    gc3 rewrite gc2 = select++-just {Term} {k} {l} {l'} sel

‚áõ-APPLY-CS : (w : world) (name : csName) (a t : Term) (k : ‚Ñï)
              ‚Üí getChoice k name w ‚â° just t
              ‚Üí a ‚áõ NUM k at w
              ‚Üí APPLY (CS name) a ‚áõ t at w
‚áõ-APPLY-CS w name a t k gc c w1 e1 =
  let (n , c1) = lower (c w1 e1) in
  lift (Œ£-steps-APPLY-CS n a t w1 k name c1 (‚âΩ-pres-getChoice w1 w k name t e1 gc))

\end{code}
