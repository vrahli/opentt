\begin{code}
{-# OPTIONS --rewriting #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ;  _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; _‚à∏_ ; _*_ ; _^_ ; pred)
open import Data.Nat.DivMod -- using (_%_ ; _/_)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles


open import util
open import name
open import calculus


module encoding where


-- The one described here: https://engineering.purdue.edu/kak/ComputabilityComplexityLanguages/Lecture7.pdf
--pairing : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
--pairing x y = ((2 ^ x) * ((2 * y) + 1)) ‚à∏ 1


-- Cantor pairing - issue is that unpairing requires sqrt
--pairing : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
--pairing x y = (((x + y) * (x + y + 1)) / 2) + y


pairingAux : ‚Ñï ‚Üí ‚Ñï
pairingAux 0 = 0
pairingAux (suc i) = suc i + pairingAux i


-- From https://coq.inria.fr/distrib/current/stdlib/Coq.Arith.Cantor.html
pairing : ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï
pairing (x , y) = y + pairingAux (y + x)


unpairing : ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï
unpairing 0 = 0 , 0
unpairing (suc n) with unpairing n
... | suc x , y = x , suc y
... | 0 , y = suc y , 0


-- n is (pairing x y), and we want to return x
pairing‚Üíx : (n : ‚Ñï) ‚Üí ‚Ñï
pairing‚Üíx n = fst (unpairing n)


-- n is (pairing x y), and we want to return y
pairing‚Üíy : (n : ‚Ñï) ‚Üí ‚Ñï
pairing‚Üíy n = snd (unpairing n)


-- There are 4 of those! move it to utils
+0 : (n : ‚Ñï) ‚Üí n + 0 ‚â° n
+0 0 = refl
+0 (suc n) rewrite +0 n = refl


+‚â°0‚Üí : (n m : ‚Ñï) ‚Üí n + m ‚â° 0 ‚Üí n ‚â° 0 √ó m ‚â° 0
+‚â°0‚Üí 0 m h = refl , h
+‚â°0‚Üí (suc n) m ()


pairingAux‚â°0‚Üí : (x : ‚Ñï) ‚Üí pairingAux x ‚â° 0 ‚Üí x ‚â° 0
pairingAux‚â°0‚Üí 0 h = refl
pairingAux‚â°0‚Üí (suc x) ()


pairing‚â°0‚Üí : (x y : ‚Ñï) ‚Üí pairing (x , y) ‚â° 0 ‚Üí x ‚â° 0 √ó y ‚â° 0
pairing‚â°0‚Üí x 0 h = pairingAux‚â°0‚Üí _ h , refl
pairing‚â°0‚Üí x (suc y) ()


pairing-x0 : (x : ‚Ñï) ‚Üí pairing (x , 0) ‚â° pairingAux x
pairing-x0 x = refl


pairing-s0 : (x : ‚Ñï) ‚Üí pairing (suc x , 0) ‚â° suc (pairing (0 , x))
pairing-s0 x rewrite pairing-x0 (suc x) | +0 x = refl


pairing-xs : (x y : ‚Ñï) ‚Üí pairing (x , suc y) ‚â° suc (pairing (suc x , y))
pairing-xs x y rewrite sym (+-suc y x) | +-suc y x = refl


unpairing-pairing-aux : (p : ‚Ñï √ó ‚Ñï) (n : ‚Ñï) ‚Üí pairing p ‚â° n ‚Üí unpairing n ‚â° p
unpairing-pairing-aux (x , y) 0 h = ‚â°pair (sym (fst (pairing‚â°0‚Üí x y h))) (sym (snd (pairing‚â°0‚Üí x y h)))
unpairing-pairing-aux (0 , 0) (suc n) ()
unpairing-pairing-aux (suc x , 0) (suc n) h
  rewrite pairing-s0 x
        | unpairing-pairing-aux (0 , x) n (suc-injective h) = refl
unpairing-pairing-aux (x , suc y) (suc n) h
  rewrite pairing-xs x y
        | unpairing-pairing-aux (suc x , y) n (suc-injective h) = refl


unpairing-pairing : (p : ‚Ñï √ó ‚Ñï) ‚Üí unpairing (pairing p) ‚â° p
unpairing-pairing p = unpairing-pairing-aux p (pairing p) refl


pairing-inj : (p q : ‚Ñï √ó ‚Ñï) ‚Üí pairing p ‚â° pairing q ‚Üí p ‚â° q
pairing-inj p q h =
  trans (trans (sym (unpairing-pairing p)) h1) (unpairing-pairing q)
  where
    h1 : unpairing (pairing p) ‚â° unpairing (pairing q)
    h1 rewrite h = refl

unpairing‚â° : (n : ‚Ñï) ‚Üí Œ£ ‚Ñï (Œª x ‚Üí Œ£ ‚Ñï (Œª y ‚Üí unpairing n ‚â° (x , y)))
unpairing‚â° n with unpairing n
... | x , y = x , y , refl


pairing-unpairing : (n : ‚Ñï) ‚Üí pairing (unpairing n) ‚â° n
pairing-unpairing 0 = refl
pairing-unpairing (suc n) with unpairing‚â° n
... | suc x , y , p rewrite p = ‚Üís‚â°s (trans h1 (pairing-unpairing n))
  where
    h1 : y + suc (y + x + pairingAux (y + x)) ‚â° pairing (unpairing n)
    h1 rewrite p | +-suc y x = refl
... | 0 , y , p rewrite p = ‚Üís‚â°s (trans h1 (pairing-unpairing n))
  where
    h1 : y + pairingAux y ‚â° pairing (unpairing n)
    h1 rewrite p | +0 y = refl


unpairing-inj : (n m : ‚Ñï) ‚Üí unpairing n ‚â° unpairing m ‚Üí n ‚â° m
unpairing-inj n m h =
  trans (trans (sym (pairing-unpairing n)) h1) (pairing-unpairing m)
  where
    h1 : pairing (unpairing n) ‚â° pairing (unpairing m)
    h1 rewrite h = refl


pairing-spec-aux : (n x y : ‚Ñï) ‚Üí n ‚â° y + x ‚Üí pairing (x , y) * 2 ‚â° y * 2 + n * suc n
pairing-spec-aux 0 x y h rewrite fst (+‚â°0‚Üí y x (sym h)) | snd (+‚â°0‚Üí y x (sym h)) = refl
pairing-spec-aux (suc n) 0 0 ()
pairing-spec-aux (suc n) (suc x) 0 h
  rewrite *-distrib ≥-+ 2 x (pairingAux x)
        | sym (pairing-x0 x)
        | pairing-spec-aux n x 0 (suc-injective h)
        | suc-injective h
        | *-comm x 2
        | +0 x
        | *-suc x (suc x)
        | +-assoc x x (x * suc x)
  = refl
pairing-spec-aux (suc n) x (suc y) h
  rewrite *-distrib ≥-+ 2 y (suc (y + x + pairingAux (y + x)))
        | +-comm y x
        | +-assoc x y (pairingAux (x + y))
        | *-distrib ≥-+ 2 x (y + pairingAux (x + y))
        | +-comm x y
        | pairing-spec-aux n x y (suc-injective h)
        | suc-injective h
        | *-suc (y + x) (suc (y + x))
        | *-comm x 2
        | *-comm y 2
        | +0 y
        | +0 x
        | sym (+-assoc (y + x) (y + x) ((y + x) * suc (y + x)))
        | sym (+-assoc (x + x) (y + y) ((y + x) * suc (y + x)))
        | +-comm y x
        | sym (+-assoc (x + y) x y)
        | +-assoc x y x
        | +-comm y x
        | sym (+-assoc x x y)
        | sym (+-assoc (x + x) y y)
  = ‚Üís‚â°s (‚Üís‚â°s refl)


pairing-spec : (x y : ‚Ñï) ‚Üí pairing (x , y) * 2 ‚â° y * 2 + (y + x) * suc (y + x)
pairing-spec x y = pairing-spec-aux (y + x) x y refl


pairing-spec2 : (x y : ‚Ñï) ‚Üí pairing (x , y) ‚â° y + (y + x) * suc (y + x) / 2
pairing-spec2 x y = trans (sym (m*n/n‚â°m (pairing (x , y)) 2)) (trans h1 h2)
  where
    h1 : (pairing (x , y) * 2) / 2 ‚â° (y * 2 + (y + x) * suc (y + x)) / 2
    h1 rewrite sym (pairing-spec x y) = refl

    h2 : (y * 2 + (y + x) * suc (y + x)) / 2 ‚â° y + (y + x) * suc (y + x) / 2
    h2 = ? --rewrite +-distrib-/-‚à£ ≥ {y * 2} ((y + x) * suc (y + x)) {2} {!!} = {!!}


pairing-non-dec : (x y : ‚Ñï) ‚Üí y + x ‚â§ pairing (x , y)
pairing-non-dec x y rewrite pairing-spec2 x y = {!!}


-- This only converts the untyped Œª-calculus (vars, lams, apps) - everything else is mapped to 0
-- From here: https://math.stackexchange.com/questions/1315256/encode-lambda-calculus-in-arithmetic
Term‚Üí‚Ñï : Term ‚Üí ‚Ñï
Term‚Üí‚Ñï (VAR n) = 2 + (3 * n)
Term‚Üí‚Ñï (LAMBDA t) = 1 + (3 * (Term‚Üí‚Ñï t))
Term‚Üí‚Ñï (APPLY a b) = 3 * pairing (Term‚Üí‚Ñï a , Term‚Üí‚Ñï b)
Term‚Üí‚Ñï x = 0


¬¨‚â°0‚Üí1‚â§ : (n : ‚Ñï) ‚Üí ¬¨ n ‚â° 0 ‚Üí 1 ‚â§ n
¬¨‚â°0‚Üí1‚â§ 0 h = ‚ä•-elim (h refl)
¬¨‚â°0‚Üí1‚â§ (suc n) h = _‚â§_.s‚â§s _‚â§_.z‚â§n


‚Ñï‚ÜíTerm-aux : (n : ‚Ñï) ‚Üí ((m : ‚Ñï) ‚Üí m < n ‚Üí Term) ‚Üí Term
‚Ñï‚ÜíTerm-aux n ind with n ‚âü 0
... | yes p = AX -- default value
... | no p with n % 3 ‚âü 0
... | yes p‚ÇÄ = -- then it is an application
  APPLY (ind x {!!}) (ind y {!!})
  where
    m : ‚Ñï
    m = n / 3

    -- We need to extract x from the pairing m
    -- We also need to show that x < n
    x : ‚Ñï
    x = pairing‚Üíx m

    -- We need to extract y from the pairing m
    y : ‚Ñï
    y = pairing‚Üíy m
... | no p‚ÇÄ with n % 3 ‚âü 1
... |   yes p‚ÇÅ = -- then it is a lambda
  LAMBDA (ind ((n ‚à∏ 1) / 3) (<-trans ≥ (m/n‚â§m (n ‚à∏ 1) 3) (‚à∏-mono ≥-< {n} {1} {0} ‚â§-refl (¬¨‚â°0‚Üí1‚â§ n p))))
... |   no p‚ÇÅ with n % 3 ‚âü 2
... |   yes p‚ÇÅ = VAR ((n ‚à∏ 2) / 3) -- then it is a variable
... |   no p‚ÇÅ = AX -- not possible - we return a default value


‚Ñï‚ÜíTerm : ‚Ñï ‚Üí Term
‚Ñï‚ÜíTerm = <‚Ñïind (Œª _ ‚Üí Term) ‚Ñï‚ÜíTerm-aux

-- We can then add Term‚Üí‚Ñï to the computation system and encode termination as a type:
--   R n true ‚áî ‚àÉ(t:Base).Term‚Üí‚Ñï(t)=n‚àà‚Ñï‚àßterminates(t)
-- R ‚àà ‚Ñï ‚Üí ùîπ ‚Üí ‚Ñô
-- Classically R is decidable, but we don't get a function ‚àà ‚Ñï ‚Üí ùîπ
--
-- Will Term‚Üí‚Ñï(t) live in ‚Ñï? No, because for t‚ÇÅ=t‚ÇÇ‚ààBase, Term‚Üí‚Ñï(t‚ÇÅ)‚â†Term‚Üí‚Ñï(t‚ÇÇ)
-- This needs the Base and terminates(_) types.

-- https://coq.inria.fr/distrib/current/stdlib/Coq.Arith.Cantor.html
-- https://coq.discourse.group/t/bijections-between-nat-and-nat-nat/720
-- https://github.com/coq/coq/blob/110921a449fcb830ec2a1cd07e3acc32319feae6/theories/Arith/Cantor.v

\end{code}
