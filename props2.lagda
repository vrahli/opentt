\begin{code}
{-# OPTIONS --rewriting #-}

--open import bar
--module classical (bar : Bar) where

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import getChoice
open import newChoice
open import freeze
open import progress


--module props2 (bar : Bar) where
module props2 {L : Level} (W : PossibleWorlds {L})
                          (C : Choice) (G : GetChoice {L} W C) (N : NewChoice {L} W C G) (F : Freeze {L} W C G N) (P : Progress {L} W C G N F)
                          (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(G)
open import bar(W)
open import barI(W)(C)(G)(N)(F)(P)
open import theory(W)(C)(G)(N)(F)(P)(E)
open import props0(W)(C)(G)(N)(F)(P)(E)
open import ind2(W)(C)(G)(N)(F)(P)(E)

open import type_sys_props_nat(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_qnat(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_lt(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_qlt(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_free(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_pi(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_sum(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_set(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_eq(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_union(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_tsquash(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_ffdefs(W)(C)(G)(N)(F)(P)(E)
open import type_sys_props_lift(W)(C)(G)(N)(F)(P)(E)

open import props1(W)(C)(G)(N)(F)(P)(E)

-- open import calculus
-- open import world
-- open import theory (bar)
-- open import props0 (bar)
-- open import ind2 (bar) -- this is the one where a function is not recognized as terminating, but does not break the bar abstraction
-- open import type_sys_props_nat (bar)
-- open import type_sys_props_qnat (bar)
-- open import type_sys_props_lt (bar)
-- open import type_sys_props_qlt (bar)
-- open import type_sys_props_free (bar)
-- open import type_sys_props_pi (bar)
-- open import type_sys_props_sum (bar)
-- open import type_sys_props_set (bar)
-- open import type_sys_props_eq (bar)
-- open import type_sys_props_union (bar)
-- open import type_sys_props_tsquash (bar)
-- open import type_sys_props_ffdefs (bar)
-- open import props1 (bar)
-- open import terms (bar)
\end{code}




\begin{code}[hide]
eqInType-extl1 : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm}
                 (B C : CTerm)
                 (eqa1 : equalTypes i w A B) (eqa2 : equalTypes i w A C)
                 {a‚ÇÅ a‚ÇÇ : CTerm}
                 ‚Üí eqInType (uni i) w eqa1 a‚ÇÅ a‚ÇÇ
                 ‚Üí eqInType (uni i) w eqa2 a‚ÇÅ a‚ÇÇ
eqInType-extl1 {i} {w} {A} B C eqa1 eqa2 {a‚ÇÅ} {a‚ÇÇ} ei =
  TSP.extl1 (typeSysConds i w A B eqa1)
            C eqa2 a‚ÇÅ a‚ÇÇ ei


eqInType-extr1 : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm}
                 (B C : CTerm)
                 (eqa1 : equalTypes i w A B) (eqa2 : equalTypes i w C B)
                 {a‚ÇÅ a‚ÇÇ : CTerm}
                 ‚Üí eqInType (uni i) w eqa1 a‚ÇÅ a‚ÇÇ
                 ‚Üí eqInType (uni i) w eqa2 a‚ÇÅ a‚ÇÇ
eqInType-extr1 {i} {w} {A} B C eqa1 eqa2 {a‚ÇÅ} {a‚ÇÇ} ei =
  TSP.extr1 (typeSysConds i w A B eqa1)
            C eqa2 a‚ÇÅ a‚ÇÇ ei


wPredExtIrr-eqInType : {i : ‚Ñï} {w : ùïé¬∑} {A B : CTerm}
                       (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A B))
                       (a b : CTerm) ‚Üí wPredExtIrr (Œª w‚ÇÅ e ‚Üí eqInType (uni i) w‚ÇÅ (eqta w‚ÇÅ e) a b)
wPredExtIrr-eqInType {i} {w} {A} {B} eqta a b w' e1 e2 h =
  eqInType-extl1 B B (eqta w' e1) (eqta w' e2) h


wPredDepExtIrr-eqInType : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B D : CTerm0}
                          (eqtb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D)))
                          (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w‚ÇÅ e x ‚Üí eqInType (uni i) w‚ÇÅ (eqtb w‚ÇÅ e a b x) c d)
wPredDepExtIrr-eqInType {i} {w} {A} {B} {D} eqtb a b c d w' e1 e2 x1 x2 h =
  eqInType-extl1 (sub0 b D) (sub0 b D) (eqtb w' e1 a b x1) (eqtb w' e2 a b x2) h


wPredDepExtIrr-eqInType2 : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
                           (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C))
                           (eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType (uni i) w' (eqta w' e) a1 a2 ‚Üí eqTypes (uni i) w' (sub0 a1 B) (sub0 a2 D)))
                           (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w‚ÇÅ e x ‚Üí eqInType (uni i) w‚ÇÅ (eqtb w‚ÇÅ e a b x) c d)
wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta eqtb a b c d w' e1 e2 x1 x2 h =
  eqInType-extl1 (sub0 b D) (sub0 b D) (eqtb w' e1 a b x1) (eqtb w' e2 a b x2) h



equalInTypeFam‚ÜíeqTypesFam : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
                             (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C))
                             (eqtb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D)))
                             ‚Üí ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType (uni i) w' (eqta w' e) a1 a2 ‚Üí eqTypes (uni i) w' (sub0 a1 B) (sub0 a2 D))
equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb w1 e1 a‚ÇÅ a‚ÇÇ ea =
  eqtb w1 e1 a‚ÇÅ a‚ÇÇ (eqa , eqInType-extl1 C A (eqta w1 e1) eqa ea)
  where
    eqa : equalTypes i w1 A A
    eqa = TEQrefl-equalTypes i w1 A C (eqta w1 e1)



eqTypesSET‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D))
               ‚Üí equalTypes i w (#SET A B) (#SET C D)
eqTypesSET‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb =
  EQTSET A B C D (#compAllRefl (#SET A B) w) (#compAllRefl (#SET C D) w)
        eqta
        (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb)
        (wPredExtIrr-eqInType eqta)
        (wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb))



eqTypesSUM‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D))
               ‚Üí equalTypes i w (#SUM A B) (#SUM C D)
eqTypesSUM‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb =
  EQTSUM A B C D (#compAllRefl (#SUM A B) w) (#compAllRefl (#SUM C D) w)
        eqta
        (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb)
        (wPredExtIrr-eqInType eqta)
        (wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb))



eqTypesPI‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D))
               ‚Üí equalTypes i w (#PI A B) (#PI C D)
eqTypesPI‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb =
  EQTPI A B C D (#compAllRefl (#PI A B) w) (#compAllRefl (#PI C D) w)
        eqta
        (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb)
        (wPredExtIrr-eqInType eqta)
        (wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb))



eqTypesFUN‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm} {C : CTerm} {D : CTerm}
               ‚Üí equalTypes i w A C
               ‚Üí equalTypes i w B D
               ‚Üí equalTypes i w (#FUN A B) (#FUN C D)
eqTypesFUN‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb rewrite #FUN‚â°#PI A B | #FUN‚â°#PI C D =
  eqTypesPI‚Üê (eqTypes-mon (uni i) eqta) eqb
    where
      eqb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ ‚åû B ‚åü) (sub0 a‚ÇÇ ‚åû D ‚åü))
      eqb w1 e1 a‚ÇÅ a‚ÇÇ eqa rewrite sub0‚åû‚åü a‚ÇÅ B | sub0‚åû‚åü a‚ÇÇ D = eqTypes-mon (uni i) eqtb w1 e1


eqInTypeExtL1-true : {i : ‚Ñï} {w : ùïé¬∑} {A B : CTerm} (eqt : eqTypes (uni i) w A B)
                     ‚Üí eqInTypeExtL1 eqt
eqInTypeExtL1-true {i} {w} {A} {B} eqt = TSP.extl1 (typeSysConds i w A B eqt)



eqInType‚ÜíequalInType : {u : ‚Ñï} {w : ùïé¬∑} {A A1 A2 a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí A ‚â° A1
                        ‚Üí (eqt : equalTypes u w A1 A2)
                        ‚Üí equalTerms u w eqt a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType u w A a‚ÇÅ a‚ÇÇ
eqInType‚ÜíequalInType {u} {w} {A} {A1} {A2} {a‚ÇÅ} {a‚ÇÇ} e eqt eqi rewrite e =
  TEQrefl-equalTypes u w A1 A2 eqt ,
  eqInTypeExtL1-true eqt A1 (TEQrefl-equalTypes u w A1 A2 eqt) a‚ÇÅ a‚ÇÇ eqi



equalInType‚ÜíeqInType : {u : ‚Ñï} {w : ùïé¬∑} {A A1 A2 a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí A ‚â° A1
                        ‚Üí {eqt : equalTypes u w A1 A2}
                        ‚Üí equalInType u w A a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTerms u w eqt a‚ÇÅ a‚ÇÇ
equalInType‚ÜíeqInType {u} {w} {A} {A1} {A2} {a‚ÇÅ} {a‚ÇÇ} e {eqt} eqi rewrite e =
  eqInTypeExtL1-true {u} (fst eqi) A2 eqt a‚ÇÅ a‚ÇÇ (snd eqi)



‚àÄùïé-equalInType‚ÜíeqInType : {i : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                        (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A B))
                        ‚Üí ‚àÄùïé w (Œª w' e ‚Üí equalInType i w' A a b)
                        ‚Üí ‚àÄùïé w (Œª w' e ‚Üí eqInType (uni i) w' (eqta w' e) a b)
‚àÄùïé-equalInType‚ÜíeqInType {i} {w} {A} {B} {a} {b} eqta eqi w1 e1 =
  equalInType‚ÜíeqInType refl {eqta w1 e1} (eqi w1 e1)



equalInType-mon : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                  ‚Üí equalInType u w T a b
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalInType u w' T a b)
equalInType-mon {u} {w} {T} {a} {b} (eqt , eqi) w' e =
  eqTypes-mon (uni u) eqt w' e ,
  eqInType-mon (is-uni-uni u) e eqt (eqTypes-mon (uni u) eqt w' e) a b eqi



equalInType-refl : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                   ‚Üí equalInType u w T a b
                   ‚Üí equalInType u w T a a
equalInType-refl {u} {w} {T} {a} {b} eqi =
  EQTtrans-equalInType u w T a b a eqi (EQTsym-equalInType u w T a b eqi)



equalInType-sym : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                  ‚Üí equalInType u w T a b
                  ‚Üí equalInType u w T b a
equalInType-sym {u} {w} {T} {a} {b} eqi = EQTsym-equalInType u w T a b eqi



eqTypesEQ‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {a1 a2 b1 b2 A B : CTerm}
               ‚Üí equalTypes i w A B
               ‚Üí equalInType i w A a1 b1
               ‚Üí equalInType i w A a2 b2
               ‚Üí equalTypes i w (#EQ a1 a2 A) (#EQ b1 b2 B)
eqTypesEQ‚Üê {w} {i} {a1} {a2} {b1} {b2} {A} {B} eqtA eqt1 eqt2 =
  EQTEQ a1 b1 a2 b2 A B (#compAllRefl (#EQ a1 a2 A) w) (#compAllRefl (#EQ b1 b2 B) w)
        (eqTypes-mon (uni i) eqtA) (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqtA))
        (‚àÄùïé-equalInType‚ÜíeqInType (eqTypes-mon (uni i) eqtA) (equalInType-mon eqt1))
        (‚àÄùïé-equalInType‚ÜíeqInType (eqTypes-mon (uni i) eqtA) (equalInType-mon eqt2))


eqTypesFUN‚Üí‚ÇÅ : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm} {C : CTerm} {D : CTerm}
               ‚Üí equalTypes i w (#FUN A B) (#FUN C D)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
{-# TERMINATING #-}
--{-# INLINE ‚àÄùïé-inOpenBarFunc #-}
--{-# INLINE ‚ÜëinOpenBar #-}
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTNAT x x‚ÇÅ) = ‚ä•-elim (PIneqNAT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTQNAT x x‚ÇÅ) = ‚ä•-elim (PIneqQNAT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (PIneqLT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (PIneqQLT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTFREE x x‚ÇÅ) = ‚ä•-elim (PIneqFREE (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb)
  rewrite #FUN/PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)
        | #FUN/PIinj2 {A} {B} {A1} {B1} (#compAllVal x tt)
        | #FUN/PIinj1 {C} {D} {A2} {B2} (#compAllVal x‚ÇÅ tt)
        | #FUN/PIinj2 {C} {D} {A2} {B2} (#compAllVal x‚ÇÅ tt)
  = eqta

eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (PIneqSUM (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (PIneqSET (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2) = ‚ä•-elim (PIneqEQ (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = ‚ä•-elim (PIneqUNION (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqTSQUASH (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) = ‚ä•-elim (PIneqFFDEFS (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTUNIV m p c‚ÇÅ c‚ÇÇ) = ‚ä•-elim (PIneqUNIV (compAllVal c‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqLIFT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTBAR x) w' e' =
  EQTBAR (Bar.‚àÄùïé-inBarFunc barI aw (Bar.‚ÜëinBar barI x e'))
-- (a) This does not work
-- EQTBAR (‚àÄùïé-inOpenBarFunc aw (‚ÜëinOpenBar x e'))
-- (b) Unfolding and reducing works though:
-- EQTBAR (Œª w1 e1 ‚Üí fst (x w1 (‚äë-trans¬∑ e' e1)) ,
--                     fst (snd (x w1 (‚äë-trans¬∑ e' e1))) ,
--                     Œª w3 e3 z ‚Üí aw w3 z (snd (snd (x w1 (‚äë-trans¬∑ e' e1))) w3 e3 (‚äë-trans¬∑ e' z)))
  where
    aw : ‚àÄùïé w' (Œª w1 e1 ‚Üí eqTypes (uni i) w1 (#FUN A B) (#FUN C D) ‚Üí equalTypes i w1 A C)
    aw w1 e1 eqt = eqTypesFUN‚Üí‚ÇÅ eqt w1 (‚äë-refl¬∑ w1)



eqTypesNEG‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
               ‚Üí equalTypes i w (#NEG A) (#NEG B)
               ‚Üí equalTypes i w A B
eqTypesNEG‚Üí {w} {i} {A} {B} eqt rewrite #NEG‚â°#FUN A | #NEG‚â°#FUN B = eqTypesFUN‚Üí‚ÇÅ eqt w (‚äë-refl¬∑ w)


eqTypesNAT : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #NAT #NAT
eqTypesNAT {w} {i} = EQTNAT (#compAllRefl #NAT w) (#compAllRefl #NAT w)


eqTypesQNAT : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #QNAT #QNAT
eqTypesQNAT {w} {i} = EQTQNAT (#compAllRefl #QNAT w) (#compAllRefl #QNAT w)




#strongMonEq-#N0 : (w : ùïé¬∑) ‚Üí #strongMonEq w #N0 #N0
#strongMonEq-#N0 w = #strongMonEq-#NUM w 0


#strongMonEq-#N1 : (w : ùïé¬∑) ‚Üí #strongMonEq w #N1 #N1
#strongMonEq-#N1 w = #strongMonEq-#NUM w 1


‚ÜíequalInType-NAT : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí inbar w (Œª w' _ ‚Üí #strongMonEq w' a b)
                    ‚Üí equalInType i w #NAT a b
‚ÜíequalInType-NAT i w a b j = eqTypesNAT , j


equalInType-NAT‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí equalInType i w #NAT a b
                    ‚Üí inbar w (Œª w' _ ‚Üí #strongMonEq w' a b)
equalInType-NAT‚Üí i w a b (eqt , eqi) =
  eqInType-‚áõ-NAT (uni i) w #NAT #NAT a b (#compAllRefl #NAT w) (#compAllRefl #NAT w) eqt eqi


‚ÜíequalInType-QNAT : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí inbar w (Œª w' _ ‚Üí #weakMonEq w' a b)
                    ‚Üí equalInType i w #QNAT a b
‚ÜíequalInType-QNAT i w a b j = eqTypesQNAT , j



equalInType-QNAT‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                     ‚Üí equalInType i w #QNAT a b
                     ‚Üí inbar w (Œª w' _ ‚Üí #weakMonEq w' a b)
equalInType-QNAT‚Üí i w a b (eqt , eqi) =
  eqInType-‚áõ-QNAT (uni i) w #QNAT #QNAT a b (#compAllRefl #QNAT w) (#compAllRefl #QNAT w) eqt eqi



NUM-equalInType-NAT : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #NAT (#NUM k) (#NUM k)
NUM-equalInType-NAT i w k = eqTypesNAT , Bar.‚àÄùïé-inBar barI (Œª w' e' ‚Üí #strongMonEq-#NUM w' k)


NUM-equalInType-QNAT : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #QNAT (#NUM k) (#NUM k)
NUM-equalInType-QNAT i w k = eqTypesQNAT , Bar.‚àÄùïé-inBar barI (Œª w' e' ‚Üí #weakMonEq-#NUM w' k)


equalInTypeN0 : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType i w #NAT #N0 #N0
equalInTypeN0 i w = NUM-equalInType-NAT i w 0


equalInTypeN1 : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType i w #NAT #N1 #N1
equalInTypeN1 i w = NUM-equalInType-NAT i w 1


eqTypesFALSE : {w : ùïé¬∑} {i : ‚Ñï}
               ‚Üí equalTypes i w #FALSE #FALSE
eqTypesFALSE {w} {i} rewrite #FALSE‚â°#EQ =
  eqTypesEQ‚Üê
    eqTypesNAT
    (equalInTypeN0 i w)
    (equalInTypeN1 i w)


eqTypesNEG‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
               ‚Üí equalTypes i w A B
               ‚Üí equalTypes i w (#NEG A) (#NEG B)
eqTypesNEG‚Üê {w} {i} {A} {B} eqt rewrite #NEG‚â°#FUN A | #NEG‚â°#FUN B =
  eqTypesFUN‚Üê eqt eqTypesFALSE


eqTypesUniv : (w : ùïé¬∑) (n i : ‚Ñï) (p : i < n) ‚Üí equalTypes n w (#UNIV i) (#UNIV i)
eqTypesUniv w n i p = EQTUNIV i p (compAllRefl (UNIV i) w) (compAllRefl (UNIV i) w)



‚àÄùïé-inbar-#strongMonEq-#N0 : (w : ùïé¬∑) ‚Üí ‚àÄùïé w (Œª w' e ‚Üí inbar w' (Œª w'' _ ‚Üí #strongMonEq w'' #N0 #N0))
‚àÄùïé-inbar-#strongMonEq-#N0 w w1 e1 = Bar.‚àÄùïé-inBar barI (Œª w2 e2 ‚Üí #strongMonEq-#N0 w2)


eqTypesTRUE : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #TRUE #TRUE
eqTypesTRUE {w} {i} =
  EQTEQ #N0 #N0 #N0 #N0 #NAT #NAT
        (#compAllRefl #TRUE w) (#compAllRefl #TRUE w)
        (eqTypes-mon (uni i) eqTypesNAT)
        (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqTypesNAT))
        (‚àÄùïé-inbar-#strongMonEq-#N0 w)
        (‚àÄùïé-inbar-#strongMonEq-#N0 w)





eqTypesSQUASH‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w (#SQUASH A) (#SQUASH B)
eqTypesSQUASH‚Üê {w} {i} {A} {B} eqt rewrite #SQUASH‚â°#SET A | #SQUASH‚â°#SET B = eqt1
  where
    eqb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #TRUE a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ ‚åû A ‚åü) (sub0 a‚ÇÇ ‚åû B ‚åü))
    eqb w1 e1 a‚ÇÅ a‚ÇÇ eqa rewrite sub0‚åû‚åü a‚ÇÅ A | sub0‚åû‚åü a‚ÇÇ B = eqTypes-mon (uni i) eqt w1 e1

    eqt1 : equalTypes i w (#SET #TRUE ‚åû A ‚åü) (#SET #TRUE ‚åû B ‚åü)
    eqt1 = eqTypesSET‚Üê (eqTypes-mon (uni i) eqTypesTRUE) eqb


eqTypesUNION‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B C D : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w C D
                  ‚Üí equalTypes i w (#UNION A C) (#UNION B D)
eqTypesUNION‚Üê {w} {i} {A} {B} {C} {D} eqt1 eqt2 =
  EQTUNION A C B D (#compAllRefl (#UNION A C) w) (#compAllRefl (#UNION B D) w)
           (eqTypes-mon (uni i) eqt1) (eqTypes-mon (uni i) eqt2)
           (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqt1))
           (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqt2))


equalInType‚ÜíequalTypes-aux : (n i : ‚Ñï) (p : i < n) (w : ùïé¬∑) (a b : CTerm)
                              ‚Üí equalInType n w (#UNIV i) a b
                              ‚Üí equalTypes i w a b
equalInType‚ÜíequalTypes-aux n i p w a b (eqt , eqi) =
  EQTBAR (eqInType-‚áõ-UNIV i n p w (#UNIV i) (#UNIV i) a b (compAllRefl (UNIV i) w) (compAllRefl (UNIV i) w) eqt eqi)



{--
equalTypes<s : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
              ‚Üí equalTypes i w a b
              ‚Üí equalTypes (suc i) w a b
equalTypes<s i w a b (EQTNAT x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTQNAT x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = {!!}
equalTypes<s i w a b (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = {!!}
equalTypes<s i w a b (EQTFREE x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTPI A1 B1 A2 B2 x x‚ÇÅ
        (Œª w' e' ‚Üí equalTypes<s i w' A1 A2 (eqta w' e'))
        (Œª w' e' a‚ÇÅ a‚ÇÇ ea ‚Üí {!!})
        {!!} {!!}
equalTypes<s i w a b (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = {!!}
equalTypes<s i w a b (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = {!!}
equalTypes<s i w a b (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2) = {!!}
equalTypes<s i w a b (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = {!!}
equalTypes<s i w a b (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) = {!!}
equalTypes<s i w a b (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) = {!!}
equalTypes<s i w a b (EQTUNIV i‚ÇÅ p x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTBAR x) = {!!}
--}



‚â°univ‚ÜíeqTypes : {u : univs} {n : ‚Ñï} ‚Üí u ‚â° uni n ‚Üí {w : ùïé¬∑} {A B : CTerm}
                 ‚Üí eqTypes (uni n) w A B
                 ‚Üí eqTypes u w A B
‚â°univ‚ÜíeqTypes {u} {n} e {w} {A} {B} eqt rewrite e = eqt



equalTypes-LIFT : (n : ‚Ñï) (w : ùïé¬∑) (u v a b : CTerm)
                  ‚Üí u #‚áõ #LIFT a at w
                  ‚Üí v #‚áõ #LIFT b at w
                  ‚Üí equalTypes n w a b
                  ‚Üí equalTypes (suc n) w u v
equalTypes-LIFT n w u v a b c‚ÇÅ c‚ÇÇ eqt =
  EQTLIFT a b
          c‚ÇÅ c‚ÇÇ
          eqta
          exta
  where
    eqta0 : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes n w' a b)
    eqta0 w' e' = eqTypes-mon (uni n) {a} {b} eqt w' e'

    eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes (‚ÜìU (uni (suc n))) w' a b)
    eqta w' e' = ‚â°univ‚ÜíeqTypes (‚ÜìU-uni (suc n)) (eqta0 w' e')

    exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType (‚ÜìU (uni (suc n))) w (eqta w e) a b)
    exta rewrite ‚ÜìU-uni (suc n) = wPredExtIrr-eqInType eqta0



equalTypes-LIFT2 : (n : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí equalTypes n w a b
                   ‚Üí equalTypes (suc n) w (#LIFT a) (#LIFT b)
equalTypes-LIFT2 n w a b eqt =
  equalTypes-LIFT n w (#LIFT a) (#LIFT b) a b
                  (#compAllRefl (#LIFT a) w) (#compAllRefl (#LIFT b) w)
                  eqt



uniUpTo‚Üísuc : {n m : ‚Ñï} (q : m < n) ‚Üí uniUpTo n m q ‚â° uniUpTo (suc n) m (<-trans q (n<1+n n))
uniUpTo‚Üísuc {n} {m} q with m <? n
... | yes z = ‚â°uniUpTo n m q z
... | no z = ‚ä•-elim (z q)



equalTypes< : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (a b : CTerm)
              ‚Üí equalTypes i w a b
              ‚Üí equalTypes n w (#‚ÜëT p a) (#‚ÜëT p b)
equalTypes< {suc n} {i} p w a b eqt = equalTypes-LIFT n w (#‚ÜëT p a) (#‚ÜëT p b) (#‚ÜëTs p a) (#‚ÜëTs p b) (‚â°‚Üí#compAllRefl w (#‚ÜëT‚â°#‚ÜëTs p a)) (‚â°‚Üí#compAllRefl w (#‚ÜëT‚â°#‚ÜëTs p b)) eqt'
  where
    eqt' : equalTypes n w (#‚ÜëTs p a) (#‚ÜëTs p b)
    eqt' with i <? n
    ... | yes q = equalTypes< {n} {i} q w a b eqt
    ... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = eqt



equalInType‚ÜíequalTypes : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (a b : CTerm)
                          ‚Üí equalInType n w (#UNIV i) a b
                          ‚Üí equalTypes n w (#‚ÜëT p a) (#‚ÜëT p b)
equalInType‚ÜíequalTypes {n} {i} p w a b eqi = equalTypes< {n} {i} p w a b (equalInType‚ÜíequalTypes-aux n i p w a b eqi)



equalInType-PI : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
                 ‚Üí equalInType u w (#PI A B) f g
equalInType-PI {u} {w} {A} {B} {f} {g} ha hb eqi =
  eqTypesPI‚Üê ha hb ,
  Bar.‚àÄùïé-inBar barI aw
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí PIeq (eqInType (uni u) w' (ha w' e))
                               (Œª a1 a2 ea ‚Üí eqInType (uni u) w' (hb w' e a1 a2 (TEQrefl-equalTypes u w' A A (ha w' e) , eqInType-extl1 A A (ha w' e) (TEQrefl-equalTypes u w' A A (ha w' e)) ea)))
--                               (Œª a1 a2 ea ‚Üí eqInType (uni u) w' (eqTypesPI‚Üê.eqtb' w' e a1 a2 ea))
                               f g)
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = eqInType-extl1 {u} {w1} {sub0 a‚ÇÅ B}
                                       (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B)
                                       (fst (eqi w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 , ea)))
                                       (hb w1 e1 a‚ÇÅ a‚ÇÇ (TEQrefl-equalTypes u w1 A A (ha w1 e1) , eqInType-extl1 A A (ha w1 e1) (TEQrefl-equalTypes u w1 A A (ha w1 e1)) ea))
                                       (snd (eqi w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 , ea)))



equalInType-FUN : {u : ‚Ñï} {w : ùïé¬∑} {A B f g : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' B)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' B (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
                  ‚Üí equalInType u w (#FUN A B) f g
equalInType-FUN {u} {w} {A} {B} {f} {g} ha hb i rewrite #FUN‚â°#PI A B =
  equalInType-PI ha hb' eqi'
  where
    hb' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ ‚åû B ‚åü) (sub0 a‚ÇÇ ‚åû B ‚åü))
    hb' w1 e1 a‚ÇÅ a‚ÇÇ ea rewrite sub0‚åû‚åü a‚ÇÅ B | sub0‚åû‚åü a‚ÇÇ B = hb w1 e1

    eqi' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ ‚åû B ‚åü) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqi' w1 e1 a‚ÇÅ a‚ÇÇ ea rewrite sub0‚åû‚åü a‚ÇÅ B = i w1 e1 a‚ÇÅ a‚ÇÇ ea



{--‚ÜíequalInTypeFALSE : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                     ‚Üí inbar w (Œª w' e' ‚Üí Lift {0‚Ñì} 1‚Ñì ‚ä•)
                     ‚Üí equalInType u w #FALSE a b
‚ÜíequalInTypeFALSE u w a b i =
  eqTypesFALSE {w} {u} ,
  Bar.‚àÄùïé-inBar barI aw
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí EQeq #N0 #N1 (Œª t1 t2 ‚Üí inbar w' (Œª w'' _ ‚Üí #strongMonEq w'' t1 t2)) w' a b)
    aw w1 e1 = {!!}
--}



equalInType-NEG : {u : ‚Ñï} {w : ùïé¬∑} {A f g : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType u w' A a‚ÇÅ a‚ÇÇ)
                  ‚Üí equalInType u w (#NEG A) f g
equalInType-NEG {u} {w} {A} {f} {g} ha i rewrite #NEG‚â°#FUN A =
  equalInType-FUN ha (Œª w1 e1 ‚Üí eqTypesFALSE) eqi
  where
    eqi : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' #FALSE (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqi w1 e1 a‚ÇÅ a‚ÇÇ ea = ‚ä•-elim (i w1 e1 a‚ÇÅ a‚ÇÇ ea)


‚â°CTerm‚ÜíeqTypes : {u : univs} {w : ùïé¬∑} {A B C D : CTerm}
                  ‚Üí A ‚â° C
                  ‚Üí B ‚â° D
                  ‚Üí eqTypes u w A B
                  ‚Üí eqTypes u w C D
‚â°CTerm‚ÜíeqTypes {u} {w} {A} {B} {C} {D} e f z rewrite e | f = z


‚â°CTerm‚ÜíequalInType : {u : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                      ‚Üí A ‚â° B
                      ‚Üí equalInType u w A a b
                      ‚Üí equalInType u w B a b
‚â°CTerm‚ÜíequalInType {u} {w} {A} {B} {a} {b} e z rewrite e = z



equalInType-local : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                    ‚Üí inbar w (Œª w' _ ‚Üí equalInType u w' T a b)
                    ‚Üí equalInType u w T a b
equalInType-local {u} {w} {T} {a} {b} i =
  EQTBAR (Bar.‚àÄùïé-inBarFunc barI aw i) , eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí equalInType u w' T a b ‚Üí isType u w' T)
    aw w1 e1 ei = fst ei

    aw' : ‚àÄùïé w (Œª w' e' ‚Üí (x : equalInType u w' T a b) {--‚Üí atbar i w' e' x--} ‚Üí equalTerms u w' (fst x) a b)
    aw' w1 e1 x {--at--} = equalInType‚ÜíeqInType refl {fst x} x


    aw'' : ‚àÄùïé w (Œª w' e' ‚Üí (x : equalInType u w' T a b) (y : isType u w' T)
                          ‚Üí equalTerms u w' (fst x) a b
                          ‚Üí equalTerms u w' y a b)
    aw'' w1 e1 x y ei = eqInType-extl1 T T (fst x) y ei

    eqi : equalTerms u w (EQTBAR (Bar.‚àÄùïé-inBarFunc barI aw i)) a b
    eqi = Bar.inBar'-change barI i (Bar.‚àÄùïé-inBarFunc barI aw i) aw'' (Bar.‚àÄùïé-inBar-inBar' barI i aw')

-- Used to go through with just??? Bar.‚àÄùïé-inBar-inBar' barI i aw'


equalInType-LIFT‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (T a b : CTerm)
                     ‚Üí equalInType (suc n) w (#LIFT T) a b
                     ‚Üí equalInType n w T a b
{-# TERMINATING #-}
equalInType-LIFT‚Üí n w T a b (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqNAT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (LIFTneqLT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (LIFTneqQLT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqFREE (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqPI (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqSUM (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqSET (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (LIFTneqEQ (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (LIFTneqUNION (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (LIFTneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (LIFTneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi)
  rewrite #LIFTinj {A1} {T} (sym (#compAllVal x tt))
        | #LIFTinj {A2} {T} (sym (#compAllVal x‚ÇÅ tt))
        | ‚ÜìU-uni (suc n) =
  equalInType-local (Bar.‚àÄùïé-inBarFunc barI (Œª w' e' z ‚Üí eqInType‚ÜíequalInType refl (eqtA w' e') z) eqi)
equalInType-LIFT‚Üí n w T a b (EQTBAR x , eqi) =
  equalInType-local (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi)
    where
      aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni (suc n)) w' (#LIFT T) (#LIFT T))
                          {--‚Üí (at : atbar x w' e' z)--}
                          ‚Üí equalTerms (suc n) w' z a b
                          ‚Üí equalInType n w' T a b)
      aw w' e' z {--at--} j = equalInType-LIFT‚Üí n w' T a b (z , j)



‚ÜëT# : {i n : ‚Ñï} (p : i < n) (t : CTerm) ‚Üí CTerm
‚ÜëT# {i} {suc n} p t with i <? n
... | yes q = #LIFT (‚ÜëT# q t)
... | no q = #LIFT t -- i ‚â° n


‚ÜëT‚â°‚ÜëT# : {i n : ‚Ñï} (p : i < n) (t : CTerm) ‚Üí ‚ÜëT p ‚åú t ‚åù ‚â° ‚åú ‚ÜëT# p t ‚åù
‚ÜëT‚â°‚ÜëT# {i} {suc n} p t with i <? n
... | yes q rewrite ‚ÜëT‚â°‚ÜëT# q t = refl
... | no q = refl



#‚ÜëT‚â°‚ÜëT# : {i n : ‚Ñï} (p : i < n) (t : CTerm) ‚Üí #‚ÜëT p t ‚â° ‚ÜëT# p t
#‚ÜëT‚â°‚ÜëT# {i} {n} p t = CTerm‚â° (‚ÜëT‚â°‚ÜëT# p t)



equalInType-‚ÜëT#‚Üí : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType n w (‚ÜëT# p T) a b
                    ‚Üí equalInType i w T a b
equalInType-‚ÜëT#‚Üí {suc n} {i} p w T a b eqi with i <? n
... | yes q = equalInType-‚ÜëT#‚Üí q w T a b (equalInType-LIFT‚Üí n w (‚ÜëT# q T) a b eqi)
... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = equalInType-LIFT‚Üí n w T a b eqi



equalInType-#‚ÜëT‚Üí : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType n w (#‚ÜëT p T) a b
                    ‚Üí equalInType i w T a b
equalInType-#‚ÜëT‚Üí {suc n} {i} p w T a b eqi rewrite #‚ÜëT‚â°‚ÜëT# p T = equalInType-‚ÜëT#‚Üí p w T a b eqi



isFam : (u : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (F G : CTerm ‚Üí CTerm) ‚Üí Set(lsuc(L))
isFam u w A B F G =
    isType u w A
  √ó ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
  √ó ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (F a‚ÇÅ) (G a‚ÇÇ))



eqTypes-local : {u : univs} {w : ùïé¬∑} {A B : CTerm}
                ‚Üí inbar w (Œª w' _ ‚Üí eqTypes u w' A B)
                ‚Üí eqTypes u w A B
eqTypes-local {u} {w} {A} {B} i =
  EQTBAR i


isFam-local : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {F G : CTerm ‚Üí CTerm}
              ‚Üí inbar w (Œª w' _ ‚Üí isFam u w' A B F G)
              ‚Üí isFam u w A B F G
isFam-local {u} {w} {A} {B} {F} {G} i =
  p1 , p2 , p3
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí isFam u w' A B F G ‚Üí eqTypes (uni u) w' A A)
    aw1 w' e' j = fst j

    p1 : isType u w A
    p1 = eqTypes-local (Bar.‚àÄùïé-inBarFunc barI aw1 i)

    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
    p2 w' e' a‚ÇÅ a‚ÇÇ eqi =
      eqTypes-local (Bar.‚àÄùïé-inBarFunc barI aw2 (Bar.‚ÜëinBar barI i e'))
      where
        aw2 : ‚àÄùïé w' (Œª w' _ ‚Üí isFam u w' A B F G ‚Üí eqTypes (uni u) w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
        aw2 w'' e'' j = proj‚ÇÅ (snd j) w'' (‚äë-refl¬∑ w'') a‚ÇÅ a‚ÇÇ (equalInType-mon eqi w'' e'')


    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (F a‚ÇÅ) (G a‚ÇÇ))
    p3 w' e' a‚ÇÅ a‚ÇÇ eqi =
      equalInType-local (Bar.‚àÄùïé-inBarFunc barI aw3 (Bar.‚ÜëinBar barI i e'))
      where
        aw3 : ‚àÄùïé w' (Œª w'' e'' ‚Üí ‚ÜëwPred (Œª w''' e ‚Üí isFam u w''' A B F G) e' w'' e'' ‚Üí equalInType u w'' (sub0 a‚ÇÅ B) (F a‚ÇÅ) (G a‚ÇÇ))
        aw3 w'' e'' j = snd (snd j) w'' (‚äë-refl¬∑ w'') a‚ÇÅ a‚ÇÇ (equalInType-mon eqi w'' e'')


equalInType-PI‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                   ‚Üí equalInType u w (#PI A B) f g
                   ‚Üí isFam u w A B (#APPLY f) (#APPLY g)
{-# TERMINATING #-}
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqNAT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (PIneqLT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (PIneqQLT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqFREE (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) =
  ‚â°CTerm‚ÜíeqTypes (sym (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt))) (sym (#PIinj1 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))) (eqta w (‚äë-refl¬∑ w)) ,
  eqtb' ,
  eqi'
  where
    eqtb' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
    eqtb' w1 e1 a‚ÇÅ a‚ÇÇ ea =
      ‚â°CTerm‚ÜíeqTypes
        (‚Üí‚â°sub0 (sym (#PIinj2 {A} {B} {A1} {B1} (#compAllVal x tt))))
        (‚Üí‚â°sub0 (sym (#PIinj2 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))))
        (eqtb w1 e1 a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w1 e1} ea))

    eqi' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqi' w1 e1 a‚ÇÅ a‚ÇÇ ea = equalInType-local (Bar.‚àÄùïé-inBarFunc barI aw (Bar.‚ÜëinBar barI eqi e1))
      where
        aw : ‚àÄùïé w1 (Œª w' e' ‚Üí ‚ÜëwPred (Œª w'' e ‚Üí PIeq (eqInType (uni u) w'' (eqta w'' e))
                                                       (Œª a1 a2 eqa ‚Üí eqInType (uni u) w'' (eqtb w'' e a1 a2 eqa))
                                                       f g) e1 w' e'
                             ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
        aw w' e' h =
          eqInType‚ÜíequalInType
            (‚Üí‚â°sub0 (#PIinj2 {A} {B} {A1} {B1} (#compAllVal x tt)))
            (eqtb w' (‚äë-trans¬∑ e1 e') a‚ÇÅ a‚ÇÇ
                  (equalInType‚ÜíeqInType (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w' (‚äë-trans¬∑ e1 e')} (equalInType-mon ea w' e')))
            (h a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w' (‚äë-trans¬∑ e1 e')} (equalInType-mon ea w' e')))

equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (PIneqSUM (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (PIneqSET (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (PIneqEQ (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (PIneqUNION (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (PIneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTBAR x , eqi) =
  isFam-local {u} {w} {A} {B} {#APPLY f} {#APPLY g} (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni u) w' (#PI A B) (#PI A B))
                        {--‚Üí atbar x w' e' z--}
                        ‚Üí equalTerms u w' z f g
                        ‚Üí isFam u w' A B (#APPLY f) (#APPLY g))
    aw w' e' z {--at--} j = equalInType-PI‚Üí (z , j)

{-- (Bar.‚àÄùïé-inBarFunc barI aw x)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí eqTypes (uni u) w' (#PI A B) (#PI A B)
                        ‚Üí isFam u w' A B (#APPLY f) (#APPLY g))
    aw w' e' eqt = {!!}
--}

{-- j'
  where
    eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes u w' A A)
    eqta w1 e1 = {!!}

    eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí equalTerms u w' (eqta w' e) a1 a2 ‚Üí equalTypes u w' (sub0 a1 B) (sub0 a2 B))
    eqtb = {!!}

    j : inbar w (Œª w' e ‚Üí PIeq (equalTerms u w' (eqta w' e)) (Œª a‚ÇÅ a‚ÇÇ eqa ‚Üí equalTerms u w' (eqtb w' e a‚ÇÅ a‚ÇÇ eqa)) f g)
    j = eqInType-‚áõ-PI (uni u) w (#PI A B) (#PI A B) A A B B f g eqta eqtb {!!} {!!} {!!} {!!} {!!} {!!} {!!} {!!}

    j' : inbar w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    j' = {!!}
--}



equalInType-SQUASH-aux‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A a b : CTerm}
                           (eqt : isType n w (#SET #TRUE ‚åû A ‚åü))
                           ‚Üí equalTerms n w eqt a b
                           ‚Üí inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t))
{-# TERMINATING #-}
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTNAT x x‚ÇÅ) eqi = ‚ä•-elim (SETneqNAT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTQNAT x x‚ÇÅ) eqi = ‚ä•-elim (SETneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi = ‚ä•-elim (SETneqLT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi = ‚ä•-elim (SETneqQLT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTFREE x x‚ÇÅ) eqi = ‚ä•-elim (SETneqFREE (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi = ‚ä•-elim (SETneqPI (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi = ‚ä•-elim (SETneqSUM (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Bar.‚àÄùïé-inBarFunc barI aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (eqInType (uni n) w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí eqInType (uni n) w' (eqtb w' e' a1 a2 eqa)) a b
                        ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t))
    aw w' e' (t , ea , eb) =
      t , eqInType‚ÜíequalInType (sym (trans (‚Üí‚â°sub0 (sym (#SETinj2 {#TRUE} {‚åû A ‚åü} {A1} {B1} (#compAllVal x tt)))) (sub0‚åû‚åü a A)))
                                (eqtb w' e' a b ea)
                                eb
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2) eqi = ‚ä•-elim (SETneqEQ (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi = ‚ä•-elim (SETneqUNION (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) eqi = ‚ä•-elim (SETneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTUNIV i p x x‚ÇÅ) eqi = ‚ä•-elim (SETneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTBAR x) eqi =
  Bar.inBar-idem barI (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni n) w' (#SET #TRUE ‚åû A ‚åü) (#SET #TRUE ‚åû A ‚åü))
                       {--‚Üí atbar x w' e' z--}
                       ‚Üí equalTerms n w' z a b
                       ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w'' A t t)) e'))
    aw w' e' z {--at--} j = Bar.‚àÄùïé-inBarFunc barI (Œª w'' e'' h k ‚Üí h) i
      where
        i : inbar w' (Œª w'' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w'' A t t))
        i = equalInType-SQUASH-aux‚Üí z j



equalInType-SQUASH‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A a b : CTerm}
                       ‚Üí equalInType n w (#SQUASH A) a b
                       ‚Üí inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t))
equalInType-SQUASH‚Üí {n} {w} {A} {a} {b} (eqt , eqi) rewrite #SQUASH‚â°#SET A = equalInType-SQUASH-aux‚Üí eqt eqi



equalInType-UNION‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#UNION A B) a b
                       ‚Üí inbar w (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                          ‚Üí (a #‚áõ (#INL x) at w' √ó b #‚áõ (#INL y) at w' √ó equalInType n w' A x y)
                                             ‚äé
                                             (a #‚áõ (#INR x) at w' √ó b #‚áõ (#INR y) at w' √ó equalInType n w' B x y))))
{-# TERMINATING #-}
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (UNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) =
  Bar.‚àÄùïé-inBarFunc barI aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq (eqInType (uni n) w' (eqtA w' e')) (eqInType (uni n) w' (eqtB w' e')) w' a b
                       ‚Üí Œ£ CTerm (Œª y ‚Üí Œ£ CTerm (Œª z
                       ‚Üí (a #‚áõ #INL y at w' √ó b #‚áõ #INL z at w' √ó equalInType n w' A y z)
                          ‚äé
                          (a #‚áõ #INR y at w' √ó b #‚áõ #INR z at w' √ó equalInType n w' B y z))))
    aw w' e' (y , z , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , u)) = y , z , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#UNIONinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqtA w' e') u)
    aw w' e' (y , z , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , u)) = y , z , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#UNIONinj2 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqtB w' e') u)
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (UNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  Bar.inBar-idem barI (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes n w' (#UNION A B) (#UNION A B))
                        {--‚Üí atbar x w' e' z--}
                        ‚Üí equalTerms n w' z a b
                        ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí Œ£ CTerm (Œª y‚ÇÅ ‚Üí Œ£ CTerm (Œª y‚ÇÇ
                                                     ‚Üí (a #‚áõ #INL y‚ÇÅ at w'' √ó b #‚áõ #INL y‚ÇÇ at w'' √ó equalInType n w'' A y‚ÇÅ y‚ÇÇ)
                                                        ‚äé
                                                        (a #‚áõ #INR y‚ÇÅ at w'' √ó b #‚áõ #INR y‚ÇÇ at w'' √ó equalInType n w'' B y‚ÇÅ y‚ÇÇ))))
                                             e'))
    aw w' e' z {--at--} i = Bar.‚àÄùïé-inBarFunc barI (Œª w'' e'' h k ‚Üí h) j
      where
        j : inbar w' (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                             ‚Üí (a #‚áõ (#INL x) at w' √ó b #‚áõ (#INL y) at w' √ó equalInType n w' A x y)
                                ‚äé
                                (a #‚áõ (#INR x) at w' √ó b #‚áõ (#INR y) at w' √ó equalInType n w' B x y))))
        j = equalInType-UNION‚Üí (z , i)





equalInType-FUN‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A B : CTerm} {f g : CTerm}
                    ‚Üí equalInType u w (#FUN A B) f g
                    ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' B (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
equalInType-FUN‚Üí {u} {w} {A} {B} {f} {g} eqi rewrite #FUN‚â°#PI A B = z2
  where
    z1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ ‚åû B ‚åü) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    z1 = snd (snd (equalInType-PI‚Üí eqi))

    z2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' B (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    z2 w' e' a‚ÇÅ a‚ÇÇ ea = ‚â°CTerm‚ÜíequalInType (sub0‚åû‚åü a‚ÇÅ B ) (z1 w' e' a‚ÇÅ a‚ÇÇ ea)




¬¨##strongMonEq-N0-N1 : (w : ùïé¬∑) ‚Üí ¬¨ #strongMonEq w #N0 #N1
¬¨##strongMonEq-N0-N1 w (n , c‚ÇÅ , c‚ÇÇ)
  rewrite #NUMinj {n} {1} (sym (#compAllVal c‚ÇÇ tt))
  = suc-‚â¢-0 e
  where
    e : 1 ‚â° 0
    e = #NUMinj {1} {0} (sym (#compAllVal c‚ÇÅ tt))




¬¨equalInType-FALSE : {w : ùïé¬∑} {i : ‚Ñï} {a b : CTerm} ‚Üí ¬¨ equalInType i w #FALSE a b
{-# TERMINATING #-}
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqNAT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqQNAT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqLT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqQLT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqFREE (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqPI (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSUM (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSET (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi)
  rewrite #FALSE/EQinj1 {a1} {a2} {A} (#compAllVal x tt)
        | #FALSE/EQinj2 {a1} {a2} {A} (#compAllVal x tt)
        | #FALSE/EQinj3 {a1} {a2} {A} (#compAllVal x tt)
        | #FALSE/EQinj1 {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)
        | #FALSE/EQinj2 {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)
        | #FALSE/EQinj3 {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)
  =
  lower {0‚Ñì} {lsuc(L)} (Bar.inBar-const barI (Bar.‚àÄùïé-inBarFunc barI aw e))
  where
    e : inbar w (Œª w' e ‚Üí EQeq #N0 #N1 (equalTerms i w' (eqtA w' e)) w' a b)
    e = eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq #N0 #N1 (equalTerms i w' (eqtA w' e')) w' a b ‚Üí Lift (lsuc(L)) ‚ä•)
    aw w' e' (c‚ÇÅ , c‚ÇÇ , ea) = Bar.inBar-const barI (Bar.‚àÄùïé-inBarFunc barI aw' z)
      where
        z : inbar w' (Œª w'' e ‚Üí #strongMonEq w'' #N0 #N1)
        z = eqInType-‚áõ-NAT (uni i) w' #NAT #NAT #N0 #N1 (#compAllRefl #NAT w') (#compAllRefl #NAT w') (eqtA w' e') ea

        aw' : ‚àÄùïé w' (Œª w'' e'' ‚Üí #strongMonEq w'' #N0 #N1 ‚Üí Lift (lsuc(L)) ‚ä•)
        aw' w'' e'' s = lift (¬¨##strongMonEq-N0-N1 w'' s)
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqUNION (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTSQUASH (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (EQneqFFDEFS (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTUNIV i‚ÇÅ p x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqUNIV (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqLIFT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTBAR x , eqi) =
  lower {0‚Ñì} {lsuc(L)} (Bar.inBar-const barI (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni i) w' #FALSE #FALSE) {--‚Üí atbar x w' e' z--} ‚Üí equalTerms i w' z a b ‚Üí Lift (lsuc(L)) ‚ä•)
    aw w' e' z {--at--} j = lift (¬¨equalInType-FALSE (z , j))



equalInType-NEG‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {f g : CTerm}
                    ‚Üí equalInType u w (#NEG A) f g
                    ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType u w' A a‚ÇÅ a‚ÇÇ)
equalInType-NEG‚Üí {u} {w} {A} {f} {g} eqi w' e' a‚ÇÅ a‚ÇÇ ea rewrite #NEG‚â°#FUN A = ¬¨equalInType-FALSE z
  where
    z : equalInType u w' #FALSE (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)
    z = equalInType-FUN‚Üí eqi w' e' a‚ÇÅ a‚ÇÇ ea



‚â°univ‚ÜíeqInType : {u : univs} {n : ‚Ñï} ‚Üí u ‚â° uni n ‚Üí {w : ùïé¬∑} {A B a b : CTerm}
                  ‚Üí (eqt‚ÇÅ : eqTypes (uni n) w A B)
                  ‚Üí eqInType (uni n) w eqt‚ÇÅ a b
                  ‚Üí (eqt‚ÇÇ : eqTypes u w A B)
                  ‚Üí eqInType u w eqt‚ÇÇ a b
‚â°univ‚ÜíeqInType {u} {n} e {w} {A} {B} {a} {b} eqt‚ÇÅ eqi eqt‚ÇÇ rewrite e =
  eqInType-extl1 B B eqt‚ÇÅ eqt‚ÇÇ eqi



equalInType-LIFT‚Üê : (n : ‚Ñï) (w : ùïé¬∑) (T a b : CTerm)
                     ‚Üí equalInType n w T a b
                     ‚Üí equalInType (suc n) w (#LIFT T) a b
equalInType-LIFT‚Üê n w T a b eqi =
  equalTypes-LIFT n w (#LIFT T) (#LIFT T) T T (#compAllRefl (#LIFT T) w) (#compAllRefl (#LIFT T) w) (fst eqi) ,
  j
  where
    eqta0 : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes n w' T T)
    eqta0 w' e' = eqTypes-mon (uni n) {T} {T} (fst eqi) w' e'

    eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes (‚ÜìU (uni (suc n))) w' T T)
    eqta w' e' = ‚â°univ‚ÜíeqTypes (‚ÜìU-uni (suc n)) (eqta0 w' e')

    j : inbar w (Œª w' e ‚Üí eqInType (‚ÜìU (uni (suc n))) w' (eqta w' e) a b)
    j = Bar.‚àÄùïé-inBar barI aw
      where
        aw : ‚àÄùïé w (Œª w' e ‚Üí eqInType (‚ÜìU (uni (suc n))) w' (eqta w' e) a b)
        aw w' e' = ‚â°univ‚ÜíeqInType (‚ÜìU-uni (suc n)) (eqta0 w' e') (equalInType‚ÜíeqInType refl {eqta0 w' e'} (equalInType-mon eqi w' e')) (eqta w' e')



equalInType-‚ÜëT#‚Üê : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType i w T a b
                    ‚Üí equalInType n w (‚ÜëT# p T) a b
equalInType-‚ÜëT#‚Üê {suc n} {i} p w T a b eqi with i <? n
... | yes q = equalInType-LIFT‚Üê n w (‚ÜëT# q T) a b (equalInType-‚ÜëT#‚Üê q w T a b eqi)
... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = equalInType-LIFT‚Üê n w T a b eqi



equalInType-#‚ÜëT‚Üê : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType i w T a b
                    ‚Üí equalInType n w (#‚ÜëT p T) a b
equalInType-#‚ÜëT‚Üê {suc n} {i} p w T a b eqi rewrite #‚ÜëT‚â°‚ÜëT# p T = equalInType-‚ÜëT#‚Üê p w T a b eqi



equalInType-NEG-‚ÜëT‚Üí : {n i : ‚Ñï} (p : i < n) {w : ùïé¬∑} {A : CTerm} {f g : CTerm}
                       ‚Üí equalInType n w (#NEG (#‚ÜëT p A)) f g
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' A a‚ÇÅ a‚ÇÇ)
equalInType-NEG-‚ÜëT‚Üí {n} {i} p {w} {A} {f} {g} eqi w' e' a‚ÇÅ a‚ÇÇ ea =
  z (equalInType-#‚ÜëT‚Üê p w' A a‚ÇÅ a‚ÇÇ ea)
  where
    z : ¬¨ equalInType n w' (#‚ÜëT p A) a‚ÇÅ a‚ÇÇ
    z = equalInType-NEG‚Üí eqi w' e' a‚ÇÅ a‚ÇÇ



equalTypes‚ÜíequalInType-UNIV : {n i : ‚Ñï} (p : i < n) {w : ùïé¬∑} {a b : CTerm}
                              ‚Üí equalTypes i w a b
                              ‚Üí equalInType n w (#UNIV i) a b
equalTypes‚ÜíequalInType-UNIV {n} {i} p {w} {a} {b} eqt =
  eqTypesUniv w n i p , inbarEqTypes‚ÜíuniUpTo {i} {n} {p} (Bar.‚àÄùïé-inBar barI (eqTypes-mon (uni i) eqt))



equalInType-SUM : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
                  ‚Üí inbar w (Œª w' _ ‚Üí SUMeq (equalInType u w' A) (Œª a b ea ‚Üí equalInType u w' (sub0 a B)) w' f g)
                  ‚Üí equalInType u w (#SUM A B) f g
equalInType-SUM {u} {w} {A} {B} {f} {g} ha hb eqi =
  eqTypesSUM‚Üê ha hb ,
  Bar.‚àÄùïé-inBarFunc
    barI
    (Œª w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) ‚Üí
      a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ ,
      equalInType‚ÜíeqInType {u} {w'} {A} {A} {A} refl {ha w' e'} ea ,
      c‚ÇÅ , c‚ÇÇ ,
      equalInType‚ÜíeqInType
        {u} {w'} {sub0 a‚ÇÅ B} {sub0 a‚ÇÅ B} {sub0 a‚ÇÇ B} refl
        {equalInTypeFam‚ÜíeqTypesFam {u} {w} {A} {B} {A} {B} ha hb w' e' a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType {u} {w'} {A} {A} {A} refl {ha w' e'} ea)}
        eb)
    eqi





inbar-wPred'-#weakMonEq : (w w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (a‚ÇÅ a‚ÇÇ : CTerm)
                                   ‚Üí inbar w' (Œª w'' _ ‚Üí #weakMonEq w'' a‚ÇÅ a‚ÇÇ)
                                   ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí #weakMonEq w'' a‚ÇÅ a‚ÇÇ) e')
inbar-wPred'-#weakMonEq w w' e' a‚ÇÅ a‚ÇÇ i = Bar.‚àÄùïé-inBarFunc barI aw i
  where
    aw : ‚àÄùïé w' (Œª w'' e'' ‚Üí #weakMonEq w'' a‚ÇÅ a‚ÇÇ ‚Üí ‚ÜëwPred' (Œª w''' e ‚Üí #weakMonEq w''' a‚ÇÅ a‚ÇÇ) e' w'' e'')
    aw w1 e1 z j = z



inbar-wPred'-#strongMonEq : (w w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (a‚ÇÅ a‚ÇÇ : CTerm)
                            ‚Üí inbar w' (Œª w'' _ ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ)
                            ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ) e')
inbar-wPred'-#strongMonEq w w' e' a‚ÇÅ a‚ÇÇ i = Bar.‚àÄùïé-inBarFunc barI aw i
  where
    aw : ‚àÄùïé w' (Œª w'' e'' ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ ‚Üí ‚ÜëwPred' (Œª w''' e ‚Üí #strongMonEq w''' a‚ÇÅ a‚ÇÇ) e' w'' e'')
    aw w1 e1 z j = z



equalInType-EQ : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                  ‚Üí isType u w A
                  ‚Üí inbar w (Œª w' _ ‚Üí EQeq a b (equalInType u w' A) w' f g)
                  ‚Üí equalInType u w (#EQ a b A) f g
equalInType-EQ {u} {w} {a} {b} {A} {f} {g} ha eqi =
  eqTypesEQ‚Üê ha ma mb , j
  where
    ma : equalInType u w A a a
    ma = equalInType-local (Bar.‚àÄùïé-inBarFunc barI aw eqi)
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' A) w' f g ‚Üí equalInType u w' A a a)
        aw w' e (c‚ÇÅ , c‚ÇÇ , h) = equalInType-refl h

    mb : equalInType u w A b b
    mb = equalInType-local (Bar.‚àÄùïé-inBarFunc barI aw eqi)
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' A) w' f g ‚Üí equalInType u w' A b b)
        aw w' e (c‚ÇÅ , c‚ÇÇ , h) = equalInType-refl (equalInType-sym h)

    j : equalTerms u w (eqTypesEQ‚Üê ha ma mb) f g
    j = Bar.‚àÄùïé-inBarFunc barI aw eqi
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' A) w' f g
                            ‚Üí EQeq a b (eqInType (uni u) w' (eqTypes-mon (uni u) ha w' e')) w' f g)
        aw w' e (c‚ÇÅ , c‚ÇÇ , h) = c‚ÇÅ , c‚ÇÇ , equalInType‚ÜíeqInType {u} {w'} {A} {A} {A} refl {eqTypes-mon (uni u) ha w' e} h




equalInType-SUM‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                    ‚Üí equalInType u w (#SUM A B) f g
                    ‚Üí inbar w (Œª w' _ ‚Üí SUMeq (equalInType u w' A) (Œª a b ea ‚Üí equalInType u w' (sub0 a B)) w' f g)
{-# TERMINATING #-}
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqNAT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUMneqLT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUMneqQLT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqFREE (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqPI (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) =
  Bar.‚àÄùïé-inBarFunc barI aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalTerms u w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms u w' (eqtb w' e' a1 a2 eqa)) w' f g
                       ‚Üí SUMeq (equalInType u w' A) (Œª a b ea ‚Üí equalInType u w' (sub0 a B)) w' f g)
    aw w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea' , c‚ÇÅ , c‚ÇÇ , eb'
      where
        ea' : equalInType u w' A a‚ÇÅ a‚ÇÇ
        ea' = eqInType‚ÜíequalInType {u} {w'} {A} {A1} {A2} (#SUMinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqta w' e') ea

        eb' : equalInType u w' (sub0 a‚ÇÅ B) b‚ÇÅ b‚ÇÇ
        eb' = eqInType‚ÜíequalInType {u} {w'} {sub0 a‚ÇÅ B} {sub0 a‚ÇÅ B1} {sub0 a‚ÇÇ B2} (‚Üí‚â°sub0 (#SUMinj2 {A} {B} {A1} {B1} (#compAllVal x tt))) (eqtb w' e' a‚ÇÅ a‚ÇÇ ea) eb

equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqSET (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (SUMneqEQ (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUMneqUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (SUMneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTBAR x , eqi) =
  Bar.inBar-idem barI (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes u w' (#SUM A B) (#SUM A B))
                       ‚Üí equalTerms u w' z f g
                       ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí SUMeq (equalInType u w'' A) (Œª a b ea ‚Üí equalInType u w'' (sub0 a B)) w'' f g) e'))
    aw w' e' z ei = Bar.‚àÄùïé-inBarFunc barI (Œª w1 e1 h z ‚Üí h) (equalInType-SUM‚Üí (z , ei))



equalInType-EQ‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                  ‚Üí equalInType u w (#EQ a b A) f g
                  ‚Üí inbar w (Œª w' _ ‚Üí EQeq a b (equalInType u w' A) w' f g)
{-# TERMINATING #-}
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqLT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqQLT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqFREE (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqPI (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSUM (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSET (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi)
  rewrite sym (#EQinj1 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
        | sym (#EQinj2 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
        | sym (#EQinj3 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
  = Bar.‚àÄùïé-inBarFunc barI aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalTerms u w' (eqtA w' e')) w' f g
                        ‚Üí EQeq a b (equalInType u w' A) w' f g)
    aw w' e' (c‚ÇÅ , c‚ÇÇ , ea) = c‚ÇÅ , c‚ÇÇ , ea'
      where
        ea' : equalInType u w' A a b
        ea' = eqInType‚ÜíequalInType {u} {w'} {A} {A} {B} refl (eqtA w' e') ea

equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (EQneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTBAR x , eqi) =
  Bar.inBar-idem barI (Bar.‚àÄùïé-inBar'-inBar barI x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes u w' (#EQ a b A) (#EQ a b A))
                       ‚Üí equalTerms u w' z f g
                       ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí EQeq a b (equalInType u w'' A) w'' f g) e'))
    aw w' e' z ei = Bar.‚àÄùïé-inBarFunc barI (Œª w1 e1 h z ‚Üí h) (equalInType-EQ‚Üí (z , ei))



equalInType-EQ-QNAT‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {a b : CTerm} {f g : CTerm}
                        ‚Üí equalInType u w (#EQ a b #QNAT) f g
                        ‚Üí inbar w (Œª w' _ ‚Üí #weakMonEq w' a b)
equalInType-EQ-QNAT‚Üí {u} {w} {a} {b} {f} {g} eqi =
  Bar.inBar-idem barI (Bar.‚àÄùïé-inBarFunc barI aw (equalInType-EQ‚Üí eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' #QNAT) w' f g ‚Üí inbar w' (‚ÜëwPred' (Œª w'' e ‚Üí #weakMonEq w'' a b) e'))
    aw w' e (c‚ÇÅ , c‚ÇÇ , ea) = Bar.‚àÄùïé-inBarFunc barI (Œª w1 e1 z _ ‚Üí z) (equalInType-QNAT‚Üí u w' a b ea)

\end{code}[hide]
