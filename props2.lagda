\begin{code}
{-# OPTIONS --rewriting #-}

--open import bar
--module classical (bar : Bar) where

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import progress
open import choiceExt
open import mod


--module props2 (bar : Bar) where
module props2 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
              (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
              (X : ChoiceExt W C)
              (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(E)

open import type_sys_props_nat(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_qnat(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_lt(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_qlt(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_free(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_pi(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_sum(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_set(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_eq(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_union(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_qtunion(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_tsquash(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_ttrunc(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_tconst(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_subsing(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_ffdefs(W)(M)(C)(K)(P)(G)(X)(E)
open import type_sys_props_lift(W)(M)(C)(K)(P)(G)(X)(E)

open import props1(W)(M)(C)(K)(P)(G)(X)(E)

-- open import calculus
-- open import world
-- open import theory (bar)
-- open import props0 (bar)
-- open import ind2 (bar) -- this is the one where a function is not recognized as terminating, but does not break the bar abstraction
-- open import type_sys_props_nat (bar)
-- open import type_sys_props_qnat (bar)
-- open import type_sys_props_lt (bar)
-- open import type_sys_props_qlt (bar)
-- open import type_sys_props_free (bar)
-- open import type_sys_props_pi (bar)
-- open import type_sys_props_sum (bar)
-- open import type_sys_props_set (bar)
-- open import type_sys_props_eq (bar)
-- open import type_sys_props_union (bar)
-- open import type_sys_props_tsquash (bar)
-- open import type_sys_props_ffdefs (bar)
-- open import props1 (bar)
-- open import terms (bar)
\end{code}




\begin{code}[hide]
eqInType-extl1 : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm}
                 (B C : CTerm)
                 (eqa1 : equalTypes i w A B) (eqa2 : equalTypes i w A C)
                 {a‚ÇÅ a‚ÇÇ : CTerm}
                 ‚Üí eqInType (uni i) w eqa1 a‚ÇÅ a‚ÇÇ
                 ‚Üí eqInType (uni i) w eqa2 a‚ÇÅ a‚ÇÇ
eqInType-extl1 {i} {w} {A} B C eqa1 eqa2 {a‚ÇÅ} {a‚ÇÇ} ei =
  TSP.extl1 (typeSysConds i w A B eqa1)
            C eqa2 a‚ÇÅ a‚ÇÇ ei


eqInType-extr1 : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm}
                 (B C : CTerm)
                 (eqa1 : equalTypes i w A B) (eqa2 : equalTypes i w C B)
                 {a‚ÇÅ a‚ÇÇ : CTerm}
                 ‚Üí eqInType (uni i) w eqa1 a‚ÇÅ a‚ÇÇ
                 ‚Üí eqInType (uni i) w eqa2 a‚ÇÅ a‚ÇÇ
eqInType-extr1 {i} {w} {A} B C eqa1 eqa2 {a‚ÇÅ} {a‚ÇÇ} ei =
  TSP.extr1 (typeSysConds i w A B eqa1)
            C eqa2 a‚ÇÅ a‚ÇÇ ei

eqInType-sym : {i : ‚Ñï} {w : ùïé¬∑} {A B : CTerm}
               (eqa : equalTypes i w A B)
               {a‚ÇÅ a‚ÇÇ : CTerm}
               ‚Üí eqInType (uni i) w eqa a‚ÇÅ a‚ÇÇ
               ‚Üí eqInType (uni i) w eqa a‚ÇÇ a‚ÇÅ
eqInType-sym {i} {w} {A} {B} eqa {a‚ÇÅ} {a‚ÇÇ} ei = TSP.isym (typeSysConds i w A B eqa) a‚ÇÅ a‚ÇÇ ei


wPredExtIrr-eqInType : {i : ‚Ñï} {w : ùïé¬∑} {A B : CTerm}
                       (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A B))
                       (a b : CTerm) ‚Üí wPredExtIrr (Œª w‚ÇÅ e ‚Üí eqInType (uni i) w‚ÇÅ (eqta w‚ÇÅ e) a b)
wPredExtIrr-eqInType {i} {w} {A} {B} eqta a b w' e1 e2 h =
  eqInType-extl1 B B (eqta w' e1) (eqta w' e2) h


wPredDepExtIrr-eqInType : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B D : CTerm0}
                          (eqtb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D)))
                          (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w‚ÇÅ e x ‚Üí eqInType (uni i) w‚ÇÅ (eqtb w‚ÇÅ e a b x) c d)
wPredDepExtIrr-eqInType {i} {w} {A} {B} {D} eqtb a b c d w' e1 e2 x1 x2 h =
  eqInType-extl1 (sub0 b D) (sub0 b D) (eqtb w' e1 a b x1) (eqtb w' e2 a b x2) h


wPredDepExtIrr-eqInType2 : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
                           (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C))
                           (eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType (uni i) w' (eqta w' e) a1 a2 ‚Üí eqTypes (uni i) w' (sub0 a1 B) (sub0 a2 D)))
                           (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w‚ÇÅ e x ‚Üí eqInType (uni i) w‚ÇÅ (eqtb w‚ÇÅ e a b x) c d)
wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta eqtb a b c d w' e1 e2 x1 x2 h =
  eqInType-extl1 (sub0 b D) (sub0 b D) (eqtb w' e1 a b x1) (eqtb w' e2 a b x2) h



equalInTypeFam‚ÜíeqTypesFam : {i : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
                             (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C))
                             (eqtb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D)))
                             ‚Üí ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType (uni i) w' (eqta w' e) a1 a2 ‚Üí eqTypes (uni i) w' (sub0 a1 B) (sub0 a2 D))
equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb w1 e1 a‚ÇÅ a‚ÇÇ ea =
  eqtb w1 e1 a‚ÇÅ a‚ÇÇ (eqa , eqInType-extl1 C A (eqta w1 e1) eqa ea)
  where
    eqa : equalTypes i w1 A A
    eqa = TEQrefl-equalTypes i w1 A C (eqta w1 e1)



eqTypesSET‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D))
               ‚Üí equalTypes i w (#SET A B) (#SET C D)
eqTypesSET‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb =
  EQTSET A B C D (#compAllRefl (#SET A B) w) (#compAllRefl (#SET C D) w)
        eqta
        (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb)
        (wPredExtIrr-eqInType eqta)
        (wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb))



eqTypesSUM‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D))
               ‚Üí equalTypes i w (#SUM A B) (#SUM C D)
eqTypesSUM‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb =
  EQTSUM A B C D (#compAllRefl (#SUM A B) w) (#compAllRefl (#SUM C D) w)
        eqta
        (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb)
        (wPredExtIrr-eqInType eqta)
        (wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb))



eqTypesPI‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm0} {C : CTerm} {D : CTerm0}
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType i w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes i w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ D))
               ‚Üí equalTypes i w (#PI A B) (#PI C D)
eqTypesPI‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb =
  EQTPI A B C D (#compAllRefl (#PI A B) w) (#compAllRefl (#PI C D) w)
        eqta
        (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb)
        (wPredExtIrr-eqInType eqta)
        (wPredDepExtIrr-eqInType2 {i} {w} {A} {B} {C} {D} eqta (equalInTypeFam‚ÜíeqTypesFam {i} {w} {A} {B} {C} {D} eqta eqtb))



eqTypesFUN‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm} {C : CTerm} {D : CTerm}
               ‚Üí equalTypes i w A C
               ‚Üí equalTypes i w B D
               ‚Üí equalTypes i w (#FUN A B) (#FUN C D)
eqTypesFUN‚Üê {w} {i} {A} {B} {C} {D} eqta eqtb rewrite #FUN‚â°#PI A B | #FUN‚â°#PI C D =
  eqTypesPI‚Üê (eqTypes-mon (uni i) eqta) eqb
    where
      eqb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ ‚åû B ‚åü) (sub0 a‚ÇÇ ‚åû D ‚åü))
      eqb w1 e1 a‚ÇÅ a‚ÇÇ eqa rewrite sub0‚åû‚åü a‚ÇÅ B | sub0‚åû‚åü a‚ÇÇ D = eqTypes-mon (uni i) eqtb w1 e1


eqInTypeExtL1-true : {i : ‚Ñï} {w : ùïé¬∑} {A B : CTerm} (eqt : eqTypes (uni i) w A B)
                     ‚Üí eqInTypeExtL1 eqt
eqInTypeExtL1-true {i} {w} {A} {B} eqt = TSP.extl1 (typeSysConds i w A B eqt)



eqInType‚ÜíequalInType : {u : ‚Ñï} {w : ùïé¬∑} {A A1 A2 a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí A ‚â° A1
                        ‚Üí (eqt : equalTypes u w A1 A2)
                        ‚Üí equalTerms u w eqt a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType u w A a‚ÇÅ a‚ÇÇ
eqInType‚ÜíequalInType {u} {w} {A} {A1} {A2} {a‚ÇÅ} {a‚ÇÇ} e eqt eqi rewrite e =
  TEQrefl-equalTypes u w A1 A2 eqt ,
  eqInTypeExtL1-true eqt A1 (TEQrefl-equalTypes u w A1 A2 eqt) a‚ÇÅ a‚ÇÇ eqi



equalInType‚ÜíeqInType : {u : ‚Ñï} {w : ùïé¬∑} {A A1 A2 a‚ÇÅ a‚ÇÇ : CTerm}
                        ‚Üí A ‚â° A1
                        ‚Üí {eqt : equalTypes u w A1 A2}
                        ‚Üí equalInType u w A a‚ÇÅ a‚ÇÇ
                        ‚Üí equalTerms u w eqt a‚ÇÅ a‚ÇÇ
equalInType‚ÜíeqInType {u} {w} {A} {A1} {A2} {a‚ÇÅ} {a‚ÇÇ} e {eqt} eqi rewrite e =
  eqInTypeExtL1-true {u} (fst eqi) A2 eqt a‚ÇÅ a‚ÇÇ (snd eqi)



‚àÄùïé-equalInType‚ÜíeqInType : {i : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                        (eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A B))
                        ‚Üí ‚àÄùïé w (Œª w' e ‚Üí equalInType i w' A a b)
                        ‚Üí ‚àÄùïé w (Œª w' e ‚Üí eqInType (uni i) w' (eqta w' e) a b)
‚àÄùïé-equalInType‚ÜíeqInType {i} {w} {A} {B} {a} {b} eqta eqi w1 e1 =
  equalInType‚ÜíeqInType refl {eqta w1 e1} (eqi w1 e1)



equalInType-mon : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                  ‚Üí equalInType u w T a b
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalInType u w' T a b)
equalInType-mon {u} {w} {T} {a} {b} (eqt , eqi) w' e =
  eqTypes-mon (uni u) eqt w' e ,
  eqInType-mon (is-uni-uni u) e eqt (eqTypes-mon (uni u) eqt w' e) a b eqi



equalInType-refl : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                   ‚Üí equalInType u w T a b
                   ‚Üí equalInType u w T a a
equalInType-refl {u} {w} {T} {a} {b} eqi =
  EQTtrans-equalInType u w T a b a eqi (EQTsym-equalInType u w T a b eqi)



equalInType-sym : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                  ‚Üí equalInType u w T a b
                  ‚Üí equalInType u w T b a
equalInType-sym {u} {w} {T} {a} {b} eqi = EQTsym-equalInType u w T a b eqi



eqTypesEQ‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {a1 a2 b1 b2 A B : CTerm}
               ‚Üí equalTypes i w A B
               ‚Üí equalInType i w A a1 b1
               ‚Üí equalInType i w A a2 b2
               ‚Üí equalTypes i w (#EQ a1 a2 A) (#EQ b1 b2 B)
eqTypesEQ‚Üê {w} {i} {a1} {a2} {b1} {b2} {A} {B} eqtA eqt1 eqt2 =
  EQTEQ a1 b1 a2 b2 A B (#compAllRefl (#EQ a1 a2 A) w) (#compAllRefl (#EQ b1 b2 B) w)
        (eqTypes-mon (uni i) eqtA) (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqtA))
        (‚àÄùïé-equalInType‚ÜíeqInType (eqTypes-mon (uni i) eqtA) (equalInType-mon eqt1))
        (‚àÄùïé-equalInType‚ÜíeqInType (eqTypes-mon (uni i) eqtA) (equalInType-mon eqt2))


eqTypesFUN‚Üí‚ÇÅ : {w : ùïé¬∑} {i : ‚Ñï} {A : CTerm} {B : CTerm} {C : CTerm} {D : CTerm}
               ‚Üí equalTypes i w (#FUN A B) (#FUN C D)
               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalTypes i w' A C)
{-# TERMINATING #-}
--{-# INLINE ‚àÄùïé-inOpenBarFunc #-}
--{-# INLINE ‚ÜëinOpenBar #-}
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTNAT x x‚ÇÅ) = ‚ä•-elim (PIneqNAT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTQNAT x x‚ÇÅ) = ‚ä•-elim (PIneqQNAT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (PIneqLT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (PIneqQLT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTFREE x x‚ÇÅ) = ‚ä•-elim (PIneqFREE (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb)
  rewrite #FUN/PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)
        | #FUN/PIinj2 {A} {B} {A1} {B1} (#compAllVal x tt)
        | #FUN/PIinj1 {C} {D} {A2} {B2} (#compAllVal x‚ÇÅ tt)
        | #FUN/PIinj2 {C} {D} {A2} {B2} (#compAllVal x‚ÇÅ tt)
  = eqta

eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (PIneqSUM (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (PIneqSET (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (PIneqTUNION (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2) = ‚ä•-elim (PIneqEQ (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = ‚ä•-elim (PIneqUNION (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = ‚ä•-elim (PIneqQTUNION (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqTSQUASH (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqTTRUNC (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqTCONST (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqSUBSING (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) = ‚ä•-elim (PIneqFFDEFS (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTUNIV m p c‚ÇÅ c‚ÇÇ) = ‚ä•-elim (PIneqUNIV (compAllVal c‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (PIneqLIFT (compAllVal x‚ÇÅ tt))
eqTypesFUN‚Üí‚ÇÅ {w} {i} {A} {B} {C} {D} (EQTBAR x) w' e' =
  EQTBAR (Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üë‚ñ° M x e'))
-- (a) This does not work
-- EQTBAR (‚àÄùïé-inOpenBarFunc aw (‚ÜëinOpenBar x e'))
-- (b) Unfolding and reducing works though:
-- EQTBAR (Œª w1 e1 ‚Üí fst (x w1 (‚äë-trans¬∑ e' e1)) ,
--                     fst (snd (x w1 (‚äë-trans¬∑ e' e1))) ,
--                     Œª w3 e3 z ‚Üí aw w3 z (snd (snd (x w1 (‚äë-trans¬∑ e' e1))) w3 e3 (‚äë-trans¬∑ e' z)))
  where
    aw : ‚àÄùïé w' (Œª w1 e1 ‚Üí eqTypes (uni i) w1 (#FUN A B) (#FUN C D) ‚Üí equalTypes i w1 A C)
    aw w1 e1 eqt = eqTypesFUN‚Üí‚ÇÅ eqt w1 (‚äë-refl¬∑ w1)



eqTypesNEG‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
               ‚Üí equalTypes i w (#NEG A) (#NEG B)
               ‚Üí equalTypes i w A B
eqTypesNEG‚Üí {w} {i} {A} {B} eqt rewrite #NEG‚â°#FUN A | #NEG‚â°#FUN B = eqTypesFUN‚Üí‚ÇÅ eqt w (‚äë-refl¬∑ w)


eqTypesNAT : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #NAT #NAT
eqTypesNAT {w} {i} = EQTNAT (#compAllRefl #NAT w) (#compAllRefl #NAT w)


eqTypesQNAT : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #QNAT #QNAT
eqTypesQNAT {w} {i} = EQTQNAT (#compAllRefl #QNAT w) (#compAllRefl #QNAT w)



eqTypesTSQUASH‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
                   ‚Üí equalTypes i w A B
                   ‚Üí equalTypes i w (#TSQUASH A) (#TSQUASH B)
eqTypesTSQUASH‚Üê {w} {i} {A} {B} eqtA =
  EQTSQUASH
    A B
    (#compAllRefl (#TSQUASH A) w)
    (#compAllRefl (#TSQUASH B) w)
    (eqTypes-mon (uni i) eqtA)
    (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqtA))


eqTypesTTRUNC‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
                   ‚Üí equalTypes i w A B
                   ‚Üí equalTypes i w (#TTRUNC A) (#TTRUNC B)
eqTypesTTRUNC‚Üê {w} {i} {A} {B} eqtA =
  EQTTRUNC
    A B
    (#compAllRefl (#TTRUNC A) w)
    (#compAllRefl (#TTRUNC B) w)
    (eqTypes-mon (uni i) eqtA)
    (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqtA))



eqTypesTCONST‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w (#TCONST A) (#TCONST B)
eqTypesTCONST‚Üê {w} {i} {A} {B} eqtA =
  EQTCONST
    A B
    (#compAllRefl (#TCONST A) w)
    (#compAllRefl (#TCONST B) w)
    (eqTypes-mon (uni i) eqtA)
    (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqtA))



eqTypesSUBSING‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w (#SUBSING A) (#SUBSING B)
eqTypesSUBSING‚Üê {w} {i} {A} {B} eqtA =
  EQTSUBSING
    A B
    (#compAllRefl (#SUBSING A) w)
    (#compAllRefl (#SUBSING B) w)
    (eqTypes-mon (uni i) eqtA)
    (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqtA))



eqTypes-local : {u : univs} {w : ùïé¬∑} {A B : CTerm}
                ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí eqTypes u w' A B)
                ‚Üí eqTypes u w A B
eqTypes-local {u} {w} {A} {B} i =
  EQTBAR i


TSQUASH-eq‚ÜíisType : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                    ‚Üí TSQUASH-eq (equalInType i w A) w a b
                    ‚Üí isType i w A
TSQUASH-eq‚ÜíisType {w} {i} {a} {b} {A} (TSQUASH-eq-base a1 a2 i1 i2 c1 c2 ea) = fst ea
TSQUASH-eq‚ÜíisType {w} {i} {a} {b} {A} (TSQUASH-eq-trans t h1 h2) = TSQUASH-eq‚ÜíisType h1



TSQUASHeq‚ÜíisType : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                    ‚Üí TSQUASHeq (equalInType i w A) w a b
                    ‚Üí isType i w A
TSQUASHeq‚ÜíisType {w} {i} {a} {b} {A} h = TSQUASH-eq‚ÜíisType (‚ÜíTSQUASH-eq h)


‚ñ°¬∑-TSQUASHeq‚ÜíisType : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TSQUASHeq (equalInType i w' A) w' a b)
                          ‚Üí isType i w A
‚ñ°¬∑-TSQUASHeq‚ÜíisType {w} {i} {a} {b} {A} j =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M aw j)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TSQUASHeq (equalInType i w' A) w' a b ‚Üí eqTypes (uni i) w' A A)
    aw w1 e1 h = TSQUASHeq‚ÜíisType h
-- (c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , ea) = fst ea


equalInTypeTSQUASH‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TSQUASHeq (equalInType i w' A) w' a b)
                       ‚Üí equalInType i w (#TSQUASH A) a b
equalInTypeTSQUASH‚Üê {w} {i} {a} {b} {A} j =
  eqTypesTSQUASH‚Üê (‚ñ°¬∑-TSQUASHeq‚ÜíisType {w} {i} {a} {b} {A} j) ,
  Mod.‚àÄùïé-‚ñ°Func M aw j
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TSQUASHeq (equalInType i w' A) w' a b
                        ‚Üí TSQUASHeq (equalTerms i w' (eqTypes-mon (uni i) (‚ñ°¬∑-TSQUASHeq‚ÜíisType {w} {i} {a} {b} {A} j) w' e')) w' a b)
    aw w1 e1 h = TSQUASHeq-ext-eq (Œª a1 a2 ea ‚Üí equalInType‚ÜíeqInType refl {eqTypes-mon (uni i) (‚ñ°¬∑-TSQUASHeq‚ÜíisType {_} {i} {a} {b} j) w1 e1} ea) h
{--(c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , ea) =
      c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , equalInType‚ÜíeqInType refl {eqTypes-mon (uni i) (‚ñ°¬∑-TSQUASHeq‚ÜíisType {_} {i} {a} {b} j) w1 e1} ea
--}




TTRUNC-eq‚ÜíisType : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                    ‚Üí TTRUNC-eq (equalInType i w A) w a b
                    ‚Üí isType i w A
TTRUNC-eq‚ÜíisType {w} {i} {a} {b} {A} (TTRUNC-eq-base a1 a2 i1 i2 c1 c2 ea) = fst ea
TTRUNC-eq‚ÜíisType {w} {i} {a} {b} {A} (TTRUNC-eq-trans t h1 h2) = TTRUNC-eq‚ÜíisType h1



TTRUNCeq‚ÜíisType : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                    ‚Üí TTRUNCeq (equalInType i w A) w a b
                    ‚Üí isType i w A
TTRUNCeq‚ÜíisType {w} {i} {a} {b} {A} h = TTRUNC-eq‚ÜíisType (‚ÜíTTRUNC-eq h)


‚ñ°¬∑-TTRUNCeq‚ÜíisType : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TTRUNCeq (equalInType i w' A) w' a b)
                          ‚Üí isType i w A
‚ñ°¬∑-TTRUNCeq‚ÜíisType {w} {i} {a} {b} {A} j =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M aw j)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TTRUNCeq (equalInType i w' A) w' a b ‚Üí eqTypes (uni i) w' A A)
    aw w1 e1 h = TTRUNCeq‚ÜíisType h
-- (c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , ea) = fst ea


equalInTypeTTRUNC‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TTRUNCeq (equalInType i w' A) w' a b)
                       ‚Üí equalInType i w (#TTRUNC A) a b
equalInTypeTTRUNC‚Üê {w} {i} {a} {b} {A} j =
  eqTypesTTRUNC‚Üê (‚ñ°¬∑-TTRUNCeq‚ÜíisType {w} {i} {a} {b} {A} j) ,
  Mod.‚àÄùïé-‚ñ°Func M aw j
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TTRUNCeq (equalInType i w' A) w' a b
                        ‚Üí TTRUNCeq (equalTerms i w' (eqTypes-mon (uni i) (‚ñ°¬∑-TTRUNCeq‚ÜíisType {w} {i} {a} {b} {A} j) w' e')) w' a b)
    aw w1 e1 h = TTRUNCeq-ext-eq (Œª a1 a2 ea ‚Üí equalInType‚ÜíeqInType refl {eqTypes-mon (uni i) (‚ñ°¬∑-TTRUNCeq‚ÜíisType {_} {i} {a} {b} j) w1 e1} ea) h



eqTypesQTNAT : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #QTNAT #QTNAT
eqTypesQTNAT {w} {i} = eqTypesTSQUASH‚Üê eqTypesNAT



‚ñ°¬∑-#strongMonEq-#NUM : (k : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongMonEq w' (#NUM k) (#NUM k))
‚ñ°¬∑-#strongMonEq-#NUM k w = Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí #strongMonEq-#NUM w2 k)




‚â°CTerm‚ÜíeqTypes : {u : univs} {w : ùïé¬∑} {A B C D : CTerm}
                  ‚Üí A ‚â° C
                  ‚Üí B ‚â° D
                  ‚Üí eqTypes u w A B
                  ‚Üí eqTypes u w C D
‚â°CTerm‚ÜíeqTypes {u} {w} {A} {B} {C} {D} e f z rewrite e | f = z


‚â°CTerm‚ÜíequalInType : {u : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                      ‚Üí A ‚â° B
                      ‚Üí equalInType u w A a b
                      ‚Üí equalInType u w B a b
‚â°CTerm‚ÜíequalInType {u} {w} {A} {B} {a} {b} e z rewrite e = z



NUM-equalInType-NAT : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #NAT (#NUM k) (#NUM k)
NUM-equalInType-NAT i w k = eqTypesNAT , Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #strongMonEq-#NUM w' k)


isTypeNAT! : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí isType i w #NAT!
isTypeNAT! {w} {i} = eqTypesTCONST‚Üê eqTypesNAT


NUM-equalInType-NAT! : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #NAT! (#NUM k) (#NUM k)
NUM-equalInType-NAT! i w k =
  isTypeNAT! ,
  Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí Mod.‚àÄùïé-‚ñ° M (Œª w'' e'' ‚Üí #strongMonEq-#NUM w'' k) , #‚áì‚Üí#‚áì!-NUM w' k , #‚áì‚Üí#‚áì!-NUM w' k)


equalInTypeTSQUASH‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                       ‚Üí equalInType i w (#TSQUASH A) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TSQUASHeq (equalInType i w' A) w' a b)
{-# TERMINATING #-}
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (TSQUASHneqNAT (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (TSQUASHneqQNAT (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (TSQUASHneqLT (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (TSQUASHneqQLT (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (TSQUASHneqFREE (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TSQUASHneqPI (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TSQUASHneqSUM (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TSQUASHneqSET (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TSQUASHneqTUNION (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (TSQUASHneqEQ (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (TSQUASHneqUNION (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (TSQUASHneqQTUNION (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' a b ‚Üí TSQUASHeq (equalInType i w' A) w' a b)
    aw w1 e1 p = TSQUASHeq-ext-eq (Œª a1 a2 ea ‚Üí eqInType‚ÜíequalInType (#TSQUASHinj {A} {A1} (#compAllVal x tt)) (eqtA w1 e1) ea) p
--(c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , ea) =
--      c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#TSQUASHinj {A} {A1} (#compAllVal x tt)) (eqtA w1 e1) ea
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TSQUASHneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TSQUASHneqTCONST (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TSQUASHneqSUBSING (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (TSQUASHneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTUNIV i‚ÇÅ p x x‚ÇÅ , eqi) = ‚ä•-elim (TSQUASHneqUNIV (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TSQUASHneqLIFT (compAllVal x‚ÇÅ tt))
equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {A} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType i w' (#TSQUASH A))
                        ‚Üí equalTerms i w' z a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí TSQUASHeq (equalInType i w'' A) w'' a b) e'))
    aw w1 e1 z h = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 k y ‚Üí k) (equalInTypeTSQUASH‚Üí (z , h))




equalInTypeTTRUNC‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                       ‚Üí equalInType i w (#TTRUNC A) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TTRUNCeq (equalInType i w' A) w' a b)
{-# TERMINATING #-}
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (TTRUNCneqNAT (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (TTRUNCneqQNAT (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (TTRUNCneqLT (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (TTRUNCneqQLT (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (TTRUNCneqFREE (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TTRUNCneqPI (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TTRUNCneqSUM (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TTRUNCneqSET (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TTRUNCneqTUNION (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (TTRUNCneqEQ (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (TTRUNCneqUNION (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (TTRUNCneqQTUNION (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TTRUNCneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' a b ‚Üí TTRUNCeq (equalInType i w' A) w' a b)
    aw w1 e1 p = TTRUNCeq-ext-eq (Œª a1 a2 ea ‚Üí eqInType‚ÜíequalInType (#TTRUNCinj {A} {A1} (#compAllVal x tt)) (eqtA w1 e1) ea) p
--(c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , ea) =
--      c‚ÇÉ , a‚ÇÅ , a‚ÇÇ , isv‚ÇÅ , isv‚ÇÇ , c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#TTRUNCinj {A} {A1} (#compAllVal x tt)) (eqtA w1 e1) ea
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TTRUNCneqTCONST (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TTRUNCneqSUBSING (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (TTRUNCneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTUNIV i‚ÇÅ p x x‚ÇÅ , eqi) = ‚ä•-elim (TTRUNCneqUNIV (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TTRUNCneqLIFT (compAllVal x‚ÇÅ tt))
equalInTypeTTRUNC‚Üí {w} {i} {a} {b} {A} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType i w' (#TTRUNC A))
                        ‚Üí equalTerms i w' z a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí TTRUNCeq (equalInType i w'' A) w'' a b) e'))
    aw w1 e1 z h = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 k y ‚Üí k) (equalInTypeTTRUNC‚Üí (z , h))



equalInType-NAT‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí equalInType i w #NAT a b
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí NATeq w' a b)
equalInType-NAT‚Üí i w a b (eqt , eqi) =
  eqInType-‚áõ-NAT (uni i) w #NAT #NAT a b (#compAllRefl #NAT w) (#compAllRefl #NAT w) eqt eqi




TSQUASH-eq-NAT‚ÜíweakMonEq : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                            ‚Üí TSQUASH-eq (equalInType i w #NAT) w a b
                            ‚Üí Lift (lsuc L) (‚áìsame‚Ñï w ‚åú a ‚åù ‚åú b ‚åù)
TSQUASH-eq-NAT‚ÜíweakMonEq i w a b (TSQUASH-eq-base a1 a2 i1 i2 c1 c2 ea) =
  Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw j)
  where
    j : ‚ñ°¬∑ w (Œª w' _ ‚Üí NATeq w' a1 a2)
    j = equalInType-NAT‚Üí i w a1 a2 ea

    aw : ‚àÄùïé w (Œª w1 e1 ‚Üí NATeq w1 a1 a2 ‚Üí Lift (lsuc L) (‚áìsame‚Ñï w ‚åú a ‚åù ‚åú b ‚åù))
    aw w1 e1 (n , c‚ÇÅ' , c‚ÇÇ') = lift (n , ‚àºC!‚Üí#‚áì {w} {a} {#NUM n} tt c‚ÇÅ'' ,  ‚àºC!‚Üí#‚áì {w} {b} {#NUM n} tt c‚ÇÇ'')
      where
        c‚ÇÅ'' : ‚àºC! w a (#NUM n)
        c‚ÇÅ'' = ‚â°R‚Üí‚àºC! {w} {a} {a1} {#NUM n} (#‚áõ‚Üí‚â° c‚ÇÅ' i1) c1

        c‚ÇÇ'' : ‚àºC! w b (#NUM n)
        c‚ÇÇ'' = ‚â°R‚Üí‚àºC! {w} {b} {a2} {#NUM n} (#‚áõ‚Üí‚â° c‚ÇÇ' i2) c2
TSQUASH-eq-NAT‚ÜíweakMonEq i w a b (TSQUASH-eq-trans t h1 h2) =
  lift-‚áìsame‚Ñï-trans (TSQUASH-eq-NAT‚ÜíweakMonEq i w a t h1) (TSQUASH-eq-NAT‚ÜíweakMonEq i w t b h2)



equalInType-QTNAT‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                      ‚Üí equalInType i w #QTNAT a b
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' a b)
equalInType-QTNAT‚Üí i w a b eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üí‚ñ°‚àÄùïé M eqj) --Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üí‚ñ°‚àÄùïé M eqj)
  where
    eqj : ‚ñ°¬∑ w (Œª w' _ ‚Üí TSQUASHeq (equalInType i w' #NAT) w' a b)
    eqj = equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {#NAT} eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí ‚àÄùïé w' (‚ÜëwPred (Œª w'' e ‚Üí TSQUASHeq (equalInType i w'' #NAT) w'' a b) e')
                        ‚Üí #weakMonEq w' a b)
    aw w1 e1 h w2 e2 = TSQUASH-eq-NAT‚ÜíweakMonEq i w2 a b (‚ÜíTSQUASH-eq (h w2 e2))




equalInTypeTCONST‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                       ‚Üí equalInType i w (#TCONST A) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TCONSTeq (equalInType i w' A) w' a b)
{-# TERMINATING #-}
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (TCONSTneqNAT (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (TCONSTneqQNAT (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (TCONSTneqLT (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (TCONSTneqQLT (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (TCONSTneqFREE (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TCONSTneqPI (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TCONSTneqSUM (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TCONSTneqSET (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (TCONSTneqTUNION (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (TCONSTneqEQ (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (TCONSTneqUNION (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (TCONSTneqQTUNION (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TCONSTneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TCONSTneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' a b ‚Üí TCONSTeq (equalInType i w' A) w' a b)
    aw w1 e1 p = TCONSTeq-ext-eq (Œª a1 a2 ea ‚Üí eqInType‚ÜíequalInType {_} {_} {_} {_} {_} {a1} {a2} (#TCONSTinj {A} {A1} (#compAllVal x tt)) (eqtA w1 e1) ea) p
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TCONSTneqSUBSING (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (TCONSTneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTUNIV i‚ÇÅ p x x‚ÇÅ , eqi) = ‚ä•-elim (TCONSTneqUNIV (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (TCONSTneqLIFT (compAllVal x‚ÇÅ tt))
equalInTypeTCONST‚Üí {w} {i} {a} {b} {A} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType i w' (#TCONST A))
                        ‚Üí equalTerms i w' z a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí TCONSTeq (equalInType i w'' A) w'' a b) e'))
    aw w1 e1 z h = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 k y ‚Üí k) (equalInTypeTCONST‚Üí (z , h))



equalInTypeSUBSING‚Üí : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                       ‚Üí equalInType i w (#SUBSING A) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí SUBSINGeq (equalInType i w' A) a b)
{-# TERMINATING #-}
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUBSINGneqNAT (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUBSINGneqQNAT (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUBSINGneqLT (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUBSINGneqQLT (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (SUBSINGneqFREE (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUBSINGneqPI (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUBSINGneqSUM (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUBSINGneqSET (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUBSINGneqTUNION (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (SUBSINGneqEQ (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUBSINGneqUNION (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUBSINGneqQTUNION (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUBSINGneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUBSINGneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUBSINGneqTCONST (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) a b ‚Üí SUBSINGeq (equalInType i w' A) a b)
    aw w1 e1 p = SUBSINGeq-ext-eq (Œª a1 a2 ea ‚Üí eqInType‚ÜíequalInType {_} {_} {_} {_} {_} {a1} {a2} (#SUBSINGinj {A} {A1} (#compAllVal x tt)) (eqtA w1 e1) ea) p
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (SUBSINGneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTUNIV i‚ÇÅ p x x‚ÇÅ , eqi) = ‚ä•-elim (SUBSINGneqUNIV (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUBSINGneqLIFT (compAllVal x‚ÇÅ tt))
equalInTypeSUBSING‚Üí {w} {i} {a} {b} {A} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType i w' (#SUBSING A))
                        ‚Üí equalTerms i w' z a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí SUBSINGeq (equalInType i w'' A) a b) e'))
    aw w1 e1 z h = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 k y ‚Üí k) (equalInTypeSUBSING‚Üí (z , h))



TCONSTeq-NAT‚ÜíweakMonEq : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                          ‚Üí TCONSTeq (equalInType i w #NAT) w a b
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' a b)
TCONSTeq-NAT‚ÜíweakMonEq i w a b (h , c‚ÇÅ , c‚ÇÇ) =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 z ‚Üí #strongMonEq‚Üí#‚áõ!same‚Ñï {w1} {a} {b} (‚àÄùïé-mon e1 c‚ÇÅ) (‚àÄùïé-mon e1 c‚ÇÇ) z) j
  where
    j : ‚ñ°¬∑ w (Œª w' _ ‚Üí NATeq w' a b)
    j = equalInType-NAT‚Üí i w a b h


equalInType-NAT!‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí equalInType i w #NAT! a b
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' a b)
equalInType-NAT!‚Üí i w a b eqi =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw eqj)
  where
    eqj : ‚ñ°¬∑ w (Œª w' _ ‚Üí TCONSTeq (equalInType i w' #NAT) w' a b)
    eqj = equalInTypeTCONST‚Üí {w} {i} {a} {b} {#NAT} eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalInType i w' #NAT) w' a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' _ ‚Üí #‚áõ!same‚Ñï w'' a b) e'))
    aw w1 e1 h = Mod.‚àÄùïé-‚ñ°Func M (Œª w2 e2 h z ‚Üí h) (TCONSTeq-NAT‚ÜíweakMonEq i w1 a b h)



TSQUASH-eq-NAT!‚ÜíweakMonEq! : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                             ‚Üí TSQUASH-eq (equalInType i w #NAT!) w a b
                             ‚Üí Lift (lsuc L) (‚áì!same‚Ñï w ‚åú a ‚åù ‚åú b ‚åù)
TSQUASH-eq-NAT!‚ÜíweakMonEq! i w a b (TSQUASH-eq-base a1 a2 i1 i2 c1 c2 ea) =
  Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw j)
  where
    j : ‚ñ°¬∑ w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' a1 a2)
    j = equalInType-NAT!‚Üí i w a1 a2 ea

    aw : ‚àÄùïé w (Œª w1 e1 ‚Üí #‚áõ!same‚Ñï w1 a1 a2 ‚Üí Lift (lsuc L) (‚áì!same‚Ñï w ‚åú a ‚åù ‚åú b ‚åù))
    aw w1 e1 (n , c‚ÇÅ' , c‚ÇÇ') = lift (n , ‚àºC!‚Üí#‚áì! {w} {a} {#NUM n} tt c‚ÇÅ'' ,  ‚àºC!‚Üí#‚áì! {w} {b} {#NUM n} tt c‚ÇÇ'')
      where
        c‚ÇÅ'' : ‚àºC! w a (#NUM n)
        c‚ÇÅ'' = ‚â°R‚Üí‚àºC! {w} {a} {a1} {#NUM n} (#‚áõ!‚Üí‚â° c‚ÇÅ' i1) c1

        c‚ÇÇ'' : ‚àºC! w b (#NUM n)
        c‚ÇÇ'' = ‚â°R‚Üí‚àºC! {w} {b} {a2} {#NUM n} (#‚áõ!‚Üí‚â° c‚ÇÇ' i2) c2
TSQUASH-eq-NAT!‚ÜíweakMonEq! i w a b (TSQUASH-eq-trans t h1 h2) =
  lift-‚áì!same‚Ñï-trans (TSQUASH-eq-NAT!‚ÜíweakMonEq! i w a t h1) (TSQUASH-eq-NAT!‚ÜíweakMonEq! i w t b h2)



equalInType-QTNAT!‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                      ‚Üí equalInType i w #QTNAT! a b
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq! w' a b)
equalInType-QTNAT!‚Üí i w a b eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üí‚ñ°‚àÄùïé M eqj) --Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üí‚ñ°‚àÄùïé M eqj)
  where
    eqj : ‚ñ°¬∑ w (Œª w' _ ‚Üí TSQUASHeq (equalInType i w' #NAT!) w' a b)
    eqj = equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {#NAT!} eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí ‚àÄùïé w' (‚ÜëwPred (Œª w'' e ‚Üí TSQUASHeq (equalInType i w'' #NAT!) w'' a b) e')
                        ‚Üí #weakMonEq! w' a b)
    aw w1 e1 h w2 e2 = TSQUASH-eq-NAT!‚ÜíweakMonEq! i w2 a b (‚ÜíTSQUASH-eq (h w2 e2))


#strongMonEq-#N0 : (w : ùïé¬∑) ‚Üí #strongMonEq w #N0 #N0
#strongMonEq-#N0 w = #strongMonEq-#NUM w 0


#strongMonEq-#N1 : (w : ùïé¬∑) ‚Üí #strongMonEq w #N1 #N1
#strongMonEq-#N1 w = #strongMonEq-#NUM w 1


‚ÜíequalInType-NAT : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí NATeq w' a b)
                    ‚Üí equalInType i w #NAT a b
‚ÜíequalInType-NAT i w a b j = eqTypesNAT , j



‚ÜíequalInType-QNAT : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' a b)
                    ‚Üí equalInType i w #QNAT a b
‚ÜíequalInType-QNAT i w a b j = eqTypesQNAT , j



equalInType-QNAT‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                     ‚Üí equalInType i w #QNAT a b
                     ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' a b)
equalInType-QNAT‚Üí i w a b (eqt , eqi) =
  eqInType-‚áõ-QNAT (uni i) w #QNAT #QNAT a b (#compAllRefl #QNAT w) (#compAllRefl #QNAT w) eqt eqi




NUM-equalInType-QNAT : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #QNAT (#NUM k) (#NUM k)
NUM-equalInType-QNAT i w k = eqTypesQNAT , Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakMonEq-#NUM w' k)


equalInTypeN0 : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType i w #NAT #N0 #N0
equalInTypeN0 i w = NUM-equalInType-NAT i w 0


equalInTypeN1 : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType i w #NAT #N1 #N1
equalInTypeN1 i w = NUM-equalInType-NAT i w 1


eqTypesFALSE : {w : ùïé¬∑} {i : ‚Ñï}
               ‚Üí equalTypes i w #FALSE #FALSE
eqTypesFALSE {w} {i} rewrite #FALSE‚â°#EQ =
  eqTypesEQ‚Üê
    eqTypesNAT
    (equalInTypeN0 i w)
    (equalInTypeN1 i w)


eqTypesNEG‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
               ‚Üí equalTypes i w A B
               ‚Üí equalTypes i w (#NEG A) (#NEG B)
eqTypesNEG‚Üê {w} {i} {A} {B} eqt rewrite #NEG‚â°#FUN A | #NEG‚â°#FUN B =
  eqTypesFUN‚Üê eqt eqTypesFALSE


eqTypesUniv : (w : ùïé¬∑) (n i : ‚Ñï) (p : i < n) ‚Üí equalTypes n w (#UNIV i) (#UNIV i)
eqTypesUniv w n i p = EQTUNIV i p (compAllRefl (UNIV i) w) (compAllRefl (UNIV i) w)



‚àÄùïé-‚ñ°¬∑-#strongMonEq-#N0 : (w : ùïé¬∑) ‚Üí ‚àÄùïé w (Œª w' e ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí #strongMonEq w'' #N0 #N0))
‚àÄùïé-‚ñ°¬∑-#strongMonEq-#N0 w w1 e1 = Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí #strongMonEq-#N0 w2)


‚àÄùïé-‚ñ°¬∑-#‚áõ!same‚Ñï-#N0 : (w : ùïé¬∑) ‚Üí ‚àÄùïé w (Œª w' e ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí #‚áõ!same‚Ñï w'' #N0 #N0))
‚àÄùïé-‚ñ°¬∑-#‚áõ!same‚Ñï-#N0 w w1 e1 = Mod.‚àÄùïé-‚ñ° M (Œª w2 e2 ‚Üí #‚áõ!same‚Ñï-#N0 w2)


eqTypesTRUE : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #TRUE #TRUE
eqTypesTRUE {w} {i} =
  EQTEQ #N0 #N0 #N0 #N0 #NAT #NAT
        (#compAllRefl #TRUE w) (#compAllRefl #TRUE w)
        (eqTypes-mon (uni i) eqTypesNAT)
        (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqTypesNAT))
        (‚àÄùïé-‚ñ°¬∑-#strongMonEq-#N0 w) --(‚àÄùïé-‚ñ°¬∑-#‚áõ!same‚Ñï-#N0 w)
        (‚àÄùïé-‚ñ°¬∑-#strongMonEq-#N0 w) --(‚àÄùïé-‚ñ°¬∑-#‚áõ!same‚Ñï-#N0 w)





eqTypesSQUASH‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w (#SQUASH A) (#SQUASH B)
eqTypesSQUASH‚Üê {w} {i} {A} {B} eqt rewrite #SQUASH‚â°#SET A | #SQUASH‚â°#SET B = eqt1
  where
    eqb : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #TRUE a‚ÇÅ a‚ÇÇ ‚Üí equalTypes i w' (sub0 a‚ÇÅ ‚åû A ‚åü) (sub0 a‚ÇÇ ‚åû B ‚åü))
    eqb w1 e1 a‚ÇÅ a‚ÇÇ eqa rewrite sub0‚åû‚åü a‚ÇÅ A | sub0‚åû‚åü a‚ÇÇ B = eqTypes-mon (uni i) eqt w1 e1

    eqt1 : equalTypes i w (#SET #TRUE ‚åû A ‚åü) (#SET #TRUE ‚åû B ‚åü)
    eqt1 = eqTypesSET‚Üê (eqTypes-mon (uni i) eqTypesTRUE) eqb


eqTypesUNION‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B C D : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w C D
                  ‚Üí equalTypes i w (#UNION A C) (#UNION B D)
eqTypesUNION‚Üê {w} {i} {A} {B} {C} {D} eqt1 eqt2 =
  EQTUNION A C B D (#compAllRefl (#UNION A C) w) (#compAllRefl (#UNION B D) w)
           (eqTypes-mon (uni i) eqt1) (eqTypes-mon (uni i) eqt2)
           (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqt1))
           (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqt2))


eqTypesQTUNION‚Üê : {w : ùïé¬∑} {i : ‚Ñï} {A B C D : CTerm}
                  ‚Üí equalTypes i w A B
                  ‚Üí equalTypes i w C D
                  ‚Üí equalTypes i w (#QTUNION A C) (#QTUNION B D)
eqTypesQTUNION‚Üê {w} {i} {A} {B} {C} {D} eqt1 eqt2 =
  EQTQTUNION A C B D (#compAllRefl (#QTUNION A C) w) (#compAllRefl (#QTUNION B D) w)
           (eqTypes-mon (uni i) eqt1) (eqTypes-mon (uni i) eqt2)
           (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqt1))
           (wPredExtIrr-eqInType (eqTypes-mon (uni i) eqt2))


equalInType‚ÜíequalTypes-aux : (n i : ‚Ñï) (p : i < n) (w : ùïé¬∑) (a b : CTerm)
                              ‚Üí equalInType n w (#UNIV i) a b
                              ‚Üí equalTypes i w a b
equalInType‚ÜíequalTypes-aux n i p w a b (eqt , eqi) =
  EQTBAR (eqInType-‚áõ-UNIV i n p w (#UNIV i) (#UNIV i) a b (compAllRefl (UNIV i) w) (compAllRefl (UNIV i) w) eqt eqi)



{--
equalTypes<s : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
              ‚Üí equalTypes i w a b
              ‚Üí equalTypes (suc i) w a b
equalTypes<s i w a b (EQTNAT x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTQNAT x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = {!!}
equalTypes<s i w a b (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = {!!}
equalTypes<s i w a b (EQTFREE x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTPI A1 B1 A2 B2 x x‚ÇÅ
        (Œª w' e' ‚Üí equalTypes<s i w' A1 A2 (eqta w' e'))
        (Œª w' e' a‚ÇÅ a‚ÇÇ ea ‚Üí {!!})
        {!!} {!!}
equalTypes<s i w a b (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = {!!}
equalTypes<s i w a b (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = {!!}
equalTypes<s i w a b (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2) = {!!}
equalTypes<s i w a b (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = {!!}
equalTypes<s i w a b (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) = {!!}
equalTypes<s i w a b (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) = {!!}
equalTypes<s i w a b (EQTUNIV i‚ÇÅ p x x‚ÇÅ) = {!!}
equalTypes<s i w a b (EQTBAR x) = {!!}
--}



‚â°univ‚ÜíeqTypes : {u : univs} {n : ‚Ñï} ‚Üí u ‚â° uni n ‚Üí {w : ùïé¬∑} {A B : CTerm}
                 ‚Üí eqTypes (uni n) w A B
                 ‚Üí eqTypes u w A B
‚â°univ‚ÜíeqTypes {u} {n} e {w} {A} {B} eqt rewrite e = eqt



equalTypes-LIFT : (n : ‚Ñï) (w : ùïé¬∑) (u v a b : CTerm)
                  ‚Üí u #‚áõ #LIFT a at w
                  ‚Üí v #‚áõ #LIFT b at w
                  ‚Üí equalTypes n w a b
                  ‚Üí equalTypes (suc n) w u v
equalTypes-LIFT n w u v a b c‚ÇÅ c‚ÇÇ eqt =
  EQTLIFT a b
          c‚ÇÅ c‚ÇÇ
          eqta
          exta
  where
    eqta0 : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes n w' a b)
    eqta0 w' e' = eqTypes-mon (uni n) {a} {b} eqt w' e'

    eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes (‚ÜìU (uni (suc n))) w' a b)
    eqta w' e' = ‚â°univ‚ÜíeqTypes (‚ÜìU-uni (suc n)) (eqta0 w' e')

    exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType (‚ÜìU (uni (suc n))) w (eqta w e) a b)
    exta rewrite ‚ÜìU-uni (suc n) = wPredExtIrr-eqInType eqta0



equalTypes-LIFT2 : (n : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí equalTypes n w a b
                   ‚Üí equalTypes (suc n) w (#LIFT a) (#LIFT b)
equalTypes-LIFT2 n w a b eqt =
  equalTypes-LIFT n w (#LIFT a) (#LIFT b) a b
                  (#compAllRefl (#LIFT a) w) (#compAllRefl (#LIFT b) w)
                  eqt



uniUpTo‚Üísuc : {n m : ‚Ñï} (q : m < n) ‚Üí uniUpTo n m q ‚â° uniUpTo (suc n) m (<-trans q (n<1+n n))
uniUpTo‚Üísuc {n} {m} q with m <? n
... | yes z = ‚â°uniUpTo n m q z
... | no z = ‚ä•-elim (z q)



equalTypes< : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (a b : CTerm)
              ‚Üí equalTypes i w a b
              ‚Üí equalTypes n w (#‚ÜëT p a) (#‚ÜëT p b)
equalTypes< {suc n} {i} p w a b eqt = equalTypes-LIFT n w (#‚ÜëT p a) (#‚ÜëT p b) (#‚ÜëTs p a) (#‚ÜëTs p b) (‚â°‚Üí#compAllRefl w (#‚ÜëT‚â°#‚ÜëTs p a)) (‚â°‚Üí#compAllRefl w (#‚ÜëT‚â°#‚ÜëTs p b)) eqt'
  where
    eqt' : equalTypes n w (#‚ÜëTs p a) (#‚ÜëTs p b)
    eqt' with i <? n
    ... | yes q = equalTypes< {n} {i} q w a b eqt
    ... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = eqt



equalInType‚ÜíequalTypes : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (a b : CTerm)
                          ‚Üí equalInType n w (#UNIV i) a b
                          ‚Üí equalTypes n w (#‚ÜëT p a) (#‚ÜëT p b)
equalInType‚ÜíequalTypes {n} {i} p w a b eqi = equalTypes< {n} {i} p w a b (equalInType‚ÜíequalTypes-aux n i p w a b eqi)



equalInType-PI : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
                 ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
                 ‚Üí equalInType u w (#PI A B) f g
equalInType-PI {u} {w} {A} {B} {f} {g} ha hb eqi =
  eqTypesPI‚Üê ha hb ,
  Mod.‚àÄùïé-‚ñ° M aw
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí PIeq (eqInType (uni u) w' (ha w' e))
                               (Œª a1 a2 ea ‚Üí eqInType (uni u) w' (hb w' e a1 a2 (TEQrefl-equalTypes u w' A A (ha w' e) , eqInType-extl1 A A (ha w' e) (TEQrefl-equalTypes u w' A A (ha w' e)) ea)))
--                               (Œª a1 a2 ea ‚Üí eqInType (uni u) w' (eqTypesPI‚Üê.eqtb' w' e a1 a2 ea))
                               f g)
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = eqInType-extl1 {u} {w1} {sub0 a‚ÇÅ B}
                                       (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B)
                                       (fst (eqi w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 , ea)))
                                       (hb w1 e1 a‚ÇÅ a‚ÇÇ (TEQrefl-equalTypes u w1 A A (ha w1 e1) , eqInType-extl1 A A (ha w1 e1) (TEQrefl-equalTypes u w1 A A (ha w1 e1)) ea))
                                       (snd (eqi w1 e1 a‚ÇÅ a‚ÇÇ (ha w1 e1 , ea)))



equalInType-FUN : {u : ‚Ñï} {w : ùïé¬∑} {A B f g : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' B)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' B (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
                  ‚Üí equalInType u w (#FUN A B) f g
equalInType-FUN {u} {w} {A} {B} {f} {g} ha hb i rewrite #FUN‚â°#PI A B =
  equalInType-PI ha hb' eqi'
  where
    hb' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ ‚åû B ‚åü) (sub0 a‚ÇÇ ‚åû B ‚åü))
    hb' w1 e1 a‚ÇÅ a‚ÇÇ ea rewrite sub0‚åû‚åü a‚ÇÅ B | sub0‚åû‚åü a‚ÇÇ B = hb w1 e1

    eqi' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ ‚åû B ‚åü) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqi' w1 e1 a‚ÇÅ a‚ÇÇ ea rewrite sub0‚åû‚åü a‚ÇÅ B = i w1 e1 a‚ÇÅ a‚ÇÇ ea



{--‚ÜíequalInTypeFALSE : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                     ‚Üí ‚ñ°¬∑ w (Œª w' e' ‚Üí Lift {0‚Ñì} 1‚Ñì ‚ä•)
                     ‚Üí equalInType u w #FALSE a b
‚ÜíequalInTypeFALSE u w a b i =
  eqTypesFALSE {w} {u} ,
  Mod.‚àÄùïé-‚ñ° M aw
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí EQeq #N0 #N1 (Œª t1 t2 ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí #strongMonEq w'' t1 t2)) w' a b)
    aw w1 e1 = {!!}
--}



equalInType-NEG : {u : ‚Ñï} {w : ùïé¬∑} {A f g : CTerm}
                  ‚Üí isType u w A
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType u w' A a‚ÇÅ a‚ÇÇ)
                  ‚Üí equalInType u w (#NEG A) f g
equalInType-NEG {u} {w} {A} {f} {g} ha i rewrite #NEG‚â°#FUN A =
  equalInType-FUN (eqTypes-mon (uni u) ha) (Œª w1 e1 ‚Üí eqTypesFALSE) eqi
  where
    eqi : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' #FALSE (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqi w1 e1 a‚ÇÅ a‚ÇÇ ea = ‚ä•-elim (i w1 e1 a‚ÇÅ a‚ÇÇ ea)



equalInType-local : {u : ‚Ñï} {w : ùïé¬∑} {T a b : CTerm}
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí equalInType u w' T a b)
                    ‚Üí equalInType u w T a b
equalInType-local {u} {w} {T} {a} {b} i =
  EQTBAR (Mod.‚àÄùïé-‚ñ°Func M aw i) , eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí equalInType u w' T a b ‚Üí isType u w' T)
    aw w1 e1 ei = fst ei

    aw' : ‚àÄùïé w (Œª w' e' ‚Üí (x : equalInType u w' T a b) {--‚Üí atbar i w' e' x--} ‚Üí equalTerms u w' (fst x) a b)
    aw' w1 e1 x {--at--} = equalInType‚ÜíeqInType refl {fst x} x


    aw'' : ‚àÄùïé w (Œª w' e' ‚Üí (x : equalInType u w' T a b) (y : isType u w' T)
                          ‚Üí equalTerms u w' (fst x) a b
                          ‚Üí equalTerms u w' y a b)
    aw'' w1 e1 x y ei = eqInType-extl1 T T (fst x) y ei

    eqi : equalTerms u w (EQTBAR (Mod.‚àÄùïé-‚ñ°Func M aw i)) a b
    eqi = ‚ñ°'-change W M i (Mod.‚àÄùïé-‚ñ°Func M aw i) aw'' (Mod.‚àÄùïé-‚ñ°-‚ñ°' M i aw')

-- Used to go through with just??? Mod.‚àÄùïé-‚ñ°-‚ñ°' M i aw'


equalInType-LIFT‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (T a b : CTerm)
                     ‚Üí equalInType (suc n) w (#LIFT T) a b
                     ‚Üí equalInType n w T a b
{-# TERMINATING #-}
equalInType-LIFT‚Üí n w T a b (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqNAT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (LIFTneqLT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (LIFTneqQLT (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqFREE (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqPI (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqSUM (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqSET (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (LIFTneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (LIFTneqEQ (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (LIFTneqUNION (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (LIFTneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (LIFTneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (LIFTneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (LIFTneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (LIFTneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (LIFTneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (LIFTneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-LIFT‚Üí n w T a b (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi)
  rewrite #LIFTinj {A1} {T} (sym (#compAllVal x tt))
        | #LIFTinj {A2} {T} (sym (#compAllVal x‚ÇÅ tt))
        | ‚ÜìU-uni (suc n) =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M (Œª w' e' z ‚Üí eqInType‚ÜíequalInType refl (eqtA w' e') z) eqi)
equalInType-LIFT‚Üí n w T a b (EQTBAR x , eqi) =
  equalInType-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
    where
      aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni (suc n)) w' (#LIFT T) (#LIFT T))
                          {--‚Üí (at : atbar x w' e' z)--}
                          ‚Üí equalTerms (suc n) w' z a b
                          ‚Üí equalInType n w' T a b)
      aw w' e' z {--at--} j = equalInType-LIFT‚Üí n w' T a b (z , j)



‚ÜëT# : {i n : ‚Ñï} (p : i < n) (t : CTerm) ‚Üí CTerm
‚ÜëT# {i} {suc n} p t with i <? n
... | yes q = #LIFT (‚ÜëT# q t)
... | no q = #LIFT t -- i ‚â° n


‚ÜëT‚â°‚ÜëT# : {i n : ‚Ñï} (p : i < n) (t : CTerm) ‚Üí ‚ÜëT p ‚åú t ‚åù ‚â° ‚åú ‚ÜëT# p t ‚åù
‚ÜëT‚â°‚ÜëT# {i} {suc n} p t with i <? n
... | yes q rewrite ‚ÜëT‚â°‚ÜëT# q t = refl
... | no q = refl



#‚ÜëT‚â°‚ÜëT# : {i n : ‚Ñï} (p : i < n) (t : CTerm) ‚Üí #‚ÜëT p t ‚â° ‚ÜëT# p t
#‚ÜëT‚â°‚ÜëT# {i} {n} p t = CTerm‚â° (‚ÜëT‚â°‚ÜëT# p t)



equalInType-‚ÜëT#‚Üí : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType n w (‚ÜëT# p T) a b
                    ‚Üí equalInType i w T a b
equalInType-‚ÜëT#‚Üí {suc n} {i} p w T a b eqi with i <? n
... | yes q = equalInType-‚ÜëT#‚Üí q w T a b (equalInType-LIFT‚Üí n w (‚ÜëT# q T) a b eqi)
... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = equalInType-LIFT‚Üí n w T a b eqi



equalInType-#‚ÜëT‚Üí : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType n w (#‚ÜëT p T) a b
                    ‚Üí equalInType i w T a b
equalInType-#‚ÜëT‚Üí {suc n} {i} p w T a b eqi rewrite #‚ÜëT‚â°‚ÜëT# p T = equalInType-‚ÜëT#‚Üí p w T a b eqi



isFam : (u : ‚Ñï) (w : ùïé¬∑) (A : CTerm) (B : CTerm0) (F G : CTerm ‚Üí CTerm) ‚Üí Set(lsuc(L))
isFam u w A B F G =
    isType u w A
  √ó ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
  √ó ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (F a‚ÇÅ) (G a‚ÇÇ))


isFam-local : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {F G : CTerm ‚Üí CTerm}
              ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí isFam u w' A B F G)
              ‚Üí isFam u w A B F G
isFam-local {u} {w} {A} {B} {F} {G} i =
  p1 , p2 , p3
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí isFam u w' A B F G ‚Üí eqTypes (uni u) w' A A)
    aw1 w' e' j = fst j

    p1 : isType u w A
    p1 = eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M aw1 i)

    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
    p2 w' e' a‚ÇÅ a‚ÇÇ eqi =
      eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M aw2 (Mod.‚Üë‚ñ° M i e'))
      where
        aw2 : ‚àÄùïé w' (Œª w' _ ‚Üí isFam u w' A B F G ‚Üí eqTypes (uni u) w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
        aw2 w'' e'' j = proj‚ÇÅ (snd j) w'' (‚äë-refl¬∑ w'') a‚ÇÅ a‚ÇÇ (equalInType-mon eqi w'' e'')


    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (F a‚ÇÅ) (G a‚ÇÇ))
    p3 w' e' a‚ÇÅ a‚ÇÇ eqi =
      equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw3 (Mod.‚Üë‚ñ° M i e'))
      where
        aw3 : ‚àÄùïé w' (Œª w'' e'' ‚Üí ‚ÜëwPred (Œª w''' e ‚Üí isFam u w''' A B F G) e' w'' e'' ‚Üí equalInType u w'' (sub0 a‚ÇÅ B) (F a‚ÇÅ) (G a‚ÇÇ))
        aw3 w'' e'' j = snd (snd j) w'' (‚äë-refl¬∑ w'') a‚ÇÅ a‚ÇÇ (equalInType-mon eqi w'' e'')


equalInType-PI‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                   ‚Üí equalInType u w (#PI A B) f g
                   ‚Üí isFam u w A B (#APPLY f) (#APPLY g)
{-# TERMINATING #-}
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqNAT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (PIneqLT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (PIneqQLT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqFREE (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) =
  ‚â°CTerm‚ÜíeqTypes (sym (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt))) (sym (#PIinj1 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))) (eqta w (‚äë-refl¬∑ w)) ,
  eqtb' ,
  eqi'
  where
    eqtb' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
    eqtb' w1 e1 a‚ÇÅ a‚ÇÇ ea =
      ‚â°CTerm‚ÜíeqTypes
        (‚Üí‚â°sub0 (sym (#PIinj2 {A} {B} {A1} {B1} (#compAllVal x tt))))
        (‚Üí‚â°sub0 (sym (#PIinj2 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))))
        (eqtb w1 e1 a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w1 e1} ea))

    eqi' : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    eqi' w1 e1 a‚ÇÅ a‚ÇÇ ea = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üë‚ñ° M eqi e1))
      where
        aw : ‚àÄùïé w1 (Œª w' e' ‚Üí ‚ÜëwPred (Œª w'' e ‚Üí PIeq (eqInType (uni u) w'' (eqta w'' e))
                                                       (Œª a1 a2 eqa ‚Üí eqInType (uni u) w'' (eqtb w'' e a1 a2 eqa))
                                                       f g) e1 w' e'
                             ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
        aw w' e' h =
          eqInType‚ÜíequalInType
            (‚Üí‚â°sub0 (#PIinj2 {A} {B} {A1} {B1} (#compAllVal x tt)))
            (eqtb w' (‚äë-trans¬∑ e1 e') a‚ÇÅ a‚ÇÇ
                  (equalInType‚ÜíeqInType (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w' (‚äë-trans¬∑ e1 e')} (equalInType-mon ea w' e')))
            (h a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType (#PIinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w' (‚äë-trans¬∑ e1 e')} (equalInType-mon ea w' e')))

equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (PIneqSUM (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (PIneqSET (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (PIneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (PIneqEQ (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (PIneqUNION (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (PIneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (PIneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (PIneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (PIneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-PI‚Üí {u} {w} {A} {B} {f} {g} (EQTBAR x , eqi) =
  isFam-local {u} {w} {A} {B} {#APPLY f} {#APPLY g} (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni u) w' (#PI A B) (#PI A B))
                        {--‚Üí atbar x w' e' z--}
                        ‚Üí equalTerms u w' z f g
                        ‚Üí isFam u w' A B (#APPLY f) (#APPLY g))
    aw w' e' z {--at--} j = equalInType-PI‚Üí (z , j)

{-- (Mod.‚àÄùïé-‚ñ°Func M aw x)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí eqTypes (uni u) w' (#PI A B) (#PI A B)
                        ‚Üí isFam u w' A B (#APPLY f) (#APPLY g))
    aw w' e' eqt = {!!}
--}

{-- j'
  where
    eqta : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes u w' A A)
    eqta w1 e1 = {!!}

    eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí equalTerms u w' (eqta w' e) a1 a2 ‚Üí equalTypes u w' (sub0 a1 B) (sub0 a2 B))
    eqtb = {!!}

    j : ‚ñ°¬∑ w (Œª w' e ‚Üí PIeq (equalTerms u w' (eqta w' e)) (Œª a‚ÇÅ a‚ÇÇ eqa ‚Üí equalTerms u w' (eqtb w' e a‚ÇÅ a‚ÇÇ eqa)) f g)
    j = eqInType-‚áõ-PI (uni u) w (#PI A B) (#PI A B) A A B B f g eqta eqtb {!!} {!!} {!!} {!!} {!!} {!!} {!!} {!!}

    j' : ‚ñ°¬∑ w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ B) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    j' = {!!}
--}



equalInType-SQUASH-aux‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A a b : CTerm}
                           (eqt : isType n w (#SET #TRUE ‚åû A ‚åü))
                           ‚Üí equalTerms n w eqt a b
                           ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t))
{-# TERMINATING #-}
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTNAT x x‚ÇÅ) eqi = ‚ä•-elim (SETneqNAT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTQNAT x x‚ÇÅ) eqi = ‚ä•-elim (SETneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi = ‚ä•-elim (SETneqLT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi = ‚ä•-elim (SETneqQLT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTFREE x x‚ÇÅ) eqi = ‚ä•-elim (SETneqFREE (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi = ‚ä•-elim (SETneqPI (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi = ‚ä•-elim (SETneqSUM (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (eqInType (uni n) w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí eqInType (uni n) w' (eqtb w' e' a1 a2 eqa)) a b
                        ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t))
    aw w' e' (t , ea , eb) =
      t , eqInType‚ÜíequalInType (sym (trans (‚Üí‚â°sub0 (sym (#SETinj2 {#TRUE} {‚åû A ‚åü} {A1} {B1} (#compAllVal x tt)))) (sub0‚åû‚åü a A)))
                                (eqtb w' e' a b ea)
                                eb
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi = ‚ä•-elim (SETneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2) eqi = ‚ä•-elim (SETneqEQ (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi = ‚ä•-elim (SETneqUNION (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi = ‚ä•-elim (SETneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) eqi = ‚ä•-elim (SETneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTUNIV i p x x‚ÇÅ) eqi = ‚ä•-elim (SETneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) eqi = ‚ä•-elim (SETneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-SQUASH-aux‚Üí {n} {w} {A} {a} {b} (EQTBAR x) eqi =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni n) w' (#SET #TRUE ‚åû A ‚åü) (#SET #TRUE ‚åû A ‚åü))
                       {--‚Üí atbar x w' e' z--}
                       ‚Üí equalTerms n w' z a b
                       ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w'' A t t)) e'))
    aw w' e' z {--at--} j = Mod.‚àÄùïé-‚ñ°Func M (Œª w'' e'' h k ‚Üí h) i
      where
        i : ‚ñ°¬∑ w' (Œª w'' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w'' A t t))
        i = equalInType-SQUASH-aux‚Üí z j



equalInType-SQUASH‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A a b : CTerm}
                       ‚Üí equalInType n w (#SQUASH A) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí inhType n w' A)
equalInType-SQUASH‚Üí {n} {w} {A} {a} {b} (eqt , eqi) rewrite #SQUASH‚â°#SET A = equalInType-SQUASH-aux‚Üí eqt eqi



equalInType-UNION‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#UNION A B) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                          ‚Üí (a #‚áõ (#INL x) at w' √ó b #‚áõ (#INL y) at w' √ó equalInType n w' A x y)
                                             ‚äé
                                             (a #‚áõ (#INR x) at w' √ó b #‚áõ (#INR y) at w' √ó equalInType n w' B x y))))
{-# TERMINATING #-}
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (UNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq (eqInType (uni n) w' (eqtA w' e')) (eqInType (uni n) w' (eqtB w' e')) w' a b
                       ‚Üí Œ£ CTerm (Œª y ‚Üí Œ£ CTerm (Œª z
                       ‚Üí (a #‚áõ #INL y at w' √ó b #‚áõ #INL z at w' √ó equalInType n w' A y z)
                          ‚äé
                          (a #‚áõ #INR y at w' √ó b #‚áõ #INR z at w' √ó equalInType n w' B y z))))
    aw w' e' (y , z , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , u)) = y , z , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#UNIONinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqtA w' e') u)
    aw w' e' (y , z , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , u)) = y , z , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#UNIONinj2 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqtB w' e') u)
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (UNIONneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (UNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes n w' (#UNION A B) (#UNION A B))
                        {--‚Üí atbar x w' e' z--}
                        ‚Üí equalTerms n w' z a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí Œ£ CTerm (Œª y‚ÇÅ ‚Üí Œ£ CTerm (Œª y‚ÇÇ
                                                     ‚Üí (a #‚áõ #INL y‚ÇÅ at w'' √ó b #‚áõ #INL y‚ÇÇ at w'' √ó equalInType n w'' A y‚ÇÅ y‚ÇÇ)
                                                        ‚äé
                                                        (a #‚áõ #INR y‚ÇÅ at w'' √ó b #‚áõ #INR y‚ÇÇ at w'' √ó equalInType n w'' B y‚ÇÅ y‚ÇÇ))))
                                             e'))
    aw w' e' z {--at--} i = Mod.‚àÄùïé-‚ñ°Func M (Œª w'' e'' h k ‚Üí h) j
      where
        j : ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                             ‚Üí (a #‚áõ (#INL x) at w' √ó b #‚áõ (#INL y) at w' √ó equalInType n w' A x y)
                                ‚äé
                                (a #‚áõ (#INR x) at w' √ó b #‚áõ (#INR y) at w' √ó equalInType n w' B x y))))
        j = equalInType-UNION‚Üí (z , i)




equalInType-QTUNION‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#QTUNION A B) a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                          ‚Üí (a #‚áì (#INL x) at w' √ó b #‚áì (#INL y) at w' √ó equalInType n w' A x y)
                                             ‚äé
                                             (a #‚áì (#INR x) at w' √ó b #‚áì (#INR y) at w' √ó equalInType n w' B x y))))
{-# TERMINATING #-}
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (QTUNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (QTUNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (QTUNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (QTUNIONneqUNION (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí QTUNIONeq (eqInType (uni n) w' (eqtA w' e')) (eqInType (uni n) w' (eqtB w' e')) w' a b
                       ‚Üí Œ£ CTerm (Œª y ‚Üí Œ£ CTerm (Œª z
                       ‚Üí (a #‚áì #INL y at w' √ó b #‚áì #INL z at w' √ó equalInType n w' A y z)
                          ‚äé
                          (a #‚áì #INR y at w' √ó b #‚áì #INR z at w' √ó equalInType n w' B y z))))
    aw w' e' (y , z , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , u)) = y , z , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#QTUNIONinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqtA w' e') u)
    aw w' e' (y , z , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , u)) = y , z , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqInType‚ÜíequalInType (#QTUNIONinj2 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqtB w' e') u)
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (QTUNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes n w' (#QTUNION A B) (#QTUNION A B))
                        {--‚Üí atbar x w' e' z--}
                        ‚Üí equalTerms n w' z a b
                        ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí Œ£ CTerm (Œª y‚ÇÅ ‚Üí Œ£ CTerm (Œª y‚ÇÇ
                                                     ‚Üí (a #‚áì #INL y‚ÇÅ at w'' √ó b #‚áì #INL y‚ÇÇ at w'' √ó equalInType n w'' A y‚ÇÅ y‚ÇÇ)
                                                        ‚äé
                                                        (a #‚áì #INR y‚ÇÅ at w'' √ó b #‚áì #INR y‚ÇÇ at w'' √ó equalInType n w'' B y‚ÇÅ y‚ÇÇ))))
                                             e'))
    aw w' e' z {--at--} i = Mod.‚àÄùïé-‚ñ°Func M (Œª w'' e'' h k ‚Üí h) j
      where
        j : ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                             ‚Üí (a #‚áì (#INL x) at w' √ó b #‚áì (#INL y) at w' √ó equalInType n w' A x y)
                                ‚äé
                                (a #‚áì (#INR x) at w' √ó b #‚áì (#INR y) at w' √ó equalInType n w' B x y))))
        j = equalInType-QTUNION‚Üí (z , i)



equalInType-FUN‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A B : CTerm} {f g : CTerm}
                    ‚Üí equalInType u w (#FUN A B) f g
                    ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' B (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
equalInType-FUN‚Üí {u} {w} {A} {B} {f} {g} eqi rewrite #FUN‚â°#PI A B = z2
  where
    z1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' (sub0 a‚ÇÅ ‚åû B ‚åü) (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    z1 = snd (snd (equalInType-PI‚Üí eqi))

    z2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType u w' A a‚ÇÅ a‚ÇÇ ‚Üí equalInType u w' B (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ))
    z2 w' e' a‚ÇÅ a‚ÇÇ ea = ‚â°CTerm‚ÜíequalInType (sub0‚åû‚åü a‚ÇÅ B ) (z1 w' e' a‚ÇÅ a‚ÇÇ ea)


¬¨equalInType-FALSE : {w : ùïé¬∑} {i : ‚Ñï} {a b : CTerm} ‚Üí ¬¨ equalInType i w #FALSE a b
{-# TERMINATING #-}
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqNAT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqQNAT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqLT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqQLT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqFREE (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqPI (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSUM (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSET (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqTUNION (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi)
  rewrite #FALSE/EQinj1 {a1} {a2} {A} (#compAllVal x tt)
        | #FALSE/EQinj2 {a1} {a2} {A} (#compAllVal x tt)
        | #FALSE/EQinj3 {a1} {a2} {A} (#compAllVal x tt)
        | #FALSE/EQinj1 {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)
        | #FALSE/EQinj2 {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)
        | #FALSE/EQinj3 {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)
  =
  lower {0‚Ñì} {lsuc(L)} (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw e))
  where
    e : ‚ñ°¬∑ w (Œª w' e ‚Üí EQeq #N0 #N1 (equalTerms i w' (eqtA w' e)) w' a b)
    e = eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq #N0 #N1 (equalTerms i w' (eqtA w' e')) w' a b ‚Üí Lift (lsuc(L)) ‚ä•)
    aw w' e' ea = Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw' z)
      where
        z : ‚ñ°¬∑ w' (Œª w'' e ‚Üí NATeq w'' #N0 #N1)
        z = eqInType-‚áõ-NAT (uni i) w' #NAT #NAT #N0 #N1 (#compAllRefl #NAT w') (#compAllRefl #NAT w') (eqtA w' e') ea

        aw' : ‚àÄùïé w' (Œª w'' e'' ‚Üí NATeq w'' #N0 #N1 ‚Üí Lift (lsuc(L)) ‚ä•)
        aw' w'' e'' s = lift (¬¨#strongMonEq-N0-N1 w'' s) --(¬¨#‚áõ!same‚Ñï-N0-N1 w'' s)
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqUNION (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqQTUNION (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTSQUASH (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTTRUNC (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTCONST (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqSUBSING (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (EQneqFFDEFS (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTUNIV i‚ÇÅ p x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqUNIV (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqLIFT (compAllVal x‚ÇÅ tt))
¬¨equalInType-FALSE {w} {i} {a} {b} (EQTBAR x , eqi) =
  lower {0‚Ñì} {lsuc(L)} (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : eqTypes (uni i) w' #FALSE #FALSE) {--‚Üí atbar x w' e' z--} ‚Üí equalTerms i w' z a b ‚Üí Lift (lsuc(L)) ‚ä•)
    aw w' e' z {--at--} j = lift (¬¨equalInType-FALSE (z , j))



equalInType-NEG‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {f g : CTerm}
                    ‚Üí equalInType u w (#NEG A) f g
                    ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType u w' A a‚ÇÅ a‚ÇÇ)
equalInType-NEG‚Üí {u} {w} {A} {f} {g} eqi w' e' a‚ÇÅ a‚ÇÇ ea rewrite #NEG‚â°#FUN A = ¬¨equalInType-FALSE z
  where
    z : equalInType u w' #FALSE (#APPLY f a‚ÇÅ) (#APPLY g a‚ÇÇ)
    z = equalInType-FUN‚Üí eqi w' e' a‚ÇÅ a‚ÇÇ ea



‚â°univ‚ÜíeqInType : {u : univs} {n : ‚Ñï} ‚Üí u ‚â° uni n ‚Üí {w : ùïé¬∑} {A B a b : CTerm}
                  ‚Üí (eqt‚ÇÅ : eqTypes (uni n) w A B)
                  ‚Üí eqInType (uni n) w eqt‚ÇÅ a b
                  ‚Üí (eqt‚ÇÇ : eqTypes u w A B)
                  ‚Üí eqInType u w eqt‚ÇÇ a b
‚â°univ‚ÜíeqInType {u} {n} e {w} {A} {B} {a} {b} eqt‚ÇÅ eqi eqt‚ÇÇ rewrite e =
  eqInType-extl1 B B eqt‚ÇÅ eqt‚ÇÇ eqi



equalInType-LIFT‚Üê : (n : ‚Ñï) (w : ùïé¬∑) (T a b : CTerm)
                     ‚Üí equalInType n w T a b
                     ‚Üí equalInType (suc n) w (#LIFT T) a b
equalInType-LIFT‚Üê n w T a b eqi =
  equalTypes-LIFT n w (#LIFT T) (#LIFT T) T T (#compAllRefl (#LIFT T) w) (#compAllRefl (#LIFT T) w) (fst eqi) ,
  j
  where
    eqta0 : ‚àÄùïé w (Œª w' _ ‚Üí equalTypes n w' T T)
    eqta0 w' e' = eqTypes-mon (uni n) {T} {T} (fst eqi) w' e'

    eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes (‚ÜìU (uni (suc n))) w' T T)
    eqta w' e' = ‚â°univ‚ÜíeqTypes (‚ÜìU-uni (suc n)) (eqta0 w' e')

    j : ‚ñ°¬∑ w (Œª w' e ‚Üí eqInType (‚ÜìU (uni (suc n))) w' (eqta w' e) a b)
    j = Mod.‚àÄùïé-‚ñ° M aw
      where
        aw : ‚àÄùïé w (Œª w' e ‚Üí eqInType (‚ÜìU (uni (suc n))) w' (eqta w' e) a b)
        aw w' e' = ‚â°univ‚ÜíeqInType (‚ÜìU-uni (suc n)) (eqta0 w' e') (equalInType‚ÜíeqInType refl {eqta0 w' e'} (equalInType-mon eqi w' e')) (eqta w' e')



equalInType-‚ÜëT#‚Üê : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType i w T a b
                    ‚Üí equalInType n w (‚ÜëT# p T) a b
equalInType-‚ÜëT#‚Üê {suc n} {i} p w T a b eqi with i <? n
... | yes q = equalInType-LIFT‚Üê n w (‚ÜëT# q T) a b (equalInType-‚ÜëT#‚Üê q w T a b eqi)
... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = equalInType-LIFT‚Üê n w T a b eqi



equalInType-#‚ÜëT‚Üê : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (T a b : CTerm)
                    ‚Üí equalInType i w T a b
                    ‚Üí equalInType n w (#‚ÜëT p T) a b
equalInType-#‚ÜëT‚Üê {suc n} {i} p w T a b eqi rewrite #‚ÜëT‚â°‚ÜëT# p T = equalInType-‚ÜëT#‚Üê p w T a b eqi



equalInType-NEG-‚ÜëT‚Üí : {n i : ‚Ñï} (p : i < n) {w : ùïé¬∑} {A : CTerm} {f g : CTerm}
                       ‚Üí equalInType n w (#NEG (#‚ÜëT p A)) f g
                       ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType i w' A a‚ÇÅ a‚ÇÇ)
equalInType-NEG-‚ÜëT‚Üí {n} {i} p {w} {A} {f} {g} eqi w' e' a‚ÇÅ a‚ÇÇ ea =
  z (equalInType-#‚ÜëT‚Üê p w' A a‚ÇÅ a‚ÇÇ ea)
  where
    z : ¬¨ equalInType n w' (#‚ÜëT p A) a‚ÇÅ a‚ÇÇ
    z = equalInType-NEG‚Üí eqi w' e' a‚ÇÅ a‚ÇÇ



equalTypes‚ÜíequalInType-UNIV : {n i : ‚Ñï} (p : i < n) {w : ùïé¬∑} {a b : CTerm}
                              ‚Üí equalTypes i w a b
                              ‚Üí equalInType n w (#UNIV i) a b
equalTypes‚ÜíequalInType-UNIV {n} {i} p {w} {a} {b} eqt =
  eqTypesUniv w n i p , ‚ñ°¬∑EqTypes‚ÜíuniUpTo {i} {n} {p} (Mod.‚àÄùïé-‚ñ° M (eqTypes-mon (uni i) eqt))



equalInType-SUM : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
                  ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType u w' A) (Œª a b ea ‚Üí equalInType u w' (sub0 a B)) w' f g)
                  ‚Üí equalInType u w (#SUM A B) f g
equalInType-SUM {u} {w} {A} {B} {f} {g} ha hb eqi =
  eqTypesSUM‚Üê ha hb ,
  Mod.‚àÄùïé-‚ñ°Func M
    (Œª w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) ‚Üí
      a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ ,
      equalInType‚ÜíeqInType {u} {w'} {A} {A} {A} refl {ha w' e'} ea ,
      c‚ÇÅ , c‚ÇÇ ,
      equalInType‚ÜíeqInType
        {u} {w'} {sub0 a‚ÇÅ B} {sub0 a‚ÇÅ B} {sub0 a‚ÇÇ B} refl
        {equalInTypeFam‚ÜíeqTypesFam {u} {w} {A} {B} {A} {B} ha hb w' e' a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType {u} {w'} {A} {A} {A} refl {ha w' e'} ea)}
        eb)
    eqi





‚ñ°¬∑-wPred'-#weakMonEq : (w w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (a‚ÇÅ a‚ÇÇ : CTerm)
                                   ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí #weakMonEq w'' a‚ÇÅ a‚ÇÇ)
                                   ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí #weakMonEq w'' a‚ÇÅ a‚ÇÇ) e')
‚ñ°¬∑-wPred'-#weakMonEq w w' e' a‚ÇÅ a‚ÇÇ i = Mod.‚àÄùïé-‚ñ°Func M aw i
  where
    aw : ‚àÄùïé w' (Œª w'' e'' ‚Üí #weakMonEq w'' a‚ÇÅ a‚ÇÇ ‚Üí ‚ÜëwPred' (Œª w''' e ‚Üí #weakMonEq w''' a‚ÇÅ a‚ÇÇ) e' w'' e'')
    aw w1 e1 z j = z



‚ñ°¬∑-wPred'-#strongMonEq : (w w' : ùïé¬∑) (e' : w ‚äë¬∑ w') (a‚ÇÅ a‚ÇÇ : CTerm)
                            ‚Üí ‚ñ°¬∑ w' (Œª w'' _ ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ)
                            ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ) e')
‚ñ°¬∑-wPred'-#strongMonEq w w' e' a‚ÇÅ a‚ÇÇ i = Mod.‚àÄùïé-‚ñ°Func M aw i
  where
    aw : ‚àÄùïé w' (Œª w'' e'' ‚Üí #strongMonEq w'' a‚ÇÅ a‚ÇÇ ‚Üí ‚ÜëwPred' (Œª w''' e ‚Üí #strongMonEq w''' a‚ÇÅ a‚ÇÇ) e' w'' e'')
    aw w1 e1 z j = z



equalInType-EQ : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                  ‚Üí isType u w A
                  ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq a b (equalInType u w' A) w' f g)
                  ‚Üí equalInType u w (#EQ a b A) f g
equalInType-EQ {u} {w} {a} {b} {A} {f} {g} ha eqi =
  eqTypesEQ‚Üê ha ma mb , j
  where
    ma : equalInType u w A a a
    ma = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqi)
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' A) w' f g ‚Üí equalInType u w' A a a)
        aw w' e h = equalInType-refl h

    mb : equalInType u w A b b
    mb = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqi)
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' A) w' f g ‚Üí equalInType u w' A b b)
        aw w' e h = equalInType-refl (equalInType-sym h)

    j : equalTerms u w (eqTypesEQ‚Üê ha ma mb) f g
    j = Mod.‚àÄùïé-‚ñ°Func M aw eqi
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' A) w' f g
                            ‚Üí EQeq a b (eqInType (uni u) w' (eqTypes-mon (uni u) ha w' e')) w' f g)
        aw w' e h = equalInType‚ÜíeqInType {u} {w'} {A} {A} {A} refl {eqTypes-mon (uni u) ha w' e} h




equalInType-SUM‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                    ‚Üí equalInType u w (#SUM A B) f g
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí SUMeq (equalInType u w' A) (Œª a b ea ‚Üí equalInType u w' (sub0 a B)) w' f g)
{-# TERMINATING #-}
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqNAT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUMneqLT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUMneqQLT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqFREE (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqPI (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalTerms u w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms u w' (eqtb w' e' a1 a2 eqa)) w' f g
                       ‚Üí SUMeq (equalInType u w' A) (Œª a b ea ‚Üí equalInType u w' (sub0 a B)) w' f g)
    aw w' e' (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea' , c‚ÇÅ , c‚ÇÇ , eb'
      where
        ea' : equalInType u w' A a‚ÇÅ a‚ÇÇ
        ea' = eqInType‚ÜíequalInType {u} {w'} {A} {A1} {A2} (#SUMinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) (eqta w' e') ea

        eb' : equalInType u w' (sub0 a‚ÇÅ B) b‚ÇÅ b‚ÇÇ
        eb' = eqInType‚ÜíequalInType {u} {w'} {sub0 a‚ÇÅ B} {sub0 a‚ÇÅ B1} {sub0 a‚ÇÇ B2} (‚Üí‚â°sub0 (#SUMinj2 {A} {B} {A1} {B1} (#compAllVal x tt))) (eqtb w' e' a‚ÇÅ a‚ÇÇ ea) eb

equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqSET (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (SUMneqEQ (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUMneqUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUMneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (SUMneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí {u} {w} {A} {B} {f} {g} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes u w' (#SUM A B) (#SUM A B))
                       ‚Üí equalTerms u w' z f g
                       ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí SUMeq (equalInType u w'' A) (Œª a b ea ‚Üí equalInType u w'' (sub0 a B)) w'' f g) e'))
    aw w' e' z ei = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h z ‚Üí h) (equalInType-SUM‚Üí (z , ei))



equalInType-SUM‚Üí‚ÇÇ : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                     ‚Üí equalInType u w (#SUM A B) f g
                     ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
{-# TERMINATING #-}
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqNAT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUMneqLT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (SUMneqQLT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqFREE (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqPI (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) w1 e1 a‚ÇÅ a‚ÇÇ ea =
  ‚â°CTerm‚ÜíeqTypes
    (‚Üí‚â°sub0 (sym (#SUMinj2 {A} {B} {A1} {B1} (#compAllVal x tt))))
    (‚Üí‚â°sub0 (sym (#SUMinj2 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))))
    (eqtb w1 e1 a‚ÇÅ a‚ÇÇ (equalInType‚ÜíeqInType (#SUMinj1 {A} {B} {A1} {B1} (#compAllVal x tt)) {eqta w1 e1} ea))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqSET (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (SUMneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (SUMneqEQ (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUMneqUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (SUMneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (SUMneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (SUMneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (SUMneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-SUM‚Üí‚ÇÇ {u} {w} {A} {B} {f} {g} (EQTBAR x , eqi) w1 e1 a‚ÇÅ a‚ÇÇ ea =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M (Mod.‚Üë‚ñ° M x e1) aw (Mod.‚Üë‚ñ°' M {w} {_} {Œª w' e' z ‚Üí equalTerms u w' z f g} x e1 eqi))
  where
    aw : ‚àÄùïé w1 (Œª w' e' ‚Üí (z : ‚ÜëwPred (Œª w'' e ‚Üí equalTypes u w'' (#SUM A B) (#SUM A B)) e1 w' e')
                         ‚Üí equalTerms u w' z f g ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
    aw w' e' z eqj = equalInType-SUM‚Üí‚ÇÇ (z , eqj) w' (‚äë-refl¬∑ _) a‚ÇÅ a‚ÇÇ (equalInType-mon ea w' e')



equalInType-EQ‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                  ‚Üí equalInType u w (#EQ a b A) f g
                  ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq a b (equalInType u w' A) w' f g)
{-# TERMINATING #-}
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqLT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqQLT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqFREE (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqPI (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSUM (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSET (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi)
  rewrite sym (#EQinj1 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
        | sym (#EQinj2 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
        | sym (#EQinj3 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
  = Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalTerms u w' (eqtA w' e')) w' f g
                        ‚Üí EQeq a b (equalInType u w' A) w' f g)
    aw w' e' ea = ea'
      where
        ea' : equalInType u w' A a b
        ea' = eqInType‚ÜíequalInType {u} {w'} {A} {A} {B} refl (eqtA w' e') ea

equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (EQneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí {u} {w} {a} {b} {A} {f} {g} (EQTBAR x , eqi) =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes u w' (#EQ a b A) (#EQ a b A))
                       ‚Üí equalTerms u w' z f g
                       ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí EQeq a b (equalInType u w'' A) w'' f g) e'))
    aw w' e' z ei = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h z ‚Üí h) (equalInType-EQ‚Üí (z , ei))



equalInType-EQ-QNAT‚Üí : {u : ‚Ñï} {w : ùïé¬∑} {a b : CTerm} {f g : CTerm}
                        ‚Üí equalInType u w (#EQ a b #QNAT) f g
                        ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq w' a b)
equalInType-EQ-QNAT‚Üí {u} {w} {a} {b} {f} {g} eqi =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-EQ‚Üí eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a b (equalInType u w' #QNAT) w' f g ‚Üí ‚ñ°¬∑ w' (‚ÜëwPred' (Œª w'' e ‚Üí #weakMonEq w'' a b) e'))
    aw w' e ea = Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 z _ ‚Üí z) (equalInType-QNAT‚Üí u w' a b ea)



#weakMonEq‚ÜíTSQUASHeq-#NAT : {i : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                             ‚Üí #weakMonEq! w a b
                             ‚Üí TSQUASHeq (equalInType i w #NAT) w a b
#weakMonEq‚ÜíTSQUASHeq-#NAT {i} {w} {a} {b} h =
  TSQUASH-eq‚Üí (TSQUASH-eq-base (#NUM n) (#NUM n) tt tt c‚ÇÅ c‚ÇÇ (NUM-equalInType-NAT i w n))
  where
    n : ‚Ñï
    n = fst (lower (h w (‚äë-refl¬∑ _)))

    c‚ÇÅ : ‚àºC! w a (#NUM n)
    c‚ÇÅ = #‚áì!‚Üí‚àºC! {w} {a} {#NUM n} (fst (snd (lower (h w (‚äë-refl¬∑ _)))))

    c‚ÇÇ : ‚àºC! w b (#NUM n)
    c‚ÇÇ = #‚áì!‚Üí‚àºC! {w} {b} {#NUM n} (snd (snd (lower (h w (‚äë-refl¬∑ _)))))


‚ÜíequalInType-QTNAT : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq! w' a b)
                      ‚Üí equalInType i w #QTNAT a b
‚ÜíequalInType-QTNAT i w a b j =
  ‚â°CTerm‚ÜíequalInType (sym #QTNAT‚â°) (equalInTypeTSQUASH‚Üê (Mod.‚àÄùïé-‚ñ°Func M aw j))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #weakMonEq! w' a b ‚Üí TSQUASHeq (equalInType i w' #NAT) w' a b)
    aw w' e h = #weakMonEq‚ÜíTSQUASHeq-#NAT h


NUM-equalInType-QTNAT : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #QTNAT (#NUM k) (#NUM k)
NUM-equalInType-QTNAT i w k =
  ‚ÜíequalInType-QTNAT i w (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakMonEq!-#NUM w' k))



#weakMonEq‚ÜíTSQUASHeq-#NAT! : {i : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                             ‚Üí #weakMonEq! w a b
                             ‚Üí TSQUASHeq (equalInType i w #NAT!) w a b
#weakMonEq‚ÜíTSQUASHeq-#NAT! {i} {w} {a} {b} h =
  TSQUASH-eq‚Üí (TSQUASH-eq-base (#NUM n) (#NUM n) tt tt c‚ÇÅ c‚ÇÇ (NUM-equalInType-NAT! i w n))
  where
    n : ‚Ñï
    n = fst (lower (h w (‚äë-refl¬∑ _)))

    c‚ÇÅ : ‚àºC! w a (#NUM n)
    c‚ÇÅ = #‚áì!‚Üí‚àºC! {w} {a} {#NUM n} (fst (snd (lower (h w (‚äë-refl¬∑ _)))))

    c‚ÇÇ : ‚àºC! w b (#NUM n)
    c‚ÇÇ = #‚áì!‚Üí‚àºC! {w} {b} {#NUM n} (snd (snd (lower (h w (‚äë-refl¬∑ _)))))


‚ÜíequalInType-QTNAT! : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakMonEq! w' a b)
                      ‚Üí equalInType i w #QTNAT! a b
‚ÜíequalInType-QTNAT! i w a b j =
  ‚â°CTerm‚ÜíequalInType (sym #QTNAT!‚â°) (equalInTypeTSQUASH‚Üê (Mod.‚àÄùïé-‚ñ°Func M aw j))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #weakMonEq! w' a b ‚Üí TSQUASHeq (equalInType i w' #NAT!) w' a b)
    aw w' e h = #weakMonEq‚ÜíTSQUASHeq-#NAT! h


NUM-equalInType-QTNAT! : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) ‚Üí equalInType i w #QTNAT! (#NUM k) (#NUM k)
NUM-equalInType-QTNAT! i w k =
  ‚ÜíequalInType-QTNAT! i w (#NUM k) (#NUM k) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakMonEq!-#NUM w' k))

\end{code}[hide]
