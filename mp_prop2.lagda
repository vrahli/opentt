\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode


module mp_prop2 {L  : Level}
                (W  : PossibleWorlds {L})
                (M  : Mod W)
                (C  : Choice)
                (K  : Compatible W C)
                (P  : Progress {L} W C K)
                (G  : GetChoice {L} W C K)
                (X  : ChoiceExt {L} W C)
                (N  : NewChoice {L} W C K G)
                (EC : Encode)
                (V  : ChoiceVal W C K G X N EC)
                (F  : Freeze {L} W C K P G N)
                (CB : ChoiceBar W M C K P G X N EC V F)
                (EM : ExcludedMiddle (lsuc(L)))
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
--open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)

open import ind2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (<Type ; <Type1 ; <TypeBAR)
open import ind3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalTypes-ind)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
  using (#subv)
open import terms3(W)(C)(K)(G)(X)(N)(EC)
open import terms8(W)(C)(K)(G)(X)(N)(EC)
  using (lowerVars-fvars-[0,1,2,3] ; SUM! ; #SUM!)
open import terms9

--open import nowrites(W)(C)(K)(G)(X)(N)(EC)
--  using (#¬¨Writes ; getChoice‚Ñô ; ¬¨Writes‚Üí‚áõ!INL-INR)

open import choiceProp(W)(C)(K)(G)(X)(N)(EC)
  using (getChoice‚Ñô ; ¬¨enc‚Üí‚áõ!INL-INR)

open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (eqTypes-mon)
open import props1(W)(M)(C)(K)(G)(X)(N)(EC)
--  using (equalInType‚ÜíeqInType ; eqInType‚ÜíequalInType)
open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚àÄùïé-‚ñ°Func2)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType‚ÜíequalTypes-aux ; equalInType-FUN‚Üí ; ‚â°CTerm‚ÜíequalInType ; eqTypesSQUASH‚Üê ;
         eqTypesSUM‚Üê ; isTypeNAT! ; eqTypesNEG‚Üê ; ‚Üí‚â°equalTypes ; eqTypesPI‚Üê ; eqTypesFUN‚Üê ; eqTypesUniv ;
         equalInType-NEG ; eqTypesUNION‚Üê ; equalInType-SQUASH‚Üí ; equalInType-SUM‚Üí ; equalInType-refl ;
         equalInType-PI‚Üí ; equalInType-PI ; equalInType-NEG‚Üí ; equalInType-SUM ; equalInType-mon ;
         NUM-equalInType-NAT! ; equalTypes‚ÜíequalInType-UNIV ; equalInType-local ; equalInType-EQ‚Üí ;
         equalInType-NAT!‚Üí ; ¬¨equalInType-FALSE ; ‚â°CTerm‚ÜíeqTypes ; eqTypesEQ‚Üê ; eqTypesTRUE ; equalInType-EQ ;
         equalInType-FUN)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalInType-SQUASH ; ‚ÜíequalInType-CS-NAT!‚ÜíT ; equalTerms-pres-#‚áõ-left-rev ; equalTypes-#‚áõ-left-right-rev ;
         ‚ÜíequalInType-TRUE ; ‚ÜíequalInType-UNION ; isType-#NAT!‚ÜíBOOL‚ÇÄ! ; inhType-mon ; equalInType-BOOL‚ÇÄ!‚Üí ;
         ‚ÜíequalInType-BOOL‚ÇÄ! ; equalInType-#‚áõ-LR)
open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (SUMeq! ; equalInType-SUM!‚Üí ; equalInType-SUM! ; eqTypesSUM!‚Üê)

open import uniMon(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalTypes-uni-mon ; equalInType-uni-mon ; equalInType-change-level)

open import pure(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-TPURE‚Üí)
-- TODO: move those:
open import pure2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ààNAT!-change-level)

-- TODO: move those:
open import mp_props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíinhType-ASSERT‚ÇÑ-APPLY ; equalInType-ASSERT‚ÇÑ‚Üí ; ‚ÜíequalInType-ASSERT‚ÇÑ ; strongBool!-BTRUE‚Üí ;
         #‚áõ!-pres-equalTypes-mp-qt‚ÇÉ-fun ; #‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun)

open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#SUM-ASSERT‚ÇÖ ; #ASSERT‚ÇÑ ; #[0]ASSERT‚ÇÑ ; sub0-ASSERT‚ÇÑ-APPLY ; equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ)
open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ; sub0-fun-mp‚ÇÜ ; ‚ÜíequalTypes-#MP-left-qt‚ÇÉ ; ‚ÜíequalTypes-#MP-right-qt‚ÇÉ ;
         #MP‚ÇÜ ; #MP‚Çá ; #MP-left-qt‚ÇÉ ; #MP-right-qt‚ÇÉ ; ‚â°SUM! ; #[0]SUM! ;
         equalInTypeTNOENC‚Üí ; equalInTypeTNOENC‚Üí‚Çó ; equalInTypeTNOENC‚Üí·µ£ ; eqTypesTNOENC‚Üê)
open import mp_props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#MP-left-qt‚ÇÉ‚Üí)

open import choiceBarDef(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (followChoice¬∑)
open import not_lem(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (#Œ£choice ; #Œ£choice‚â° ; ¬¨‚àÄùïé¬¨equalInType-#Œ£choice ; sub0-#Œ£choice-body‚â°)
open import typeC(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (Res‚ÑÇ ; ‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
--open import boolC(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(CB)

open import mp_prop(W)(M)(C)(K)(P)(G)(X)(N)(EC)(V)(F)(CB)
  using (Choice‚Ñô ; immutableChoices ; alwaysFreezable ; #MP‚Ñô ; #DEC‚Ñï ; ‚àà#MP‚Ñô‚Üí ; equalTerms-pres-#‚áõ-left-rev-UNIV ;
         ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Ñô ; inhType-DEC‚Ñï ; #Œ£choice‚Ñô ; Œ£inhType‚ÜíinhType-choice ; ¬¨equalInType-#Œ£choice‚Ñô ;
         isTypeMP‚Ñô)


-- follows ¬¨MP‚ÇÜ in not_mp
¬¨MP‚Ñô : (i : ‚Ñï) ‚Üí Choice‚Ñô i CB ‚Üí immutableChoices ‚Üí alwaysFreezable F
     ‚Üí (w : ùïé¬∑) ‚Üí ‚ààType (suc i) w (#NEG (#MP‚Ñô i)) #lamAX
¬¨MP‚Ñô i cp immut af w = equalInType-NEG (isTypeMP‚Ñô w i) aw1
  where
  aw1 : ‚àÄùïé w (Œª w' _ ‚Üí  (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType (suc i) w' (#MP‚Ñô i) a‚ÇÅ a‚ÇÇ)
  aw1 w1 e1 F G F‚àà = h8 h7
    where
    aw2 : ‚àÄùïé w1 (Œª w' _ ‚Üí (f : CTerm) ‚Üí ‚ààType (suc i) w' (#NAT!‚ÜíU i) f
                        ‚Üí inhType i w' (#DEC‚Ñï f)
                        ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                                           √ó inhType i w' (#APPLY f n)))
                                                        ‚Üí ‚ä•)
                                        ‚Üí ‚ä•)
                        ‚Üí ‚ñ°¬∑ w' (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                          √ó inhType i w' (#APPLY f n))))
    aw2 = ‚àà#MP‚Ñô‚Üí i w1 F G F‚àà

    name : Name
    name = newChoice¬∑ w1

    w2 : ùïé¬∑
    w2 = startNewChoice Res‚ÑÇ w1

    e2 : w1 ‚äë¬∑ w2
    e2 = startNewChoice‚äè Res‚ÑÇ w1

    oc1 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w2
    oc1 n = getChoice-startNewChoice n Res‚ÑÇ w1

    comp1 : compatible¬∑ name w2 Res‚ÑÇ
    comp1 = startNewChoiceCompatible Res‚ÑÇ w1

    fb1 : freezable¬∑ name w2
    fb1 = freezableStart¬∑ Res‚ÑÇ w1

    f : CTerm
    f = #CS name

    eqf2 : ‚àÄùïé w2 (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí  equalInType (suc i) w' (#UNIV i) (#APPLY f (#NUM m)) (#APPLY f (#NUM m)))
    eqf2 w' e m = ‚â°CTerm‚ÜíequalInType (fst cp) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ (‚äë-compatible¬∑ e comp1) (NUM-equalInType-NAT! (suc i) w' m))

    eqf1 : ‚ààType (suc i) w2 (#NAT!‚ÜíU i) f
    eqf1 = ‚â°CTerm‚ÜíequalInType
             (sym (#NAT!‚ÜíU‚â° i))
             (‚ÜíequalInType-CS-NAT!‚ÜíT (eqTypesUniv w2 (suc i) i ‚â§-refl) (equalTerms-pres-#‚áõ-left-rev-UNIV i) eqf2)

    h3 : ‚àÄùïé w2 (Œª w' _ ‚Üí ‚àÄùïé w' (Œª w' _ ‚Üí (Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n
                                          √ó inhType i w' (#APPLY f n)))
                                       ‚Üí ‚ä•)
                       ‚Üí ‚ä•)
    h3 w3 e3 aw = ¬¨‚àÄùïé¬¨equalInType-#Œ£choice (suc i) w3 name ‚ÑÇ‚ÇÅ¬∑ sat-‚ÑÇ‚ÇÅ (‚äë-compatible¬∑ e3 comp1) (af name w3) z
      where
      z : ‚àÄùïé w3 (Œª w4 e4 ‚Üí ¬¨ inhType (suc i) w4 (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
      z = ¬¨Œ£NAT!‚Üí¬¨inhType-Œ£choice‚Ñô i cp w3 name (equalInType-mon eqf1 w3 e3) aw

    h4 : ‚ñ°¬∑ w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª n ‚Üí ‚ààType i w' #NAT! n √ó inhType i w' (#APPLY f n)))
    h4 = aw2 w2 e2 f eqf1 (inhType-DEC‚Ñï immut i cp w2 name comp1 eqf1) h3

    -- We follow the choice
    w3 : ùïé¬∑
    w3 = fst (followChoice¬∑ name h4 oc1 comp1 fb1)

    e3 : w2 ‚äë¬∑ w3
    e3 = fst (snd (followChoice¬∑ name h4 oc1 comp1 fb1))

    oc2 : only‚ÑÇ‚ààùïé (Res.def Res‚ÑÇ) name w3
    oc2 = fst (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))

    comp2 : compatible¬∑ name w3 Res‚ÑÇ
    comp2 = fst (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1))))

    fb2 : freezable¬∑ name w3
    fb2 = fst (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

    h6 : Œ£ CTerm (Œª n ‚Üí ‚ààType i w3 #NAT! n √ó inhType i w3 (#APPLY f n))
    h6 = snd (snd (snd (snd (snd (followChoice¬∑ name h4 oc1 comp1 fb1)))))

    h7 : inhType i w3 (#Œ£choice‚Ñô name)
    h7 = Œ£inhType‚ÜíinhType-choice i w3 f (equalInType-mon eqf1 w3 e3) h6

    h8 : ¬¨ inhType i w3 (#Œ£choice‚Ñô name)
    h8 = ¬¨equalInType-#Œ£choice‚Ñô immut i cp w3 name oc2 comp2 fb2


#¬¨Enc-APPLY-NUM : (f : CTerm) (n : ‚Ñï)
                ‚Üí #¬¨Enc f
                ‚Üí #¬¨Enc (#APPLY f (#NUM n))
#¬¨Enc-APPLY-NUM f n ne rewrite ne = refl


-- We use this when w2 ‚äë¬∑ w1
#¬¨enc‚ÜíinhType-ASSERT‚ÇÑ : (gcp : getChoice‚Ñô) (n : ‚Ñï) (w1 w2 : ùïé¬∑) (t : CTerm)
                         ‚Üí #¬¨Enc t
                         ‚Üí ‚ààType n w2 #BOOL‚ÇÄ! t
                         ‚Üí (Œ£ CTerm (Œª x ‚Üí t #‚áõ! #INL x at w1))
                         ‚Üí inhType n w2 (#ASSERT‚ÇÑ t)
#¬¨enc‚ÜíinhType-ASSERT‚ÇÑ gcp n w1 w2 t nwt t‚àà (x , cx) =
  #AX ,
  ‚ÜíequalInType-ASSERT‚ÇÑ n w2 t #AX #AX (‚ÜíequalInType-BOOL‚ÇÄ! n w2 t #BTRUE (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-BOOL‚ÇÄ!‚Üí n w2 t t t‚àà)))
  where
    aw : ‚àÄùïé w2 (Œª w' _ ‚Üí #strongBool! w' t t ‚Üí #strongBool! w' t #BTRUE)
    aw w3 e3 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x‚ÇÅ , #AX , inj‚ÇÅ (c‚ÇÅ , #‚áõ!-refl {w3} {#BTRUE})
    aw w3 e3 (x‚ÇÅ , x‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = ‚ä•-elim (¬¨enc‚Üí‚áõ!INL-INR gcp w1 w3 ‚åú t ‚åù ‚åú x ‚åù ‚åú x‚ÇÅ ‚åù nwt cx c‚ÇÅ)


-- Copied over from MPp‚ÇÜ-inh in mpp.lagda
-- We addition we want to exclude all syntactic writes (a new types modality?)
MP‚Çá-inh : (gcp : getChoice‚Ñô) (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MP‚Çá #lam2AX
MP‚Çá-inh gcp n w =
  equalInType-PI
    {n} {w} {#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí eqTypesTNOENC‚Üê (isType-#NAT!‚ÜíBOOL‚ÇÄ! w' n))
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
      eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInTypeTNOENC‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÜ a‚ÇÅ))
        (equalInType-local (‚àÄùïé-‚ñ°Func2 awp (equalInTypeTNOENC‚Üí‚Çó eqa) (equalInTypeTNOENC‚Üí·µ£ eqa))) {--(equalInType-FUN
          (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqa)))
          (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqa)))
          aw3)--}
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!‚Çë a‚ÇÅ w'
                          ‚Üí #‚áõ!‚Çë a‚ÇÇ w'
                          ‚Üí equalInType n w' (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
      awp w1' e1' (x‚ÇÅ , comp‚ÇÅ , nex‚ÇÅ , isv‚ÇÅ) (x‚ÇÇ , comp‚ÇÇ , nex‚ÇÇ , isv‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun n w1' a‚ÇÅ a‚ÇÇ x‚ÇÅ x‚ÇÇ
          (equalInType-mon (equalInTypeTNOENC‚Üí eqa) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqx)))
             (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInTypeTNOENC‚Üí eqx)))
             aw3)
        where
        eqx : equalInType n w1' (#TNOENC #NAT!‚ÜíBOOL‚ÇÄ!) x‚ÇÅ x‚ÇÇ
        eqx = equalInType-#‚áõ-LR comp‚ÇÅ comp‚ÇÇ (equalInType-mon eqa w1' e1')

        aw3 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt‚ÇÉ x‚ÇÅ) a‚ÇÉ a‚ÇÑ
                            ‚Üí equalInType n w' (#MP-right-qt‚ÇÉ x‚ÇÅ) (#APPLY (#APPLY #lam2AX x‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX x‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM! {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)} (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType n w' #NAT!)
                                                 (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                 w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY (#NUM k) x‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÑ-APPLY a x‚ÇÅ | sub0-ASSERT‚ÇÑ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL‚ÇÄ! (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-refl (equalInTypeTNOENC‚Üí eqx))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ a)) (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ b))
                        aw5' = equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-#MP-left-qt‚ÇÉ‚Üí
                                       n w2 x‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInTypeTNOENC‚Üí eqx)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-BOOL‚ÇÄ!‚Üí
                                                               n w5 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE
                                                               (equalInType-ASSERT‚ÇÑ‚Üí
                                                                 n w5 (#APPLY x‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh'))))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÑ-APPLY
                                      n w5 x‚ÇÅ n‚ÇÅ k
                                      (equalInType-mon (equalInType-refl (equalInTypeTNOENC‚Üí eqx)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5))))
                                      k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨enc‚ÜíinhType-ASSERT‚ÇÑ
                                                            gcp n w6 w3 (#APPLY x‚ÇÅ (#NUM k))
                                                            (#¬¨Enc-APPLY-NUM x‚ÇÅ k nex‚ÇÅ)
                                                            (equalInType-FUN‚Üí
                                                               (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-refl (equalInTypeTNOENC‚Üí eqx)))
                                                               w3 (‚äë-trans¬∑ e2 e3) (#NUM k) (#NUM k)
                                                               (NUM-equalInType-NAT! n w3 k))
                                                            (strongBool!-BTRUE‚Üí w6 (#APPLY x‚ÇÅ (#NUM k)) wbe)))

\end{code}
