\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ;  _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Axiom.UniquenessOfIdentityProofs
open import Axiom.Extensionality.Propositional

open import util
open import calculus
open import world
open import choice

module theory (W : PossibleWorlds) (C : Choice W) (E : Extensionality 0‚Ñì 2‚Ñì) where
open import bar(W)
open import barI(W)
open import worldDef(W)
open import choiceDef(W)(C)
open import computation(W)(C)

\end{code}



We now provide an inductive-recursive realizability semantics of
OpenTT.


\begin{code}


wpreddepextirr : {w : ùïé¬∑} {f : wPred w} (h : wPredDep f) (i : inbar w f) ‚Üí Set‚ÇÅ
wpreddepextirr = wPredDepExtIrr-inOpenBar


removeV : (v : Var) (l : List Var) ‚Üí List Var
removeV v [] = []
removeV v (x ‚à∑ l) with x ‚âü v
... | yes _ = removeV v l
... | no _ = x ‚à∑ removeV v l


remove0 : List Var ‚Üí List Var
remove0 [] = []
remove0 (0 ‚à∑ l) = remove0 l
remove0 (x ‚à∑ l) = x ‚à∑ remove0 l


remove0-as-V : (l : List Var) ‚Üí remove0 l ‚â° removeV 0 l
remove0-as-V [] = refl
remove0-as-V (0 ‚à∑ l) = remove0-as-V l
remove0-as-V (suc x ‚à∑ l) rewrite remove0-as-V l = refl


‚ààremoveV‚Üí : {x v : Var} {a : List Var} ‚Üí x ‚àà (removeV v a) ‚Üí x ‚àà a √ó ¬¨ (x ‚â° v)
‚ààremoveV‚Üí {x} {v} {x‚ÇÅ ‚à∑ a} i with x‚ÇÅ ‚âü v
... | yes p rewrite p = there (fst (‚ààremoveV‚Üí i)) , snd (‚ààremoveV‚Üí {x} {v} {a} i)
‚ààremoveV‚Üí {x} {v} {x‚ÇÅ ‚à∑ a} (here px) | no p rewrite px = here refl , p
‚ààremoveV‚Üí {x} {v} {x‚ÇÅ ‚à∑ a} (there i) | no p = there (fst (‚ààremoveV‚Üí i)) ,  snd (‚ààremoveV‚Üí {x} {v} {a} i)


‚Üí‚ààremoveV : {x v : Var} {a : List Var} ‚Üí x ‚àà a ‚Üí ¬¨ (x ‚â° v) ‚Üí x ‚àà (removeV v a)
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} i d with x‚ÇÅ ‚âü v
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (here px) d | yes p rewrite p | px = ‚ä•-elim (d refl)
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (there i) d | yes p = ‚Üí‚ààremoveV i d
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (here px) d | no p = here px
‚Üí‚ààremoveV {x} {v} {x‚ÇÅ ‚à∑ a} (there i) d | no p = there (‚Üí‚ààremoveV i d)


‚äÜremoveV : {v : Var} {a b : List Var} ‚Üí a ‚äÜ b ‚Üí (removeV v a) ‚äÜ (removeV v b)
‚äÜremoveV {v} {a} {b} s i = ‚Üí‚ààremoveV (s (fst (‚ààremoveV‚Üí i))) (snd (‚ààremoveV‚Üí {_} {v} {a} i))


‚ààremoveV++L : {x v : Var} {a b c : List Var} ‚Üí x ‚àà (removeV v a ++ c) ‚Üí x ‚àà (removeV v (a ++ b) ++ c)
‚ààremoveV++L {x} {v} {a} {b} {c} i with ‚àà-++‚Åª (removeV v a) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚äÜremoveV {v} {a} {a ++ b} ‚àà-++‚Å∫À° p)
... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ (removeV v (a ++ b)) p


‚ààremoveV++R : {x v : Var} {a b c : List Var} ‚Üí x ‚àà (removeV v b ++ c) ‚Üí x ‚àà (removeV v (a ++ b) ++ c)
‚ààremoveV++R {x} {v} {a} {b} {c} i with ‚àà-++‚Åª (removeV v b) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚äÜremoveV {v} {b} {a ++ b} (‚àà-++‚Å∫ ≥ a) p)
... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ (removeV v (a ++ b)) p


‚ààlowerVars‚Üí : (v : Var) (l : List Var) ‚Üí v ‚àà lowerVars l ‚Üí suc v ‚àà l
‚ààlowerVars‚Üí v (0 ‚à∑ l) i = there (‚ààlowerVars‚Üí v l i)
‚ààlowerVars‚Üí v (suc x ‚à∑ l) (here px) rewrite px = here refl
‚ààlowerVars‚Üí v (suc x ‚à∑ l) (there i) = there (‚ààlowerVars‚Üí v l i)


‚Üí‚ààlowerVars : (v : Var) (l : List Var) ‚Üí suc v ‚àà l ‚Üí v ‚àà lowerVars l
‚Üí‚ààlowerVars v (0 ‚à∑ l) (there i) = ‚Üí‚ààlowerVars v l i
‚Üí‚ààlowerVars v (suc x ‚à∑ l) (here px) = here (suc-injective px)
‚Üí‚ààlowerVars v (suc x ‚à∑ l) (there i) = there (‚Üí‚ààlowerVars v l i)


lowerVars-map-sucIf‚â§-suc : (n : ‚Ñï) (l : List Var)
                           ‚Üí lowerVars (Data.List.map (sucIf‚â§ (suc n)) l)
                              ‚â° Data.List.map (sucIf‚â§ n) (lowerVars l)
lowerVars-map-sucIf‚â§-suc n [] = refl
lowerVars-map-sucIf‚â§-suc n (x ‚à∑ l) with x <? suc n
lowerVars-map-sucIf‚â§-suc n (0 ‚à∑ l) | yes p = lowerVars-map-sucIf‚â§-suc n l
lowerVars-map-sucIf‚â§-suc n (suc x ‚à∑ l) | yes p with x <? n
... | yes q rewrite lowerVars-map-sucIf‚â§-suc n l = refl
... | no q = ‚ä•-elim (q (s‚â§s-inj p))
lowerVars-map-sucIf‚â§-suc n (0 ‚à∑ l) | no p = ‚ä•-elim (p (_‚â§_.s‚â§s _‚â§_.z‚â§n))
lowerVars-map-sucIf‚â§-suc n (suc x ‚à∑ l) | no p with x <? n
... | yes q = ‚ä•-elim (p (_‚â§_.s‚â§s q))
... | no q rewrite lowerVars-map-sucIf‚â§-suc n l = refl


{--
all> : (n : ‚Ñï) (l : List ‚Ñï) ‚Üí Set
all> n l = (v : ‚Ñï) ‚Üí v ‚àà l ‚Üí n < v


all>‚à∑ : {n x : ‚Ñï} {l : List ‚Ñï} ‚Üí all> n (x ‚à∑ l) ‚Üí all> n l
all>‚à∑ {n} {x} {l} i v j = i v (there j)


all>++L : {n : ‚Ñï} {l k : List ‚Ñï} ‚Üí all> n (l ++ k) ‚Üí all> n l
all>++L {n} {l} {k} i v j = i v (‚àà-++‚Å∫À° j)


all>++R : {n : ‚Ñï} {l k : List ‚Ñï} ‚Üí all> n (l ++ k) ‚Üí all> n k
all>++R {n} {l} {k} i v j = i v (‚àà-++‚Å∫ ≥ _ j)
--}


lowerVars-map-predIf‚â§-suc : (n : ‚Ñï) (l : List Var)
                            ‚Üí lowerVars (Data.List.map (predIf‚â§ (suc n)) l)
                               ‚â° Data.List.map (predIf‚â§ n) (lowerVars l)
lowerVars-map-predIf‚â§-suc n [] = refl
lowerVars-map-predIf‚â§-suc n (0 ‚à∑ l) = lowerVars-map-predIf‚â§-suc n l
lowerVars-map-predIf‚â§-suc n (suc x ‚à∑ l) with suc x ‚â§? suc n
lowerVars-map-predIf‚â§-suc n (suc 0 ‚à∑ l) | yes p rewrite lowerVars-map-predIf‚â§-suc n l = refl
lowerVars-map-predIf‚â§-suc n (suc 0 ‚à∑ l) | no p = ‚ä•-elim (p (_‚â§_.s‚â§s _‚â§_.z‚â§n))
lowerVars-map-predIf‚â§-suc n (suc (suc x) ‚à∑ l) | yes p with suc x ‚â§? n
... | yes q rewrite lowerVars-map-predIf‚â§-suc n l = refl
... | no q = ‚ä•-elim (q (s‚â§s-inj p))
lowerVars-map-predIf‚â§-suc n (suc (suc x) ‚à∑ l) | no p with suc x ‚â§? n
... | yes q = ‚ä•-elim (p (_‚â§_.s‚â§s q))
... | no q rewrite lowerVars-map-predIf‚â§-suc n l = refl


fvars-shiftUp‚â° : (n : ‚Ñï) (t : Term)
                 ‚Üí fvars (shiftUp n t) ‚â° Data.List.map (sucIf‚â§ n) (fvars t)
fvars-shiftUp‚â° n (VAR x) with x <? n
... | yes p = refl
... | no p = refl
fvars-shiftUp‚â° n NAT = refl
fvars-shiftUp‚â° n QNAT = refl
fvars-shiftUp‚â° n (LT t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (QLT t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (NUM x) = refl
fvars-shiftUp‚â° n (PI t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftUp‚â° n (LAMBDA t)
  rewrite fvars-shiftUp‚â° (suc n) t
  | lowerVars-map-sucIf‚â§-suc n (fvars t) = refl
fvars-shiftUp‚â° n (APPLY t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (SUM t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftUp‚â° n (PAIR t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (SPREAD t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (lowerVars (fvars t‚ÇÅ)))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc (suc n)) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc (suc n) (fvars t‚ÇÅ)
  | lowerVars-map-sucIf‚â§-suc n (lowerVars (fvars t‚ÇÅ)) = refl
fvars-shiftUp‚â° n (SET t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftUp‚â° n (UNION t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (INL t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (INR t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (DECIDE t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ) ++ lowerVars (fvars t‚ÇÇ))
  | map-++-commute (sucIf‚â§ n) (lowerVars (fvars t‚ÇÅ)) (lowerVars (fvars t‚ÇÇ))
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° (suc n) t‚ÇÅ
  | fvars-shiftUp‚â° (suc n) t‚ÇÇ
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÅ)
  | lowerVars-map-sucIf‚â§-suc n (fvars t‚ÇÇ) = refl
fvars-shiftUp‚â° n (EQ t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ ++ fvars t‚ÇÇ)
  | map-++-commute (sucIf‚â§ n) (fvars t‚ÇÅ) (fvars t‚ÇÇ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ
  | fvars-shiftUp‚â° n t‚ÇÇ = refl
fvars-shiftUp‚â° n AX = refl
fvars-shiftUp‚â° n FREE = refl
fvars-shiftUp‚â° n (CS x) = refl
fvars-shiftUp‚â° n (TSQUASH t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (DUM t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (FFDEFS t t‚ÇÅ)
  rewrite map-++-commute (sucIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftUp‚â° n t
  | fvars-shiftUp‚â° n t‚ÇÅ = refl
fvars-shiftUp‚â° n (UNIV x) = refl
fvars-shiftUp‚â° n (LIFT t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (LOWER t) = fvars-shiftUp‚â° n t
fvars-shiftUp‚â° n (SHRINK t) = fvars-shiftUp‚â° n t


fvars-shiftDown‚â° : (n : ‚Ñï) (t : Term)
                   ‚Üí fvars (shiftDown n t) ‚â° Data.List.map (predIf‚â§ n) (fvars t)
fvars-shiftDown‚â° n (VAR 0) = refl
fvars-shiftDown‚â° n (VAR (suc x)) with suc x <? n
... | yes p = refl
... | no p = refl
fvars-shiftDown‚â° n NAT = refl
fvars-shiftDown‚â° n QNAT = refl
fvars-shiftDown‚â° n (LT t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (QLT t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (NUM x) = refl
fvars-shiftDown‚â° n (PI t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftDown‚â° n (LAMBDA t)
  rewrite fvars-shiftDown‚â° (suc n) t
  | lowerVars-map-predIf‚â§-suc n (fvars t) = refl
fvars-shiftDown‚â° n (APPLY t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (SUM t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftDown‚â° n (PAIR t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (SPREAD t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (lowerVars (fvars t‚ÇÅ)))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc (suc n)) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc (suc n) (fvars t‚ÇÅ)
  | lowerVars-map-predIf‚â§-suc n (lowerVars (fvars t‚ÇÅ)) = refl
fvars-shiftDown‚â° n (SET t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ) = refl
fvars-shiftDown‚â° n (UNION t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (INL t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (INR t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (DECIDE t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (lowerVars (fvars t‚ÇÅ) ++ lowerVars (fvars t‚ÇÇ))
  | map-++-commute (predIf‚â§ n) (lowerVars (fvars t‚ÇÅ)) (lowerVars (fvars t‚ÇÇ))
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° (suc n) t‚ÇÅ
  | fvars-shiftDown‚â° (suc n) t‚ÇÇ
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÅ)
  | lowerVars-map-predIf‚â§-suc n (fvars t‚ÇÇ) = refl
fvars-shiftDown‚â° n (EQ t t‚ÇÅ t‚ÇÇ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ ++ fvars t‚ÇÇ)
  | map-++-commute (predIf‚â§ n) (fvars t‚ÇÅ) (fvars t‚ÇÇ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ
  | fvars-shiftDown‚â° n t‚ÇÇ = refl
fvars-shiftDown‚â° n AX = refl
fvars-shiftDown‚â° n FREE = refl
fvars-shiftDown‚â° n (CS x) = refl
fvars-shiftDown‚â° n (TSQUASH t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (DUM t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (FFDEFS t t‚ÇÅ)
  rewrite map-++-commute (predIf‚â§ n) (fvars t) (fvars t‚ÇÅ)
  | fvars-shiftDown‚â° n t
  | fvars-shiftDown‚â° n t‚ÇÅ = refl
fvars-shiftDown‚â° n (UNIV x) = refl
fvars-shiftDown‚â° n (LIFT t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (LOWER t) = fvars-shiftDown‚â° n t
fvars-shiftDown‚â° n (SHRINK t) = fvars-shiftDown‚â° n t


‚ààremoveV-lowerVars++‚Üí : (x v : Var) (l : List Var) (a : Term)
                         ‚Üí x ‚àà removeV v (lowerVars l) ++ fvars a
                         ‚Üí (suc x) ‚àà removeV (suc v) l ++ fvars (shiftUp 0 a)
‚ààremoveV-lowerVars++‚Üí x v l a i with ‚àà-++‚Åª (removeV v (lowerVars l)) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚Üí‚ààremoveV (‚ààlowerVars‚Üí x l (fst (‚ààremoveV‚Üí p))) (‚Üí¬¨S _ _ (snd (‚ààremoveV‚Üí {x} {v} {lowerVars l} p))))
... | inj‚ÇÇ p = ‚àà-++‚Å∫ ≥ (removeV (suc v) l) j
  where
    j : suc x ‚àà fvars (shiftUp 0 a)
    j rewrite fvars-shiftUp‚â° 0 a = ‚àà-map‚Å∫ (sucIf‚â§ 0) p


‚Üí‚ààremoveV-lowerVars++ : (x v : Var) (l : List Var) (a : Term)
                         ‚Üí (suc x) ‚àà removeV (suc v) l ++ fvars (shiftUp 0 a)
                         ‚Üí x ‚àà removeV v (lowerVars l) ++ fvars a
‚Üí‚ààremoveV-lowerVars++ x v l a i with ‚àà-++‚Åª (removeV (suc v) l) i
... | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚Üí‚ààremoveV (‚Üí‚ààlowerVars x l (fst (‚ààremoveV‚Üí p))) (¬¨S‚Üí _ _ (snd (‚ààremoveV‚Üí {suc x} {suc v} {l} p))))
... | inj‚ÇÇ p rewrite fvars-shiftUp‚â° 0 a = ‚àà-++‚Å∫ ≥ (removeV v (lowerVars l)) j'
  where
    y : Var
    y = fst (‚àà-map‚Åª (sucIf‚â§ 0) p)

    j : y ‚àà fvars a
    j = fst (snd (‚àà-map‚Åª (sucIf‚â§ 0) p))

    e : x ‚â° y
    e = suc-injective (snd (snd (‚àà-map‚Åª (sucIf‚â§ 0) p)))

    j' : x ‚àà fvars a
    j' rewrite e = j


fvars-subv : (v : Var) (a b : Term) ‚Üí fvars (subv v a b) ‚äÜ removeV v (fvars b) ++ fvars a
fvars-subv v a (VAR x) i with x ‚âü v
... | yes _ = i
fvars-subv v a (VAR x) (here px) | no _ rewrite px = here refl
fvars-subv v a NAT i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a QNAT i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (LT b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (QLT b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (NUM x) i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (PI b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a j)
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ {suc x} (‚ààlowerVars‚Üí x _ p)
fvars-subv v a (LAMBDA b) {x} i = ‚Üí‚ààremoveV-lowerVars++ x v (fvars b) a j
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b {suc x} (‚ààlowerVars‚Üí x _ i)
fvars-subv v a (APPLY b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (SUM b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a j)
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ {suc x} (‚ààlowerVars‚Üí x _ p)
fvars-subv v a (PAIR b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (SPREAD b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (lowerVars (fvars b‚ÇÅ))} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (lowerVars (fvars b‚ÇÅ))} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (lowerVars (fvars b‚ÇÅ)) a (‚Üí‚ààremoveV-lowerVars++ (suc x) (suc v) (fvars b‚ÇÅ) (shiftUp 0 a) j))
  where
    j : (suc (suc x)) ‚àà removeV (suc (suc v)) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 (shiftUp 0 a))
    j = fvars-subv (suc (suc v)) (shiftUp 0 (shiftUp 0 a)) b‚ÇÅ {suc (suc x)} (‚ààlowerVars‚Üí (suc x) _ (‚ààlowerVars‚Üí x _ p))
fvars-subv v a (SET b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ)} {fvars a} (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a j)
  where
    j : (suc x) ‚àà removeV (suc v) (fvars b‚ÇÅ) ++ fvars (shiftUp 0 a)
    j = fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ {suc x} (‚ààlowerVars‚Üí x _ p)
fvars-subv v a (UNION b b‚ÇÅ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (INL b) = fvars-subv v a b
fvars-subv v a (INR b) = fvars-subv v a b
fvars-subv v a (DECIDE b b‚ÇÅ b‚ÇÇ) {x} i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ) ++ lowerVars (fvars b‚ÇÇ)} (fvars-subv v a b p)
... | inj‚ÇÇ p with ‚àà-++‚Åª (lowerVars (fvars (subv (suc v) (shiftUp 0 a) b‚ÇÅ))) p
... | inj‚ÇÅ q = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ) ++ lowerVars (fvars b‚ÇÇ)} {fvars a}
                           (‚ààremoveV++L {_} {v} {lowerVars (fvars b‚ÇÅ)} {lowerVars (fvars b‚ÇÇ)}
                                        (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÅ) a
                                                               (fvars-subv (suc v) (shiftUp 0 a) b‚ÇÅ (‚ààlowerVars‚Üí _ _ q))))
... | inj‚ÇÇ q = ‚ààremoveV++R {_} {v} {fvars b} {lowerVars (fvars b‚ÇÅ) ++ lowerVars (fvars b‚ÇÇ)} {fvars a}
                           (‚ààremoveV++R {_} {v} {lowerVars (fvars b‚ÇÅ)} {lowerVars (fvars b‚ÇÇ)}
                                        (‚Üí‚ààremoveV-lowerVars++ x v (fvars b‚ÇÇ) a
                                                                (fvars-subv (suc v) (shiftUp 0 a) b‚ÇÇ (‚ààlowerVars‚Üí _ _ q))))
fvars-subv v a (EQ b b‚ÇÅ b‚ÇÇ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ ++ fvars b‚ÇÇ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p with ‚àà-++‚Åª (fvars (subv v a b‚ÇÅ)) p
... | inj‚ÇÅ q = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ ++ fvars b‚ÇÇ} {fvars a}
                           (‚ààremoveV++L {_} {v} {fvars b‚ÇÅ} {fvars b‚ÇÇ} {fvars a} (fvars-subv v a b‚ÇÅ q))
... | inj‚ÇÇ q = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ ++ fvars b‚ÇÇ} {fvars a}
                           (‚ààremoveV++R {_} {v} {fvars b‚ÇÅ} {fvars b‚ÇÇ} {fvars a} (fvars-subv v a b‚ÇÇ q))
fvars-subv v a AX i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a FREE i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (CS x) i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (TSQUASH b) = fvars-subv v a b
fvars-subv v a (DUM b) = fvars-subv v a b
fvars-subv v a (FFDEFS b b‚ÇÅ) i with ‚àà-++‚Åª (fvars (subv v a b)) i
... | inj‚ÇÅ p = ‚ààremoveV++L {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b p)
... | inj‚ÇÇ p = ‚ààremoveV++R {_} {v} {fvars b} {fvars b‚ÇÅ} {fvars a} (fvars-subv v a b‚ÇÅ p)
fvars-subv v a (UNIV x) i = ‚ä•-elim (¬¨‚àà[] i)
fvars-subv v a (LIFT b) = fvars-subv v a b
fvars-subv v a (LOWER b) = fvars-subv v a b
fvars-subv v a (SHRINK b) = fvars-subv v a b


injective : {A B : Set} (f : A ‚Üí B) ‚Üí Set
injective {A} {B} f = {a b : A} ‚Üí f a ‚â° f b ‚Üí a ‚â° b


‚àà-map‚Üí : {A B : Set} {f : A ‚Üí B} {a : A} {l : List A} ‚Üí injective f ‚Üí f a ‚àà Data.List.map f l ‚Üí a ‚àà l
‚àà-map‚Üí {A} {B} {f} {a} {l} inj i = j'
  where
    y : A
    y = fst (‚àà-map‚Åª f i)

    j : y ‚àà l
    j = fst (snd (‚àà-map‚Åª f i))

    e : a ‚â° y
    e = inj (snd (snd (‚àà-map‚Åª f i)))

    j' : a ‚àà l
    j' rewrite e = j


‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ : (y : Var) (l : List Var) (a : Term)
                             ‚Üí y ‚àà removeV 0 l ++ fvars (shiftUp 0 a)
                             ‚Üí (predIf‚â§ 0 y) ‚àà (lowerVars l ++ fvars a)
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ y l a i with ‚àà-++‚Åª (removeV 0 l) i
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ 0 l a i | inj‚ÇÅ p = ‚ä•-elim (snd (‚ààremoveV‚Üí {0} {0} {l} p) refl)
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ (suc y) l a i | inj‚ÇÅ p = ‚àà-++‚Å∫À° (‚Üí‚ààlowerVars y l (fst (‚ààremoveV‚Üí p)))
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ 0 l a i | inj‚ÇÇ p rewrite fvars-shiftUp‚â° 0 a = ‚ä•-elim (suc-‚â¢-0 (sym (snd (snd (‚àà-map‚Åª suc p)))))
‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ (suc y) l a i | inj‚ÇÇ p rewrite fvars-shiftUp‚â° 0 a = ‚àà-++‚Å∫ ≥ (lowerVars l) (‚àà-map‚Üí suc-injective p)


fvars-sub : (a b : Term) ‚Üí fvars (sub a b) ‚äÜ lowerVars (fvars b) ++ fvars a
fvars-sub a b {x} i rewrite fvars-shiftDown‚â° 0 (subv 0 (shiftUp 0 a) b) = --remove0-as-V (fvars b) =
  k2
  where
    y : Var
    y = fst (‚àà-map‚Åª (predIf‚â§ 0) i)
    -- x = predIf‚â§ 0 y

    j : y ‚àà fvars (subv 0 (shiftUp 0 a) b)
    j = fst (snd (‚àà-map‚Åª (predIf‚â§ 0) i))

    k : y ‚àà removeV 0 (fvars b) ++ fvars (shiftUp 0 a)
    k = fvars-subv 0 (shiftUp 0 a) b j

    k1 : (predIf‚â§ 0 y) ‚àà (lowerVars (fvars b) ++ fvars a)
    k1 = ‚ààremoveV0-shiftUp‚ÜíprefIf‚â§ y (fvars b) a k

    k2 : x ‚àà (lowerVars (fvars b) ++ fvars a)
    k2 rewrite snd (snd (‚àà-map‚Åª (predIf‚â§ 0) i)) = k1


fvars-cterm : (a : CTerm) ‚Üí fvars ‚åú a ‚åù ‚â° []
fvars-cterm a = CTerm.closed a


‚äÜ[]‚Üí‚â°[] : {A : Set} {l : List A} ‚Üí l ‚äÜ [] ‚Üí l ‚â° []
‚äÜ[]‚Üí‚â°[] {A} {[]} h = refl
‚äÜ[]‚Üí‚â°[] {A} {x ‚à∑ l} h = ‚ä•-elim (¬¨‚àà[] i)
  where
    i : x ‚àà []
    i = h (here refl)

‚â°[]‚Üí‚äÜ[] : {A : Set} {l : List A} ‚Üí l ‚â° [] ‚Üí l ‚äÜ []
‚â°[]‚Üí‚äÜ[] {A} h rewrite h = ‚äÜ-refl


‚Üí++‚â°[] : {A : Set} {l k : List A} ‚Üí l ‚â° [] ‚Üí k ‚â° [] ‚Üí l ++ k ‚â° []
‚Üí++‚â°[] {A} {l} {k} h q rewrite h | q = refl



‚Üíremove0‚â°[] : {l : List Var} ‚Üí l ‚äÜ [ 0 ] ‚Üí remove0 l ‚â° []
‚Üíremove0‚â°[] {[]} h = refl
‚Üíremove0‚â°[] {0 ‚à∑ l} h = ‚Üíremove0‚â°[] Œª i ‚Üí h (there i)
‚Üíremove0‚â°[] {suc x ‚à∑ l} h = ‚ä•-elim (suc-‚â¢-0 j)
  where
    i : suc x ‚àà [ 0 ]
    i = h (here refl)

    j : suc x ‚â° 0
    j = ‚àà[1] i


‚äÜ?‚Üí‚äÜ : {l k : List Var} ‚Üí l ‚äÜ? k ‚â° true ‚Üí l ‚äÜ k
‚äÜ?‚Üí‚äÜ {[]} {k} h i = ‚ä•-elim (¬¨‚àà[] i)
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} h i with (v ‚àà? k)
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} h (here px) | yes p rewrite px = p
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} h (there i) | yes p = ‚äÜ?‚Üí‚äÜ h i
‚äÜ?‚Üí‚äÜ {v ‚à∑ l} {k} () i | no p


‚äÜ‚Üí‚äÜ? : {l k : List Var} ‚Üí l ‚äÜ k ‚Üí l ‚äÜ? k ‚â° true
‚äÜ‚Üí‚äÜ? {[]} {k} s = refl
‚äÜ‚Üí‚äÜ? {x ‚à∑ l} {k} s with x ‚àà? k
... | yes p = ‚äÜ‚Üí‚äÜ? {l} {k} Œª {z} i ‚Üí s (there i)
... | no p = ‚ä•-elim (p (s (here refl)))


lowerVars-fvars-CTerm0‚äÜ[] : (a : CTerm0) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚äÜ []
lowerVars-fvars-CTerm0‚äÜ[] a {x} i = ‚ä•-elim (suc-‚â¢-0 e)
  where
    j : suc x ‚àà fvars ‚åú a ‚åù
    j = ‚ààlowerVars‚Üí x (fvars ‚åú a ‚åù) i

    k : suc x ‚àà [ 0 ]
    k = ‚äÜ?‚Üí‚äÜ (CTerm0.closed a) j

    e : suc x ‚â° 0
    e = ‚àà[1] k


lowerVars-fvars-CTerm0‚â°[] : (a : CTerm0) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚â° []
lowerVars-fvars-CTerm0‚â°[] a = ‚äÜ[]‚Üí‚â°[] (lowerVars-fvars-CTerm0‚äÜ[] a)


#shiftUp : (n : ‚Ñï) (a : CTerm) ‚Üí shiftUp n ‚åú a ‚åù ‚â° ‚åú a ‚åù
#shiftUp n a = shiftUpTrivial n ‚åú a ‚åù (Œª w z ‚Üí #‚Üí¬¨‚àà {‚åú a ‚åù} (CTerm.closed a) w)


lowerVars-fvars-CTerm‚äÜ[] : (a : CTerm) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚äÜ []
lowerVars-fvars-CTerm‚äÜ[] a {x} i rewrite CTerm.closed a = i


lowerVars-fvars-CTerm‚â°[] : (a : CTerm) ‚Üí lowerVars (fvars ‚åú a ‚åù) ‚â° []
lowerVars-fvars-CTerm‚â°[] a = ‚äÜ[]‚Üí‚â°[] (lowerVars-fvars-CTerm‚äÜ[] a)


#sub : (a : CTerm) (b : CTerm0) ‚Üí # (sub ‚åú a ‚åù ‚åú b ‚åù)
#sub a b = ‚äÜ[]‚Üí‚â°[] (‚äÜ-trans (fvars-sub ‚åú a ‚åù ‚åú b ‚åù) (‚â°[]‚Üí‚äÜ[] (‚Üí++‚â°[] c1 c2)))
  where
    c1 : lowerVars (fvars ‚åú b ‚åù) ‚â° []
    c1 = lowerVars-fvars-CTerm0‚â°[] b

    c2 : fvars ‚åú a ‚åù ‚â° []
    c2 = CTerm.closed a


sub0 : (a : CTerm) (t : CTerm0) ‚Üí CTerm
sub0 a t =
  ct (sub ‚åú a ‚åù ‚åú t ‚åù) (#sub a t)



sub0‚åû‚åü : (a b : CTerm) ‚Üí sub0 a ‚åû b ‚åü ‚â° b
sub0‚åû‚åü a b = CTerm‚â° (subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b))



#NAT : CTerm
#NAT = ct NAT refl


#FREE : CTerm
#FREE = ct FREE refl


#QNAT : CTerm
#QNAT = ct QNAT refl


#AX : CTerm
#AX = ct AX refl


#UNIV : ‚Ñï ‚Üí CTerm
#UNIV n = ct (UNIV n) refl


#LIFT : CTerm ‚Üí CTerm
#LIFT a = ct (LIFT ‚åú a ‚åù) c
  where
    c : # LIFT ‚åú a ‚åù
    c rewrite CTerm.closed a = refl


#APPLY : CTerm ‚Üí CTerm ‚Üí CTerm
#APPLY a b = ct (APPLY ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # APPLY ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | CTerm.closed b = refl


#PAIR : CTerm ‚Üí CTerm ‚Üí CTerm
#PAIR a b = ct (PAIR ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # PAIR ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | CTerm.closed b = refl


#UNION : CTerm ‚Üí CTerm ‚Üí CTerm
#UNION a b = ct (UNION ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # UNION ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | CTerm.closed b = refl


#FFDEFS : CTerm ‚Üí CTerm ‚Üí CTerm
#FFDEFS a b = ct (FFDEFS ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # FFDEFS ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | CTerm.closed b = refl


#TSQUASH : CTerm ‚Üí CTerm
#TSQUASH a = ct (TSQUASH ‚åú a ‚åù) c
  where
    c : # TSQUASH ‚åú a ‚åù
    c rewrite CTerm.closed a = refl


#INL : CTerm ‚Üí CTerm
#INL a = ct (INL ‚åú a ‚åù) c
  where
    c : # INL ‚åú a ‚åù
    c rewrite CTerm.closed a = refl


#INR : CTerm ‚Üí CTerm
#INR a = ct (INR ‚åú a ‚åù) c
  where
    c : # INR ‚åú a ‚åù
    c rewrite CTerm.closed a = refl


#LT : CTerm ‚Üí CTerm ‚Üí CTerm
#LT a b = ct (LT ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # LT ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | CTerm.closed b = refl


#QLT : CTerm ‚Üí CTerm ‚Üí CTerm
#QLT a b = ct (QLT ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # QLT ‚åú a ‚åù ‚åú b ‚åù
    c rewrite CTerm.closed a | CTerm.closed b = refl


#EQ : CTerm ‚Üí CTerm ‚Üí CTerm ‚Üí CTerm
#EQ a b T = ct (EQ ‚åú a ‚åù ‚åú b ‚åù ‚åú T ‚åù) c
  where
    c : # EQ ‚åú a ‚åù ‚åú b ‚åù (CTerm.cTerm T)
    c rewrite CTerm.closed a | CTerm.closed b | CTerm.closed T = refl


#PI : CTerm ‚Üí CTerm0 ‚Üí CTerm
#PI a b = ct (PI ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # PI ‚åú a ‚åù (CTerm0.cTerm b)
    c rewrite CTerm.closed a | lowerVars-fvars-CTerm0‚â°[] b = refl


#SUM : CTerm ‚Üí CTerm0 ‚Üí CTerm
#SUM a b = ct (SUM ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # SUM ‚åú a ‚åù (CTerm0.cTerm b)
    c rewrite CTerm.closed a | lowerVars-fvars-CTerm0‚â°[] b = refl


#SET : CTerm ‚Üí CTerm0 ‚Üí CTerm
#SET a b = ct (SET ‚åú a ‚åù ‚åú b ‚åù) c
  where
    c : # SET ‚åú a ‚åù (CTerm0.cTerm b)
    c rewrite CTerm.closed a | lowerVars-fvars-CTerm0‚â°[] b = refl


{--‚â°# : {a b : Term} ‚Üí a ‚â° b ‚Üí (ca : # a) (cb : # b) ‚Üí ca ‚â° cb
‚â°# {a} {b} e ca cb = {!!}--}



EQinj1 : {a b c d e f : Term} ‚Üí EQ a b c ‚â° EQ d e f ‚Üí a ‚â° d
EQinj1 refl =  refl

EQinj2 : {a b c d e f : Term} ‚Üí EQ a b c ‚â° EQ d e f ‚Üí b ‚â° e
EQinj2 refl =  refl

EQinj3 : {a b c d e f : Term} ‚Üí EQ a b c ‚â° EQ d e f ‚Üí c ‚â° f
EQinj3 refl =  refl


#EQinj1 : {a b c d e f : CTerm} ‚Üí #EQ a b c ‚â° #EQ d e f ‚Üí a ‚â° d
#EQinj1 c = CTerm‚â° (EQinj1 (‚â°CTerm c))

#EQinj2 : {a b c d e f : CTerm} ‚Üí #EQ a b c ‚â° #EQ d e f ‚Üí b ‚â° e
#EQinj2 c = CTerm‚â° (EQinj2 (‚â°CTerm c))

#EQinj3 : {a b c d e f : CTerm} ‚Üí #EQ a b c ‚â° #EQ d e f ‚Üí c ‚â° f
#EQinj3 c = CTerm‚â° (EQinj3 (‚â°CTerm c))


_#‚áõ_at_ : (T T' : CTerm) (w : ùïé¬∑) ‚Üí Set‚ÇÅ
T #‚áõ T' at w = ‚åú T ‚åù ‚áõ ‚åú T' ‚åù at w
infix 30 _#‚áõ_at_


#isValue : CTerm -> Set
#isValue t = isValue ‚åú t ‚åù


#compAllRefl : (T : CTerm) (w : ùïé¬∑) ‚Üí T #‚áõ T at w
#compAllRefl (ct T cT) w i = compAllRefl T w i


#compAllVal : {a b : CTerm} {w : ùïé¬∑} ‚Üí a #‚áõ b at w ‚Üí #isValue a ‚Üí a ‚â° b
#compAllVal {ct a ca} {ct b cb} {w} c i = CTerm‚â° (compAllVal c i)


#strongMonEq : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set‚ÇÅ
#strongMonEq w t1 t2 = strongMonEq w ‚åú t1 ‚åù ‚åú t2 ‚åù


#weakMonEq : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set‚ÇÅ
#weakMonEq w t1 t2 = weakMonEq w ‚åú t1 ‚åù ‚åú t2 ‚åù


#lift-<NUM-pair : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set‚ÇÅ
#lift-<NUM-pair w t1 t2 = lift-<NUM-pair w ‚åú t1 ‚åù ‚åú t2 ‚åù


#‚áõto-same-CS : (w : ùïé¬∑) (t1 t2 : CTerm) ‚Üí Set‚ÇÅ
#‚áõto-same-CS w t1 t2 = ‚áõto-same-CS w ‚åú t1 ‚åù ‚åú t2 ‚åù


-- PERs and world dependent PERs
per : Set‚ÇÇ
per = CTerm ‚Üí CTerm ‚Üí Set‚ÇÅ

wper : Set‚ÇÇ
wper = (w : ùïé¬∑) ‚Üí per

ist : Set‚ÇÇ
ist = CTerm ‚Üí Set‚ÇÅ

wist : Set‚ÇÇ
wist = (w : ùïé¬∑) ‚Üí ist


ùïÉ : Set
ùïÉ = ‚Ñï

-- eqTypes and eqInType provide meaning to types w.r.t. already interpreted universes,
-- given by univs (1st conjunct defines the equality between such universes, while the
-- second conjunct defines the equality in such universes)
univsUpTo : ùïÉ ‚Üí Set‚ÇÇ
univsUpTo n = (m : ùïÉ) (p : m < n) ‚Üí wper


univs : Set‚ÇÇ
univs = Œ£ ‚Ñï univsUpTo


‚ÜìùïÉ : ùïÉ ‚Üí ùïÉ
‚ÜìùïÉ 0 = 0
‚ÜìùïÉ (suc n) = n


‚ÜìùïÉ‚â§ : (n : ‚Ñï) ‚Üí ‚ÜìùïÉ n ‚â§ n
‚ÜìùïÉ‚â§ 0 = ‚â§-refl
‚ÜìùïÉ‚â§ (suc n) = n‚â§1+n n


‚ÜìunivsUpTo : {n : ùïÉ} ‚Üí univsUpTo n ‚Üí univsUpTo (‚ÜìùïÉ n)
‚ÜìunivsUpTo {0} f m p = f m p
‚ÜìunivsUpTo {suc n} f m p = f m (<-trans p (n<1+n n))


‚ÜìU : univs ‚Üí univs
‚ÜìU (n , f) = (‚ÜìùïÉ n , ‚ÜìunivsUpTo f)


-- equality between types (an inductive definition)
-- and equality in types (a recursive function)
-- We don't check positivity here, this can be done for all instances of bar.Bar
--{-# NO_POSITIVITY_CHECK #-}
data eqTypes (u : univs) (w : ùïé¬∑) (T1 T2 : CTerm) : Set‚ÇÅ
--{-# TERMINATING #-}
eqInType : (u : univs) (w : ùïé¬∑) {T1 T2 : CTerm} ‚Üí (eqTypes u w T1 T2) ‚Üí per
\end{code}


Equality between type is defined as the following inductive definition


\begin{code}
data eqTypes u w T1 T2 where
  EQTNAT : T1 #‚áõ #NAT at w ‚Üí T2 #‚áõ #NAT at w ‚Üí eqTypes u w T1 T2
  EQTQNAT : T1 #‚áõ #QNAT at w ‚Üí T2 #‚áõ #QNAT at w ‚Üí eqTypes u w T1 T2
  EQTLT : (a1 a2 b1 b2 : CTerm)
    ‚Üí T1 #‚áõ (#LT a1 b1) at w
    ‚Üí T2 #‚áõ (#LT a2 b2) at w
    ‚Üí #strongMonEq w a1 a2
    ‚Üí #strongMonEq w b1 b2
    ‚Üí eqTypes u w T1 T2
  EQTQLT : (a1 a2 b1 b2 : CTerm)
    ‚Üí T1 #‚áõ (#QLT a1 b1) at w
    ‚Üí T2 #‚áõ (#QLT a2 b2) at w
    ‚Üí #weakMonEq w a1 a2
    ‚Üí #weakMonEq w b1 b2
    ‚Üí eqTypes u w T1 T2
  EQTFREE : T1 #‚áõ #FREE at w ‚Üí T2 #‚áõ #FREE at w ‚Üí eqTypes u w T1 T2
  EQTPI : (A1 : CTerm) (B1 : CTerm0) (A2 : CTerm) (B2 : CTerm0)
    ‚Üí T1 #‚áõ (#PI A1 B1) at w
    ‚Üí T2 #‚áõ (#PI A2 B2) at w
    ‚Üí (eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType u w' (eqta w' e) a1 a2
                              ‚Üí eqTypes u w' (sub0 a1 B1) (sub0 a2 B2)))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqta w e) a b))
    ‚Üí (extb : (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w e x ‚Üí eqInType u w (eqtb w e a b x) c d))
    ‚Üí eqTypes u w T1 T2
  EQTSUM : (A1 : CTerm) (B1 : CTerm0) (A2 : CTerm) (B2 : CTerm0)
    ‚Üí T1 #‚áõ (#SUM A1 B1) at w
    ‚Üí T2 #‚áõ (#SUM A2 B2) at w
    ‚Üí (eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType u w' (eqta w' e) a1 a2
                         ‚Üí eqTypes u w' (sub0 a1 B1) (sub0 a2 B2)))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqta w e) a b))
    ‚Üí (extb : (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w e x ‚Üí eqInType u w (eqtb w e a b x) c d))
    ‚Üí eqTypes u w T1 T2
  EQTSET : (A1 : CTerm) (B1 : CTerm0) (A2 : CTerm) (B2 : CTerm0)
    ‚Üí T1 #‚áõ (#SET A1 B1) at w
    ‚Üí T2 #‚áõ (#SET A2 B2) at w
    ‚Üí (eqta : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (eqtb : ‚àÄùïé w (Œª w' e ‚Üí (a1 a2 : CTerm) ‚Üí eqInType u w' (eqta w' e) a1 a2
                         ‚Üí eqTypes u w' (sub0 a1 B1) (sub0 a2 B2)))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqta w e) a b))
    ‚Üí (extb : (a b c d : CTerm) ‚Üí wPredDepExtIrr (Œª w e x ‚Üí eqInType u w (eqtb w e a b x) c d))
    ‚Üí eqTypes u w T1 T2
  EQTEQ : (a1 b1 a2 b2 A B : CTerm)
    ‚Üí T1 #‚áõ #EQ a1 a2 A at w
    ‚Üí T2 #‚áõ #EQ b1 b2 B at w
    ‚Üí (eqtA : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A B))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqtA w e) a b))
    ‚Üí (eqt1 : ‚àÄùïé w (Œª w' e ‚Üí eqInType u w' (eqtA w' e) a1 b1))
    ‚Üí (eqt2 : ‚àÄùïé w (Œª w' e ‚Üí eqInType u w' (eqtA w' e) a2 b2))
    ‚Üí eqTypes u w T1 T2
  EQTUNION : (A1 B1 A2 B2 : CTerm)
    ‚Üí T1 #‚áõ (#UNION A1 B1) at w
    ‚Üí T2 #‚áõ (#UNION A2 B2) at w
    ‚Üí (eqtA : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (eqtB : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' B1 B2))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqtA w e) a b))
    ‚Üí (extb : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqtB w e) a b))
    ‚Üí eqTypes u w T1 T2
  EQTSQUASH : (A1 A2 : CTerm)
    ‚Üí T1 #‚áõ (#TSQUASH A1) at w
    ‚Üí T2 #‚áõ (#TSQUASH A2) at w
    ‚Üí (eqtA : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqtA w e) a b))
    ‚Üí eqTypes u w T1 T2
{--  EQTDUM : (A1 A2 : Term)
    ‚Üí T1 ‚áõ (DUM A1) at w
    ‚Üí T2 ‚áõ (DUM A2) at w
    ‚Üí (eqtA : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (exta : (a b : Term) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqtA w e) a b))
    ‚Üí eqTypes u w T1 T2--}
  EQFFDEFS : (A1 A2 x1 x2 : CTerm)
    ‚Üí T1 #‚áõ (#FFDEFS A1 x1) at w
    ‚Üí T2 #‚áõ (#FFDEFS A2 x2) at w
    ‚Üí (eqtA : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes u w' A1 A2))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType u w (eqtA w e) a b))
    ‚Üí (eqx : ‚àÄùïé w (Œª w' e ‚Üí eqInType u w' (eqtA w' e) x1 x2))
    ‚Üí eqTypes u w T1 T2
  EQTUNIV : (i : ‚Ñï) (p : i < fst u)
    ‚Üí T1 #‚áõ #UNIV i at w
    ‚Üí T2 #‚áõ #UNIV i at w
    ‚Üí eqTypes u w T1 T2
  EQTLIFT : (A1 A2 : CTerm)
    ‚Üí T1 #‚áõ #LIFT A1 at w
    ‚Üí T2 #‚áõ #LIFT A2 at w
    ‚Üí (eqtA : ‚àÄùïé w (Œª w' _ ‚Üí eqTypes (‚ÜìU u) w' A1 A2))
    ‚Üí (exta : (a b : CTerm) ‚Üí wPredExtIrr (Œª w e ‚Üí eqInType (‚ÜìU u) w (eqtA w e) a b))
    ‚Üí eqTypes u w T1 T2
  EQTBAR : inbar w (Œª w' _ ‚Üí eqTypes u w' T1 T2) ‚Üí eqTypes u w T1 T2
\end{code}


Equality in types is defined as the following recursive function.


\begin{code}
PIeq : (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) ‚Üí per
PIeq eqa eqb f g = (a b : CTerm) ‚Üí (e : eqa a b) ‚Üí eqb a b e (#APPLY f a) (#APPLY g b)


SUMeq : (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) ‚Üí wper
SUMeq eqa eqb w f g =
  Œ£ CTerm (Œª a1 ‚Üí Œ£ CTerm (Œª a2 ‚Üí Œ£ CTerm (Œª b1 ‚Üí Œ£ CTerm (Œª b2 ‚Üí
    Œ£ (eqa a1 a2) (Œª ea ‚Üí
    f #‚áõ (#PAIR a1 b1) at w
    √ó g #‚áõ (#PAIR a2 b2) at w
    √ó eqb a1 a2 ea b1 b2)))))


SETeq : (eqa : per) (eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per) ‚Üí per
SETeq eqa eqb f g = Œ£ CTerm (Œª b ‚Üí Œ£ (eqa f g) (Œª ea ‚Üí eqb f g ea b b))


EQeq : (a1 a2 : CTerm) (eqa : per) ‚Üí wper
EQeq a1 a2 eqa w t1 t2 =
  t1 #‚áõ #AX at w √ó t2 #‚áõ #AX at w √ó eqa a1 a2


UNIONeq : (eqa eqb : per) ‚Üí wper
UNIONeq eqa eqb w t1 t2  =
  Œ£ CTerm (Œª a ‚Üí Œ£ CTerm (Œª b ‚Üí
    (t1 #‚áõ (#INL a) at w √ó t2 #‚áõ (#INL b) at w √ó eqa a b)
    ‚äé
    (t1 #‚áõ (#INR a) at w √ó t2 #‚áõ (#INR b) at w √ó eqb a b)))


TSQUASHeq : (eqa : per) ‚Üí wper
TSQUASHeq eqa w t1 t2  =
  Œ£ CTerm (Œª a1 ‚Üí Œ£ CTerm (Œª a2 ‚Üí
     (‚åú t1 ‚åù ‚àº ‚åú a1 ‚åù at w) √ó (‚åú t2 ‚åù ‚àº ‚åú a2 ‚åù at w) √ó (‚åú t1 ‚åù ‚âà ‚åú t2 ‚åù at w)
     √ó eqa a1 a2))


FFDEFSeq : CTerm ‚Üí (eqa : per) ‚Üí wper
FFDEFSeq x1 eqa w t1 t2 =
  Œ£ CTerm (Œª x ‚Üí
   (t1 #‚áõ #AX at w) √ó (t2 #‚áõ #AX at w)
   √ó eqa x1 x √ó nodefs ‚åú x ‚åù)


{-# TERMINATING #-}
--{-# INLINE inOpenBar' #-}
eqInType _ w (EQTNAT _ _) t1 t2 = inbar w (Œª w' _ ‚Üí #strongMonEq w' t1 t2)
eqInType _ w (EQTQNAT _ _) t1 t2 = inbar w (Œª w' _ ‚Üí #weakMonEq w' t1 t2)
eqInType _ w (EQTLT a1 _ b1 _ _ _ _ _) t1 t2 = inbar w (Œª w' _ ‚Üí #lift-<NUM-pair w' a1 b1)
eqInType _ w (EQTQLT a1 _ b1 _ _ _ _ _) t1 t2 = inbar w (Œª w' _ ‚Üí #lift-<NUM-pair w' a1 b1)
eqInType _ w (EQTFREE _ _) t1 t2 = inbar w (Œª w' _ ‚Üí #‚áõto-same-CS w' t1 t2)
eqInType u w (EQTPI _ _ _ _ _ _ eqta eqtb exta extb) f1 f2 =
  inbar w (Œª w' e ‚Üí PIeq (eqInType u w' (eqta w' e)) (Œª a1 a2 eqa ‚Üí eqInType u w' (eqtb w' e a1 a2 eqa)) f1 f2)
eqInType u w (EQTSUM _ _ _ _ _ _ eqta eqtb exta extb) t1 t2 =
  inbar w (Œª w' e ‚Üí SUMeq (eqInType u w' (eqta w' e)) (Œª a1 a2 eqa ‚Üí eqInType u w' (eqtb w' e a1 a2 eqa)) w' t1 t2)
eqInType u w (EQTSET _ _ _ _ _ _ eqta eqtb exta extb) t1 t2 =
  inbar w (Œª w' e ‚Üí SETeq (eqInType u w' (eqta w' e)) (Œª a1 a2 eqa ‚Üí eqInType u w' (eqtb w' e a1 a2 eqa)) t1 t2)
eqInType u w (EQTEQ a1 _ a2 _ _ _ _ _ eqtA exta eqt1 eqt2) t1 t2 =
  inbar w (Œª w' e ‚Üí EQeq a1 a2 (eqInType u w' (eqtA w' e)) w' t1 t2)
eqInType u w (EQTUNION _ _ _ _ _ _ eqtA eqtB exta extb) t1 t2 =
  inbar w (Œª w' e ‚Üí UNIONeq (eqInType u w' (eqtA w' e)) (eqInType u w' (eqtB w' e)) w' t1 t2)
eqInType u w (EQTSQUASH _ _ _ _ eqtA exta) t1 t2 =
  inbar w (Œª w' e ‚Üí TSQUASHeq (eqInType u w' (eqtA w' e)) w' t1 t2)
--eqInType u w (EQTDUM _ _ _ _ eqtA exta) t1 t2 = Lift {0‚Ñì} 1‚Ñì ‚ä§
eqInType u w (EQFFDEFS _ _ x1 _ _ _ eqtA exta _) t1 t2 =
  inbar w (Œª w' e ‚Üí FFDEFSeq x1 (eqInType u w' (eqtA w' e)) w' t1 t2)
eqInType u w (EQTUNIV i p c‚ÇÅ c‚ÇÇ) T1 T2 = snd u i p w T1 T2
eqInType u w (EQTLIFT A1 A2 c‚ÇÅ c‚ÇÇ eqtA exta) t1 t2 =
  inbar w (Œª w' e ‚Üí eqInType (‚ÜìU u) w' (eqtA w' e) t1 t2)
--  inbar w (Œª w' e ‚Üí eqInType (‚ÜìU u) w' (eqtA w' e) T1 T2)
eqInType u w (EQTBAR f) t1 t2 =
  inbar' w f (Œª w' _ (x : eqTypes u w' _ _) ‚Üí eqInType u w' x t1 t2)
  {-- This is an unfolding of the above, as agda doesn't like the above --}
{--  ‚àÄùïé w (Œª w0 e0 ‚Üí
           let p  = f w0 e0 in
           let w1 = proj‚ÇÅ p in
           let e1 = proj‚ÇÅ (proj‚ÇÇ p) in
           let q  = proj‚ÇÇ (proj‚ÇÇ p) in
           exW w1 (Œª w2 e2 ‚Üí ‚àÄùïé w2 (Œª w3 e3 ‚Üí (z : w3 ‚âΩ w) ‚Üí eqInType u w3 (q w3 (extTrans e3 e2) z) t1 t2)))--}
\end{code}


We finally close the construction as follows:


\begin{code}
-- Two level-m universes are equal if they compute to (UNIV m)
eqUnivi : (m : ‚Ñï) ‚Üí wper
eqUnivi m w T1 T2 = inbar w (Œª w' _ ‚Üí ‚åú T1 ‚åù ‚áõ (UNIV m) at w' √ó ‚åú T2 ‚åù ‚áõ (UNIV m) at w')


{--uni0 : univsUpTo 0
uni0 i ()--}


inbarEqTypes : (u : univs) (w : ùïé¬∑) (T1 T2 : CTerm) ‚Üí Set‚ÇÅ
inbarEqTypes u w T1 T2 = inbar w (Œª w' _ ‚Üí eqTypes u w' T1 T2)


uniUpTo : (n : ‚Ñï) ‚Üí univsUpTo n
uniUpTo 0 i ()
uniUpTo (suc n) m p with m <? n
... | yes q = uniUpTo n m q
... | no q = inbarEqTypes (n , uniUpTo n) -- i.e., m ‚â° n


{--
-- Two terms are equal in universe m if they are equal according to eqTypes
eqInUnivi : (m : ‚Ñï) ‚Üí wper
eqInUnivi 0 = Œª _ _ _ ‚Üí Lift {0‚Ñì} 1‚Ñì ‚ä•
eqInUnivi (suc m) w T1 T2 = {!!}
--  inbar w (Œª w' _ ‚Üí eqTypes (m , (eqUnivi m , eqInUnivi m)) w' T1 T2 {-- ‚äé eqInUnivi m w' T1 T2--})
-- To have this ‚äé we need a way to lift types in eqTypes, so that types equal at level 'n' can be equal
-- as types in lower universes, and then lifted up to being equal as types in 'n' again
-- The type system probably isn't transitive without that.
--}


{--eqInUnivi‚â§ : (m : ‚Ñï) (i : ‚Ñï) (p : i ‚â§ m) ‚Üí wper
eqInUnivi‚â§ 0 i p = Œª _ _ _ ‚Üí Lift {0‚Ñì} 1‚Ñì ‚ä•
eqInUnivi‚â§ (suc m) i p w T1 T2 with suc m ‚â§? c =
  inbar w (Œª w' _ ‚Üí eqTypes (m , (eqUnivi m , eqInUnivi m)) w' T1 T2 {-- ‚äé eqInUnivi m w' T1 T2--})--}


--- Add an explicit level-lifting constructor to the type system
mkU : (n : ‚Ñï) (u : univsUpTo n) ‚Üí univs
mkU n u = (n , u)

uni : ‚Ñï ‚Üí univs
uni n = mkU n (uniUpTo n) --(eqUnivi n , eqInUnivi n))


{--ul : ‚Ñï ‚Üí ‚Ñï
ul n = {--suc--} n--}


is-uni : (u : univs) ‚Üí Set‚ÇÇ
is-uni u = u ‚â° uni (fst u)


is-uni‚Üí : {n : ‚Ñï} (u : univsUpTo n) ‚Üí is-uni (n , u) ‚Üí u ‚â° uniUpTo n
is-uni‚Üí {n} .(uniUpTo n) refl = refl


is-uni-uni : (n : ùïÉ) ‚Üí is-uni (uni n)
is-uni-uni n = refl


‚â°univs : {n : ùïÉ} {u1 u2 : univsUpTo n} ‚Üí u1 ‚â° u2 ‚Üí mkU n u1 ‚â° mkU n u2
‚â°univs {n} {u1} {u2} e rewrite e = refl


‚â°uniUpTo : (n i : ùïÉ) (p q : i < n) ‚Üí uniUpTo n i p ‚â° uniUpTo n i q
‚â°uniUpTo (suc n) i p q with i <? n
... | yes w = refl
... | no w = refl


‚ÜìU-uni : (n : ùïÉ) ‚Üí ‚ÜìU (uni n) ‚â° uni (‚ÜìùïÉ n)
‚ÜìU-uni 0 = refl
‚ÜìU-uni (suc n) = ‚â°univs (E e)
  where
    e : (x : ùïÉ) ‚Üí ‚ÜìunivsUpTo (uniUpTo (suc n)) x ‚â° uniUpTo n x
    e x with x <? n
    ... | yes p = E f
      where
        f : (x‚ÇÅ : suc x ‚â§ n) ‚Üí uniUpTo n x p ‚â° uniUpTo n x x‚ÇÅ
        f q = ‚â°uniUpTo n x p q
    ... | no p = E f
      where
        f : (x‚ÇÅ : suc x ‚â§ n) ‚Üí inbarEqTypes (n , uniUpTo n) ‚â° uniUpTo n x x‚ÇÅ
        f q = ‚ä•-elim (p q)


ùïå : Set‚ÇÇ
ùïå = Œ£ univs is-uni

mkùïå : {u : univs} (isu : is-uni u) ‚Üí ùïå
mkùïå {u} isu = (u , isu)


‚Ñï‚Üíùïå : ‚Ñï ‚Üí ùïå
‚Ñï‚Üíùïå n = mkùïå {uni n} (is-uni-uni n)


is-uni-‚ÜìU : {u : univs} ‚Üí is-uni u ‚Üí is-uni (‚ÜìU u)
is-uni-‚ÜìU {u} isu rewrite isu = ‚ÜìU-uni (fst u)


‚Üìùïå : ùïå ‚Üí ùïå
‚Üìùïå (u , isu) = ‚ÜìU u , is-uni-‚ÜìU isu


_¬∑·µ§ : ùïå ‚Üí univs
_¬∑·µ§ u = fst u


_¬∑·µ¢ : (u : ùïå) ‚Üí is-uni (u ¬∑·µ§)
_¬∑·µ¢ u = snd u


_¬∑‚Çô : ùïå ‚Üí ‚Ñï
_¬∑‚Çô u = fst (u ¬∑·µ§)


‚â°Types : (u : ùïå) ‚Üí wper
‚â°Types u = eqTypes (u ¬∑·µ§)


‚â°‚ààType : (u : ùïå) (w : ùïé¬∑) {T1 T2 : CTerm} ‚Üí (eqTypes (u ¬∑·µ§) w T1 T2) ‚Üí per
‚â°‚ààType u w eqt = eqInType (u ¬∑·µ§) w eqt



TEQ : Set‚ÇÇ
TEQ = wper

IST : Set‚ÇÇ
IST = wist

EQT : Set‚ÇÇ
EQT = (w : ùïé¬∑) (T a b : CTerm) ‚Üí Set‚ÇÅ

MEMT : Set‚ÇÇ
MEMT = (w : ùïé¬∑) (T a : CTerm) ‚Üí Set‚ÇÅ

-- Finally, the 'equal types' and 'equal in types' relations
equalTypes : (u : ‚Ñï) ‚Üí TEQ
equalTypes u = eqTypes (uni u)

isType : (u : ‚Ñï) ‚Üí IST
isType u w T = equalTypes u w T T

equalTerms : (n : ‚Ñï) (w : ùïé¬∑) {T1 T2 : CTerm} ‚Üí (equalTypes n w T1 T2) ‚Üí per
equalTerms n w eqt = eqInType (uni n) w eqt

equalInType : (u : ‚Ñï) (w : ùïé¬∑) (T : CTerm) ‚Üí per
equalInType u w T a b = Œ£ (isType u w T) (Œª p ‚Üí equalTerms u w p a b)
\end{code}


\begin{code}
eqtypes : TEQ
eqtypes w T1 T2 = Œ£ ‚Ñï (Œª u ‚Üí equalTypes u w T1 T2)

eqintype : EQT
eqintype w T a b = Œ£ ‚Ñï (Œª u ‚Üí equalInType u w T a b)

member : MEMT
member w T a = eqintype w T a a

{--wfinhN1L : (j : ‚Ñï) ‚Üí wfInh (inhN1L j)
wfinhN1L j = ‚â§-refl

wfinhN2L : (j : ‚Ñï) ‚Üí wfInh (inhN2L j)
wfinhN2L j = (n‚â§1+n _)--}


¬¨s‚â§ : (j : ‚Ñï) ‚Üí ¬¨ suc j ‚â§ j
¬¨s‚â§ .(suc _) (_‚â§_.s‚â§s h) = ¬¨s‚â§ _ h

¬¨‚â°s : (j : ‚Ñï) ‚Üí ¬¨ j ‚â° suc j
¬¨‚â°s 0 ()
¬¨‚â°s (suc j) ()

¬¨s‚â§0 : (j : ‚Ñï) ‚Üí ¬¨ suc j ‚â§ 0
¬¨s‚â§0 j ()

eq-pair : {a b : Level} {A : Set a} {B : Set b} {a‚ÇÅ a‚ÇÇ : A} {b‚ÇÅ b‚ÇÇ : B} ‚Üí a‚ÇÅ ‚â° a‚ÇÇ ‚Üí b‚ÇÅ ‚â° b‚ÇÇ ‚Üí ( a‚ÇÅ , b‚ÇÅ ) ‚â° ( a‚ÇÇ , b‚ÇÇ )
eq-pair {a} {b} {A} {B} {a‚ÇÅ} {a‚ÇÇ} {b‚ÇÅ} {b‚ÇÇ} p q rewrite p | q = refl


‚â§-trans-‚â§-refl : {i j : ‚Ñï} (c : i ‚â§ j) ‚Üí ‚â§-trans c ‚â§-refl ‚â° c
‚â§-trans-‚â§-refl {i} {j} c = ‚â§-irrelevant _ c


-- ---------------------------------
-- Type system
intype : (w : ùïé¬∑) (T t : CTerm) ‚Üí Set‚ÇÅ
intype w T t = eqintype w T t t

TEQsym : TEQ ‚Üí Set‚ÇÅ
TEQsym œÑ = (w : ùïé¬∑) (A B : CTerm) ‚Üí œÑ w A B ‚Üí œÑ w B A

TEQtrans : TEQ ‚Üí Set‚ÇÅ
TEQtrans œÑ = (w : ùïé¬∑) (A B C : CTerm) ‚Üí œÑ w A B ‚Üí œÑ w B C ‚Üí œÑ w A C

EQTsym : EQT ‚Üí Set‚ÇÅ
EQTsym œÉ = (w : ùïé¬∑) (A a b : CTerm) ‚Üí œÉ w A a b ‚Üí œÉ w A b a

EQTtrans : EQT ‚Üí Set‚ÇÅ
EQTtrans œÉ  = (w : ùïé¬∑) (A a b c : CTerm) ‚Üí œÉ w A a b ‚Üí œÉ w A b c ‚Üí œÉ w A a c

TSext : TEQ ‚Üí EQT ‚Üí Set‚ÇÅ
TSext œÑ œÉ = (w : ùïé¬∑) (A B a b : CTerm) ‚Üí œÑ w A B ‚Üí œÉ w A a b ‚Üí œÉ w B a b

record TS (œÑ : TEQ) (œÉ : EQT) : Set‚ÇÅ where
  constructor mkts
  field
    tySym   : TEQsym œÑ
    tyTrans : TEQtrans œÑ
    eqSym   : EQTsym œÉ
    eqTrans : EQTtrans œÉ
    tsExt   : TSext œÑ œÉ


-- ---------------------------------
-- Sequents

record hypothesis : Set where
  constructor mkhyp
  field
    name : Var
    hyp  : Term

hypotheses : Set
hypotheses = List hypothesis

record sequent : Set where
  constructor mkseq
  field
    hyps  : hypotheses
    concl : Term

\end{code}
