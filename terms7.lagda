\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality hiding ([_]) -- using (sym ; subst ; _‚àé ; _‚â°‚ü®_‚ü©_)
open ‚â°-Reasoning
open import Data.Product
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _‚âü_ ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; _<?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Data.Bool.Properties using ()
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties

open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import choiceExt
open import newChoice
open import encode


module terms7 {L : Level} (W : PossibleWorlds {L})
              (C : Choice) (M : Compatible W C) (G : GetChoice {L} W C M) (E : ChoiceExt {L} W C)
              (N : NewChoice W C M G)
              (EC : Encode)
       where

open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(M)
open import getChoiceDef(W)(C)(M)(G)
open import choiceExtDef(W)(C)(M)(G)(E)
open import newChoiceDef(W)(C)(M)(G)(N)

open import computation(W)(C)(M)(G)(E)(N)(EC)
open import terms2(W)(C)(M)(G)(E)(N)(EC)
open import terms3(W)(C)(M)(G)(E)(N)(EC)
open import terms4(W)(C)(M)(G)(E)(N)(EC)
open import terms5(W)(C)(M)(G)(E)(N)(EC)
open import terms6(W)(C)(M)(G)(E)(N)(EC)

open import continuity-conds(W)(C)(M)(G)(E)(N)(EC)


‚áìPresDiffNF : (f : Term) (name : Name) (n : ‚Ñï) ‚Üí Set(lsuc(L))
‚áìPresDiffNF f name n =
  (w1 w2 w1' : ùïé¬∑) (a v : Term)
  ‚Üí isValue v
  ‚Üí compatible¬∑ name w1 Res‚ä§
  ‚Üí compatible¬∑ name w1' Res‚ä§
  ‚Üí ‚àÄùïé-get0-NUM w1 name
  ‚Üí ‚àÄùïé-get0-NUM w1' name
  ‚Üí differ name name f a a
  ‚Üí steps n (a , w1) ‚â° (v , w2)
  ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí a ‚áì v from w1' to w2' √ó differ name name f v v)


differNF-LAMBDA‚Çó‚Üí : {name : Name} {f g : Term}
                  ‚Üí differ name name f (LAMBDA g) (LAMBDA g)
                  ‚Üí differ name name f g g
                    ‚äé g ‚â° updBody name f
differNF-LAMBDA‚Çó‚Üí {name} {f} {g} (differ-LAMBDA .g .g d) = inj‚ÇÅ d
differNF-LAMBDA‚Çó‚Üí {name} {f} {.(updBody name f)} differ-upd = inj‚ÇÇ refl


differNF-PAIR‚Çó‚Üí : {name : Name} {f a b : Term}
                  ‚Üí differ name name f (PAIR a b) (PAIR a b)
                  ‚Üí differ name name f a a √ó differ name name f b b
differNF-PAIR‚Çó‚Üí {name} {f} {a} {b} (differ-PAIR .a .a .b .b diff diff‚ÇÅ) = diff , diff‚ÇÅ


differNF-SUP‚Çó‚Üí : {name : Name} {f a b : Term}
                  ‚Üí differ name name f (SUP a b) (SUP a b)
                  ‚Üí differ name name f a a √ó differ name name f b b
differNF-SUP‚Çó‚Üí {name} {f} {a} {b} (differ-SUP .a .a .b .b diff diff‚ÇÅ) = diff , diff‚ÇÅ


{--
differNF-MSUP‚Çó‚Üí : {name : Name} {f a b : Term}
                  ‚Üí differ name name f (MSUP a b) (MSUP a b)
                  ‚Üí differ name name f a a √ó differ name name f b b
differNF-MSUP‚Çó‚Üí {name} {f} {a} {b} (differ-MSUP .a .a .b .b diff diff‚ÇÅ) = diff , diff‚ÇÅ
--}


differNF-INL‚Çó‚Üí : {name : Name} {f a : Term}
                ‚Üí differ name name f (INL a) (INL a)
                ‚Üí differ name name f a a
differNF-INL‚Çó‚Üí {name} {f} {a} (differ-INL .a .a diff) = diff


differNF-INR‚Çó‚Üí : {name : Name} {f a : Term}
                ‚Üí differ name name f (INR a) (INR a)
                ‚Üí differ name name f a a
differNF-INR‚Çó‚Üí {name} {f} {a} (differ-INR .a .a diff) = diff


<‚äé‚â§ : (a b : ‚Ñï) ‚Üí a < b ‚äé b ‚â§ a
<‚äé‚â§ a b with a <? b
... | yes y = inj‚ÇÅ y
... | no y = inj‚ÇÇ (‚âÆ‚áí‚â• y)



abstract
  updNF‚áìnames : (gc0 : get-choose-‚Ñï)
            (k : ‚Ñï) (f : Term) (name : Name) (w1 w1' w2 : ùïé¬∑) (a : Term) (v : Term)
            ‚Üí # f
            ‚Üí ¬¨Names f
            ‚Üí ‚àÄùïé-get0-NUM w1 name
            ‚Üí ‚àÄùïé-get0-NUM w1' name
            ‚Üí compatible¬∑ name w1 Res‚ä§
            ‚Üí compatible¬∑ name w1' Res‚ä§
            ‚Üí isValue v
            ‚Üí ((k' : ‚Ñï) ‚Üí k' < k ‚Üí ‚áìPresDiffNF f name k')
            ‚Üí differ name name f a a
            ‚Üí steps k (LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w2)
            ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY (upd name f) a ‚áì v from w1' to w2' √ó ¬¨Names v)
  updNF‚áìnames gc0 k f name w1 w1' w2 a v cf nnf gtn gtn' compat1 compat2 isv pd diff comp = concl comp8 (<‚äé‚â§ n' m)
    where
      seqv : Term
      seqv = SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))

      h1 : Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí Œ£ ùïé¬∑ (Œª w ‚Üí Œ£ Term (Œª u ‚Üí
              Œ£ (steps k1 (a , w1) ‚â° (u , w)) (Œª comp1 ‚Üí
              isValue u
              √ó steps k2 (sub u seqv , w) ‚â° (v , w2)
              √ó Œ£ (steps (suc k1) (LET a seqv , w1) ‚â° (sub u seqv , w)) (Œª comp2 ‚Üí
              steps‚Üíùïés {k1} {w1} {w} {a} {u} comp1 ++ [ w ] ‚â° steps‚Üíùïés {suc k1} {w1} {w} {LET a seqv} {sub u seqv} comp2
              √ó k1 + k2 < k))))))
      h1 = LET‚ÜíhasValue-decomp k a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) v w1 w2 comp isv

      k1 : ‚Ñï
      k1 = fst h1

      k2 : ‚Ñï
      k2 = fst (snd h1)

      w3 : ùïé¬∑
      w3 = fst (snd (snd h1))

      u : Term
      u = fst (snd (snd (snd h1)))

      comp1 : steps k1 (a , w1) ‚â° (u , w3)
      comp1 = fst (snd (snd (snd (snd h1))))

      isvu : isValue u
      isvu = fst (snd (snd (snd (snd (snd h1)))))

      comp2 : steps k2 (sub u (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w3) ‚â° (v , w2)
      comp2 = fst (snd (snd (snd (snd (snd (snd h1))))))

      ltk12 : k1 + k2 < k
      ltk12 = snd (snd (snd (snd (snd (snd (snd (snd (snd h1))))))))

      comp3 : steps k2 (LET (updGt name u) (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u)))) , w3) ‚â° (v , w2)
      comp3 rewrite sym (sub-SEQ-updGt u name f cf) = comp2

      e13 : w1 ‚äë¬∑ w3
      e13 = steps‚Üí‚äë k1 a u comp1

      h2 : Œ£ ‚Ñï (Œª k3 ‚Üí Œ£ ‚Ñï (Œª k4 ‚Üí Œ£ ùïé¬∑ (Œª w4 ‚Üí Œ£ Term (Œª u' ‚Üí
             Œ£ (steps k3 (updGt name u , w3) ‚â° (u' , w4)) (Œª comp1 ‚Üí
             isValue u'
             √ó steps k4 (sub u' (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u)))) , w4) ‚â° (v , w2)
             √ó Œ£ (steps (suc k3) (LET (updGt name u) (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u)))) , w3) ‚â° (sub u' (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u)))) , w4)) (Œª comp2 ‚Üí
             steps‚Üíùïés {k3} {w3} {w4} {updGt name u} {u'} comp1 ++ [ w4 ] ‚â° steps‚Üíùïés {suc k3} {w3} {w4} {LET (updGt name u) (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u))))} {sub u' (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u))))} comp2
             √ó k3 + k4 < k2))))))
      h2 = LET‚ÜíhasValue-decomp k2 (updGt name u) (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u)))) v w3 w2 comp3 isv

      k3 : ‚Ñï
      k3 = fst h2

      k4 : ‚Ñï
      k4 = fst (snd h2)

      w4 : ùïé¬∑
      w4 = fst (snd (snd h2))

      u' : Term
      u' = fst (snd (snd (snd h2)))

      comp4 : steps k3 (updGt name u , w3) ‚â° (u' , w4)
      comp4 = fst (snd (snd (snd (snd h2))))

      isvu' : isValue u'
      isvu' = fst (snd (snd (snd (snd (snd h2)))))

      comp5 : steps k4 (sub u' (APPLY f (shiftDown 1 (shiftUp 0 (shiftUp 0 u)))) , w4) ‚â° (v , w2)
      comp5 = fst (snd (snd (snd (snd (snd (snd h2))))))

      ltk34 : k3 + k4 < k2
      ltk34 = snd (snd (snd (snd (snd (snd (snd (snd (snd h2))))))))

      h3 : Œ£ ‚Ñï (Œª k5 ‚Üí Œ£ ‚Ñï (Œª k6 ‚Üí Œ£ ‚Ñï (Œª k7 ‚Üí Œ£ ùïé¬∑ (Œª w5 ‚Üí Œ£ ùïé¬∑ (Œª w6 ‚Üí Œ£ ‚Ñï (Œª n ‚Üí Œ£ ‚Ñï (Œª m ‚Üí
             steps k5 (get0 name , w3) ‚â° (NUM n , w5)
             √ó steps k6 (u , w5) ‚â° (NUM m , w6)
             √ó ((n < m √ó steps k7 (setT name u , w6) ‚â° (u' , w4)) ‚äé (m ‚â§ n √ó steps k7 (AX , w6) ‚â° (u' , w4)))
             √ó k5 + k6 + k7 < k3)))))))
      h3 = IFLT‚ÜíhasValue-decomp k3 (get0 name) u (setT name u) AX u' w3 w4 comp4 isvu'

      k5 : ‚Ñï
      k5 = fst h3

      k6 : ‚Ñï
      k6 = fst (snd h3)

      k7 : ‚Ñï
      k7 = fst (snd (snd h3))

      w5 : ùïé¬∑
      w5 = fst (snd (snd (snd h3)))

      w6 : ùïé¬∑
      w6 = fst (snd (snd (snd (snd h3))))

      n : ‚Ñï
      n = fst (snd (snd (snd (snd (snd h3)))))

      m : ‚Ñï
      m = fst (snd (snd (snd (snd (snd (snd h3))))))

      comp6 : steps k5 (get0 name , w3) ‚â° (NUM n , w5)
      comp6 = fst (snd (snd (snd (snd (snd (snd (snd h3)))))))

      comp7 : steps k6 (u , w5) ‚â° (NUM m , w6)
      comp7 = fst (snd (snd (snd (snd (snd (snd (snd (snd h3))))))))

      comp8 : ((n < m √ó steps k7 (setT name u , w6) ‚â° (u' , w4)) ‚äé (m ‚â§ n √ó steps k7 (AX , w6) ‚â° (u' , w4)))
      comp8 = fst (snd (snd (snd (snd (snd (snd (snd (snd (snd h3)))))))))

      ltk567 : k5 + k6 + k7 < k3
      ltk567 = snd (snd (snd (snd (snd (snd (snd (snd (snd (snd h3)))))))))

      eqm : u ‚â° NUM m
      eqm = stepsVal‚Üí‚Çó u (NUM m) w5 w6 k6 isvu comp7

      eqw56 : w5 ‚â° w6
      eqw56 = stepsVal‚Üí·µ£ u (NUM m) w5 w6 k6 isvu comp7

      comp1b : steps k1 (a , w1) ‚â° (NUM m , w3)
      comp1b rewrite sym eqm = comp1

      h4 : Œ£ ùïé¬∑ (Œª w3' ‚Üí a ‚áì NUM m from w1' to w3' √ó differ name name f (NUM m) (NUM m))
      h4 = pd k1 (‚â§-<-trans (m‚â§n‚áím‚â§n+o k2 ‚â§-refl) ltk12) w1 w3 w1' a (NUM m) tt compat1 compat2 gtn gtn' diff comp1b

      h4‚Üí : Œ£ ùïé¬∑ (Œª w3' ‚Üí a ‚áì NUM m from w1' to w3' √ó differ name name f (NUM m) (NUM m))
            ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí a ‚áì NUM m from w1' to w3')
      h4‚Üí (w3' , c , d) = w3' , c

      w3' : ùïé¬∑
      w3' = fst (h4‚Üí h4)

      comp1' : a ‚áì NUM m from w1' to w3'
      comp1' = snd (h4‚Üí h4)

      e13' : w1' ‚äë¬∑ w3'
      e13' = steps‚Üí‚äë (fst comp1') a (NUM m) (snd comp1')

      h5 : Œ£ Term (Œª u ‚Üí Œ£ ‚Ñï (Œª k5' ‚Üí k5' < k5 √ó getT 0 name w3 ‚â° just u √ó steps k5' (u , w3) ‚â° (NUM n , w5)))
      h5 = steps-get0 k5 name w3 w5 (NUM n) tt comp6

      c1 : Term
      c1 = fst h5

      k5' : ‚Ñï
      k5' = fst (snd h5)

      ltk5' : k5' < k5
      ltk5' = fst (snd (snd h5))

      g2 : getT 0 name w3 ‚â° just c1
      g2 = fst (snd (snd (snd h5)))

      comp6b : steps k5' (c1 , w3) ‚â° (NUM n , w5)
      comp6b = snd (snd (snd (snd h5)))

      comp5b : steps k4 (APPLY f (NUM m) , w4) ‚â° (v , w2)
      comp5b = trans (‚â°Term‚Üí‚â°steps k4 w4 (APPLY-NUM-shift‚â° f cf m u u' eqm)) comp5

      compa' : APPLY (upd name f) a ‚áì LET a (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) from w1' to w1'
      compa' = ‚áì‚â°·µ£ (sub a (updBody name f)) (sym (sub-upd name f a cf)) (APPLY-LAMBDA‚áì w1' (updBody name f) a)

      compb' : APPLY (upd name f) a ‚áì LET (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) from w1' to w3'
      compb' = ‚áì-trans‚ÇÇ compa' (LET‚áì (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) comp1')

      compc' : APPLY (upd name f) a ‚áì SEQ (updGt name (NUM m)) (APPLY f (NUM m)) from w1' to w3'
      compc' = ‚áì-trans‚ÇÇ compb' (‚áì‚â°·µ£ (sub (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))))
                                    (sym (sub-NUM-SEQ-updGt m name f cf))
                                    (LET-val‚áì w3' (NUM m) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) tt))

      gtn0 : Œ£ ‚Ñï (Œª j ‚Üí getT 0 name w3 ‚â° just (NUM j))
      gtn0 = lower (gtn w3 e13)

      eqc1 : c1 ‚â° NUM n
      eqc1 = fst (Œ£‚â°just-NUM√ósteps‚Üí‚â°NUM k5' (getT 0 name w3) c1 n w3 w5 gtn0 g2 comp6b)

      eqw35 : w3 ‚â° w5
      eqw35 = snd (Œ£‚â°just-NUM√ósteps‚Üí‚â°NUM k5' (getT 0 name w3) c1 n w3 w5 gtn0 g2 comp6b)

      eqchT : chooseT name w6 u ‚â° chooseT name w3 (NUM m)
      eqchT rewrite sym eqm | sym eqw56 | sym eqw35 = refl

      g3a : Œ£ ‚Ñï (Œª n' ‚Üí getT 0 name w3' ‚â° just (NUM n'))
      g3a = lower (gtn' w3' e13')

      n' : ‚Ñï
      n' = fst g3a

      g3 : getT 0 name w3' ‚â° just (NUM n')
      g3 = snd g3a

      compd' : APPLY (upd name f) a ‚áì SEQ (IFLT (NUM n') (NUM m) (setT name (NUM m)) AX) (APPLY f (NUM m)) from w1' to w3'
      compd' = ‚áì-trans‚ÇÇ compc' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (IFLT-NUM-1st‚áì (NUM m) (setT name (NUM m)) AX (APPLY-CS-NUM‚áì (NUM n') w3' 0 name g3)))

      concl : ((n < m √ó steps k7 (setT name u , w6) ‚â° (u' , w4)) ‚äé (m ‚â§ n √ó steps k7 (AX , w6) ‚â° (u' , w4)))
              ‚Üí (n' < m ‚äé m ‚â§ n')
              ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY (upd name f) a ‚áì v from w1' to w2' √ó ¬¨Names v)
      concl (inj‚ÇÅ (ltnm , comp8b)) (inj‚ÇÅ ltnm') = chooseT name w3' (NUM m) , comph' , nnv
        where
          compe' : APPLY (upd name f) a ‚áì SEQ (setT name (NUM m)) (APPLY f (NUM m)) from w1' to w3'
          compe' = ‚áì-trans‚ÇÇ compd' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (IFLT-NUM<‚áì ltnm' (setT name (NUM m)) AX w3'))

          comp8c : u' ‚â° AX √ó w4 ‚â° chooseT name w6 u
          comp8c = setT‚áì‚Üí k7 name u u' w6 w4 isvu' comp8b

          compf' : APPLY (upd name f) a ‚áì SEQ AX (APPLY f (NUM m)) from w1' to chooseT name w3' (NUM m)
          compf' = ‚áì-trans‚ÇÇ compe' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (setT‚áì name (NUM m) w3'))

          comp5c : steps k4 (APPLY f (NUM m) , chooseT name w3 (NUM m)) ‚â° (v , w2)
          comp5c = trans (‚â°ùïé‚Üí‚â°steps k4 (APPLY f (NUM m)) (trans (sym eqchT) (sym (snd comp8c)))) comp5b

          compg' : APPLY (upd name f) a ‚áì APPLY f (NUM m) from w1' to chooseT name w3' (NUM m)
          compg' = ‚áì-trans‚ÇÇ compf' (SEQ-val‚áì (chooseT name w3' (NUM m)) AX (APPLY f (NUM m)) tt)

          h6 : steps k4 (APPLY f (NUM m) , chooseT name w3' (NUM m)) ‚â° (v , chooseT name w3' (NUM m))
               √ó chooseT name w3 (NUM m) ‚â° w2
               √ó ¬¨Names v
               √ó (¬¨Enc (APPLY f (NUM m)) ‚Üí ¬¨Enc v √ó fvars v ‚äÜ fvars (APPLY f (NUM m)))
          h6 = ¬¨Names‚Üísteps k4 (chooseT name w3 (NUM m)) w2 (chooseT name w3' (NUM m)) (APPLY f (NUM m)) v (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl) comp5c

          comph' : APPLY (upd name f) a ‚áì v from w1' to chooseT name w3' (NUM m)
          comph' = ‚áì-trans‚ÇÇ compg' (k4 , fst h6)

          nnv : ¬¨Names v
          nnv = steps‚Üí¬¨Names k4 (chooseT name w3 (NUM m)) w2 (APPLY f (NUM m)) v comp5c (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl)

      concl (inj‚ÇÅ (ltnm , comp8b)) (inj‚ÇÇ ltnm') = w3' , compg' , nnv
        where
          compe' : APPLY (upd name f) a ‚áì SEQ AX (APPLY f (NUM m)) from w1' to w3'
          compe' = ‚áì-trans‚ÇÇ compd' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (IFLT-NUM¬¨<‚áì (‚â§‚áí‚âØ ltnm') (setT name (NUM m)) AX w3'))

          compf' : APPLY (upd name f) a ‚áì APPLY f (NUM m) from w1' to w3'
          compf' = ‚áì-trans‚ÇÇ compe' (SEQ-val‚áì w3' AX (APPLY f (NUM m)) tt)

          comp8c : u' ‚â° AX √ó w4 ‚â° chooseT name w6 u
          comp8c = setT‚áì‚Üí k7 name u u' w6 w4 isvu' comp8b

          comp5c : steps k4 (APPLY f (NUM m) , chooseT name w3 (NUM m)) ‚â° (v , w2)
          comp5c = trans (‚â°ùïé‚Üí‚â°steps k4 (APPLY f (NUM m)) (trans (sym eqchT) (sym (snd comp8c)))) comp5b

          h6 : steps k4 (APPLY f (NUM m) , w3') ‚â° (v , w3')
               √ó (chooseT name w3 (NUM m)) ‚â° w2
               √ó ¬¨Names v
               √ó (¬¨Enc (APPLY f (NUM m)) ‚Üí ¬¨Enc v √ó fvars v ‚äÜ fvars (APPLY f (NUM m)))
          h6 = ¬¨Names‚Üísteps k4 (chooseT name w3 (NUM m)) w2 w3' (APPLY f (NUM m)) v (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl) comp5c

          compg' : APPLY (upd name f) a ‚áì v from w1' to w3'
          compg' = ‚áì-trans‚ÇÇ compf' (k4 , fst h6)

          nnv : ¬¨Names v
          nnv = steps‚Üí¬¨Names k4 (chooseT name w3 (NUM m)) w2 (APPLY f (NUM m)) v comp5c (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl)

      concl (inj‚ÇÇ (ltnm , comp8b)) (inj‚ÇÅ ltnm') = chooseT name w3' (NUM m) , comph' , nnv
        where
          compe' : APPLY (upd name f) a ‚áì SEQ (setT name (NUM m)) (APPLY f (NUM m)) from w1' to w3'
          compe' = ‚áì-trans‚ÇÇ compd' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (IFLT-NUM<‚áì ltnm' (setT name (NUM m)) AX w3'))

          compf' : APPLY (upd name f) a ‚áì SEQ AX (APPLY f (NUM m)) from w1' to chooseT name w3' (NUM m)
          compf' = ‚áì-trans‚ÇÇ compe' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (setT‚áì name (NUM m) w3'))

          compg' : APPLY (upd name f) a ‚áì APPLY f (NUM m) from w1' to chooseT name w3' (NUM m)
          compg' = ‚áì-trans‚ÇÇ compf' (SEQ-val‚áì (chooseT name w3' (NUM m)) AX (APPLY f (NUM m)) tt)

          eqw64 : w6 ‚â° w4
          eqw64 = stepsVal‚Üí·µ£ AX u' w6 w4 k7 tt comp8b

          comp5c : steps k4 (APPLY f (NUM m) , w3) ‚â° (v , w2)
          comp5c = trans (‚â°ùïé‚Üí‚â°steps k4 (APPLY f (NUM m)) (trans (trans eqw35 eqw56) eqw64)) comp5b

          h6 : steps k4 (APPLY f (NUM m) , chooseT name w3' (NUM m)) ‚â° (v , chooseT name w3' (NUM m))
               √ó w3 ‚â° w2
               √ó ¬¨Names v
               √ó (¬¨Enc (APPLY f (NUM m)) ‚Üí ¬¨Enc v √ó fvars v ‚äÜ fvars (APPLY f (NUM m)))
          h6 = ¬¨Names‚Üísteps k4 w3 w2 (chooseT name w3' (NUM m)) (APPLY f (NUM m)) v (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl) comp5c

          comph' : APPLY (upd name f) a ‚áì v from w1' to chooseT name w3' (NUM m)
          comph' = ‚áì-trans‚ÇÇ compg' (k4 , fst h6)

          nnv : ¬¨Names v
          nnv = steps‚Üí¬¨Names k4 w3 w2 (APPLY f (NUM m)) v comp5c (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl)

      concl (inj‚ÇÇ (ltnm , comp8b)) (inj‚ÇÇ ltnm') = w3' , compg' , nnv
        where
          compe' : APPLY (upd name f) a ‚áì SEQ AX (APPLY f (NUM m)) from w1' to w3'
          compe' = ‚áì-trans‚ÇÇ compd' (LET‚áì (shiftUp 0 (APPLY f (NUM m))) (IFLT-NUM¬¨<‚áì (‚â§‚áí‚âØ ltnm') (setT name (NUM m)) AX w3'))

          compf' : APPLY (upd name f) a ‚áì APPLY f (NUM m) from w1' to w3'
          compf' = ‚áì-trans‚ÇÇ compe' (SEQ-val‚áì w3' AX (APPLY f (NUM m)) tt)

          eqw64 : w6 ‚â° w4
          eqw64 = stepsVal‚Üí·µ£ AX u' w6 w4 k7 tt comp8b

          comp5c : steps k4 (APPLY f (NUM m) , w3) ‚â° (v , w2)
          comp5c = trans (‚â°ùïé‚Üí‚â°steps k4 (APPLY f (NUM m)) (trans (trans eqw35 eqw56) eqw64)) comp5b

          h6 : steps k4 (APPLY f (NUM m) , w3') ‚â° (v , w3')
               √ó w3 ‚â° w2
               √ó ¬¨Names v
               √ó (¬¨Enc (APPLY f (NUM m)) ‚Üí ¬¨Enc v √ó fvars v ‚äÜ fvars (APPLY f (NUM m)))
          h6 = ¬¨Names‚Üísteps k4 w3 w2 w3' (APPLY f (NUM m)) v (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl) comp5c

          compg' : APPLY (upd name f) a ‚áì v from w1' to w3'
          compg' = ‚áì-trans‚ÇÇ compf' (k4 , fst h6)

          nnv : ¬¨Names v
          nnv = steps‚Üí¬¨Names k4 w3 w2 (APPLY f (NUM m)) v comp5c (‚Üí‚àß‚â°true {¬¨names f} {¬¨names (NUM m)} nnf refl)



abstract

  differNF‚áì-aux2 : (gc0 : get-choose-‚Ñï)
                   (f : Term) (cf : # f) (nn : ¬¨Names f) (name : Name) (w1 w2 w1' w0 : ùïé¬∑) (a b v : Term) (k : ‚Ñï)
                   ‚Üí compatible¬∑ name w1 Res‚ä§
                   ‚Üí compatible¬∑ name w1' Res‚ä§
                   ‚Üí ‚àÄùïé-get0-NUM w1 name
                   ‚Üí ‚àÄùïé-get0-NUM w1' name
                   ‚Üí differ name name f a a
                   ‚Üí step a w1 ‚â° just (b , w2)
                   ‚Üí steps k (b , w2) ‚â° (v , w0)
                   ‚Üí isValue v
                   ‚Üí ((k' : ‚Ñï) ‚Üí k' < k ‚Üí ‚áìPresDiffNF f name k')
                   ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       b ‚áì a'' from w2 to w3
                       √ó a ‚áì a'' from w1' to w3'
                       √ó differ name name f a'' a'')))
--  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .NAT b v k compat1 compat2 agtn atgn' differ-NAT s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-NAT
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .QNAT b v k compat1 compat2 agtn atgn' differ-QNAT s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QNAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-QNAT
--  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .TNAT b v k compat1 compat2 agtn atgn' differ-TNAT s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TNAT , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-TNAT
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(LT a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-LT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LT _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-LT _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(QLT a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-QLT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QLT _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-QLT _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(NUM x) b v k compat1 compat2 agtn atgn' (differ-NUM x) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NUM _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-NUM _
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-IFLT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n , p) rewrite p with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (m , q) rewrite q with n <? m
  ... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = c‚ÇÅ , w1 , w1' , ‚áìfrom-to-refl _ _ , IFLT-NUM<‚áì r c‚ÇÅ d‚ÇÅ w1' , diff‚ÇÇ
  ... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = d‚ÇÅ , w1 , w1' , ‚áìfrom-to-refl _ _ , IFLT-NUM¬¨<‚áì r c‚ÇÅ d‚ÇÅ w1' , diff‚ÇÉ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-IFLT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd | inj‚ÇÅ (n , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1'' , z ) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    IFLT (NUM n) (fst ind) c‚ÇÅ d‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    IFLT-NUM-2nd‚áì n c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd ind)))) , --IFLT-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd ind)))) ,
    IFLT-NUM-2nd‚áì n c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) , --IFLT-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-IFLT _ _ _ _ _ _ _ _ (differ-NUM n) (snd (snd (snd (snd (snd ind))))) diff‚ÇÇ diff‚ÇÉ --ret (IFLT a b' c d) w'
    where
      hv0 : hasValue‚Ñï k b‚ÇÅ' w1''
      hv0 = IFLT-NUM‚ÜíhasValue k n b‚ÇÅ' c‚ÇÅ d‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª b'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              b‚ÇÅ' ‚áì b'' from w1'' to w3 √ó b‚ÇÅ ‚áì b'' from w1' to w3' √ó differ name name f b'' b'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) b‚ÇÅ b‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff‚ÇÅ z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-IFLT-NUM‚Üí n b‚ÇÅ' c‚ÇÉ d‚ÇÅ w1'' {k} hv) pd
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(IFLT a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-IFLT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    IFLT (fst ind) b‚ÇÅ c‚ÇÅ d‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    IFLT-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd ind)))) ,
    IFLT-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-IFLT _ _ _ _ _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = IFLT‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ c‚ÇÅ d‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-IFLT‚Üí a‚ÇÅ' b‚ÇÅ c‚ÇÉ d‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-IFEQ a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n , p) rewrite p with is-NUM b‚ÇÅ
  ... |    inj‚ÇÅ (m , q) rewrite q with n ‚âü m
  ... |       yes r rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = c‚ÇÅ , w1 , w1' , ‚áìfrom-to-refl _ _ , IFEQ-NUM=‚áì r c‚ÇÅ d‚ÇÅ w1' , diff‚ÇÇ
  ... |       no r rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = d‚ÇÅ , w1 , w1' , ‚áìfrom-to-refl _ _ , IFEQ-NUM¬¨=‚áì r c‚ÇÅ d‚ÇÅ w1' , diff‚ÇÉ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-IFEQ a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd | inj‚ÇÅ (n , p) | inj‚ÇÇ q with step‚äé b‚ÇÅ w1
  ... |       inj‚ÇÅ (b‚ÇÅ' , w1'' , z ) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    IFEQ (NUM n) (fst ind) c‚ÇÅ d‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    IFEQ-NUM-2nd‚áì n c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd ind)))) , --IFEQ-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd ind)))) ,
    IFEQ-NUM-2nd‚áì n c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) , --IFEQ-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-IFEQ _ _ _ _ _ _ _ _ (differ-NUM n) (snd (snd (snd (snd (snd ind))))) diff‚ÇÇ diff‚ÇÉ --ret (IFEQ a b' c d) w'
    where
      hv0 : hasValue‚Ñï k b‚ÇÅ' w1''
      hv0 = IFEQ-NUM‚ÜíhasValue k n b‚ÇÅ' c‚ÇÅ d‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª b'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              b‚ÇÅ' ‚áì b'' from w1'' to w3 √ó b‚ÇÅ ‚áì b'' from w1' to w3' √ó differ name name f b'' b'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) b‚ÇÅ b‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff‚ÇÅ z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-IFEQ-NUM‚Üí n b‚ÇÅ' c‚ÇÉ d‚ÇÅ w1'' {k} hv) pd
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(IFEQ a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-IFEQ a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    IFEQ (fst ind) b‚ÇÅ c‚ÇÅ d‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    IFEQ-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd ind)))) ,
    IFEQ-NUM-1st‚áì b‚ÇÅ c‚ÇÅ d‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-IFEQ _ _ _ _ _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = IFEQ‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ c‚ÇÅ d‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-IFEQ‚Üí a‚ÇÅ' b‚ÇÅ c‚ÇÉ d‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SUC a‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-SUC a‚ÇÅ .a‚ÇÅ diff) s hv isvv pd with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NUM (suc n) , w1 , w1' , (0 , refl) , (1 , refl) , differ-NUM (suc n)
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    SUC (fst ind) ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    SUC‚áì (fst (snd (snd (snd ind)))) ,
    SUC‚áì (fst (snd (snd (snd (snd ind))))) ,
    differ-SUC _ _ (snd (snd (snd (snd (snd ind)))))
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = SUC‚ÜíhasValue k a‚ÇÅ' v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(NATREC a‚ÇÅ a‚ÇÇ a‚ÇÉ) b v k compat1 compat2 agtn atgn' (differ-NATREC a‚ÇÅ .a‚ÇÅ a‚ÇÇ .a‚ÇÇ a‚ÇÉ .a‚ÇÉ diff diff‚ÇÅ diff‚ÇÇ) s hv isvv pd with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n , p)
    rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s))
    = NATRECr n a‚ÇÇ a‚ÇÉ , w1 , w1' , (0 , refl) , (1 , refl) , differ-NATRECr {name} {name} {f} {n} {a‚ÇÇ} {a‚ÇÇ} {a‚ÇÉ} {a‚ÇÉ} cf diff‚ÇÅ diff‚ÇÇ
  ... | inj‚ÇÇ p with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    NATREC (fst ind) a‚ÇÇ a‚ÇÉ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    NATREC‚áì a‚ÇÇ a‚ÇÉ (fst (snd (snd (snd ind)))) ,
    NATREC‚áì a‚ÇÇ a‚ÇÉ (fst (snd (snd (snd (snd ind))))) ,
    differ-NATREC _ _ _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ diff‚ÇÇ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = NATREC‚ÜíhasValue k a‚ÇÅ' a‚ÇÇ a‚ÇÉ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(PI a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-PI a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PI _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-PI _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(LAMBDA a) b v k compat1 compat2 agtn atgn' (differ-LAMBDA a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LAMBDA _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-LAMBDA _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(APPLY a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-APPLY a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = concl d
    where
      d : differ name name f t t ‚äé t ‚â° updBody name f
      d = differNF-LAMBDA‚Çó‚Üí diff

      concl : (differ name name f t t ‚äé t ‚â° updBody name f)
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       sub b‚ÇÅ t ‚áì a'' from w1 to w3 √ó APPLY (LAMBDA t) b‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      concl (inj‚ÇÅ d) =
        sub b‚ÇÅ t ,
        w1 , w1' ,
        ‚áìfrom-to-refl _ _ , APPLY-LAMBDA‚áì w1' t b‚ÇÅ ,
        differ-sub cf d diff‚ÇÅ
      concl (inj‚ÇÇ e) rewrite e | sub-upd name f b‚ÇÅ cf =
        v , w0 , fst hv2 , (k , hv1) , fst (snd hv2) , differ-refl name name f v (snd (snd hv2))
        where
          hv0 : steps k (sub b‚ÇÅ (updBody name f) , w1) ‚â° (v , w0)
          hv0 rewrite e = hv

          hv1 : steps k (LET b‚ÇÅ (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w0)
          hv1 rewrite sym (sub-upd name f b‚ÇÅ cf) = hv0

          hv2 : Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY (upd name f) b‚ÇÅ ‚áì v from w1' to w2' √ó ¬¨Names v)
          hv2 = updNF‚áìnames gc0 k f name w1 w1' w0 b‚ÇÅ v cf nnf agtn atgn' compat1 compat2 isvv pd diff‚ÇÅ hv1
  ... | inj‚ÇÇ x with is-CS a‚ÇÅ
  ... |    inj‚ÇÅ (name , p) rewrite p = ‚ä•-elim (differ-CS‚Çó‚Üí diff)
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(APPLY a‚ÇÅ b‚ÇÅ) a' v k compat1 compat2 agtn atgn' (differ-APPLY a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd | inj‚ÇÇ x | inj‚ÇÇ y with is-MSEQ a‚ÇÅ
  ... | inj‚ÇÅ (sq , r) rewrite r | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    MAPP sq b‚ÇÅ , w1 , w1' , (0 , refl) , (1 , refl) , differ-MAPP sq b‚ÇÅ b‚ÇÅ diff‚ÇÅ
  ... | inj‚ÇÇ r with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    APPLY (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    APPLY‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    APPLY‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-APPLY _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = APPLY‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-APPLY‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... | inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(FIX a‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-FIX a‚ÇÅ .a‚ÇÅ diff) s hv isvv pd with is-LAM a‚ÇÅ
  ... | inj‚ÇÅ (t , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f t t ‚äé t ‚â° updBody name f
      d = differNF-LAMBDA‚Çó‚Üí diff

      concl : (differ name name f t t ‚äé t ‚â° updBody name f)
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       sub (FIX (LAMBDA t)) t ‚áì a'' from w1 to w3 √ó FIX (LAMBDA t) ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      concl (inj‚ÇÅ d) =
        sub (FIX (LAMBDA t)) t ,
        w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        FIX-LAMBDA‚áì w1' t ,
        differ-sub cf d (differ-FIX _ _ (differ-LAMBDA _ _ d))
      concl (inj‚ÇÇ e) rewrite e | sub-upd name f (FIX (upd name f)) cf =
        v , w0 , fst hv2 , (k , hv1) , (‚áì-trans‚ÇÇ (FIX-LAMBDA‚áì w1' (updBody name f)) cs) ,
        differ-refl name name f v (snd (snd hv2))
        where
          hv0 : steps k (sub (FIX (upd name f)) (updBody name f) , w1) ‚â° (v , w0)
          hv0 rewrite e = hv

          hv1 : steps k (LET (FIX (upd name f)) (SEQ (updGt name (VAR 0)) (APPLY f (VAR 0))) , w1) ‚â° (v , w0)
          hv1 rewrite sym (sub-upd name f (FIX (upd name f)) cf) = hv0

          df : differ name name f (FIX (upd name f)) (FIX (upd name f))
          df = differ-FIX _ _ differ-upd

          hv2 : Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY (upd name f) (FIX (upd name f)) ‚áì v from w1' to w2' √ó ¬¨Names v)
          hv2 = updNF‚áìnames gc0 k f name w1 w1' w0 (FIX (upd name f)) v cf nnf agtn atgn' compat1 compat2 isvv pd df hv1

          cs : sub (FIX (upd name f)) (updBody name f) ‚áì v from w1' to (fst hv2)
          cs = APPLY-LAMBDA‚áì‚Üí (fst (fst (snd hv2))) isvv (snd (fst (snd hv2)))
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    FIX (fst ind) ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    FIX‚áì (fst (snd (snd (snd ind)))) ,
    FIX‚áì (fst (snd (snd (snd (snd ind))))) ,
    differ-FIX _ _ (snd (snd (snd (snd (snd ind)))))
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = FIX‚ÜíhasValue k a‚ÇÅ' v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-FIX‚Üí a‚ÇÅ' w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(LET a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-LET a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with isValue‚äé a‚ÇÅ
  ... | inj‚ÇÅ x rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    sub a‚ÇÅ b‚ÇÅ , w1 , w1' ,
    ‚áìfrom-to-refl _ _ , LET-val‚áì w1' a‚ÇÅ b‚ÇÅ isv , differ-sub cf diff‚ÇÅ diff
    where
      isv : isValue a‚ÇÅ
      isv = differ-isValue‚Üí diff x
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    LET (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    LET‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    LET‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-LET _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = LET‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-LET‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(WT a‚ÇÅ b‚ÇÅ c‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-WT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = WT _ _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-WT _ _ _ _ _ _ diff diff‚ÇÅ diff‚ÇÇ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SUP a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-SUP a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUP _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-SUP _ _ _ _ diff diff‚ÇÅ
  {--differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(DSUP a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-DSUP a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
      d = differNF-SUP‚Çó‚Üí diff

      concl : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) ‚áì a'' from w1 to w3 √ó DSUP (SUP u‚ÇÅ u‚ÇÇ) b‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      concl (d1 , d2) =
        sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        DSUP-SUP‚áì w1' u‚ÇÅ u‚ÇÇ b‚ÇÅ ,
        differ-sub cf (differ-sub cf diff‚ÇÅ d1) d2
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    DSUP (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    DSUP‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    DSUP‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-DSUP _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = DSUP‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-SPREAD‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))--}
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(WREC a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-WREC a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with is-SUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
      d = differNF-SUP‚Çó‚Üí diff

      concl : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                  sub (WRECr b‚ÇÅ u‚ÇÇ) (sub (shiftUp 0 u‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 u‚ÇÅ)) b‚ÇÅ)) ‚áì a'' from w1 to w3
                √ó WREC (SUP u‚ÇÅ u‚ÇÇ) b‚ÇÅ ‚áì a'' from w1' to w3'
                √ó differ name name f a'' a'')))
      concl (d1 , d2) =
        sub (WRECr b‚ÇÅ u‚ÇÇ) (sub (shiftUp 0 u‚ÇÇ) (sub (shiftUp 0 (shiftUp 0 u‚ÇÅ)) b‚ÇÅ)) ,
        w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        WREC-SUP‚áì w1' u‚ÇÅ u‚ÇÇ b‚ÇÅ ,
        differ-sub cf
          (differ-sub cf (differ-sub cf diff‚ÇÅ (‚Üídiffer-shiftUp 0 cf (‚Üídiffer-shiftUp 0 cf d1)))
            (‚Üídiffer-shiftUp 0 cf d2))
          (differ-WRECr cf diff‚ÇÅ d2) --differ-sub cf (differ-sub cf (differ-sub cf diff‚ÇÅ d1) d2) (differ-WRECr cf diff‚ÇÅ d2)
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    WREC (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    WREC‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    WREC‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-WREC _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = WREC‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-SPREAD‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(MT a‚ÇÅ b‚ÇÅ c‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-MT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = MT _ _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-MT _ _ _ _ _ _ diff diff‚ÇÅ diff‚ÇÇ
  --differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(MSUP a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-MSUP a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = MSUP _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-MSUP _ _ _ _ diff diff‚ÇÅ
  {--differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(DMSUP a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-DMSUP a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with is-MSUP a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
      d = differNF-MSUP‚Çó‚Üí diff

      concl : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) ‚áì a'' from w1 to w3 √ó DMSUP (MSUP u‚ÇÅ u‚ÇÇ) b‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      concl (d1 , d2) =
        sub u‚ÇÇ (sub u‚ÇÅ b‚ÇÅ) , w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        DMSUP-MSUP‚áì w1' u‚ÇÅ u‚ÇÇ b‚ÇÅ ,
        differ-sub cf (differ-sub cf diff‚ÇÅ d1) d2
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    DMSUP (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    DMSUP‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    DMSUP‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-DMSUP _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = DMSUP‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-SPREAD‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))--}
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SUM a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-SUM a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUM _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-SUM _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(PAIR a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-PAIR a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PAIR _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-PAIR _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SPREAD a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-SPREAD a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with is-PAIR a‚ÇÅ
  ... | inj‚ÇÅ (u‚ÇÅ , u‚ÇÇ , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
      d = differNF-PAIR‚Çó‚Üí diff

      concl : differ name name f u‚ÇÅ u‚ÇÅ √ó differ name name f u‚ÇÇ u‚ÇÇ
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                  sub u‚ÇÇ (sub (shiftUp 0 u‚ÇÅ) b‚ÇÅ) ‚áì a'' from w1 to w3
                √ó SPREAD (PAIR u‚ÇÅ u‚ÇÇ) b‚ÇÅ ‚áì a'' from w1' to w3'
                √ó differ name name f a'' a'')))
      concl (d1 , d2) =
        sub u‚ÇÇ (sub (shiftUp 0 u‚ÇÅ) b‚ÇÅ) , w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        SPREAD-PAIR‚áì w1' u‚ÇÅ u‚ÇÇ b‚ÇÅ ,
        differ-sub cf (differ-sub cf diff‚ÇÅ (‚Üídiffer-shiftUp 0 cf d1)) d2 --differ-sub cf (differ-sub cf diff‚ÇÅ d1) d2
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    SPREAD (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    SPREAD‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    SPREAD‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-SPREAD _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = SPREAD‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-SPREAD‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SET a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-SET a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SET _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-SET _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(ISECT a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-ISECT a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = ISECT _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-ISECT _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(TUNION a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-TUNION a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TUNION _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-TUNION _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(UNION a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-UNION a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = UNION _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-UNION _ _ _ _ diff diff‚ÇÅ
--  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(QTUNION a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-QTUNION a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = QTUNION _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-QTUNION _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(INL a) b v k compat1 compat2 agtn atgn' (differ-INL a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = INL _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-INL _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(INR a) b v k compat1 compat2 agtn atgn' (differ-INR a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = INR _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-INR _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(DECIDE a‚ÇÅ b‚ÇÅ c‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-DECIDE a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ) s hv isvv pd with is-INL a‚ÇÅ
  ... | inj‚ÇÅ (u , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f u u
      d = differNF-INL‚Çó‚Üí diff

      concl : differ name name f u u
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       sub u b‚ÇÅ ‚áì a'' from w1 to w3 √ó DECIDE (INL u) b‚ÇÅ c‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      concl d1 =
        sub u b‚ÇÅ , w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        DECIDE-INL‚áì w1' u _ _ ,
        differ-sub cf diff‚ÇÅ d1
  ... | inj‚ÇÇ x with is-INR a‚ÇÅ
  ... |    inj‚ÇÅ (u , p) rewrite p | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    concl d
    where
      d : differ name name f u u
      d = differNF-INR‚Çó‚Üí diff

      concl : differ name name f u u
              ‚Üí Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                       sub u c‚ÇÅ ‚áì a'' from w1 to w3 √ó DECIDE (INR u) b‚ÇÅ c‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      concl d1 =
        sub u c‚ÇÅ , w1 , w1' ,
        ‚áìfrom-to-refl _ _ ,
        DECIDE-INR‚áì w1' u _ _ ,
        differ-sub cf diff‚ÇÇ d1
  ... |    inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |       inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    DECIDE (fst ind) b‚ÇÅ c‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    DECIDE‚áì b‚ÇÅ c‚ÇÅ (fst (snd (snd (snd ind)))) ,
    DECIDE‚áì b‚ÇÅ c‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-DECIDE _ _ _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ diff‚ÇÇ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = DECIDE‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ c‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-DECIDE‚Üí a‚ÇÅ' b‚ÇÅ c‚ÇÉ w1'' {k} hv) pd
  ... |       inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(EQ a‚ÇÅ b‚ÇÅ c‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-EQ a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = EQ _ _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-EQ _ _ _ _ _ _ diff diff‚ÇÅ diff‚ÇÇ
--  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(EQB a‚ÇÅ b‚ÇÅ c‚ÇÅ d‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-EQB a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ c‚ÇÅ .c‚ÇÅ d‚ÇÅ .d‚ÇÅ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = EQB _ _ _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-EQB _ _ _ _ _ _ _ _ diff diff‚ÇÅ diff‚ÇÇ diff‚ÇÉ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .AX b v k compat1 compat2 agtn atgn' differ-AX s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = AX , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-AX
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .FREE b v k compat1 compat2 agtn atgn' differ-FREE s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = FREE , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-FREE
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(MSEQ x) b v k compat1 compat2 agtn atgn' (differ-MSEQ x) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = MSEQ x , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-MSEQ x
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(MAPP x a‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-MAPP x a‚ÇÅ .a‚ÇÅ diff) s hv isvv pd with is-NUM a‚ÇÅ
  ... | inj‚ÇÅ (n , p)
    rewrite p
            | sym (pair-inj‚ÇÅ (just-inj s))
            | sym (pair-inj‚ÇÇ (just-inj s))
            | stepsVal (NUM (x n)) w1 k tt
            | sym (pair-inj‚ÇÅ hv)
            | sym (pair-inj‚ÇÇ hv) = NUM (x n) , w1 , w1' , (0 , refl) , (1 , refl) , differ-NUM (x n)
  ... | inj‚ÇÇ y with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    MAPP x (fst ind) ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    MAPP‚áì x (fst (snd (snd (snd ind)))) ,
    MAPP‚áì x (fst (snd (snd (snd (snd ind))))) ,
    differ-MAPP _ _ _ (snd (snd (snd (snd (snd ind)))))
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = MAPP‚ÜíhasValue k x a‚ÇÅ' v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-APPLY‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(CHOOSE a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-CHOOSE a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd with is-NAME a‚ÇÅ
  ... | inj‚ÇÅ (name , p) rewrite p = ‚ä•-elim (differ-NAME‚Çó‚Üí diff)
  ... | inj‚ÇÇ x with step‚äé a‚ÇÅ w1
  ... |    inj‚ÇÅ (a‚ÇÅ' , w1'' , z) rewrite z | sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) =
    CHOOSE (fst ind) b‚ÇÅ ,
    fst (snd ind) ,
    fst (snd (snd ind)) ,
    CHOOSE‚áì b‚ÇÅ (fst (snd (snd (snd ind)))) ,
    CHOOSE‚áì b‚ÇÅ (fst (snd (snd (snd (snd ind))))) ,
    differ-CHOOSE _ _ _ _ (snd (snd (snd (snd (snd ind))))) diff‚ÇÅ
    where
      hv0 : hasValue‚Ñï k a‚ÇÅ' w1''
      hv0 = CHOOSE‚ÜíhasValue k a‚ÇÅ' b‚ÇÅ v w1'' w0 hv isvv

      ind : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
              a‚ÇÅ' ‚áì a'' from w1'' to w3 √ó a‚ÇÅ ‚áì a'' from w1' to w3' √ó differ name name f a'' a'')))
      ind = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' (fst (snd hv0)) a‚ÇÅ a‚ÇÅ' (fst hv0) k compat1 compat2 agtn atgn' diff z (fst (snd (snd hv0))) (snd (snd (snd hv0))) pd -- (hasValue-CHOOSE‚Üí a‚ÇÅ' b‚ÇÅ w1'' {k} hv) pd
  ... |    inj‚ÇÇ z rewrite z = ‚ä•-elim (¬¨just‚â°nothing (sym s))
--  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(TSQUASH a) b v k compat1 compat2 agtn atgn' (differ-TSQUASH a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TSQUASH _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-TSQUASH _ _ diff
--  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(TTRUNC a) b v k compat1 compat2 agtn atgn' (differ-TTRUNC a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TTRUNC _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-TTRUNC _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .NOWRITE b v k compat1 compat2 agtn atgn' differ-NOWRITE s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NOWRITE , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-NOWRITE
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .NOREAD  b v k compat1 compat2 agtn atgn' differ-NOREAD  s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NOREAD  , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-NOREAD
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SUBSING a) b v k compat1 compat2 agtn atgn' (differ-SUBSING a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SUBSING _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-SUBSING _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .PURE b v k compat1 compat2 agtn atgn' differ-PURE s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PURE , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-PURE
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .NOSEQ b v k compat1 compat2 agtn atgn' differ-NOSEQ s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NOSEQ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-NOSEQ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .NOENC b v k compat1 compat2 agtn atgn' differ-NOENC s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = NOENC , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-NOENC
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(TERM a) b v k compat1 compat2 agtn atgn' (differ-TERM a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = TERM _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-TERM _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(ENC a) b v k compat1 compat2 agtn atgn' (differ-ENC a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = ENCr a , w1 , w1' , ‚áìfrom-to-refl _ _ , (1 , refl) , ‚Üídiffer-ENCr diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(PARTIAL a) b v k compat1 compat2 agtn atgn' (differ-PARTIAL a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = PARTIAL _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-PARTIAL _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(FFDEFS a‚ÇÅ b‚ÇÅ) b v k compat1 compat2 agtn atgn' (differ-FFDEFS a‚ÇÅ .a‚ÇÅ b‚ÇÅ .b‚ÇÅ diff diff‚ÇÅ) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = FFDEFS _ _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-FFDEFS _ _ _ _ diff diff‚ÇÅ
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(UNIV x) b v k compat1 compat2 agtn atgn' (differ-UNIV x) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = UNIV _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-UNIV _
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(LIFT a) b v k compat1 compat2 agtn atgn' (differ-LIFT a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LIFT _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-LIFT _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(LOWER a) b v k compat1 compat2 agtn atgn' (differ-LOWER a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = LOWER _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-LOWER _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(SHRINK a) b v k compat1 compat2 agtn atgn' (differ-SHRINK a .a diff) s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = SHRINK _ , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-SHRINK _ _ diff
  differNF‚áì-aux2 gc0 f cf nnf name w1 w2 w1' w0 .(upd name f) b v k compat1 compat2 agtn atgn' differ-upd s hv isvv pd rewrite sym (pair-inj‚ÇÅ (just-inj s)) | sym (pair-inj‚ÇÇ (just-inj s)) = upd name f , w1 , w1' , ‚áìfrom-to-refl _ _ , ‚áìfrom-to-refl _ _ , differ-upd



abstract
  differNF‚áì-aux : (gc0 : get-choose-‚Ñï) (f : Term) (cf : # f) (nn : ¬¨Names f) (name : Name) (n : ‚Ñï)
                  (ind : (n' : ‚Ñï) ‚Üí n' < n ‚Üí ‚áìPresDiffNF f name n')
                  ‚Üí ‚áìPresDiffNF f name n
  differNF‚áì-aux gc0 f cf nnf name 0 ind w1 w2 w1' a v isv compat1 compat2 gt0 gt0' diff comp rewrite pair-inj‚ÇÅ comp | pair-inj‚ÇÇ comp =
    w1' , (0 , refl) , diff
  differNF‚áì-aux gc0 f cf nnf name (suc n) ind w1 w2 w1' a v isv compat1 compat2 gt0 gt0' diff comp with step‚äé a w1
  ... | inj‚ÇÅ (a' , w1'' , z) rewrite z =
    fst e ,
    ‚áì-trans‚ÇÇ (fst (snd (snd (snd (snd c))))) (fst (snd e)) ,
    snd (snd e)
    where
      c : Œ£ Term (Œª a'' ‚Üí Œ£ ùïé¬∑ (Œª w3 ‚Üí Œ£ ùïé¬∑ (Œª w3' ‚Üí
                    a' ‚áì a'' from w1'' to w3
                    √ó a ‚áì a'' from w1' to w3'
                    √ó differ name name f a'' a'')))
      c = differNF‚áì-aux2 gc0 f cf nnf name w1 w1'' w1' w2 a a' v n compat1 compat2 gt0 gt0' diff z comp isv Œª k i ‚Üí ind k (<-trans i (n<1+n n))

      d : steps n (fst c , fst (snd c)) ‚â° (v , w2)
      d = steps‚áì-decomp
            n (fst (fst (snd (snd (snd c))))) a'
            (fst c) v w1'' w2 (fst (snd c)) comp
            (snd (fst (snd (snd (snd c))))) isv

      e‚ÇÅ : w1 ‚äë¬∑ fst (snd c)
      e‚ÇÅ = ‚áì‚Üí‚äë a (fst c) (step-‚áì-from-to-trans z (fst (snd (snd (snd c)))))

      e‚ÇÇ : w1' ‚äë¬∑ fst (snd (snd c))
      e‚ÇÇ = ‚áì‚Üí‚äë a (fst c) (fst (snd (snd (snd (snd c)))))

      e : Œ£ ùïé¬∑ (Œª w2' ‚Üí fst c ‚áì v from fst (snd (snd c)) to w2' √ó differ name name f v v)
      e = ind n ‚â§-refl (fst (snd c)) w2 (fst (snd (snd c))) (fst c) v isv
              (‚äë-compatible¬∑ e‚ÇÅ compat1) (‚äë-compatible¬∑ e‚ÇÇ compat2)
              (‚àÄùïé-mon e‚ÇÅ gt0)
              (‚àÄùïé-mon e‚ÇÇ gt0')
              (snd (snd (snd (snd (snd c)))))
              d
  ... | inj‚ÇÇ z rewrite z | pair-inj‚ÇÅ comp | pair-inj‚ÇÇ comp = w1' , (0 , refl) , diff



differNF‚áì : (gc0 : get-choose-‚Ñï) (f : Term) (cf : # f) (nn : ¬¨Names f) (name : Name) (n : ‚Ñï)
          ‚Üí ‚áìPresDiffNF f name n
differNF‚áì gc0 f cf nnf name = <‚Ñïind _ (differNF‚áì-aux gc0 f cf nnf name)



differNF‚áìAPPLY-upd : (gc0 : get-choose-‚Ñï) (F f : Term) (cf : # f) (name : Name) (n : ‚Ñï)
                     (w1 w2 w1' : ùïé¬∑)
                     ‚Üí ¬¨Names F
                     ‚Üí ¬¨Names f
                     ‚Üí compatible¬∑ name w1 Res‚ä§
                     ‚Üí compatible¬∑ name w1' Res‚ä§
                     ‚Üí ‚àÄùïé-get0-NUM w1 name
                     ‚Üí ‚àÄùïé-get0-NUM w1' name
                     ‚Üí APPLY F (upd name f) ‚áì NUM n from w1 to w2
                     ‚Üí Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2')
differNF‚áìAPPLY-upd gc0 F f cf name n w1 w2 w1' nnF nnf compat1 compat2 wgt0 wgt0' (k , comp) =
  fst concl , fst (snd concl)
  where
    concl : Œ£ ùïé¬∑ (Œª w2' ‚Üí APPLY F (upd name f) ‚áì NUM n from w1' to w2' √ó differ name name f (NUM n) (NUM n))
    concl = differNF‚áì gc0 f cf nnf name k w1 w2 w1'
                      (APPLY F (upd name f)) (NUM n) tt
                      compat1 compat2 wgt0 wgt0'
                      (differ-APPLY _ _ _ _ (differ-refl name name f F nnF) differ-upd) comp

\end{code}
