\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}
--{-# OPTIONS --experimental-lossy-unification #-}
--{-# OPTIONS --auto-inline #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Data.Bool using (Bool ; _‚àß_ ; _‚à®_)
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import choiceExt
open import choiceVal
open import compatible
open import getChoice
open import progress
open import freeze
open import newChoice
open import mod
--open import choiceBar


module barContP3 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
                 (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
                 (X : ChoiceExt W C)
                 (N : NewChoice {L} W C K G)
                 (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
                 (EM : ExcludedMiddle (lsuc(L)))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)

open import terms2(W)(C)(K)(G)(X)(N)
open import terms3(W)(C)(K)(G)(X)(N)
--open import terms4(W)(C)(K)(G)(X)(N)
--open import terms5(W)(C)(K)(G)(X)(N)
open import terms6(W)(C)(K)(G)(X)(N)
--open import terms7(W)(C)(K)(G)(X)(N)
open import terms8(W)(C)(K)(G)(X)(N)

open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

--open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)
--open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props5(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import list(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import continuity-conds(W)(C)(K)(G)(X)(N)

open import continuity1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import continuity3(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import barContP(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)
open import barContP2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EM)





‚â°‚Üí¬¨< : (k1 k2 m : ‚Ñï) ‚Üí k2 ‚â° m ‚Üí ¬¨ k1 < k2 ‚Üí ¬¨ k1 < m
‚â°‚Üí¬¨< k1 k2 m e h rewrite e = h


IFLT-NUM<‚áõ : {n m : ‚Ñï} (p : n < m) (a b : Term) (w : ùïé¬∑) ‚Üí IFLT (NUM n) (NUM m) a b ‚áõ a at w
IFLT-NUM<‚áõ {n} {m} p a b w w1 e1 =
  lift (‚áì-from-to‚Üí‚áì {w1} {w1} {IFLT (NUM n) (NUM m) a b} {a} (IFLT-NUM<‚áì {n} {m} p a b w1))


IFLT-NUM¬¨<‚áõ : {n m : ‚Ñï} (p : ¬¨ n < m) (a b : Term) (w : ùïé¬∑) ‚Üí IFLT (NUM n) (NUM m) a b ‚áõ b at w
IFLT-NUM¬¨<‚áõ {n} {m} p a b w w1 e1 =
  lift (‚áì-from-to‚Üí‚áì {w1} {w1} {IFLT (NUM n) (NUM m) a b} {b} (IFLT-NUM¬¨<‚áì {n} {m} p a b w1))


‚ÜíAPPLY-APPENDf‚áõNUM‚ÇÅ : (w : ùïé¬∑) (j k m : ‚Ñï) (f a b : CTerm)
                       ‚Üí j < k
                       ‚Üí a #‚áõ #NUM j at w
                       ‚Üí #APPLY f a #‚áõ #NUM m at w
                       ‚Üí #APPLY (#APPENDf (#NUM k) f b) a #‚áõ #NUM m at w
‚ÜíAPPLY-APPENDf‚áõNUM‚ÇÅ w j k m f a b ltk compn compa =
  #‚áõ-trans {w} {#APPLY (#APPENDf (#NUM k) f b) a} {#IFEQ a (#NUM k) b (#APPLY f a)} {#NUM m}
            (APPLY-APPENDf‚áõ w (#NUM k) f b a)
            (#‚áõ-trans {w} {#IFEQ a (#NUM k) b (#APPLY f a)} {#IFEQ (#NUM j) (#NUM k) b (#APPLY f a)} {#NUM m}
                       (IFEQ‚áõ‚ÇÉ {w} {j} {k} {‚åú a ‚åù} {NUM k} {‚åú b ‚åù} {‚åú #APPLY f a ‚åù} compn (#‚áõ-refl w (#NUM k)))
                       (#‚áõ-trans {w} {#IFEQ (#NUM j) (#NUM k) b (#APPLY f a)} {#APPLY f a} {#NUM m}
                                  (IFEQ‚áõ¬¨= {k} {j} {w} {‚åú b ‚åù} {‚åú #APPLY f a ‚åù} (<‚áí‚â¢ ltk))
                                  compa))


‚ÜíAPPLY-APPENDf‚áõNUM‚ÇÇ : (w : ùïé¬∑) (k : ‚Ñï) (f a b : CTerm)
                       ‚Üí a #‚áõ #NUM k at w
                       ‚Üí #APPLY (#APPENDf (#NUM k) f b) a #‚áõ b at w
‚ÜíAPPLY-APPENDf‚áõNUM‚ÇÇ w k f a b compa =
  #‚áõ-trans {w} {#APPLY (#APPENDf (#NUM k) f b) a} {#IFEQ a (#NUM k) b (#APPLY f a)} {b}
            (APPLY-APPENDf‚áõ w (#NUM k) f b a)
            (#‚áõ-trans {w} {#IFEQ a (#NUM k) b (#APPLY f a)} {#IFEQ (#NUM k) (#NUM k) b (#APPLY f a)} {b}
                       (IFEQ‚áõ‚ÇÉ {w} {k} {k} {‚åú a ‚åù} {NUM k} {‚åú b ‚åù} {‚åú #APPLY f a ‚åù} compa (#‚áõ-refl w (#NUM k)))
                       (IFEQ‚áõ= {k} {k} {w} {‚åú b ‚åù} {‚åú #APPLY f a ‚åù} refl))


equalInType-APPENDf-last : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm) (k : ‚Ñï) (s : ùïä)
                           ‚Üí a‚ÇÅ #‚áõ #NUM k at w
                           ‚Üí a‚ÇÇ #‚áõ #NUM k at w
                           ‚Üí equalInType i w #NAT (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
equalInType-APPENDf-last i w f a‚ÇÅ a‚ÇÇ k s c1 c2 =
  ‚ÜíequalInType-NAT i w (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ) (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí NATeq w' (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
    aw w1 e1 = s k , ‚ÜíAPPLY-APPENDf‚áõNUM‚ÇÇ w1 k f a‚ÇÅ (#NUM (s k)) (‚àÄùïé-mon e1 c1) , APPLY-MSEQ‚áõ w1 s ‚åú a‚ÇÇ ‚åù k (‚àÄùïé-mon e1 c2)


equalInType-APPENDf-last‚â° : (i : ‚Ñï) (w : ùïé¬∑) (f a‚ÇÅ a‚ÇÇ : CTerm) (j k : ‚Ñï) (s : ùïä)
                            ‚Üí j ‚â° k
                            ‚Üí a‚ÇÅ #‚áõ #NUM j at w
                            ‚Üí a‚ÇÇ #‚áõ #NUM j at w
                            ‚Üí equalInType i w #NAT (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
equalInType-APPENDf-last‚â° i w f a‚ÇÅ a‚ÇÇ j k s e c1 c2 rewrite e = equalInType-APPENDf-last i w f a‚ÇÅ a‚ÇÇ k s c1 c2


‚ÜíequalInType-BAIREn-suc-APPENDf : (i : ‚Ñï) (w : ùïé¬∑) (k : ‚Ñï) (s : ùïä) (f : CTerm)
                                   ‚Üí equalInType i w (#BAIREn (#NUM k)) f (#MSEQ s)
                                   ‚Üí equalInType i w (#BAIREn (#NUM (suc k))) (#APPENDf (#NUM k) f (#NUM (s k))) (#MSEQ s)
‚ÜíequalInType-BAIREn-suc-APPENDf i w k s f eqb =
  equalInType-FUN
    (‚ÜíequalTypesNATn i w (#NUM (suc k)) (#NUM (suc k)) (NUM-equalInType-NAT i w (suc k)))
    eqTypesNAT
    aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí  equalInType i w' (#NATn (#NUM (suc k))) a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType i w' #NAT (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 eqa1)
      where
        eqa1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí Œ£ ‚Ñï (Œª j ‚Üí a‚ÇÅ #‚áõ #NUM j at w' √ó a‚ÇÇ #‚áõ #NUM j at w' √ó j < suc k))
        eqa1 = equalInType-NATn‚Üí {i} {w1} {suc k} {#NUM (suc k)} {a‚ÇÅ} {a‚ÇÇ} (#‚áõ-refl w1 (#NUM (suc k))) eqa

        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí a‚ÇÅ #‚áõ #NUM j at w' √ó a‚ÇÇ #‚áõ #NUM j at w' √ó j < suc k)
                              ‚Üí equalInType i w' #NAT (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
        aw1 w2 e2 (j , c1 , c2 , ltk) with j <? k
        ... | yes p =
          ‚ÜíequalInType-NAT
            i w2 (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
            (Mod.‚àÄùïé-‚ñ°Func M aw3 (equalInType-NAT‚Üí i w2 (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ) eqa2))
          where
            aw3 : ‚àÄùïé w2 (Œª w' e' ‚Üí NATeq w' (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
                                  ‚Üí NATeq w' (#APPLY (#APPENDf (#NUM k) f (#NUM (s k))) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
            aw3 w3 e3 (m , d1 , d2) = m , ‚ÜíAPPLY-APPENDf‚áõNUM‚ÇÅ w3 j k m f a‚ÇÅ (#NUM (s k)) p (‚àÄùïé-mon e3 c1) d1 , d2

            aw2 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí a‚ÇÅ #‚áõ #NUM k‚ÇÅ at w' √ó a‚ÇÇ #‚áõ #NUM k‚ÇÅ at w' √ó k‚ÇÅ < k))
            aw2 w3 e3 = j , ‚àÄùïé-mon e3 c1 , ‚àÄùïé-mon e3 c2 , p

            eqn1 : equalInType i w2 (#NATn (#NUM k)) a‚ÇÅ a‚ÇÇ
            eqn1 = ‚ÜíequalInType-NATn {i} {w2} {k} {#NUM k} {a‚ÇÅ} {a‚ÇÇ} (#‚áõ-refl w2 (#NUM k)) (Mod.‚àÄùïé-‚ñ° M aw2)

            eqa2 : equalInType i w2 #NAT (#APPLY f a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
            eqa2 = equalInType-FUN‚Üí eqb w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ a‚ÇÇ eqn1
        ... | no p = equalInType-APPENDf-last‚â° i w2 f a‚ÇÅ a‚ÇÇ j k s eqk c1 c2
          where
            eqk : j ‚â° k
            eqk = <s‚Üí¬¨<‚Üí‚â° {j} {k} ltk p


seq2list : (s : ùïä) (n : ‚Ñï) ‚Üí CTerm
seq2list s 0 = #INIT
seq2list s (suc n) = #APPENDf (#NUM n) (seq2list s n) (#NUM (s n))


seq2list+suc : (s : ùïä) (n k : ‚Ñï) ‚Üí seq2list s (n + suc k) ‚â° seq2list s (suc (n + k))
seq2list+suc s n k rewrite +-suc n k = refl


correctSeqN-inv : (i : ‚Ñï) (r : Name) (w : ùïé¬∑) (F : CTerm) (s : ùïä) (k n : ‚Ñï)
                  ‚Üí correctSeqN r w F k (seq2list s k) s (suc n)
                  ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                      #APPLY F (#upd r (seq2list s (n + k))) #‚áì #NUM m from (chooseT r w N0) to w'
                      √ó getT 0 r w' ‚â° just (NUM j)
                      √ó ¬¨ j < n + k)))
correctSeqN-inv i r w F s k 0 (m , w' , j , comp , gt0 , nlt , cor) = m , w' , j , comp , gt0 , nlt
correctSeqN-inv i r w F s k (suc n) (m , w' , j , comp , gt0 , nlt , cor) =
  fst ind , fst (snd ind) , fst (snd (snd ind)) ,
  comp' (fst (snd (snd (snd ind)))) ,
  fst (snd (snd (snd (snd ind)))) ,
  nlt'
  where
    ind : Œ£ ‚Ñï (Œª m ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
            #APPLY F (#upd r (seq2list s (n + suc k))) #‚áì #NUM m from (chooseT r w N0) to w'
            √ó getT 0 r w' ‚â° just (NUM j)
            √ó ¬¨ j < n + suc k)))
    ind = correctSeqN-inv i r w F s (suc k) n cor

    comp' : #APPLY F (#upd r (seq2list s (n + suc k))) #‚áì #NUM (fst ind) from (chooseT r w N0) to fst (snd ind)
            ‚Üí #APPLY F (#upd r (seq2list s (suc (n + k)))) #‚áì #NUM (fst ind) from (chooseT r w N0) to fst (snd ind)
    comp' x rewrite +-suc n k = x

    nlt' : ¬¨ fst (snd (snd ind)) < suc (n + k)
    nlt' rewrite sym (+-suc n k) = snd (snd (snd (snd (snd ind))))


correctSeqN-inv2 : (i : ‚Ñï) (r : Name) (w : ùïé¬∑) (F f : CTerm) (s : ùïä) (k n : ‚Ñï)
                   ‚Üí equalInType i w (#BAIREn (#NUM k)) f (#MSEQ s)
                   ‚Üí correctSeqN r w F k f s (suc n)
                   ‚Üí Œ£ CTerm (Œª f' ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
                       #APPLY F (#upd r f') #‚áì #NUM m from (chooseT r w N0) to w'
                       √ó equalInType i w (#BAIREn (#NUM (n + k))) f' (#MSEQ s)
                       √ó getT 0 r w' ‚â° just (NUM j)
                       √ó ¬¨ j < n + k))))
correctSeqN-inv2 i r w F f s k 0 eqb (m , w' , j , comp , gt0 , nlt , cor) = f , m , w' , j , comp , eqb , gt0 , nlt
correctSeqN-inv2 i r w F f s k (suc n) eqb (m , w' , j , comp , gt0 , nlt , cor) =
  fst ind , fst (snd ind) , fst (snd (snd ind)) , fst (snd (snd (snd ind))) ,
  fst (snd (snd (snd (snd ind)))) ,
  eqb' ,
  fst (snd (snd (snd (snd (snd (snd ind)))))) ,
  nlt'
  where
    ind : Œ£ CTerm (Œª f' ‚Üí Œ£ ‚Ñï (Œª m ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
            #APPLY F (#upd r f') #‚áì #NUM m from (chooseT r w N0) to w'
            √ó equalInType i w (#BAIREn (#NUM (n + suc k))) f' (#MSEQ s)
            √ó getT 0 r w' ‚â° just (NUM j)
            √ó ¬¨ j < n + suc k))))
    ind = correctSeqN-inv2 i r w F (#APPENDf (#NUM k) f (#NUM (s k))) s (suc k) n
                          (‚ÜíequalInType-BAIREn-suc-APPENDf i w k s f eqb) cor

    eqb' : equalInType i w (#BAIREn (#NUM (suc (n + k)))) (fst ind)  (#MSEQ s)
    eqb' rewrite sym (+-suc n k) = fst (snd (snd (snd (snd (snd ind)))))

    nlt' : ¬¨ fst (snd (snd (snd ind))) < suc (n + k)
    nlt' rewrite sym (+-suc n k) = snd (snd (snd (snd (snd (snd (snd ind))))))


ùïä‚à∑ : (k m : ‚Ñï) (s : ùïä) ‚Üí ùïä
ùïä‚à∑ 0 m s = ‚à∑ùïä m s
ùïä‚à∑ (suc k) m s = ‚à∑ùïä (s 0) (ùïä‚à∑ k m (shiftùïä s))


-- n is the fuel
-- k is the length of f
corSeqN : (r : Name) (w : ùïé¬∑) (F : CTerm) (k : ‚Ñï) (f : CTerm) (s : ùïä) (n : ‚Ñï) ‚Üí Set(lsuc L)
corSeqN r w F k f s 0 = Lift (lsuc L) ‚ä§
corSeqN r w F k f s (suc n) =
  Œ£ ‚Ñï (Œª m ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª j ‚Üí
    #APPLY F (#upd r f) #‚áì #NUM m from (chooseT r w N0) to w'
    √ó getT 0 r w' ‚â° just (NUM j)
    √ó ¬¨ j < k
    √ó corSeqN r w F (suc k) (#APPENDf (#NUM k) f (#NUM (s 0))) (shiftùïä s) n)))


corSeq : (r : Name) (w : ùïé¬∑) (F : CTerm) (s : ùïä) ‚Üí Set(lsuc L)
corSeq r w F s = (n : ‚Ñï) ‚Üí corSeqN r w F 0 #INIT s n


‚Üí‚â°corSeqN : (r : Name) (w : ùïé¬∑) (F : CTerm) (k : ‚Ñï) (f : CTerm) (s1 s2 : ùïä) (n : ‚Ñï)
             ‚Üí ((k : ‚Ñï) ‚Üí s1 k ‚â° s2 k)
             ‚Üí corSeqN r w F k f s1 n
             ‚Üí corSeqN r w F k f s2 n
‚Üí‚â°corSeqN r w F k f s1 s2 0 imp cor = cor
‚Üí‚â°corSeqN r w F k f s1 s2 (suc n) imp (m , w' , j , x , y , z , c) =
  m , w' , j , x , y , z , ind2
  where
    ind1 : corSeqN r w F (suc k) (#APPENDf (#NUM k) f (#NUM (s1 0))) (shiftùïä s2) n
    ind1 = ‚Üí‚â°corSeqN r w F (suc k) (#APPENDf (#NUM k) f (#NUM (s1 0))) (shiftùïä s1) (shiftùïä s2) n (Œª j ‚Üí imp (suc j)) c

    ind2 : corSeqN r w F (suc k) (#APPENDf (#NUM k) f (#NUM (s2 0))) (shiftùïä s2) n
    ind2 rewrite sym (imp 0) = ind1



++ùïä0 : (m : ‚Ñï) (s0 s : ùïä) ‚Üí ++ùïä m s0 s m ‚â° s 0
++ùïä0 0 s0 s = refl
++ùïä0 (suc m) s0 s = ++ùïä0 m (shiftùïä s0) s


‚â°‚à∑ùïä : {k m : ‚Ñï} {s1 s2 : ùïä} ‚Üí ((n : ‚Ñï) ‚Üí s1 n ‚â° s2 n) ‚Üí ‚à∑ùïä k s1 m ‚â° ‚à∑ùïä k s2 m
‚â°‚à∑ùïä {k} {0} {s1} {s2} imp = refl
‚â°‚à∑ùïä {k} {suc m} {s1} {s2} imp = imp m


‚â°++ùïä : {k m : ‚Ñï} {sa sb s : ùïä} ‚Üí ((n : ‚Ñï) ‚Üí sa n ‚â° sb n) ‚Üí ++ùïä k sa s m ‚â° ++ùïä k sb s m
‚â°++ùïä {0} {m} {sa} {sb} {s} imp = refl
‚â°++ùïä {suc k} {m} {sa} {sb} {s} imp rewrite imp 0 =
  ‚â°‚à∑ùïä {sb 0} {m} Œª n ‚Üí ‚â°++ùïä {k} {n} (Œª z ‚Üí imp (suc z))


‚à∑ùïä‚â°++ùïä : (m : ‚Ñï) (s0 s : ùïä) (k : ‚Ñï) ‚Üí  ‚à∑ùïä (ùïä‚à∑ m (s 0) s0 0) (++ùïä m (shiftùïä (ùïä‚à∑ m (s 0) s0)) (shiftùïä s)) k ‚â° ++ùïä m s0 s k
‚à∑ùïä‚â°++ùïä 0 s0 s 0 = refl
‚à∑ùïä‚â°++ùïä 0 s0 s (suc k) = refl
‚à∑ùïä‚â°++ùïä (suc m) s0 s 0 = refl
‚à∑ùïä‚â°++ùïä (suc m) s0 s (suc k) = c
  where
    a : (k : ‚Ñï) ‚Üí ++ùïä m
                        (shiftùïä (shiftùïä (‚à∑ùïä (s0 0) (ùïä‚à∑ m (s 0) (shiftùïä s0))))) -- need to replace with (shiftùïä (ùïä‚à∑ m (s 0) (shiftùïä s0)))
                        (shiftùïä s)
                        k
                   ‚â° ++ùïä m (shiftùïä (ùïä‚à∑ m (s 0) (shiftùïä s0))) (shiftùïä s) k
    a k = ‚â°++ùïä {m} {k} (Œª n ‚Üí refl)

    c : ‚à∑ùïä (ùïä‚à∑ m (s 0) (shiftùïä s0) 0)
             (++ùïä m
                   (shiftùïä (shiftùïä (‚à∑ùïä (s0 0) (ùïä‚à∑ m (s 0) (shiftùïä s0))))) -- need to replace with (shiftùïä (ùïä‚à∑ m (s 0) (shiftùïä s0)))
                   (shiftùïä s))

             k
        ‚â° ++ùïä m (shiftùïä s0) s k
    c = trans (‚â°‚à∑ùïä {ùïä‚à∑ m (s 0) (shiftùïä s0) 0} {k} a) (‚à∑ùïä‚â°++ùïä m (shiftùïä s0) s k)


-- n is the fuel
-- m is the length of f
corSeqN‚ÜícorrectSeqN : (r : Name) (w : ùïé¬∑) (m n : ‚Ñï) (F f : CTerm) (s0 s : ùïä)
                       ‚Üí corSeqN r w F m f s n
                       ‚Üí correctSeqN r w F m f (++ùïä m s0 s) n
corSeqN‚ÜícorrectSeqN r w m 0 F f s0 s cor = cor
corSeqN‚ÜícorrectSeqN r w m (suc n) F f s0 s (z , w' , j , comp , gt0 , nlt , cor) =
  z , w' , j , comp , gt0 , nlt , ind2
  where
    ind : correctSeqN r w F (suc m) (#APPENDf (#NUM m) f (#NUM (s 0))) (++ùïä (suc m) (ùïä‚à∑ m (s 0) s0) (shiftùïä s)) n
    ind = corSeqN‚ÜícorrectSeqN r w (suc m) n F (#APPENDf (#NUM m) f (#NUM (s 0))) (ùïä‚à∑ m (s 0) s0) (shiftùïä s) cor

    imp : (k : ‚Ñï) ‚Üí  ‚à∑ùïä (ùïä‚à∑ m (s 0) s0 0) (++ùïä m (shiftùïä (ùïä‚à∑ m (s 0) s0)) (shiftùïä s)) k ‚â° ++ùïä m s0 s k
    imp = ‚à∑ùïä‚â°++ùïä m s0 s

    ind1 : correctSeqN r w F (suc m) (#APPENDf (#NUM m) f (#NUM (s 0))) (++ùïä m s0 s) n
    ind1 = ‚Üí‚â°correctSeqN
             r w F (suc m) (#APPENDf (#NUM m) f (#NUM (s 0)))
             (++ùïä (suc m) (ùïä‚à∑ m (s 0) s0) (shiftùïä s)) (++ùïä m s0 s)
             n imp ind

    ind2 : correctSeqN r w F (suc m) (#APPENDf (#NUM m) f (#NUM (++ùïä m s0 s m))) (++ùïä m s0 s) n
    ind2 rewrite ++ùïä0 m s0 s = ind1


corSeq‚ÜícorrectSeq : (r : Name) (w : ùïé¬∑) (F : CTerm) (s : ùïä)
                     ‚Üí corSeq r w F s
                     ‚Üí correctSeq r w F s
corSeq‚ÜícorrectSeq r w F s cor n = corSeqN‚ÜícorrectSeqN r w 0 n F #INIT s s (cor n)


-- n is the fuel
‚ÜícorSeqN : (kb : K‚ñ°) (cn : c‚Ñï) (i : ‚Ñï) (r : Name) (t F g : CTerm) (m : ‚Ñï) (n : ‚Ñï) (w : ùïé¬∑)
                ‚Üí compatible¬∑ r w Res‚ä§
                ‚Üí ‚ààType i w #FunBar F
--                ‚Üí ‚ààType i w (#LIST #NAT) l
--                ‚Üí l #‚áõ #PAIR z g at w
--                ‚Üí z #‚áõ! #NUM m at w
--                ‚Üí ‚ààType i w #BAIRE g
                ‚Üí (p : path i w #IndBarB #IndBarC)
                ‚Üí isInfPath {i} {w} {#IndBarB} {#IndBarC} p
                ‚Üí t #‚áì! #APPLY2 (#loop r F) (#NUM m) g at w
                ‚Üí correctPathN {i} {w} {#IndBarB} {#IndBarC} t p n
                ‚Üí corSeqN r w F m g (path2ùïä kb p) n
‚ÜícorSeqN kb cn i r t F g m 0 w compat F‚àà {--g‚àà--} p inf compt cor = lift tt
‚ÜícorSeqN kb cn i r t F g m (suc n) w compat F‚àà {--g‚àà--} p inf compt cor with inf 0
... | inf0 with p 0
... |    inj‚ÇÅ (a , b , ia , ib) with cor
... |       (f , comp , cp) =
  k , w' , k1 , compF1 , compG0 , nlt , ind
  where
--    compz' : z #‚áõ #NUM m at w
--    compz' = #‚áõ!-#‚áõ {w} {z} {#NUM m} compz

--    comp0 : t #‚áõ #SUP a f at w
--    comp0 = comp

    comp1 : #APPLY2 (#loop r F) (#NUM m) g #‚áì #SUP a f at w
    comp1 = val-‚áì‚Üí {w} {w} {‚åú t ‚åù} {‚åú #APPLY2 (#loop r F) (#NUM m) g ‚åù} {‚åú #SUP a f ‚åù} tt compt (lower (comp w (‚äë-refl¬∑ w)))

{--
-- Get all that from comp1? We're still uing F‚àà and l‚àà here.
    F‚àà1 : ‚ààType i w #NAT (#APPLY F (#upd r g))
    F‚àà1 = ‚ààBAIRE‚ÜíNAT‚Üí
             {i} {w} {F} {F} {#upd r g} {#upd r g}
             F‚àà
             (upd‚ààBAIRE cn i w r g compat g‚àà)

    F‚àà2 : NATmem w (#APPLY F (#upd r g))
    F‚àà2 = kb (equalInType-NAT‚Üí i w (#APPLY F (#upd r g)) (#APPLY F (#upd r g)) F‚àà1) w (‚äë-refl¬∑ w)

    k : ‚Ñï
    k = fst F‚àà2
--}

    compF : Œ£ ‚Ñï (Œª k ‚Üí Œ£ ùïé¬∑ (Œª w' ‚Üí Œ£ ‚Ñï (Œª k1 ‚Üí Œ£ ‚Ñï (Œª k2 ‚Üí
              #APPLY F (#upd r g) #‚áì #NUM k from (chooseT r w N0) to w'
              √ó getT 0 r w' ‚â° just (NUM k1)
              √ó #NUM m #‚áì #NUM k2 at w'
              √ó ((k1 < k2 √ó a ‚â° #INL (#NUM k) √ó f ‚â° #AX)
                 ‚äé (¬¨ k1 < k2 √ó a ‚â° #INR #AX √ó f ‚â° #loopR (#loop r F) (#NUM m) g))))))
    compF = #APPLY-loop‚áìSUP‚Üí cn w r F (#NUM m) g a f {--k--} compat {--(fst (snd F‚àà2))--} comp1

    k : ‚Ñï
    k = fst compF

    w' : ùïé¬∑
    w' = fst (snd compF)

    k1 : ‚Ñï
    k1 = fst (snd (snd compF))

    k2 : ‚Ñï
    k2 = fst (snd (snd (snd compF)))

    compF1 : #APPLY F (#upd r g) #‚áì #NUM k from (chooseT r w N0) to w'
    compF1 = fst (snd (snd (snd (snd compF))))
--

    compG0 : getT 0 r w' ‚â° just (NUM k1)
    compG0 = fst (snd (snd (snd (snd (snd compF)))))

    compFL : #NUM m #‚áì #NUM k2 at w'
    compFL = fst (snd (snd (snd (snd (snd (snd compF))))))

    e' : w ‚äë¬∑ w'
    e' = ‚äë-trans¬∑ (choose‚äë¬∑ r w (T‚Üí‚ÑÇ¬∑ N0)) (‚áìfrom-to‚Üí‚äë {chooseT r w N0} {w'} {APPLY ‚åú F ‚åù (upd r ‚åú g ‚åù)} {NUM k} compF1)

    eqm : k2 ‚â° m
    eqm = NUMinj (sym (compVal (NUM m) (NUM k2) w' compFL tt))

    ia' : Œ£ CTerm (Œª t ‚Üí a #‚áõ! #INR t at w)
    ia' = fst (kb (‚ààType-IndBarB-IndBarC‚Üí i w a b ia ib) w (‚äë-refl¬∑ w))

    ib' : Œ£ ‚Ñï (Œª n ‚Üí b #‚áõ! #NUM n at w)
    ib' = snd (kb (‚ààType-IndBarB-IndBarC‚Üí i w a b ia ib) w (‚äë-refl¬∑ w))

    bn : ‚Ñï
    bn = fst ib'

    compF2 : (k1 < k2 √ó a ‚â° #INL (#NUM k) √ó f ‚â° #AX) ‚äé (¬¨ k1 < k2 √ó a ‚â° #INR #AX √ó f ‚â° #loopR (#loop r F) (#NUM m) g)
             ‚Üí ¬¨ k1 < k2 √ó a ‚â° #INR #AX √ó f ‚â° #loopR (#loop r F) (#NUM m) g
    compF2 (inj‚ÇÅ (x , y , z)) = ‚ä•-elim (#INL‚Üí¬¨#‚áõ!#INR w a (#NUM k) (proj‚ÇÅ ia') y (snd ia'))
    compF2 (inj‚ÇÇ x) = x

    compF3 : ¬¨ k1 < k2 √ó a ‚â° #INR #AX √ó f ‚â° #loopR (#loop r F) (#NUM m) g
    compF3 = compF2 (snd (snd (snd (snd (snd (snd (snd compF)))))))

    nlt : ¬¨ k1 < m
    nlt = ‚â°‚Üí¬¨< k1 k2 m eqm (fst compF3)

    cp1 : correctPathN {i} {w} {#IndBarB} {#IndBarC} (#APPLY f b) (shiftPath {i} {w} {#IndBarB} {#IndBarC} p) n
    cp1 = cp

    cp2 : correctPathN {i} {w} {#IndBarB} {#IndBarC} (#APPLY (#loopR (#loop r F) (#NUM m) g) b) (shiftPath {i} {w} {#IndBarB} {#IndBarC} p) n
    cp2 = ‚â°‚ÜícorrectPathN
            {i} {w} {#IndBarB} {#IndBarC} (shiftPath {i} {w} {#IndBarB} {#IndBarC} p)
            {#APPLY f b} {#APPLY (#loopR (#loop r F) (#NUM m) g) b} n (‚Üí‚â°#APPLY (snd (snd compF3)) refl) cp1

    ind1 : corSeqN r w F (suc m) (#APPENDf (#NUM m) g (#NUM bn)) (path2ùïä kb (shiftPath {i} {w} {#IndBarB} {#IndBarC} p)) n
    ind1 = ‚ÜícorSeqN
             kb cn i r (#APPLY (#loopR (#loop r F) (#NUM m) g) b) F
             (#APPENDf (#NUM m) g (#NUM bn)) (suc m)
             n w compat F‚àà
             {--(APPENDf‚ààBAIRE
               {i} {w} {#NUM m} {#NUM m} {g} {g} {#NUM bn} {#NUM bn}
               (NUM-equalInType-NAT i w m)
               (NUM-equalInType-NAT i w bn)
               g‚àà)--}
             (shiftPath {i} {w} {#IndBarB} {#IndBarC} p)
             (isInfPath-shiftPath {i} {w} {#IndBarB} {#IndBarC} p inf)
             (APPLY-loopR-‚áì w w w (#loop r F) (#NUM m) g b bn m (lower (snd ib' w (‚äë-refl¬∑ w))) (‚áì!-refl (NUM m) w))
             cp2

    ind : corSeqN r w F (suc m) (#APPENDf (#NUM m) g (#NUM bn)) (shiftùïä (path2ùïä kb p)) n
    ind = ‚Üí‚â°corSeqN r w F (suc m) (#APPENDf (#NUM m) g (#NUM bn))
            (path2ùïä kb (shiftPath {i} {w} {#IndBarB} {#IndBarC} p))
            (shiftùïä (path2ùïä kb p))
            n (Œª z ‚Üí sym (shift-path2ùïä kb {i} {w} p z)) ind1


‚ÜícorSeq : (kb : K‚ñ°) (cb : c‚Ñï) (i : ‚Ñï) (w : ùïé¬∑) (r : Name) (F : CTerm)
               ‚Üí compatible¬∑ r w Res‚ä§
               ‚Üí ‚ààType i w #FunBar F
               ‚Üí (p : path i w #IndBarB #IndBarC)
               ‚Üí correctPath {i} {w} {#IndBarB} {#IndBarC} (#APPLY2 (#loop r F) (#NUM 0) #INIT) p
               ‚Üí isInfPath {i} {w} {#IndBarB} {#IndBarC} p
               ‚Üí corSeq r w F (path2ùïä kb p)
‚ÜícorSeq kb cb i w r F compat F‚àà p cor inf n =
  ‚ÜícorSeqN
    kb cb i r (#APPLY2 (#loop r F) (#NUM 0) #INIT) F #INIT 0 n w compat F‚àà
    {--(LAM0‚ààBAIRE i w)--}
    p inf (#‚áì!-refl (#APPLY2 (#loop r F) (#NUM 0) #INIT) w) (cor n)


{--
infPath-mon :  {i : ‚Ñï} {w1 w2 : ùïé¬∑} {B : CTerm} {C : CTerm0} {t : CTerm}
               ‚Üí w1 ‚äë¬∑ w2
               ‚Üí (p : path i w1 B C)
               ‚Üí correctPath {i} {w1} {B} {C} t p
               ‚Üí isInfPath {i} {w1} {B} {C} p
               ‚Üí Œ£ (path i w2 B C) (Œª q ‚Üí correctPath {i} {w2} {B} {C} t q √ó isInfPath {i} {w2} {B} {C} q)
infPath-mon {i} {w1} {w2} {B} {C} {t} e p cor inf = {!!}
--}


mseq‚ààbaire : (i : ‚Ñï) (w : ùïé¬∑) (s : ùïä) ‚Üí ‚ààType i w #BAIRE (#MSEQ s)
mseq‚ààbaire i w s =
  ‚â°CTerm‚ÜíequalInType (sym #BAIRE‚â°) (equalInType-FUN eqTypesNAT eqTypesNAT aw)
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType i w' #NAT a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType i w' #NAT (#APPLY (#MSEQ s) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚ÜíequalInType-NAT
        i w1 (#APPLY (#MSEQ s) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ)
        (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-NAT‚Üí i w1 a‚ÇÅ a‚ÇÇ eqa))
      where
        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí NATeq w' a‚ÇÅ a‚ÇÇ ‚Üí NATeq w' (#APPLY (#MSEQ s) a‚ÇÅ) (#APPLY (#MSEQ s) a‚ÇÇ))
        aw1 w2 e2 (k , c1 , c2) = s k , APPLY-MSEQ‚áõ w2 s ‚åú a‚ÇÅ ‚åù k c1 , APPLY-MSEQ‚áõ w2 s ‚åú a‚ÇÇ ‚åù k c2

\end{code}
