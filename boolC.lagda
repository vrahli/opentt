\begin{code}
{-# OPTIONS --rewriting #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower ; _‚äî_) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod


module boolC {L : Level} (L' : Level) (W : PossibleWorlds {L}) (M : Mod L' W)
             (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
             (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
             (N : NewChoice {L} W C K G) (V : ChoiceVal W C K G X N)
             (F : Freeze {L} W C K P G N)
             (E : Extensionality 0‚Ñì (lsuc (lsuc L) ‚äî lsuc (lsuc L')))
             (CB : ChoiceBar L' W M C K P G X N V F E)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)
open import choiceValDef(W)(C)(K)(G)(X)(N)(V)
open import freezeDef(W)(C)(K)(P)(G)(N)(F)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(L')(W)
open import barI(L')(W)(M)--(C)(K)(P)
open import forcing(L')(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(L')(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(L')(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import props1(L')(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(L')(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props3(L')(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import choiceBarDef(L')(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import typeC(L')(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)
open import not_lem(L')(W)(M)(C)(K)(P)(G)(X)(N)(V)(F)(E)(CB)



-- If we only want to consider Boolean choices, where ‚ÑÇ‚ÇÄ stands for false, and ‚ÑÇ‚ÇÅ stands for true
Bool‚ÑÇ : ChoiceBar L' W M C K P G X N V F E ‚Üí Set
Bool‚ÑÇ cb =
  ChoiceBar.Type‚ÑÇ‚ÇÄ‚ÇÅ cb ‚â° #BOOL
  √ó C‚ÑÇ‚ÇÄ ‚â° #BFALSE
  √ó C‚ÑÇ‚ÇÅ ‚â° #BTRUE


QTBool‚ÑÇ : ChoiceBar L' W M C K P G X N V F E ‚Üí Set
QTBool‚ÑÇ cb =
  ChoiceBar.Type‚ÑÇ‚ÇÄ‚ÇÅ cb ‚â° #QTBOOL!
  √ó C‚ÑÇ‚ÇÄ ‚â° #BFALSE
  √ó C‚ÑÇ‚ÇÅ ‚â° #BTRUE



equalTypes-BOOL-Type‚ÑÇ‚ÇÄ‚ÇÅ : Bool‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑)
                          ‚Üí equalTypes n w #BOOL Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑
equalTypes-BOOL-Type‚ÑÇ‚ÇÄ‚ÇÅ bcb n w rewrite fst bcb = isTypeBOOL w n



equalTypes-QTBOOL!-Type‚ÑÇ‚ÇÄ‚ÇÅ : QTBool‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑)
                          ‚Üí equalTypes n w #QTBOOL! Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑
equalTypes-QTBOOL!-Type‚ÑÇ‚ÇÄ‚ÇÅ bcb n w rewrite fst bcb = eqTypesQTBOOL! {w} {n}



‚ÜíequalInType-APPLY-CS-BOOL : Bool‚ÑÇ CB ‚Üí {i : ‚Ñï} {w : ùïé¬∑} {c : Name} {a‚ÇÅ a‚ÇÇ : CTerm}
                              ‚Üí compatible¬∑ c w Res‚ÑÇ
                              ‚Üí equalInType i w #NAT! a‚ÇÅ a‚ÇÇ
                              ‚Üí equalInType i w #BOOL (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
‚ÜíequalInType-APPLY-CS-BOOL bcb {i} {w} {c} {a‚ÇÅ} {a‚ÇÇ} comp eqi =
  ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ comp eqi)



‚ÜíequalInType-APPLY-CS-QTBOOL! : QTBool‚ÑÇ CB ‚Üí {i : ‚Ñï} {w : ùïé¬∑} {c : Name} {a‚ÇÅ a‚ÇÇ : CTerm}
                               ‚Üí compatible¬∑ c w Res‚ÑÇ
                               ‚Üí equalInType i w #NAT! a‚ÇÅ a‚ÇÇ
                               ‚Üí equalInType i w #QTBOOL! (#APPLY (#CS c) a‚ÇÅ) (#APPLY (#CS c) a‚ÇÇ)
‚ÜíequalInType-APPLY-CS-QTBOOL! bcb {i} {w} {c} {a‚ÇÅ} {a‚ÇÇ} comp eqi =
  ‚â°CTerm‚ÜíequalInType (fst bcb) (‚ÜíequalInType-APPLY-CS-Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑ comp eqi)



equalInType-BTRUE-‚ÑÇ‚ÇÅ : Bool‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType n w #BOOL #BTRUE C‚ÑÇ‚ÇÅ
equalInType-BTRUE-‚ÑÇ‚ÇÅ bcb n w rewrite snd (snd bcb) = BTRUE‚ààBOOL n w



equalInType-QT-BTRUE-‚ÑÇ‚ÇÅ : QTBool‚ÑÇ CB ‚Üí (n : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType n w #QTBOOL! #BTRUE C‚ÑÇ‚ÇÅ
equalInType-QT-BTRUE-‚ÑÇ‚ÇÅ bcb n w rewrite snd (snd bcb) = BTRUE‚ààQTBOOL! n w



#SUM-ASSERT‚ÇÇ : CTerm ‚Üí CTerm
#SUM-ASSERT‚ÇÇ f = #SUM #NAT! (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR))


#PI-NEG-ASSERT‚ÇÇ : CTerm ‚Üí CTerm
#PI-NEG-ASSERT‚ÇÇ f = #PI #NAT! (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))



#SUM-ASSERT‚ÇÉ : CTerm ‚Üí CTerm
#SUM-ASSERT‚ÇÉ f = #SUM #NAT! (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR))


#PI-NEG-ASSERT‚ÇÉ : CTerm ‚Üí CTerm
#PI-NEG-ASSERT‚ÇÉ f = #PI #NAT! (#[0]NEG (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû f ‚åü #[0]VAR)))



‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                           ‚Üí equalInType n w #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                           ‚Üí equalTypes n w (#SUM-ASSERT‚ÇÇ a‚ÇÅ) (#SUM-ASSERT‚ÇÇ a‚ÇÇ)
‚ÜíequalTypes-#SUM-ASSERT‚ÇÇ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt = eqTypesSUM‚Üê (Œª w' _ ‚Üí isTypeNAT!) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b ‚Üí equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí eqt

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
    aw1 w' e a b ea rewrite sub0-ASSERT‚ÇÇ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÇ-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÇ (#APPLY a‚ÇÇ b))
        aw2 = equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eqb



‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                           ‚Üí equalInType n w #NAT!‚ÜíQTBOOL! a‚ÇÅ a‚ÇÇ
                           ‚Üí equalTypes n w (#SUM-ASSERT‚ÇÉ a‚ÇÅ) (#SUM-ASSERT‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#SUM-ASSERT‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt = eqTypesSUM‚Üê (Œª w' _ ‚Üí isTypeNAT!) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b ‚Üí equalInType n w' #QTBOOL! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí eqt

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR))))
    aw1 w' e a b ea rewrite sub0-ASSERT‚ÇÉ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÉ-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #QTBOOL! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÉ (#APPLY a‚ÇÇ b))
        aw2 = equalInType-QTBOOL!‚ÜíequalTypes-ASSERT‚ÇÉ eqb



‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                              ‚Üí equalInType n w #NAT!‚ÜíBOOL a‚ÇÅ a‚ÇÇ
                              ‚Üí equalTypes n w (#PI-NEG-ASSERT‚ÇÇ a‚ÇÅ) (#PI-NEG-ASSERT‚ÇÇ a‚ÇÇ)
‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÇ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesPI‚Üê (Œª w' _ ‚Üí isTypeNAT!) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b ‚Üí equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí eqt

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                          (sub0 b (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR)))))
    aw1 w' e a b ea rewrite sub0-NEG-ASSERT‚ÇÇ-APPLY a a‚ÇÅ | sub0-NEG-ASSERT‚ÇÇ-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#NEG (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a))) (#NEG (#ASSERT‚ÇÇ (#APPLY a‚ÇÇ b)))
        aw2 = eqTypesNEG‚Üê (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eqb)



‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a‚ÇÅ a‚ÇÇ : CTerm}
                              ‚Üí equalInType n w #NAT!‚ÜíQTBOOL! a‚ÇÅ a‚ÇÇ
                              ‚Üí equalTypes n w (#PI-NEG-ASSERT‚ÇÉ a‚ÇÅ) (#PI-NEG-ASSERT‚ÇÉ a‚ÇÇ)
‚ÜíequalTypes-#PI-NEG-ASSERT‚ÇÉ {n} {w} {a‚ÇÅ} {a‚ÇÇ} eqt =
  eqTypesPI‚Üê (Œª w' _ ‚Üí isTypeNAT!) aw1
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b ‚Üí equalInType n w' #QTBOOL! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b))
    aw0 = equalInType-FUN‚Üí eqt

    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                       ‚Üí equalTypes n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                          (sub0 b (#[0]NEG (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÇ ‚åü #[0]VAR)))))
    aw1 w' e a b ea rewrite sub0-NEG-ASSERT‚ÇÉ-APPLY a a‚ÇÅ | sub0-NEG-ASSERT‚ÇÉ-APPLY b a‚ÇÇ = aw2
      where
        eqb : equalInType n w' #QTBOOL! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÇ b)
        eqb = aw0 w' e a b ea

        aw2 : equalTypes n w' (#NEG (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ a))) (#NEG (#ASSERT‚ÇÉ (#APPLY a‚ÇÇ b)))
        aw2 = eqTypesNEG‚Üê (equalInType-QTBOOL!‚ÜíequalTypes-ASSERT‚ÇÉ eqb)



#SUM-ASSERT‚ÇÇ‚Üí#Œ£choice : Bool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                       ‚Üí compatible¬∑ name w Res‚ÑÇ
                       ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                       ‚Üí inhType n w (#SUM-ASSERT‚ÇÇ (#CS name))
                       ‚Üí inhType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
#SUM-ASSERT‚ÇÇ‚Üí#Œ£choice bcb {n} {w} {name} comp sat (t , inh) =
  t , ‚â°CTerm‚ÜíequalInType
        (sym (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑))
        (fun-equalInType-SUM-NAT! {n} {w} {#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR)} aw1 aw2 inh)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT! m
                        ‚Üí equalInType n w' (sub0 m (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR))) t‚ÇÅ t‚ÇÇ
                        ‚Üí equalInType n w' (sub0 m (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 m t‚ÇÅ t‚ÇÇ j eqi = ‚â°CTerm‚ÜíequalInType (sym (sub0-#Œ£choice-body‚â° m name ‚ÑÇ‚ÇÅ¬∑)) eqi2
      where
        eqi1 : equalInType n w1 (#ASSERT‚ÇÇ (#APPLY (#CS name) m)) t‚ÇÅ t‚ÇÇ
        eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÇ-APPLY m (#CS name)) eqi

        eqt : equalTypes n w1 (#EQ (#APPLY (#CS name) m) #BTRUE #BOOL) (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
        eqt = eqTypesEQ‚Üê (equalTypes-BOOL-Type‚ÑÇ‚ÇÄ‚ÇÅ bcb n w1)
                          (‚ÜíequalInType-APPLY-CS-BOOL bcb (‚äë-compatible¬∑ e1 comp) j)
                          (equalInType-BTRUE-‚ÑÇ‚ÇÅ bcb n w1)

        eqi2 : equalInType n w1 (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) t‚ÇÅ t‚ÇÇ
        eqi2 = equalTypes‚ÜíequalInType
                 (‚â°CTerm‚ÜíeqTypes (sym (#ASSERT‚ÇÇ‚â° (#APPLY (#CS name) m))) refl eqt)
                 eqi1

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ)
                        ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
    aw2 = equalTypes-#Œ£choice-body-sub0 n w name ‚ÑÇ‚ÇÅ¬∑ comp sat



#SUM-ASSERT‚ÇÉ‚Üí#Œ£choice : QTBool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                       ‚Üí compatible¬∑ name w Res‚ÑÇ
                       ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                       ‚Üí inhType n w (#SUM-ASSERT‚ÇÉ (#CS name))
                       ‚Üí inhType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
#SUM-ASSERT‚ÇÉ‚Üí#Œ£choice bcb {n} {w} {name} comp sat (t , inh) =
  t , ‚â°CTerm‚ÜíequalInType
        (sym (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑))
        (fun-equalInType-SUM-NAT! {n} {w} {#[0]ASSERT‚ÇÉ (#[0]APPLY (#[0]CS name) #[0]VAR)} aw1 aw2 inh)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT! m
                        ‚Üí equalInType n w' (sub0 m (#[0]ASSERT‚ÇÉ (#[0]APPLY (#[0]CS name) #[0]VAR))) t‚ÇÅ t‚ÇÇ
                        ‚Üí equalInType n w' (sub0 m (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) t‚ÇÅ t‚ÇÇ)
    aw1 w1 e1 m t‚ÇÅ t‚ÇÇ j eqi = ‚â°CTerm‚ÜíequalInType (sym (sub0-#Œ£choice-body‚â° m name ‚ÑÇ‚ÇÅ¬∑)) eqi2
      where
        eqi1 : equalInType n w1 (#ASSERT‚ÇÉ (#APPLY (#CS name) m)) t‚ÇÅ t‚ÇÇ
        eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-ASSERT‚ÇÉ-APPLY m (#CS name)) eqi

        eqt : equalTypes n w1 (#EQ (#APPLY (#CS name) m) #BTRUE #QTBOOL!) (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑)
        eqt = eqTypesEQ‚Üê (equalTypes-QTBOOL!-Type‚ÑÇ‚ÇÄ‚ÇÅ bcb n w1)
                          (‚ÜíequalInType-APPLY-CS-QTBOOL! bcb (‚äë-compatible¬∑ e1 comp) j)
                          (equalInType-QT-BTRUE-‚ÑÇ‚ÇÅ bcb n w1)

        eqi2 : equalInType n w1 (#EQ (#APPLY (#CS name) m) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) t‚ÇÅ t‚ÇÇ
        eqi2 = equalTypes‚ÜíequalInType
                 (‚â°CTerm‚ÜíeqTypes (sym (#ASSERT‚ÇÉ‚â° (#APPLY (#CS name) m))) refl eqt)
                 eqi1

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ)
                        ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))
                                           (sub0 a‚ÇÇ (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) (‚ÑÇ‚ÜíC0 ‚ÑÇ‚ÇÅ¬∑) #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
    aw2 = equalTypes-#Œ£choice-body-sub0 n w name ‚ÑÇ‚ÇÅ¬∑ comp sat



#PI-NEG-ASSERT‚ÇÇ‚Üí#Œ£choice : Bool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                          ‚Üí compatible¬∑ name w Res‚ÑÇ
                          ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                          ‚Üí inhType n w (#PI-NEG-ASSERT‚ÇÇ (#CS name))
                          ‚Üí inhType n w (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
#PI-NEG-ASSERT‚ÇÇ‚Üí#Œ£choice bcb {n} {w} {name} comp sat (f , inh) =
  #lamAX , equalInType-NEG aw1 aw2
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR)))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ))
    aw0 = snd (snd (equalInType-PI‚Üí {n} {w} {#NAT!} {#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY (#[0]CS name) #[0]VAR))} inh))

    aw1 : isType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
    aw1 = equalInType-#Œ£choice w name ‚ÑÇ‚ÇÅ¬∑ comp sat

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑) a‚ÇÅ a‚ÇÇ)
    aw2 w1 e1 p‚ÇÅ p‚ÇÇ eqi = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
      where
        aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT!)
                                      (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                      w' p‚ÇÅ p‚ÇÇ
                             ‚Üí Lift (lsuc L) ‚ä•)
        aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (eqi3 eqi4)
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#NEG (#ASSERT‚ÇÇ (#APPLY (#CS name) a‚ÇÅ))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ)
            eqi2 = ‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT‚ÇÇ-APPLY a‚ÇÅ (#CS name)) (aw0 w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ a‚ÇÇ ea)

            eqi3 : ¬¨ equalInType n w2 (#ASSERT‚ÇÇ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi3 = equalInType-NEG‚Üí eqi2 w2 (‚äë-refl¬∑ _) b‚ÇÅ b‚ÇÇ

            eqi4 : equalInType n w2 (#ASSERT‚ÇÇ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi4 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÇ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1

        h0 : equalInType n w1 (#SUM #NAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) p‚ÇÅ p‚ÇÇ
        h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) eqi

        h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' p‚ÇÅ p‚ÇÇ)
        h1 = equalInType-SUM‚Üí h0



#PI-NEG-ASSERT‚ÇÉ‚Üí#Œ£choice : QTBool‚ÑÇ CB ‚Üí {n : ‚Ñï} {w : ùïé¬∑} {name : Name}
                          ‚Üí compatible¬∑ name w Res‚ÑÇ
                          ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ¬∑·µ£ Res‚ÑÇ n ‚ÑÇ‚ÇÅ¬∑)
                          ‚Üí inhType n w (#PI-NEG-ASSERT‚ÇÉ (#CS name))
                          ‚Üí inhType n w (#NEG (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑))
#PI-NEG-ASSERT‚ÇÉ‚Üí#Œ£choice bcb {n} {w} {name} comp sat (f , inh) =
  #lamAX , equalInType-NEG aw1 aw2
  where
    aw0 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]NEG (#[0]ASSERT‚ÇÉ (#[0]APPLY (#[0]CS name) #[0]VAR)))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ))
    aw0 = snd (snd (equalInType-PI‚Üí {n} {w} {#NAT!} {#[0]NEG (#[0]ASSERT‚ÇÉ (#[0]APPLY (#[0]CS name) #[0]VAR))} inh))

    aw1 : isType n w (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑)
    aw1 = equalInType-#Œ£choice w name ‚ÑÇ‚ÇÅ¬∑ comp sat

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#Œ£choice name ‚ÑÇ‚ÇÅ¬∑) a‚ÇÅ a‚ÇÇ)
    aw2 w1 e1 p‚ÇÅ p‚ÇÇ eqi = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw3 h1))
      where
        aw3 : ‚àÄùïé w1 (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT!)
                                      (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)))
                                      w' p‚ÇÅ p‚ÇÇ
                             ‚Üí Lift (lsuc L) ‚ä•)
        aw3 w2 e2 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = lift (eqi3 eqi4)
          where
            eqi1 : equalInType n w2 (#EQ (#APPLY (#CS name) a‚ÇÅ) C‚ÑÇ‚ÇÅ Type‚ÑÇ‚ÇÄ‚ÇÅ¬∑) b‚ÇÅ b‚ÇÇ
            eqi1 = ‚â°CTerm‚ÜíequalInType (sub0-#Œ£choice-body‚â° a‚ÇÅ name ‚ÑÇ‚ÇÅ¬∑) eb

            eqi2 : equalInType n w2 (#NEG (#ASSERT‚ÇÉ (#APPLY (#CS name) a‚ÇÅ))) (#APPLY f a‚ÇÅ) (#APPLY f a‚ÇÇ)
            eqi2 = ‚â°CTerm‚ÜíequalInType (sub0-NEG-ASSERT‚ÇÉ-APPLY a‚ÇÅ (#CS name)) (aw0 w2 (‚äë-trans¬∑ e1 e2) a‚ÇÅ a‚ÇÇ ea)

            eqi3 : ¬¨ equalInType n w2 (#ASSERT‚ÇÉ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi3 = equalInType-NEG‚Üí eqi2 w2 (‚äë-refl¬∑ _) b‚ÇÅ b‚ÇÇ

            eqi4 : equalInType n w2 (#ASSERT‚ÇÉ (#APPLY (#CS name) a‚ÇÅ)) b‚ÇÅ b‚ÇÇ
            eqi4 = ‚â°CTerm‚ÜíequalInType (trans (‚â°#EQ {#APPLY (#CS name) a‚ÇÅ} refl (snd (snd bcb)) (fst bcb))
                                              (sym (#ASSERT‚ÇÉ‚â° (#APPLY (#CS name) a‚ÇÅ))))
                                       eqi1

        h0 : equalInType n w1 (#SUM #NAT! (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ)) p‚ÇÅ p‚ÇÇ
        h0 = ‚â°CTerm‚ÜíequalInType (#Œ£choice‚â° name ‚ÑÇ‚ÇÅ¬∑) eqi

        h1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]EQ (#[0]APPLY (#[0]CS name) #[0]VAR) ‚åû C‚ÑÇ‚ÇÅ ‚åü #[0]Type‚ÑÇ‚ÇÄ‚ÇÅ))) w' p‚ÇÅ p‚ÇÇ)
        h1 = equalInType-SUM‚Üí h0

\end{code}
