\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}

open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Membership.Propositional
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import getChoice
open import progress
open import choiceExt
open import newChoice
open import mod


module props3 {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
              (C : Choice) (K : Compatible {L} W C) (P : Progress {L} W C K) (G : GetChoice {L} W C K)
              (X : ChoiceExt W C)
              (N : NewChoice W C K G)
              (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
       where


open import worldDef(W)
open import computation(W)(C)(K)(G)(X)(N)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props0(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import ind2(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import terms4(W)(C)(K)(G)(X)(N)

open import type_sys_props_nat(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_qnat(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_lt(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_qlt(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_free(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_pi(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_sum(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_set(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_eq(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_union(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_qtunion(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_tsquash(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_ffdefs(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_lift(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_isect(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import type_sys_props_pure(W)(M)(C)(K)(P)(G)(X)(N)(E)

open import props1(W)(M)(C)(K)(P)(G)(X)(N)(E)
open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)


equalInType-EQ‚Üí‚ÇÅ : {u : ‚Ñï} {w : ùïé¬∑} {a b A : CTerm} {f g : CTerm}
                    ‚Üí equalInType u w (#EQ a b A) f g
                    ‚Üí equalInType u w A a b
{-# TERMINATING #-}
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqLT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (EQneqQLT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqFREE (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqPI (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSUM (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqW (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqM (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqSET (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqISECT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (EQneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) =
  equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a1 a2 (eqInType (uni u) w' (eqtA w' e')) w' f g ‚Üí equalInType u w' A a b)
    aw w' e' h rewrite sym (#EQinj1 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
                     | sym (#EQinj2 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
                     | sym (#EQinj3 {a} {b} {A} {a1} {a2} {A‚ÇÅ} (#compAllVal x tt))
                     | sym (#EQinj1 {a} {b} {A} {b1} {b2} {B} (#compAllVal x‚ÇÅ tt))
                     | sym (#EQinj2 {a} {b} {A} {b1} {b2} {B} (#compAllVal x‚ÇÅ tt))
                     | sym (#EQinj3 {a} {b} {A} {b1} {b2} {B} (#compAllVal x‚ÇÅ tt)) = eqtA w' e' , h
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (EQneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqPURE (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (EQneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (EQneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (EQneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-EQ‚Üí‚ÇÅ {u} {w} {a} {b} {A} {f} {g} (EQTBAR x , eqi) =
  equalInType-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : equalTypes u w' (#EQ a b A) (#EQ a b A)) ‚Üí equalTerms u w' z f g ‚Üí equalInType u w' A a b)
    aw w' e' z h = equalInType-EQ‚Üí‚ÇÅ (z , h)



equalTypes-#‚áõ-left-rev : {i : ‚Ñï} {w : ùïé¬∑} {a b c : CTerm}
                          ‚Üí a #‚áõ b at w
                          ‚Üí equalTypes i w b c
                          ‚Üí equalTypes i w a c
{-# TERMINATING #-}
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTNAT x x‚ÇÅ) = EQTNAT (‚áõ-trans comp x) x‚ÇÅ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTQNAT x x‚ÇÅ) = EQTQNAT (‚áõ-trans comp x) x‚ÇÅ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTTNAT x x‚ÇÅ) = EQTTNAT (‚áõ-trans comp x) x‚ÇÅ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = EQTLT a1 a2 b1 b2 (‚áõ-trans comp x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = EQTQLT a1 a2 b1 b2 (‚áõ-trans comp x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTFREE x x‚ÇÅ) = EQTFREE (‚áõ-trans comp x) x‚ÇÅ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTPI A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTSUM A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTW A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTM A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTSET A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) =
   EQTISECT A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqtA eqtB exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTTUNION A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2) =
  EQTEQ a1 b1 a2 b2 A B (‚áõ-trans comp x) x‚ÇÅ eqtA exta eqt1 eqt2
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) =
  EQTUNION A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqtA eqtB exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) =
  EQTQTUNION A1 B1 A2 B2 (‚áõ-trans comp x) x‚ÇÅ eqtA eqtB exta extb
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) =
  EQTSQUASH A1 A2 (‚áõ-trans comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) =
  EQTTRUNC A1 A2 (‚áõ-trans comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) =
  EQTCONST A1 A2 (‚áõ-trans comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) =
  EQTSUBSING A1 A2 (‚áõ-trans comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTPURE x x‚ÇÅ) =
  EQTPURE (‚áõ-trans comp x) x‚ÇÅ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) =
  EQFFDEFS A1 A2 x1 x2 (‚áõ-trans comp x) x‚ÇÅ eqtA exta eqx
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTUNIV i‚ÇÅ p x x‚ÇÅ) =
  EQTUNIV i‚ÇÅ p (‚áõ-trans comp x) x‚ÇÅ
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) =
  EQTLIFT A1 A2 (‚áõ-trans comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left-rev {i} {w} {a} {b} {c} comp (EQTBAR x) =
  EQTBAR (Mod.‚àÄùïé-‚ñ°Func M (Œª w' e ‚Üí equalTypes-#‚áõ-left-rev (‚àÄùïé-mon e comp)) x)



equalTypes-#‚áõ-left : {i : ‚Ñï} {w : ùïé¬∑} {a b c : CTerm}
                       ‚Üí a #‚áõ! b at w
                       ‚Üí equalTypes i w a c
                       ‚Üí equalTypes i w b c
{-# TERMINATING #-}
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTNAT x x‚ÇÅ) = EQTNAT (val-#‚áõ‚Üí {w} {a} {b} {#NAT} tt comp x) x‚ÇÅ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTQNAT x x‚ÇÅ) = EQTQNAT (val-#‚áõ‚Üí {w} {a} {b} {#QNAT} tt comp x) x‚ÇÅ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTTNAT x x‚ÇÅ) = EQTTNAT (val-#‚áõ‚Üí {w} {a} {b} {#TNAT} tt comp x) x‚ÇÅ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) =
  EQTLT a1 a2 b1 b2 (val-#‚áõ‚Üí {w} {a} {b} {#LT a1 b1} tt comp x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) =
  EQTQLT a1 a2 b1 b2 (val-#‚áõ‚Üí {w} {a} {b} {#QLT a1 b1} tt comp x) x‚ÇÅ x‚ÇÇ x‚ÇÉ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTFREE x x‚ÇÅ) = EQTFREE (val-#‚áõ‚Üí {w} {a} {b} {#FREE} tt comp x) x‚ÇÅ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTPI A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#PI A1 B1} tt comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTSUM A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#SUM A1 B1} tt comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTW A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#WT A1 B1} tt comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTM A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#MT A1 B1} tt comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTSET A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#SET A1 B1} tt comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) =
  EQTISECT A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#ISECT A1 B1} tt comp x) x‚ÇÅ eqtA eqtB exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) =
  EQTTUNION A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#TUNION A1 B1} tt comp x) x‚ÇÅ eqta eqtb exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTEQ a1 b1 a2 b2 A B x x‚ÇÅ eqtA exta eqt1 eqt2) =
  EQTEQ a1 b1 a2 b2 A B (val-#‚áõ‚Üí {w} {a} {b} {#EQ a1 a2 A} tt comp x) x‚ÇÅ eqtA exta eqt1 eqt2
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) =
  EQTUNION A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#UNION A1 B1} tt comp x) x‚ÇÅ eqtA eqtB exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) =
  EQTQTUNION A1 B1 A2 B2 (val-#‚áõ‚Üí {w} {a} {b} {#QTUNION A1 B1} tt comp x) x‚ÇÅ eqtA eqtB exta extb
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) =
  EQTSQUASH A1 A2 (val-#‚áõ‚Üí {w} {a} {b} {#TSQUASH A1} tt comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) =
  EQTTRUNC A1 A2 (val-#‚áõ‚Üí {w} {a} {b} {#TTRUNC A1} tt comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) =
  EQTCONST A1 A2 (val-#‚áõ‚Üí {w} {a} {b} {#TCONST A1} tt comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) =
  EQTSUBSING A1 A2 (val-#‚áõ‚Üí {w} {a} {b} {#SUBSING A1} tt comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTPURE x x‚ÇÅ) =
  EQTPURE (val-#‚áõ‚Üí {w} {a} {b} {#PURE} tt comp x) x‚ÇÅ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) =
  EQFFDEFS A1 A2 x1 x2 (val-#‚áõ‚Üí {w} {a} {b} {#FFDEFS A1 x1} tt comp x) x‚ÇÅ eqtA exta eqx
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTUNIV i‚ÇÅ p x x‚ÇÅ) =
  EQTUNIV i‚ÇÅ p (val-#‚áõ‚Üí {w} {a} {b} {#UNIV i‚ÇÅ} tt comp x) x‚ÇÅ
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) =
  EQTLIFT A1 A2 (val-#‚áõ‚Üí {w} {a} {b} {#LIFT A1} tt comp x) x‚ÇÅ eqtA exta
equalTypes-#‚áõ-left {i} {w} {a} {b} {c} comp (EQTBAR x) =
  EQTBAR (Mod.‚àÄùïé-‚ñ°Func M (Œª w' e ‚Üí equalTypes-#‚áõ-left (‚àÄùïé-mon e comp)) x)



equalTypes-#‚áõ-left-right-rev : {i : ‚Ñï} {w : ùïé¬∑} {a b c d : CTerm}
                                ‚Üí b #‚áõ a at w
                                ‚Üí c #‚áõ d at w
                                ‚Üí equalTypes i w a d
                                ‚Üí equalTypes i w b c
equalTypes-#‚áõ-left-right-rev {i} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ eqt =
  equalTypes-#‚áõ-left-rev c‚ÇÅ (TEQsym-equalTypes i w _ _ (equalTypes-#‚áõ-left-rev c‚ÇÇ (TEQsym-equalTypes i w _ _ eqt)))



equalTypes-#‚áõ-left-right : {i : ‚Ñï} {w : ùïé¬∑} {a b c d : CTerm}
                                ‚Üí a #‚áõ! b at w
                                ‚Üí d #‚áõ! c at w
                                ‚Üí equalTypes i w a d
                                ‚Üí equalTypes i w b c
equalTypes-#‚áõ-left-right {i} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ eqt =
  equalTypes-#‚áõ-left c‚ÇÅ (TEQsym-equalTypes i w _ _ (equalTypes-#‚áõ-left c‚ÇÇ (TEQsym-equalTypes i w _ _ eqt)))



TSQUASH-eq-#‚áõ : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                 ‚Üí a #‚áõ! b at w
                 ‚Üí c #‚áõ! d at w
                 ‚Üí TSQUASH-eq eqa w a c
                 ‚Üí TSQUASH-eq eqa w b d
TSQUASH-eq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TSQUASH-eq-base a1 a2 i1 i2 c1 c2 ea) =
  TSQUASH-eq-base
    a1 a2 i1 i2
    (#‚áõ!-pres-‚àºC! {w} {a} {b} {a1} c‚ÇÅ c1)
    (#‚áõ!-pres-‚àºC! {w} {c} {d} {a2} c‚ÇÇ c2)
    ea
TSQUASH-eq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TSQUASH-eq-trans t h1 h2) =
  TSQUASH-eq-trans
    t
    (TSQUASH-eq-#‚áõ c‚ÇÅ (#‚áõ!-refl {w} {t}) h1)
    (TSQUASH-eq-#‚áõ (#‚áõ!-refl {w} {t}) c‚ÇÇ h2)



TSQUASH-eq-#‚áõ-rev : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TSQUASH-eq eqa w b d
                     ‚Üí TSQUASH-eq eqa w a c
TSQUASH-eq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TSQUASH-eq-base a1 a2 i1 i2 c1 c2 ea) =
  TSQUASH-eq-base
    a1 a2 i1 i2
    (#‚áõ!-pres-‚àºC!-rev {w} {a} {b} {a1} c‚ÇÅ c1)
    (#‚áõ!-pres-‚àºC!-rev {w} {c} {d} {a2} c‚ÇÇ c2)
    ea
TSQUASH-eq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TSQUASH-eq-trans t h1 h2) =
  TSQUASH-eq-trans
    t
    (TSQUASH-eq-#‚áõ-rev c‚ÇÅ (#‚áõ!-refl {w} {t}) h1)
    (TSQUASH-eq-#‚áõ-rev (#‚áõ!-refl {w} {t}) c‚ÇÇ h2)


TSQUASHeq-#‚áõ : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TSQUASHeq eqa w a c
                     ‚Üí TSQUASHeq eqa w b d
TSQUASHeq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ h = TSQUASH-eq‚Üí (TSQUASH-eq-#‚áõ c‚ÇÅ c‚ÇÇ (‚ÜíTSQUASH-eq h))


TSQUASHeq-#‚áõ-rev : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TSQUASHeq eqa w b d
                     ‚Üí TSQUASHeq eqa w a c
TSQUASHeq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ h = TSQUASH-eq‚Üí (TSQUASH-eq-#‚áõ-rev c‚ÇÅ c‚ÇÇ (‚ÜíTSQUASH-eq h))


----


TTRUNC-eq-#‚áõ : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                 ‚Üí a #‚áõ! b at w
                 ‚Üí c #‚áõ! d at w
                 ‚Üí TTRUNC-eq eqa w a c
                 ‚Üí TTRUNC-eq eqa w b d
TTRUNC-eq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TTRUNC-eq-base a1 a2 i1 i2 c1 c2 ea) =
  TTRUNC-eq-base
    a1 a2 i1 i2
    (val-‚áì‚Üí i1 (lower (c‚ÇÅ w (‚äë-refl¬∑ _))) c1) --(#‚áõ!-pres-‚àºC! {w} {a} {b} {a1} c‚ÇÅ c1)
    (val-‚áì‚Üí i2 (lower (c‚ÇÇ w (‚äë-refl¬∑ _))) c2) --(#‚áõ!-pres-‚àºC! {w} {c} {d} {a2} c‚ÇÇ c2)
    ea
TTRUNC-eq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TTRUNC-eq-trans t h1 h2) =
  TTRUNC-eq-trans
    t
    (TTRUNC-eq-#‚áõ c‚ÇÅ (#‚áõ!-refl {w} {t}) h1)
    (TTRUNC-eq-#‚áõ (#‚áõ!-refl {w} {t}) c‚ÇÇ h2)



TTRUNC-eq-#‚áõ-rev : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TTRUNC-eq eqa w b d
                     ‚Üí TTRUNC-eq eqa w a c
TTRUNC-eq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TTRUNC-eq-base a1 a2 i1 i2 c1 c2 ea) =
  TTRUNC-eq-base
    a1 a2 i1 i2
    (‚áì-trans‚ÇÅ (lower (c‚ÇÅ w (‚äë-refl¬∑ _))) c1) --(#‚áõ!-pres-‚àºC!-rev {w} {a} {b} {a1} c‚ÇÅ c1)
    (‚áì-trans‚ÇÅ (lower (c‚ÇÇ w (‚äë-refl¬∑ _))) c2) --(#‚áõ!-pres-‚àºC!-rev {w} {c} {d} {a2} c‚ÇÇ c2)
    ea
TTRUNC-eq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (TTRUNC-eq-trans t h1 h2) =
  TTRUNC-eq-trans
    t
    (TTRUNC-eq-#‚áõ-rev c‚ÇÅ (#‚áõ!-refl {w} {t}) h1)
    (TTRUNC-eq-#‚áõ-rev (#‚áõ!-refl {w} {t}) c‚ÇÇ h2)


TTRUNCeq-#‚áõ : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TTRUNCeq eqa w a c
                     ‚Üí TTRUNCeq eqa w b d
TTRUNCeq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ h = TTRUNC-eq‚Üí (TTRUNC-eq-#‚áõ c‚ÇÅ c‚ÇÇ (‚ÜíTTRUNC-eq h))


TTRUNCeq-#‚áõ-rev : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TTRUNCeq eqa w b d
                     ‚Üí TTRUNCeq eqa w a c
TTRUNCeq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ h = TTRUNC-eq‚Üí (TTRUNC-eq-#‚áõ-rev c‚ÇÅ c‚ÇÇ (‚ÜíTTRUNC-eq h))


-------------------


TUNION-eq-#‚áõ : {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per} {w : ùïé¬∑} {a b c d : CTerm}
                ‚Üí (cb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b c : CTerm} ‚Üí b #‚áõ! a at w ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b c ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a c)
                ‚Üí (sb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b : CTerm} ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a b ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b a)
                ‚Üí a #‚áõ! b at w
                ‚Üí c #‚áõ! d at w
                ‚Üí TUNION-eq eqa eqb a c
                ‚Üí TUNION-eq eqa eqb b d
TUNION-eq-#‚áõ {eqa} {eqb} {w} {a} {b} {c} {d} cb sb c‚ÇÅ c‚ÇÇ (TUNION-eq-base a1 a2 ea eb) =
  TUNION-eq-base a1 a2 ea (cb c‚ÇÅ (sb (cb c‚ÇÇ (sb eb))))
TUNION-eq-#‚áõ {eqa} {eqb} {w} {a} {b} {c} {d} cb sb c‚ÇÅ c‚ÇÇ (TUNION-eq-trans t h1 h2) =
  TUNION-eq-trans
    t
    (TUNION-eq-#‚áõ cb sb c‚ÇÅ (#‚áõ!-refl {w} {t}) h1)
    (TUNION-eq-#‚áõ cb sb (#‚áõ!-refl {w} {t}) c‚ÇÇ h2)



TUNION-eq-#‚áõ-rev : {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per} {w : ùïé¬∑} {a b c d : CTerm}
                    ‚Üí (cb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b c : CTerm} ‚Üí a #‚áõ! b at w ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b c ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a c)
                    ‚Üí (sb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b : CTerm} ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a b ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b a)
                    ‚Üí a #‚áõ! b at w
                    ‚Üí c #‚áõ! d at w
                    ‚Üí TUNION-eq eqa eqb b d
                    ‚Üí TUNION-eq eqa eqb a c
TUNION-eq-#‚áõ-rev {eqa} {eqb} {w} {a} {b} {c} {d} cb sb c‚ÇÅ c‚ÇÇ (TUNION-eq-base a1 a2 ea eb) =
  TUNION-eq-base a1 a2 ea (cb c‚ÇÅ (sb (cb c‚ÇÇ (sb eb))))
TUNION-eq-#‚áõ-rev {eqa} {eqb} {w} {a} {b} {c} {d} cb sb c‚ÇÅ c‚ÇÇ (TUNION-eq-trans t h1 h2) =
  TUNION-eq-trans
    t
    (TUNION-eq-#‚áõ-rev cb sb c‚ÇÅ (#‚áõ!-refl {w} {t}) h1)
    (TUNION-eq-#‚áõ-rev cb sb (#‚áõ!-refl {w} {t}) c‚ÇÇ h2)


TUNIONeq-#‚áõ : {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per} {w : ùïé¬∑} {a b c d : CTerm}
               ‚Üí (cb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b c : CTerm} ‚Üí b #‚áõ! a at w ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b c ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a c)
               ‚Üí (sb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b : CTerm} ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a b ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b a)
               ‚Üí a #‚áõ! b at w
               ‚Üí c #‚áõ! d at w
               ‚Üí TUNIONeq eqa eqb a c
               ‚Üí TUNIONeq eqa eqb b d
TUNIONeq-#‚áõ {eqa} {eqb} {w} {a} {b} {c} {d} cb sb c‚ÇÅ c‚ÇÇ h = TUNION-eq‚Üí (TUNION-eq-#‚áõ cb sb c‚ÇÅ c‚ÇÇ (‚ÜíTUNION-eq h))


TUNIONeq-#‚áõ-rev : {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per} {w : ùïé¬∑} {a b c d : CTerm}
                   ‚Üí (cb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b c : CTerm} ‚Üí a #‚áõ! b at w ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b c ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a c)
                   ‚Üí (sb : {a‚ÇÅ a‚ÇÇ : CTerm} {ea : eqa a‚ÇÅ a‚ÇÇ} {a b : CTerm} ‚Üí eqb a‚ÇÅ a‚ÇÇ ea a b ‚Üí eqb a‚ÇÅ a‚ÇÇ ea b a)
                   ‚Üí a #‚áõ! b at w
                   ‚Üí c #‚áõ! d at w
                   ‚Üí TUNIONeq eqa eqb b d
                   ‚Üí TUNIONeq eqa eqb a c
TUNIONeq-#‚áõ-rev {eqa} {eqb} {w} {a} {b} {c} {d} cb sb c‚ÇÅ c‚ÇÇ h = TUNION-eq‚Üí (TUNION-eq-#‚áõ-rev cb sb c‚ÇÅ c‚ÇÇ (‚ÜíTUNION-eq h))



equalInType-trans : {u : ‚Ñï} {w : ùïé¬∑} {T a b c : CTerm}
                    ‚Üí equalInType u w T a b
                    ‚Üí equalInType u w T b c
                    ‚Üí equalInType u w T a c
equalInType-trans {u} {w} {T} {a} {b} {c} eqi eqj = EQTtrans-equalInType u w T a b c eqi eqj



{--
TCONSTeq-#‚áõ : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TCONSTeq eqa w a c
                     ‚Üí TCONSTeq eqa w b d
TCONSTeq-#‚áõ {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (h , d‚ÇÅ , d‚ÇÇ) = {!!} , {!!} , {!!}


TCONSTeq-#‚áõ-rev : {eqa : per} {w : ùïé¬∑} {a b c d : CTerm}
                     ‚Üí a #‚áõ! b at w
                     ‚Üí c #‚áõ! d at w
                     ‚Üí TCONSTeq eqa w b d
                     ‚Üí TCONSTeq eqa w a c
TCONSTeq-#‚áõ-rev {eqa} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ h = {!!}
--}



{--#strongMonEq-#‚áõ-left-rev : {w : ùïé¬∑} {a b c : CTerm}
                            ‚Üí a #‚áõ! b at w
                            ‚Üí #strongMonEq w b c
                            ‚Üí #strongMonEq w a c
#strongMonEq-#‚áõ-left-rev {w} {a} {b} {c} comp (n , c‚ÇÅ , c‚ÇÇ) =
  n , ? , ? --#‚áõ!-trans {w} {a} {b} {#NUM n} comp c‚ÇÅ , c‚ÇÇ --‚áõ-trans comp c‚ÇÅ , c‚ÇÇ
--}



_#‚áõ!!_at_ : (T T' : CTerm) (w : ùïé¬∑) ‚Üí Set(lsuc(L))
T #‚áõ!! T' at w = ‚åú T ‚åù ‚áõ! ‚åú T' ‚åù at w √ó names ‚åú T ‚åù ‚â° names ‚åú T' ‚åù
infix 30 _#‚áõ!!_at_


#‚áõ!!-mon : {w1 w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) ‚Üí {a b : CTerm} ‚Üí a #‚áõ!! b at w1 ‚Üí a #‚áõ!! b at w2
#‚áõ!!-mon {w1} {w2} e {a} {b} (comp , en) = ‚àÄùïé-mon e comp , en


#‚áõ!!-#‚áõ : {w : ùïé¬∑} {a b : CTerm} ‚Üí a #‚áõ!! b at w ‚Üí a #‚áõ b at w
#‚áõ!!-#‚áõ {w} {a} {b} (comp , en) = #‚áõ!-#‚áõ {w} {a} {b} comp


#‚áõ!!-#‚áõ! : {w : ùïé¬∑} {a b : CTerm} ‚Üí a #‚áõ!! b at w ‚Üí a #‚áõ! b at w
#‚áõ!!-#‚áõ! {w} {a} {b} (comp , en) = comp



equalTerms-#‚áõ-left-rev-at : ‚Ñï ‚Üí Set(lsuc(L))
equalTerms-#‚áõ-left-rev-at i =
  {w : ùïé¬∑} {A B a b c : CTerm}
  ‚Üí a #‚áõ!! b at w
  ‚Üí (eqt : equalTypes i w A B)
  ‚Üí equalTerms i w eqt b c
  ‚Üí equalTerms i w eqt a c


-- TODO: fix later
{--
equalTerms-#‚áõ-left-rev-aux : {i : ‚Ñï}
                              ‚Üí (ind : (j : ‚Ñï) ‚Üí j < i ‚Üí equalTerms-#‚áõ-left-rev-at j)
                              ‚Üí equalTerms-#‚áõ-left-rev-at i
{-# TERMINATING #-}
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTNAT x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #strongMonEq-#‚áõ-left-rev {w1} {a} {b} {c} (#‚áõ!!-#‚áõ {w1} {a} {b} (#‚áõ!!-mon e1 comp)) h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQNAT x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #weakMonEq-#‚áõ-left-rev {w1} {a} {b} {c} (#‚áõ!!-#‚áõ! {w1} {a} {b} (#‚áõ!!-mon e1 comp)) h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTNAT x x‚ÇÅ) eqi = ?
--  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #weakMonEq-#‚áõ-left-rev {w1} {a} {b} {c} (#‚áõ!!-#‚áõ! {w1} {a} {b} (#‚áõ!!-mon e1 comp)) h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTFREE x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #‚áõto-same-CS-#‚áõ-left-rev {w1} {a} {b} {c} (#‚áõ!!-#‚áõ {w1} {a} {b} (#‚áõ!!-mon e1 comp)) h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PIeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c
                        ‚Üí PIeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c)
    aw w' e h a‚ÇÅ a‚ÇÇ ea = equalTerms-#‚áõ-left-rev-aux ind (‚Üí-#‚áõ!!-#APPLY {w'} {a} {b} a‚ÇÅ (#‚áõ!!-mon e comp)) (eqtb w' e a‚ÇÅ a‚ÇÇ ea) (h a‚ÇÅ a‚ÇÇ ea)
-- need ‚Üí-#‚áõ!-#APPLY
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' b c
                        ‚Üí SUMeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' a c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , ‚áõ-trans (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) c‚ÇÅ , c‚ÇÇ , eb
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c
                        ‚Üí SETeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c)
    aw w' e (y , ea , eb) =
      y ,
      equalTerms-#‚áõ-left-rev-aux ind (‚àÄùïé-mon e comp) (eqta w' e) ea ,
      eqInType-extr1 (sub0 c B2) (sub0 a B1) (eqtb w' e b c ea) (eqtb w' e a c (equalTerms-#‚áõ-left-rev-aux ind (‚àÄùïé-mon e comp) (eqta w' e) ea)) eb
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TUNIONeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c
                        ‚Üí TUNIONeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c)
    aw w' e h =
      TUNIONeq-#‚áõ-rev
        (Œª {a‚ÇÅ} {a‚ÇÇ} {ea} {x} {y} {z} cw j ‚Üí equalTerms-#‚áõ-left-rev-aux ind cw (eqtb w' e a‚ÇÅ a‚ÇÇ ea) j)
        (Œª {a‚ÇÅ} {a‚ÇÇ} {ea} {x} {y} j ‚Üí eqInType-sym (eqtb w' e a‚ÇÅ a‚ÇÇ ea) j)
        (‚àÄùïé-mon e comp)
        (#‚áõ!-refl {w'} {c})
        h
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a1 a2 (equalTerms i w' (eqtA w' e')) w' b c
                        ‚Üí EQeq a1 a2 (equalTerms i w' (eqtA w' e')) w' a c)
    aw w' e ea = ea
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' b c
                       ‚Üí UNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' a c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (‚áõ-trans (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) c‚ÇÅ , c‚ÇÇ , ea)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (‚áõ-trans (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) c‚ÇÅ , c‚ÇÇ , ea)
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí QTUNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' b c
                       ‚Üí QTUNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' a c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (‚áì-trans‚ÇÅ (lower (comp w' e)) c‚ÇÅ , c‚ÇÇ , ea) --(‚áõ-trans (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) c‚ÇÅ , c‚ÇÇ , ea)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (‚áì-trans‚ÇÅ (lower (comp w' e)) c‚ÇÅ , c‚ÇÇ , ea) --(‚áõ-trans (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) c‚ÇÅ , c‚ÇÇ , ea)
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' b c
                       ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' a c)
    aw w' e h = TSQUASHeq-#‚áõ-rev (‚àÄùïé-mon e comp) (#‚áõ!-refl {w'} {c}) h
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' b c
                       ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' a c)
    aw w' e h = TTRUNCeq-#‚áõ-rev (‚àÄùïé-mon e comp) (#‚áõ!-refl {w'} {c}) h
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' b c
                        ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' a c)
    aw w' e (h , c‚ÇÅ , c‚ÇÇ) =
      equalTerms-#‚áõ-left-rev-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) h ,
      #‚áõ!-pres-#‚áì‚Üí#‚áì!-rev {w'} {b} {a} (‚àÄùïé-mon e comp) c‚ÇÅ ,
      c‚ÇÇ
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) b c
                        ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) a c)
    aw w' e (h , q) =
      equalTerms-#‚áõ-left-rev-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) (eqInType-sym (eqtA w' e) (equalTerms-#‚áõ-left-rev-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) h)) ,
      q
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTPURE x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PUREeq b c
                        ‚Üí PUREeq a c)
    aw w' e (lift (x‚ÇÅ , x‚ÇÇ)) = lift ({!!} , x‚ÇÇ)
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí FFDEFSeq x1 (equalTerms i w' (eqtA w' e')) w' b c
                        ‚Üí FFDEFSeq x1 (equalTerms i w' (eqtA w' e')) w' a c)
    aw w' e (y , ea , nd) = y , ea , nd
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTUNIV i‚ÇÅ p x x‚ÇÅ) eqi =
  ‚ñ°¬∑EqTypes‚ÜíuniUpTo {i‚ÇÅ} {i} {p} (Mod.‚àÄùïé-‚ñ°Func M aw (uniUpTo‚Üí‚ñ°¬∑EqTypes {i‚ÇÅ} {i} {p} eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí equalTypes i‚ÇÅ w' b c ‚Üí equalTypes i‚ÇÅ w' a c)
    aw w' e h = equalTypes-#‚áõ-left-rev (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) h
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) eqi rewrite ‚ÜìU-uni i =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w' e h ‚Üí equalTerms-#‚áõ-left-rev-aux (Œª j k ‚Üí ind j (‚â§-trans k (‚ÜìùïÉ‚â§ i))) (‚àÄùïé-mon e comp) (eqtA w' e) h) eqi
equalTerms-#‚áõ-left-rev-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTBAR x) eqi =
  ‚ñ°'-change W M x x aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (x‚ÇÅ x‚ÇÇ : equalTypes i w' A B) ‚Üí equalTerms i w' x‚ÇÅ b c ‚Üí equalTerms i w' x‚ÇÇ a c)
    aw w' e x‚ÇÅ x‚ÇÇ h = equalTerms-#‚áõ-left-rev-aux ind (‚àÄùïé-mon e comp) x‚ÇÇ (eqInType-extl1 B B x‚ÇÅ x‚ÇÇ h)


equalTerms-#‚áõ-left-rev : (i : ‚Ñï) ‚Üí equalTerms-#‚áõ-left-rev-at i
equalTerms-#‚áõ-left-rev i = <‚Ñïind equalTerms-#‚áõ-left-rev-at (Œª n ind ‚Üí equalTerms-#‚áõ-left-rev-aux ind) i


equalInType-#‚áõ-left-rev : {i : ‚Ñï} {w : ùïé¬∑} {T a b c : CTerm}
                           ‚Üí a #‚áõ! b at w
                           ‚Üí equalInType i w T b c
                           ‚Üí equalInType i w T a c
equalInType-#‚áõ-left-rev {i} {w} {T} {a} {b} {c} comp (eqt , eqi) = eqt , equalTerms-#‚áõ-left-rev i comp eqt eqi
--}



#‚áõ!-pres-#¬¨Names : {w : ùïé¬∑} {a b : CTerm}
                    ‚Üí a #‚áõ! b at w
                    ‚Üí #¬¨Names a
                    ‚Üí #¬¨Names b
#‚áõ!-pres-#¬¨Names {w} {a} {b} comp nn =
  snd (snd (¬¨Names‚Üísteps (fst (lower (comp w (‚äë-refl¬∑ w)))) w w w ‚åú a ‚åù ‚åú b ‚åù nn (snd (lower (comp w (‚äë-refl¬∑ w))))))



#‚áõ!-pres-TNATeq : {w : ùïé¬∑} {a b c : CTerm}
                   ‚Üí a #‚áõ! b at w
                   ‚Üí TNATeq w a c
                   ‚Üí TNATeq w b c
#‚áõ!-pres-TNATeq {w} {a} {b} {c} comp h w1 e1 =
  lift (fst q ,
        fst (snd q) ,
        val-‚áì-from-to‚Üí {w1} {w1} {fst (snd q)} {‚åú a ‚åù} {‚åú b ‚åù} {NUM (fst q)} tt (lower (comp w1 e1)) (fst (snd (snd q))) ,
        snd (snd (snd q)))
  where
    q : ‚áì‚àº‚Ñï w1 ‚åú a ‚åù ‚åú c ‚åù
    q = lower (h w1 e1)



#‚áõ!-pres-Weq-L : {w : ùïé¬∑} {a b c : CTerm}
                  {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per}
                  ‚Üí a #‚áõ! b at w
                  ‚Üí Weq eqa eqb w a c
                  ‚Üí Weq eqa eqb w b c
#‚áõ!-pres-Weq-L {w} {a} {b} {c} {eqa} {eqb} comp (weqC a1 f1 a2 f2 e x x‚ÇÅ x‚ÇÇ) =
  weqC a1 f1 a2 f2 e (val-‚áì‚Üí tt (lower (comp w (‚äë-refl¬∑ w))) x) x‚ÇÅ x‚ÇÇ



#‚áõ!-pres-Meq-L : {w : ùïé¬∑} {a b c : CTerm}
                  {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per}
                  ‚Üí a #‚áõ! b at w
                  ‚Üí meq eqa eqb w a c
                  ‚Üí meq eqa eqb w b c
meq.meqC (#‚áõ!-pres-Meq-L {w} {a} {b} {c} {eqa} {eqb} comp h) with meq.meqC h
... | (a1 , f1 , a2 , f2 , e , x , x‚ÇÅ , x‚ÇÇ) =
  a1 , f1 , a2 , f2 , e , val-‚áì‚Üí tt (lower (comp w (‚äë-refl¬∑ w))) x ,  x‚ÇÅ , x‚ÇÇ


equalTerms-#‚áõ-left-at : ‚Ñï ‚Üí Set(lsuc(L))
equalTerms-#‚áõ-left-at i =
  {w : ùïé¬∑} {A B a b c : CTerm}
  ‚Üí a #‚áõ! b at w
  ‚Üí (eqt : equalTypes i w A B)
  ‚Üí equalTerms i w eqt a c
  ‚Üí equalTerms i w eqt b c




equalTerms-#‚áõ-left-aux : {i : ‚Ñï}
                          ‚Üí (ind : (j : ‚Ñï) ‚Üí j < i ‚Üí equalTerms-#‚áõ-left-at j)
                          ‚Üí equalTerms-#‚áõ-left-at i
{-# TERMINATING #-}
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTNAT x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #strongMonEq-#‚áõ-left {--#‚áõ!same‚Ñï-#‚áõ-left--} {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQNAT x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #weakMonEq-#‚áõ-left {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTNAT x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #‚áõ!-pres-TNATeq {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h ) eqi
--  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #weakMonEq-#‚áõ-left {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTFREE x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #‚áõto-same-CS-#‚áõ-left {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PIeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c
                        ‚Üí PIeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c)
    aw w' e h a‚ÇÅ a‚ÇÇ ea = equalTerms-#‚áõ-left-aux ind (‚Üí-#‚áõ!-#APPLY {w'} {a} {b} a‚ÇÅ (‚àÄùïé-mon e comp)) (eqtb w' e a‚ÇÅ a‚ÇÇ ea) (h a‚ÇÅ a‚ÇÇ ea)
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' a c
                        ‚Üí SUMeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' b c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , val-#‚áõ‚Üí {w'} {a} {b} {#PAIR a‚ÇÅ b‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , eb
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Weq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' a c
                        ‚Üí Weq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' b c)
    aw w' e h = #‚áõ!-pres-Weq-L {w'} {a} {b} {c} (‚àÄùïé-mon e comp) h
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí meq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' a c
                        ‚Üí meq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' b c)
    aw w' e h = #‚áõ!-pres-Meq-L {w'} {a} {b} {c} (‚àÄùïé-mon e comp) h
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c
                        ‚Üí SETeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c)
    aw w' e (y , ea , eb) =
      y ,
      equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqta w' e) ea ,
      eqInType-extr1 (sub0 c B2) (sub0 b B1) (eqtb w' e a c ea) (eqtb w' e b c (equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqta w' e) ea)) eb
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí ISECTeq (equalTerms i w' (eqta w' e')) (equalTerms i w' (eqtb w' e')) a c
                        ‚Üí ISECTeq (equalTerms i w' (eqta w' e')) (equalTerms i w' (eqtb w' e')) b c)
    aw w' e (h1 , h2) = equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqta w' e) h1 , equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqtb w' e) h2
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TUNIONeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c
                        ‚Üí TUNIONeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c)
    aw w' e h =
      TUNIONeq-#‚áõ
        (Œª {a‚ÇÅ} {a‚ÇÇ} {ea} {x} {y} {z} cw j ‚Üí equalTerms-#‚áõ-left-aux ind cw (eqtb w' e a‚ÇÅ a‚ÇÇ ea) j)
        (Œª {a‚ÇÅ} {a‚ÇÇ} {ea} {x} {y} j ‚Üí eqInType-sym (eqtb w' e a‚ÇÅ a‚ÇÇ ea) j)
        (‚àÄùïé-mon e comp)
        (#‚áõ!-refl {w'} {c})
        h
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a1 a2 (equalTerms i w' (eqtA w' e')) w' a c
                        ‚Üí EQeq a1 a2 (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e ea = ea
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' a c
                       ‚Üí UNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' b c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (val-#‚áõ‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea) --(val-#‚áõ!‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (val-#‚áõ‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea) --(val-#‚áõ!‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí QTUNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' a c
                       ‚Üí QTUNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' b c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (val-‚áì‚Üí tt (lower (comp w' e)) c‚ÇÅ , c‚ÇÇ , ea) -- (val-#‚áõ‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea) --(val-#‚áõ!‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (val-‚áì‚Üí tt (lower (comp w' e)) c‚ÇÅ , c‚ÇÇ , ea) -- (val-#‚áõ‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea) --(val-#‚áõ!‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' a c
                       ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e h = TSQUASHeq-#‚áõ (‚àÄùïé-mon e comp) (#‚áõ!-refl {w'} {c}) h
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' a c
                       ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e h = TTRUNCeq-#‚áõ (‚àÄùïé-mon e comp) (#‚áõ!-refl {w'} {c}) h
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' a c
                       ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e (h , c‚ÇÅ , c‚ÇÇ) =
      equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) h ,
      #‚áõ!-pres-#‚áì‚Üí#‚áì! {w'} {a} {b} (‚àÄùïé-mon e comp) c‚ÇÅ ,
      c‚ÇÇ
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) a c
                       ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) b c)
    aw w' e (h , q) =
      equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) (eqInType-sym (eqtA w' e) (equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) h)) ,
      q
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTPURE x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PUREeq a c
                        ‚Üí PUREeq b c)
    aw w' e y = lift (#‚áõ!-pres-#¬¨Names {w} {a} {b} comp (fst (lower y)) , snd (lower y))
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí FFDEFSeq x1 (equalTerms i w' (eqtA w' e')) w' a c
                        ‚Üí FFDEFSeq x1 (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e y = y
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTUNIV i‚ÇÅ p x x‚ÇÅ) eqi =
  ‚ñ°¬∑EqTypes‚ÜíuniUpTo {i‚ÇÅ} {i} {p} (Mod.‚àÄùïé-‚ñ°Func M aw (uniUpTo‚Üí‚ñ°¬∑EqTypes {i‚ÇÅ} {i} {p} eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí equalTypes i‚ÇÅ w' a c ‚Üí equalTypes i‚ÇÅ w' b c)
    aw w' e h = equalTypes-#‚áõ-left (‚àÄùïé-mon e comp) h
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) eqi rewrite ‚ÜìU-uni i =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w' e h ‚Üí equalTerms-#‚áõ-left-aux (Œª j k ‚Üí ind j (‚â§-trans k (‚ÜìùïÉ‚â§ i))) (‚àÄùïé-mon e comp) (eqtA w' e) h) eqi
equalTerms-#‚áõ-left-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTBAR x) eqi =
  ‚ñ°'-change W M x x aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (x‚ÇÅ x‚ÇÇ : equalTypes i w' A B) ‚Üí equalTerms i w' x‚ÇÅ a c ‚Üí equalTerms i w' x‚ÇÇ b c)
    aw w' e x‚ÇÅ x‚ÇÇ h = equalTerms-#‚áõ-left-aux ind (‚àÄùïé-mon e comp) x‚ÇÇ (eqInType-extl1 B B x‚ÇÅ x‚ÇÇ h)


equalTerms-#‚áõ-left : (i : ‚Ñï) ‚Üí equalTerms-#‚áõ-left-at i
equalTerms-#‚áõ-left i = <‚Ñïind equalTerms-#‚áõ-left-at (Œª n ind ‚Üí equalTerms-#‚áõ-left-aux ind) i



equalInType-#‚áõ-left : {i : ‚Ñï} {w : ùïé¬∑} {T a b c : CTerm}
                       ‚Üí a #‚áõ! b at w
                       ‚Üí equalInType i w T a c
                       ‚Üí equalInType i w T b c
equalInType-#‚áõ-left {i} {w} {T} {a} {b} {c} comp (eqt , eqi) = eqt , equalTerms-#‚áõ-left i comp eqt eqi



equalInType-#‚áõ-LR : {i : ‚Ñï} {w : ùïé¬∑} {T a b c d : CTerm}
                       ‚Üí a #‚áõ! b at w
                       ‚Üí c #‚áõ! d at w
                       ‚Üí equalInType i w T a c
                       ‚Üí equalInType i w T b d
equalInType-#‚áõ-LR {i} {w} {T} {a} {b} {c} {d} comp1 comp2 eqi =
  equalInType-#‚áõ-left comp1 (equalInType-sym (equalInType-#‚áõ-left comp2 (equalInType-sym eqi)))



{--
equalInType-#‚áõ-LR-rev : {i : ‚Ñï} {w : ùïé¬∑} {T a b c d : CTerm}
                         ‚Üí a #‚áõ! b at w
                         ‚Üí c #‚áõ! d at w
                         ‚Üí equalInType i w T b d
                         ‚Üí equalInType i w T a c
equalInType-#‚áõ-LR-rev {i} {w} {T} {a} {b} {c} {d} comp1 comp2 eqi =
  equalInType-#‚áõ-left-rev comp1 (equalInType-sym (equalInType-#‚áõ-left-rev comp2 (equalInType-sym eqi)))
--}



equalTerms-#‚áõ-L-at : ‚Ñï ‚Üí Set(lsuc(L))
equalTerms-#‚áõ-L-at i =
  {w : ùïé¬∑} {A B a b c : CTerm}
  ‚Üí a #‚áõ b at w
  ‚Üí (eqt : equalTypes i w A B)
  ‚Üí equalTerms i w eqt a c
  ‚Üí equalTerms i w eqt b c



{--
#strongMonEq-#‚áõ-L : {w : ùïé¬∑} {a b c : CTerm}
                        ‚Üí a #‚áõ b at w
                        ‚Üí #strongMonEq w a c
                        ‚Üí #strongMonEq w b c
#strongMonEq-#‚áõ-L {w} {a} {b} {c} comp (n , c‚ÇÅ , c‚ÇÇ) =
  n , {!!} {--val-#‚áõ‚Üí {w} {a} {b} {#NUM n} tt comp c‚ÇÅ--} , c‚ÇÇ
--}


{--
equalTerms-#‚áõ-L-aux : {i : ‚Ñï}
                          ‚Üí (ind : (j : ‚Ñï) ‚Üí j < i ‚Üí equalTerms-#‚áõ-L-at j)
                          ‚Üí equalTerms-#‚áõ-L-at i
{-# TERMINATING #-}
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTNAT x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M {!!} eqi --Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #strongMonEq-#‚áõ-left {--#‚áõ!same‚Ñï-#‚áõ-left--} {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQNAT x x‚ÇÅ) eqi =
  {!!} --Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #weakMonEq-#‚áõ-left {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTNAT x x‚ÇÅ) eqi =
  {!!} --Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #‚áõ!-pres-TNATeq {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h ) eqi
--  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #weakMonEq-#‚áõ-left {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTFREE x x‚ÇÅ) eqi =
  {!!} --Mod.‚àÄùïé-‚ñ°Func M (Œª w1 e1 h ‚Üí #‚áõto-same-CS-#‚áõ-left {w1} {a} {b} {c} (‚àÄùïé-mon e1 comp) h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PIeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c
                        ‚Üí PIeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c)
    aw w' e h a‚ÇÅ a‚ÇÇ ea = equalTerms-#‚áõ-L-aux ind (‚Üí-#‚áõ-#APPLY {w'} {a} {b} a‚ÇÅ (‚àÄùïé-mon e comp)) (eqtb w' e a‚ÇÅ a‚ÇÇ ea) (h a‚ÇÅ a‚ÇÇ ea)
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' a c
                        ‚Üí SUMeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) w' b c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , {!!} {--val-#‚áõ‚Üí {w'} {a} {b} {#PAIR a‚ÇÅ b‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ--} , c‚ÇÇ , eb
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SETeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c
                        ‚Üí SETeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c)
    aw w' e (y , ea , eb) =
      y ,
      equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqta w' e) ea ,
      eqInType-extr1 (sub0 c B2) (sub0 b B1) (eqtb w' e a c ea) (eqtb w' e b c (equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqta w' e) ea)) eb
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí ISECTeq (equalTerms i w' (eqta w' e')) (equalTerms i w' (eqtb w' e')) a c
                        ‚Üí ISECTeq (equalTerms i w' (eqta w' e')) (equalTerms i w' (eqtb w' e')) b c)
    aw w' e (h1 , h2) = equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqta w' e) h1 , equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqtb w' e) h2
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TUNIONeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) a c
                        ‚Üí TUNIONeq (equalTerms i w' (eqta w' e')) (Œª a1 a2 eqa ‚Üí equalTerms i w' (eqtb w' e' a1 a2 eqa)) b c)
    aw w' e h = {!!} {--
      TUNIONeq-#‚áõ
        (Œª {a‚ÇÅ} {a‚ÇÇ} {ea} {x} {y} {z} cw j ‚Üí equalTerms-#‚áõ-L-aux ind cw (eqtb w' e a‚ÇÅ a‚ÇÇ ea) j)
        (Œª {a‚ÇÅ} {a‚ÇÇ} {ea} {x} {y} j ‚Üí eqInType-sym (eqtb w' e a‚ÇÅ a‚ÇÇ ea) j)
        (‚àÄùïé-mon e comp)
        (#‚áõ-refl {w'} {c})
        h--}
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq a1 a2 (equalTerms i w' (eqtA w' e')) w' a c
                        ‚Üí EQeq a1 a2 (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e ea = ea
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' a c
                       ‚Üí UNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' b c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , {!!} {--inj‚ÇÅ (val-#‚áõ‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea)--} --(val-#‚áõ!‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , {!!} {--inj‚ÇÇ (val-#‚áõ‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea)--} --(val-#‚áõ!‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí QTUNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' a c
                       ‚Üí QTUNIONeq (equalTerms i w' (eqtA w' e')) (equalTerms i w' (eqtB w' e')) w' b c)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , {!!} {--inj‚ÇÅ (val-‚áì‚Üí tt (lower (comp w' e)) c‚ÇÅ , c‚ÇÇ , ea)--} -- (val-#‚áõ‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea) --(val-#‚áõ!‚Üí {w'} {a} {b} {#INL a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
    aw w' e (a‚ÇÅ , a‚ÇÇ , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = a‚ÇÅ , a‚ÇÇ , {!!} {--inj‚ÇÇ (val-‚áì‚Üí tt (lower (comp w' e)) c‚ÇÅ , c‚ÇÇ , ea)--} -- (val-#‚áõ‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ , ea) --(val-#‚áõ!‚Üí {w'} {a} {b} {#INR a‚ÇÅ} tt (‚àÄùïé-mon e comp) ? {--c‚ÇÅ--} , c‚ÇÇ , ea)
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' a c
                       ‚Üí TSQUASHeq (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e h = {!!} --TSQUASHeq-#‚áõ (‚àÄùïé-mon e comp) (#‚áõ!-refl {w'} {c}) h
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' a c
                       ‚Üí TTRUNCeq (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e h = {!!} --TTRUNCeq-#‚áõ (‚àÄùïé-mon e comp) (#‚áõ!-refl {w'} {c}) h
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' a c
                       ‚Üí TCONSTeq (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e (h , c‚ÇÅ , c‚ÇÇ) =
      equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) h ,
      {!!} {--#‚áõ!-pres-#‚áì‚Üí#‚áì! {w'} {a} {b} (‚àÄùïé-mon e comp) c‚ÇÅ--} ,
      c‚ÇÇ
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) a c
                       ‚Üí SUBSINGeq (equalTerms i w' (eqtA w' e')) b c)
    aw w' e (h , q) =
      equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) (eqInType-sym (eqtA w' e) (equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) (eqtA w' e) h)) ,
      q
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTPURE x x‚ÇÅ) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PUREeq a c
                        ‚Üí PUREeq b c)
    aw w' e y = {!!} {--lift (#‚áõ!-pres-#¬¨Names {w} {a} {b} comp (fst (lower y)) , snd (lower y))--}
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí FFDEFSeq x1 (equalTerms i w' (eqtA w' e')) w' a c
                        ‚Üí FFDEFSeq x1 (equalTerms i w' (eqtA w' e')) w' b c)
    aw w' e y = y
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTUNIV i‚ÇÅ p x x‚ÇÅ) eqi =
  ‚ñ°¬∑EqTypes‚ÜíuniUpTo {i‚ÇÅ} {i} {p} (Mod.‚àÄùïé-‚ñ°Func M aw (uniUpTo‚Üí‚ñ°¬∑EqTypes {i‚ÇÅ} {i} {p} eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí equalTypes i‚ÇÅ w' a c ‚Üí equalTypes i‚ÇÅ w' b c)
    aw w' e h = {!!} --equalTypes-#‚áõ-left (\‚àÄùïé-mon e comp) h
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta) eqi rewrite ‚ÜìU-uni i =
  Mod.‚àÄùïé-‚ñ°Func M (Œª w' e h ‚Üí equalTerms-#‚áõ-L-aux (Œª j k ‚Üí ind j (‚â§-trans k (‚ÜìùïÉ‚â§ i))) (‚àÄùïé-mon e comp) (eqtA w' e) h) eqi
equalTerms-#‚áõ-L-aux {i} ind {w} {A} {B} {a} {b} {c} comp (EQTBAR x) eqi =
  ‚ñ°'-change W M x x aw eqi
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (x‚ÇÅ x‚ÇÇ : equalTypes i w' A B) ‚Üí equalTerms i w' x‚ÇÅ a c ‚Üí equalTerms i w' x‚ÇÇ b c)
    aw w' e x‚ÇÅ x‚ÇÇ h = equalTerms-#‚áõ-L-aux ind (‚àÄùïé-mon e comp) x‚ÇÇ (eqInType-extl1 B B x‚ÇÅ x‚ÇÇ h)
--}


equalInType-SET : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {B : CTerm0} {f g : CTerm}
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí isType u w' A)
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType u w' A a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes u w' (sub0 a‚ÇÅ B) (sub0 a‚ÇÇ B))
                  ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí equalInType u w' A f g)
                  ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí ‚ààType u w' (sub0 f B) t))
                  ‚Üí equalInType u w (#SET A B) f g
equalInType-SET {u} {w} {A} {B} {f} {g} ha hb eqi eqj =
  eqTypesSET‚Üê ha hb , (Mod.‚àÄùïé-‚ñ°Func M aw eqj)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (‚ààType u w' (sub0 f B))
                       ‚Üí SETeq (eqInType (uni u) w' (ha w' e'))
                                (Œª a1 a2 eqa ‚Üí eqInType (uni u) w' (equalInTypeFam‚ÜíeqTypesFam {u} {w} {A} {B} {A} {B} ha hb w' e' a1 a2 eqa)) f g)
    aw w1 e1 (t , h) =
      t ,
      equalInType‚ÜíeqInType refl {ha w1 e1} (eqi w1 e1) ,
      equalInType‚ÜíeqInType {u} {w1} {sub0 f B} {sub0 f B} {sub0 g B}
                            refl
                            {equalInTypeFam‚ÜíeqTypesFam {u} {w} {A} {B} {A} {B} ha hb w1 e1 f g (equalInType‚ÜíeqInType {u} {w1} {A} {A} {A} refl {ha w1 e1} (eqi w1 e1))}
                            h


‚ñ°¬∑-inhabited‚ÜíisType : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm}
                          ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType u w' A t t))
                          ‚Üí isType u w A
‚ñ°¬∑-inhabited‚ÜíisType {u} {w} {A} i =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M aw i)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType u w' A t t) ‚Üí eqTypes (uni u) w' A A)
    aw w1 e1 (t , eqi) = fst eqi


‚ÜíequalInType-TRUE : (n : ‚Ñï) {w : ùïé¬∑} {a b : CTerm}
                     ‚Üí equalInType n w #TRUE a b
‚ÜíequalInType-TRUE n {w} {a} {b} = equalInType-EQ eqTypesNAT (Mod.‚àÄùïé-‚ñ° M aw)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq (#NUM 0) (#NUM 0) (equalInType n w' #NAT) w' a b)
    aw w1 e1 = NUM-equalInType-NAT n w1 0



‚ÜíequalInType-SQUASH : {n : ‚Ñï} {w : ùïé¬∑} {A a b : CTerm}
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t))
                       ‚Üí equalInType n w (#SQUASH A) a b
‚ÜíequalInType-SQUASH {n} {w} {A} {a} {b} eqi rewrite #SQUASH‚â°#SET A =
  equalInType-SET (Œª w1 _ ‚Üí eqTypesTRUE) p1 p2 p3
  where
    p1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #TRUE a‚ÇÅ a‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 a‚ÇÅ ‚åû A ‚åü) (sub0 a‚ÇÇ ‚åû A ‚åü))
    p1 w1 e1 a‚ÇÅ a‚ÇÇ ea = ‚â°CTerm‚ÜíeqTypes (sym (sub0‚åû‚åü a‚ÇÅ A)) (sym (sub0‚åû‚åü a‚ÇÇ A)) (eqTypes-mon (uni n) (‚ñ°¬∑-inhabited‚ÜíisType eqi) w1 e1)

    p2 : ‚àÄùïé w (Œª w' _ ‚Üí equalInType n w' #TRUE a b)
    p2 w1 e1 = ‚ÜíequalInType-TRUE n -- (Mod.‚Üë‚ñ° M c‚ÇÅ e1) (Mod.‚Üë‚ñ° M c‚ÇÇ e1)

    p3 : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (‚ààType n w' (sub0 a ‚åû A ‚åü)))
    p3 = Mod.‚àÄùïé-‚ñ°Func M aw eqi
      where
        aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' A t t) ‚Üí Œ£ CTerm (‚ààType n w' (sub0 a ‚åû A ‚åü)))
        aw w1 e1 (t , eqj) = t , ‚â°CTerm‚ÜíequalInType (sym (sub0‚åû‚åü a A)) eqj


APPLY-lamAX-‚áõ : (w : ùïé¬∑) (a : CTerm) ‚Üí #APPLY #lamAX a #‚áõ #AX at w
APPLY-lamAX-‚áõ w a w1 e1 = lift (1 , refl)


‚ñ°¬∑-APPLY-lamAX : {w : ùïé¬∑} (a : CTerm) ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #APPLY #lamAX a #‚áõ #AX at w')
‚ñ°¬∑-APPLY-lamAX {w} a = Mod.‚àÄùïé-‚ñ° M (Œª w1 _ ‚Üí APPLY-lamAX-‚áõ w1 a)



‚ÜíequalInType-ISECT : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí isType n w A
                       ‚Üí isType n w B
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí ISECTeq (equalInType n w' A) (equalInType n w' B) a b)
                       ‚Üí equalInType n w (#ISECT A B) a b
‚ÜíequalInType-ISECT {n} {w} {A} {B} {a} {b} isa isb i = eqTypesISECT‚Üê isa isb , Mod.‚àÄùïé-‚ñ°Func M aw i
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí ISECTeq (equalInType n w' A) (equalInType n w' B) a b
                       ‚Üí ISECTeq (eqInType (uni n) w' (eqTypes-mon (uni n) isa w' e')) (eqInType (uni n) w' (eqTypes-mon (uni n) isb w' e')) a b)
    aw w1 e1 (ea , eb) =
      (equalInType‚ÜíeqInType refl {eqTypes-mon (uni n) isa w1 e1} ea) ,
      (equalInType‚ÜíeqInType refl {eqTypes-mon (uni n) isb w1 e1} eb)


‚ÜíequalInType-UNION : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí isType n w A
                       ‚Üí isType n w B
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                          ‚Üí (a #‚áõ (#INL x) at w' √ó b #‚áõ (#INL y) at w' √ó equalInType n w' A x y)
                                             ‚äé
                                             (a #‚áõ (#INR x) at w' √ó b #‚áõ (#INR y) at w' √ó equalInType n w' B x y))))
                       ‚Üí equalInType n w (#UNION A B) a b
‚ÜíequalInType-UNION {n} {w} {A} {B} {a} {b} isa isb i = eqTypesUNION‚Üê isa isb , Mod.‚àÄùïé-‚ñ°Func M aw i
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                            a #‚áõ #INL x at w' √ó b #‚áõ #INL y at w' √ó equalInType n w' A x y
                            ‚äé a #‚áõ #INR x at w' √ó b #‚áõ #INR y at w' √ó equalInType n w' B x y))
                       ‚Üí UNIONeq (eqInType (uni n) w' (eqTypes-mon (uni n) isa w' e')) (eqInType (uni n) w' (eqTypes-mon (uni n) isb w' e')) w' a b)
    aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , equalInType‚ÜíeqInType refl {eqTypes-mon (uni n) isa w1 e1} ea)
    aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , equalInType‚ÜíeqInType refl {eqTypes-mon (uni n) isb w1 e1} ea)




‚ÜíequalInType-QTUNION : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí isType n w A
                       ‚Üí isType n w B
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                                          ‚Üí (a #‚áì (#INL x) at w' √ó b #‚áì (#INL y) at w' √ó equalInType n w' A x y)
                                             ‚äé
                                             (a #‚áì (#INR x) at w' √ó b #‚áì (#INR y) at w' √ó equalInType n w' B x y))))
                       ‚Üí equalInType n w (#QTUNION A B) a b
‚ÜíequalInType-QTUNION {n} {w} {A} {B} {a} {b} isa isb i = eqTypesQTUNION‚Üê isa isb , Mod.‚àÄùïé-‚ñ°Func M aw i
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                            a #‚áì #INL x at w' √ó b #‚áì #INL y at w' √ó equalInType n w' A x y
                            ‚äé a #‚áì #INR x at w' √ó b #‚áì #INR y at w' √ó equalInType n w' B x y))
                       ‚Üí QTUNIONeq (eqInType (uni n) w' (eqTypes-mon (uni n) isa w' e')) (eqInType (uni n) w' (eqTypes-mon (uni n) isb w' e')) w' a b)
    aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , ea)) = x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , equalInType‚ÜíeqInType refl {eqTypes-mon (uni n) isa w1 e1} ea)
    aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , ea)) = x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , equalInType‚ÜíeqInType refl {eqTypes-mon (uni n) isb w1 e1} ea)



equalInType-ISECT‚Üí‚ÇÅ : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#ISECT A B) a b
                       ‚Üí isType n w A
{-# TERMINATING #-}
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqNAT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (ISECTneqLT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (ISECTneqQLT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqFREE (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqPI (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqSUM (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqW (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqM (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqSET (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi)
  rewrite sym (#ISECTinj1 {A} {B} {A1} {B1} (#compAllVal x tt))
        | sym (#ISECTinj1 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))
  = eqtA w (‚äë-refl¬∑ _)
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (ISECTneqEQ (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (ISECTneqUNION (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (ISECTneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqPURE (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (ISECTneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType n w' (#ISECT A B)) ‚Üí equalTerms n w' z a b ‚Üí isType n w' A)
    aw w' e z y = equalInType-ISECT‚Üí‚ÇÅ (z , y)




equalInType-ISECT‚Üí‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#ISECT A B) a b
                       ‚Üí isType n w B
{-# TERMINATING #-}
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqNAT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (ISECTneqLT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (ISECTneqQLT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqFREE (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqPI (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqSUM (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqW (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqM (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqSET (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi)
  rewrite sym (#ISECTinj2 {A} {B} {A1} {B1} (#compAllVal x tt))
        | sym (#ISECTinj2 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))
  = eqtB w (‚äë-refl¬∑ _)
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (ISECTneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (ISECTneqEQ (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (ISECTneqUNION (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (ISECTneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqPURE (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (ISECTneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (ISECTneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (ISECTneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-ISECT‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType n w' (#ISECT A B)) ‚Üí equalTerms n w' z a b ‚Üí isType n w' B)
    aw w' e z y = equalInType-ISECT‚Üí‚ÇÇ {n} {w'} {A} {B} {a} {b} (z , y)




equalInType-UNION‚Üí‚ÇÅ : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#UNION A B) a b
                       ‚Üí isType n w A
{-# TERMINATING #-}
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqW (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqM (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (UNIONneqISECT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (UNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi)
  rewrite sym (#UNIONinj1 {A} {B} {A1} {B1} (#compAllVal x tt))
        | sym (#UNIONinj1 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))
  = eqtA w (‚äë-refl¬∑ _)
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (UNIONneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqPURE (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (UNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType n w' (#UNION A B)) ‚Üí equalTerms n w' z a b ‚Üí isType n w' A)
    aw w' e z y = equalInType-UNION‚Üí‚ÇÅ (z , y)




equalInType-UNION‚Üí‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#UNION A B) a b
                       ‚Üí isType n w B
{-# TERMINATING #-}
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (UNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqW (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqM (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqISECT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (UNIONneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (UNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi)
  rewrite sym (#UNIONinj2 {A} {B} {A1} {B1} (#compAllVal x tt))
        | sym (#UNIONinj2 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))
  = eqtB w (‚äë-refl¬∑ _)
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (UNIONneqQTUNION (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqPURE (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (UNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (UNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (UNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-UNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType n w' (#UNION A B)) ‚Üí equalTerms n w' z a b ‚Üí isType n w' B)
    aw w' e z y = equalInType-UNION‚Üí‚ÇÇ {n} {w'} {A} {B} {a} {b} (z , y)






equalInType-QTUNION‚Üí‚ÇÅ : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#QTUNION A B) a b
                       ‚Üí isType n w A
{-# TERMINATING #-}
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (QTUNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (QTUNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqW (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqM (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqISECT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (QTUNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (QTUNIONneqUNION (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi)
  rewrite sym (#QTUNIONinj1 {A} {B} {A1} {B1} (#compAllVal x tt))
        | sym (#QTUNIONinj1 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))
  = eqtA w (‚äë-refl¬∑ _)
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqPURE (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (QTUNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÅ {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType n w' (#QTUNION A B)) ‚Üí equalTerms n w' z a b ‚Üí isType n w' A)
    aw w' e z y = equalInType-QTUNION‚Üí‚ÇÅ (z , y)




equalInType-QTUNION‚Üí‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                       ‚Üí equalInType n w (#QTUNION A B) a b
                       ‚Üí isType n w B
{-# TERMINATING #-}
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqQNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTNAT x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqTNAT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (QTUNIONneqLT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ , eqi) = ‚ä•-elim (QTUNIONneqQLT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTFREE x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqFREE (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqPI (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqSUM (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqW (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqM (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqSET (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqISECT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb , eqi) = ‚ä•-elim (QTUNIONneqTUNION (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2 , eqi) = ‚ä•-elim (QTUNIONneqEQ (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi) = ‚ä•-elim (QTUNIONneqUNION (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb , eqi)
  rewrite sym (#QTUNIONinj2 {A} {B} {A1} {B1} (#compAllVal x tt))
        | sym (#QTUNIONinj2 {A} {B} {A2} {B2} (#compAllVal x‚ÇÅ tt))
  = eqtB w (‚äë-refl¬∑ _)
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTSQUASH (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTTRUNC (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqTCONST (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqSUBSING (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTPURE x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqPURE (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx , eqi) = ‚ä•-elim (QTUNIONneqFFDEFS (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTUNIV i p x x‚ÇÅ , eqi) = ‚ä•-elim (QTUNIONneqUNIV (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta , eqi) = ‚ä•-elim (QTUNIONneqLIFT (compAllVal x‚ÇÅ tt))
equalInType-QTUNION‚Üí‚ÇÇ {n} {w} {A} {B} {a} {b} (EQTBAR x , eqi) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°'-‚ñ° M x aw eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí (z : isType n w' (#QTUNION A B)) ‚Üí equalTerms n w' z a b ‚Üí isType n w' B)
    aw w' e z y = equalInType-QTUNION‚Üí‚ÇÇ {n} {w'} {A} {B} {a} {b} (z , y)




equalInType-NEG-inh : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm}
                      ‚Üí isType u w A
                      ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType u w' A)
                      ‚Üí inhType u w (#NEG A)
equalInType-NEG-inh {u} {w} {A} h q = #lamAX , equalInType-NEG h aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType u w' A a‚ÇÅ a‚ÇÇ)
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = q w1 e1 (a‚ÇÅ , equalInType-refl ea)



equalInType-NEG‚Üí¬¨inh : {u : ‚Ñï} {w : ùïé¬∑} {A : CTerm} {f g : CTerm}
                        ‚Üí equalInType u w (#NEG A) f g
                        ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí ¬¨ inhType u w' A)
equalInType-NEG‚Üí¬¨inh {u} {w} {A} {f} {g} eqn w1 e1 (t , eqi) = equalInType-NEG‚Üí eqn w1 e1 t t eqi



inhType-mon : {w1 w2 : ùïé¬∑} (e : w1 ‚äë¬∑ w2) {u : ‚Ñï} {A : CTerm}
              ‚Üí inhType u w1 A
              ‚Üí inhType u w2 A
inhType-mon {w1} {w2} e {u} {A} (t , i) = t , equalInType-mon i w2 e



equalTypes-LIFT‚Üí : {n : ‚Ñï} {w : ùïé¬∑} {A B : CTerm}
                    ‚Üí equalTypes (suc n) w (#LIFT A) (#LIFT B)
                    ‚Üí equalTypes n w A B
{-# TERMINATING #-}
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTNAT x x‚ÇÅ) = ‚ä•-elim (LIFTneqNAT (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTQNAT x x‚ÇÅ) = ‚ä•-elim (LIFTneqQNAT (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTTNAT x x‚ÇÅ) = ‚ä•-elim (LIFTneqTNAT (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (LIFTneqLT (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTQLT a1 a2 b1 b2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = ‚ä•-elim (LIFTneqQLT (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTFREE x x‚ÇÅ) = ‚ä•-elim (LIFTneqFREE (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTPI A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (LIFTneqPI (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTSUM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (LIFTneqSUM (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTW A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (LIFTneqW (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTM A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (LIFTneqM (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTSET A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (LIFTneqSET (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTISECT A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = ‚ä•-elim (LIFTneqISECT (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTTUNION A1 B1 A2 B2 x x‚ÇÅ eqta eqtb exta extb) = ‚ä•-elim (LIFTneqTUNION (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTEQ a1 b1 a2 b2 A‚ÇÅ B‚ÇÅ x x‚ÇÅ eqtA exta eqt1 eqt2) = ‚ä•-elim (LIFTneqEQ (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = ‚ä•-elim (LIFTneqUNION (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTQTUNION A1 B1 A2 B2 x x‚ÇÅ eqtA eqtB exta extb) = ‚ä•-elim (LIFTneqQTUNION (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTSQUASH A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (LIFTneqTSQUASH (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTTRUNC A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (LIFTneqTTRUNC (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTCONST A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (LIFTneqTCONST (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTSUBSING A1 A2 x x‚ÇÅ eqtA exta) = ‚ä•-elim (LIFTneqSUBSING (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTPURE x x‚ÇÅ) = ‚ä•-elim (LIFTneqPURE (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQFFDEFS A1 A2 x1 x2 x x‚ÇÅ eqtA exta eqx) = ‚ä•-elim (LIFTneqFFDEFS (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTUNIV i p x x‚ÇÅ) = ‚ä•-elim (LIFTneqUNIV (compAllVal x‚ÇÅ tt))
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTLIFT A1 A2 x x‚ÇÅ eqtA exta)
  rewrite #LIFTinj {A1} {A} (sym (#compAllVal x tt))
        | #LIFTinj {A2} {B} (sym (#compAllVal x‚ÇÅ tt))
        | ‚ÜìU-uni (suc n) = eqtA w (‚äë-refl¬∑ _)
equalTypes-LIFT‚Üí {n} {w} {A} {B} (EQTBAR x) =
  eqTypes-local (Mod.‚àÄùïé-‚ñ°Func M (Œª w' e z ‚Üí equalTypes-LIFT‚Üí z) x)



equalTypes-‚ÜëT#‚Üí : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (a b : CTerm)
                  ‚Üí equalTypes n w (‚ÜëT# p a) (‚ÜëT# p b)
                  ‚Üí equalTypes i w a b
equalTypes-‚ÜëT#‚Üí {suc n} {i} p w a b eqt with i <? n
... | yes q = equalTypes-‚ÜëT#‚Üí q w a b (equalTypes-LIFT‚Üí eqt)
... | no q rewrite <s‚Üí¬¨<‚Üí‚â° p q = equalTypes-LIFT‚Üí eqt



equalTypes-#‚ÜëT‚Üí : {n i : ‚Ñï} (p : i < n) (w : ùïé¬∑) (a b : CTerm)
                  ‚Üí equalTypes n w (#‚ÜëT p a) (#‚ÜëT p b)
                  ‚Üí equalTypes i w a b
equalTypes-#‚ÜëT‚Üí {n} {i} p w a b eqt rewrite #‚ÜëT‚â°‚ÜëT# p a | #‚ÜëT‚â°‚ÜëT# p b = equalTypes-‚ÜëT#‚Üí p w a b eqt



isTypeBOOL : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #BOOL
isTypeBOOL w n rewrite #BOOL‚â° = eqTypesUNION‚Üê eqTypesTRUE eqTypesTRUE


isType-#NAT‚ÜíBOOL : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT‚ÜíBOOL
isType-#NAT‚ÜíBOOL w n rewrite #NAT‚ÜíBOOL‚â° = eqTypesFUN‚Üê eqTypesNAT (isTypeBOOL w n)


isType-#NAT!‚ÜíBOOL : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT!‚ÜíBOOL
isType-#NAT!‚ÜíBOOL w n rewrite #NAT!‚ÜíBOOL‚â° = eqTypesFUN‚Üê isTypeNAT! (isTypeBOOL w n)



isTypeBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #BOOL!
isTypeBOOL! w n rewrite #BOOL!‚â° = eqTypesTCONST‚Üê (isTypeBOOL w n)



equalTerms-pres-#‚áõ-left-rev : CTerm ‚Üí Set(lsuc(L))
equalTerms-pres-#‚áõ-left-rev A =
  {i : ‚Ñï} {w : ùïé¬∑} {a b c : CTerm}
  ‚Üí a #‚áõ! b at w
  ‚Üí (eqt : equalTypes i w A A)
  ‚Üí equalTerms i w eqt b c
  ‚Üí equalTerms i w eqt a c



equalInType-pres-#‚áõ-LR-rev : (T : CTerm) ‚Üí Set(lsuc L)
equalInType-pres-#‚áõ-LR-rev T =
  {i : ‚Ñï} {w : ùïé¬∑} {a b c d : CTerm}
  ‚Üí a #‚áõ! b at w
  ‚Üí c #‚áõ! d at w
  ‚Üí equalInType i w T b d
  ‚Üí equalInType i w T a c



equalTerms-pres-#‚áõ-left-rev‚ÜíequalInType-pres-#‚áõ-LR-rev :
  (T : CTerm)
  ‚Üí equalTerms-pres-#‚áõ-left-rev T
  ‚Üí equalInType-pres-#‚áõ-LR-rev T
equalTerms-pres-#‚áõ-left-rev‚ÜíequalInType-pres-#‚áõ-LR-rev T h {i} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (eqt , eqi) =
  eqt , h {i} {w} {a} {b} {c} c‚ÇÅ eqt (eqInType-sym {i} {w} {T} {T} eqt (h {i} {w} {c} {d} {b} c‚ÇÇ eqt (eqInType-sym {i} {w} {T} {T} eqt eqi)))



equalTerms-pres-#‚áõ-left : CTerm ‚Üí Set(lsuc(L))
equalTerms-pres-#‚áõ-left A =
  {i : ‚Ñï} {w : ùïé¬∑} {a b c : CTerm}
  ‚Üí a #‚áõ! b at w
  ‚Üí (eqt : equalTypes i w A A)
  ‚Üí equalTerms i w eqt a c
  ‚Üí equalTerms i w eqt b c



equalInType-pres-#‚áõ-LR : (T : CTerm) ‚Üí Set(lsuc L)
equalInType-pres-#‚áõ-LR T =
  {i : ‚Ñï} {w : ùïé¬∑} {a b c d : CTerm}
  ‚Üí a #‚áõ! b at w
  ‚Üí c #‚áõ! d at w
  ‚Üí equalInType i w T a c
  ‚Üí equalInType i w T b d



equalTerms-pres-#‚áõ-left‚ÜíequalInType-pres-#‚áõ-LR :
  (T : CTerm)
  ‚Üí equalTerms-pres-#‚áõ-left T
  ‚Üí equalInType-pres-#‚áõ-LR T
equalTerms-pres-#‚áõ-left‚ÜíequalInType-pres-#‚áõ-LR T h {i} {w} {a} {b} {c} {d} c‚ÇÅ c‚ÇÇ (eqt , eqi) =
  eqt , h {i} {w} {a} {b} {d} c‚ÇÅ eqt (eqInType-sym {i} {w} {T} {T} eqt (h {i} {w} {c} {d} {a} c‚ÇÇ eqt (eqInType-sym {i} {w} {T} {T} eqt eqi)))



‚ÜíequalInType-CS-NAT!‚ÜíT : {n : ‚Ñï} {w : ùïé¬∑} {a b : Name} {T : CTerm}
                          ‚Üí isType n w T
                          ‚Üí equalTerms-pres-#‚áõ-left-rev T
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí equalInType n w' T (#APPLY (#CS a) (#NUM m)) (#APPLY (#CS b) (#NUM m)))
                          ‚Üí equalInType n w (#NAT!‚ÜíT T) (#CS a) (#CS b)
‚ÜíequalInType-CS-NAT!‚ÜíT {n} {w} {a} {b} {T} ist pres i =
  equalInType-FUN isTypeNAT! ist {--(Œª w' e ‚Üí eqTypes-mon (uni n) ist w' e)--} aw
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ
                      ‚Üí equalInType n w' T (#APPLY (#CS a) a‚ÇÅ) (#APPLY (#CS b) a‚ÇÇ))
    aw w1 e1 a‚ÇÅ a‚ÇÇ ea = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw1 ea1)
      where
        ea1 : ‚ñ°¬∑ w1 (Œª w' _ ‚Üí #‚áõ!same‚Ñï {--NATeq--} w' a‚ÇÅ a‚ÇÇ)
        ea1 = equalInType-NAT!‚Üí n w1 a‚ÇÅ a‚ÇÇ ea

        aw1 : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!same‚Ñï {--NATeq--} w' a‚ÇÅ a‚ÇÇ ‚Üí equalInType n w' T (#APPLY (#CS a) a‚ÇÅ) (#APPLY (#CS b) a‚ÇÇ))
        aw1 w2 e2 (m , c‚ÇÅ , c‚ÇÇ) = equalTerms-pres-#‚áõ-left-rev‚ÜíequalInType-pres-#‚áõ-LR-rev
                                    T pres {n} {w2}
                                    {#APPLY (#CS a) a‚ÇÅ} {#APPLY (#CS a) (#NUM m)} {#APPLY (#CS b) a‚ÇÇ} {#APPLY (#CS b) (#NUM m)}
                                    (#‚áõ!-APPLY-CS {w2} {a‚ÇÅ} {#NUM m} a c‚ÇÅ)
                                    (#‚áõ!-APPLY-CS {w2} {a‚ÇÇ} {#NUM m} b c‚ÇÇ)
                                    (i w2 (‚äë-trans¬∑ e1 e2) m)
 {--equalInType-#‚áõ-LR-rev (#‚áõ!-APPLY-CS {w2} {a‚ÇÅ} {#NUM m} a c‚ÇÅ)
                                                         (#‚áõ!-APPLY-CS {w2} {a‚ÇÇ} {#NUM m} b c‚ÇÇ)
                                                         (i w2 (‚äë-trans¬∑ e1 e2) m)--}


union-irr : {eqa1 eqa2 eqb1 eqb2 : per} {w : ùïé¬∑} {a b : CTerm}
            ‚Üí ({a b : CTerm} ‚Üí eqa1 a b ‚Üí eqa2 a b)
            ‚Üí ({a b : CTerm} ‚Üí eqb1 a b ‚Üí eqb2 a b)
            ‚Üí UNIONeq eqa1 eqb1 w a b
            ‚Üí UNIONeq eqa2 eqb2 w a b
union-irr {eqa1} {eqa2} {eqb1} {eqb2} {w} {a} {b} h1 h2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , q)) = x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , h1 q)
union-irr {eqa1} {eqa2} {eqb1} {eqb2} {w} {a} {b} h1 h2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , q)) = x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , h2 q)



eqInType-‚áõ-BOOL : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #BOOL #BOOL)
                   ‚Üí equalTerms u w eqt a b
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq (equalInType u w' #TRUE) (equalInType u w' #TRUE) w' a b)
eqInType-‚áõ-BOOL u w a b eqt h =
  Mod.‚àÄùïé-‚ñ°Func M
    (Œª w' e z ‚Üí union-irr
                  {_} {_} {_} {_} {_} {a} {b}
                  (Œª {x} {y} ex ‚Üí eqInType‚ÜíequalInType {u} {w'} {#TRUE} {#TRUE} {#TRUE} {x} {y} refl (eqTypesTRUE {w'} {u}) ex)
                  (Œª {x} {y} ex ‚Üí eqInType‚ÜíequalInType {u} {w'} {#TRUE} {#TRUE} {#TRUE} {x} {y} refl (eqTypesTRUE {w'} {u}) ex)
                  z)
    (eqInType-‚áõ-UNION
      (uni u) w #BOOL #BOOL #TRUE #TRUE #TRUE #TRUE a b
      (Œª w' _ ‚Üí eqTypesTRUE {w'} {u}) (Œª w' _ ‚Üí eqTypesTRUE {w'} {u})
      (wPredExtIrr-eqInType {u} {w} {#TRUE} {#TRUE} (Œª w' _ ‚Üí eqTypesTRUE {w'} {u}))
      (wPredExtIrr-eqInType {u} {w} {#TRUE} {#TRUE} (Œª w' _ ‚Üí eqTypesTRUE {w'} {u}))
      (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#TRUE} {#TRUE} (eqTypesTRUE {w'} {u}))
      (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#TRUE} {#TRUE} (eqTypesTRUE {w'} {u}))
      (#‚áõ-refl w #BOOL)
      (#‚áõ-refl w #BOOL)
      eqt h)



eqInType-‚áõ-BOOL-rev : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                       ‚Üí (eqt : equalTypes u w #BOOL #BOOL)
                       ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq (equalInType u w' #TRUE) (equalInType u w' #TRUE) w' a b)
                       ‚Üí equalTerms u w eqt a b
eqInType-‚áõ-BOOL-rev u w a b eqt h =
  eqInType-‚áõ-UNION-rev
    (uni u) w #BOOL #BOOL #TRUE #TRUE #TRUE #TRUE a b
    (Œª w' _ ‚Üí eqTypesTRUE {w'} {u})
    (Œª w' _ ‚Üí eqTypesTRUE {w'} {u})
    (wPredExtIrr-eqInType {u} {w} {#TRUE} {#TRUE} (Œª w' _ ‚Üí eqTypesTRUE {w'} {u}))
    (wPredExtIrr-eqInType {u} {w} {#TRUE} {#TRUE} (Œª w' _ ‚Üí eqTypesTRUE {w'} {u}))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#TRUE} {#TRUE} (eqTypesTRUE {w'} {u}))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#TRUE} {#TRUE} (eqTypesTRUE {w'} {u}))
    (#‚áõ-refl w #BOOL) (#‚áõ-refl w #BOOL)
    eqt
    (Mod.‚àÄùïé-‚ñ°Func M (Œª w' e z ‚Üí union-irr
                                    {equalInType u w' #TRUE} {eqInType (uni u) w' (eqTypesTRUE {w'} {u})}
                                    {equalInType u w' #TRUE} {eqInType (uni u) w' (eqTypesTRUE {w'} {u})}
                                    {w'} {a} {b}
                                    (Œª {x} {y} ex ‚Üí equalInType‚ÜíeqInType {u} {w'} {#TRUE} {#TRUE} {#TRUE} {x} {y} refl {eqTypesTRUE {w'} {u}} ex)
                                    (Œª {x} {y} ex ‚Üí equalInType‚ÜíeqInType {u} {w'} {#TRUE} {#TRUE} {#TRUE} {x} {y} refl {eqTypesTRUE {w'} {u}} ex)
                                    z) h)



#‚áõ!-pres-UNIONeq : {eqa eqb : per} {w : ùïé¬∑} {a b c : CTerm}
                    ‚Üí a #‚áõ! b at w
                    ‚Üí UNIONeq eqa eqb w a c
                    ‚Üí UNIONeq eqa eqb w b c
#‚áõ!-pres-UNIONeq {eqa} {eqb} {w} {a} {b} {c} comp (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , h)) = x , y , inj‚ÇÅ (val-#‚áõ‚Üí {w} {a} {b} {#INL x} tt comp c‚ÇÅ , c‚ÇÇ , h)
#‚áõ!-pres-UNIONeq {eqa} {eqb} {w} {a} {b} {c} comp (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , h)) = x , y , inj‚ÇÇ (val-#‚áõ‚Üí {w} {a} {b} {#INR x} tt comp c‚ÇÅ , c‚ÇÇ , h)



#‚áõ!-pres-UNIONeq-rev : {eqa eqb : per} {w : ùïé¬∑} {a b c : CTerm}
                    ‚Üí b #‚áõ! a at w
                    ‚Üí UNIONeq eqa eqb w a c
                    ‚Üí UNIONeq eqa eqb w b c
#‚áõ!-pres-UNIONeq-rev {eqa} {eqb} {w} {a} {b} {c} comp (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , h)) = x , y , inj‚ÇÅ (‚áõ-trans (#‚áõ!-#‚áõ {w} {b} {a} comp) c‚ÇÅ , c‚ÇÇ , h)
#‚áõ!-pres-UNIONeq-rev {eqa} {eqb} {w} {a} {b} {c} comp (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , h)) = x , y , inj‚ÇÇ (‚áõ-trans (#‚áõ!-#‚áõ {w} {b} {a} comp) c‚ÇÅ , c‚ÇÇ , h)



eqInType-‚áõ-QTBOOL : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #QTBOOL #QTBOOL)
                   ‚Üí equalTerms u w eqt a b
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí TSQUASHeq (equalInType u w' #BOOL) w' a b)
eqInType-‚áõ-QTBOOL u w a b eqt h =
  Mod.‚àÄùïé-‚ñ°Func M
    (Œª w' e z ‚Üí TSQUASHeq-ext-eq (Œª x y ex ‚Üí eqInType‚ÜíequalInType {u} {w'} {#BOOL} {#BOOL} {#BOOL} {x} {y} refl (isTypeBOOL w' u) ex) z)
    (eqInType-‚áõ-TSQUASH
      (uni u) w #QTBOOL #QTBOOL #BOOL #BOOL a b
      (Œª w' e ‚Üí isTypeBOOL w' u)
      (wPredExtIrr-eqInType {u} {w} {#BOOL} {#BOOL} (Œª w' _ ‚Üí isTypeBOOL w' u))
      (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#BOOL} {#BOOL} (isTypeBOOL w' u))
      (#‚áõ-refl w #QTBOOL) (#‚áõ-refl w #QTBOOL) eqt
      h)


eqInType-‚áõ-QTBOOL-rev : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #QTBOOL #QTBOOL)
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí TSQUASHeq (equalInType u w' #BOOL) w' a b)
                   ‚Üí equalTerms u w eqt a b
eqInType-‚áõ-QTBOOL-rev u w a b eqt h =
  eqInType-‚áõ-TSQUASH-rev
    (uni u) w #QTBOOL #QTBOOL #BOOL #BOOL a b
    (Œª w' e ‚Üí isTypeBOOL w' u)
    (wPredExtIrr-eqInType {u} {w} {#BOOL} {#BOOL} (Œª w' _ ‚Üí isTypeBOOL w' u))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#BOOL} {#BOOL} (isTypeBOOL w' u))
    (#‚áõ-refl w #QTBOOL) (#‚áõ-refl w #QTBOOL)
    eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e z ‚Üí TSQUASHeq-ext-eq (Œª x y ex ‚Üí equalInType‚ÜíeqInType {u} {w'} {#BOOL} {#BOOL} {#BOOL} {x} {y} refl {isTypeBOOL w' u} ex) z)
      h)



eqInType-‚áõ-QTBOOL! : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #QTBOOL! #QTBOOL!)
                   ‚Üí equalTerms u w eqt a b
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí TSQUASHeq (equalInType u w' #BOOL!) w' a b)
eqInType-‚áõ-QTBOOL! u w a b eqt h =
  Mod.‚àÄùïé-‚ñ°Func M
    (Œª w' e z ‚Üí TSQUASHeq-ext-eq (Œª x y ex ‚Üí eqInType‚ÜíequalInType {u} {w'} {#BOOL!} {#BOOL!} {#BOOL!} {x} {y} refl (isTypeBOOL! w' u) ex) z)
    (eqInType-‚áõ-TSQUASH
      (uni u) w #QTBOOL! #QTBOOL! #BOOL! #BOOL! a b
      (Œª w' e ‚Üí isTypeBOOL! w' u)
      (wPredExtIrr-eqInType {u} {w} {#BOOL!} {#BOOL!} (Œª w' _ ‚Üí isTypeBOOL! w' u))
      (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#BOOL!} {#BOOL!} (isTypeBOOL! w' u))
      (#‚áõ-refl w #QTBOOL!) (#‚áõ-refl w #QTBOOL!) eqt
      h)


eqInType-‚áõ-QTBOOL!-rev : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #QTBOOL! #QTBOOL!)
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí TSQUASHeq (equalInType u w' #BOOL!) w' a b)
                   ‚Üí equalTerms u w eqt a b
eqInType-‚áõ-QTBOOL!-rev u w a b eqt h =
  eqInType-‚áõ-TSQUASH-rev
    (uni u) w #QTBOOL! #QTBOOL! #BOOL! #BOOL! a b
    (Œª w' e ‚Üí isTypeBOOL! w' u)
    (wPredExtIrr-eqInType {u} {w} {#BOOL!} {#BOOL!} (Œª w' _ ‚Üí isTypeBOOL! w' u))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#BOOL!} {#BOOL!} (isTypeBOOL! w' u))
    (#‚áõ-refl w #QTBOOL!) (#‚áõ-refl w #QTBOOL!)
    eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e z ‚Üí TSQUASHeq-ext-eq (Œª x y ex ‚Üí equalInType‚ÜíeqInType {u} {w'} {#BOOL!} {#BOOL!} {#BOOL!} {x} {y} refl {isTypeBOOL! w' u} ex) z)
      h)



eqInType-‚áõ-QTNAT! : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #QTNAT! #QTNAT!)
                   ‚Üí equalTerms u w eqt a b
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí TSQUASHeq (equalInType u w' #NAT!) w' a b)
eqInType-‚áõ-QTNAT! u w a b eqt h =
  Mod.‚àÄùïé-‚ñ°Func M
    (Œª w' e z ‚Üí TSQUASHeq-ext-eq (Œª x y ex ‚Üí eqInType‚ÜíequalInType {u} {w'} {#NAT!} {#NAT!} {#NAT!} {x} {y} refl (isTypeNAT! {w'} {u}) ex) z)
    (eqInType-‚áõ-TSQUASH
      (uni u) w #QTNAT! #QTNAT! #NAT! #NAT! a b
      (Œª w' e ‚Üí isTypeNAT! {w'} {u})
      (wPredExtIrr-eqInType {u} {w} {#NAT!} {#NAT!} (Œª w' _ ‚Üí isTypeNAT! {w'} {u}))
      (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#NAT!} {#NAT!} (isTypeNAT! {w'} {u}))
      (#‚áõ-refl w #QTNAT!) (#‚áõ-refl w #QTNAT!) eqt
      h)


eqInType-‚áõ-QTNAT!-rev : (u : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                   ‚Üí (eqt : equalTypes u w #QTNAT! #QTNAT!)
                   ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí TSQUASHeq (equalInType u w' #NAT!) w' a b)
                   ‚Üí equalTerms u w eqt a b
eqInType-‚áõ-QTNAT!-rev u w a b eqt h =
  eqInType-‚áõ-TSQUASH-rev
    (uni u) w #QTNAT! #QTNAT! #NAT! #NAT! a b
    (Œª w' e ‚Üí isTypeNAT! {w'} {u})
    (wPredExtIrr-eqInType {u} {w} {#NAT!} {#NAT!} (Œª w' _ ‚Üí isTypeNAT! {w'} {u}))
    (Œª w' e ‚Üí eqInType-ext {uni u} (is-uni-uni u) {w'} {#NAT!} {#NAT!} (isTypeNAT! {w'} {u}))
    (#‚áõ-refl w #QTNAT!) (#‚áõ-refl w #QTNAT!)
    eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e z ‚Üí TSQUASHeq-ext-eq (Œª x y ex ‚Üí equalInType‚ÜíeqInType {u} {w'} {#NAT!} {#NAT!} {#NAT!} {x} {y} refl {isTypeNAT! {w'} {u}} ex) z)
      h)



#‚áõ!-pres-TSQUASH-eq-rev : {eqa : per} {w : ùïé¬∑} {a b c : CTerm}
                    ‚Üí b #‚áõ! a at w
                    ‚Üí TSQUASH-eq eqa w a c
                    ‚Üí TSQUASH-eq eqa w b c
#‚áõ!-pres-TSQUASH-eq-rev {eqa} {w} {a} {b} {c} comp (TSQUASH-eq-base a1 a2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) =
  TSQUASH-eq-base a1 a2 x x‚ÇÅ (#‚áõ!-pres-‚àºC!-rev {w} {b} {a} {a1} comp x‚ÇÇ) x‚ÇÉ x‚ÇÑ
#‚áõ!-pres-TSQUASH-eq-rev {eqa} {w} {a} {b} {c} comp (TSQUASH-eq-trans t h h‚ÇÅ) =
  TSQUASH-eq-trans t (#‚áõ!-pres-TSQUASH-eq-rev comp h) h‚ÇÅ



#‚áõ!-pres-TSQUASHeq-rev : {eqa : per} {w : ùïé¬∑} {a b c : CTerm}
                    ‚Üí b #‚áõ! a at w
                    ‚Üí TSQUASHeq eqa w a c
                    ‚Üí TSQUASHeq eqa w b c
#‚áõ!-pres-TSQUASHeq-rev {eqa} {w} {a} {b} {c} comp h =
  TSQUASH-eq‚Üí (#‚áõ!-pres-TSQUASH-eq-rev comp (‚ÜíTSQUASH-eq h))



#‚áõ!-pres-TSQUASH-eq : {eqa : per} {w : ùïé¬∑} {a b c : CTerm}
                    ‚Üí a #‚áõ! b at w
                    ‚Üí TSQUASH-eq eqa w a c
                    ‚Üí TSQUASH-eq eqa w b c
#‚áõ!-pres-TSQUASH-eq {eqa} {w} {a} {b} {c} comp (TSQUASH-eq-base a1 a2 x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ) =
  TSQUASH-eq-base a1 a2 x x‚ÇÅ (#‚áõ!-pres-‚àºC! {w} {a} {b} {a1} comp x‚ÇÇ) x‚ÇÉ x‚ÇÑ
#‚áõ!-pres-TSQUASH-eq {eqa} {w} {a} {b} {c} comp (TSQUASH-eq-trans t h h‚ÇÅ) =
  TSQUASH-eq-trans t (#‚áõ!-pres-TSQUASH-eq comp h) h‚ÇÅ



#‚áõ!-pres-TSQUASHeq : {eqa : per} {w : ùïé¬∑} {a b c : CTerm}
                    ‚Üí a #‚áõ! b at w
                    ‚Üí TSQUASHeq eqa w a c
                    ‚Üí TSQUASHeq eqa w b c
#‚áõ!-pres-TSQUASHeq {eqa} {w} {a} {b} {c} comp h =
  TSQUASH-eq‚Üí (#‚áõ!-pres-TSQUASH-eq comp (‚ÜíTSQUASH-eq h))



#‚áõ!-pres-SUMeq-rev : {eqa : per} {eqb : (a b : CTerm) ‚Üí eqa a b ‚Üí per} {w : ùïé¬∑} {a b c : CTerm}
                      ‚Üí a #‚áõ! b at w
                      ‚Üí SUMeq eqa eqb w b c
                      ‚Üí SUMeq eqa eqb w a c
#‚áõ!-pres-SUMeq-rev {eqa} {eqb} {w} {a} {b} {c} comp (a1 , a2 , b1 , b2 , ea , c1 , c2 , eb) =
  a1 , a2 , b1 , b2 , ea , ‚áõ-trans (#‚áõ!-#‚áõ {w} {a} {b} comp) c1 , c2 , eb



equalTerms-pres-#‚áõ-left-rev-NAT : equalTerms-pres-#‚áõ-left-rev #NAT
equalTerms-pres-#‚áõ-left-rev-NAT {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-NAT-rev
    (uni i) w #NAT #NAT a c (#‚áõ-refl w #NAT) (#‚áõ-refl w #NAT)
    eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e (n , c‚ÇÅ , c‚ÇÇ) ‚Üí n , ‚áõ-trans (#‚áõ!-#‚áõ {w'} {a} {b} (‚àÄùïé-mon e comp)) c‚ÇÅ , c‚ÇÇ)
      (eqInType-‚áõ-NAT (uni i) w #NAT #NAT b c (#‚áõ-refl w #NAT) (#‚áõ-refl w #NAT) eqt eqi))



equalTerms-pres-#‚áõ-left-NAT : equalTerms-pres-#‚áõ-left #NAT
equalTerms-pres-#‚áõ-left-NAT {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-NAT-rev
    (uni i) w #NAT #NAT b c (#‚áõ-refl w #NAT) (#‚áõ-refl w #NAT)
    eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e (n , c‚ÇÅ , c‚ÇÇ) ‚Üí n , val-#‚áõ‚Üí {w'} {a} {b} {#NUM n} tt (‚àÄùïé-mon e comp) c‚ÇÅ , c‚ÇÇ)
      (eqInType-‚áõ-NAT (uni i) w #NAT #NAT a c (#‚áõ-refl w #NAT) (#‚áõ-refl w #NAT) eqt eqi))


equalTerms-pres-#‚áõ-left-rev-QTNAT! : equalTerms-pres-#‚áõ-left-rev #QTNAT!
equalTerms-pres-#‚áõ-left-rev-QTNAT! {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-QTNAT!-rev i w a c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e ‚Üí #‚áõ!-pres-TSQUASHeq-rev {_} {_} {b} {a} {c} (‚àÄùïé-mon e comp))
      (eqInType-‚áõ-QTNAT! i w b c eqt eqi))


equalTerms-pres-#‚áõ-left-QTNAT! : equalTerms-pres-#‚áõ-left #QTNAT!
equalTerms-pres-#‚áõ-left-QTNAT! {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-QTNAT!-rev i w b c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e ‚Üí #‚áõ!-pres-TSQUASHeq {_} {_} {a} {b} {c} (‚àÄùïé-mon e comp))
      (eqInType-‚áõ-QTNAT! i w a c eqt eqi))



equalTerms-pres-#‚áõ-left-rev-BOOL : equalTerms-pres-#‚áõ-left-rev #BOOL
equalTerms-pres-#‚áõ-left-rev-BOOL {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-BOOL-rev i w a c eqt (Mod.‚àÄùïé-‚ñ°Func M (Œª w' e ‚Üí #‚áõ!-pres-UNIONeq-rev {_} {_} {_} {b} {a} {c} (‚àÄùïé-mon e comp)) h)
  where
    h : ‚ñ°¬∑ w (Œª w' e ‚Üí UNIONeq (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' b c)
    h = eqInType-‚áõ-BOOL i w b c eqt eqi



equalTerms-pres-#‚áõ-left-QTBOOL : equalTerms-pres-#‚áõ-left #QTBOOL
equalTerms-pres-#‚áõ-left-QTBOOL {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-QTBOOL-rev i w b c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e ‚Üí #‚áõ!-pres-TSQUASHeq {_} {_} {a} {b} {c} (‚àÄùïé-mon e comp))
      (eqInType-‚áõ-QTBOOL i w a c eqt eqi))



equalTerms-pres-#‚áõ-left-rev-QTBOOL : equalTerms-pres-#‚áõ-left-rev #QTBOOL
equalTerms-pres-#‚áõ-left-rev-QTBOOL {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-QTBOOL-rev i w a c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e ‚Üí #‚áõ!-pres-TSQUASHeq-rev {_} {_} {b} {a} {c} (‚àÄùïé-mon e comp))
      (eqInType-‚áõ-QTBOOL i w b c eqt eqi))



equalTerms-pres-#‚áõ-left-QTBOOL! : equalTerms-pres-#‚áõ-left #QTBOOL!
equalTerms-pres-#‚áõ-left-QTBOOL! {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-QTBOOL!-rev i w b c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e ‚Üí #‚áõ!-pres-TSQUASHeq {_} {_} {a} {b} {c} (‚àÄùïé-mon e comp))
      (eqInType-‚áõ-QTBOOL! i w a c eqt eqi))



equalTerms-pres-#‚áõ-left-rev-QTBOOL! : equalTerms-pres-#‚áõ-left-rev #QTBOOL!
equalTerms-pres-#‚áõ-left-rev-QTBOOL! {i} {w} {a} {b} {c} comp eqt eqi =
  eqInType-‚áõ-QTBOOL!-rev i w a c eqt
    (Mod.‚àÄùïé-‚ñ°Func M
      (Œª w' e ‚Üí #‚áõ!-pres-TSQUASHeq-rev {_} {_} {b} {a} {c} (‚àÄùïé-mon e comp))
      (eqInType-‚áõ-QTBOOL! i w b c eqt eqi))



equalTerms-pres-#‚áõ-left-rev-SUM : (A : CTerm) (B : CTerm0) ‚Üí equalTerms-pres-#‚áõ-left-rev (#SUM A B)
equalTerms-pres-#‚áõ-left-rev-SUM A B {i} {w} {a} {b} {c} comp eqt eqi =
  equalInType‚ÜíeqInType {i} {w} {#SUM A B} {#SUM A B} {#SUM A B} {a} {c} refl {eqt}
    (equalInType-SUM {i} {w} {A} {B} {a} {c}
      (equalInType-SUM‚Üí‚ÇÅ {i} {w} {A} {B} {b} {c} (eqInType‚ÜíequalInType {i} {w} {#SUM A B} {#SUM A B} {#SUM A B} {b} {c} refl eqt eqi))
      (equalInType-SUM‚Üí‚ÇÇ {i} {w} {A} {B} {b} {c} (eqInType‚ÜíequalInType {i} {w} {#SUM A B} {#SUM A B} {#SUM A B} {b} {c} refl eqt eqi))
      (Mod.‚àÄùïé-‚ñ°Func M
        (Œª w1 e1 ‚Üí #‚áõ!-pres-SUMeq-rev {_} {_} {_} {a} {b} {c} (‚àÄùïé-mon e1 comp))
        (equalInType-SUM‚Üí {i} {w} {A} {B} {b} {c}
          (eqInType‚ÜíequalInType {i} {w} {#SUM A B} {#SUM A B} {#SUM A B} {b} {c} refl eqt eqi))))



‚ÜíequalInType-CS-NAT!‚ÜíBOOL : {n : ‚Ñï} {w : ùïé¬∑} {a b : Name}
                             ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí equalInType n w' #BOOL (#APPLY (#CS a) (#NUM m)) (#APPLY (#CS b) (#NUM m)))
                             ‚Üí equalInType n w #NAT!‚ÜíBOOL (#CS a) (#CS b)
‚ÜíequalInType-CS-NAT!‚ÜíBOOL {n} {w} {a} {b} i rewrite #NAT!‚ÜíBOOL‚â° =
  ‚ÜíequalInType-CS-NAT!‚ÜíT (isTypeBOOL w n) equalTerms-pres-#‚áõ-left-rev-BOOL i




eqTypesQTBOOL : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #QTBOOL #QTBOOL
eqTypesQTBOOL {w} {i} = eqTypesTSQUASH‚Üê (isTypeBOOL w i)



‚ÜíequalInType-CS-NAT!‚ÜíQTBOOL : {n : ‚Ñï} {w : ùïé¬∑} {a b : Name}
                             ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : ‚Ñï) ‚Üí equalInType n w' #QTBOOL (#APPLY (#CS a) (#NUM m)) (#APPLY (#CS b) (#NUM m)))
                             ‚Üí equalInType n w #NAT!‚ÜíQTBOOL (#CS a) (#CS b)
‚ÜíequalInType-CS-NAT!‚ÜíQTBOOL {n} {w} {a} {b} i rewrite #NAT!‚ÜíQTBOOL‚â° =
  ‚ÜíequalInType-CS-NAT!‚ÜíT (eqTypesQTBOOL {w} {n}) equalTerms-pres-#‚áõ-left-rev-QTBOOL i




fun-equalInType-SQUASH-UNION : {n : ‚Ñï} {w : ùïé¬∑} {a b c d u v : CTerm}
                               ‚Üí isType n w c
                               ‚Üí isType n w d
                               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí inhType n w' a ‚Üí inhType n w' c)
                               ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí inhType n w' b ‚Üí inhType n w' d)
                               ‚Üí equalInType n w (#SQUASH (#UNION a b)) u v
                               ‚Üí equalInType n w (#SQUASH (#UNION c d)) #AX #AX
fun-equalInType-SQUASH-UNION {n} {w} {a} {b} {c} {d} {u} {v} istc istd imp1 imp2 eqi =
  ‚ÜíequalInType-SQUASH (Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw1 (equalInType-SQUASH‚Üí eqi)))
  where
    aw1 : ‚àÄùïé w (Œª w' e' ‚Üí inhType n w' (#UNION a b) ‚Üí ‚ñ°¬∑ w' (Œª w'' e'' ‚Üí (z : w ‚äë¬∑ w'') ‚Üí inhType n w'' (#UNION c d)))
    aw1 w1 e1 (t , eqj) = Mod.‚àÄùïé-‚ñ°Func M aw2 (equalInType-UNION‚Üí eqj)
      where
        aw2 : ‚àÄùïé w1 (Œª w' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                                      (t #‚áõ #INL x at w' √ó t #‚áõ #INL y at w' √ó equalInType n w' a x y)
                                      ‚äé (t #‚áõ #INR x at w' √ó t #‚áõ #INR y at w' √ó equalInType n w' b x y)))
                            ‚Üí (z : w ‚äë¬∑ w') ‚Üí inhType n w' (#UNION c d))
        aw2 w2 e2 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqk)) z = #INL (fst (imp1 w2 z (x , equalInType-refl eqk))) , eql
          where
            eql : ‚ààType n w2 (#UNION c d) (#INL (fst (imp1 w2 z (x , equalInType-refl eqk))))
            eql = ‚ÜíequalInType-UNION (eqTypes-mon (uni n) istc w2 z)
                                      (eqTypes-mon (uni n) istd w2 z)
                                      (Mod.‚àÄùïé-‚ñ° M Œª w3 e3 ‚Üí fst (imp1 w2 z (x , equalInType-refl eqk)) ,
                                                              fst (imp1 w2 z (x , equalInType-refl eqk)) ,
                                                              inj‚ÇÅ (#compAllRefl (#INL (fst (imp1 w2 z (x , equalInType-refl eqk)))) _ ,
                                                                    #compAllRefl (#INL (fst (imp1 w2 z (x , equalInType-refl eqk)))) _ ,
                                                                    equalInType-mon (snd (imp1 w2 z (x , equalInType-refl eqk))) w3 e3))
        aw2 w2 e2 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqk)) z = #INR (fst (imp2 w2 z (x , equalInType-refl eqk))) , eqr
          where
            eqr : ‚ààType n w2 (#UNION c d) (#INR (fst (imp2 w2 z (x , equalInType-refl eqk))))
            eqr = ‚ÜíequalInType-UNION (eqTypes-mon (uni n) istc w2 z)
                                      (eqTypes-mon (uni n) istd w2 z)
                                      (Mod.‚àÄùïé-‚ñ° M Œª w3 e3 ‚Üí fst (imp2 w2 z (x , equalInType-refl eqk)) ,
                                                              fst (imp2 w2 z (x , equalInType-refl eqk)) ,
                                                              inj‚ÇÇ (#compAllRefl (#INR (fst (imp2 w2 z (x , equalInType-refl eqk)))) _ ,
                                                                    #compAllRefl (#INR (fst (imp2 w2 z (x , equalInType-refl eqk)))) _ ,
                                                                    equalInType-mon (snd (imp2 w2 z (x , equalInType-refl eqk))) w3 e3))




equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÅ : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                                      ‚Üí equalInType n w #BOOL a b
                                      ‚Üí equalTypes n w (#ASSERT‚ÇÅ a) (#ASSERT‚ÇÅ b)
equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÅ {n} {w} {a} {b} eqb =
  EQTBAR (Mod.‚àÄùïé-‚ñ°Func M j i)
  where
    i : ‚ñ°¬∑ w (Œª w' _ ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                        ‚Üí (a #‚áõ (#INL x) at w' √ó b #‚áõ (#INL y) at w' √ó equalInType n w' #TRUE x y)
                           ‚äé
                           (a #‚áõ (#INR x) at w' √ó b #‚áõ (#INR y) at w' √ó equalInType n w' #TRUE x y))))
    i = equalInType-UNION‚Üí eqb

    j : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y
                      ‚Üí (a #‚áõ #INL x at w' √ó b #‚áõ #INL y at w' √ó equalInType n w' #TRUE x y)
                         ‚äé
                         (a #‚áõ #INR x at w' √ó b #‚áõ #INR y at w' √ó equalInType n w' #TRUE x y)))
                      ‚Üí equalTypes n w' (#ASSERT‚ÇÅ a) (#ASSERT‚ÇÅ b))
    j w' e (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , eqi)) = equalTypes-#‚áõ-left-right-rev (#‚áõ-ASSERT‚ÇÅ-INL {w'} {a} {x} c‚ÇÅ) (#‚áõ-ASSERT‚ÇÅ-INL {w'} {b} {y} c‚ÇÇ) eqTypesTRUE
    j w' e (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , eqi)) = equalTypes-#‚áõ-left-right-rev (#‚áõ-ASSERT‚ÇÅ-INR {w'} {a} {x} c‚ÇÅ) (#‚áõ-ASSERT‚ÇÅ-INR {w'} {b} {y} c‚ÇÇ) eqTypesFALSE



AX‚ààTRUE : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí equalInType n w #TRUE #AX #AX
AX‚ààTRUE n w = ‚ÜíequalInType-TRUE n


BTRUE‚ààBOOL : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #BOOL #BTRUE
BTRUE‚ààBOOL n w =
  ‚â°CTerm‚ÜíequalInType
    (sym #BOOL‚â°)
    (‚ÜíequalInType-UNION eqTypesTRUE eqTypesTRUE (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                          (#BTRUE #‚áõ #INL x at w' √ó #BTRUE #‚áõ #INL y at w' √ó equalInType n w' #TRUE x y)
                          ‚äé (#BTRUE #‚áõ #INR x at w' √ó #BTRUE #‚áõ #INR y at w' √ó equalInType n w' #TRUE x y))))
    aw w' e = #AX , #AX , inj‚ÇÅ (compAllRefl (INL AX) w' , compAllRefl (INL AX) w' , AX‚ààTRUE n w')



BFALSE‚ààBOOL : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #BOOL #BFALSE
BFALSE‚ààBOOL n w =
  ‚â°CTerm‚ÜíequalInType
    (sym #BOOL‚â°)
    (‚ÜíequalInType-UNION eqTypesTRUE eqTypesTRUE (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w (Œª w' e ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                          (#BFALSE #‚áõ #INL x at w' √ó #BFALSE #‚áõ #INL y at w' √ó equalInType n w' #TRUE x y)
                          ‚äé (#BFALSE #‚áõ #INR x at w' √ó #BFALSE #‚áõ #INR y at w' √ó equalInType n w' #TRUE x y))))
    aw w' e = #AX , #AX , inj‚ÇÇ (compAllRefl (INR AX) w' , compAllRefl (INR AX) w' , AX‚ààTRUE n w')


equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                                      ‚Üí equalInType n w #BOOL a b
                                      ‚Üí equalTypes n w (#ASSERT‚ÇÇ a) (#ASSERT‚ÇÇ b)
equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ {n} {w} {a} {b} eqb =
  ‚â°CTerm‚ÜíeqTypes
    (sym (#ASSERT‚ÇÇ‚â° a))
    (sym (#ASSERT‚ÇÇ‚â° b))
    (eqTypesEQ‚Üê (isTypeBOOL w n) eqb (BTRUE‚ààBOOL n w))



fun-equalInType-SUM-NAT : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm0} {u v : CTerm}
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT m
                                          ‚Üí equalInType n w' (sub0 m a) t‚ÇÅ t‚ÇÇ
                                          ‚Üí equalInType n w' (sub0 m b) t‚ÇÅ t‚ÇÇ)
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #NAT a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes n w' (sub0 a‚ÇÅ b) (sub0 a‚ÇÇ b))
                          ‚Üí equalInType n w (#SUM #NAT a) u v
                          ‚Üí equalInType n w (#SUM #NAT b) u v
fun-equalInType-SUM-NAT {n} {w} {a} {b} {u} {v} imp eqb eqi =
  equalInType-SUM
    (Œª w' _ ‚Üí eqTypesNAT)
    eqb
    (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SUM‚Üí eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT) (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType n w' (sub0 a‚ÇÅ a)) w' u v
                        ‚Üí SUMeq (equalInType n w' #NAT) (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType n w' (sub0 a‚ÇÅ b)) w' u v)
    aw w1 e1 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , imp w1 e1 a‚ÇÅ b‚ÇÅ b‚ÇÇ (equalInType-refl ea) eb


fun-equalInType-SUM-NAT! : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm0} {u v : CTerm}
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (m : CTerm) (t‚ÇÅ t‚ÇÇ : CTerm) ‚Üí ‚ààType n w' #NAT! m
                                          ‚Üí equalInType n w' (sub0 m a) t‚ÇÅ t‚ÇÇ
                                          ‚Üí equalInType n w' (sub0 m b) t‚ÇÅ t‚ÇÇ)
                          ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) (ea : equalInType n w' #NAT! a‚ÇÅ a‚ÇÇ) ‚Üí equalTypes n w' (sub0 a‚ÇÅ b) (sub0 a‚ÇÇ b))
                          ‚Üí equalInType n w (#SUM #NAT! a) u v
                          ‚Üí equalInType n w (#SUM #NAT! b) u v
fun-equalInType-SUM-NAT! {n} {w} {a} {b} {u} {v} imp eqb eqi =
  equalInType-SUM
    (Œª w' _ ‚Üí isTypeNAT!)
    eqb
    (Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-SUM‚Üí eqi))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType n w' (sub0 a‚ÇÅ a)) w' u v
                        ‚Üí SUMeq (equalInType n w' #NAT!) (Œª a‚ÇÅ b‚ÇÅ ea ‚Üí equalInType n w' (sub0 a‚ÇÅ b)) w' u v)
    aw w1 e1 (a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , eb) = a‚ÇÅ , a‚ÇÇ , b‚ÇÅ , b‚ÇÇ , ea , c‚ÇÅ , c‚ÇÇ , imp w1 e1 a‚ÇÅ b‚ÇÅ b‚ÇÇ (equalInType-refl ea) eb




eqInTypeExtR1-true : {i : ‚Ñï} {w : ùïé¬∑} {A B : CTerm} (eqt : eqTypes (uni i) w A B)
                     ‚Üí eqInTypeExtR1 eqt
eqInTypeExtR1-true {i} {w} {A} {B} eqt = TSP.extr1 (typeSysConds i w A B eqt)


equalInType‚ÜíeqInType-rev : {u : ‚Ñï} {w : ùïé¬∑} {A A1 A2 a‚ÇÅ a‚ÇÇ : CTerm}
                           ‚Üí A ‚â° A2
                           ‚Üí {eqt : equalTypes u w A1 A2}
                           ‚Üí equalInType u w A a‚ÇÅ a‚ÇÇ
                           ‚Üí equalTerms u w eqt a‚ÇÅ a‚ÇÇ
equalInType‚ÜíeqInType-rev {u} {w} {A} {A1} {A2} {a‚ÇÅ} {a‚ÇÇ} e {eqt} eqi rewrite e =
  eqInTypeExtR1-true {u} (fst eqi) A1 eqt a‚ÇÅ a‚ÇÇ (snd eqi)



equalTypes‚ÜíequalInType : {n : ‚Ñï} {w : ùïé¬∑} {A B a b : CTerm}
                          ‚Üí equalTypes n w A B
                          ‚Üí equalInType n w A a b
                          ‚Üí equalInType n w B a b
equalTypes‚ÜíequalInType {n} {w} {A} {B} {a} {b} eqt (eqt' , eqi) =
  TEQrefl-equalTypes n w B A (TEQsym-equalTypes n w A B eqt) ,
  eqInType-extr1 B B eqt (TEQrefl-equalTypes n w B A (TEQsym-equalTypes n w A B eqt)) (eqInType-extl1 A B eqt' eqt eqi)



sub0-ASSERT‚ÇÇ-APPLY : (a b : CTerm) ‚Üí sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû b ‚åü #[0]VAR)) ‚â° #ASSERT‚ÇÇ (#APPLY b a)
sub0-ASSERT‚ÇÇ-APPLY a b = CTerm‚â° (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY x y))
  where
    x : shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú b ‚åù) ‚â° ‚åú b ‚åù
    x rewrite subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b) = refl

    y : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    y rewrite #shiftUp 0 a | #shiftDown 0 a = refl



sub0-ASSERT‚ÇÉ-APPLY : (a b : CTerm) ‚Üí sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû b ‚åü #[0]VAR)) ‚â° #ASSERT‚ÇÉ (#APPLY b a)
sub0-ASSERT‚ÇÉ-APPLY a b = CTerm‚â° (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY x y))
  where
    x : shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú b ‚åù) ‚â° ‚åú b ‚åù
    x rewrite subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b) = refl

    y : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    y rewrite #shiftUp 0 a | #shiftDown 0 a = refl



sub0-NEG-ASSERT‚ÇÇ-APPLY : (a b : CTerm) ‚Üí sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû b ‚åü #[0]VAR))) ‚â° #NEG (#ASSERT‚ÇÇ (#APPLY b a))
sub0-NEG-ASSERT‚ÇÇ-APPLY a b
  rewrite sub0-#[0]NEG a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû b ‚åü #[0]VAR)) | sub0-ASSERT‚ÇÇ-APPLY a b
  = CTerm‚â° (‚â°NEG (‚â°ASSERT‚ÇÇ (‚Üí‚â°APPLY x y)))
  where
    x : shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú b ‚åù) ‚â° ‚åú b ‚åù
    x rewrite subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b) = refl

    y : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    y rewrite #shiftUp 0 a | #shiftDown 0 a = refl



sub0-NEG-ASSERT‚ÇÉ-APPLY : (a b : CTerm) ‚Üí sub0 a (#[0]NEG (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû b ‚åü #[0]VAR))) ‚â° #NEG (#ASSERT‚ÇÉ (#APPLY b a))
sub0-NEG-ASSERT‚ÇÉ-APPLY a b
  rewrite sub0-#[0]NEG a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû b ‚åü #[0]VAR)) | sub0-ASSERT‚ÇÉ-APPLY a b
  = CTerm‚â° (‚â°NEG (‚â°ASSERT‚ÇÉ (‚Üí‚â°APPLY x y)))
  where
    x : shiftDown 0 (subv 0 (shiftUp 0 ‚åú a ‚åù) ‚åú b ‚åù) ‚â° ‚åú b ‚åù
    x rewrite subNotIn ‚åú a ‚åù ‚åú b ‚åù (CTerm.closed b) = refl

    y : shiftDown 0 (shiftUp 0 ‚åú a ‚åù) ‚â° ‚åú a ‚åù
    y rewrite #shiftUp 0 a | #shiftDown 0 a = refl



record TS (œÑ : TEQ) (œÉ : EQT) : Set(lsuc(L)) where
  constructor mkts
  field
    -- œÑ's properties
    tySym   : TEQsym œÑ
    tyTrans : TEQtrans œÑ
    tyComp  : TEQcomp œÑ
    tyMon   : TEQmon œÑ
    tyLoc   : TEQloc œÑ
    -- œÉ's properties
    eqSym   : EQTsym œÉ
    eqTrans : EQTtrans œÉ
    --eqComp  : EQTcomp œÉ -- TODO: fix that later
    eqMon   : EQTmon œÉ
    eqLoc   : EQTloc œÉ
    eqCons  : EQTcons œÉ
    -- œÑ/œÉ properties
    tsExt   : TSext œÑ œÉ



typeSys : (n : ‚Ñï) ‚Üí TS (equalTypes n) (equalInType n)
typeSys n =
  mkts
    (TEQsym-equalTypes n)
    (TEQtrans-equalTypes n)
    (Œª w A B comp e ‚Üí equalTypes-#‚áõ-left-right (#‚áõ!-refl {w} {A}) comp {--comp--} e)
    (Œª {w1} {w2} A B e eqt ‚Üí eqTypes-mon (uni n) eqt w2 e)
    (Œª {w} A B h ‚Üí eqTypes-local h)
    (EQTsym-equalInType n)
    (EQTtrans-equalInType n)
    --(Œª w A a b comp eqi ‚Üí equalInType-#‚áõ-LR (#‚áõ!-refl {w} {a}) comp {--comp--} eqi)
    (Œª {w1} {w2} A a b e eqi ‚Üí equalInType-mon eqi w2 e)
    (Œª {w} A a b h ‚Üí equalInType-local h)
    (Œª w t ‚Üí ¬¨equalInType-FALSE)
    (TSext-equalTypes-equalInType n)



equalInType-BOOL‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí equalInType i w #BOOL a b
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongBool w' a b)
equalInType-BOOL‚Üí i w a b eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-UNION‚Üí eqi)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                            (a #‚áõ #INL x at w' √ó b #‚áõ #INL y at w' √ó equalInType i w' #TRUE x y)
                            ‚äé
                            (a #‚áõ #INR x at w' √ó b #‚áõ #INR y at w' √ó equalInType i w' #TRUE x y)))
                       ‚Üí #strongBool w' a b)
    aw w' e' (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , j)) = x , y , inj‚ÇÅ ({--#‚áõ!‚Üí#‚áõ {w'} {a} {#INL x}--} c‚ÇÅ , {--#‚áõ!‚Üí#‚áõ {w'} {b} {#INL y}--} c‚ÇÇ) --inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)
    aw w' e' (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , j)) = x , y , inj‚ÇÇ ({--#‚áõ!‚Üí#‚áõ {w'} {a} {#INR x}--} c‚ÇÅ , {--#‚áõ!‚Üí#‚áõ {w'} {b} {#INR y}--} c‚ÇÇ) --inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)


‚ÜíequalInType-BOOL : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongBool w' a b)
                    ‚Üí equalInType i w #BOOL a b
‚ÜíequalInType-BOOL i w a b h =
  ‚â°CTerm‚ÜíequalInType (sym #BOOL‚â°) (‚ÜíequalInType-UNION eqTypesTRUE eqTypesTRUE (Mod.‚àÄùïé-‚ñ°Func M aw h))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool w' a b
                        ‚Üí Œ£ CTerm (Œª x ‚Üí Œ£ CTerm (Œª y ‚Üí
                           (a #‚áõ #INL x at w' √ó b #‚áõ #INL y at w' √ó equalInType i w' #TRUE x y)
                           ‚äé
                           (a #‚áõ #INR x at w' √ó b #‚áõ #INR y at w' √ó equalInType i w' #TRUE x y))))
    aw w' e (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x , y , inj‚ÇÅ (c‚ÇÅ {--c‚ÇÅ--} , c‚ÇÇ {--c‚ÇÇ--} , ‚ÜíequalInType-TRUE i)
    aw w' e (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = x , y , inj‚ÇÇ (c‚ÇÅ {--c‚ÇÅ--} , c‚ÇÇ {--c‚ÇÇ--} , ‚ÜíequalInType-TRUE i)



-- MOVE to computation
#strongBool‚Üí#strongBool! : {w : ùïé¬∑} {a b : CTerm}
                           ‚Üí #‚áì‚Üí#‚áì! w a
                           ‚Üí #‚áì‚Üí#‚áì! w b
                           ‚Üí #strongBool w a b
                           ‚Üí #strongBool! w a b
#strongBool‚Üí#strongBool! {w} {a} {b} c‚ÇÅ c‚ÇÇ (x , y , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ)) = x , y , inj‚ÇÅ (#‚áõ‚Üí#‚áõ! {w} {a} {#INL x} c‚ÇÅ tt d‚ÇÅ , #‚áõ‚Üí#‚áõ! {w} {b} {#INL y} c‚ÇÇ tt d‚ÇÇ)
#strongBool‚Üí#strongBool! {w} {a} {b} c‚ÇÅ c‚ÇÇ (x , y , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ)) = x , y , inj‚ÇÇ (#‚áõ‚Üí#‚áõ! {w} {a} {#INR x} c‚ÇÅ tt d‚ÇÅ , #‚áõ‚Üí#‚áõ! {w} {b} {#INR y} c‚ÇÇ tt d‚ÇÇ)



-- MOVE to computation
#strongBool!-mon : {w w' : ùïé¬∑} {a b : CTerm}
                   ‚Üí w ‚äë¬∑ w'
                   ‚Üí #strongBool! w a b
                   ‚Üí #strongBool! w' a b
#strongBool!-mon {w} {w'} {a} {b} e (x , y , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ)) = x , y , inj‚ÇÅ (‚àÄùïé-mon e d‚ÇÅ , ‚àÄùïé-mon e d‚ÇÇ)
#strongBool!-mon {w} {w'} {a} {b} e (x , y , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ)) = x , y , inj‚ÇÇ (‚àÄùïé-mon e d‚ÇÅ , ‚àÄùïé-mon e d‚ÇÇ)


-- MOVE to computation
#strongBool!‚Üí#strongBool : {w : ùïé¬∑} {a b : CTerm}
                           ‚Üí #strongBool! w a b
                           ‚Üí #strongBool w a b
#strongBool!‚Üí#strongBool {w} {a} {b} (x , y , inj‚ÇÅ (d‚ÇÅ , d‚ÇÇ)) = x , y , inj‚ÇÅ (#‚áõ!‚Üí#‚áõ {w} {a} {#INL x} d‚ÇÅ , #‚áõ!‚Üí#‚áõ {w} {b} {#INL y} d‚ÇÇ)
#strongBool!‚Üí#strongBool {w} {a} {b} (x , y , inj‚ÇÇ (d‚ÇÅ , d‚ÇÇ)) = x , y , inj‚ÇÇ (#‚áõ!‚Üí#‚áõ {w} {a} {#INR x} d‚ÇÅ , #‚áõ!‚Üí#‚áõ {w} {b} {#INR y} d‚ÇÇ)



-- MOVE to computation -- prove #‚áì‚Üí#‚áì!-NUM using this
#‚áì‚Üí#‚áì!-val : (w : ùïé¬∑) (a : CTerm) ‚Üí #isValue a ‚Üí #‚áì‚Üí#‚áì! w a
#‚áì‚Üí#‚áì!-val w a isva w1 e1 = lift h
  where
    h : (v : CTerm) (w2 : ùïé¬∑) ‚Üí #isValue v ‚Üí a #‚áì v from w1 to w2 ‚Üí a #‚áì! v at w1
    h v w2 isv comp rewrite sym (#‚áì-from-to‚Üí‚â° a v w1 w2 comp isva) = #‚áì!-refl a w1


-- MOVE to computation
#‚áõ!-val‚Üí#‚áì‚Üí#‚áì! : {w : ùïé¬∑} {a b : CTerm}
                   ‚Üí b #‚áõ! a at w
                   ‚Üí #isValue a
                   ‚Üí #‚áì‚Üí#‚áì! w b
#‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {a} {b} comp isv = #‚áõ!-pres-#‚áì‚Üí#‚áì!-rev {w} {a} {b} comp (#‚áì‚Üí#‚áì!-val w a isv)


-- MOVE to computation
#strongBool!‚Üí#‚áì‚Üí#‚áì!‚Çó : {w : ùïé¬∑} {a b : CTerm}
                        ‚Üí #strongBool! w a b
                        ‚Üí #‚áì‚Üí#‚áì! w a
#strongBool!‚Üí#‚áì‚Üí#‚áì!‚Çó {w} {a} {b} (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = #‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {#INL x} {a} c‚ÇÅ tt
#strongBool!‚Üí#‚áì‚Üí#‚áì!‚Çó {w} {a} {b} (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = #‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {#INR x} {a} c‚ÇÅ tt


-- MOVE to computation
#strongBool!‚Üí#‚áì‚Üí#‚áì!·µ£ : {w : ùïé¬∑} {a b : CTerm}
                        ‚Üí #strongBool! w a b
                        ‚Üí #‚áì‚Üí#‚áì! w b
#strongBool!‚Üí#‚áì‚Üí#‚áì!·µ£ {w} {a} {b} (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = #‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {#INL y} {b} c‚ÇÇ tt
#strongBool!‚Üí#‚áì‚Üí#‚áì!·µ£ {w} {a} {b} (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = #‚áõ!-val‚Üí#‚áì‚Üí#‚áì! {w} {#INR y} {b} c‚ÇÇ tt


‚ÜíequalInTypeTCONST : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                      ‚Üí isType i w A -- should be provable from the next one
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí TCONSTeq (equalInType i w' A) w' a b)
                      ‚Üí equalInType i w (#TCONST A) a b
‚ÜíequalInTypeTCONST {w} {i} {a} {b} {A} ist h =
  eqTypesTCONST‚Üê ist , Mod.‚àÄùïé-‚ñ°Func M aw h
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalInType i w' A) w' a b
                        ‚Üí TCONSTeq (equalTerms i w' (eqTypes-mon (uni i) ist w' e')) w' a b)
    aw w' e' (q , c‚ÇÅ , c‚ÇÇ) = equalInType‚ÜíeqInType refl {eqTypes-mon (uni i) ist w' e'} q , c‚ÇÅ , c‚ÇÇ



‚ÜíequalInTypeSUBSING : {w : ùïé¬∑} {i : ‚Ñï} {a b A : CTerm}
                      ‚Üí isType i w A -- should be provable from the next one
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí SUBSINGeq (equalInType i w' A) a b)
                      ‚Üí equalInType i w (#SUBSING A) a b
‚ÜíequalInTypeSUBSING {w} {i} {a} {b} {A} ist h =
  eqTypesSUBSING‚Üê ist , Mod.‚àÄùïé-‚ñ°Func M aw h
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí SUBSINGeq (equalInType i w' A) a b
                        ‚Üí SUBSINGeq (equalTerms i w' (eqTypes-mon (uni i) ist w' e')) a b)
    aw w' e' (q‚ÇÅ , q‚ÇÇ) =
      equalInType‚ÜíeqInType refl {eqTypes-mon (uni i) ist w' e'} q‚ÇÅ ,
      equalInType‚ÜíeqInType refl {eqTypes-mon (uni i) ist w' e'} q‚ÇÇ



‚ÜíequalInTypePURE : {w : ùïé¬∑} {i : ‚Ñï} {a b : CTerm}
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí PUREeq a b)
                      ‚Üí equalInType i w #PURE a b
‚ÜíequalInTypePURE {w} {i} {a} {b} h =
  eqTypesPURE‚Üê , Mod.‚àÄùïé-‚ñ°Func M aw h
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí PUREeq a b
                        ‚Üí PUREeq a b)
    aw w' e' p = p



equalInType-BOOL!‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí equalInType i w #BOOL! a b
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongBool! w' a b)
equalInType-BOOL!‚Üí i w a b eqi =
  Mod.‚ñ°-idem M (Mod.‚àÄùïé-‚ñ°Func M aw c)
  where
    c : ‚ñ°¬∑ w (Œª w' _ ‚Üí TCONSTeq (equalInType i w' #BOOL) w' a b)
    c = equalInTypeTCONST‚Üí eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí TCONSTeq (equalInType i w' #BOOL) w' a b ‚Üí Mod.‚ñ° M w' (‚ÜëwPred' (Œª w'' _ ‚Üí #strongBool! w'' a b) e'))
    aw w1 e1 (h , c‚ÇÅ , c‚ÇÇ) = Mod.‚àÄùïé-‚ñ°Func M aw' c'
      where
        c' : ‚ñ°¬∑ w1 (Œª w2 _ ‚Üí #strongBool w2 a b)
        c' = equalInType-BOOL‚Üí i w1 a b h

        aw' : ‚àÄùïé w1 (Œª w2 e2 ‚Üí #strongBool w2 a b ‚Üí ‚ÜëwPred' (Œª w3 _ ‚Üí #strongBool! w3 a b) e1 w2 e2)
        aw' w2 e2 q z = #strongBool‚Üí#strongBool! {w2} {a} {b} (‚àÄùïé-mon e2 c‚ÇÅ) (‚àÄùïé-mon e2 c‚ÇÇ) q


‚ÜíequalInType-BOOL! : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                    ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongBool! w' a b)
                    ‚Üí equalInType i w #BOOL! a b
‚ÜíequalInType-BOOL! i w a b h =
  ‚ÜíequalInTypeTCONST (isTypeBOOL w i) (Mod.‚àÄùïé-‚ñ°Func M aw h)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #strongBool! w' a b ‚Üí TCONSTeq (equalInType i w' #BOOL) w' a b)
    aw w' e' q =
      ‚ÜíequalInType-BOOL i w' a b (Mod.‚àÄùïé-‚ñ° M (Œª w'' e'' ‚Üí #strongBool!‚Üí#strongBool {w''} {a} {b} (#strongBool!-mon {w'} {w''} {a} {b} e'' q))) ,
      #strongBool!‚Üí#‚áì‚Üí#‚áì!‚Çó {w'} {a} {b} q ,
      #strongBool!‚Üí#‚áì‚Üí#‚áì!·µ£ {w'} {a} {b} q



#strongBool-INL : (w : ùïé¬∑) (x y : CTerm) ‚Üí #strongBool w (#INL x) (#INL y)
#strongBool-INL w x y = x , y , inj‚ÇÅ (#compAllRefl (#INL x) w , #compAllRefl (#INL y) w)


#strongBool!-INL : (w : ùïé¬∑) (x y : CTerm) ‚Üí #strongBool! w (#INL x) (#INL y)
#strongBool!-INL w x y = x , y , inj‚ÇÅ (#‚áõ!-refl {w} {#INL x} , #‚áõ!-refl {w} {#INL y})


#strongBool-INR : (w : ùïé¬∑) (x y : CTerm) ‚Üí #strongBool w (#INR x) (#INR y)
#strongBool-INR w x y = x , y , inj‚ÇÇ (#compAllRefl (#INR x) w , #compAllRefl (#INR y) w)


#strongBool!-INR : (w : ùïé¬∑) (x y : CTerm) ‚Üí #strongBool! w (#INR x) (#INR y)
#strongBool!-INR w x y = x , y , inj‚ÇÇ (#‚áõ!-refl {w} {#INR x} , #‚áõ!-refl {w} {#INR y})


‚ÜíequalInType-BOOL-INL : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm)
                         ‚Üí equalInType i w #BOOL (#INL x) (#INL y)
‚ÜíequalInType-BOOL-INL i w x y = ‚ÜíequalInType-BOOL i w (#INL x) (#INL y) (Mod.‚àÄùïé-‚ñ° M Œª w' e ‚Üí #strongBool-INL w' x y)


‚ÜíequalInType-BOOL!-INL : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm)
                         ‚Üí equalInType i w #BOOL! (#INL x) (#INL y)
‚ÜíequalInType-BOOL!-INL i w x y = ‚ÜíequalInType-BOOL! i w (#INL x) (#INL y) (Mod.‚àÄùïé-‚ñ° M Œª w' e ‚Üí #strongBool!-INL w' x y)


‚ÜíequalInType-BOOL-INR : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm)
                         ‚Üí equalInType i w #BOOL (#INR x) (#INR y)
‚ÜíequalInType-BOOL-INR i w x y = ‚ÜíequalInType-BOOL i w (#INR x) (#INR y) (Mod.‚àÄùïé-‚ñ° M Œª w' e ‚Üí #strongBool-INR w' x y)


‚ÜíequalInType-BOOL!-INR : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm)
                          ‚Üí equalInType i w #BOOL! (#INR x) (#INR y)
‚ÜíequalInType-BOOL!-INR i w x y = ‚ÜíequalInType-BOOL! i w (#INR x) (#INR y) (Mod.‚àÄùïé-‚ñ° M Œª w' e ‚Üí #strongBool!-INR w' x y)


#weakBool!‚ÜíTSQUASHeq-#BOOL! : {i : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                             ‚Üí #weakBool! w a b
                             ‚Üí TSQUASHeq (equalInType i w #BOOL!) w a b
#weakBool!‚ÜíTSQUASHeq-#BOOL! {i} {w} {a} {b} h =
  TSQUASH-eq‚Üí (c (snd (snd (lower (h w (‚äë-refl¬∑ _))))) ) --(TSQUASH-eq-base (#NUM n) (#NUM n) tt tt c‚ÇÅ c‚ÇÇ (NUM-equalInType-NAT i w n))
  where
    x : CTerm
    x = fst (lower (h w (‚äë-refl¬∑ _)))

    y : CTerm
    y = fst (snd (lower (h w (‚äë-refl¬∑ _))))

    c : ((a #‚áì! #INL x at w √ó b #‚áì! #INL y at w) ‚äé (a #‚áì! #INR x at w √ó b #‚áì! #INR y at w)) ‚Üí TSQUASH-eq (equalInType i w #BOOL!) w a b
    c (inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = TSQUASH-eq-base (#INL x) (#INL y) tt tt (#‚áì!‚Üí‚àºC! {w} {a} {#INL x} c‚ÇÅ) (#‚áì!‚Üí‚àºC! {w} {b} {#INL y} c‚ÇÇ) (‚ÜíequalInType-BOOL!-INL i w x y)
    c (inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = TSQUASH-eq-base (#INR x) (#INR y) tt tt (#‚áì!‚Üí‚àºC! {w} {a} {#INR x} c‚ÇÅ) (#‚áì!‚Üí‚àºC! {w} {b} {#INR y} c‚ÇÇ) (‚ÜíequalInType-BOOL!-INR i w x y)



‚ÜíequalInType-QTBOOL! : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                       ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakBool! w' a b)
                       ‚Üí equalInType i w #QTBOOL! a b
‚ÜíequalInType-QTBOOL! i w a b j =
  ‚â°CTerm‚ÜíequalInType (sym #QTBOOL!‚â°) (equalInTypeTSQUASH‚Üê (Mod.‚àÄùïé-‚ñ°Func M aw j))
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí #weakBool! w' a b ‚Üí TSQUASHeq (equalInType i w' #BOOL!) w' a b)
    aw w' e  h = #weakBool!‚ÜíTSQUASHeq-#BOOL! h





TSQUASH-eq-BOOL!‚ÜíweakMonEq! : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                             ‚Üí TSQUASH-eq (equalInType i w #BOOL!) w a b
                             ‚Üí Lift (lsuc L) (#‚áì!same-bool w a b)
TSQUASH-eq-BOOL!‚ÜíweakMonEq! i w a b (TSQUASH-eq-base a1 a2 i1 i2 c1 c2 ea) =
  Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw j)
  where
    j : ‚ñ°¬∑ w (Œª w' _ ‚Üí #strongBool! w' a1 a2)
    j = equalInType-BOOL!‚Üí i w a1 a2 ea

    aw : ‚àÄùïé w (Œª w1 e1 ‚Üí #strongBool! w1 a1 a2 ‚Üí Lift (lsuc L) (#‚áì!same-bool w a b))
    aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ' , c‚ÇÇ')) = lift (x , y , inj‚ÇÅ (‚àºC!‚Üí#‚áì! {w} {a} {#INL x} tt c‚ÇÅ'' , ‚àºC!‚Üí#‚áì! {w} {b} {#INL y} tt c‚ÇÇ'')) --‚àºC!‚Üí#‚áì {w} {a} {#INL x} tt c‚ÇÅ'' , ‚àºC!‚Üí#‚áì {w} {b} {#INL y} tt c‚ÇÇ''))
      where
        c‚ÇÅ'' : ‚àºC! w a (#INL x)
        c‚ÇÅ'' = ‚â°R‚Üí‚àºC! {w} {a} {a1} {#INL x} (#‚áõ!‚Üí‚â° {a1} {#INL x} {w1} c‚ÇÅ' i1) {--(#compAllVal c‚ÇÅ' i1)--} c1

        c‚ÇÇ'' : ‚àºC! w b (#INL y)
        c‚ÇÇ'' = ‚â°R‚Üí‚àºC! {w} {b} {a2} {#INL y} (#‚áõ!‚Üí‚â° {a2} {#INL y} {w1} c‚ÇÇ' i2) {--(#compAllVal c‚ÇÇ' i2)--} c2
    aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ' , c‚ÇÇ')) = lift (x , y , inj‚ÇÇ (‚àºC!‚Üí#‚áì! {w} {a} {#INR x} tt c‚ÇÅ'' , ‚àºC!‚Üí#‚áì! {w} {b} {#INR y} tt c‚ÇÇ'')) --‚àºC!‚Üí#‚áì {w} {a} {#INR x} tt c‚ÇÅ'' , ‚àºC!‚Üí#‚áì {w} {b} {#INR y} tt c‚ÇÇ''))
      where
        c‚ÇÅ'' : ‚àºC! w a (#INR x)
        c‚ÇÅ'' = ‚â°R‚Üí‚àºC! {w} {a} {a1} {#INR x} (#‚áõ!‚Üí‚â° {a1} {#INR x} {w1} c‚ÇÅ' i1) {--(#compAllVal c‚ÇÅ' i1)--} c1

        c‚ÇÇ'' : ‚àºC! w b (#INR y)
        c‚ÇÇ'' = ‚â°R‚Üí‚àºC! {w} {b} {a2} {#INR y} (#‚áõ!‚Üí‚â° {a2} {#INR y} {w1} c‚ÇÇ' i2) {--(#compAllVal c‚ÇÇ' i2)--} c2
TSQUASH-eq-BOOL!‚ÜíweakMonEq! i w a b (TSQUASH-eq-trans t h1 h2) =
  lift-#‚áì!same-bool-trans {w} {a} {t} {b} (TSQUASH-eq-BOOL!‚ÜíweakMonEq! i w a t h1) (TSQUASH-eq-BOOL!‚ÜíweakMonEq! i w t b h2)


equalInType-QTBOOL!‚Üí : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                      ‚Üí equalInType i w #QTBOOL! a b
                      ‚Üí ‚ñ°¬∑ w (Œª w' _ ‚Üí #weakBool! w' a b)
equalInType-QTBOOL!‚Üí i w a b eqi =
  Mod.‚àÄùïé-‚ñ°Func M aw (Mod.‚Üí‚ñ°‚àÄùïé M eqj)
  where
    eqj : ‚ñ°¬∑ w (Œª w' _ ‚Üí TSQUASHeq (equalInType i w' #BOOL!) w' a b)
    eqj = equalInTypeTSQUASH‚Üí {w} {i} {a} {b} {#BOOL!} eqi

    aw : ‚àÄùïé w (Œª w' e' ‚Üí ‚àÄùïé w' (‚ÜëwPred (Œª w'' e ‚Üí TSQUASHeq (equalInType i w'' #BOOL!) w'' a b) e')
                        ‚Üí #weakBool! w' a b)
    aw w1 e1 h w2 e2 = TSQUASH-eq-BOOL!‚ÜíweakMonEq! i w2 a b (‚ÜíTSQUASH-eq (h w2 e2))



INL-equalInType-QTBOOL! : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm) ‚Üí equalInType i w #QTBOOL! (#INL x) (#INL y)
INL-equalInType-QTBOOL! i w x y =
  ‚ÜíequalInType-QTBOOL! i w (#INL x) (#INL y) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakBool!-#INL w' x y))


INR-equalInType-QTBOOL! : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm) ‚Üí equalInType i w #QTBOOL! (#INR x) (#INR y)
INR-equalInType-QTBOOL! i w x y =
  ‚ÜíequalInType-QTBOOL! i w (#INR x) (#INR y) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakBool!-#INR w' x y))


{--
INL-equalInType-QTBOOL : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm) ‚Üí equalInType i w #QTBOOL (#INL x) (#INL y)
INL-equalInType-QTBOOL i w x y =
  ‚ÜíequalInType-QTBOOL i w (#INL x) (#INL y) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakBool-#INL w' x y))


INR-equalInType-QTBOOL : (i : ‚Ñï) (w : ùïé¬∑) (x y : CTerm) ‚Üí equalInType i w #QTBOOL (#INR x) (#INR y)
INR-equalInType-QTBOOL i w x y =
  ‚ÜíequalInType-QTBOOL i w (#INR x) (#INR y) (Mod.‚àÄùïé-‚ñ° M (Œª w' e' ‚Üí #weakBool-#INR w' x y))
--}


BTRUE‚ààQTBOOL! : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType i w #QTBOOL! #BTRUE
BTRUE‚ààQTBOOL! i w = INL-equalInType-QTBOOL! i w #AX #AX


BFALSE‚ààQTBOOL! : (i : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType i w #QTBOOL! #BFALSE
BFALSE‚ààQTBOOL! i w = INR-equalInType-QTBOOL! i w #AX #AX


eqTypesQTBOOL! : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #QTBOOL! #QTBOOL!
eqTypesQTBOOL! {w} {i} = eqTypesTSQUASH‚Üê (isTypeBOOL! w i)


equalInType-QTBOOL!‚ÜíequalTypes-ASSERT‚ÇÉ : {n : ‚Ñï} {w : ùïé¬∑} {a b : CTerm}
                                      ‚Üí equalInType n w #QTBOOL! a b
                                      ‚Üí equalTypes n w (#ASSERT‚ÇÉ a) (#ASSERT‚ÇÉ b)
equalInType-QTBOOL!‚ÜíequalTypes-ASSERT‚ÇÉ {n} {w} {a} {b} eqb =
  ‚â°CTerm‚ÜíeqTypes
    (sym (#ASSERT‚ÇÉ‚â° a))
    (sym (#ASSERT‚ÇÉ‚â° b))
    (eqTypesEQ‚Üê (eqTypesQTBOOL! {w} {n}) eqb (BTRUE‚ààQTBOOL! n w))



isType-#NAT‚ÜíQTBOOL : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT‚ÜíQTBOOL
isType-#NAT‚ÜíQTBOOL w n = eqTypesFUN‚Üê eqTypesNAT (eqTypesQTBOOL {w} {n})


isType-#NAT!‚ÜíQTBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w #NAT!‚ÜíQTBOOL!
isType-#NAT!‚ÜíQTBOOL! w n = eqTypesFUN‚Üê isTypeNAT! (eqTypesQTBOOL! {w} {n})


eqTypesQTNAT! : {w : ùïé¬∑} {i : ‚Ñï} ‚Üí equalTypes i w #QTNAT! #QTNAT!
eqTypesQTNAT! {w} {i} = eqTypesTSQUASH‚Üê isTypeNAT!

\end{code}
