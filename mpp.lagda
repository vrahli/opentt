\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode
open import MarkovPrinciple


module mpp {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
           (C : Choice)
           (K : Compatible W C)
           (G : GetChoice {L} W C K)
           (X : ChoiceExt {L} W C)
           (N : NewChoice {L} W C K G)
           (EM : ExcludedMiddle (lsuc(L)))
           (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
--open import newChoiceDef(W)(C)(K)(G)(N)
--open import choiceExtDef(W)(C)(K)(G)(X)

open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(G)(X)(N)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms4(W)(C)(K)(G)(X)(N)(EC) using (¬¨Names‚Üí‚áì)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props0(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚àÄùïé-‚ñ°Func2)
open import props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-EQ‚Üí ; ‚â°CTerm‚ÜíequalInType ; equalInType-local ; equalInType-EQ ; equalInType-mon ;
         ‚â°CTerm‚ÜíeqTypes ; eqTypesFUN‚Üê ; isTypeNAT! ; NUM-equalInType-NAT! ; equalInType-FUN‚Üí ; equalInType-refl ;
         equalInType-SUM ; eqTypesNEG‚Üê ; equalInType-NAT!‚Üí ; equalInType-sym ; equalInType-NEG ; equalInType-PI ;
         equalInType-FUN ; equalInType-PI‚Üí ; ‚Üí‚â°equalTypes ; ‚Üí‚â°equalInType ; ‚ÜíequalInType-QNAT!)
open import props3(W)(M)(C)(K)(G)(X)(N)(EC)
  using (isTypeBOOL ; isTypeBOOL! ; sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-NEG-ASSERT‚ÇÇ-APPLY ;
         equalInType-trans ; equalInType-BOOL‚Üí ; ‚ÜíequalInType-BOOL ; equalInType-NEG‚Üí¬¨inh ; ‚ÜíequalInType-SQUASH ;
         ‚ÜíequalInType-BOOL! ; sub0-ASSERT‚ÇÉ-APPLY ; inhType-mon ; equalInType-BOOL!‚Üí ; isTypeBOOL‚ÇÄ ; isTypeBOOL‚ÇÄ!‚Üí ;
         equalInType-BOOL‚ÇÄ‚Üí ; ‚ÜíequalInType-BOOL‚ÇÄ ; equalInType-BOOL‚ÇÄ‚ÜístrongBool ; strongBool‚ÜíequalInType-BOOL‚ÇÄ ;
         ‚ÜíequalInType-BOOL‚ÇÄ! ; equalInType-BOOL‚ÇÄ!‚Üí ; eqTypesQNAT! ; equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ ;
         equalTypes‚ÜíequalInType ; equalInType-#‚áõ-LR)
open import props4(W)(M)(C)(K)(G)(X)(N)(EC)
  using (‚ÜíequalInType-NAT!)
open import props6(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#‚áõ‚Çö-left-right-rev ; SUMeq! ; equalInType-SUM! ; equalInType-SUM!‚Üí)
open import lem_props(W)(M)(C)(K)(G)(X)(N)(EC)
open import pure(W)(M)(C)(K)(G)(X)(N)(EC)

open import mp_props(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#[0]MP-left ; #[0]MP-right ; #[0]MP-left3 ; #[0]MP-left2 ; #[0]MP-right2 ; #[0]MP-left-qt ; #[0]MP-right-qt ;
         #[0]MP-left-qt‚ÇÇ ; #[0]MP-right-qt‚ÇÇ ; #[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ; sub0-fun-mp ; ‚ÜíequalTypes-#MP-left ;
         ‚ÜíequalTypes-#MP-right ; #MP-left ; #MP-right ; sub0-fun-mp‚ÇÑ ; ‚ÜíequalTypes-#MP-left-qt ; ‚ÜíequalTypes-#MP-right-qt ;
         #MP-left-qt ; #MP-right-qt ; sub0-fun-mp‚ÇÇ ; ‚ÜíequalTypes-#MP-left3 ; ‚Üí‚ààType-FUN ;
         #MP-left3 ; ‚Üí‚ààType-PI ; sub0-fun-mp‚ÇÉ ; ‚ÜíequalTypes-#MP-left2 ;
         #MP-left2 ; #MP-right2 ; sub0-fun-mp‚ÇÜ ; ‚ÜíequalTypes-#MP-left-qt‚ÇÉ ;
         ‚ÜíequalTypes-#MP-right2 ; ‚ÜíequalTypes-#MP-right-qt‚ÇÉ ; #MP-left-qt‚ÇÉ ; #MP-right-qt‚ÇÉ)
open import mp_props2(W)(M)(C)(K)(G)(X)(N)(EC)
  using (equalInType-#MP-left-qt‚Üí ; equalInType-#MP-left-qt‚ÇÉ‚Üí ; #MP-left2‚Üí#MP-left ; #MP-left3‚Üí#MP-left2 ;
         #MP-left2‚Üí#MP-left3)
open import mp_search(W)(M)(C)(K)(G)(X)(N)(EC)
  using (#infSearchP ; mpSearch)



equalInType-ASSERT‚ÇÇ‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w (#ASSERT‚ÇÇ t) a b
                        ‚Üí equalInType n w #BOOL‚ÇÄ t #BTRUE
equalInType-ASSERT‚ÇÇ‚Üí n w t a b eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqb)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL‚ÇÄ) w' a b ‚Üí equalInType n w' #BOOL‚ÇÄ t #BTRUE)
    aw w1 e1 h = h

    eqb : ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL‚ÇÄ) w' a b)
    eqb = equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÇ‚â° t) eqa)


‚ÜíequalInType-ASSERT‚ÇÇ : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w #BOOL‚ÇÄ t #BTRUE
                        ‚Üí equalInType n w (#ASSERT‚ÇÇ t) a b
‚ÜíequalInType-ASSERT‚ÇÇ n w t a b h =
  ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚ÇÇ‚â° t)) (equalInType-EQ isTypeBOOL‚ÇÄ (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí equalInType-mon h w1 e1)))


equalInType-ASSERT‚ÇÉ‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w (#ASSERT‚ÇÉ t) a b
                        ‚Üí equalInType n w #BOOL! t #BTRUE
equalInType-ASSERT‚ÇÉ‚Üí n w t a b eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqb)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL!) w' a b ‚Üí equalInType n w' #BOOL! t #BTRUE)
    aw w1 e1 h = h

    eqb : ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL!) w' a b)
    eqb = equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÉ‚â° t) eqa)


‚ÜíequalInType-ASSERT‚ÇÉ : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w #BOOL! t #BTRUE
                        ‚Üí equalInType n w (#ASSERT‚ÇÉ t) a b
‚ÜíequalInType-ASSERT‚ÇÉ n w t a b h =
  ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚ÇÉ‚â° t)) (equalInType-EQ (isTypeBOOL! w n) (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí equalInType-mon h w1 e1)))


equalInType-ASSERT‚ÇÑ‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w (#ASSERT‚ÇÑ t) a b
                        ‚Üí equalInType n w #BOOL‚ÇÄ! t #BTRUE
equalInType-ASSERT‚ÇÑ‚Üí n w t a b eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqb)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL‚ÇÄ!) w' a b ‚Üí equalInType n w' #BOOL‚ÇÄ! t #BTRUE)
    aw w1 e1 h = h

    eqb : ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL‚ÇÄ!) w' a b)
    eqb = equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÑ‚â° t) eqa)


‚ÜíequalInType-ASSERT‚ÇÑ : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w #BOOL‚ÇÄ! t #BTRUE
                        ‚Üí equalInType n w (#ASSERT‚ÇÑ t) a b
‚ÜíequalInType-ASSERT‚ÇÑ n w t a b h =
  ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚ÇÑ‚â° t)) (equalInType-EQ (isTypeBOOL‚ÇÄ!‚Üí n w) (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí equalInType-mon h w1 e1)))


strongBool-BTRUE‚Üí : (w : ùïé¬∑) (t : CTerm)
                     ‚Üí #strongBool w t #BTRUE
                     ‚Üí Œ£ CTerm (Œª x ‚Üí t #‚áõ #INL x at w)
strongBool-BTRUE‚Üí w t (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x , c‚ÇÅ
strongBool-BTRUE‚Üí w t (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = ‚ä•-elim (h (compAllVal c‚ÇÇ tt)) --
  where
    h : (INL AX ‚â° INR ‚åú y ‚åù) ‚Üí ‚ä•
    h ()


strongBool!-BTRUE‚Üí : (w : ùïé¬∑) (t : CTerm)
                     ‚Üí #strongBool! w t #BTRUE
                     ‚Üí Œ£ CTerm (Œª x ‚Üí t #‚áõ! #INL x at w)
strongBool!-BTRUE‚Üí w t (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x , c‚ÇÅ
strongBool!-BTRUE‚Üí w t (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = ‚ä•-elim (h (‚áõ!‚Üí‚â° c‚ÇÇ tt)) --
  where
    h : (INL AX ‚â° INR ‚åú y ‚åù) ‚Üí ‚ä•
    h ()


weakBool-BTRUE‚Üí : (w : ùïé¬∑) (t : CTerm)
                   ‚Üí #weakBool! w t #BTRUE
                   ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift (lsuc L) (Œ£ CTerm (Œª x ‚Üí t #‚áì! #INL x at w')))
weakBool-BTRUE‚Üí w t h w1 e1 with lower (h w1 e1)
... | x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ) = lift (x , c‚ÇÅ)
... | x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ) = ‚ä•-elim (INLneqINR (‚áì-from-to‚Üí‚â° (INL AX) (INR ‚åú y ‚åù) w1 w1 c‚ÇÇ tt))


-- pure version
-- œÄ‚Çö (F : ‚Ñï ‚Üí ùîπ). ¬¨(Œ† (n : ‚Ñï). ¬¨(F n ‚â° true)) ‚Üí ||Œ£ (n : ‚Ñï). F n ‚â° true||
MPp : Term
MPp = PI (TPURE NAT!‚ÜíBOOL‚ÇÄ) (FUN (NEG (PI NAT! (NEG (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))
                                 (SQUASH (SUM! NAT! (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))


#MPp : CTerm
#MPp = ct MPp c
  where
    c : # MPp
    c = refl


#MPp-PI : CTerm
#MPp-PI = #PI (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) (#[0]FUN #[0]MP-left #[0]MP-right)


#MPp‚â°#PI : #MPp ‚â° #MPp-PI
#MPp‚â°#PI = CTerm‚â° refl


#MPp‚ÇÇ : CTerm
#MPp‚ÇÇ = #PI (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) (#[0]FUN #[0]MP-left3 #[0]MP-right)


#MPp‚ÇÉ : CTerm
#MPp‚ÇÉ = #PI (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) (#[0]FUN #[0]MP-left2 #[0]MP-right2)


#MPp‚ÇÑ : CTerm
#MPp‚ÇÑ = #PI (#TPURE #NAT!‚ÜíBOOL!) (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)


#MPp‚ÇÖ : CTerm
#MPp‚ÇÖ = #PI (#TPURE #QNAT!‚ÜíBOOL!) (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)


#MPp‚ÇÜ : CTerm
#MPp‚ÇÜ = #PI (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)


isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ)
isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #NAT!‚ÜíBOOL‚ÇÄ‚â°) (sym #NAT!‚ÜíBOOL‚ÇÄ‚â°)
      (eqTypesFUN‚Üê isTypeNAT! isTypeBOOL‚ÇÄ))


isType-#TPURE-NAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #NAT!‚ÜíBOOL!)
isType-#TPURE-NAT!‚ÜíBOOL! w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #NAT!‚ÜíBOOL!‚â°) (sym #NAT!‚ÜíBOOL!‚â°)
      (eqTypesFUN‚Üê isTypeNAT! (isTypeBOOL! w n)))


isType-#TPURE-QTNAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #QNAT!‚ÜíBOOL!)
isType-#TPURE-QTNAT!‚ÜíBOOL! w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #QNAT!‚ÜíBOOL!‚â°) (sym #QNAT!‚ÜíBOOL!‚â°)
      (eqTypesFUN‚Üê eqTypesQNAT! (isTypeBOOL! w n)))


isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!)
isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #NAT!‚ÜíBOOL‚ÇÄ!‚â°) (sym #NAT!‚ÜíBOOL‚ÇÄ!‚â°)
      (eqTypesFUN‚Üê isTypeNAT! (isTypeBOOL‚ÇÄ!‚Üí n w)))


#APPLY-#lam2AX : (w : ùïé¬∑) (b : CTerm) ‚Üí #APPLY #lam2AX b #‚áõ! #lamAX at w
#APPLY-#lam2AX w b w1 e1 = lift (1 , refl)


#‚áõ!-pres-equalTypes-mp-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                           ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                           ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                           ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                           ‚Üí equalTypes i w (#FUN (#MP-left b‚ÇÅ) (#MP-right b‚ÇÅ)) (#FUN (#MP-left a‚ÇÅ) (#MP-right a‚ÇÅ))
#‚áõ!-pres-equalTypes-mp-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ =
  eqTypesFUN‚Üê {w} {i} {#MP-left b‚ÇÅ} {#MP-right b‚ÇÅ} {#MP-left a‚ÇÅ} {#MP-right a‚ÇÅ}
    (‚ÜíequalTypes-#MP-left
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))
    (‚ÜíequalTypes-#MP-right
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))


#‚áõ!-pres-equalInType-mp-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                            ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                            ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                            ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                            ‚Üí equalInType i w (#FUN (#MP-left b‚ÇÅ) (#MP-right b‚ÇÅ)) (#APPLY #lam2AX b‚ÇÅ) (#APPLY #lam2AX b‚ÇÇ)
                            ‚Üí equalInType i w (#FUN (#MP-left a‚ÇÅ) (#MP-right a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ)
#‚áõ!-pres-equalInType-mp-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ b‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev
    {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
    (#APPLY-#lam2AX w a‚ÇÅ)
    (#APPLY-#lam2AX w a‚ÇÇ)
    (equalTypes‚ÜíequalInType
      (#‚áõ!-pres-equalTypes-mp-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ)
      (equalInType-#‚áõ-LR {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
        (#APPLY-#lam2AX w b‚ÇÅ) (#APPLY-#lam2AX w b‚ÇÇ)
        b‚àà))


-- As shown in not_mp, MP is invalid when considering a Beth or Kripke ‚ñ° and references
-- It is however valid when restricting to pure functions (the proof uses classical logic)
MPp-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp #lam2AX
MPp-inh n w =
  ‚â°CTerm‚ÜíequalInType
    (sym #MPp‚â°#PI)
    (equalInType-PI
      {n} {w} {#TPURE (#NAT!‚ÜíBOOL‚ÇÄ)} {#[0]FUN #[0]MP-left #[0]MP-right}
      (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ w' n)
      aw1
      aw2)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp a‚ÇÅ | sub0-fun-mp a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType (sym (sub0-fun-mp a‚ÇÅ))
        (equalInType-local (‚àÄùïé-‚ñ°Func2 awp (equalInType-TPURE‚Üí‚Çó eqa) (equalInType-TPURE‚Üí·µ£ eqa)))
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!‚Çô a‚ÇÅ w'
                           ‚Üí #‚áõ!‚Çô a‚ÇÇ w'
                           ‚Üí equalInType n w' (#FUN (#MP-left a‚ÇÅ) (#MP-right a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
      awp w1' e1' (x‚ÇÅ , comp‚ÇÅ , nnx‚ÇÅ , nex‚ÇÅ) (x‚ÇÇ , comp‚ÇÇ , nnx‚ÇÇ , nex‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp-fun n w1' a‚ÇÅ a‚ÇÇ x‚ÇÅ x‚ÇÇ
          (equalInType-mon (equalInType-TPURE‚Üí eqa) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             (‚ÜíequalTypes-#MP-right (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             aw3)

        where
        eqx : equalInType n w1' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) x‚ÇÅ x‚ÇÇ
        eqx = equalInType-#‚áõ-LR comp‚ÇÅ comp‚ÇÇ (equalInType-mon eqa w1' e1')

        aw3 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left x‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right x‚ÇÅ) (#APPLY (#APPLY #lam2AX x‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX x‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÇ x‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÇ x‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM! {B = #[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)} (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType n w' #NAT!)
                                                  (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                  w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY (#NUM k) x‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÇ-APPLY a x‚ÇÅ | sub0-ASSERT‚ÇÇ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL‚ÇÄ (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí
                               (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° (equalInType-refl (equalInType-TPURE‚Üí eqx)))
                               w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ a)) (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ b))
                        aw5' = equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-NEG‚Üí¬¨inh eqb w3 e3 aw5)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)))) (sub0 b (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)))))
                    aw6 w4 e4 a b ea rewrite sub0-NEG-ASSERT‚ÇÇ-APPLY a x‚ÇÅ | sub0-NEG-ASSERT‚ÇÇ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL‚ÇÄ (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí
                               (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° (equalInType-refl (equalInType-TPURE‚Üí eqx)))
                               w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#NEG (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ a))) (#NEG (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ b)))
                        aw5' = eqTypesNEG‚Üê (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eb)

                    aw7 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b
                                         ‚Üí equalInType n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                       (#APPLY #lam2AX a) (#APPLY #lam2AX b))
                    aw7 w4 e4 b‚ÇÅ b‚ÇÇ eb =
                      ‚â°CTerm‚ÜíequalInType
                        (sym (sub0-NEG-ASSERT‚ÇÇ-APPLY b‚ÇÅ x‚ÇÅ))
                        (equalInType-NEG (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ
                                           (equalInType-FUN‚Üí
                                             (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° (equalInType-refl (equalInType-TPURE‚Üí eqx)))
                                             w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) b‚ÇÅ b‚ÇÅ (equalInType-refl eb)))
                                         aw8)
                      where
                        eqn : ‚ñ°¬∑ w4 (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' b‚ÇÅ b‚ÇÇ)
                        eqn = equalInType-NAT!‚Üí n w4 b‚ÇÅ b‚ÇÇ eb

                        aw8 : ‚àÄùïé w4 (Œª w' _ ‚Üí (c‚ÇÅ c‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#ASSERT‚ÇÇ (#APPLY x‚ÇÅ b‚ÇÅ)) c‚ÇÅ c‚ÇÇ)
                        aw8 w5 e5 c‚ÇÅ c‚ÇÇ ec = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw9 (Mod.‚Üë‚ñ° M eqn e5)))
                          where
                            ec0 : equalInType n w5 #BOOL‚ÇÄ (#APPLY x‚ÇÅ b‚ÇÅ) #BTRUE
                            ec0 = equalInType-ASSERT‚ÇÇ‚Üí n w5 (#APPLY x‚ÇÅ b‚ÇÅ) c‚ÇÅ c‚ÇÇ ec

                            aw9 : ‚àÄùïé w5 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' b‚ÇÅ b‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                            aw9 w6 e6 (k , d‚ÇÅ , d‚ÇÇ) = lift (lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw10 ec2)))
                              where
                                ec1 : equalInType n w6 #BOOL‚ÇÄ (#APPLY x‚ÇÅ (#NUM k)) #BTRUE
                                ec1 = equalInType-trans
                                       (equalInType-sym
                                         (equalInType-FUN‚Üí
                                           (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â°
                                             (equalInType-mon
                                               (equalInType-refl (equalInType-TPURE‚Üí eqx))
                                               w5 (‚äë-trans¬∑ (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) e5)))
                                           w6 e6 b‚ÇÅ (#NUM k)
                                           (‚ÜíequalInType-NAT! n w6 b‚ÇÅ (#NUM k) (Mod.‚àÄùïé-‚ñ° M Œª w7 e7 ‚Üí k , ‚àÄùïé-mon e7 d‚ÇÅ , #‚áõ!-refl {w7} {#NUM k}))))
                                       (equalInType-mon ec0 w6 e6)

                                ec2 : ‚ñ°¬∑ w6 (Œª w' _ ‚Üí #strongBool w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE)
                                ec2 = equalInType-BOOL‚ÇÄ‚ÜístrongBool _ _ _ _ ec1

                                aw10 : ‚àÄùïé w6  (Œª w' e' ‚Üí #strongBool w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                                aw10 w7 e7 h =
                                  lift (p (k , #AX , ‚ÜíequalInType-ASSERT‚ÇÇ
                                                       n w3 (#APPLY x‚ÇÅ (#NUM k)) #AX #AX
                                                       (strongBool‚ÜíequalInType-BOOL‚ÇÄ
                                                          n w3 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE (Mod.‚àÄùïé-‚ñ° M aw11))))
                                  where
                                    h1 : Œ£ CTerm (Œª x ‚Üí #APPLY x‚ÇÅ (#NUM k) #‚áõ #INL x at w7)
                                    h1 = strongBool-BTRUE‚Üí w7 (#APPLY x‚ÇÅ (#NUM k)) h

                                    aw11 : ‚àÄùïé w3 (Œª w' _ ‚Üí #strongBool w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE)
                                    aw11 w3' e3' =
                                      fst h1 , #AX ,
                                      -- ¬¨Names‚Üí‚áõ is used here to change the world from w7 (in h1) to the unrelated w3' world
                                      inj‚ÇÅ (¬¨Names‚Üí‚áõ w7 w3' ‚åú #APPLY x‚ÇÅ (#NUM k) ‚åù ‚åú #INL (fst h1) ‚åù
                                                     (#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} nnx‚ÇÅ refl) --(#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} (equalInType-TPURE‚Üí‚Çó eqa) refl)
                                                     (snd h1) ,
                                            #‚áõ-refl w3' #BTRUE)

                    aw5 : inhType n w3 (#PI-NEG-ASSERT‚ÇÇ x‚ÇÅ)
                    aw5 = #lam2AX , equalInType-PI {B = #[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))} (Œª w' e ‚Üí isTypeNAT!) aw6 aw7


‚ÜíinhType-ASSERT‚ÇÉ-APPLY : (i : ‚Ñï) (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí n #‚áõ! #NUM k at w
                          ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f n))
                          ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f (#NUM k)))
‚ÜíinhType-ASSERT‚ÇÉ-APPLY i w f n k f‚àà ck (t , t‚àà) =
  t ,
  ‚ÜíequalInType-ASSERT‚ÇÉ
    i w (#APPLY f (#NUM k)) t t
    (equalInType-trans
      (equalInType-FUN‚Üí
        (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL!‚â° f‚àà)
        w (‚äë-refl¬∑ w) (#NUM k) n
        (‚ÜíequalInType-NAT! i w (#NUM k) n (Mod.‚àÄùïé-‚ñ° M aw)))
      (equalInType-ASSERT‚ÇÉ‚Üí i w (#APPLY f n) t t t‚àà))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#NUM k) n)
    aw w1 e1 = k , #‚áõ!-refl {w1} {#NUM k} , ‚àÄùïé-mon e1 ck


‚ÜíinhType-ASSERT‚ÇÑ-APPLY : (i : ‚Ñï) (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL‚ÇÄ! f
                          ‚Üí n #‚áõ! #NUM k at w
                          ‚Üí inhType i w (#ASSERT‚ÇÑ (#APPLY f n))
                          ‚Üí inhType i w (#ASSERT‚ÇÑ (#APPLY f (#NUM k)))
‚ÜíinhType-ASSERT‚ÇÑ-APPLY i w f n k f‚àà ck (t , t‚àà) =
  t ,
  ‚ÜíequalInType-ASSERT‚ÇÑ
    i w (#APPLY f (#NUM k)) t t
    (equalInType-trans
      (equalInType-FUN‚Üí
        (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° f‚àà)
        w (‚äë-refl¬∑ w) (#NUM k) n
        (‚ÜíequalInType-NAT! i w (#NUM k) n (Mod.‚àÄùïé-‚ñ° M aw)))
      (equalInType-ASSERT‚ÇÑ‚Üí i w (#APPLY f n) t t t‚àà))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#NUM k) n)
    aw w1 e1 = k , #‚áõ!-refl {w1} {#NUM k} , ‚àÄùïé-mon e1 ck


#weakMonEq!-sym : (w : ùïé¬∑) (t1 t2 : CTerm)
                  ‚Üí #weakMonEq! w t1 t2
                  ‚Üí #weakMonEq! w t2 t1
#weakMonEq!-sym w t1 t2 h w1 e1 with lower (h w1 e1)
... | k , c‚ÇÅ , c‚ÇÇ = lift (k , c‚ÇÇ , c‚ÇÅ)


‚ÜíinhType-ASSERT‚ÇÉ-APPLY-qt : (i : ‚Ñï) (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
                             ‚Üí ‚ààType i w #QNAT!‚ÜíBOOL! f
                             ‚Üí #weakMonEq! w n (#NUM k)
                             ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f n))
                             ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f (#NUM k)))
‚ÜíinhType-ASSERT‚ÇÉ-APPLY-qt i w f n k f‚àà ck (t , t‚àà) =
  t ,
  ‚ÜíequalInType-ASSERT‚ÇÉ
    i w (#APPLY f (#NUM k)) t t
    (equalInType-trans
      (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #QNAT!‚ÜíBOOL!‚â° f‚àà) w (‚äë-refl¬∑ w) (#NUM k) n (‚ÜíequalInType-QNAT! i w (#NUM k) n (Mod.‚àÄùïé-‚ñ° M aw)))
      (equalInType-ASSERT‚ÇÉ‚Üí i w (#APPLY f n) t t t‚àà))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #weakMonEq! w' (#NUM k) n)
    aw w1 e1 = ‚àÄùïé-mon e1 (#weakMonEq!-sym w n (#NUM k) ck)


#¬¨Names‚ÜíinhType-ASSERT‚ÇÉ : (n : ‚Ñï) (w1 w2 : ùïé¬∑) (t : CTerm)
                           ‚Üí #¬¨Names t
                           ‚Üí (Œ£ CTerm (Œª x ‚Üí t #‚áì! #INL x at w1))
                           ‚Üí inhType n w2 (#ASSERT‚ÇÉ t)
#¬¨Names‚ÜíinhType-ASSERT‚ÇÉ n w1 w2 t nnt (x , cx) =
  #AX ,
  ‚ÜíequalInType-ASSERT‚ÇÉ n w2 t #AX #AX (‚ÜíequalInType-BOOL! n w2 t #BTRUE (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w2 (Œª w' _ ‚Üí #weakBool! w' t #BTRUE)
    aw w3 e3 w4 e4 = lift (x , #AX , inj‚ÇÅ (¬¨Names‚Üí‚áì w1 w1 w4 ‚åú t ‚åù ‚åú #INL x ‚åù nnt cx , (#‚áì!-refl #BTRUE w4)))


#¬¨Names‚ÜíinhType-ASSERT‚ÇÑ : (n : ‚Ñï) (w1 w2 : ùïé¬∑) (t : CTerm)
                           ‚Üí #¬¨Names t
                           ‚Üí (Œ£ CTerm (Œª x ‚Üí t #‚áõ! #INL x at w1))
                           ‚Üí inhType n w2 (#ASSERT‚ÇÑ t)
#¬¨Names‚ÜíinhType-ASSERT‚ÇÑ n w1 w2 t nnt (x , cx) =
  #AX ,
  ‚ÜíequalInType-ASSERT‚ÇÑ n w2 t #AX #AX (‚ÜíequalInType-BOOL‚ÇÄ! n w2 t #BTRUE (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w2 (Œª w' _ ‚Üí #strongBool! w' t #BTRUE)
    aw w3 e3 = x , #AX , inj‚ÇÅ (¬¨Names‚Üí‚áõ! w1 w3 ‚åú t ‚åù (INL ‚åú x ‚åù) nnt cx , #‚áõ!-refl {w3} {#BTRUE})


#‚áõ!-pres-equalTypes-mp-qt-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                              ‚Üí equalInType i w #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                              ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                              ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                              ‚Üí equalTypes i w (#FUN (#MP-left-qt b‚ÇÅ) (#MP-right-qt b‚ÇÅ)) (#FUN (#MP-left-qt a‚ÇÅ) (#MP-right-qt a‚ÇÅ))
#‚áõ!-pres-equalTypes-mp-qt-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ =
  eqTypesFUN‚Üê {w} {i} {#MP-left-qt b‚ÇÅ} {#MP-right-qt b‚ÇÅ} {#MP-left-qt a‚ÇÅ} {#MP-right-qt a‚ÇÅ}
    (‚ÜíequalTypes-#MP-left-qt
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))
    (‚ÜíequalTypes-#MP-right-qt
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))


#‚áõ!-pres-equalInType-mp-qt-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                               ‚Üí equalInType i w #NAT!‚ÜíBOOL! a‚ÇÅ a‚ÇÇ
                               ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                               ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                               ‚Üí equalInType i w (#FUN (#MP-left-qt b‚ÇÅ) (#MP-right-qt b‚ÇÅ)) (#APPLY #lam2AX b‚ÇÅ) (#APPLY #lam2AX b‚ÇÇ)
                               ‚Üí equalInType i w (#FUN (#MP-left-qt a‚ÇÅ) (#MP-right-qt a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ)
#‚áõ!-pres-equalInType-mp-qt-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ b‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev
    {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
    (#APPLY-#lam2AX w a‚ÇÅ)
    (#APPLY-#lam2AX w a‚ÇÇ)
    (equalTypes‚ÜíequalInType
      (#‚áõ!-pres-equalTypes-mp-qt-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ)
      (equalInType-#‚áõ-LR {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
        (#APPLY-#lam2AX w b‚ÇÅ) (#APPLY-#lam2AX w b‚ÇÇ)
        b‚àà))


-- This version uses BOOL! instead of BOOL
MPp‚ÇÑ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÑ #lam2AX
MPp‚ÇÑ-inh n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt}
    (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíBOOL! w' n)
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÑ a‚ÇÅ | sub0-fun-mp‚ÇÑ a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL!) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÑ a‚ÇÅ))
        (equalInType-local (‚àÄùïé-‚ñ°Func2 awp (equalInType-TPURE‚Üí‚Çó eqa) (equalInType-TPURE‚Üí·µ£ eqa)))
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!‚Çô a‚ÇÅ w'
                           ‚Üí #‚áõ!‚Çô a‚ÇÇ w'
                           ‚Üí equalInType n w' (#FUN (#MP-left-qt a‚ÇÅ) (#MP-right-qt a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
      awp w1' e1' (x‚ÇÅ , comp‚ÇÅ , nnx‚ÇÅ , nex‚ÇÅ) (x‚ÇÇ , comp‚ÇÇ , nnx‚ÇÇ , nex‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp-qt-fun n w1' a‚ÇÅ a‚ÇÇ x‚ÇÅ x‚ÇÇ
          (equalInType-mon (equalInType-TPURE‚Üí eqa) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left-qt (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             (‚ÜíequalTypes-#MP-right-qt (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             aw3)

        where
        eqx : equalInType n w1' (#TPURE #NAT!‚ÜíBOOL!) x‚ÇÅ x‚ÇÇ
        eqx = equalInType-#‚áõ-LR comp‚ÇÅ comp‚ÇÇ (equalInType-mon eqa w1' e1')

        aw3 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt x‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right-qt x‚ÇÅ) (#APPLY (#APPLY #lam2AX x‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX x‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÉ x‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÉ (#APPLY x‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÉ (#APPLY x‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÉ x‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM! {B = #[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)} (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType n w' #NAT!)
                                                 (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                 w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , -- #compAllRefl (#PAIR (#NUM k) t) w4 ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --(#compAllRefl (#PAIR (#NUM k) t) w4) ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÉ-APPLY (#NUM k) x‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÉ-APPLY a x‚ÇÅ | sub0-ASSERT‚ÇÉ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL! (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL!‚â° (equalInType-refl (equalInType-TPURE‚Üí eqx))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÉ (#APPLY x‚ÇÅ a)) (#ASSERT‚ÇÉ (#APPLY x‚ÇÅ b))
                        aw5' = equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÉ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-#MP-left-qt‚Üí
                                       n w2 x‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqx)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY x‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-BOOL!‚Üí n w5 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE (equalInType-ASSERT‚ÇÉ‚Üí n w5 (#APPLY x‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh')))) --lift (p (k , {!!}))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÉ (#APPLY x‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÉ-APPLY n w5 x‚ÇÅ n‚ÇÅ k (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqx)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))) k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #weakBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨Names‚ÜíinhType-ASSERT‚ÇÉ
                                                            n w6 w3 (#APPLY x‚ÇÅ (#NUM k))
                                                            (#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} nnx‚ÇÅ refl)
                                                            (lower (weakBool-BTRUE‚Üí w6 (#APPLY x‚ÇÅ (#NUM k)) wbe w6 (‚äë-refl¬∑ w6)))))


#‚áõ!-pres-equalTypes-mp-qt‚ÇÉ-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                               ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                               ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                               ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                               ‚Üí equalTypes i w (#FUN (#MP-left-qt‚ÇÉ b‚ÇÅ) (#MP-right-qt‚ÇÉ b‚ÇÅ)) (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ))
#‚áõ!-pres-equalTypes-mp-qt‚ÇÉ-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ =
  eqTypesFUN‚Üê {w} {i} {#MP-left-qt‚ÇÉ b‚ÇÅ} {#MP-right-qt‚ÇÉ b‚ÇÅ} {#MP-left-qt‚ÇÉ a‚ÇÅ} {#MP-right-qt‚ÇÉ a‚ÇÅ}
    (‚ÜíequalTypes-#MP-left-qt‚ÇÉ
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))
    (‚ÜíequalTypes-#MP-right-qt‚ÇÉ
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ!} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))


#‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                                ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ! a‚ÇÅ a‚ÇÇ
                                ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                                ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                                ‚Üí equalInType i w (#FUN (#MP-left-qt‚ÇÉ b‚ÇÅ) (#MP-right-qt‚ÇÉ b‚ÇÅ)) (#APPLY #lam2AX b‚ÇÅ) (#APPLY #lam2AX b‚ÇÇ)
                                ‚Üí equalInType i w (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ)
#‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ b‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev
    {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
    (#APPLY-#lam2AX w a‚ÇÅ)
    (#APPLY-#lam2AX w a‚ÇÇ)
    (equalTypes‚ÜíequalInType
      (#‚áõ!-pres-equalTypes-mp-qt‚ÇÉ-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ)
      (equalInType-#‚áõ-LR {i} {_} {_} {_} {#lamAX} {_} {#lamAX}
        (#APPLY-#lam2AX w b‚ÇÅ) (#APPLY-#lam2AX w b‚ÇÇ)
        b‚àà))


-- This version uses NAT! and BOOL!
MPp‚ÇÜ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÜ #lam2AX
MPp‚ÇÜ-inh n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL‚ÇÄ!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ! w' n)
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÜ a‚ÇÅ))
        (equalInType-local (‚àÄùïé-‚ñ°Func2 awp (equalInType-TPURE‚Üí‚Çó eqa) (equalInType-TPURE‚Üí·µ£ eqa)))
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!‚Çô a‚ÇÅ w'
                           ‚Üí #‚áõ!‚Çô a‚ÇÇ w'
                           ‚Üí equalInType n w' (#FUN (#MP-left-qt‚ÇÉ a‚ÇÅ) (#MP-right-qt‚ÇÉ a‚ÇÅ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
      awp w1' e1' (x‚ÇÅ , comp‚ÇÅ , nnx‚ÇÅ , nex‚ÇÅ) (x‚ÇÇ , comp‚ÇÇ , nnx‚ÇÇ , nex‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp-qt‚ÇÉ-fun n w1' a‚ÇÅ a‚ÇÇ x‚ÇÅ x‚ÇÇ
          (equalInType-mon (equalInType-TPURE‚Üí eqa) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInType-TPURE‚Üí eqx)))
             aw3)

        where
        eqx : equalInType n w1' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ!) x‚ÇÅ x‚ÇÇ
        eqx = equalInType-#‚áõ-LR comp‚ÇÅ comp‚ÇÇ (equalInType-mon eqa w1' e1')

        aw3 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt‚ÇÉ x‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right-qt‚ÇÉ x‚ÇÅ) (#APPLY (#APPLY #lam2AX x‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX x‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÖ x‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM! {B = #[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR)} (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq! (equalInType n w' #NAT!)
                                                  (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                                                  w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      #‚áõ!-refl {w4} {#PAIR (#NUM k) t} , --#compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY (#NUM k) x‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû x‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÑ-APPLY a x‚ÇÅ | sub0-ASSERT‚ÇÑ-APPLY b x‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL‚ÇÄ! (#APPLY x‚ÇÅ a) (#APPLY x‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ!‚â° (equalInType-refl (equalInType-TPURE‚Üí eqx))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ a)) (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ b))
                        aw5' = equalInType-BOOL‚ÇÄ!‚ÜíequalTypes-ASSERT‚ÇÑ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-#MP-left-qt‚ÇÉ‚Üí
                                       n w2 x‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqx)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-BOOL‚ÇÄ!‚Üí n w5 (#APPLY x‚ÇÅ (#NUM k)) #BTRUE (equalInType-ASSERT‚ÇÑ‚Üí n w5 (#APPLY x‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh')))) --lift (p (k , {!!}))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÑ (#APPLY x‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÑ-APPLY n w5 x‚ÇÅ n‚ÇÅ k (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqx)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))) k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #strongBool! w' (#APPLY x‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨Names‚ÜíinhType-ASSERT‚ÇÑ
                                                            n w6 w3 (#APPLY x‚ÇÅ (#NUM k))
                                                            (#¬¨Names-APPLY {x‚ÇÅ} {#NUM k} nnx‚ÇÅ refl)
                                                            (strongBool!-BTRUE‚Üí w6 (#APPLY x‚ÇÅ (#NUM k)) wbe)))


-- This is similar to MPp-inh but proved here for #MPp‚ÇÇ, which is stated using ¬¨¬¨‚àÉ, instead of #MPp, which is stated using ¬¨‚àÄ¬¨
MPp‚ÇÇ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÇ #lam2AX
MPp‚ÇÇ-inh n w =
  ‚Üí‚ààType-PI
    n w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) (#TPURE #NAT!‚ÜíBOOL‚ÇÄ)
    (#[0]FUN #[0]MP-left #[0]MP-right)
    (#[0]FUN #[0]MP-left3 #[0]MP-right)
    #lam2AX #lam2AX (isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ w n) p2 (Œª w1 e1 a b h ‚Üí h)
    p3 (MPp-inh n w)
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÅ))
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 (equalInType-TPURE‚Üí f‚àà)) (‚ÜíequalTypes-#MP-right (equalInType-TPURE‚Üí f‚àà)))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) a
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)) b‚ÇÅ b‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)) b‚ÇÅ b‚ÇÇ)
    p3 w1 e1 a b‚ÇÅ b‚ÇÇ a‚àà b‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp‚ÇÇ a))
        (‚Üí‚ààType-FUN
           n w1 (#MP-left a) (#MP-left3 a) (#MP-right a) (#MP-right a)
           b‚ÇÅ b‚ÇÇ (‚ÜíequalTypes-#MP-left3 (equalInType-TPURE‚Üí a‚àà)) (‚ÜíequalTypes-#MP-right (equalInType-TPURE‚Üí a‚àà))
           (Œª w2 e2 x y h ‚Üí #MP-left2‚Üí#MP-left n w2 a x y (equalInType-mon (equalInType-TPURE‚Üí a‚àà) w2 e2) (#MP-left3‚Üí#MP-left2 n w2 a x y (equalInType-mon (equalInType-TPURE‚Üí a‚àà) w2 e2) h))
           (Œª w2 e2 a b h ‚Üí h) (‚Üí‚â°equalInType (sub0-fun-mp a) b‚àà))


#[4]ITE : CTerm4 ‚Üí CTerm4 ‚Üí CTerm4 ‚Üí CTerm4
#[4]ITE a b c = ct4 (ITE ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù) d
  where
    d : #[ 0 ‚à∑ 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [ 4 ] ] ITE ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù
    d rewrite fvars-ITE0 ‚åú a ‚åù ‚åú b ‚åù ‚åú c ‚åù =
      ‚äÜ‚Üí‚äÜ? {fvars ‚åú a ‚åù ++ fvars ‚åú b ‚åù ++ fvars ‚åú c ‚åù} {0 ‚à∑ 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ [ 4 ]}
            (‚äÜ++ {Var} {fvars ‚åú a ‚åù} {fvars ‚åú b ‚åù ++ fvars ‚åú c ‚åù}
            (‚äÜ?‚Üí‚äÜ (CTerm4.closed a))
            (‚äÜ++ {Var} {fvars ‚åú b ‚åù} {fvars ‚åú c ‚åù} (‚äÜ?‚Üí‚äÜ (CTerm4.closed b)) (‚äÜ?‚Üí‚äÜ (CTerm4.closed c))))


-- let G = x in Œª_.‚ü® fix(ŒªR.Œªn.if G(n) then n else let z = suc(n) in R(z)) 0, ‚ãÜ ‚ü©
#lamInfSearchPbody : CTerm0
#lamInfSearchPbody =
  #[0]LET #[0]VAR
    (#[1]LAMBDA -- cond
      (#[2]PAIR
        (#[2]APPLY
          (#[2]FIX
            (#[2]LAMBDA -- R
              (#[3]LAMBDA -- n
                (#[4]ITE (#[4]APPLY #[4]VAR3 #[4]VAR0)
                         (#[4]VAR0)
                         (#[4]LET (#[4]SUC #[4]VAR0) (#[5]APPLY #[5]VAR2 #[5]VAR0))))))
          (#[2]NUM 0))
        #[2]AX))


-- ŒªF.let G = F in Œª_.‚ü® fix(ŒªR.Œªn.if G(n) then n else let z = suc(n) in R(z)) 0, ‚ãÜ ‚ü©
-- i.e., essentially ŒªF.Œª_.‚ü® fix(ŒªR.Œªn.if F(n) then n else R(suc(n))) 0, ‚ãÜ ‚ü©
-- with call-by-values
#lamInfSearchP : CTerm
#lamInfSearchP =
  #LAMBDA -- F
    #lamInfSearchPbody


#letInfSearchPbody : CTerm0
#letInfSearchPbody =
  #[0]LAMBDA -- cond
      (#[1]PAIR
        (#[1]APPLY
          (#[1]FIX
            (#[1]LAMBDA -- R
              (#[2]LAMBDA -- n
                (#[3]ITE (#[3]APPLY #[3]VAR3 #[3]VAR0)
                         (#[3]VAR0)
                         (#[3]LET (#[3]SUC #[3]VAR0) (#[4]APPLY #[4]VAR2 #[4]VAR0))))))
          (#[1]NUM 0))
        #[1]AX)


#letInfSearchP : CTerm ‚Üí CTerm
#letInfSearchP F =
  #LET F #letInfSearchPbody


#lamInfSearchPP : CTerm ‚Üí CTerm
#lamInfSearchPP F =
  #LAMBDA -- cond
   (#[0]PAIR
     (#[0]APPLY
       (#[0]FIX
         (#[0]LAMBDA -- R
           (#[1]LAMBDA -- n
             (#[2]ITE (#[2]APPLY ‚åû F ‚åü #[2]VAR0)
                      (#[2]VAR0)
                      (#[2]LET (#[2]SUC #[2]VAR0) (#[3]APPLY #[3]VAR2 #[3]VAR0))))))
       (#[0]NUM 0))
     #[0]AX)


#‚áõ!-pres-equalTypes-mp2-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                            ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                            ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                            ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                            ‚Üí equalTypes i w (#FUN (#MP-left2 b‚ÇÅ) (#MP-right2 b‚ÇÅ)) (#FUN (#MP-left2 a‚ÇÅ) (#MP-right2 a‚ÇÅ))
#‚áõ!-pres-equalTypes-mp2-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ =
  eqTypesFUN‚Üê {w} {i} {#MP-left2 b‚ÇÅ} {#MP-right2 b‚ÇÅ} {#MP-left2 a‚ÇÅ} {#MP-right2 a‚ÇÅ}
    (‚ÜíequalTypes-#MP-left2
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))
    (‚ÜíequalTypes-#MP-right2
      (equalInType-#‚áõ-LR {i} {w} {#NAT!‚ÜíBOOL‚ÇÄ} {a‚ÇÅ} {b‚ÇÅ} {a‚ÇÅ} {a‚ÇÅ} c‚ÇÅ (#‚áõ!-refl {w} {a‚ÇÅ}) (equalInType-refl a‚àà)))


‚â°sub-#lamInfSearchPbody : (a : CTerm)
                        ‚Üí ‚åú #letInfSearchP a ‚åù ‚â° sub ‚åú a ‚åù ‚åú #lamInfSearchPbody ‚åù
‚â°sub-#lamInfSearchPbody a
  rewrite #shiftUp 0 a | #shiftDown 0 a
  = refl


‚â°sub-#letInfSearchPbody : (b : CTerm)
                        ‚Üí ‚åú #lamInfSearchPP b ‚åù ‚â° sub ‚åú b ‚åù ‚åú #letInfSearchPbody ‚åù
‚â°sub-#letInfSearchPbody b
  rewrite #shiftUp 0 b | #shiftUp 0 b | #shiftUp 0 b | #shiftUp 0 b | #shiftDown 3 b
  = refl


#APPLY-#lamInfSearchP-#‚áõ! : (w : ùïé¬∑) (a b : CTerm)
                          ‚Üí a #‚áõ! b at w
                          ‚Üí #isValue b
                          ‚Üí #APPLY #lamInfSearchP a #‚áõ! #lamInfSearchPP b at w
#APPLY-#lamInfSearchP-#‚áõ! w a b comp isv =
  ‚áõ!-trans {w}
    {‚åú #APPLY #lamInfSearchP a ‚åù}
    {‚åú #letInfSearchP a ‚åù}
    {‚åú #lamInfSearchPP b ‚åù}
    (‚â°‚ÜíAPPLY-LAMBDA‚áõ! w
       ‚åú #lamInfSearchPbody ‚åù
       ‚åú a ‚åù
       ‚åú #letInfSearchP a ‚åù
       (‚â°sub-#lamInfSearchPbody a))
    (‚áõ!-trans {w}
       {‚åú #letInfSearchP a ‚åù}
       {‚åú #letInfSearchP b ‚åù}
       {‚åú #lamInfSearchPP b ‚åù}
       (LET-#‚áõ! w a b #letInfSearchPbody comp)
       (‚â°‚ÜíLET-VAL‚áõ! w
          ‚åú #letInfSearchPbody ‚åù ‚åú b ‚åù ‚åú #lamInfSearchPP b ‚åù
          isv (‚â°sub-#letInfSearchPbody b)))


{--
#APPLY-#APPLY-#lamInfSearchP : (f a : CTerm) (w : ùïé¬∑)
                             ‚Üí #APPLY (#APPLY #lamInfSearchP f) a #‚áõ #infSearchP f at w
#APPLY-#APPLY-#lamInfSearchP f a w w1 e1 =
  lift (‚áì-from-to‚Üí‚áì {w1} {w1} {‚åú #APPLY (#APPLY #lamInfSearchP f) a ‚åù} {‚åú #infSearchP f ‚åù} (2 , ‚â°pair e refl))
  where
    e : sub ‚åú a ‚åù (PAIR (APPLY (FIX (LAMBDA (LAMBDA (DECIDE (APPLY (shiftDown 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú f ‚åù))))) (VAR 0)) (VAR 1) (LET (SUC (VAR 1)) (APPLY (VAR 3) (VAR 0))))))) (NUM 0)) AX)
        ‚â° ‚åú #infSearchP f ‚åù
    e rewrite #shiftUp 0 f
            | #shiftUp 0 f
            | #shiftUp 0 f
            | #shiftUp 0 f
            | #shiftDown 3 f
            | #shiftUp 0 a
            | #shiftUp 0 a
            | #shiftUp 0 a
            | #subv 2 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
            | #shiftDown 2 f = refl
--}


#‚áõ!-pres-equalInType-mp2-fun : (i : ‚Ñï) (w : ùïé¬∑) (a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : CTerm)
                             ‚Üí equalInType i w #NAT!‚ÜíBOOL‚ÇÄ a‚ÇÅ a‚ÇÇ
                             ‚Üí a‚ÇÅ #‚áõ! b‚ÇÅ at w
                             ‚Üí a‚ÇÇ #‚áõ! b‚ÇÇ at w
                             ‚Üí #isValue b‚ÇÅ
                             ‚Üí #isValue b‚ÇÇ
                             ‚Üí equalInType i w (#FUN (#MP-left2 b‚ÇÅ) (#MP-right2 b‚ÇÅ)) (#lamInfSearchPP b‚ÇÅ) (#lamInfSearchPP b‚ÇÇ)
                             ‚Üí equalInType i w (#FUN (#MP-left2 a‚ÇÅ) (#MP-right2 a‚ÇÅ)) (#APPLY #lamInfSearchP a‚ÇÅ) (#APPLY #lamInfSearchP a‚ÇÇ)
#‚áõ!-pres-equalInType-mp2-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ isv‚ÇÅ isv‚ÇÇ b‚àà =
  equalInType-#‚áõ‚Çö-left-right-rev
    {i} {_} {_} {_} {#lamInfSearchPP b‚ÇÅ} {_} {#lamInfSearchPP b‚ÇÇ}
    (#APPLY-#lamInfSearchP-#‚áõ! w a‚ÇÅ b‚ÇÅ c‚ÇÅ isv‚ÇÅ)
    (#APPLY-#lamInfSearchP-#‚áõ! w a‚ÇÇ b‚ÇÇ c‚ÇÇ isv‚ÇÇ)
    (equalTypes‚ÜíequalInType (#‚áõ!-pres-equalTypes-mp2-fun i w a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ a‚àà c‚ÇÅ c‚ÇÇ) b‚àà)


equalInType-BOOL‚ÇÄ‚Üí#‚áõv‚Çó : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                       ‚Üí equalInType i w #BOOL‚ÇÄ a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõv a w')
equalInType-BOOL‚ÇÄ‚Üí#‚áõv‚Çó i w a b a‚àà =
  Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-BOOL‚ÇÄ‚Üí {i} {w} {a} {b} a‚àà)
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' a b
                     ‚Üí #‚áõv a w')
  aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , x‚àà)) = #INL x , c‚ÇÅ , tt
  aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , x‚àà)) = #INR x , c‚ÇÅ , tt


equalInType-BOOL‚ÇÄ‚Üí#‚áõv·µ£ : (i : ‚Ñï) (w : ùïé¬∑) (a b : CTerm)
                       ‚Üí equalInType i w #BOOL‚ÇÄ a b
                       ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõv b w')
equalInType-BOOL‚ÇÄ‚Üí#‚áõv·µ£ i w a b a‚àà =
  Mod.‚àÄùïé-‚ñ°Func M aw (equalInType-BOOL‚ÇÄ‚Üí {i} {w} {a} {b} a‚àà)
  where
  aw : ‚àÄùïé w (Œª w' e' ‚Üí UNIONeq‚ÇÄ (equalInType i w' #TRUE) (equalInType i w' #TRUE) w' a b
                     ‚Üí #‚áõv b w')
  aw w1 e1 (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ , x‚àà)) = #INL y , c‚ÇÇ , tt
  aw w1 e1 (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ , x‚àà)) = #INR y , c‚ÇÇ , tt


equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ‚Çó : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
                              ‚Üí equalInType i w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) F G
                              ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!nv F w')
equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ‚Çó i w F G F‚àà =
  ‚àÄùïé-‚ñ°Func2 aw h2 h3
  where
  h1 : equalInType i w #NAT!‚ÜíBOOL‚ÇÄ F G
  h1 = equalInType-TPURE‚Üí F‚àà

  h2 : ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõv (#APPLY F #N0) w')
  h2 = equalInType-BOOL‚ÇÄ‚Üí#‚áõv‚Çó i w (#APPLY F #N0) (#APPLY G #N0)
         (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚ÇÄ‚â° h1) w (‚äë-refl¬∑ w) #N0 #N0
           (NUM-equalInType-NAT! i w 0))

  h3 : ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!‚Çô F w')
  h3 = equalInType-TPURE‚Üí‚Çó F‚àà

  aw  : ‚àÄùïé w (Œª w' e' ‚Üí #‚áõv (#APPLY F #N0) w' ‚Üí #‚áõ!‚Çô F w' ‚Üí #‚áõ!nv F w')
  aw w1 e1 (v , c , isv) (K , d , nn , ne) =
    #‚áõ!-pres-#‚áõ!nv {w1} {F} {K} d c2
    where
    c1 : #APPLY K #N0 #‚áõ v at w1
    c1 = val-#‚áõ‚Üí {w1} {#APPLY F #N0} {#APPLY K #N0} {v} isv (‚Üí#‚áõ!-APPLY {w1} {F} {K} {#N0} d) c

    c2 : #‚áõ!nv K w1
    c2 = APPLY#‚áõ‚Üí#‚áõ!nv {w1} {K} {#N0} {v} isv nn ne c1


equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ·µ£ : (i : ‚Ñï) (w : ùïé¬∑) (F G : CTerm)
                              ‚Üí equalInType i w (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) F G
                              ‚Üí ‚ñ°¬∑ w (Œª w' e ‚Üí #‚áõ!nv G w')
equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ·µ£ i w F G F‚àà =
  equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ‚Çó i w G F (equalInType-sym F‚àà)


#APPLY-#lamInfSearchPP#‚áõ! : (w : ùïé¬∑) (g a : CTerm)
                          ‚Üí #APPLY (#lamInfSearchPP g) a #‚áõ! #infSearchP g at w
#APPLY-#lamInfSearchPP#‚áõ! w g a w1 e1 =
  lift (1 , ‚â°pair e refl)
  where
  e : sub ‚åú a ‚åù ‚åú #[0]PAIR (#[0]APPLY (#[0]FIX (#[0]LAMBDA (#[1]LAMBDA (#[2]ITE (#[2]APPLY ‚åû g ‚åü #[2]VAR0)
                                                                                #[2]VAR0
                                                                                (#[2]LET (#[2]SUC #[2]VAR0) (#[3]APPLY #[3]VAR2 #[3]VAR0))))))
                                      (#[0]NUM 0))
                           #[0]AX ‚åù
   ‚â° ‚åú #infSearchP g ‚åù
  e rewrite #shiftUp 0 g | #shiftUp 0 g
          | #shiftUp 0 a | #shiftUp 0 a | #shiftUp 0 a
          | #subv 2 ‚åú a ‚åù ‚åú g ‚åù (CTerm.closed g) | #shiftDown 2 g = refl


-- This is similar to MPp‚ÇÇ-inh but proved here for non-truncated sums
MPp‚ÇÉ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÉ #lamInfSearchP
MPp‚ÇÉ-inh n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left2 #[0]MP-right2}
    (Œª w1 e1 ‚Üí isType-#TPURE-NAT!‚ÜíBOOL‚ÇÄ w1 n)
    p2
    p3
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left2 #[0]MP-right2)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left2 #[0]MP-right2)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp‚ÇÉ f‚ÇÅ))
        (sym (sub0-fun-mp‚ÇÉ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left2 (equalInType-TPURE‚Üí f‚àà)) (‚ÜíequalTypes-#MP-right2 (equalInType-TPURE‚Üí f‚àà)))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL‚ÇÄ) f‚ÇÅ f‚ÇÇ
                      ‚Üí equalInType n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left2 #[0]MP-right2)) (#APPLY #lamInfSearchP f‚ÇÅ) (#APPLY #lamInfSearchP f‚ÇÇ))
    p3 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp‚ÇÉ f‚ÇÅ))
        (equalInType-local
          (‚àÄùïé-‚ñ°Func2 awp
            (equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ‚Çó n w1 f‚ÇÅ f‚ÇÇ f‚àà)
            (equalInType-TPURE-NAT!‚ÜíBOOL‚ÇÄ·µ£ n w1 f‚ÇÅ f‚ÇÇ f‚àà))) {--(
          p4)--}
      where
      awp : ‚àÄùïé w1 (Œª w' e' ‚Üí #‚áõ!nv f‚ÇÅ w'
                           ‚Üí #‚áõ!nv f‚ÇÇ w'
                           ‚Üí equalInType n w' (#FUN (#MP-left2 f‚ÇÅ) (#MP-right2 f‚ÇÅ)) (#APPLY #lamInfSearchP f‚ÇÅ) (#APPLY #lamInfSearchP f‚ÇÇ))
      awp w1' e1' (g‚ÇÅ , comp‚ÇÅ , nng‚ÇÅ , neg‚ÇÅ , isvg‚ÇÅ) (g‚ÇÇ , comp‚ÇÇ , nng‚ÇÇ , neg‚ÇÇ , isvg‚ÇÇ) =
        #‚áõ!-pres-equalInType-mp2-fun n w1' f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ
          (equalInType-mon (equalInType-TPURE‚Üí f‚àà) w1' e1')
          comp‚ÇÅ comp‚ÇÇ
          isvg‚ÇÅ isvg‚ÇÇ
          (equalInType-FUN
             (‚ÜíequalTypes-#MP-left2
               (#‚áõ!‚Üí‚ààType {n} {w1'} {#NAT!‚ÜíBOOL‚ÇÄ} {f‚ÇÅ} {g‚ÇÅ}
                 (equalInType-TPURE‚Üí (equalInType-refl (equalInType-mon f‚àà w1' e1'))) comp‚ÇÅ))
             (‚ÜíequalTypes-#MP-right2
               (#‚áõ!‚Üí‚ààType {n} {w1'} {#NAT!‚ÜíBOOL‚ÇÄ} {f‚ÇÅ} {g‚ÇÅ}
                 (equalInType-TPURE‚Üí (equalInType-refl (equalInType-mon f‚àà w1' e1'))) comp‚ÇÅ))
             p4)
        where
        p5 : equalInType n w1' (#FUN (#MP-left3 g‚ÇÅ) (#MP-right g‚ÇÅ)) (#APPLY #lam2AX g‚ÇÅ) (#APPLY #lam2AX g‚ÇÇ)
        p5 = ‚Üí‚â°equalInType
               (sub0-fun-mp‚ÇÇ g‚ÇÅ)
               (snd (snd (equalInType-PI‚Üí {n} {w} {#TPURE #NAT!‚ÜíBOOL‚ÇÄ} {#[0]FUN #[0]MP-left3 #[0]MP-right}
                                          (MPp‚ÇÇ-inh n w))) w1' (‚äë-trans¬∑ e1 e1') g‚ÇÅ g‚ÇÇ
                                          (#‚áõ!‚ÜíequalInType (equalInType-mon f‚àà w1' e1') comp‚ÇÅ comp‚ÇÇ))

        p4 : ‚àÄùïé w1' (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#MP-left2 g‚ÇÅ) a‚ÇÅ a‚ÇÇ
                            ‚Üí equalInType n w' (#MP-right2 g‚ÇÅ)
                                          (#APPLY (#lamInfSearchPP g‚ÇÅ) a‚ÇÅ)
                                          (#APPLY (#lamInfSearchPP g‚ÇÇ) a‚ÇÇ))
        p4 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà =
          mpSearch
            n w2 g‚ÇÅ g‚ÇÇ
            (#APPLY (#APPLY #lam2AX g‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lam2AX g‚ÇÇ) a‚ÇÇ)
            (#APPLY (#lamInfSearchPP g‚ÇÅ) a‚ÇÅ) (#APPLY (#lamInfSearchPP g‚ÇÇ) a‚ÇÇ)
            nng‚ÇÅ --(equalInType-TPURE‚Üí‚Çó f‚àà)
            nng‚ÇÇ --(equalInType-TPURE‚Üí·µ£ f‚àà)
            (#APPLY-#lamInfSearchPP#‚áõ! w2 g‚ÇÅ a‚ÇÅ)
            (#APPLY-#lamInfSearchPP#‚áõ! w2 g‚ÇÇ a‚ÇÇ)
            --(#APPLY-#APPLY-#lamInfSearchP f‚ÇÅ a‚ÇÅ w2) (#APPLY-#APPLY-#lamInfSearchP f‚ÇÇ a‚ÇÇ w2)
            (#‚áõ!‚ÜíequalInType (equalInType-mon (equalInType-TPURE‚Üí f‚àà) w2 (‚äë-trans¬∑ e1' e2))
                             (‚àÄùïé-mon e2 comp‚ÇÅ)
                             (‚àÄùïé-mon e2 comp‚ÇÇ))
            p6
          where
            p6 : equalInType n w2 (#MP-right g‚ÇÅ) (#APPLY (#APPLY #lam2AX g‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lam2AX g‚ÇÇ) a‚ÇÇ)
            p6 = equalInType-FUN‚Üí
                   p5 w2 e2 a‚ÇÅ a‚ÇÇ
                   (#MP-left2‚Üí#MP-left3 n w2 g‚ÇÅ a‚ÇÅ a‚ÇÇ
                     (equalInType-mon
                       (equalInType-TPURE‚Üí
                         (equalInType-refl {_} {_} {_} {g‚ÇÅ} {g‚ÇÇ}
                           (#‚áõ!‚ÜíequalInType (equalInType-mon f‚àà w1' e1') comp‚ÇÅ comp‚ÇÇ)))
                       w2 e2) a‚àà)

\end{code}[hide]
