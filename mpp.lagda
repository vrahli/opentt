\begin{code}
{-# OPTIONS --rewriting #-}
{-# OPTIONS --guardedness #-}


open import Level using (Level ; 0‚Ñì ; Lift ; lift ; lower) renaming (suc to lsuc)
open import Agda.Builtin.Bool
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Sigma
open import Relation.Nullary
open import Relation.Unary using (Pred; Decidable)
open import Relation.Binary.PropositionalEquality using (sym ; trans ; subst)
open import Data.Product
open import Data.Product.Properties
open import Data.Sum
open import Data.Empty
open import Data.Maybe
open import Data.Unit using (‚ä§ ; tt)
open import Data.Nat using (‚Ñï ; _<_ ; _‚â§_ ; _‚â•_ ; _‚â§?_ ; suc ; _+_ ; pred)
open import Data.Nat.Properties
open import Agda.Builtin.String
open import Agda.Builtin.String.Properties
open import Data.List
open import Data.List.Properties
open import Data.List.Relation.Unary.Any
open import Data.List.Relation.Binary.Subset.Propositional
open import Data.List.Relation.Binary.Subset.Propositional.Properties
open import Data.List.Membership.Propositional
open import Data.List.Membership.DecSetoid(‚â°-decSetoid) using (_‚àà?_)
open import Data.List.Membership.Propositional.Properties
open import Function.Bundles
open import Induction.WellFounded
open import Axiom.Extensionality.Propositional
open import Axiom.ExcludedMiddle


open import util
open import name
open import calculus
open import terms
open import world
open import choice
open import compatible
open import progress
open import choiceExt
open import choiceVal
open import getChoice
open import newChoice
open import freeze
open import progress
open import choiceBar
open import mod
open import encode
open import MarkovPrinciple


module mpp {L : Level} (W : PossibleWorlds {L}) (M : Mod W)
           (C : Choice) (K : Compatible W C) (P : Progress {L} W C K)
           (G : GetChoice {L} W C K) (X : ChoiceExt {L} W C)
           (N : NewChoice {L} W C K G)
           (E : Extensionality 0‚Ñì (lsuc(lsuc(L))))
           (EM : ExcludedMiddle (lsuc(L)))
           (EC : Encode)
       where


open import worldDef(W)
open import choiceDef{L}(C)
open import compatibleDef{L}(W)(C)(K)
open import getChoiceDef(W)(C)(K)(G)
open import newChoiceDef(W)(C)(K)(G)(N)
open import choiceExtDef(W)(C)(K)(G)(X)

open import computation(W)(C)(K)(G)(X)(N)(EC)
open import bar(W)
open import barI(W)(M)--(C)(K)(P)
open import forcing(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import terms2(W)(C)(K)(G)(X)(N)(EC)
open import terms4(W)(C)(K)(G)(X)(N)(EC) using (¬¨Names‚Üí‚áì)
open import terms8(W)(C)(K)(G)(X)(N)(EC)

open import props2(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (equalInType-EQ‚Üí ; ‚â°CTerm‚ÜíequalInType ; equalInType-local ; equalInType-EQ ; equalInType-mon ; ‚â°CTerm‚ÜíeqTypes ; eqTypesFUN‚Üê ; isTypeNAT! ; NUM-equalInType-NAT! ; equalInType-FUN‚Üí ; equalInType-refl ; equalInType-SUM ; eqTypesNEG‚Üê ; equalInType-NAT!‚Üí ; equalInType-sym ; equalInType-NEG ; equalInType-PI ; equalInType-FUN ; ‚ÜíequalInType-QTNAT! ; equalInType-PI‚Üí)
open import props3(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (isTypeBOOL ; eqTypesQTBOOL! ; isTypeBOOL! ; eqTypesQTNAT! ; sub0-ASSERT‚ÇÇ-APPLY ; equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ ; sub0-NEG-ASSERT‚ÇÇ-APPLY ; equalInType-trans ; equalInType-BOOL‚Üí ; ‚ÜíequalInType-BOOL ; equalInType-NEG‚Üí¬¨inh ; ‚ÜíequalInType-SQUASH ; ‚ÜíequalInType-QTBOOL! ; ‚ÜíequalInType-BOOL! ; sub0-ASSERT‚ÇÉ-APPLY ; equalInType-QTBOOL!‚ÜíequalTypes-ASSERT‚ÇÉ ; inhType-mon ; equalInType-QTBOOL!‚Üí ; equalInType-BOOL!‚Üí)
open import props4(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (‚ÜíequalInType-NAT!)
open import lem_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)
open import pure(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC)

open import mp_props(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (#[0]MP-left ; #[0]MP-right ; #[0]MP-left3 ; #[0]MP-left2 ; #[0]MP-right2 ; #[0]MP-left-qt ; #[0]MP-right-qt ; #[0]MP-left-qt‚ÇÇ ; #[0]MP-right-qt‚ÇÇ ; #[0]MP-left-qt‚ÇÉ ; #[0]MP-right-qt‚ÇÉ ; sub0-fun-mp ; ‚ÜíequalTypes-#MP-left ; ‚ÜíequalTypes-#MP-right ; #MP-left ; #MP-right ; sub0-fun-mp‚ÇÑ ; ‚ÜíequalTypes-#MP-left-qt ; ‚ÜíequalTypes-#MP-right-qt ; #MP-left-qt ; #MP-right-qt ; equalInType-#MP-left-qt‚Üí ; ‚Üí‚â°equalTypes ; sub0-fun-mp‚ÇÇ ; ‚ÜíequalTypes-#MP-left3 ; ‚Üí‚â°equalInType ; ‚Üí‚ààType-FUN ; #MP-left3 ; #MP-left2‚Üí#MP-left ; #MP-left3‚Üí#MP-left2 ; ‚Üí‚ààType-PI ; sub0-fun-mp‚ÇÉ ; ‚ÜíequalTypes-#MP-left2 ; ‚ÜíequalTypes-#MP-right2 ; #MP-left2 ; #MP-right2 ; #MP-left2‚Üí#MP-left3 ; sub0-fun-mp‚ÇÜ ; ‚ÜíequalTypes-#MP-left-qt‚ÇÉ ; ‚ÜíequalTypes-#MP-right-qt‚ÇÉ ; #MP-left-qt‚ÇÉ ; #MP-right-qt‚ÇÉ ; equalInType-#MP-left-qt‚ÇÉ‚Üí)
open import mp_search(W)(M)(C)(K)(P)(G)(X)(N)(E)(EC) using (#infSearchP ; mpSearch)



equalInType-ASSERT‚ÇÇ‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w (#ASSERT‚ÇÇ t) a b
                        ‚Üí equalInType n w #BOOL t #BTRUE
equalInType-ASSERT‚ÇÇ‚Üí n w t a b eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqb)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL) w' a b ‚Üí equalInType n w' #BOOL t #BTRUE)
    aw w1 e1 h = h

    eqb : ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL) w' a b)
    eqb = equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÇ‚â° t) eqa)


‚ÜíequalInType-ASSERT‚ÇÇ : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w #BOOL t #BTRUE
                        ‚Üí equalInType n w (#ASSERT‚ÇÇ t) a b
‚ÜíequalInType-ASSERT‚ÇÇ n w t a b h =
  ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚ÇÇ‚â° t)) (equalInType-EQ (isTypeBOOL w n) (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí equalInType-mon h w1 e1)))


equalInType-ASSERT‚ÇÉ‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w (#ASSERT‚ÇÉ t) a b
                        ‚Üí equalInType n w #QTBOOL! t #BTRUE
equalInType-ASSERT‚ÇÉ‚Üí n w t a b eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqb)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType n w' #QTBOOL!) w' a b ‚Üí equalInType n w' #QTBOOL! t #BTRUE)
    aw w1 e1 h = h

    eqb : ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq t #BTRUE (equalInType n w' #QTBOOL!) w' a b)
    eqb = equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÉ‚â° t) eqa)


‚ÜíequalInType-ASSERT‚ÇÉ : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w #QTBOOL! t #BTRUE
                        ‚Üí equalInType n w (#ASSERT‚ÇÉ t) a b
‚ÜíequalInType-ASSERT‚ÇÉ n w t a b h =
  ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚ÇÉ‚â° t)) (equalInType-EQ (eqTypesQTBOOL! {w} {n}) (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí equalInType-mon h w1 e1)))


equalInType-ASSERT‚ÇÑ‚Üí : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w (#ASSERT‚ÇÑ t) a b
                        ‚Üí equalInType n w #BOOL! t #BTRUE
equalInType-ASSERT‚ÇÑ‚Üí n w t a b eqa = equalInType-local (Mod.‚àÄùïé-‚ñ°Func M aw eqb)
  where
    aw : ‚àÄùïé w (Œª w' e' ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL!) w' a b ‚Üí equalInType n w' #BOOL! t #BTRUE)
    aw w1 e1 h = h

    eqb : ‚ñ°¬∑ w (Œª w' _ ‚Üí EQeq t #BTRUE (equalInType n w' #BOOL!) w' a b)
    eqb = equalInType-EQ‚Üí (‚â°CTerm‚ÜíequalInType (#ASSERT‚ÇÑ‚â° t) eqa)


‚ÜíequalInType-ASSERT‚ÇÑ : (n : ‚Ñï) (w : ùïé¬∑) (t a b : CTerm)
                        ‚Üí equalInType n w #BOOL! t #BTRUE
                        ‚Üí equalInType n w (#ASSERT‚ÇÑ t) a b
‚ÜíequalInType-ASSERT‚ÇÑ n w t a b h =
  ‚â°CTerm‚ÜíequalInType (sym (#ASSERT‚ÇÑ‚â° t)) (equalInType-EQ (isTypeBOOL! w n) (Mod.‚àÄùïé-‚ñ° M (Œª w1 e1 ‚Üí equalInType-mon h w1 e1)))


strongBool-BTRUE‚Üí : (w : ùïé¬∑) (t : CTerm)
                     ‚Üí #strongBool w t #BTRUE
                     ‚Üí Œ£ CTerm (Œª x ‚Üí t #‚áõ #INL x at w)
strongBool-BTRUE‚Üí w t (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x , c‚ÇÅ
strongBool-BTRUE‚Üí w t (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = ‚ä•-elim (h (compAllVal c‚ÇÇ tt)) --
  where
    h : (INL AX ‚â° INR ‚åú y ‚åù) ‚Üí ‚ä•
    h ()


strongBool!-BTRUE‚Üí : (w : ùïé¬∑) (t : CTerm)
                     ‚Üí #strongBool! w t #BTRUE
                     ‚Üí Œ£ CTerm (Œª x ‚Üí t #‚áõ! #INL x at w)
strongBool!-BTRUE‚Üí w t (x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ)) = x , c‚ÇÅ
strongBool!-BTRUE‚Üí w t (x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ)) = ‚ä•-elim (h (‚áõ!‚Üí‚â° c‚ÇÇ tt)) --
  where
    h : (INL AX ‚â° INR ‚åú y ‚åù) ‚Üí ‚ä•
    h ()


weakBool-BTRUE‚Üí : (w : ùïé¬∑) (t : CTerm)
                   ‚Üí #weakBool! w t #BTRUE
                   ‚Üí ‚àÄùïé w (Œª w' _ ‚Üí Lift (lsuc L) (Œ£ CTerm (Œª x ‚Üí t #‚áì! #INL x at w')))
weakBool-BTRUE‚Üí w t h w1 e1 with lower (h w1 e1)
... | x , y , inj‚ÇÅ (c‚ÇÅ , c‚ÇÇ) = lift (x , c‚ÇÅ)
... | x , y , inj‚ÇÇ (c‚ÇÅ , c‚ÇÇ) = ‚ä•-elim (INLneqINR (‚áì-from-to‚Üí‚â° (INL AX) (INR ‚åú y ‚åù) w1 w1 c‚ÇÇ tt))


-- pure version
-- œÄ‚Çö (F : ‚Ñï ‚Üí ùîπ). ¬¨(Œ† (n : ‚Ñï). ¬¨(F n ‚â° true)) ‚Üí ||Œ£ (n : ‚Ñï). F n ‚â° true||
MPp : Term
MPp = PI (TPURE NAT!‚ÜíBOOL) (FUN (NEG (PI NAT! (NEG (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))
                                 (SQUASH (SUM NAT! (ASSERT‚ÇÇ (APPLY (VAR 1) (VAR 0))))))


#MPp : CTerm
#MPp = ct MPp c
  where
    c : # MPp
    c = refl


#MPp-PI : CTerm
#MPp-PI = #PI (#TPURE #NAT!‚ÜíBOOL) (#[0]FUN #[0]MP-left #[0]MP-right)


#MPp‚â°#PI : #MPp ‚â° #MPp-PI
#MPp‚â°#PI = CTerm‚â° refl


#MPp‚ÇÇ : CTerm
#MPp‚ÇÇ = #PI (#TPURE #NAT!‚ÜíBOOL) (#[0]FUN #[0]MP-left3 #[0]MP-right)


#MPp‚ÇÉ : CTerm
#MPp‚ÇÉ = #PI (#TPURE #NAT!‚ÜíBOOL) (#[0]FUN #[0]MP-left2 #[0]MP-right2)


#MPp‚ÇÑ : CTerm
#MPp‚ÇÑ = #PI (#TPURE #NAT!‚ÜíQTBOOL!) (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)


#MPp‚ÇÖ : CTerm
#MPp‚ÇÖ = #PI (#TPURE #QTNAT!‚ÜíQTBOOL!) (#[0]FUN #[0]MP-left-qt‚ÇÇ #[0]MP-right-qt‚ÇÇ)


#MPp‚ÇÜ : CTerm
#MPp‚ÇÜ = #PI (#TPURE #NAT!‚ÜíBOOL!) (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)


isType-#TPURE-NAT!‚ÜíBOOL : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #NAT!‚ÜíBOOL)
isType-#TPURE-NAT!‚ÜíBOOL w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #NAT!‚ÜíBOOL‚â°) (sym #NAT!‚ÜíBOOL‚â°)
      (eqTypesFUN‚Üê isTypeNAT! (isTypeBOOL w n)))


isType-#TPURE-NAT!‚ÜíQTBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #NAT!‚ÜíQTBOOL!)
isType-#TPURE-NAT!‚ÜíQTBOOL! w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #NAT!‚ÜíQTBOOL!‚â°) (sym #NAT!‚ÜíQTBOOL!‚â°)
      (eqTypesFUN‚Üê isTypeNAT! (eqTypesQTBOOL! {w} {n})))


isType-#TPURE-QTNAT!‚ÜíQTBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #QTNAT!‚ÜíQTBOOL!)
isType-#TPURE-QTNAT!‚ÜíQTBOOL! w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #QTNAT!‚ÜíQTBOOL!‚â°) (sym #QTNAT!‚ÜíQTBOOL!‚â°)
      (eqTypesFUN‚Üê eqTypesQTNAT! (eqTypesQTBOOL! {w} {n})))


isType-#TPURE-NAT!‚ÜíBOOL! : (w : ùïé¬∑) (n : ‚Ñï) ‚Üí isType n w (#TPURE #NAT!‚ÜíBOOL!)
isType-#TPURE-NAT!‚ÜíBOOL! w n =
  equalTypesTPURE
    (‚â°CTerm‚ÜíeqTypes
      (sym #NAT!‚ÜíBOOL!‚â°) (sym #NAT!‚ÜíBOOL!‚â°)
      (eqTypesFUN‚Üê isTypeNAT! (isTypeBOOL! w n)))


-- As shown in not_mp, MP is invalid when considering a Beth or Kripke ‚ñ° and references
-- It is however valid when restricting to pure functions (the proof uses classical logic)
MPp-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp #lam2AX
MPp-inh n w =
  ‚â°CTerm‚ÜíequalInType
    (sym #MPp‚â°#PI)
    (equalInType-PI
      {n} {w} {#TPURE (#NAT!‚ÜíBOOL)} {#[0]FUN #[0]MP-left #[0]MP-right}
      (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíBOOL w' n)
      aw1
      aw2)
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left #[0]MP-right)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp a‚ÇÅ | sub0-fun-mp a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left #[0]MP-right)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp a‚ÇÅ))
        (equalInType-FUN
          (‚ÜíequalTypes-#MP-left (equalInType-refl (equalInType-TPURE‚Üí eqa)))
          (‚ÜíequalTypes-#MP-right (equalInType-refl (equalInType-TPURE‚Üí eqa)))
          aw3)
      where
        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left a‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right a‚ÇÅ) (#APPLY (#APPLY #lam2AX a‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX a‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÇ a‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÇ a‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                                                  (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                                  w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (#compAllRefl (#PAIR (#NUM k) t) w4) ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÇ-APPLY (#NUM k) a‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÇ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÇ-APPLY b a‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚â° (equalInType-refl (equalInType-TPURE‚Üí eqa))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ b))
                        aw5' = equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-NEG‚Üí¬¨inh eqb w3 e3 aw5)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR)))) (sub0 b (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR)))))
                    aw6 w4 e4 a b ea rewrite sub0-NEG-ASSERT‚ÇÇ-APPLY a a‚ÇÅ | sub0-NEG-ASSERT‚ÇÇ-APPLY b a‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚â° (equalInType-refl (equalInType-TPURE‚Üí eqa))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#NEG (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ a))) (#NEG (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ b)))
                        aw5' = eqTypesNEG‚Üê (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ eb)

                    aw7 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) ‚Üí equalInType n w' #NAT! a b
                                         ‚Üí equalInType n w' (sub0 a (#[0]NEG (#[0]ASSERT‚ÇÇ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                                       (#APPLY #lam2AX a) (#APPLY #lam2AX b))
                    aw7 w4 e4 b‚ÇÅ b‚ÇÇ eb =
                      ‚â°CTerm‚ÜíequalInType
                        (sym (sub0-NEG-ASSERT‚ÇÇ-APPLY b‚ÇÅ a‚ÇÅ))
                        (equalInType-NEG (equalInType-BOOL‚ÜíequalTypes-ASSERT‚ÇÇ
                                           (equalInType-FUN‚Üí
                                             (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚â° (equalInType-refl (equalInType-TPURE‚Üí eqa)))
                                             w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) b‚ÇÅ b‚ÇÅ (equalInType-refl eb)))
                                         aw8)
                      where
                        eqn : ‚ñ°¬∑ w4 (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' b‚ÇÅ b‚ÇÇ)
                        eqn = equalInType-NAT!‚Üí n w4 b‚ÇÅ b‚ÇÇ eb

                        aw8 : ‚àÄùïé w4 (Œª w' _ ‚Üí (c‚ÇÅ c‚ÇÇ : CTerm) ‚Üí ¬¨ equalInType n w' (#ASSERT‚ÇÇ (#APPLY a‚ÇÅ b‚ÇÅ)) c‚ÇÅ c‚ÇÇ)
                        aw8 w5 e5 c‚ÇÅ c‚ÇÇ ec = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw9 (Mod.‚Üë‚ñ° M eqn e5)))
                          where
                            ec0 : equalInType n w5 #BOOL (#APPLY a‚ÇÅ b‚ÇÅ) #BTRUE
                            ec0 = equalInType-ASSERT‚ÇÇ‚Üí n w5 (#APPLY a‚ÇÅ b‚ÇÅ) c‚ÇÅ c‚ÇÇ ec

                            aw9 : ‚àÄùïé w5 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' b‚ÇÅ b‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                            aw9 w6 e6 (k , d‚ÇÅ , d‚ÇÇ) = lift (lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw10 ec2)))
                              where
                                ec1 : equalInType n w6 #BOOL (#APPLY a‚ÇÅ (#NUM k)) #BTRUE
                                ec1 = equalInType-trans
                                       (equalInType-sym
                                         (equalInType-FUN‚Üí
                                           (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL‚â° (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqa)) w5 (‚äë-trans¬∑ (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) e5)))
                                           w6 e6 b‚ÇÅ (#NUM k)
                                           (‚ÜíequalInType-NAT! n w6 b‚ÇÅ (#NUM k) (Mod.‚àÄùïé-‚ñ° M Œª w7 e7 ‚Üí k , ‚àÄùïé-mon e7 d‚ÇÅ , #‚áõ!-refl {w7} {#NUM k}))))
                                       (equalInType-mon ec0 w6 e6)

                                ec2 : ‚ñ°¬∑ w6 (Œª w' _ ‚Üí #strongBool w' (#APPLY a‚ÇÅ (#NUM k)) #BTRUE)
                                ec2 = equalInType-BOOL‚Üí _ _ _ _ ec1

                                aw10 : ‚àÄùïé w6  (Œª w' e' ‚Üí #strongBool w' (#APPLY a‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                                aw10 w7 e7 h = lift (p (k , #AX , ‚ÜíequalInType-ASSERT‚ÇÇ n w3 (#APPLY a‚ÇÅ (#NUM k)) #AX #AX (‚ÜíequalInType-BOOL n w3 (#APPLY a‚ÇÅ (#NUM k)) #BTRUE (Mod.‚àÄùïé-‚ñ° M aw11))))
                                  where
                                    h1 : Œ£ CTerm (Œª x ‚Üí #APPLY a‚ÇÅ (#NUM k) #‚áõ #INL x at w7)
                                    h1 = strongBool-BTRUE‚Üí w7 (#APPLY a‚ÇÅ (#NUM k)) h

                                    aw11 : ‚àÄùïé w3 (Œª w' _ ‚Üí #strongBool w' (#APPLY a‚ÇÅ (#NUM k)) #BTRUE)
                                    aw11 w3' e3' =
                                      fst h1 , #AX ,
                                      -- ¬¨Names‚Üí‚áõ is used here to change the world from w7 (in h1) to the unrelated w3' world
                                      inj‚ÇÅ (¬¨Names‚Üí‚áõ w7 w3' ‚åú #APPLY a‚ÇÅ (#NUM k) ‚åù ‚åú #INL (fst h1) ‚åù (#¬¨Names-APPLY {a‚ÇÅ} {#NUM k} (equalInType-TPURE‚Üí‚Çó eqa) refl) (snd h1) ,
                                            #‚áõ-refl w3' #BTRUE)

                    aw5 : inhType n w3 (#PI-NEG-ASSERT‚ÇÇ a‚ÇÅ)
                    aw5 = #lam2AX , equalInType-PI (Œª w' e ‚Üí isTypeNAT!) aw6 aw7


‚ÜíinhType-ASSERT‚ÇÉ-APPLY : (i : ‚Ñï) (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
                          ‚Üí ‚ààType i w #NAT!‚ÜíQTBOOL! f
                          ‚Üí n #‚áõ! #NUM k at w
                          ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f n))
                          ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f (#NUM k)))
‚ÜíinhType-ASSERT‚ÇÉ-APPLY i w f n k f‚àà ck (t , t‚àà) =
  t ,
  ‚ÜíequalInType-ASSERT‚ÇÉ
    i w (#APPLY f (#NUM k)) t t
    (equalInType-trans
      (equalInType-FUN‚Üí
        (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíQTBOOL!‚â° f‚àà)
        w (‚äë-refl¬∑ w) (#NUM k) n
        (‚ÜíequalInType-NAT! i w (#NUM k) n (Mod.‚àÄùïé-‚ñ° M aw)))
      (equalInType-ASSERT‚ÇÉ‚Üí i w (#APPLY f n) t t t‚àà))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#NUM k) n)
    aw w1 e1 = k , #‚áõ!-refl {w1} {#NUM k} , ‚àÄùïé-mon e1 ck


‚ÜíinhType-ASSERT‚ÇÑ-APPLY : (i : ‚Ñï) (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
                          ‚Üí ‚ààType i w #NAT!‚ÜíBOOL! f
                          ‚Üí n #‚áõ! #NUM k at w
                          ‚Üí inhType i w (#ASSERT‚ÇÑ (#APPLY f n))
                          ‚Üí inhType i w (#ASSERT‚ÇÑ (#APPLY f (#NUM k)))
‚ÜíinhType-ASSERT‚ÇÑ-APPLY i w f n k f‚àà ck (t , t‚àà) =
  t ,
  ‚ÜíequalInType-ASSERT‚ÇÑ
    i w (#APPLY f (#NUM k)) t t
    (equalInType-trans
      (equalInType-FUN‚Üí
        (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL!‚â° f‚àà)
        w (‚äë-refl¬∑ w) (#NUM k) n
        (‚ÜíequalInType-NAT! i w (#NUM k) n (Mod.‚àÄùïé-‚ñ° M aw)))
      (equalInType-ASSERT‚ÇÑ‚Üí i w (#APPLY f n) t t t‚àà))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #‚áõ!same‚Ñï w' (#NUM k) n)
    aw w1 e1 = k , #‚áõ!-refl {w1} {#NUM k} , ‚àÄùïé-mon e1 ck


#weakMonEq!-sym : (w : ùïé¬∑) (t1 t2 : CTerm)
                  ‚Üí #weakMonEq! w t1 t2
                  ‚Üí #weakMonEq! w t2 t1
#weakMonEq!-sym w t1 t2 h w1 e1 with lower (h w1 e1)
... | k , c‚ÇÅ , c‚ÇÇ = lift (k , c‚ÇÇ , c‚ÇÅ)


‚ÜíinhType-ASSERT‚ÇÉ-APPLY-qt : (i : ‚Ñï) (w : ùïé¬∑) (f n : CTerm) (k : ‚Ñï)
                             ‚Üí ‚ààType i w #QTNAT!‚ÜíQTBOOL! f
                             ‚Üí #weakMonEq! w n (#NUM k)
                             ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f n))
                             ‚Üí inhType i w (#ASSERT‚ÇÉ (#APPLY f (#NUM k)))
‚ÜíinhType-ASSERT‚ÇÉ-APPLY-qt i w f n k f‚àà ck (t , t‚àà) =
  t ,
  ‚ÜíequalInType-ASSERT‚ÇÉ
    i w (#APPLY f (#NUM k)) t t
    (equalInType-trans
      (equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #QTNAT!‚ÜíQTBOOL!‚â° f‚àà) w (‚äë-refl¬∑ w) (#NUM k) n (‚ÜíequalInType-QTNAT! i w (#NUM k) n (Mod.‚àÄùïé-‚ñ° M aw)))
      (equalInType-ASSERT‚ÇÉ‚Üí i w (#APPLY f n) t t t‚àà))
  where
    aw : ‚àÄùïé w (Œª w' _ ‚Üí #weakMonEq! w' (#NUM k) n)
    aw w1 e1 = ‚àÄùïé-mon e1 (#weakMonEq!-sym w n (#NUM k) ck)


#¬¨Names‚ÜíinhType-ASSERT‚ÇÉ : (n : ‚Ñï) (w1 w2 : ùïé¬∑) (t : CTerm)
                           ‚Üí #¬¨Names t
                           ‚Üí (Œ£ CTerm (Œª x ‚Üí t #‚áì! #INL x at w1))
                           ‚Üí inhType n w2 (#ASSERT‚ÇÉ t)
#¬¨Names‚ÜíinhType-ASSERT‚ÇÉ n w1 w2 t nnt (x , cx) =
  #AX ,
  ‚ÜíequalInType-ASSERT‚ÇÉ n w2 t #AX #AX (‚ÜíequalInType-QTBOOL! n w2 t #BTRUE (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w2 (Œª w' _ ‚Üí #weakBool! w' t #BTRUE)
    aw w3 e3 w4 e4 = lift (x , #AX , inj‚ÇÅ (¬¨Names‚Üí‚áì w1 w1 w4 ‚åú t ‚åù ‚åú #INL x ‚åù nnt cx , (#‚áì!-refl #BTRUE w4)))


#¬¨Names‚ÜíinhType-ASSERT‚ÇÑ : (n : ‚Ñï) (w1 w2 : ùïé¬∑) (t : CTerm)
                           ‚Üí #¬¨Names t
                           ‚Üí (Œ£ CTerm (Œª x ‚Üí t #‚áõ! #INL x at w1))
                           ‚Üí inhType n w2 (#ASSERT‚ÇÑ t)
#¬¨Names‚ÜíinhType-ASSERT‚ÇÑ n w1 w2 t nnt (x , cx) =
  #AX ,
  ‚ÜíequalInType-ASSERT‚ÇÑ n w2 t #AX #AX (‚ÜíequalInType-BOOL! n w2 t #BTRUE (Mod.‚àÄùïé-‚ñ° M aw))
  where
    aw : ‚àÄùïé w2 (Œª w' _ ‚Üí #strongBool! w' t #BTRUE)
    aw w3 e3 = x , #AX , inj‚ÇÅ (¬¨Names‚Üí‚áõ! w1 w3 ‚åú t ‚åù (INL ‚åú x ‚åù) nnt cx , #‚áõ!-refl {w3} {#BTRUE})


-- This version uses QTBOOL! instead of BOOL
MPp‚ÇÑ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÑ #lam2AX
MPp‚ÇÑ-inh n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíQTBOOL!} {#[0]FUN #[0]MP-left-qt #[0]MP-right-qt}
    (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíQTBOOL! w' n)
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíQTBOOL!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÑ a‚ÇÅ | sub0-fun-mp‚ÇÑ a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíQTBOOL!) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt #[0]MP-right-qt)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÑ a‚ÇÅ))
        (equalInType-FUN
          (‚ÜíequalTypes-#MP-left-qt (equalInType-refl (equalInType-TPURE‚Üí eqa)))
          (‚ÜíequalTypes-#MP-right-qt (equalInType-refl (equalInType-TPURE‚Üí eqa)))
          aw3)
      where
        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt a‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right-qt a‚ÇÅ) (#APPLY (#APPLY #lam2AX a‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX a‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÉ a‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÉ a‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                                                  (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                                  w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (#compAllRefl (#PAIR (#NUM k) t) w4) ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÉ-APPLY (#NUM k) a‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÉ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÉ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÉ-APPLY b a‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #QTBOOL! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíQTBOOL!‚â° (equalInType-refl (equalInType-TPURE‚Üí eqa))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ b))
                        aw5' = equalInType-QTBOOL!‚ÜíequalTypes-ASSERT‚ÇÉ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-#MP-left-qt‚Üí
                                       n w2 a‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqa)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-QTBOOL!‚Üí n w5 (#APPLY a‚ÇÅ (#NUM k)) #BTRUE (equalInType-ASSERT‚ÇÉ‚Üí n w5 (#APPLY a‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh')))) --lift (p (k , {!!}))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÉ (#APPLY a‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÉ-APPLY n w5 a‚ÇÅ n‚ÇÅ k (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqa)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))) k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #weakBool! w' (#APPLY a‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨Names‚ÜíinhType-ASSERT‚ÇÉ n w6 w3 (#APPLY a‚ÇÅ (#NUM k)) (#¬¨Names-APPLY {a‚ÇÅ} {#NUM k} (equalInType-TPURE‚Üí‚Çó eqa) refl) (lower (weakBool-BTRUE‚Üí w6 (#APPLY a‚ÇÅ (#NUM k)) wbe w6 (‚äë-refl¬∑ w6)))))



-- This version uses NAT! and BOOL!
MPp‚ÇÜ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÜ #lam2AX
MPp‚ÇÜ-inh n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL!} {#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ}
    (Œª w' e ‚Üí isType-#TPURE-NAT!‚ÜíBOOL! w' n)
    aw1
    aw2
  where
    aw1 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL!) a‚ÇÅ a‚ÇÇ
                      ‚Üí equalTypes n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ))
                                         (sub0 a‚ÇÇ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)))
    aw1 w' e a‚ÇÅ a‚ÇÇ eqb rewrite sub0-fun-mp‚ÇÜ a‚ÇÅ | sub0-fun-mp‚ÇÜ a‚ÇÇ =
        eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-TPURE‚Üí eqb)) (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-TPURE‚Üí eqb))

    aw2 : ‚àÄùïé w (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL!) a‚ÇÅ a‚ÇÇ
                        ‚Üí equalInType n w' (sub0 a‚ÇÅ (#[0]FUN #[0]MP-left-qt‚ÇÉ #[0]MP-right-qt‚ÇÉ)) (#APPLY #lam2AX a‚ÇÅ) (#APPLY #lam2AX a‚ÇÇ))
    aw2 w1 e1 a‚ÇÅ a‚ÇÇ eqa =
      ‚â°CTerm‚ÜíequalInType
        (sym (sub0-fun-mp‚ÇÜ a‚ÇÅ))
        (equalInType-FUN
          (‚ÜíequalTypes-#MP-left-qt‚ÇÉ (equalInType-refl (equalInType-TPURE‚Üí eqa)))
          (‚ÜíequalTypes-#MP-right-qt‚ÇÉ (equalInType-refl (equalInType-TPURE‚Üí eqa)))
          aw3)
      where
        aw3 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÉ a‚ÇÑ : CTerm) ‚Üí equalInType n w' (#MP-left-qt‚ÇÉ a‚ÇÅ) a‚ÇÉ a‚ÇÑ
                             ‚Üí equalInType n w' (#MP-right-qt‚ÇÉ a‚ÇÅ) (#APPLY (#APPLY #lam2AX a‚ÇÅ) a‚ÇÉ) (#APPLY (#APPLY #lam2AX a‚ÇÇ) a‚ÇÑ))
        aw3 w2 e2 b‚ÇÅ b‚ÇÇ eqb = ‚ÜíequalInType-SQUASH (Mod.‚àÄùïé-‚ñ° M aw4)
          where
            aw4 : ‚àÄùïé w2 (Œª w' _ ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w' (#SUM-ASSERT‚ÇÖ a‚ÇÅ) t t))
            aw4 w3 e3 = cc (EM {Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY a‚ÇÅ (#NUM k))))})
              where
                cc : Dec (Œ£ ‚Ñï (Œª k ‚Üí inhType n w3 (#ASSERT‚ÇÑ (#APPLY a‚ÇÅ (#NUM k)))))
                     ‚Üí Œ£ CTerm (Œª t ‚Üí equalInType n w3 (#SUM-ASSERT‚ÇÖ a‚ÇÅ) t t)
                cc (yes (k , t , p)) = #PAIR (#NUM k) t , equalInType-SUM (Œª w4 e4 ‚Üí isTypeNAT!) aw5 (Mod.‚àÄùïé-‚ñ° M aw6)
                  where
                    aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí SUMeq (equalInType n w' #NAT!)
                                                  (Œª a b ea ‚Üí equalInType n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                                                  w' (#PAIR (#NUM k) t) (#PAIR (#NUM k) t))
                    aw6 w4 e4 =
                      #NUM k , #NUM k , t , t ,
                      NUM-equalInType-NAT! n w4 k ,
                      #compAllRefl (#PAIR (#NUM k) t) w4 ,
                      (#compAllRefl (#PAIR (#NUM k) t) w4) ,
                      (‚â°CTerm‚ÜíequalInType (sym (sub0-ASSERT‚ÇÑ-APPLY (#NUM k) a‚ÇÅ)) (equalInType-mon p w4 e4))

                    aw5 : ‚àÄùïé w3 (Œª w' _ ‚Üí (a b : CTerm) (ea : equalInType n w' #NAT! a b)
                                        ‚Üí equalTypes n w' (sub0 a (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))) (sub0 b (#[0]ASSERT‚ÇÑ (#[0]APPLY ‚åû a‚ÇÅ ‚åü #[0]VAR))))
                    aw5 w4 e4 a b ea rewrite sub0-ASSERT‚ÇÑ-APPLY a a‚ÇÅ | sub0-ASSERT‚ÇÑ-APPLY b a‚ÇÅ = aw5'
                      where
                        eb : equalInType n w4 #BOOL! (#APPLY a‚ÇÅ a) (#APPLY a‚ÇÅ b)
                        eb = equalInType-FUN‚Üí (‚â°CTerm‚ÜíequalInType #NAT!‚ÜíBOOL!‚â° (equalInType-refl (equalInType-TPURE‚Üí eqa))) w4 (‚äë-trans¬∑ (‚äë-trans¬∑ e2 e3) e4) a b ea

                        aw5' : equalTypes n w4 (#ASSERT‚ÇÑ (#APPLY a‚ÇÅ a)) (#ASSERT‚ÇÑ (#APPLY a‚ÇÅ b))
                        aw5' = equalInType-BOOL!‚ÜíequalTypes-ASSERT‚ÇÑ eb

                -- The hard case...
                cc (no p) = ‚ä•-elim (equalInType-#MP-left-qt‚ÇÉ‚Üí
                                       n w2 a‚ÇÅ b‚ÇÅ b‚ÇÇ
                                       (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqa)) w2 e2)
                                       eqb w3 e3 aw6)
                   where
                     aw6 : ‚àÄùïé w3 (Œª w' _ ‚Üí Œ£ CTerm (Œª n‚ÇÅ ‚Üí Œ£ CTerm (Œª n‚ÇÇ ‚Üí equalInType n w' #NAT! n‚ÇÅ n‚ÇÇ √ó inhType n w' (#ASSERT‚ÇÑ (#APPLY a‚ÇÅ n‚ÇÅ)))) ‚Üí ‚ä•)
                     aw6 w4 e4 (n‚ÇÅ , n‚ÇÇ , n‚àà , inh) = lower (Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw7 (equalInType-NAT!‚Üí n w4 n‚ÇÅ n‚ÇÇ n‚àà)))
                       where
                         aw7 : ‚àÄùïé w4 (Œª w' e' ‚Üí #‚áõ!same‚Ñï w' n‚ÇÅ n‚ÇÇ ‚Üí Lift (lsuc L) ‚ä•)
                         aw7 w5 e5 (k , k‚ÇÅ , k‚ÇÇ) =
                           Mod.‚ñ°-const M (Mod.‚àÄùïé-‚ñ°Func M aw8 (equalInType-BOOL!‚Üí n w5 (#APPLY a‚ÇÅ (#NUM k)) #BTRUE (equalInType-ASSERT‚ÇÑ‚Üí n w5 (#APPLY a‚ÇÅ (#NUM k)) (fst inh') (fst inh') (snd inh')))) --lift (p (k , {!!}))
                           where
                             inh' : inhType n w5 (#ASSERT‚ÇÑ (#APPLY a‚ÇÅ (#NUM k)))
                             inh' = ‚ÜíinhType-ASSERT‚ÇÑ-APPLY n w5 a‚ÇÅ n‚ÇÅ k (equalInType-mon (equalInType-refl (equalInType-TPURE‚Üí eqa)) w5 (‚äë-trans¬∑ e2 (‚äë-trans¬∑ e3 (‚äë-trans¬∑ e4 e5)))) k‚ÇÅ (inhType-mon e5 inh)

                             aw8 : ‚àÄùïé w5 (Œª w' e' ‚Üí #strongBool! w' (#APPLY a‚ÇÅ (#NUM k)) #BTRUE ‚Üí Lift (lsuc L) ‚ä•)
                             aw8 w6 e6 wbe = lift (p (k , #¬¨Names‚ÜíinhType-ASSERT‚ÇÑ
                                                            n w6 w3 (#APPLY a‚ÇÅ (#NUM k))
                                                            (#¬¨Names-APPLY {a‚ÇÅ} {#NUM k} (equalInType-TPURE‚Üí‚Çó eqa) refl)
                                                            (strongBool!-BTRUE‚Üí w6 (#APPLY a‚ÇÅ (#NUM k)) wbe)))


-- This is similar to MPp-inh but proved here for #MPp‚ÇÇ, which is stated using ¬¨¬¨‚àÉ, instead of #MPp, which is stated using ¬¨‚àÄ¬¨
MPp‚ÇÇ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÇ #lam2AX
MPp‚ÇÇ-inh n w =
  ‚Üí‚ààType-PI
    n w (#TPURE #NAT!‚ÜíBOOL) (#TPURE #NAT!‚ÜíBOOL)
    (#[0]FUN #[0]MP-left #[0]MP-right)
    (#[0]FUN #[0]MP-left3 #[0]MP-right)
    #lam2AX #lam2AX (isType-#TPURE-NAT!‚ÜíBOOL w n) p2 (Œª w1 e1 a b h ‚Üí h)
    p3 (MPp-inh n w)
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL) f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left3 #[0]MP-right)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left3 #[0]MP-right)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÅ))
        (sym (sub0-fun-mp‚ÇÇ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left3 (equalInType-TPURE‚Üí f‚àà)) (‚ÜíequalTypes-#MP-right (equalInType-TPURE‚Üí f‚àà)))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (a b‚ÇÅ b‚ÇÇ : CTerm) ‚Üí ‚ààType n w' (#TPURE #NAT!‚ÜíBOOL) a
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left #[0]MP-right)) b‚ÇÅ b‚ÇÇ
                       ‚Üí equalInType n w' (sub0 a (#[0]FUN #[0]MP-left3 #[0]MP-right)) b‚ÇÅ b‚ÇÇ)
    p3 w1 e1 a b‚ÇÅ b‚ÇÇ a‚àà b‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp‚ÇÇ a))
        (‚Üí‚ààType-FUN
           n w1 (#MP-left a) (#MP-left3 a) (#MP-right a) (#MP-right a)
           b‚ÇÅ b‚ÇÇ (‚ÜíequalTypes-#MP-left3 (equalInType-TPURE‚Üí a‚àà)) (‚ÜíequalTypes-#MP-right (equalInType-TPURE‚Üí a‚àà))
           (Œª w2 e2 x y h ‚Üí #MP-left2‚Üí#MP-left n w2 a x y (equalInType-mon (equalInType-TPURE‚Üí a‚àà) w2 e2) (#MP-left3‚Üí#MP-left2 n w2 a x y (equalInType-mon (equalInType-TPURE‚Üí a‚àà) w2 e2) h))
           (Œª w2 e2 a b h ‚Üí h) (‚Üí‚â°equalInType (sub0-fun-mp a) b‚àà))


#lamInfSearchP : CTerm
#lamInfSearchP =
  #LAMBDA -- F
    (#[0]LAMBDA -- cond
      (#[1]PAIR
        (#[1]APPLY
          (#[1]FIX
            (#[1]LAMBDA -- R
              (#[2]LAMBDA -- n
                (#[3]ITE (#[3]APPLY #[3]VAR3 #[3]VAR0)
                         (#[3]VAR0)
                         (#[3]LET (#[3]SUC #[3]VAR0) (#[4]APPLY #[4]VAR2 #[4]VAR0))))))
          (#[1]NUM 0))
        #[1]AX))


#APPLY-#APPLY-#lamInfSearchP : (f a : CTerm) (w : ùïé¬∑)
                               ‚Üí #APPLY (#APPLY #lamInfSearchP f) a #‚áõ #infSearchP f at w
#APPLY-#APPLY-#lamInfSearchP f a w w1 e1 =
  lift (‚áì-from-to‚Üí‚áì {w1} {w1} {‚åú #APPLY (#APPLY #lamInfSearchP f) a ‚åù} {‚åú #infSearchP f ‚åù} (2 , ‚â°pair e refl))
  where
    e : sub ‚åú a ‚åù (PAIR (APPLY (FIX (LAMBDA (LAMBDA (DECIDE (APPLY (shiftDown 3 (shiftUp 0 (shiftUp 0 (shiftUp 0 (shiftUp 0 ‚åú f ‚åù))))) (VAR 0)) (VAR 1) (LET (SUC (VAR 1)) (APPLY (VAR 3) (VAR 0))))))) (NUM 0)) AX)
        ‚â° ‚åú #infSearchP f ‚åù
    e rewrite #shiftUp 0 f
            | #shiftUp 0 f
            | #shiftUp 0 f
            | #shiftUp 0 f
            | #shiftDown 3 f
            | #shiftUp 0 a
            | #shiftUp 0 a
            | #shiftUp 0 a
            | #subv 2 ‚åú a ‚åù ‚åú f ‚åù (CTerm.closed f)
            | #shiftDown 2 f = refl


-- This is similar to MPp‚ÇÇ-inh but proved here for non-truncated sums
MPp‚ÇÉ-inh : (n : ‚Ñï) (w : ùïé¬∑) ‚Üí ‚ààType n w #MPp‚ÇÉ #lamInfSearchP
MPp‚ÇÉ-inh n w =
  equalInType-PI
    {n} {w} {#TPURE #NAT!‚ÜíBOOL} {#[0]FUN #[0]MP-left2 #[0]MP-right2}
    (Œª w1 e1 ‚Üí isType-#TPURE-NAT!‚ÜíBOOL w1 n)
    p2
    p3
  where
    p2 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL) f‚ÇÅ f‚ÇÇ
                       ‚Üí equalTypes n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left2 #[0]MP-right2)) (sub0 f‚ÇÇ (#[0]FUN #[0]MP-left2 #[0]MP-right2)))
    p2 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalTypes
        (sym (sub0-fun-mp‚ÇÉ f‚ÇÅ))
        (sym (sub0-fun-mp‚ÇÉ f‚ÇÇ))
        (eqTypesFUN‚Üê (‚ÜíequalTypes-#MP-left2 (equalInType-TPURE‚Üí f‚àà)) (‚ÜíequalTypes-#MP-right2 (equalInType-TPURE‚Üí f‚àà)))

    p3 : ‚àÄùïé w (Œª w' _ ‚Üí (f‚ÇÅ f‚ÇÇ : CTerm) ‚Üí equalInType n w' (#TPURE #NAT!‚ÜíBOOL) f‚ÇÅ f‚ÇÇ
                       ‚Üí equalInType n w' (sub0 f‚ÇÅ (#[0]FUN #[0]MP-left2 #[0]MP-right2)) (#APPLY #lamInfSearchP f‚ÇÅ) (#APPLY #lamInfSearchP f‚ÇÇ))
    p3 w1 e1 f‚ÇÅ f‚ÇÇ f‚àà =
      ‚Üí‚â°equalInType
        (sym (sub0-fun-mp‚ÇÉ f‚ÇÅ))
        (equalInType-FUN
          (‚ÜíequalTypes-#MP-left2 (equalInType-refl (equalInType-TPURE‚Üí f‚àà)))
          (‚ÜíequalTypes-#MP-right2 (equalInType-refl (equalInType-TPURE‚Üí f‚àà)))
          p4)
      where
        p5 : equalInType n w1 (#FUN (#MP-left3 f‚ÇÅ) (#MP-right f‚ÇÅ)) (#APPLY #lam2AX f‚ÇÅ) (#APPLY #lam2AX f‚ÇÇ)
        p5 = ‚Üí‚â°equalInType
               (sub0-fun-mp‚ÇÇ f‚ÇÅ)
               (snd (snd (equalInType-PI‚Üí {n} {w} {#TPURE #NAT!‚ÜíBOOL} {#[0]FUN #[0]MP-left3 #[0]MP-right}
                                           (MPp‚ÇÇ-inh n w))) w1 e1 f‚ÇÅ f‚ÇÇ f‚àà)

        p4 : ‚àÄùïé w1 (Œª w' _ ‚Üí (a‚ÇÅ a‚ÇÇ : CTerm) ‚Üí equalInType n w' (#MP-left2 f‚ÇÅ) a‚ÇÅ a‚ÇÇ
                            ‚Üí equalInType n w' (#MP-right2 f‚ÇÅ) (#APPLY (#APPLY #lamInfSearchP f‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lamInfSearchP f‚ÇÇ) a‚ÇÇ))
        p4 w2 e2 a‚ÇÅ a‚ÇÇ a‚àà =
          mpSearch
            n w2 f‚ÇÅ f‚ÇÇ
            (#APPLY (#APPLY #lam2AX f‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lam2AX f‚ÇÇ) a‚ÇÇ)
            (#APPLY (#APPLY #lamInfSearchP f‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lamInfSearchP f‚ÇÇ) a‚ÇÇ)
            (equalInType-TPURE‚Üí‚Çó f‚àà) (equalInType-TPURE‚Üí·µ£ f‚àà)
            (#APPLY-#APPLY-#lamInfSearchP f‚ÇÅ a‚ÇÅ w2) (#APPLY-#APPLY-#lamInfSearchP f‚ÇÇ a‚ÇÇ w2)
            (equalInType-mon (equalInType-TPURE‚Üí f‚àà) w2 e2)
            p6
          where
            p6 : equalInType n w2 (#MP-right f‚ÇÅ) (#APPLY (#APPLY #lam2AX f‚ÇÅ) a‚ÇÅ) (#APPLY (#APPLY #lam2AX f‚ÇÇ) a‚ÇÇ)
            p6 = equalInType-FUN‚Üí p5 w2 e2 a‚ÇÅ a‚ÇÇ (#MP-left2‚Üí#MP-left3 n w2 f‚ÇÅ a‚ÇÅ a‚ÇÇ (equalInType-mon (equalInType-TPURE‚Üí (equalInType-refl f‚àà)) w2 e2) a‚àà)

\end{code}[hide]
